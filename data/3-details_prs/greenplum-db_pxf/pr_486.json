{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MzMxODY0", "number": 486, "title": "Serialize Fragment metadata using Kryo", "bodyText": "In PXF 5.16.0, we introduced Kryo to serialize Fragment's userData for\nHive profiles. The original version of boot, combines Fragment metadata\nand userData into metadata. It also serializes metadata into a escaped\nJSON, that is then deserialized by the HttpRequestParser during the\nbridge call. This introduces a regression in the Hive metadata\noptimization. To reduce the payload size, we now serialize metadata\nusing kryo instead of JSON. This commit fixes the regression introduced\nby the original version of boot.", "createdAt": "2020-11-11T17:05:49Z", "url": "https://github.com/greenplum-db/pxf/pull/486", "merged": true, "mergeCommit": {"oid": "905b47d883711c57f977f82216b7a1785ce82ac3"}, "closed": true, "closedAt": "2020-11-18T19:39:53Z", "author": {"login": "frankgh"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbjDR5gH2gAyNTE5MzMxODY0OjNlNTkyYzEyNGQwMDAzNDk1MGNhOTg5Nzg4MzBmY2U1M2ZjNWU3M2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddzv4nAFqTUzMzgwNjYzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3e592c124d00034950ca98978830fce53fc5e73c", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/3e592c124d00034950ca98978830fce53fc5e73c", "committedDate": "2020-11-11T19:23:27Z", "message": "Serialize Fragment metadata using Kryo\n\nIn PXF 5.16.0, we introduced Kryo to serialize Fragment's userData for\nHive profiles. The original version of boot, combines Fragment metadata\nand userData into metadata. It also serializes metadata into a escaped\nJSON, that is then deserialized by the HttpRequestParser during the\nbridge call. This introduces a regression in the Hive metadata\noptimization. To reduce the payload size, we now serialize metadata\nusing kryo instead of JSON. This commit fixes the regression introduced\nby the original version of boot."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ddbe0f3eee15b4339c035b4bab594f02a15143b0", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/ddbe0f3eee15b4339c035b4bab594f02a15143b0", "committedDate": "2020-11-11T17:03:32Z", "message": "Serialize Fragment metadata using Kryo\n\nIn PXF 5.16.0, we introduced Kryo to serialize Fragment's userData for\nHive profiles. The original version of boot, combines Fragment metadata\nand userData into metadata. It also serializes metadata into a escaped\nJSON, that is then deserialized by the HttpRequestParser during the\nbridge call. This introduces a regression in the Hive metadata\noptimization. To reduce the payload size, we now serialize metadata\nusing kryo instead of JSON. This commit fixes the regression introduced\nby the original version of boot."}, "afterCommit": {"oid": "3e592c124d00034950ca98978830fce53fc5e73c", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/3e592c124d00034950ca98978830fce53fc5e73c", "committedDate": "2020-11-11T19:23:27Z", "message": "Serialize Fragment metadata using Kryo\n\nIn PXF 5.16.0, we introduced Kryo to serialize Fragment's userData for\nHive profiles. The original version of boot, combines Fragment metadata\nand userData into metadata. It also serializes metadata into a escaped\nJSON, that is then deserialized by the HttpRequestParser during the\nbridge call. This introduces a regression in the Hive metadata\noptimization. To reduce the payload size, we now serialize metadata\nusing kryo instead of JSON. This commit fixes the regression introduced\nby the original version of boot."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNzU0MDMy", "url": "https://github.com/greenplum-db/pxf/pull/486#pullrequestreview-533754032", "createdAt": "2020-11-18T18:26:18Z", "commit": {"oid": "3e592c124d00034950ca98978830fce53fc5e73c"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyNjoxOVrOH18RDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODo0NTowMVrOH18-sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyMzk4Mw==", "bodyText": "if this becomes a marker interface only, do we still need it ?", "url": "https://github.com/greenplum-db/pxf/pull/486#discussion_r526323983", "createdAt": "2020-11-18T18:26:19Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/FragmentMetadata.java", "diffHunk": "@@ -19,16 +19,9 @@\n \n package org.greenplum.pxf.api.utilities;\n \n-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n-\n /**\n  * Interface that represents Fragment metadata. Each profile can implement it's\n  * own metadata object\n  */\n-@JsonIgnoreProperties(value={ \"className\" }, allowGetters=true)\n public interface FragmentMetadata {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e592c124d00034950ca98978830fce53fc5e73c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNzM1Mw==", "bodyText": "let's mention the soft references ensure the instances in the queue should get deleted when there's a GC memory pressure", "url": "https://github.com/greenplum-db/pxf/pull/486#discussion_r526327353", "createdAt": "2020-11-18T18:31:33Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/SerializationService.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.greenplum.pxf.api.utilities;\n+\n+import com.esotericsoftware.kryo.Kryo;\n+import com.esotericsoftware.kryo.pool.KryoFactory;\n+import com.esotericsoftware.kryo.pool.KryoPool;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SerializationService {\n+\n+    private final KryoPool kryoPool;\n+\n+    public SerializationService() {\n+        // A simple factory that creates kryo objects\n+        KryoFactory factory = Kryo::new;\n+        kryoPool = new KryoPool.Builder(factory).softReferences().build();\n+    }\n+\n+    /**\n+     * By default, kryo pool uses ConcurrentLinkedQueue which is unbounded. To facilitate reuse of\n+     * kryo object call releaseKryo() after done using the kryo instance. The class loader for the\n+     * kryo instance will be set to current thread's context class loader.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e592c124d00034950ca98978830fce53fc5e73c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyODM3MQ==", "bodyText": "are we sure we don't need to reset the classloader back to what it was before ?", "url": "https://github.com/greenplum-db/pxf/pull/486#discussion_r526328371", "createdAt": "2020-11-18T18:33:21Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/SerializationService.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.greenplum.pxf.api.utilities;\n+\n+import com.esotericsoftware.kryo.Kryo;\n+import com.esotericsoftware.kryo.pool.KryoFactory;\n+import com.esotericsoftware.kryo.pool.KryoPool;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SerializationService {\n+\n+    private final KryoPool kryoPool;\n+\n+    public SerializationService() {\n+        // A simple factory that creates kryo objects\n+        KryoFactory factory = Kryo::new;\n+        kryoPool = new KryoPool.Builder(factory).softReferences().build();\n+    }\n+\n+    /**\n+     * By default, kryo pool uses ConcurrentLinkedQueue which is unbounded. To facilitate reuse of\n+     * kryo object call releaseKryo() after done using the kryo instance. The class loader for the\n+     * kryo instance will be set to current thread's context class loader.\n+     *\n+     * @return kryo instance\n+     */\n+    public Kryo borrowKryo() {\n+        Kryo kryo = kryoPool.borrow();\n+        kryo.setClassLoader(Thread.currentThread().getContextClassLoader());\n+        return kryo;\n+    }\n+\n+    /**\n+     * Release kryo instance back to the pool.\n+     *\n+     * @param kryo - kryo instance to be released\n+     */\n+    public void releaseKryo(Kryo kryo) {\n+        kryoPool.release(kryo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e592c124d00034950ca98978830fce53fc5e73c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyOTAxNA==", "bodyText": "this is no longer a JSON (variable name) :)", "url": "https://github.com/greenplum-db/pxf/pull/486#discussion_r526329014", "createdAt": "2020-11-18T18:34:17Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/test/java/org/greenplum/pxf/api/utilities/FragmentMetadataSerDeTest.java", "diffHunk": "@@ -36,60 +35,48 @@ public void testSerialize() throws JsonProcessingException {\n         mapper.registerModule(module);\n \n         DemoFragmentMetadata metadata = new DemoFragmentMetadata(\"abc\");\n-        assertEquals(\"\\\"{\\\\\\\"path\\\\\\\":\\\\\\\"abc\\\\\\\",\\\\\\\"className\\\\\\\":\\\\\\\"org.greenplum.pxf.api.examples.DemoFragmentMetadata\\\\\\\"}\\\"\", mapper.writeValueAsString(metadata));\n+        assertEquals(\"\\\"AQBvcmcuZ3JlZW5wbHVtLnB4Zi5hcGkuZXhhbXBsZXMuRGVtb0ZyYWdtZW50TWV0YWRhdOEBAWFi4w==\\\"\",\n+                mapper.writeValueAsString(metadata));\n \n         TestFragmentMetadata testMetadata = new TestFragmentMetadata(\"test\", 5, 10, new Date(1590649200000L), \"foo\".getBytes(StandardCharsets.UTF_8));\n-        assertEquals(\"\\\"{\\\\\\\"a\\\\\\\":\\\\\\\"test\\\\\\\",\\\\\\\"b\\\\\\\":5,\\\\\\\"c\\\\\\\":10,\\\\\\\"d\\\\\\\":1590649200000,\\\\\\\"e\\\\\\\":\\\\\\\"Zm9v\\\\\\\",\\\\\\\"className\\\\\\\":\\\\\\\"org.greenplum.pxf.api.utilities.FragmentMetadataSerDeTest$TestFragmentMetadata\\\\\\\"}\\\"\",\n+        assertEquals(\"\\\"AQDPAW9yZy5ncmVlbnBsdW0ucHhmLmFwaS51dGlsaXRpZXMuRnJhZ21lbnRNZXRhZGF0YVNlckRlVGVzdCRUZXN0RnJhZ21lbnRNZXRhZGF0YQEBdGVz9AoUAQFqYXZhLnNxbC5EYXTlAYC70tClLgEEZm9v\\\"\",\n                 mapper.writeValueAsString(testMetadata));\n     }\n \n     @Test\n-    public void testDeserialize() throws JsonProcessingException {\n+    public void testDeserialize() {\n \n-        String metadataJson = \"{\\\"path\\\": \\\"deserialize me\\\", \\\"className\\\": \\\"org.greenplum.pxf.api.examples.DemoFragmentMetadata\\\" }\";\n+        String metadataJson = \"\\\"AQBvcmcuZ3JlZW5wbHVtLnB4Zi5hcGkuZXhhbXBsZXMuRGVtb0ZyYWdtZW50TWV0YWRhdOEBAWFi4w==\\\"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e592c124d00034950ca98978830fce53fc5e73c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMzMTg5OQ==", "bodyText": "do we need to release kryo here ?", "url": "https://github.com/greenplum-db/pxf/pull/486#discussion_r526331899", "createdAt": "2020-11-18T18:38:57Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveAccessor.java", "diffHunk": "@@ -657,9 +656,17 @@ JobConf getJobConf() {\n         return jobConf;\n     }\n \n-    protected Properties getSerdeProperties(byte[] userData) {\n-        if (userData == null)\n-            throw new IllegalArgumentException(\"propsString is mandatory to initialize serde.\");\n-        return hiveUtilities.getKryo().readObject(new Input(userData), Properties.class);\n+\n+    /**\n+     * Serializes an object into a Base64 encoded String using Kryo serialization\n+     *\n+     * @param object the object to serialize\n+     * @return the serialized object as a String\n+     */\n+    private String toKryoString(Object object) {\n+        Output out = new Output(4 * 1024, 10 * 1024 * 1024);\n+        hiveUtilities.getKryo().writeObject(out, object);\n+        out.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e592c124d00034950ca98978830fce53fc5e73c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMzNTY2Ng==", "bodyText": "are we still using thread locals ? I thought we now use KryoPool ?", "url": "https://github.com/greenplum-db/pxf/pull/486#discussion_r526335666", "createdAt": "2020-11-18T18:45:01Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/utilities/HiveUtilities.java", "diffHunk": "@@ -57,7 +56,6 @@\n     // serializer is thread safe.\n     private final ThreadLocal<Kryo> kryo = ThreadLocal.withInitial(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e592c124d00034950ca98978830fce53fc5e73c"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d263597736bf2e048ee2ac153d54f2d1cb0d0ed", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/7d263597736bf2e048ee2ac153d54f2d1cb0d0ed", "committedDate": "2020-11-18T19:21:03Z", "message": "Address PR Feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a77ced854baa435bbcb6827dfa9d8f7d8f23b2eb", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/a77ced854baa435bbcb6827dfa9d8f7d8f23b2eb", "committedDate": "2020-11-18T19:23:39Z", "message": "address PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzODEwODM5", "url": "https://github.com/greenplum-db/pxf/pull/486#pullrequestreview-533810839", "createdAt": "2020-11-18T19:38:46Z", "commit": {"oid": "a77ced854baa435bbcb6827dfa9d8f7d8f23b2eb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzODA2NjM5", "url": "https://github.com/greenplum-db/pxf/pull/486#pullrequestreview-533806639", "createdAt": "2020-11-18T19:33:22Z", "commit": {"oid": "a77ced854baa435bbcb6827dfa9d8f7d8f23b2eb"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOTozMzoyMlrOH1-zCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOTo0NzoyM1rOH1_Uvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2NTQ0OQ==", "bodyText": "Should we use named constants here? I am assuming this is 4kb and 10MB but I could be wrong.", "url": "https://github.com/greenplum-db/pxf/pull/486#discussion_r526365449", "createdAt": "2020-11-18T19:33:22Z", "author": {"login": "bradfordb-vmware"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/FragmentMetadataSerDe.java", "diffHunk": "@@ -1,55 +1,56 @@\n package org.greenplum.pxf.api.utilities;\n \n+import com.esotericsoftware.kryo.Kryo;\n+import com.esotericsoftware.kryo.io.Input;\n+import com.esotericsoftware.kryo.io.Output;\n import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+import org.apache.commons.codec.binary.Base64;\n import org.springframework.stereotype.Component;\n \n import java.io.IOException;\n \n /**\n- * This class serializes and deserializes {@link FragmentMetadata} objects into\n- * JSON.\n+ * This class serializes and deserializes {@link FragmentMetadata} objects.\n  */\n @Component\n public class FragmentMetadataSerDe extends StdSerializer<FragmentMetadata> {\n \n     private static final long serialVersionUID = 123173996615107417L;\n-    private static final String CLASSNAME = \"className\";\n-\n-    private final ObjectMapper mapper;\n+    private final SerializationService serializationService;\n \n     /**\n      * Private constructor to prevent initialization\n      */\n-    public FragmentMetadataSerDe() {\n+    public FragmentMetadataSerDe(SerializationService serializationService) {\n         super(FragmentMetadata.class);\n-        mapper = new ObjectMapper();\n+        this.serializationService = serializationService;\n     }\n \n     @Override\n-    public void serialize(FragmentMetadata value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-        gen.writeString(mapper.writeValueAsString(value));\n-    }\n-\n-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-    public FragmentMetadata deserialize(String json) throws JsonProcessingException {\n-        JsonNode node = mapper.readTree(json);\n-        String className = node.get(CLASSNAME).textValue();\n-\n-        Class klass = getObjectClass(className);\n-        return (FragmentMetadata) mapper.readValue(json, klass);\n+    public void serialize(FragmentMetadata value, JsonGenerator gen, SerializerProvider provider)\n+            throws IOException {\n+        Output out = new Output(4 * 1024, 10 * 1024 * 1024);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77ced854baa435bbcb6827dfa9d8f7d8f23b2eb"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2OTM2MQ==", "bodyText": "Is the encoding done by the writeClassAndObject() call or the writeBinary() call? It seems odd that serialize doesn't have an explicit call to encode to Base64 but that deserialize does have a call to decode.", "url": "https://github.com/greenplum-db/pxf/pull/486#discussion_r526369361", "createdAt": "2020-11-18T19:39:32Z", "author": {"login": "bradfordb-vmware"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/FragmentMetadataSerDe.java", "diffHunk": "@@ -1,55 +1,56 @@\n package org.greenplum.pxf.api.utilities;\n \n+import com.esotericsoftware.kryo.Kryo;\n+import com.esotericsoftware.kryo.io.Input;\n+import com.esotericsoftware.kryo.io.Output;\n import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+import org.apache.commons.codec.binary.Base64;\n import org.springframework.stereotype.Component;\n \n import java.io.IOException;\n \n /**\n- * This class serializes and deserializes {@link FragmentMetadata} objects into\n- * JSON.\n+ * This class serializes and deserializes {@link FragmentMetadata} objects.\n  */\n @Component\n public class FragmentMetadataSerDe extends StdSerializer<FragmentMetadata> {\n \n     private static final long serialVersionUID = 123173996615107417L;\n-    private static final String CLASSNAME = \"className\";\n-\n-    private final ObjectMapper mapper;\n+    private final SerializationService serializationService;\n \n     /**\n      * Private constructor to prevent initialization\n      */\n-    public FragmentMetadataSerDe() {\n+    public FragmentMetadataSerDe(SerializationService serializationService) {\n         super(FragmentMetadata.class);\n-        mapper = new ObjectMapper();\n+        this.serializationService = serializationService;\n     }\n \n     @Override\n-    public void serialize(FragmentMetadata value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-        gen.writeString(mapper.writeValueAsString(value));\n-    }\n-\n-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-    public FragmentMetadata deserialize(String json) throws JsonProcessingException {\n-        JsonNode node = mapper.readTree(json);\n-        String className = node.get(CLASSNAME).textValue();\n-\n-        Class klass = getObjectClass(className);\n-        return (FragmentMetadata) mapper.readValue(json, klass);\n+    public void serialize(FragmentMetadata value, JsonGenerator gen, SerializerProvider provider)\n+            throws IOException {\n+        Output out = new Output(4 * 1024, 10 * 1024 * 1024);\n+        Kryo kryo = serializationService.borrowKryo();\n+        try {\n+            kryo.writeClassAndObject(out, value);\n+            out.close();\n+            // Serialized fragment metadata is base64 encoded", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77ced854baa435bbcb6827dfa9d8f7d8f23b2eb"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM3MTgyMg==", "bodyText": "It doesn't look like the class as setters generated. Did we need to remove the final modifiers because of how kyro does serialization and deserialization?", "url": "https://github.com/greenplum-db/pxf/pull/486#discussion_r526371822", "createdAt": "2020-11-18T19:43:43Z", "author": {"login": "bradfordb-vmware"}, "path": "server/pxf-hbase/src/main/java/org/greenplum/pxf/plugins/hbase/HBaseFragmentMetadata.java", "diffHunk": "@@ -12,23 +11,20 @@\n  * Fragment metadata for HBase profiles\n  */\n @Getter\n+@NoArgsConstructor\n public class HBaseFragmentMetadata implements FragmentMetadata {\n \n-    private final byte[] startKey;\n+    private byte[] startKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77ced854baa435bbcb6827dfa9d8f7d8f23b2eb"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM3MjQzNg==", "bodyText": "Echoing my comment from HBaseFragmentMetadata above.", "url": "https://github.com/greenplum-db/pxf/pull/486#discussion_r526372436", "createdAt": "2020-11-18T19:44:43Z", "author": {"login": "bradfordb-vmware"}, "path": "server/pxf-hdfs/src/main/java/org/greenplum/pxf/plugins/hdfs/HcfsFragmentMetadata.java", "diffHunk": "@@ -1,27 +1,24 @@\n package org.greenplum.pxf.plugins.hdfs;\n \n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n import lombok.Getter;\n+import lombok.NoArgsConstructor;\n import org.apache.hadoop.mapred.FileSplit;\n import org.greenplum.pxf.api.utilities.FragmentMetadata;\n \n+@NoArgsConstructor\n public class HcfsFragmentMetadata implements FragmentMetadata {\n \n     @Getter\n-    private final long start;\n+    protected long start;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77ced854baa435bbcb6827dfa9d8f7d8f23b2eb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM3NDA3OQ==", "bodyText": "Context question: did some other code change require a change in this methods signature?", "url": "https://github.com/greenplum-db/pxf/pull/486#discussion_r526374079", "createdAt": "2020-11-18T19:47:23Z", "author": {"login": "bradfordb-vmware"}, "path": "server/pxf-hdfs/src/main/java/org/greenplum/pxf/plugins/hdfs/utilities/HdfsUtilities.java", "diffHunk": "@@ -53,18 +44,16 @@\n      * fragment metadata is null, a {@link FileSplit} with zero start and length\n      * is returned.\n      *\n-     * @param context request input data\n+     * @param file     the file name for the split\n+     * @param metadata the fragment metadataa\n      * @return FileSplit with fragment metadata\n      */\n-    public static FileSplit parseFileSplit(RequestContext context) {\n-        HcfsFragmentMetadata metadata = context.getFragmentMetadata();\n-\n+    public static FileSplit parseFileSplit(String file, HcfsFragmentMetadata metadata) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77ced854baa435bbcb6827dfa9d8f7d8f23b2eb"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4945, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}