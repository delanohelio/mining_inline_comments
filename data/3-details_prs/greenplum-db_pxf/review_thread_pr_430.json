{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0MjM2NTU2", "number": 430, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzoxMTozNFrOEiXXFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjozMDoyNFrOEiZj7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDY5NzgzOnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/main/java/org/apache/hadoop/security/PxfUserGroupInformation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzoxMTozNFrOHQMu7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDozODozMlrOHQZwGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0Nzg4Ng==", "bodyText": "formatting ?", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486747886", "createdAt": "2020-09-11T03:11:34Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/apache/hadoop/security/PxfUserGroupInformation.java", "diffHunk": "@@ -84,11 +69,10 @@ public static PxfUserGroupInformation getInstance() {\n      * @param configDirectory the path to the configuration files for the external system\n      * @param principal       the principal name to load from the keytab\n      * @param keytabFilename  the path to the keytab file\n-     * @throws IOException\n+     * @throws IOException           when an IO error occurs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MTE3OA==", "bodyText": "IntelliJ aligns the IOException message and the KerberosAuthException message.", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486961178", "createdAt": "2020-09-11T10:38:32Z", "author": {"login": "frankgh"}, "path": "server/pxf-api/src/main/java/org/apache/hadoop/security/PxfUserGroupInformation.java", "diffHunk": "@@ -84,11 +69,10 @@ public static PxfUserGroupInformation getInstance() {\n      * @param configDirectory the path to the configuration files for the external system\n      * @param principal       the principal name to load from the keytab\n      * @param keytabFilename  the path to the keytab file\n-     * @throws IOException\n+     * @throws IOException           when an IO error occurs.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0Nzg4Ng=="}, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDcwMDI3OnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/main/java/org/apache/hadoop/security/PxfUserGroupInformation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzoxMzowNVrOHQMwdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDozODo0NlrOHQZwfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0ODI3OQ==", "bodyText": "formatting ?", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486748279", "createdAt": "2020-09-11T03:13:05Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/apache/hadoop/security/PxfUserGroupInformation.java", "diffHunk": "@@ -137,7 +121,7 @@ LoginSession loginUserFromKeytab(Configuration configuration, String serverName,\n      *\n      * @param serverName   the name of the server\n      * @param loginSession the login session\n-     * @throws IOException\n+     * @throws IOException           when an IO error occurs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MTI3Nw==", "bodyText": "same", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486961277", "createdAt": "2020-09-11T10:38:46Z", "author": {"login": "frankgh"}, "path": "server/pxf-api/src/main/java/org/apache/hadoop/security/PxfUserGroupInformation.java", "diffHunk": "@@ -137,7 +121,7 @@ LoginSession loginUserFromKeytab(Configuration configuration, String serverName,\n      *\n      * @param serverName   the name of the server\n      * @param loginSession the login session\n-     * @throws IOException\n+     * @throws IOException           when an IO error occurs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0ODI3OQ=="}, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDcxMjk3OnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzoyMDozN1rOHQM3qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo0MTowNFrOHQZ0dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1MDEyMw==", "bodyText": "if you're inside enum type already, do you need EnumSet or can you use smith like:\nfor (DataType type : DataType.values())  ?", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486750123", "createdAt": "2020-09-11T03:20:37Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java", "diffHunk": "@@ -61,20 +59,27 @@\n \n     UNSUPPORTED_TYPE(-1);\n \n-    private static final Map<Integer, DataType> lookup = new HashMap<>();\n+    private static final int[] OID_ARRAY;\n+    private static final DataType[] DATA_TYPES;\n     private static final int[] NOT_TEXT = {BIGINT.OID, BOOLEAN.OID, BYTEA.OID,\n             FLOAT8.OID, INTEGER.OID, REAL.OID, SMALLINT.OID};\n \n     static {\n-\n         INT2ARRAY.typeElem = SMALLINT;\n         INT4ARRAY.typeElem = INTEGER;\n         INT8ARRAY.typeElem = BIGINT;\n         BOOLARRAY.typeElem = BOOLEAN;\n         TEXTARRAY.typeElem = TEXT;\n \n-        for (DataType dt : EnumSet.allOf(DataType.class)) {\n-            lookup.put(dt.getOID(), dt);\n+        EnumSet<DataType> set = EnumSet.allOf(DataType.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MjI5Mw==", "bodyText": "yeah, I can use that instead.", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486962293", "createdAt": "2020-09-11T10:41:04Z", "author": {"login": "frankgh"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java", "diffHunk": "@@ -61,20 +59,27 @@\n \n     UNSUPPORTED_TYPE(-1);\n \n-    private static final Map<Integer, DataType> lookup = new HashMap<>();\n+    private static final int[] OID_ARRAY;\n+    private static final DataType[] DATA_TYPES;\n     private static final int[] NOT_TEXT = {BIGINT.OID, BOOLEAN.OID, BYTEA.OID,\n             FLOAT8.OID, INTEGER.OID, REAL.OID, SMALLINT.OID};\n \n     static {\n-\n         INT2ARRAY.typeElem = SMALLINT;\n         INT4ARRAY.typeElem = INTEGER;\n         INT8ARRAY.typeElem = BIGINT;\n         BOOLARRAY.typeElem = BOOLEAN;\n         TEXTARRAY.typeElem = TEXT;\n \n-        for (DataType dt : EnumSet.allOf(DataType.class)) {\n-            lookup.put(dt.getOID(), dt);\n+        EnumSet<DataType> set = EnumSet.allOf(DataType.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1MDEyMw=="}, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDczMDk0OnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzozMTozOVrOHQNB9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzozMTozOVrOHQNB9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1Mjc1OQ==", "bodyText": "let's put a comment here that performance profiling proved this is faster than a map lookup so it does not get refactored later.", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486752759", "createdAt": "2020-09-11T03:31:39Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java", "diffHunk": "@@ -92,13 +97,17 @@\n      * @return the corresponding DataType if exists, else returns {@link #UNSUPPORTED_TYPE}\n      */\n     public static DataType get(int OID) {\n-        DataType type = lookup.get(OID);\n-        return type == null ? UNSUPPORTED_TYPE : type;\n+        for (int i = 0; i < OID_ARRAY.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDc0MjA3OnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzozODozNFrOHQNITw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzozODozNFrOHQNITw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1NDM4Mw==", "bodyText": "technically, UNSUPPORTED_TYPE.typeElem == null so this check is redundant", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486754383", "createdAt": "2020-09-11T03:38:34Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java", "diffHunk": "@@ -92,13 +97,17 @@\n      * @return the corresponding DataType if exists, else returns {@link #UNSUPPORTED_TYPE}\n      */\n     public static DataType get(int OID) {\n-        DataType type = lookup.get(OID);\n-        return type == null ? UNSUPPORTED_TYPE : type;\n+        for (int i = 0; i < OID_ARRAY.length; i++) {\n+            if (OID == OID_ARRAY[i]) {\n+                return DATA_TYPES[i];\n+            }\n+        }\n+        return UNSUPPORTED_TYPE;\n     }\n \n     public static boolean isArrayType(int OID) {\n-        DataType type = lookup.get(OID);\n-        return type != null && type.typeElem != null;\n+        DataType type = get(OID);\n+        return type != UNSUPPORTED_TYPE && type.typeElem != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDc0NTYxOnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/security/SecureLogin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzo0MDozOVrOHQNKTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzo0MDozOVrOHQNKTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1NDg5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private PxfUserGroupInformation pxfUserGroupInformation;\n          \n          \n            \n                private final PxfUserGroupInformation pxfUserGroupInformation;", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486754892", "createdAt": "2020-09-11T03:40:39Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/security/SecureLogin.java", "diffHunk": "@@ -69,7 +69,12 @@\n     /**\n      * Package-private for testing\n      */\n-    static PxfUserGroupInformation pxfUserGroupInformation = PxfUserGroupInformation.getInstance();\n+    private PxfUserGroupInformation pxfUserGroupInformation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDc0ODUyOnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/FragmentMetadataSerDe.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzo0MjoyMVrOHQNL2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODoxNDowNlrOHQo93Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1NTI4OQ==", "bodyText": "should this be private ?", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486755289", "createdAt": "2020-09-11T03:42:21Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/FragmentMetadataSerDe.java", "diffHunk": "@@ -6,42 +6,29 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+import org.springframework.stereotype.Component;\n \n import java.io.IOException;\n \n /**\n  * This class serializes and deserializes {@link FragmentMetadata} objects into\n  * JSON.\n  */\n+@Component\n public class FragmentMetadataSerDe extends StdSerializer<FragmentMetadata> {\n \n     private static final long serialVersionUID = 123173996615107417L;\n     private static final String CLASSNAME = \"className\";\n-\n-    /**\n-     * Singleton instance of the FragmentMetadataSerDe\n-     */\n-    private static final FragmentMetadataSerDe INSTANCE = new FragmentMetadataSerDe();\n-\n     public final ObjectMapper mapper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxMDQ2MQ==", "bodyText": "yes", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r487210461", "createdAt": "2020-09-11T18:14:06Z", "author": {"login": "frankgh"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/FragmentMetadataSerDe.java", "diffHunk": "@@ -6,42 +6,29 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+import org.springframework.stereotype.Component;\n \n import java.io.IOException;\n \n /**\n  * This class serializes and deserializes {@link FragmentMetadata} objects into\n  * JSON.\n  */\n+@Component\n public class FragmentMetadataSerDe extends StdSerializer<FragmentMetadata> {\n \n     private static final long serialVersionUID = 123173996615107417L;\n     private static final String CLASSNAME = \"className\";\n-\n-    /**\n-     * Singleton instance of the FragmentMetadataSerDe\n-     */\n-    private static final FragmentMetadataSerDe INSTANCE = new FragmentMetadataSerDe();\n-\n     public final ObjectMapper mapper;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1NTI4OQ=="}, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDc1OTM2OnYy", "diffSide": "RIGHT", "path": "server/pxf-hdfs/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzo0ODo0NFrOHQNSMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODoxNjo0NlrOHQpDAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1NjkxMg==", "bodyText": "what is this for ?", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486756912", "createdAt": "2020-09-11T03:48:44Z", "author": {"login": "denalex"}, "path": "server/pxf-hdfs/build.gradle", "diffHunk": "@@ -82,6 +82,7 @@ dependencies {\n      *******************************/\n \n     testCompileOnly(\"org.apache.hadoop:hadoop-annotations:${hadoopVersion}\")\n+    testImplementation(\"io.airlift:aircompressor:0.8\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxMTc3OA==", "bodyText": "It's used in the HcfsTypeTest. In the testUriForWriteWithLzoCodec, we get an URI with the LZOCodec: type.getUriForWrite(context, new LzopCodec()). I'll add a comment.", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r487211778", "createdAt": "2020-09-11T18:16:46Z", "author": {"login": "frankgh"}, "path": "server/pxf-hdfs/build.gradle", "diffHunk": "@@ -82,6 +82,7 @@ dependencies {\n      *******************************/\n \n     testCompileOnly(\"org.apache.hadoop:hadoop-annotations:${hadoopVersion}\")\n+    testImplementation(\"io.airlift:aircompressor:0.8\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1NjkxMg=="}, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDc2OTIyOnYy", "diffSide": "RIGHT", "path": "server/pxf-hdfs/src/main/java/org/greenplum/pxf/plugins/hdfs/LineBreakAccessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzo1NDozMlrOHQNXzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODoyMDoyOVrOHQpKIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1ODM1MQ==", "bodyText": "if this is for testing, should it be package visibility ?", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486758351", "createdAt": "2020-09-11T03:54:32Z", "author": {"login": "denalex"}, "path": "server/pxf-hdfs/src/main/java/org/greenplum/pxf/plugins/hdfs/LineBreakAccessor.java", "diffHunk": "@@ -62,8 +59,12 @@\n      * Constructs a LineBreakAccessor.\n      */\n     public LineBreakAccessor() {\n+        this(SpringContext.getBean(CodecFactory.class));\n+    }\n+\n+    public LineBreakAccessor(CodecFactory codecFactory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxMzYwMw==", "bodyText": "This is only visible for testing, I'll make it package private and add the @VisibleForTesting annotation", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r487213603", "createdAt": "2020-09-11T18:20:29Z", "author": {"login": "frankgh"}, "path": "server/pxf-hdfs/src/main/java/org/greenplum/pxf/plugins/hdfs/LineBreakAccessor.java", "diffHunk": "@@ -62,8 +59,12 @@\n      * Constructs a LineBreakAccessor.\n      */\n     public LineBreakAccessor() {\n+        this(SpringContext.getBean(CodecFactory.class));\n+    }\n+\n+    public LineBreakAccessor(CodecFactory codecFactory) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1ODM1MQ=="}, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDk3NzgyOnYy", "diffSide": "RIGHT", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/HttpRequestParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNTo1NDozNlrOHQPRHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOToyOTo1OVrOHQrQ9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc4OTQwNw==", "bodyText": "how is this still a Component when it has RequestContext as a member ?", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486789407", "createdAt": "2020-09-11T05:54:36Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/HttpRequestParser.java", "diffHunk": "@@ -55,6 +55,11 @@ public HttpRequestParser(PluginConf pluginConf, RequestContext context) {\n         this.context = context;\n     }\n \n+    @Autowired\n+    public void setMetadataSerDe(FragmentMetadataSerDe metadataSerDe) {\n+        this.metadataSerDe = metadataSerDe;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI0ODExOQ==", "bodyText": "yes, I removed it now.", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r487248119", "createdAt": "2020-09-11T19:29:59Z", "author": {"login": "frankgh"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/HttpRequestParser.java", "diffHunk": "@@ -55,6 +55,11 @@ public HttpRequestParser(PluginConf pluginConf, RequestContext context) {\n         this.context = context;\n     }\n \n+    @Autowired\n+    public void setMetadataSerDe(FragmentMetadataSerDe metadataSerDe) {\n+        this.metadataSerDe = metadataSerDe;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc4OTQwNw=="}, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTA0MjEwOnYy", "diffSide": "RIGHT", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/FragmentsResponseFormatter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoyMzozNVrOHQP3QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoyMzozNVrOHQP3QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5OTE2OA==", "bodyText": "better to use constructor dependency injection and final fields", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486799168", "createdAt": "2020-09-11T06:23:35Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/FragmentsResponseFormatter.java", "diffHunk": "@@ -32,9 +35,17 @@\n  * Utility class for converting Fragments into a {@link FragmentsResponse} that\n  * will serialize them into JSON format.\n  */\n+@Component\n public class FragmentsResponseFormatter {\n \n-    private static final Log LOG = LogFactory.getLog(FragmentsResponseFormatter.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(FragmentsResponseFormatter.class);\n+\n+    private FragmentMetadataSerDe metadataSerDe;\n+\n+    @Autowired\n+    public void setMetadataSerDe(FragmentMetadataSerDe metadataSerDe) {\n+        this.metadataSerDe = metadataSerDe;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTA1ODM5OnYy", "diffSide": "RIGHT", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/utilities/PluginFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjozMDoyNFrOHQQAtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo1NToxOVrOHRY-jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwMTU5MQ==", "bodyText": "not even sure we need this interface anymore", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486801591", "createdAt": "2020-09-11T06:30:24Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/utilities/PluginFactory.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.greenplum.pxf.service.utilities;\n+\n+import org.greenplum.pxf.api.model.Plugin;\n+import org.greenplum.pxf.api.model.RequestContext;\n+\n+/**\n+ * Factory interface for getting instances of the plugins based on their class names.\n+ *\n+ * @param <T> interface that the resulting plugin should implement\n+ */\n+public interface PluginFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyMDk5Nw==", "bodyText": "I re-introduced it because we need a way to get the Plugins", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r487220997", "createdAt": "2020-09-11T18:35:48Z", "author": {"login": "frankgh"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/utilities/PluginFactory.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.greenplum.pxf.service.utilities;\n+\n+import org.greenplum.pxf.api.model.Plugin;\n+import org.greenplum.pxf.api.model.RequestContext;\n+\n+/**\n+ * Factory interface for getting instances of the plugins based on their class names.\n+ *\n+ * @param <T> interface that the resulting plugin should implement\n+ */\n+public interface PluginFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwMTU5MQ=="}, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk5NzA2OQ==", "bodyText": "spoke offline with Alex, and he meant the interface is no longer needed. It's been removed", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r487997069", "createdAt": "2020-09-14T14:55:19Z", "author": {"login": "frankgh"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/utilities/PluginFactory.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.greenplum.pxf.service.utilities;\n+\n+import org.greenplum.pxf.api.model.Plugin;\n+import org.greenplum.pxf.api.model.RequestContext;\n+\n+/**\n+ * Factory interface for getting instances of the plugins based on their class names.\n+ *\n+ * @param <T> interface that the resulting plugin should implement\n+ */\n+public interface PluginFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwMTU5MQ=="}, "originalCommit": {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3444, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}