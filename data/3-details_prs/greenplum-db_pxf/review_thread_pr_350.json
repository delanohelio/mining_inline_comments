{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNjkyNjA4", "number": 350, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODowMTo0NFrOD6XBFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNDo0NzoxNFrOD61P9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTIxMTEwOnYy", "diffSide": "RIGHT", "path": "concourse/docker/mapr/README.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODowMTo0NFrOGSKCmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMToyNTo1NVrOGS3hcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5MjA1Nw==", "bodyText": "Can we maybe refer to GCR project ID as GCR_PROJECT_ID so that we can set it up in our dev environments without risking conflict with anything else ? Applies here and in all other files in this PR. Or does it have to be exactly PROJECT_ID for Cloudbuild to set it up properly ?", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r421692057", "createdAt": "2020-05-07T18:01:44Z", "author": {"login": "denalex"}, "path": "concourse/docker/mapr/README.md", "diffHunk": "@@ -0,0 +1,20 @@\n+# How to build the pxf-dev-mapr docker image locally?\n+\n+Build the docker images on your local system. Run the following command to\n+build the image:\n+\n+### CentOS 7\n+\n+```\n+docker build \\\n+  --build-arg=BASE_IMAGE=gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb5-centos7-test-pxf:latest \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxNjcwMw==", "bodyText": "we can do it , but not on the cloudbuild files.", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r421816703", "createdAt": "2020-05-07T21:52:52Z", "author": {"login": "frankgh"}, "path": "concourse/docker/mapr/README.md", "diffHunk": "@@ -0,0 +1,20 @@\n+# How to build the pxf-dev-mapr docker image locally?\n+\n+Build the docker images on your local system. Run the following command to\n+build the image:\n+\n+### CentOS 7\n+\n+```\n+docker build \\\n+  --build-arg=BASE_IMAGE=gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb5-centos7-test-pxf:latest \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5MjA1Nw=="}, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzNzIzMg==", "bodyText": "done", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r422437232", "createdAt": "2020-05-09T01:25:55Z", "author": {"login": "frankgh"}, "path": "concourse/docker/mapr/README.md", "diffHunk": "@@ -0,0 +1,20 @@\n+# How to build the pxf-dev-mapr docker image locally?\n+\n+Build the docker images on your local system. Run the following command to\n+build the image:\n+\n+### CentOS 7\n+\n+```\n+docker build \\\n+  --build-arg=BASE_IMAGE=gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb5-centos7-test-pxf:latest \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5MjA1Nw=="}, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTIzNDAxOnYy", "diffSide": "RIGHT", "path": "concourse/docker/pxf-build-base/Dockerfile", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODowNzo1NVrOGSKQrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODowNzo1NVrOGSKQrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5NTY2Mg==", "bodyText": "the proper command to use would be mvn dependency:go-offline which will fetch all pom / jar / plugins.", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r421695662", "createdAt": "2020-05-07T18:07:55Z", "author": {"login": "denalex"}, "path": "concourse/docker/pxf-build-base/Dockerfile", "diffHunk": "@@ -0,0 +1,33 @@\n+FROM maven:3.6-openjdk-8-slim\n+\n+# install build dependencies for PXF\n+RUN apt-get update && \\\n+    apt-get install -y \\\n+        curl \\\n+        git \\\n+        make \\\n+        unzip \\\n+        wget && \\\n+    apt-get clean && \\\n+    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n+\n+# install go && go utilities\n+RUN cd /tmp && \\\n+    wget -O go.tgz -q https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz && \\\n+    tar -C /usr/local -xzf go.tgz && rm go.tgz && \\\n+    GOPATH=/opt/go /usr/local/go/bin/go get github.com/golang/dep/cmd/dep && \\\n+    GOPATH=/opt/go /usr/local/go/bin/go get github.com/onsi/ginkgo/ginkgo\n+\n+ADD . /tmp/pxf_src\n+\n+# build pxf server and pxf automation\n+RUN export BUILD_PARAMS=-Dorg.gradle.daemon=false && \\\n+    GOPATH=/opt/go PATH=/opt/go/bin:/usr/local/go/bin:$PATH make -C /tmp/pxf_src tar && \\\n+    PXF_HOME=/tmp/pxf_src/server/build/stage make -C /tmp/pxf_src/automation dev && \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTI0NTYyOnYy", "diffSide": "RIGHT", "path": "concourse/docker/pxf-dev-base/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxMDo0OVrOGSKXwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDozNTo0MlrOGS3JtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5NzQ3Mw==", "bodyText": "can we get an example here on what <REGISTRY_PATH> and <PATH_TO_YOUR_DOCKER_WORKSPACE> can look like ?", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r421697473", "createdAt": "2020-05-07T18:10:49Z", "author": {"login": "denalex"}, "path": "concourse/docker/pxf-dev-base/README.md", "diffHunk": "@@ -0,0 +1,57 @@\n+# How to build pxf-dev-base docker images locally?\n+\n+The generated images are the base images for the CDH, HDP2, HDP3, and MapR\n+images. This guide assumes the PXF repository lives under the `~/workspace/pxf`\n+directory. The `cloudbuild.yaml` file produces the following docker images:\n+\n+### Docker gpdb5-centos6-test-pxf-image image\n+\n+Build this image for Greenplum 5 running on CentOS 6. Run the following\n+command to build the image:\n+\n+    pushd ~/workspace/pxf/concourse/docker/pxf-dev-base/\n+    docker build \\\n+      --build-arg=BASE_IMAGE=<REGISTRY_PATH>/centos-gpdb-dev:6-gcc6.2-llvm3.7 \\\n+      --tag=gpdb5-centos6-test-pxf \\\n+      -f ~/workspace/pxf/concourse/docker/pxf-dev-base/gpdb5/centos6/Dockerfile \\\n+      <PATH_TO_YOUR_DOCKER_WORKSPACE>\n+    popd\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTE1Ng==", "bodyText": "fixed", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r422431156", "createdAt": "2020-05-09T00:35:42Z", "author": {"login": "frankgh"}, "path": "concourse/docker/pxf-dev-base/README.md", "diffHunk": "@@ -0,0 +1,57 @@\n+# How to build pxf-dev-base docker images locally?\n+\n+The generated images are the base images for the CDH, HDP2, HDP3, and MapR\n+images. This guide assumes the PXF repository lives under the `~/workspace/pxf`\n+directory. The `cloudbuild.yaml` file produces the following docker images:\n+\n+### Docker gpdb5-centos6-test-pxf-image image\n+\n+Build this image for Greenplum 5 running on CentOS 6. Run the following\n+command to build the image:\n+\n+    pushd ~/workspace/pxf/concourse/docker/pxf-dev-base/\n+    docker build \\\n+      --build-arg=BASE_IMAGE=<REGISTRY_PATH>/centos-gpdb-dev:6-gcc6.2-llvm3.7 \\\n+      --tag=gpdb5-centos6-test-pxf \\\n+      -f ~/workspace/pxf/concourse/docker/pxf-dev-base/gpdb5/centos6/Dockerfile \\\n+      <PATH_TO_YOUR_DOCKER_WORKSPACE>\n+    popd\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5NzQ3Mw=="}, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTI1MTg2OnYy", "diffSide": "RIGHT", "path": "concourse/docker/pxf-dev-base/cloudbuild.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxMjozNFrOGSKb1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjowOTozNlrOGSWhBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5ODUxOQ==", "bodyText": "where will ${_BASE_IMAGE_REPOSITORY} be defined ?", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r421698519", "createdAt": "2020-05-07T18:12:34Z", "author": {"login": "denalex"}, "path": "concourse/docker/pxf-dev-base/cloudbuild.yaml", "diffHunk": "@@ -0,0 +1,126 @@\n+# In this directory, run the following command to build this builder.\n+# $ gcloud builds submit . --config=cloudbuild.yaml\n+\n+# Increase timeout to 30 minutes\n+timeout: 1800s\n+\n+# Use a bigger machine type to support concurrent docker builds\n+options:\n+  machineType: 'N1_HIGHCPU_32'\n+\n+steps:\n+\n+##############################################################################\n+# GPDB 5 Images\n+##############################################################################\n+\n+# An image for gpdb5 running on CentOS6\n+- name: 'gcr.io/cloud-builders/docker'\n+  id: gpdb5-centos6-test-pxf-image-cache\n+  entrypoint: 'bash'\n+  args:\n+  - '-c'\n+  - |\n+    mkdir -p /workspace/build\n+    docker pull gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb5-centos6-test-pxf:latest || exit 0\n+  waitFor: ['-']\n+\n+- name: 'gcr.io/cloud-builders/docker'\n+  id: gpdb5-centos6-test-pxf-image\n+  args:\n+  - 'build'\n+  - '--build-arg=BASE_IMAGE=${_BASE_IMAGE_REPOSITORY}/centos-gpdb-dev:6-gcc6.2-llvm3.7'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NjQ1NA==", "bodyText": "it's defined in the cloud build trigger", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r421896454", "createdAt": "2020-05-08T02:09:36Z", "author": {"login": "frankgh"}, "path": "concourse/docker/pxf-dev-base/cloudbuild.yaml", "diffHunk": "@@ -0,0 +1,126 @@\n+# In this directory, run the following command to build this builder.\n+# $ gcloud builds submit . --config=cloudbuild.yaml\n+\n+# Increase timeout to 30 minutes\n+timeout: 1800s\n+\n+# Use a bigger machine type to support concurrent docker builds\n+options:\n+  machineType: 'N1_HIGHCPU_32'\n+\n+steps:\n+\n+##############################################################################\n+# GPDB 5 Images\n+##############################################################################\n+\n+# An image for gpdb5 running on CentOS6\n+- name: 'gcr.io/cloud-builders/docker'\n+  id: gpdb5-centos6-test-pxf-image-cache\n+  entrypoint: 'bash'\n+  args:\n+  - '-c'\n+  - |\n+    mkdir -p /workspace/build\n+    docker pull gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb5-centos6-test-pxf:latest || exit 0\n+  waitFor: ['-']\n+\n+- name: 'gcr.io/cloud-builders/docker'\n+  id: gpdb5-centos6-test-pxf-image\n+  args:\n+  - 'build'\n+  - '--build-arg=BASE_IMAGE=${_BASE_IMAGE_REPOSITORY}/centos-gpdb-dev:6-gcc6.2-llvm3.7'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5ODUxOQ=="}, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTI3MjM4OnYy", "diffSide": "RIGHT", "path": "concourse/docker/pxf-dev-base/gpdb5/centos6/Dockerfile", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxODozN1rOGSKpOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTo0MDowOVrOGSWCcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwMTk0NA==", "bodyText": "this will no longer be true for RPM based installs, how can we support both modes for now ?", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r421701944", "createdAt": "2020-05-07T18:18:37Z", "author": {"login": "denalex"}, "path": "concourse/docker/pxf-dev-base/gpdb5/centos6/Dockerfile", "diffHunk": "@@ -0,0 +1,59 @@\n+ARG BASE_IMAGE=pivotaldata/gpdb-dev:centos6\n+\n+FROM ${BASE_IMAGE}\n+\n+# install Go utilities\n+RUN GOPATH=/opt/go /usr/local/go/bin/go get github.com/golang/dep/cmd/dep \\\n+    && GOPATH=/opt/go /usr/local/go/bin/go get github.com/onsi/ginkgo/ginkgo\n+\n+# add Java 8 and rpm-build\n+RUN yum install -y rpm-build java-1.8.0-openjdk-devel && yum clean all\n+\n+# add minio software\n+RUN useradd -s /sbin/nologin -d /opt/minio minio \\\n+    && mkdir -p /opt/minio/bin \\\n+    && chmod a+rx /opt/minio \\\n+    && mkdir /opt/minio/data \\\n+    && wget -q https://dl.minio.io/server/minio/release/linux-amd64/minio -O /opt/minio/bin/minio \\\n+    && chmod +x /opt/minio/bin/minio \\\n+    && chown -R minio:minio /opt/minio\n+\n+# create user gpadmin since GPDB cannot run under root\n+RUN ssh-keygen -t rsa -N \"\" -f /root/.ssh/id_rsa \\\n+    && cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys \\\n+    && chmod 0600 /root/.ssh/authorized_keys \\\n+    && echo -e \"password\\npassword\" | passwd 2> /dev/null \\\n+    && { ssh-keyscan localhost; ssh-keyscan 0.0.0.0; } >> /root/.ssh/known_hosts \\\n+    && ssh-keygen -f /etc/ssh/ssh_host_key -N '' -t rsa1 \\\n+    && ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N '' -t rsa \\\n+    && ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N '' -t dsa \\\n+    && sed -i -e 's|Defaults    requiretty|#Defaults    requiretty|' /etc/sudoers \\\n+    && sed -ri 's/UsePAM yes/UsePAM no/g;s/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config \\\n+    && sed -ri 's@^HostKey /etc/ssh/ssh_host_ecdsa_key$@#&@;s@^HostKey /etc/ssh/ssh_host_ed25519_key$@#&@' /etc/ssh/sshd_config \\\n+    && groupadd -g 6000 gpadmin && useradd -u 6000 -g 6000 gpadmin \\\n+    && echo \"gpadmin  ALL=(ALL)       NOPASSWD: ALL\" > /etc/sudoers.d/gpadmin \\\n+    && groupadd supergroup && usermod -a -G supergroup gpadmin \\\n+    && mkdir /home/gpadmin/.ssh \\\n+    && ssh-keygen -t rsa -N \"\" -f /home/gpadmin/.ssh/id_rsa \\\n+    && cat /home/gpadmin/.ssh/id_rsa.pub >> /home/gpadmin/.ssh/authorized_keys \\\n+    && chmod 0600 /home/gpadmin/.ssh/authorized_keys \\\n+    && echo -e \"password\\npassword\" | passwd gpadmin 2> /dev/null \\\n+    && { ssh-keyscan localhost; ssh-keyscan 0.0.0.0; } >> /home/gpadmin/.ssh/known_hosts \\\n+    && chown -R gpadmin:gpadmin /home/gpadmin/.ssh \\\n+    # remove any java customization\n+    && rm -rf /etc/profile.d/java.sh \\\n+    # configure gpadmin limits\n+    && echo >> /etc/security/limits.d/gpadmin-limits.conf 'gpadmin soft core unlimited' \\\n+    && echo >> /etc/security/limits.d/gpadmin-limits.conf 'gpadmin soft nproc 131072' \\\n+    && echo >> /etc/security/limits.d/gpadmin-limits.conf 'gpadmin soft nofile 65536' \\\n+    # create .pxfrc\n+    && echo >> ~gpadmin/.pxfrc 'export PGPORT=5432' \\\n+    && echo >> ~gpadmin/.pxfrc 'export GOPATH=/opt/go' \\\n+    && echo >> ~gpadmin/.pxfrc 'export GPHOME=$(find /usr/local/ -name greenplum-db* -type d | head -n1)' \\\n+    && echo >> ~gpadmin/.pxfrc 'export PXF_HOME=${GPHOME}/pxf' \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4ODYyNg==", "bodyText": "what do you have in mind?", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r421888626", "createdAt": "2020-05-08T01:40:09Z", "author": {"login": "frankgh"}, "path": "concourse/docker/pxf-dev-base/gpdb5/centos6/Dockerfile", "diffHunk": "@@ -0,0 +1,59 @@\n+ARG BASE_IMAGE=pivotaldata/gpdb-dev:centos6\n+\n+FROM ${BASE_IMAGE}\n+\n+# install Go utilities\n+RUN GOPATH=/opt/go /usr/local/go/bin/go get github.com/golang/dep/cmd/dep \\\n+    && GOPATH=/opt/go /usr/local/go/bin/go get github.com/onsi/ginkgo/ginkgo\n+\n+# add Java 8 and rpm-build\n+RUN yum install -y rpm-build java-1.8.0-openjdk-devel && yum clean all\n+\n+# add minio software\n+RUN useradd -s /sbin/nologin -d /opt/minio minio \\\n+    && mkdir -p /opt/minio/bin \\\n+    && chmod a+rx /opt/minio \\\n+    && mkdir /opt/minio/data \\\n+    && wget -q https://dl.minio.io/server/minio/release/linux-amd64/minio -O /opt/minio/bin/minio \\\n+    && chmod +x /opt/minio/bin/minio \\\n+    && chown -R minio:minio /opt/minio\n+\n+# create user gpadmin since GPDB cannot run under root\n+RUN ssh-keygen -t rsa -N \"\" -f /root/.ssh/id_rsa \\\n+    && cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys \\\n+    && chmod 0600 /root/.ssh/authorized_keys \\\n+    && echo -e \"password\\npassword\" | passwd 2> /dev/null \\\n+    && { ssh-keyscan localhost; ssh-keyscan 0.0.0.0; } >> /root/.ssh/known_hosts \\\n+    && ssh-keygen -f /etc/ssh/ssh_host_key -N '' -t rsa1 \\\n+    && ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N '' -t rsa \\\n+    && ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N '' -t dsa \\\n+    && sed -i -e 's|Defaults    requiretty|#Defaults    requiretty|' /etc/sudoers \\\n+    && sed -ri 's/UsePAM yes/UsePAM no/g;s/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config \\\n+    && sed -ri 's@^HostKey /etc/ssh/ssh_host_ecdsa_key$@#&@;s@^HostKey /etc/ssh/ssh_host_ed25519_key$@#&@' /etc/ssh/sshd_config \\\n+    && groupadd -g 6000 gpadmin && useradd -u 6000 -g 6000 gpadmin \\\n+    && echo \"gpadmin  ALL=(ALL)       NOPASSWD: ALL\" > /etc/sudoers.d/gpadmin \\\n+    && groupadd supergroup && usermod -a -G supergroup gpadmin \\\n+    && mkdir /home/gpadmin/.ssh \\\n+    && ssh-keygen -t rsa -N \"\" -f /home/gpadmin/.ssh/id_rsa \\\n+    && cat /home/gpadmin/.ssh/id_rsa.pub >> /home/gpadmin/.ssh/authorized_keys \\\n+    && chmod 0600 /home/gpadmin/.ssh/authorized_keys \\\n+    && echo -e \"password\\npassword\" | passwd gpadmin 2> /dev/null \\\n+    && { ssh-keyscan localhost; ssh-keyscan 0.0.0.0; } >> /home/gpadmin/.ssh/known_hosts \\\n+    && chown -R gpadmin:gpadmin /home/gpadmin/.ssh \\\n+    # remove any java customization\n+    && rm -rf /etc/profile.d/java.sh \\\n+    # configure gpadmin limits\n+    && echo >> /etc/security/limits.d/gpadmin-limits.conf 'gpadmin soft core unlimited' \\\n+    && echo >> /etc/security/limits.d/gpadmin-limits.conf 'gpadmin soft nproc 131072' \\\n+    && echo >> /etc/security/limits.d/gpadmin-limits.conf 'gpadmin soft nofile 65536' \\\n+    # create .pxfrc\n+    && echo >> ~gpadmin/.pxfrc 'export PGPORT=5432' \\\n+    && echo >> ~gpadmin/.pxfrc 'export GOPATH=/opt/go' \\\n+    && echo >> ~gpadmin/.pxfrc 'export GPHOME=$(find /usr/local/ -name greenplum-db* -type d | head -n1)' \\\n+    && echo >> ~gpadmin/.pxfrc 'export PXF_HOME=${GPHOME}/pxf' \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwMTk0NA=="}, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTI3ODkzOnYy", "diffSide": "RIGHT", "path": "concourse/docker/pxf-dev-base/gpdb5/centos6/Dockerfile", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoyMDozMVrOGSKtjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTo0MTowN1rOGSWDgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwMzA1NQ==", "bodyText": "will we still need to source greenplum_path.sh or not ? only for init_gpdb ? I believe it also sets LD_LIBRARY_PATH and messes up python.", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r421703055", "createdAt": "2020-05-07T18:20:31Z", "author": {"login": "denalex"}, "path": "concourse/docker/pxf-dev-base/gpdb5/centos6/Dockerfile", "diffHunk": "@@ -0,0 +1,59 @@\n+ARG BASE_IMAGE=pivotaldata/gpdb-dev:centos6\n+\n+FROM ${BASE_IMAGE}\n+\n+# install Go utilities\n+RUN GOPATH=/opt/go /usr/local/go/bin/go get github.com/golang/dep/cmd/dep \\\n+    && GOPATH=/opt/go /usr/local/go/bin/go get github.com/onsi/ginkgo/ginkgo\n+\n+# add Java 8 and rpm-build\n+RUN yum install -y rpm-build java-1.8.0-openjdk-devel && yum clean all\n+\n+# add minio software\n+RUN useradd -s /sbin/nologin -d /opt/minio minio \\\n+    && mkdir -p /opt/minio/bin \\\n+    && chmod a+rx /opt/minio \\\n+    && mkdir /opt/minio/data \\\n+    && wget -q https://dl.minio.io/server/minio/release/linux-amd64/minio -O /opt/minio/bin/minio \\\n+    && chmod +x /opt/minio/bin/minio \\\n+    && chown -R minio:minio /opt/minio\n+\n+# create user gpadmin since GPDB cannot run under root\n+RUN ssh-keygen -t rsa -N \"\" -f /root/.ssh/id_rsa \\\n+    && cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys \\\n+    && chmod 0600 /root/.ssh/authorized_keys \\\n+    && echo -e \"password\\npassword\" | passwd 2> /dev/null \\\n+    && { ssh-keyscan localhost; ssh-keyscan 0.0.0.0; } >> /root/.ssh/known_hosts \\\n+    && ssh-keygen -f /etc/ssh/ssh_host_key -N '' -t rsa1 \\\n+    && ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N '' -t rsa \\\n+    && ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N '' -t dsa \\\n+    && sed -i -e 's|Defaults    requiretty|#Defaults    requiretty|' /etc/sudoers \\\n+    && sed -ri 's/UsePAM yes/UsePAM no/g;s/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config \\\n+    && sed -ri 's@^HostKey /etc/ssh/ssh_host_ecdsa_key$@#&@;s@^HostKey /etc/ssh/ssh_host_ed25519_key$@#&@' /etc/ssh/sshd_config \\\n+    && groupadd -g 6000 gpadmin && useradd -u 6000 -g 6000 gpadmin \\\n+    && echo \"gpadmin  ALL=(ALL)       NOPASSWD: ALL\" > /etc/sudoers.d/gpadmin \\\n+    && groupadd supergroup && usermod -a -G supergroup gpadmin \\\n+    && mkdir /home/gpadmin/.ssh \\\n+    && ssh-keygen -t rsa -N \"\" -f /home/gpadmin/.ssh/id_rsa \\\n+    && cat /home/gpadmin/.ssh/id_rsa.pub >> /home/gpadmin/.ssh/authorized_keys \\\n+    && chmod 0600 /home/gpadmin/.ssh/authorized_keys \\\n+    && echo -e \"password\\npassword\" | passwd gpadmin 2> /dev/null \\\n+    && { ssh-keyscan localhost; ssh-keyscan 0.0.0.0; } >> /home/gpadmin/.ssh/known_hosts \\\n+    && chown -R gpadmin:gpadmin /home/gpadmin/.ssh \\\n+    # remove any java customization\n+    && rm -rf /etc/profile.d/java.sh \\\n+    # configure gpadmin limits\n+    && echo >> /etc/security/limits.d/gpadmin-limits.conf 'gpadmin soft core unlimited' \\\n+    && echo >> /etc/security/limits.d/gpadmin-limits.conf 'gpadmin soft nproc 131072' \\\n+    && echo >> /etc/security/limits.d/gpadmin-limits.conf 'gpadmin soft nofile 65536' \\\n+    # create .pxfrc\n+    && echo >> ~gpadmin/.pxfrc 'export PGPORT=5432' \\\n+    && echo >> ~gpadmin/.pxfrc 'export GOPATH=/opt/go' \\\n+    && echo >> ~gpadmin/.pxfrc 'export GPHOME=$(find /usr/local/ -name greenplum-db* -type d | head -n1)' \\\n+    && echo >> ~gpadmin/.pxfrc 'export PXF_HOME=${GPHOME}/pxf' \\\n+    && echo >> ~gpadmin/.pxfrc 'export PXF_CONF=/home/gpadmin/pxf' \\\n+    && echo >> ~gpadmin/.pxfrc 'export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk.x86_64' \\\n+    && echo >> ~gpadmin/.pxfrc 'export PATH=${GPHOME}/bin:${PXF_HOME}/bin:${GOPATH}/bin:/usr/local/go/bin:$PATH' \\\n+    && ln -s ~gpadmin/.pxfrc ~root \\\n+    && echo >> ~gpadmin/.bashrc 'source ~/.pxfrc' \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4ODc2Mw==", "bodyText": "we no longer need to source greenplum_path for running tests", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r421888763", "createdAt": "2020-05-08T01:40:39Z", "author": {"login": "frankgh"}, "path": "concourse/docker/pxf-dev-base/gpdb5/centos6/Dockerfile", "diffHunk": "@@ -0,0 +1,59 @@\n+ARG BASE_IMAGE=pivotaldata/gpdb-dev:centos6\n+\n+FROM ${BASE_IMAGE}\n+\n+# install Go utilities\n+RUN GOPATH=/opt/go /usr/local/go/bin/go get github.com/golang/dep/cmd/dep \\\n+    && GOPATH=/opt/go /usr/local/go/bin/go get github.com/onsi/ginkgo/ginkgo\n+\n+# add Java 8 and rpm-build\n+RUN yum install -y rpm-build java-1.8.0-openjdk-devel && yum clean all\n+\n+# add minio software\n+RUN useradd -s /sbin/nologin -d /opt/minio minio \\\n+    && mkdir -p /opt/minio/bin \\\n+    && chmod a+rx /opt/minio \\\n+    && mkdir /opt/minio/data \\\n+    && wget -q https://dl.minio.io/server/minio/release/linux-amd64/minio -O /opt/minio/bin/minio \\\n+    && chmod +x /opt/minio/bin/minio \\\n+    && chown -R minio:minio /opt/minio\n+\n+# create user gpadmin since GPDB cannot run under root\n+RUN ssh-keygen -t rsa -N \"\" -f /root/.ssh/id_rsa \\\n+    && cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys \\\n+    && chmod 0600 /root/.ssh/authorized_keys \\\n+    && echo -e \"password\\npassword\" | passwd 2> /dev/null \\\n+    && { ssh-keyscan localhost; ssh-keyscan 0.0.0.0; } >> /root/.ssh/known_hosts \\\n+    && ssh-keygen -f /etc/ssh/ssh_host_key -N '' -t rsa1 \\\n+    && ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N '' -t rsa \\\n+    && ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N '' -t dsa \\\n+    && sed -i -e 's|Defaults    requiretty|#Defaults    requiretty|' /etc/sudoers \\\n+    && sed -ri 's/UsePAM yes/UsePAM no/g;s/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config \\\n+    && sed -ri 's@^HostKey /etc/ssh/ssh_host_ecdsa_key$@#&@;s@^HostKey /etc/ssh/ssh_host_ed25519_key$@#&@' /etc/ssh/sshd_config \\\n+    && groupadd -g 6000 gpadmin && useradd -u 6000 -g 6000 gpadmin \\\n+    && echo \"gpadmin  ALL=(ALL)       NOPASSWD: ALL\" > /etc/sudoers.d/gpadmin \\\n+    && groupadd supergroup && usermod -a -G supergroup gpadmin \\\n+    && mkdir /home/gpadmin/.ssh \\\n+    && ssh-keygen -t rsa -N \"\" -f /home/gpadmin/.ssh/id_rsa \\\n+    && cat /home/gpadmin/.ssh/id_rsa.pub >> /home/gpadmin/.ssh/authorized_keys \\\n+    && chmod 0600 /home/gpadmin/.ssh/authorized_keys \\\n+    && echo -e \"password\\npassword\" | passwd gpadmin 2> /dev/null \\\n+    && { ssh-keyscan localhost; ssh-keyscan 0.0.0.0; } >> /home/gpadmin/.ssh/known_hosts \\\n+    && chown -R gpadmin:gpadmin /home/gpadmin/.ssh \\\n+    # remove any java customization\n+    && rm -rf /etc/profile.d/java.sh \\\n+    # configure gpadmin limits\n+    && echo >> /etc/security/limits.d/gpadmin-limits.conf 'gpadmin soft core unlimited' \\\n+    && echo >> /etc/security/limits.d/gpadmin-limits.conf 'gpadmin soft nproc 131072' \\\n+    && echo >> /etc/security/limits.d/gpadmin-limits.conf 'gpadmin soft nofile 65536' \\\n+    # create .pxfrc\n+    && echo >> ~gpadmin/.pxfrc 'export PGPORT=5432' \\\n+    && echo >> ~gpadmin/.pxfrc 'export GOPATH=/opt/go' \\\n+    && echo >> ~gpadmin/.pxfrc 'export GPHOME=$(find /usr/local/ -name greenplum-db* -type d | head -n1)' \\\n+    && echo >> ~gpadmin/.pxfrc 'export PXF_HOME=${GPHOME}/pxf' \\\n+    && echo >> ~gpadmin/.pxfrc 'export PXF_CONF=/home/gpadmin/pxf' \\\n+    && echo >> ~gpadmin/.pxfrc 'export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk.x86_64' \\\n+    && echo >> ~gpadmin/.pxfrc 'export PATH=${GPHOME}/bin:${PXF_HOME}/bin:${GOPATH}/bin:/usr/local/go/bin:$PATH' \\\n+    && ln -s ~gpadmin/.pxfrc ~root \\\n+    && echo >> ~gpadmin/.bashrc 'source ~/.pxfrc' \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwMzA1NQ=="}, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4ODg5OQ==", "bodyText": "maybe not even for building the extension, but it's worth trying", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r421888899", "createdAt": "2020-05-08T01:41:07Z", "author": {"login": "frankgh"}, "path": "concourse/docker/pxf-dev-base/gpdb5/centos6/Dockerfile", "diffHunk": "@@ -0,0 +1,59 @@\n+ARG BASE_IMAGE=pivotaldata/gpdb-dev:centos6\n+\n+FROM ${BASE_IMAGE}\n+\n+# install Go utilities\n+RUN GOPATH=/opt/go /usr/local/go/bin/go get github.com/golang/dep/cmd/dep \\\n+    && GOPATH=/opt/go /usr/local/go/bin/go get github.com/onsi/ginkgo/ginkgo\n+\n+# add Java 8 and rpm-build\n+RUN yum install -y rpm-build java-1.8.0-openjdk-devel && yum clean all\n+\n+# add minio software\n+RUN useradd -s /sbin/nologin -d /opt/minio minio \\\n+    && mkdir -p /opt/minio/bin \\\n+    && chmod a+rx /opt/minio \\\n+    && mkdir /opt/minio/data \\\n+    && wget -q https://dl.minio.io/server/minio/release/linux-amd64/minio -O /opt/minio/bin/minio \\\n+    && chmod +x /opt/minio/bin/minio \\\n+    && chown -R minio:minio /opt/minio\n+\n+# create user gpadmin since GPDB cannot run under root\n+RUN ssh-keygen -t rsa -N \"\" -f /root/.ssh/id_rsa \\\n+    && cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys \\\n+    && chmod 0600 /root/.ssh/authorized_keys \\\n+    && echo -e \"password\\npassword\" | passwd 2> /dev/null \\\n+    && { ssh-keyscan localhost; ssh-keyscan 0.0.0.0; } >> /root/.ssh/known_hosts \\\n+    && ssh-keygen -f /etc/ssh/ssh_host_key -N '' -t rsa1 \\\n+    && ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N '' -t rsa \\\n+    && ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N '' -t dsa \\\n+    && sed -i -e 's|Defaults    requiretty|#Defaults    requiretty|' /etc/sudoers \\\n+    && sed -ri 's/UsePAM yes/UsePAM no/g;s/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config \\\n+    && sed -ri 's@^HostKey /etc/ssh/ssh_host_ecdsa_key$@#&@;s@^HostKey /etc/ssh/ssh_host_ed25519_key$@#&@' /etc/ssh/sshd_config \\\n+    && groupadd -g 6000 gpadmin && useradd -u 6000 -g 6000 gpadmin \\\n+    && echo \"gpadmin  ALL=(ALL)       NOPASSWD: ALL\" > /etc/sudoers.d/gpadmin \\\n+    && groupadd supergroup && usermod -a -G supergroup gpadmin \\\n+    && mkdir /home/gpadmin/.ssh \\\n+    && ssh-keygen -t rsa -N \"\" -f /home/gpadmin/.ssh/id_rsa \\\n+    && cat /home/gpadmin/.ssh/id_rsa.pub >> /home/gpadmin/.ssh/authorized_keys \\\n+    && chmod 0600 /home/gpadmin/.ssh/authorized_keys \\\n+    && echo -e \"password\\npassword\" | passwd gpadmin 2> /dev/null \\\n+    && { ssh-keyscan localhost; ssh-keyscan 0.0.0.0; } >> /home/gpadmin/.ssh/known_hosts \\\n+    && chown -R gpadmin:gpadmin /home/gpadmin/.ssh \\\n+    # remove any java customization\n+    && rm -rf /etc/profile.d/java.sh \\\n+    # configure gpadmin limits\n+    && echo >> /etc/security/limits.d/gpadmin-limits.conf 'gpadmin soft core unlimited' \\\n+    && echo >> /etc/security/limits.d/gpadmin-limits.conf 'gpadmin soft nproc 131072' \\\n+    && echo >> /etc/security/limits.d/gpadmin-limits.conf 'gpadmin soft nofile 65536' \\\n+    # create .pxfrc\n+    && echo >> ~gpadmin/.pxfrc 'export PGPORT=5432' \\\n+    && echo >> ~gpadmin/.pxfrc 'export GOPATH=/opt/go' \\\n+    && echo >> ~gpadmin/.pxfrc 'export GPHOME=$(find /usr/local/ -name greenplum-db* -type d | head -n1)' \\\n+    && echo >> ~gpadmin/.pxfrc 'export PXF_HOME=${GPHOME}/pxf' \\\n+    && echo >> ~gpadmin/.pxfrc 'export PXF_CONF=/home/gpadmin/pxf' \\\n+    && echo >> ~gpadmin/.pxfrc 'export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk.x86_64' \\\n+    && echo >> ~gpadmin/.pxfrc 'export PATH=${GPHOME}/bin:${PXF_HOME}/bin:${GOPATH}/bin:/usr/local/go/bin:$PATH' \\\n+    && ln -s ~gpadmin/.pxfrc ~root \\\n+    && echo >> ~gpadmin/.bashrc 'source ~/.pxfrc' \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwMzA1NQ=="}, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTI4NTE0OnYy", "diffSide": "RIGHT", "path": "concourse/docker/pxf-dev-server/Dockerfile", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoyMjozMlrOGSKxoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTo0MTozOVrOGSWEFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwNDA5Ng==", "bodyText": "should we default to centos7 base ?", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r421704096", "createdAt": "2020-05-07T18:22:32Z", "author": {"login": "denalex"}, "path": "concourse/docker/pxf-dev-server/Dockerfile", "diffHunk": "@@ -1,19 +1,22 @@\n-ARG BASE_IMAGE=gpdb-pxf-dev:centos6\n+ARG BASE_IMAGE=pivotaldata/gpdb-pxf-dev:centos6", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4OTA0Nw==", "bodyText": "sure", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r421889047", "createdAt": "2020-05-08T01:41:39Z", "author": {"login": "frankgh"}, "path": "concourse/docker/pxf-dev-server/Dockerfile", "diffHunk": "@@ -1,19 +1,22 @@\n-ARG BASE_IMAGE=gpdb-pxf-dev:centos6\n+ARG BASE_IMAGE=pivotaldata/gpdb-pxf-dev:centos6", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwNDA5Ng=="}, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTI5NDE4OnYy", "diffSide": "RIGHT", "path": "concourse/docker/pxf-dev-server/cloudbuild.yaml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoyNDo0MlrOGSK3QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjozOTo1OVrOGS38Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwNTUzNg==", "bodyText": "does it mean they will have to edit the template or just set the env variable before running the gcloud command ?", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r421705536", "createdAt": "2020-05-07T18:24:42Z", "author": {"login": "denalex"}, "path": "concourse/docker/pxf-dev-server/cloudbuild.yaml", "diffHunk": "@@ -0,0 +1,58 @@\n+# In this directory, run the following command to build this builder.\n+# $ gcloud builds submit . --config=cloudbuild.yaml\n+# You will need to provide replacements for _SINGLECLUSTER_BUCKET", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4OTQ2Nw==", "bodyText": "gcloud allows you to specify the --substitutions=[KEY=VALUE,...] flag, where devs can set their bucket name", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r421889467", "createdAt": "2020-05-08T01:43:15Z", "author": {"login": "frankgh"}, "path": "concourse/docker/pxf-dev-server/cloudbuild.yaml", "diffHunk": "@@ -0,0 +1,58 @@\n+# In this directory, run the following command to build this builder.\n+# $ gcloud builds submit . --config=cloudbuild.yaml\n+# You will need to provide replacements for _SINGLECLUSTER_BUCKET", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwNTUzNg=="}, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0NDEwNw==", "bodyText": "maybe say so in line 3, i.e. explain how to \"provide replacement\"", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r422444107", "createdAt": "2020-05-09T02:39:59Z", "author": {"login": "denalex"}, "path": "concourse/docker/pxf-dev-server/cloudbuild.yaml", "diffHunk": "@@ -0,0 +1,58 @@\n+# In this directory, run the following command to build this builder.\n+# $ gcloud builds submit . --config=cloudbuild.yaml\n+# You will need to provide replacements for _SINGLECLUSTER_BUCKET", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwNTUzNg=="}, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTI5ODA4OnYy", "diffSide": "RIGHT", "path": "concourse/scripts/check_docker_images_and_tag.bash", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoyNTo0OFrOGSK5wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoyNTo0OFrOGSK5wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwNjE3Nw==", "bodyText": "I think we are trying to use [[ for checks", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r421706177", "createdAt": "2020-05-07T18:25:48Z", "author": {"login": "denalex"}, "path": "concourse/scripts/check_docker_images_and_tag.bash", "diffHunk": "@@ -0,0 +1,61 @@\n+#!/bin/bash\n+\n+set -euo pipefail\n+\n+COMMIT_SHA=$(cat pxf_src/.git/ref)\n+echo \"Checking images for PXF SHA-1: ${COMMIT_SHA}\"\n+\n+if [ -z \"$IMAGE_LIST\" ]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTMxMjc1OnYy", "diffSide": "RIGHT", "path": "concourse/scripts/check_docker_images_and_tag.bash", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoyOTo1NVrOGSLDSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMToyNjozMVrOGS3hqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwODYxNg==", "bodyText": "should we echo smth here ?", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r421708616", "createdAt": "2020-05-07T18:29:55Z", "author": {"login": "denalex"}, "path": "concourse/scripts/check_docker_images_and_tag.bash", "diffHunk": "@@ -0,0 +1,61 @@\n+#!/bin/bash\n+\n+set -euo pipefail\n+\n+COMMIT_SHA=$(cat pxf_src/.git/ref)\n+echo \"Checking images for PXF SHA-1: ${COMMIT_SHA}\"\n+\n+if [ -z \"$IMAGE_LIST\" ]; then\n+  echo \"The IMAGE_LIST needs to be provided\"\n+  exit 1\n+fi\n+\n+gcloud config set project \"$GOOGLE_PROJECT_ID\"\n+gcloud auth activate-service-account --key-file=<(echo \"$GOOGLE_CREDENTIALS\")\n+\n+# Don't quote $IMAGE_LIST to allow array\n+IMAGE_NAMES=(${IMAGE_LIST})\n+\n+# wait 1 minute before checking\n+sleep 1m\n+# get the build id\n+BUILD_ID=$(gcloud builds list --ongoing --filter \"images='gcr.io/${GOOGLE_PROJECT_ID}/gpdb-pxf-dev/${IMAGE_NAMES[0]}:${COMMIT_SHA}'\" | awk 'FNR == 2 {print $1}')\n+\n+# Wait ~ 40 minutes\n+for i in {0..40}\n+do\n+  if [ -n \"$BUILD_ID\" ]; then\n+    echo \"Checking status for build with ID: ${BUILD_ID}\"\n+    # if we have the $BUILD_ID, check the status using it\n+    STATUS=$(gcloud builds list --filter \"status='SUCCESS' AND build_id='${BUILD_ID}'\" 2>&1 | awk 'FNR == 2 {print $1}')\n+  else\n+    echo \"Checking status with filter images='gcr.io/${GOOGLE_PROJECT_ID}/gpdb-pxf-dev/${IMAGE_NAMES[0]}:${COMMIT_SHA}'\"\n+    # otherwise, let's use the image name\n+    STATUS=$(gcloud builds list --filter \"status='SUCCESS' AND images='gcr.io/${GOOGLE_PROJECT_ID}/gpdb-pxf-dev/${IMAGE_NAMES[0]}:${COMMIT_SHA}'\" 2>&1 | awk 'FNR == 2 {print $1}')\n+  fi\n+\n+  if [ -n \"$STATUS\" ]; then\n+    echo \"Cloud build completed with ID ${STATUS}\"\n+\n+    for image in \"${IMAGE_NAMES[@]}\"\n+    do\n+      # we need to untag latest first\n+      gcloud container images untag --quiet \"gcr.io/${GOOGLE_PROJECT_ID}/gpdb-pxf-dev/${image}:latest\" || true\n+      # tag image with latest\n+      echo \"Tagging gcr.io/${GOOGLE_PROJECT_ID}/gpdb-pxf-dev/${image}:${COMMIT_SHA} with latest\"\n+      gcloud container images add-tag --quiet \\\n+        \"gcr.io/${GOOGLE_PROJECT_ID}/gpdb-pxf-dev/${image}:${COMMIT_SHA}\" \\\n+        \"gcr.io/${GOOGLE_PROJECT_ID}/gpdb-pxf-dev/${image}:latest\"\n+    done\n+\n+    exit 0\n+  else\n+    echo \"Attempt ${i}: Checking cloud build status\"\n+  fi\n+\n+  # sleep for 1 min\n+  sleep 1m\n+done\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzNzI4OA==", "bodyText": "done", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r422437288", "createdAt": "2020-05-09T01:26:31Z", "author": {"login": "frankgh"}, "path": "concourse/scripts/check_docker_images_and_tag.bash", "diffHunk": "@@ -0,0 +1,61 @@\n+#!/bin/bash\n+\n+set -euo pipefail\n+\n+COMMIT_SHA=$(cat pxf_src/.git/ref)\n+echo \"Checking images for PXF SHA-1: ${COMMIT_SHA}\"\n+\n+if [ -z \"$IMAGE_LIST\" ]; then\n+  echo \"The IMAGE_LIST needs to be provided\"\n+  exit 1\n+fi\n+\n+gcloud config set project \"$GOOGLE_PROJECT_ID\"\n+gcloud auth activate-service-account --key-file=<(echo \"$GOOGLE_CREDENTIALS\")\n+\n+# Don't quote $IMAGE_LIST to allow array\n+IMAGE_NAMES=(${IMAGE_LIST})\n+\n+# wait 1 minute before checking\n+sleep 1m\n+# get the build id\n+BUILD_ID=$(gcloud builds list --ongoing --filter \"images='gcr.io/${GOOGLE_PROJECT_ID}/gpdb-pxf-dev/${IMAGE_NAMES[0]}:${COMMIT_SHA}'\" | awk 'FNR == 2 {print $1}')\n+\n+# Wait ~ 40 minutes\n+for i in {0..40}\n+do\n+  if [ -n \"$BUILD_ID\" ]; then\n+    echo \"Checking status for build with ID: ${BUILD_ID}\"\n+    # if we have the $BUILD_ID, check the status using it\n+    STATUS=$(gcloud builds list --filter \"status='SUCCESS' AND build_id='${BUILD_ID}'\" 2>&1 | awk 'FNR == 2 {print $1}')\n+  else\n+    echo \"Checking status with filter images='gcr.io/${GOOGLE_PROJECT_ID}/gpdb-pxf-dev/${IMAGE_NAMES[0]}:${COMMIT_SHA}'\"\n+    # otherwise, let's use the image name\n+    STATUS=$(gcloud builds list --filter \"status='SUCCESS' AND images='gcr.io/${GOOGLE_PROJECT_ID}/gpdb-pxf-dev/${IMAGE_NAMES[0]}:${COMMIT_SHA}'\" 2>&1 | awk 'FNR == 2 {print $1}')\n+  fi\n+\n+  if [ -n \"$STATUS\" ]; then\n+    echo \"Cloud build completed with ID ${STATUS}\"\n+\n+    for image in \"${IMAGE_NAMES[@]}\"\n+    do\n+      # we need to untag latest first\n+      gcloud container images untag --quiet \"gcr.io/${GOOGLE_PROJECT_ID}/gpdb-pxf-dev/${image}:latest\" || true\n+      # tag image with latest\n+      echo \"Tagging gcr.io/${GOOGLE_PROJECT_ID}/gpdb-pxf-dev/${image}:${COMMIT_SHA} with latest\"\n+      gcloud container images add-tag --quiet \\\n+        \"gcr.io/${GOOGLE_PROJECT_ID}/gpdb-pxf-dev/${image}:${COMMIT_SHA}\" \\\n+        \"gcr.io/${GOOGLE_PROJECT_ID}/gpdb-pxf-dev/${image}:latest\"\n+    done\n+\n+    exit 0\n+  else\n+    echo \"Attempt ${i}: Checking cloud build status\"\n+  fi\n+\n+  # sleep for 1 min\n+  sleep 1m\n+done\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwODYxNg=="}, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTMyNzIzOnYy", "diffSide": "RIGHT", "path": "concourse/docker/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODozMzo1MlrOGSLMWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDozNToyN1rOGS3JhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcxMDkzNg==", "bodyText": "Would be nice to document how CloudBuild / Concourse tie things together. There are good instructions on how to build Docker images locally and also documentation on how to submit cloudbuild yaml files to Google. However, it is not very clear how everything ties together and what to do on a Docker image change.", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r421710936", "createdAt": "2020-05-07T18:33:52Z", "author": {"login": "denalex"}, "path": "concourse/docker/README.md", "diffHunk": "@@ -1,9 +1,40 @@\n-#Docker container for GPDB development/testing\n-##Requirements\n+# Docker container for GPDB development/testing\n+## Requirements\n \n - docker 1.13 (with 3-4 GB allocated for docker host)\n \n Map-R 5.2 Image\n ```\n docker run --rm --privileged -p 8443:8443 -it pivotaldata/gpdb-dev:centos6-mapr5.2\n-```\n\\ No newline at end of file\n+```\n+\n+## Available docker images\n+\n+<table>\n+  <tr>\n+    <td>&nbsp;</td>\n+    <td colspan=\"2\">Greenplum 5</td>\n+    <td colspan=\"2\">Greenplum 6</td>\n+  </tr>\n+  <tr>\n+    <td>&nbsp;</td>\n+    <td>CentOS6</td>\n+    <td>CentOS7</td>\n+    <td>CentOS7</td>\n+    <td>Ubuntu 18.04</td>\n+  </tr>\n+  <tr>\n+    <td>Base Image</td>\n+    <td> <a href=\"https://console.cloud.google.com/gcr/images/${PROJECT_ID}/GLOBAL/gpdb-pxf-dev/gpdb5-centos6-test-pxf\">gpdb5-centos6-test-pxf</a> </td>\n+    <td> <a href=\"https://console.cloud.google.com/gcr/images/${PROJECT_ID}/GLOBAL/gpdb-pxf-dev/gpdb5-centos7-test-pxf\">gpdb5-centos7-test-pxf</a> </td>\n+    <td> <a href=\"https://console.cloud.google.com/gcr/images/${PROJECT_ID}/GLOBAL/gpdb-pxf-dev/gpdb6-centos7-test-pxf\">gpdb6-centos7-test-pxf</a> </td>\n+    <td> <a href=\"https://console.cloud.google.com/gcr/images/${PROJECT_ID}/GLOBAL/gpdb-pxf-dev/gpdb6-ubuntu18.04-test-pxf\">gpdb6-ubuntu18.04-test-pxf</a> </td>\n+  </tr>\n+  <tr>\n+    <td>MapR</td>\n+    <td> N/A </td>\n+    <td> <a href=\"https://console.cloud.google.com/gcr/images/${PROJECT_ID}/GLOBAL/gpdb-pxf-dev/gpdb5-centos7-test-pxf-mapr\">gpdb5-centos7-test-pxf-mapr</a> </td>\n+    <td> <a href=\"https://console.cloud.google.com/gcr/images/${PROJECT_ID}/GLOBAL/gpdb-pxf-dev/gpdb6-centos7-test-pxf-mapr\">gpdb6-centos7-test-pxf-mapr</a> </td>\n+    <td> N/A </td>\n+  </tr>\n+</table>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTEwOQ==", "bodyText": "done", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r422431109", "createdAt": "2020-05-09T00:35:27Z", "author": {"login": "frankgh"}, "path": "concourse/docker/README.md", "diffHunk": "@@ -1,9 +1,40 @@\n-#Docker container for GPDB development/testing\n-##Requirements\n+# Docker container for GPDB development/testing\n+## Requirements\n \n - docker 1.13 (with 3-4 GB allocated for docker host)\n \n Map-R 5.2 Image\n ```\n docker run --rm --privileged -p 8443:8443 -it pivotaldata/gpdb-dev:centos6-mapr5.2\n-```\n\\ No newline at end of file\n+```\n+\n+## Available docker images\n+\n+<table>\n+  <tr>\n+    <td>&nbsp;</td>\n+    <td colspan=\"2\">Greenplum 5</td>\n+    <td colspan=\"2\">Greenplum 6</td>\n+  </tr>\n+  <tr>\n+    <td>&nbsp;</td>\n+    <td>CentOS6</td>\n+    <td>CentOS7</td>\n+    <td>CentOS7</td>\n+    <td>Ubuntu 18.04</td>\n+  </tr>\n+  <tr>\n+    <td>Base Image</td>\n+    <td> <a href=\"https://console.cloud.google.com/gcr/images/${PROJECT_ID}/GLOBAL/gpdb-pxf-dev/gpdb5-centos6-test-pxf\">gpdb5-centos6-test-pxf</a> </td>\n+    <td> <a href=\"https://console.cloud.google.com/gcr/images/${PROJECT_ID}/GLOBAL/gpdb-pxf-dev/gpdb5-centos7-test-pxf\">gpdb5-centos7-test-pxf</a> </td>\n+    <td> <a href=\"https://console.cloud.google.com/gcr/images/${PROJECT_ID}/GLOBAL/gpdb-pxf-dev/gpdb6-centos7-test-pxf\">gpdb6-centos7-test-pxf</a> </td>\n+    <td> <a href=\"https://console.cloud.google.com/gcr/images/${PROJECT_ID}/GLOBAL/gpdb-pxf-dev/gpdb6-ubuntu18.04-test-pxf\">gpdb6-ubuntu18.04-test-pxf</a> </td>\n+  </tr>\n+  <tr>\n+    <td>MapR</td>\n+    <td> N/A </td>\n+    <td> <a href=\"https://console.cloud.google.com/gcr/images/${PROJECT_ID}/GLOBAL/gpdb-pxf-dev/gpdb5-centos7-test-pxf-mapr\">gpdb5-centos7-test-pxf-mapr</a> </td>\n+    <td> <a href=\"https://console.cloud.google.com/gcr/images/${PROJECT_ID}/GLOBAL/gpdb-pxf-dev/gpdb6-centos7-test-pxf-mapr\">gpdb6-centos7-test-pxf-mapr</a> </td>\n+    <td> N/A </td>\n+  </tr>\n+</table>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcxMDkzNg=="}, "originalCommit": {"oid": "19ffff9e18265cbf7653d88ce0b3fb6576602c98"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDA5ODI4OnYy", "diffSide": "RIGHT", "path": "concourse/docker/pxf-dev-base/gpdb5/centos6/Dockerfile", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjozNzo0NlrOGS37cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjozNzo0NlrOGS37cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0Mzg4OQ==", "bodyText": "this assumes PXF is already installed, which will not be the case in many cases. Since this is image for gp5, we can hardcode /usr/local/pxf-gp5 here. Not so easy for GPHOME up above.", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r422443889", "createdAt": "2020-05-09T02:37:46Z", "author": {"login": "denalex"}, "path": "concourse/docker/pxf-dev-base/gpdb5/centos6/Dockerfile", "diffHunk": "@@ -0,0 +1,59 @@\n+ARG BASE_IMAGE=pivotaldata/gpdb-dev:centos6\n+\n+FROM ${BASE_IMAGE}\n+\n+# install Go utilities\n+RUN GOPATH=/opt/go /usr/local/go/bin/go get github.com/golang/dep/cmd/dep \\\n+    && GOPATH=/opt/go /usr/local/go/bin/go get github.com/onsi/ginkgo/ginkgo\n+\n+# add Java 8 and rpm-build\n+RUN yum install -y rpm-build java-1.8.0-openjdk-devel && yum clean all\n+\n+# add minio software\n+RUN useradd -s /sbin/nologin -d /opt/minio minio \\\n+    && mkdir -p /opt/minio/bin \\\n+    && chmod a+rx /opt/minio \\\n+    && mkdir /opt/minio/data \\\n+    && wget -q https://dl.minio.io/server/minio/release/linux-amd64/minio -O /opt/minio/bin/minio \\\n+    && chmod +x /opt/minio/bin/minio \\\n+    && chown -R minio:minio /opt/minio\n+\n+# create user gpadmin since GPDB cannot run under root\n+RUN ssh-keygen -t rsa -N \"\" -f /root/.ssh/id_rsa \\\n+    && cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys \\\n+    && chmod 0600 /root/.ssh/authorized_keys \\\n+    && echo -e \"password\\npassword\" | passwd 2> /dev/null \\\n+    && { ssh-keyscan localhost; ssh-keyscan 0.0.0.0; } >> /root/.ssh/known_hosts \\\n+    && ssh-keygen -f /etc/ssh/ssh_host_key -N '' -t rsa1 \\\n+    && ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N '' -t rsa \\\n+    && ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N '' -t dsa \\\n+    && sed -i -e 's|Defaults    requiretty|#Defaults    requiretty|' /etc/sudoers \\\n+    && sed -ri 's/UsePAM yes/UsePAM no/g;s/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config \\\n+    && sed -ri 's@^HostKey /etc/ssh/ssh_host_ecdsa_key$@#&@;s@^HostKey /etc/ssh/ssh_host_ed25519_key$@#&@' /etc/ssh/sshd_config \\\n+    && groupadd -g 6000 gpadmin && useradd -u 6000 -g 6000 gpadmin \\\n+    && echo \"gpadmin  ALL=(ALL)       NOPASSWD: ALL\" > /etc/sudoers.d/gpadmin \\\n+    && groupadd supergroup && usermod -a -G supergroup gpadmin \\\n+    && mkdir /home/gpadmin/.ssh \\\n+    && ssh-keygen -t rsa -N \"\" -f /home/gpadmin/.ssh/id_rsa \\\n+    && cat /home/gpadmin/.ssh/id_rsa.pub >> /home/gpadmin/.ssh/authorized_keys \\\n+    && chmod 0600 /home/gpadmin/.ssh/authorized_keys \\\n+    && echo -e \"password\\npassword\" | passwd gpadmin 2> /dev/null \\\n+    && { ssh-keyscan localhost; ssh-keyscan 0.0.0.0; } >> /home/gpadmin/.ssh/known_hosts \\\n+    && chown -R gpadmin:gpadmin /home/gpadmin/.ssh \\\n+    # remove any java customization\n+    && rm -rf /etc/profile.d/java.sh \\\n+    # configure gpadmin limits\n+    && echo >> /etc/security/limits.d/gpadmin-limits.conf 'gpadmin soft core unlimited' \\\n+    && echo >> /etc/security/limits.d/gpadmin-limits.conf 'gpadmin soft nproc 131072' \\\n+    && echo >> /etc/security/limits.d/gpadmin-limits.conf 'gpadmin soft nofile 65536' \\\n+    # create .pxfrc\n+    && echo >> ~gpadmin/.pxfrc 'export PGPORT=5432' \\\n+    && echo >> ~gpadmin/.pxfrc 'export GOPATH=/opt/go' \\\n+    && echo >> ~gpadmin/.pxfrc 'export GPHOME=$(find /usr/local/ -name greenplum-db* -type d | head -n1)' \\\n+    && echo >> ~gpadmin/.pxfrc 'export PXF_HOME=$(find /usr/local/ -name pxf-gp* -type d | head -n1)' \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473cf763cc41460ce9a03321d4b32cfb85561c51"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDA5OTQ3OnYy", "diffSide": "RIGHT", "path": "concourse/docker/pxf-dev-server/cloudbuild.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjozOToyMlrOGS38Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjozOToyMlrOGS38Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0NDA1MA==", "bodyText": "minor: alignment ?", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r422444050", "createdAt": "2020-05-09T02:39:22Z", "author": {"login": "denalex"}, "path": "concourse/docker/pxf-dev-server/cloudbuild.yaml", "diffHunk": "@@ -0,0 +1,58 @@\n+# In this directory, run the following command to build this builder.\n+# $ gcloud builds submit . --config=cloudbuild.yaml\n+# You will need to provide replacements for _SINGLECLUSTER_BUCKET\n+\n+# Increase timeout to 40 minutes\n+timeout: 2400s\n+\n+steps:\n+- name: 'gcr.io/cloud-builders/gsutil'\n+  id: pxf-build-dependencies\n+  args: ['cp', 'gs://${_SINGLECLUSTER_BUCKET}/build-dependencies/pxf-build-dependencies.tar.gz', 'build/pxf-build-dependencies.tar.gz']\n+  waitFor: ['-']\n+\n+- name: 'gcr.io/cloud-builders/gsutil'\n+  id: singlecluster-hdp2\n+  args: ['cp', 'gs://${_SINGLECLUSTER_BUCKET}/singlecluster/HDP2/singlecluster-HDP2.tar.gz', 'build/singlecluster-HDP2.tar.gz']\n+  waitFor: ['-']\n+\n+  ##############################################################################", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473cf763cc41460ce9a03321d4b32cfb85561c51"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDE1MTcwOnYy", "diffSide": "RIGHT", "path": "concourse/docker/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNDoxOTowNlrOGS4Xfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNDoxOTowNlrOGS4Xfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MTA3MA==", "bodyText": "The cloudbuild pipeline", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r422451070", "createdAt": "2020-05-09T04:19:06Z", "author": {"login": "oliverralbertini"}, "path": "concourse/docker/README.md", "diffHunk": "@@ -1,9 +1,52 @@\n-#Docker container for GPDB development/testing\n-##Requirements\n+# Docker container for Greenplum development/testing\n+\n+## Requirements\n \n - docker 1.13 (with 3-4 GB allocated for docker host)\n \n Map-R 5.2 Image\n ```\n docker run --rm --privileged -p 8443:8443 -it pivotaldata/gpdb-dev:centos6-mapr5.2\n-```\n\\ No newline at end of file\n+```\n+\n+PXF uses [Google Cloud Build](https://cloud.google.com/cloud-build) to produce\n+development images that reside in\n+[Google Container Registry (GCR)](https://cloud.google.com/container-registry).\n+\n+The `cloudbuild` pipeline provides visibility into the cloud builds. The cloud\n+build pipeline triggers on changes to `pxf-dev-base` and changes to\n+`pxf-build-base`. The `cloudbuild` is in charge of tagging the images as latest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473cf763cc41460ce9a03321d4b32cfb85561c51"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDE1OTMxOnYy", "diffSide": "RIGHT", "path": "concourse/docker/pxf-dev-server/cloudbuild.yaml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNDozNTo0N1rOGS4bOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMDozMjo1NlrOGS6LPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjAyNg==", "bodyText": "where are we using this one?", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r422452026", "createdAt": "2020-05-09T04:35:47Z", "author": {"login": "oliverralbertini"}, "path": "concourse/docker/pxf-dev-server/cloudbuild.yaml", "diffHunk": "@@ -0,0 +1,58 @@\n+# In this directory, run the following command to build this builder.\n+# $ gcloud builds submit . --config=cloudbuild.yaml\n+# You will need to provide replacements for _SINGLECLUSTER_BUCKET\n+\n+# Increase timeout to 40 minutes\n+timeout: 2400s\n+\n+steps:\n+- name: 'gcr.io/cloud-builders/gsutil'\n+  id: pxf-build-dependencies\n+  args: ['cp', 'gs://${_SINGLECLUSTER_BUCKET}/build-dependencies/pxf-build-dependencies.tar.gz', 'build/pxf-build-dependencies.tar.gz']\n+  waitFor: ['-']\n+\n+- name: 'gcr.io/cloud-builders/gsutil'\n+  id: singlecluster-hdp2\n+  args: ['cp', 'gs://${_SINGLECLUSTER_BUCKET}/singlecluster/HDP2/singlecluster-HDP2.tar.gz', 'build/singlecluster-HDP2.tar.gz']\n+  waitFor: ['-']\n+\n+  ##############################################################################\n+# GPDB 6 CentOS 7 Images\n+##############################################################################\n+\n+# Builds the gpdb6-centos7-test-pxf-hdp2-image image\n+- name: 'gcr.io/cloud-builders/docker'\n+  id: gpdb6-centos7-test-pxf-hdp2-image-cache\n+  entrypoint: 'bash'\n+  args:\n+  - '-c'\n+  - |\n+    docker pull gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb6-centos7-test-pxf-hdp2:latest || exit 0\n+  waitFor: ['-']\n+\n+- name: 'gcr.io/cloud-builders/docker'\n+  id: gpdb6-centos7-test-pxf-hdp2-image\n+  args:\n+  - 'build'\n+  - '--build-arg=BASE_IMAGE=gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb6-centos7-test-pxf:latest'\n+  - '--tag=gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb6-centos7-test-pxf-hdp2:$COMMIT_SHA'\n+  - '--cache-from'\n+  - 'gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb6-centos7-test-pxf-hdp2:latest'\n+  - '-f'\n+  - 'concourse/docker/pxf-dev-server/Dockerfile'\n+  - 'build/'\n+  waitFor:\n+    - pxf-build-dependencies\n+    - singlecluster-hdp2\n+    - gpdb6-centos7-test-pxf-hdp2-image-cache\n+\n+# Tag the latest version as :latest. We use gcr.io/cloud-builders/docker here\n+- name: 'gcr.io/cloud-builders/docker'\n+  args: ['tag', 'gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb6-centos7-test-pxf-hdp2:$COMMIT_SHA', 'gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb6-centos7-test-pxf-hdp2']\n+  wait_for:\n+    - gpdb6-centos7-test-pxf-hdp2-image\n+\n+# Push images to Cloud Build to Container Registry\n+images:\n+- 'gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb6-centos7-test-pxf-hdp2'\n+- 'gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb6-centos7-test-pxf-hdp2:$COMMIT_SHA'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473cf763cc41460ce9a03321d4b32cfb85561c51"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MDcwMA==", "bodyText": "this is being used for PXF development", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r422480700", "createdAt": "2020-05-09T10:32:56Z", "author": {"login": "frankgh"}, "path": "concourse/docker/pxf-dev-server/cloudbuild.yaml", "diffHunk": "@@ -0,0 +1,58 @@\n+# In this directory, run the following command to build this builder.\n+# $ gcloud builds submit . --config=cloudbuild.yaml\n+# You will need to provide replacements for _SINGLECLUSTER_BUCKET\n+\n+# Increase timeout to 40 minutes\n+timeout: 2400s\n+\n+steps:\n+- name: 'gcr.io/cloud-builders/gsutil'\n+  id: pxf-build-dependencies\n+  args: ['cp', 'gs://${_SINGLECLUSTER_BUCKET}/build-dependencies/pxf-build-dependencies.tar.gz', 'build/pxf-build-dependencies.tar.gz']\n+  waitFor: ['-']\n+\n+- name: 'gcr.io/cloud-builders/gsutil'\n+  id: singlecluster-hdp2\n+  args: ['cp', 'gs://${_SINGLECLUSTER_BUCKET}/singlecluster/HDP2/singlecluster-HDP2.tar.gz', 'build/singlecluster-HDP2.tar.gz']\n+  waitFor: ['-']\n+\n+  ##############################################################################\n+# GPDB 6 CentOS 7 Images\n+##############################################################################\n+\n+# Builds the gpdb6-centos7-test-pxf-hdp2-image image\n+- name: 'gcr.io/cloud-builders/docker'\n+  id: gpdb6-centos7-test-pxf-hdp2-image-cache\n+  entrypoint: 'bash'\n+  args:\n+  - '-c'\n+  - |\n+    docker pull gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb6-centos7-test-pxf-hdp2:latest || exit 0\n+  waitFor: ['-']\n+\n+- name: 'gcr.io/cloud-builders/docker'\n+  id: gpdb6-centos7-test-pxf-hdp2-image\n+  args:\n+  - 'build'\n+  - '--build-arg=BASE_IMAGE=gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb6-centos7-test-pxf:latest'\n+  - '--tag=gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb6-centos7-test-pxf-hdp2:$COMMIT_SHA'\n+  - '--cache-from'\n+  - 'gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb6-centos7-test-pxf-hdp2:latest'\n+  - '-f'\n+  - 'concourse/docker/pxf-dev-server/Dockerfile'\n+  - 'build/'\n+  waitFor:\n+    - pxf-build-dependencies\n+    - singlecluster-hdp2\n+    - gpdb6-centos7-test-pxf-hdp2-image-cache\n+\n+# Tag the latest version as :latest. We use gcr.io/cloud-builders/docker here\n+- name: 'gcr.io/cloud-builders/docker'\n+  args: ['tag', 'gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb6-centos7-test-pxf-hdp2:$COMMIT_SHA', 'gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb6-centos7-test-pxf-hdp2']\n+  wait_for:\n+    - gpdb6-centos7-test-pxf-hdp2-image\n+\n+# Push images to Cloud Build to Container Registry\n+images:\n+- 'gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb6-centos7-test-pxf-hdp2'\n+- 'gcr.io/$PROJECT_ID/gpdb-pxf-dev/gpdb6-centos7-test-pxf-hdp2:$COMMIT_SHA'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjAyNg=="}, "originalCommit": {"oid": "473cf763cc41460ce9a03321d4b32cfb85561c51"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDE2NDM2OnYy", "diffSide": "RIGHT", "path": "concourse/scripts/check_docker_images_and_tag.bash", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNDo0NzoxNFrOGS4d0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMDo0MDowMVrOGS6NcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjY4OA==", "bodyText": "I would prefer something like:\ngcloud builds list --filter \"status='SUCCESS' AND build_id=${BUILD_ID}\" --format=json | jq -r '.[] | .id'", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r422452688", "createdAt": "2020-05-09T04:47:14Z", "author": {"login": "oliverralbertini"}, "path": "concourse/scripts/check_docker_images_and_tag.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/bin/bash\n+\n+set -euo pipefail\n+\n+COMMIT_SHA=$(cat pxf_src/.git/ref)\n+echo \"Checking images for PXF SHA-1: ${COMMIT_SHA}\"\n+\n+if [[ -z $IMAGE_LIST ]]; then\n+  echo \"The IMAGE_LIST needs to be provided\"\n+  exit 1\n+fi\n+\n+gcloud config set project \"$GOOGLE_PROJECT_ID\"\n+gcloud auth activate-service-account --key-file=<(echo \"$GOOGLE_CREDENTIALS\")\n+\n+# Don't quote $IMAGE_LIST to allow array\n+IMAGE_NAMES=(${IMAGE_LIST})\n+\n+# wait 1 minute before checking\n+sleep 1m\n+# get the build id\n+BUILD_ID=$(gcloud builds list --ongoing --filter \"images='gcr.io/${GOOGLE_PROJECT_ID}/gpdb-pxf-dev/${IMAGE_NAMES[0]}:${COMMIT_SHA}'\" | awk 'FNR == 2 {print $1}')\n+\n+# Wait ~ 40 minutes\n+for i in {0..40}\n+do\n+  if [ -n \"$BUILD_ID\" ]; then\n+    echo \"Checking status for build with ID: ${BUILD_ID}\"\n+    # if we have the $BUILD_ID, check the status using it\n+    STATUS=$(gcloud builds list --filter \"status='SUCCESS' AND build_id='${BUILD_ID}'\" 2>&1 | awk 'FNR == 2 {print $1}')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473cf763cc41460ce9a03321d4b32cfb85561c51"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjcxOQ==", "bodyText": "same can be done below", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r422452719", "createdAt": "2020-05-09T04:47:39Z", "author": {"login": "oliverralbertini"}, "path": "concourse/scripts/check_docker_images_and_tag.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/bin/bash\n+\n+set -euo pipefail\n+\n+COMMIT_SHA=$(cat pxf_src/.git/ref)\n+echo \"Checking images for PXF SHA-1: ${COMMIT_SHA}\"\n+\n+if [[ -z $IMAGE_LIST ]]; then\n+  echo \"The IMAGE_LIST needs to be provided\"\n+  exit 1\n+fi\n+\n+gcloud config set project \"$GOOGLE_PROJECT_ID\"\n+gcloud auth activate-service-account --key-file=<(echo \"$GOOGLE_CREDENTIALS\")\n+\n+# Don't quote $IMAGE_LIST to allow array\n+IMAGE_NAMES=(${IMAGE_LIST})\n+\n+# wait 1 minute before checking\n+sleep 1m\n+# get the build id\n+BUILD_ID=$(gcloud builds list --ongoing --filter \"images='gcr.io/${GOOGLE_PROJECT_ID}/gpdb-pxf-dev/${IMAGE_NAMES[0]}:${COMMIT_SHA}'\" | awk 'FNR == 2 {print $1}')\n+\n+# Wait ~ 40 minutes\n+for i in {0..40}\n+do\n+  if [ -n \"$BUILD_ID\" ]; then\n+    echo \"Checking status for build with ID: ${BUILD_ID}\"\n+    # if we have the $BUILD_ID, check the status using it\n+    STATUS=$(gcloud builds list --filter \"status='SUCCESS' AND build_id='${BUILD_ID}'\" 2>&1 | awk 'FNR == 2 {print $1}')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjY4OA=="}, "originalCommit": {"oid": "473cf763cc41460ce9a03321d4b32cfb85561c51"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MTI2NQ==", "bodyText": "unfortunately jq is unavailable in our base images. we are using light containers to reduce load on CI infra", "url": "https://github.com/greenplum-db/pxf/pull/350#discussion_r422481265", "createdAt": "2020-05-09T10:40:01Z", "author": {"login": "frankgh"}, "path": "concourse/scripts/check_docker_images_and_tag.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/bin/bash\n+\n+set -euo pipefail\n+\n+COMMIT_SHA=$(cat pxf_src/.git/ref)\n+echo \"Checking images for PXF SHA-1: ${COMMIT_SHA}\"\n+\n+if [[ -z $IMAGE_LIST ]]; then\n+  echo \"The IMAGE_LIST needs to be provided\"\n+  exit 1\n+fi\n+\n+gcloud config set project \"$GOOGLE_PROJECT_ID\"\n+gcloud auth activate-service-account --key-file=<(echo \"$GOOGLE_CREDENTIALS\")\n+\n+# Don't quote $IMAGE_LIST to allow array\n+IMAGE_NAMES=(${IMAGE_LIST})\n+\n+# wait 1 minute before checking\n+sleep 1m\n+# get the build id\n+BUILD_ID=$(gcloud builds list --ongoing --filter \"images='gcr.io/${GOOGLE_PROJECT_ID}/gpdb-pxf-dev/${IMAGE_NAMES[0]}:${COMMIT_SHA}'\" | awk 'FNR == 2 {print $1}')\n+\n+# Wait ~ 40 minutes\n+for i in {0..40}\n+do\n+  if [ -n \"$BUILD_ID\" ]; then\n+    echo \"Checking status for build with ID: ${BUILD_ID}\"\n+    # if we have the $BUILD_ID, check the status using it\n+    STATUS=$(gcloud builds list --filter \"status='SUCCESS' AND build_id='${BUILD_ID}'\" 2>&1 | awk 'FNR == 2 {print $1}')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjY4OA=="}, "originalCommit": {"oid": "473cf763cc41460ce9a03321d4b32cfb85561c51"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3636, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}