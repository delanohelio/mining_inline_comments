{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNzExMDAw", "number": 454, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTo0MzoyOVrOEnOtQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMzo0NjozNFrOEnQcww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTcwODgxOnYy", "diffSide": "RIGHT", "path": "concourse/pipelines/templates/build_pipeline-tpl.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTo0MzoyOVrOHXtrfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTo0MzoyOVrOHXtrfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYyNzcxMQ==", "bodyText": "no MS please on OSS code", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494627711", "createdAt": "2020-09-24T21:43:29Z", "author": {"login": "denalex"}, "path": "concourse/pipelines/templates/build_pipeline-tpl.yml", "diffHunk": "@@ -305,6 +301,21 @@ resources:\n     json_key: ((concourse-gcs-resources-service-account-key))\n     regexp: ((pxf-releng-odp-drop-path))/((pxf-odp-file-prefix))-(.*)-ODP.tar.gz\n \n+## ---------- RelEng Drop Artifacts for MS ----------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTcyNDU1OnYy", "diffSide": "RIGHT", "path": "concourse/scripts/generate_tarball_from_rpm.bash", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTo0ODo1OVrOHXt0jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTo0ODo1OVrOHXt0jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYzMDAyOQ==", "bodyText": "we're not checking OSL file here", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494630029", "createdAt": "2020-09-24T21:48:59Z", "author": {"login": "denalex"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}\n+  echo \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\n+else\n+  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n+  exit 1\n+fi\n+\n+# install the new RPM, check that the OSL file is present", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTcyNjI4OnYy", "diffSide": "RIGHT", "path": "concourse/scripts/generate_tarball_from_rpm.bash", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTo0OTozOFrOHXt1mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTo0OTozOFrOHXt1mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYzMDI5OA==", "bodyText": "if you expect files in pxf_artifacts/licensed below, why not search there ?", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494630298", "createdAt": "2020-09-24T21:49:38Z", "author": {"login": "denalex"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTcyNzYyOnYy", "diffSide": "RIGHT", "path": "concourse/scripts/generate_tarball_from_rpm.bash", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTo1MDowNlrOHXt2Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTo1MDowNlrOHXt2Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYzMDQ4Nw==", "bodyText": "we are not dealing with deb here", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494630487", "createdAt": "2020-09-24T21:50:06Z", "author": {"login": "denalex"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTcyOTA2OnYy", "diffSide": "RIGHT", "path": "concourse/scripts/generate_tarball_from_rpm.bash", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTo1MDozNlrOHXt3Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTo1MDozNlrOHXt3Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYzMDY5OA==", "bodyText": "why even bother if you gonna install the RPM, the version is in the version file", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494630698", "createdAt": "2020-09-24T21:50:36Z", "author": {"login": "denalex"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTczMjUzOnYy", "diffSide": "RIGHT", "path": "concourse/scripts/generate_tarball_from_rpm.bash", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTo1MTo1OFrOHXt5RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMjowMzozMlrOHXuMRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYzMTIzNw==", "bodyText": "so we're packaging the OSL file as well ?", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494631237", "createdAt": "2020-09-24T21:51:58Z", "author": {"login": "denalex"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}\n+  echo \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\n+else\n+  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n+  exit 1\n+fi\n+\n+# install the new RPM, check that the OSL file is present\n+rpm -ivh \"$rpm_file_name\"\n+echo \"listing installed directory /usr/local/pxf-gp${GP_VER}:\"\n+ls -al \"/usr/local/pxf-gp${GP_VER}\"\n+\n+# copy installed PXF into a staging directory\n+mkdir -p /tmp/pxf_tarball_repackage\n+cp -R \"/usr/local/pxf-gp${GP_VER}/\" /tmp/pxf_tarball_repackage/pxf\n+\n+# place gpextable into the appropriate locations when creating internal `pxf.tar.gz` tarball, so they are just extracted and no additional copying is required\n+mv /tmp/pxf_tarball_repackage/pxf/gpextable/* /tmp/pxf_tarball_repackage/\n+rm -rf /tmp/pxf_tarball_repackage/pxf/gpextable/\n+\n+# list staging directory\n+echo \"listing staging directory /tmp/pxf_tarball_repackage\"\n+ls -al /tmp/pxf_tarball_repackage\n+\n+# create the pxf.tar.gz that contains all files from the RPM installation\n+echo \"create the pxf tarball\"\n+mkdir -p /tmp/pxf_tarball\n+tar -czf /tmp/pxf_tarball/pxf.tar.gz -C /tmp/pxf_tarball_repackage .", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYzNjEwMA==", "bodyText": "yes, it's required, checked with releng", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494636100", "createdAt": "2020-09-24T22:03:32Z", "author": {"login": "frankgh"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}\n+  echo \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\n+else\n+  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n+  exit 1\n+fi\n+\n+# install the new RPM, check that the OSL file is present\n+rpm -ivh \"$rpm_file_name\"\n+echo \"listing installed directory /usr/local/pxf-gp${GP_VER}:\"\n+ls -al \"/usr/local/pxf-gp${GP_VER}\"\n+\n+# copy installed PXF into a staging directory\n+mkdir -p /tmp/pxf_tarball_repackage\n+cp -R \"/usr/local/pxf-gp${GP_VER}/\" /tmp/pxf_tarball_repackage/pxf\n+\n+# place gpextable into the appropriate locations when creating internal `pxf.tar.gz` tarball, so they are just extracted and no additional copying is required\n+mv /tmp/pxf_tarball_repackage/pxf/gpextable/* /tmp/pxf_tarball_repackage/\n+rm -rf /tmp/pxf_tarball_repackage/pxf/gpextable/\n+\n+# list staging directory\n+echo \"listing staging directory /tmp/pxf_tarball_repackage\"\n+ls -al /tmp/pxf_tarball_repackage\n+\n+# create the pxf.tar.gz that contains all files from the RPM installation\n+echo \"create the pxf tarball\"\n+mkdir -p /tmp/pxf_tarball\n+tar -czf /tmp/pxf_tarball/pxf.tar.gz -C /tmp/pxf_tarball_repackage .", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYzMTIzNw=="}, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTczNzMzOnYy", "diffSide": "RIGHT", "path": "concourse/scripts/generate_tarball_from_rpm.bash", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTo1MzozN1rOHXt8Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMjowMzo0OFrOHXuMnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYzMTk1OQ==", "bodyText": "wouldn't you want to determine base_dir and prefix pxf.tar.gz with it so that the script can be called from anywhere ?", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494631959", "createdAt": "2020-09-24T21:53:37Z", "author": {"login": "denalex"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}\n+  echo \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\n+else\n+  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n+  exit 1\n+fi\n+\n+# install the new RPM, check that the OSL file is present\n+rpm -ivh \"$rpm_file_name\"\n+echo \"listing installed directory /usr/local/pxf-gp${GP_VER}:\"\n+ls -al \"/usr/local/pxf-gp${GP_VER}\"\n+\n+# copy installed PXF into a staging directory\n+mkdir -p /tmp/pxf_tarball_repackage\n+cp -R \"/usr/local/pxf-gp${GP_VER}/\" /tmp/pxf_tarball_repackage/pxf\n+\n+# place gpextable into the appropriate locations when creating internal `pxf.tar.gz` tarball, so they are just extracted and no additional copying is required\n+mv /tmp/pxf_tarball_repackage/pxf/gpextable/* /tmp/pxf_tarball_repackage/\n+rm -rf /tmp/pxf_tarball_repackage/pxf/gpextable/\n+\n+# list staging directory\n+echo \"listing staging directory /tmp/pxf_tarball_repackage\"\n+ls -al /tmp/pxf_tarball_repackage\n+\n+# create the pxf.tar.gz that contains all files from the RPM installation\n+echo \"create the pxf tarball\"\n+mkdir -p /tmp/pxf_tarball\n+tar -czf /tmp/pxf_tarball/pxf.tar.gz -C /tmp/pxf_tarball_repackage .\n+\n+# create the install_gpdb_component file\n+cat > /tmp/pxf_tarball/install_gpdb_component <<EOF\n+#!/bin/bash\n+set -x\n+: \"\\${GPHOME:?GPHOME must be set}\"\n+tar xvzf pxf.tar.gz -C \\$GPHOME", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYzNjE4OQ==", "bodyText": "sure", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494636189", "createdAt": "2020-09-24T22:03:48Z", "author": {"login": "frankgh"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}\n+  echo \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\n+else\n+  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n+  exit 1\n+fi\n+\n+# install the new RPM, check that the OSL file is present\n+rpm -ivh \"$rpm_file_name\"\n+echo \"listing installed directory /usr/local/pxf-gp${GP_VER}:\"\n+ls -al \"/usr/local/pxf-gp${GP_VER}\"\n+\n+# copy installed PXF into a staging directory\n+mkdir -p /tmp/pxf_tarball_repackage\n+cp -R \"/usr/local/pxf-gp${GP_VER}/\" /tmp/pxf_tarball_repackage/pxf\n+\n+# place gpextable into the appropriate locations when creating internal `pxf.tar.gz` tarball, so they are just extracted and no additional copying is required\n+mv /tmp/pxf_tarball_repackage/pxf/gpextable/* /tmp/pxf_tarball_repackage/\n+rm -rf /tmp/pxf_tarball_repackage/pxf/gpextable/\n+\n+# list staging directory\n+echo \"listing staging directory /tmp/pxf_tarball_repackage\"\n+ls -al /tmp/pxf_tarball_repackage\n+\n+# create the pxf.tar.gz that contains all files from the RPM installation\n+echo \"create the pxf tarball\"\n+mkdir -p /tmp/pxf_tarball\n+tar -czf /tmp/pxf_tarball/pxf.tar.gz -C /tmp/pxf_tarball_repackage .\n+\n+# create the install_gpdb_component file\n+cat > /tmp/pxf_tarball/install_gpdb_component <<EOF\n+#!/bin/bash\n+set -x\n+: \"\\${GPHOME:?GPHOME must be set}\"\n+tar xvzf pxf.tar.gz -C \\$GPHOME", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYzMTk1OQ=="}, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTgxMjYyOnYy", "diffSide": "RIGHT", "path": "concourse/scripts/generate_tarball_from_rpm.bash", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMjoyMzowNlrOHXuorg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMjoyNTozMVrOHXusIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0MzM3NA==", "bodyText": "@ashuka24 and I were working with bash regex earlier and the following pattern works:\nif ! [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n  exit 1\nfi\npxf_version=${BASH_REMATCH[1]}\nsuffix=${BASH_REMATCH[2]}\necho \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\nI feel like it is marginally more readable by turning the if-condition into a guard clause.", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494643374", "createdAt": "2020-09-24T22:23:06Z", "author": {"login": "bradfordb-vmware"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0NDIwMw==", "bodyText": "I went with Alex's suggestion of just getting the PXF version from the version file", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494644203", "createdAt": "2020-09-24T22:25:19Z", "author": {"login": "frankgh"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0MzM3NA=="}, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0NDI1OQ==", "bodyText": "so no more if :(", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494644259", "createdAt": "2020-09-24T22:25:31Z", "author": {"login": "frankgh"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0MzM3NA=="}, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTgxNzcyOnYy", "diffSide": "RIGHT", "path": "concourse/scripts/generate_tarball_from_rpm.bash", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMjoyNTowNFrOHXurnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMToyODoxM1rOHYTRtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0NDEyNw==", "bodyText": "Since this is running in CI, I'd drop the -h option which prints a progress bar with # characters. I'd also consider dropping -v unless we want to have a list of the unpacked files printed to the screen.", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494644127", "createdAt": "2020-09-24T22:25:04Z", "author": {"login": "bradfordb-vmware"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}\n+  echo \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\n+else\n+  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n+  exit 1\n+fi\n+\n+# install the new RPM, check that the OSL file is present\n+rpm -ivh \"$rpm_file_name\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0NDg5Mw==", "bodyText": "It looks like we are installing only to copy the files out of the rpm. I'd use rpm2cpio *.rpm | cpio -idm to extract in the current working directory. Although this won't run the installation scriptlets.", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494644893", "createdAt": "2020-09-24T22:27:24Z", "author": {"login": "bradfordb-vmware"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}\n+  echo \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\n+else\n+  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n+  exit 1\n+fi\n+\n+# install the new RPM, check that the OSL file is present\n+rpm -ivh \"$rpm_file_name\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0NDEyNw=="}, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyMzAyMQ==", "bodyText": "for now, I'd like to keep rpm install, but we can revisit if requirements change", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r495123021", "createdAt": "2020-09-25T17:10:29Z", "author": {"login": "frankgh"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}\n+  echo \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\n+else\n+  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n+  exit 1\n+fi\n+\n+# install the new RPM, check that the OSL file is present\n+rpm -ivh \"$rpm_file_name\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0NDEyNw=="}, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI0MzcwMw==", "bodyText": "after some discussion, we think the rpm2cpio approach is more beneficial for the future", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r495243703", "createdAt": "2020-09-25T21:28:13Z", "author": {"login": "frankgh"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}\n+  echo \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\n+else\n+  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n+  exit 1\n+fi\n+\n+# install the new RPM, check that the OSL file is present\n+rpm -ivh \"$rpm_file_name\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0NDEyNw=="}, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTk5NDI3OnYy", "diffSide": "RIGHT", "path": "concourse/scripts/generate_tarball_from_rpm.bash", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMzo0NjozNFrOHXwQfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzowOTo0MlrOHYL4ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2OTk0OA==", "bodyText": "Have we confirmed w/ RelEng if $GPHOME will be set when this is called? I can't remember.", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494669948", "createdAt": "2020-09-24T23:46:34Z", "author": {"login": "bradfordb-vmware"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}\n+  echo \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\n+else\n+  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n+  exit 1\n+fi\n+\n+# install the new RPM, check that the OSL file is present\n+rpm -ivh \"$rpm_file_name\"\n+echo \"listing installed directory /usr/local/pxf-gp${GP_VER}:\"\n+ls -al \"/usr/local/pxf-gp${GP_VER}\"\n+\n+# copy installed PXF into a staging directory\n+mkdir -p /tmp/pxf_tarball_repackage\n+cp -R \"/usr/local/pxf-gp${GP_VER}/\" /tmp/pxf_tarball_repackage/pxf\n+\n+# place gpextable into the appropriate locations when creating internal `pxf.tar.gz` tarball, so they are just extracted and no additional copying is required\n+mv /tmp/pxf_tarball_repackage/pxf/gpextable/* /tmp/pxf_tarball_repackage/\n+rm -rf /tmp/pxf_tarball_repackage/pxf/gpextable/\n+\n+# list staging directory\n+echo \"listing staging directory /tmp/pxf_tarball_repackage\"\n+ls -al /tmp/pxf_tarball_repackage\n+\n+# create the pxf.tar.gz that contains all files from the RPM installation\n+echo \"create the pxf tarball\"\n+mkdir -p /tmp/pxf_tarball\n+tar -czf /tmp/pxf_tarball/pxf.tar.gz -C /tmp/pxf_tarball_repackage .\n+\n+# create the install_gpdb_component file\n+cat > /tmp/pxf_tarball/install_gpdb_component <<EOF\n+#!/bin/bash\n+set -x\n+: \"\\${GPHOME:?GPHOME must be set}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NjU0Mw==", "bodyText": "it was on the story as a requirement:\n\nWhen install_gpdb_component is run using the standard process of installing internal components it shall:\n\nCheck is $GPHOME is set, fail otherwise\n...", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494676543", "createdAt": "2020-09-25T00:09:52Z", "author": {"login": "frankgh"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}\n+  echo \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\n+else\n+  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n+  exit 1\n+fi\n+\n+# install the new RPM, check that the OSL file is present\n+rpm -ivh \"$rpm_file_name\"\n+echo \"listing installed directory /usr/local/pxf-gp${GP_VER}:\"\n+ls -al \"/usr/local/pxf-gp${GP_VER}\"\n+\n+# copy installed PXF into a staging directory\n+mkdir -p /tmp/pxf_tarball_repackage\n+cp -R \"/usr/local/pxf-gp${GP_VER}/\" /tmp/pxf_tarball_repackage/pxf\n+\n+# place gpextable into the appropriate locations when creating internal `pxf.tar.gz` tarball, so they are just extracted and no additional copying is required\n+mv /tmp/pxf_tarball_repackage/pxf/gpextable/* /tmp/pxf_tarball_repackage/\n+rm -rf /tmp/pxf_tarball_repackage/pxf/gpextable/\n+\n+# list staging directory\n+echo \"listing staging directory /tmp/pxf_tarball_repackage\"\n+ls -al /tmp/pxf_tarball_repackage\n+\n+# create the pxf.tar.gz that contains all files from the RPM installation\n+echo \"create the pxf tarball\"\n+mkdir -p /tmp/pxf_tarball\n+tar -czf /tmp/pxf_tarball/pxf.tar.gz -C /tmp/pxf_tarball_repackage .\n+\n+# create the install_gpdb_component file\n+cat > /tmp/pxf_tarball/install_gpdb_component <<EOF\n+#!/bin/bash\n+set -x\n+: \"\\${GPHOME:?GPHOME must be set}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2OTk0OA=="}, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyMjU5NQ==", "bodyText": "thanks for checking @bradfordb-vmware . GPHOME is set to run the script.", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r495122595", "createdAt": "2020-09-25T17:09:42Z", "author": {"login": "frankgh"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}\n+  echo \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\n+else\n+  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n+  exit 1\n+fi\n+\n+# install the new RPM, check that the OSL file is present\n+rpm -ivh \"$rpm_file_name\"\n+echo \"listing installed directory /usr/local/pxf-gp${GP_VER}:\"\n+ls -al \"/usr/local/pxf-gp${GP_VER}\"\n+\n+# copy installed PXF into a staging directory\n+mkdir -p /tmp/pxf_tarball_repackage\n+cp -R \"/usr/local/pxf-gp${GP_VER}/\" /tmp/pxf_tarball_repackage/pxf\n+\n+# place gpextable into the appropriate locations when creating internal `pxf.tar.gz` tarball, so they are just extracted and no additional copying is required\n+mv /tmp/pxf_tarball_repackage/pxf/gpextable/* /tmp/pxf_tarball_repackage/\n+rm -rf /tmp/pxf_tarball_repackage/pxf/gpextable/\n+\n+# list staging directory\n+echo \"listing staging directory /tmp/pxf_tarball_repackage\"\n+ls -al /tmp/pxf_tarball_repackage\n+\n+# create the pxf.tar.gz that contains all files from the RPM installation\n+echo \"create the pxf tarball\"\n+mkdir -p /tmp/pxf_tarball\n+tar -czf /tmp/pxf_tarball/pxf.tar.gz -C /tmp/pxf_tarball_repackage .\n+\n+# create the install_gpdb_component file\n+cat > /tmp/pxf_tarball/install_gpdb_component <<EOF\n+#!/bin/bash\n+set -x\n+: \"\\${GPHOME:?GPHOME must be set}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2OTk0OA=="}, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3478, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}