{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNzExMDAw", "number": 454, "title": "Publish PXF binary tarballs", "bodyText": "Support an internal component tarball for new PXF releases that fully\nsupport installation with no manual action. The\nPublish_PXF-GP5_and_PXF-GP6_Artifacts_to_GP-RelEng job in the\npxf-build pipeline will now has two new tasks:\n\nGenerate PXF binary tarball from PXF-GP5 on RHEL6 RPM\nGenerate PXF binary tarball from PXF-GP6 on RHEL7 RPM\n\nThese tasks will produce a tarball with an installer script from a\nPXF RPM. The binary tarballs need to be created for both GP5 (RHEL6) and\nGP6 (RHEL7) only.\nThe script that is run by the task does the following:\n\nTakes as input a licensed PXF RPM\nTars the content of the PXF RPM so it is laid out in $GPHOME upon\nextraction\nTars the resulting tar from the previous step and an installer script\nProvides an install_gpdb_component executable bash script that\ninstalls PXF under GPHOME (GPHOME is mandatory)\n\nThe produced artifacts are then uploaded to Google Cloud Storage buckets\nto be consumed by release engineering.", "createdAt": "2020-09-24T21:32:51Z", "url": "https://github.com/greenplum-db/pxf/pull/454", "merged": true, "mergeCommit": {"oid": "85ce1a30a04965e935649633b890778618da401b"}, "closed": true, "closedAt": "2020-09-28T17:56:59Z", "author": {"login": "frankgh"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMIc1sAFqTQ5NTk3MjEwMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMpwWrgBqjM4MTA3NDU2Njg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1OTcyMTAw", "url": "https://github.com/greenplum-db/pxf/pull/454#pullrequestreview-495972100", "createdAt": "2020-09-24T21:43:29Z", "commit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTo0MzoyOVrOHXtrfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTo1MzozN1rOHXt8Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYyNzcxMQ==", "bodyText": "no MS please on OSS code", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494627711", "createdAt": "2020-09-24T21:43:29Z", "author": {"login": "denalex"}, "path": "concourse/pipelines/templates/build_pipeline-tpl.yml", "diffHunk": "@@ -305,6 +301,21 @@ resources:\n     json_key: ((concourse-gcs-resources-service-account-key))\n     regexp: ((pxf-releng-odp-drop-path))/((pxf-odp-file-prefix))-(.*)-ODP.tar.gz\n \n+## ---------- RelEng Drop Artifacts for MS ----------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYzMDAyOQ==", "bodyText": "we're not checking OSL file here", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494630029", "createdAt": "2020-09-24T21:48:59Z", "author": {"login": "denalex"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}\n+  echo \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\n+else\n+  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n+  exit 1\n+fi\n+\n+# install the new RPM, check that the OSL file is present", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYzMDI5OA==", "bodyText": "if you expect files in pxf_artifacts/licensed below, why not search there ?", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494630298", "createdAt": "2020-09-24T21:49:38Z", "author": {"login": "denalex"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYzMDQ4Nw==", "bodyText": "we are not dealing with deb here", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494630487", "createdAt": "2020-09-24T21:50:06Z", "author": {"login": "denalex"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYzMDY5OA==", "bodyText": "why even bother if you gonna install the RPM, the version is in the version file", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494630698", "createdAt": "2020-09-24T21:50:36Z", "author": {"login": "denalex"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYzMTIzNw==", "bodyText": "so we're packaging the OSL file as well ?", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494631237", "createdAt": "2020-09-24T21:51:58Z", "author": {"login": "denalex"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}\n+  echo \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\n+else\n+  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n+  exit 1\n+fi\n+\n+# install the new RPM, check that the OSL file is present\n+rpm -ivh \"$rpm_file_name\"\n+echo \"listing installed directory /usr/local/pxf-gp${GP_VER}:\"\n+ls -al \"/usr/local/pxf-gp${GP_VER}\"\n+\n+# copy installed PXF into a staging directory\n+mkdir -p /tmp/pxf_tarball_repackage\n+cp -R \"/usr/local/pxf-gp${GP_VER}/\" /tmp/pxf_tarball_repackage/pxf\n+\n+# place gpextable into the appropriate locations when creating internal `pxf.tar.gz` tarball, so they are just extracted and no additional copying is required\n+mv /tmp/pxf_tarball_repackage/pxf/gpextable/* /tmp/pxf_tarball_repackage/\n+rm -rf /tmp/pxf_tarball_repackage/pxf/gpextable/\n+\n+# list staging directory\n+echo \"listing staging directory /tmp/pxf_tarball_repackage\"\n+ls -al /tmp/pxf_tarball_repackage\n+\n+# create the pxf.tar.gz that contains all files from the RPM installation\n+echo \"create the pxf tarball\"\n+mkdir -p /tmp/pxf_tarball\n+tar -czf /tmp/pxf_tarball/pxf.tar.gz -C /tmp/pxf_tarball_repackage .", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYzMTk1OQ==", "bodyText": "wouldn't you want to determine base_dir and prefix pxf.tar.gz with it so that the script can be called from anywhere ?", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494631959", "createdAt": "2020-09-24T21:53:37Z", "author": {"login": "denalex"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}\n+  echo \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\n+else\n+  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n+  exit 1\n+fi\n+\n+# install the new RPM, check that the OSL file is present\n+rpm -ivh \"$rpm_file_name\"\n+echo \"listing installed directory /usr/local/pxf-gp${GP_VER}:\"\n+ls -al \"/usr/local/pxf-gp${GP_VER}\"\n+\n+# copy installed PXF into a staging directory\n+mkdir -p /tmp/pxf_tarball_repackage\n+cp -R \"/usr/local/pxf-gp${GP_VER}/\" /tmp/pxf_tarball_repackage/pxf\n+\n+# place gpextable into the appropriate locations when creating internal `pxf.tar.gz` tarball, so they are just extracted and no additional copying is required\n+mv /tmp/pxf_tarball_repackage/pxf/gpextable/* /tmp/pxf_tarball_repackage/\n+rm -rf /tmp/pxf_tarball_repackage/pxf/gpextable/\n+\n+# list staging directory\n+echo \"listing staging directory /tmp/pxf_tarball_repackage\"\n+ls -al /tmp/pxf_tarball_repackage\n+\n+# create the pxf.tar.gz that contains all files from the RPM installation\n+echo \"create the pxf tarball\"\n+mkdir -p /tmp/pxf_tarball\n+tar -czf /tmp/pxf_tarball/pxf.tar.gz -C /tmp/pxf_tarball_repackage .\n+\n+# create the install_gpdb_component file\n+cat > /tmp/pxf_tarball/install_gpdb_component <<EOF\n+#!/bin/bash\n+set -x\n+: \"\\${GPHOME:?GPHOME must be set}\"\n+tar xvzf pxf.tar.gz -C \\$GPHOME", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1OTkwOTgw", "url": "https://github.com/greenplum-db/pxf/pull/454#pullrequestreview-495990980", "createdAt": "2020-09-24T22:23:06Z", "commit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMjoyMzowNlrOHXuorg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMjoyMzowNlrOHXuorg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0MzM3NA==", "bodyText": "@ashuka24 and I were working with bash regex earlier and the following pattern works:\nif ! [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n  exit 1\nfi\npxf_version=${BASH_REMATCH[1]}\nsuffix=${BASH_REMATCH[2]}\necho \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\nI feel like it is marginally more readable by turning the if-condition into a guard clause.", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494643374", "createdAt": "2020-09-24T22:23:06Z", "author": {"login": "bradfordb-vmware"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1OTkxODQ1", "url": "https://github.com/greenplum-db/pxf/pull/454#pullrequestreview-495991845", "createdAt": "2020-09-24T22:25:04Z", "commit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMjoyNTowNFrOHXurnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMzo0NjozNFrOHXwQfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0NDEyNw==", "bodyText": "Since this is running in CI, I'd drop the -h option which prints a progress bar with # characters. I'd also consider dropping -v unless we want to have a list of the unpacked files printed to the screen.", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494644127", "createdAt": "2020-09-24T22:25:04Z", "author": {"login": "bradfordb-vmware"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}\n+  echo \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\n+else\n+  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n+  exit 1\n+fi\n+\n+# install the new RPM, check that the OSL file is present\n+rpm -ivh \"$rpm_file_name\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0NDg5Mw==", "bodyText": "It looks like we are installing only to copy the files out of the rpm. I'd use rpm2cpio *.rpm | cpio -idm to extract in the current working directory. Although this won't run the installation scriptlets.", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494644893", "createdAt": "2020-09-24T22:27:24Z", "author": {"login": "bradfordb-vmware"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}\n+  echo \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\n+else\n+  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n+  exit 1\n+fi\n+\n+# install the new RPM, check that the OSL file is present\n+rpm -ivh \"$rpm_file_name\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0NDEyNw=="}, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2OTk0OA==", "bodyText": "Have we confirmed w/ RelEng if $GPHOME will be set when this is called? I can't remember.", "url": "https://github.com/greenplum-db/pxf/pull/454#discussion_r494669948", "createdAt": "2020-09-24T23:46:34Z", "author": {"login": "bradfordb-vmware"}, "path": "concourse/scripts/generate_tarball_from_rpm.bash", "diffHunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+: \"${GP_VER:?GP_VER must be set}\"\n+: \"${TARGET_OS_VERSION:?TARGET_OS_VERSION must be set}\"\n+\n+function fail() {\n+  echo \"Error: $1\"\n+  exit 1\n+}\n+\n+# check if directory with artifacts is available\n+[[ -d pxf_artifacts ]] || fail \"pxf_artifacts directory not found\"\n+\n+# check if the RPM for GP version and TARGET_OS_VERSION is available\n+rpm_file_name=$(find pxf_artifacts -type f -name \"pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm\")\n+[[ -f ${rpm_file_name} ]] || fail \"pxf_artifacts/licensed/pxf-gp${GP_VER}-*-2.el${TARGET_OS_VERSION}.x86_64.rpm not found\"\n+\n+# attempt to determine the PXF version\n+if [[ ${rpm_file_name##*/} =~ pxf-gp${GP_VER}-([0-9.]+)-2[\\.-](.*\\.(deb|rpm)) ]]; then\n+  pxf_version=${BASH_REMATCH[1]}\n+  suffix=${BASH_REMATCH[2]}\n+  echo \"Determined PXF version number to be '${pxf_version}' with suffix '${suffix}'...\"\n+else\n+  echo \"Couldn't determine version number from file named '${rpm_file_name}'...\"\n+  exit 1\n+fi\n+\n+# install the new RPM, check that the OSL file is present\n+rpm -ivh \"$rpm_file_name\"\n+echo \"listing installed directory /usr/local/pxf-gp${GP_VER}:\"\n+ls -al \"/usr/local/pxf-gp${GP_VER}\"\n+\n+# copy installed PXF into a staging directory\n+mkdir -p /tmp/pxf_tarball_repackage\n+cp -R \"/usr/local/pxf-gp${GP_VER}/\" /tmp/pxf_tarball_repackage/pxf\n+\n+# place gpextable into the appropriate locations when creating internal `pxf.tar.gz` tarball, so they are just extracted and no additional copying is required\n+mv /tmp/pxf_tarball_repackage/pxf/gpextable/* /tmp/pxf_tarball_repackage/\n+rm -rf /tmp/pxf_tarball_repackage/pxf/gpextable/\n+\n+# list staging directory\n+echo \"listing staging directory /tmp/pxf_tarball_repackage\"\n+ls -al /tmp/pxf_tarball_repackage\n+\n+# create the pxf.tar.gz that contains all files from the RPM installation\n+echo \"create the pxf tarball\"\n+mkdir -p /tmp/pxf_tarball\n+tar -czf /tmp/pxf_tarball/pxf.tar.gz -C /tmp/pxf_tarball_repackage .\n+\n+# create the install_gpdb_component file\n+cat > /tmp/pxf_tarball/install_gpdb_component <<EOF\n+#!/bin/bash\n+set -x\n+: \"\\${GPHOME:?GPHOME must be set}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c56a291d5daa37fd133a57542881fb7388803856"}, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81d79644461fee02d0924bfffd1190169b5075aa", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/81d79644461fee02d0924bfffd1190169b5075aa", "committedDate": "2020-09-25T00:46:03Z", "message": "Address PR feedback. Fix artifact name"}, "afterCommit": {"oid": "f71db4de01663e10b56f085f7cac8396efb2c193", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/f71db4de01663e10b56f085f7cac8396efb2c193", "committedDate": "2020-09-25T18:47:18Z", "message": "CI: Publish GP5 artifacts to Google Cloud Storage\n\nRelease engineering has requested that we start publishing GP5 artifacts\nto Google Cloud Storage instead of S3. This commit changes the location\nwhere these artifacts are published."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2OTE1NzEy", "url": "https://github.com/greenplum-db/pxf/pull/454#pullrequestreview-496915712", "createdAt": "2020-09-25T23:48:42Z", "commit": {"oid": "f71db4de01663e10b56f085f7cac8396efb2c193"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7338a53a9f2b7c588a5124b27a7f6a748a8c6c1", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/b7338a53a9f2b7c588a5124b27a7f6a748a8c6c1", "committedDate": "2020-09-26T12:43:00Z", "message": "Publish PXF binary tarballs\n\nSupport an internal component tarball for new PXF releases that fully\nsupport installation with no manual action. The\n`Publish_PXF-GP5_and_PXF-GP6_Artifacts_to_GP-RelEng` job in the\n`pxf-build` pipeline will now has two new tasks:\n- Generate PXF binary tarball from PXF-GP5 on RHEL6 RPM\n- Generate PXF binary tarball from PXF-GP6 on RHEL7 RPM\n\nThese tasks will produce a tarball with an installer script from a\nPXF RPM. The binary tarballs need to be created for both GP5 (RHEL6) and\nGP6 (RHEL7) only.\n\nThe script that is run by the task does the following:\n- Takes as input a `licensed` PXF RPM\n- Tars the content of the PXF RPM so it is laid out in $GPHOME upon\n  extraction\n- Tars the resulting tar from the previous step and an installer script\n- Provides an `install_gpdb_component` executable bash script that\n  installs PXF under GPHOME (GPHOME is mandatory)\n\nThe produced artifacts are then uploaded to Google Cloud Storage buckets\nto be consumed by release engineering.\n\nFinally, notify releng of the tarballs that have been published along\nwith RPM/deb/OSL/ODP."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c5d78bd70c811428a01139397492e0b8da8ce8d", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/3c5d78bd70c811428a01139397492e0b8da8ce8d", "committedDate": "2020-09-26T12:43:07Z", "message": "CI: Publish GP5 artifacts to Google Cloud Storage\n\nRelease engineering has requested that we start publishing GP5 artifacts\nto Google Cloud Storage instead of S3. This commit changes the location\nwhere these artifacts are published."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f71db4de01663e10b56f085f7cac8396efb2c193", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/f71db4de01663e10b56f085f7cac8396efb2c193", "committedDate": "2020-09-25T18:47:18Z", "message": "CI: Publish GP5 artifacts to Google Cloud Storage\n\nRelease engineering has requested that we start publishing GP5 artifacts\nto Google Cloud Storage instead of S3. This commit changes the location\nwhere these artifacts are published."}, "afterCommit": {"oid": "3c5d78bd70c811428a01139397492e0b8da8ce8d", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/3c5d78bd70c811428a01139397492e0b8da8ce8d", "committedDate": "2020-09-26T12:43:07Z", "message": "CI: Publish GP5 artifacts to Google Cloud Storage\n\nRelease engineering has requested that we start publishing GP5 artifacts\nto Google Cloud Storage instead of S3. This commit changes the location\nwhere these artifacts are published."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4888, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}