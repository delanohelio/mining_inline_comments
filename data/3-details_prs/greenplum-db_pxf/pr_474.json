{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExODc2ODc2", "number": 474, "title": "Optimize hive metadata", "bodyText": "Reduce the amount of metadata transferred during the fragmentation call. We have duplicate data in HiveUserData and the Properties we retrieve from the metastore.", "createdAt": "2020-10-28T22:37:53Z", "url": "https://github.com/greenplum-db/pxf/pull/474", "merged": true, "mergeCommit": {"oid": "021db8fd20c669999a913d763d4d31c638b63bbd"}, "closed": true, "closedAt": "2020-11-03T01:07:19Z", "author": {"login": "frankgh"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWtIA3gH2gAyNTExODc2ODc2OmNmYmVkNDk0YWI0YTE0Mzg5YTkxMGViMjA3M2Y0YWRhNGFhMjMwY2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYsCySgH2gAyNTExODc2ODc2OmIwMDc4ZjQzOGNmYmMwMjNhMzc1NzY4NzZkNTkwMWIyZjY1NzIwM2U=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cfbed494ab4a14389a910eb2073f4ada4aa230cb", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/cfbed494ab4a14389a910eb2073f4ada4aa230cb", "committedDate": "2020-10-27T18:18:03Z", "message": "HiveUserData: Remove filterInFragmenter\n\nThe `filterInFragmenter` field is not being consumed by anyone. Removing\nit."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a83dad1d78965b554db404324d9fa2ef1916d2ef", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/a83dad1d78965b554db404324d9fa2ef1916d2ef", "committedDate": "2020-10-27T21:40:19Z", "message": "HiveUserData: Remove allColumnTypes from HiveUserData"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06d27a386f36597572cb13021a1c81b6600ba1ec", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/06d27a386f36597572cb13021a1c81b6600ba1ec", "committedDate": "2020-10-28T15:03:00Z", "message": "Parse HiveUserData once\n\nParse the HiveUserData object once during the accessor call. The parsed\nHiveUserData is then shipped to the resolver using the\nRequestContext#metadata field."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6c8963fd226403abb89ba550d3a6f800a5c3881", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/e6c8963fd226403abb89ba550d3a6f800a5c3881", "committedDate": "2020-10-28T15:33:12Z", "message": "HiveUserData: Remove serdeClassName from HiveUserData\n\nThe serde class name is available in the properties used for serde."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c75fa0ed6455ff49e0ef33e06448746a4f0b0673", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/c75fa0ed6455ff49e0ef33e06448746a4f0b0673", "committedDate": "2020-10-28T16:02:03Z", "message": "HiveUserData: Remove inputFormatName from HiveUserData\n\nThe input format class name can be retrieved from the serde properties\nby accessing the \"file.inputformat\" property."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f525f932bfc61acbc7b7d2a5c86480ebfbb8b633", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/f525f932bfc61acbc7b7d2a5c86480ebfbb8b633", "committedDate": "2020-10-28T16:51:22Z", "message": "HiveUserData: Remove allColumnNames from HiveUserData\n\nThe same information is retrieved from the \"columns\" property of the\nmetadata properties that were retrieved during fragmentation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "197f0fcb8f31bf037749471576c816b8543fc5e4", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/197f0fcb8f31bf037749471576c816b8543fc5e4", "committedDate": "2020-10-28T17:02:32Z", "message": "HiveUserData: Remove colTypes from HiveUserData\n\nThe column types can be retrieved from the metadata properties that are\nshipped by the Fragmenter."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a70b39b7ec0760c88defa1f7064c3be00bd6222d", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/a70b39b7ec0760c88defa1f7064c3be00bd6222d", "committedDate": "2020-10-28T17:32:44Z", "message": "HiveUserData: Remove skipHeader from HiveUserData\n\nThe skip header property is part of the metadata properties that we ship\nfrom the fragmenter call."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e92c418df222b53ef558c13afea77526d832a2c", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/9e92c418df222b53ef558c13afea77526d832a2c", "committedDate": "2020-10-28T19:20:39Z", "message": "HiveUserData: Remove delimiter property from HiveUserData\n\nMerge map where the property is coming from with the properties. Parse\ndelimiter at the Resolver only if needed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d620da574ba1358ff201820b1d1b04f1c406398a", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/d620da574ba1358ff201820b1d1b04f1c406398a", "committedDate": "2020-10-28T21:36:28Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8946796f68374e6f5dbefcd114742a8ca074e025", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/8946796f68374e6f5dbefcd114742a8ca074e025", "committedDate": "2020-10-28T22:19:01Z", "message": "Remove HiveUserData\n\nOnly pass the schema properties from the fragmenter to the\naccessor/resolver."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c74d01774bb9a178efa22b42afcbeb5bf916e734", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/c74d01774bb9a178efa22b42afcbeb5bf916e734", "committedDate": "2020-10-28T23:03:25Z", "message": "Fix automation tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35000a43efada854dc90818031757f6d59c988b8", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/35000a43efada854dc90818031757f6d59c988b8", "committedDate": "2020-10-29T01:55:06Z", "message": "Hardcode HOSTS as it is no longer being used"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60e9443f2f7fc61b9e443900163ee86e5f05cc0b", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/60e9443f2f7fc61b9e443900163ee86e5f05cc0b", "committedDate": "2020-10-29T17:51:58Z", "message": "Remove properties not used"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30df0fe477ccf2e8d6a9ad51e7d448774bcd7d40", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/30df0fe477ccf2e8d6a9ad51e7d448774bcd7d40", "committedDate": "2020-10-29T21:13:14Z", "message": "Use Kryo to serialize properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b5fe26b39b798e016031cf1ab39b2836930c380", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/3b5fe26b39b798e016031cf1ab39b2836930c380", "committedDate": "2020-10-30T00:41:53Z", "message": "Use a custom Properties serializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/e431cec5e4393405c20fa37d1b3155a6ab8b711b", "committedDate": "2020-10-30T22:46:10Z", "message": "Add javadocs and tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTAyNzk4", "url": "https://github.com/greenplum-db/pxf/pull/474#pullrequestreview-521902798", "createdAt": "2020-11-02T18:44:47Z", "commit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo0NDo0N1rOHsRTZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToyMzozN1rOHsSgZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4Mjg4NQ==", "bodyText": "why do we need ThreadLocal, is it very expensive to build ? Seems like a pre-mature optimization.", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516182885", "createdAt": "2020-11-02T18:44:47Z", "author": {"login": "denalex"}, "path": "automation/src/main/java/org/greenplum/pxf/automation/testplugin/MultipleHiveFragmentsPerFileFragmenter.java", "diffHunk": "@@ -36,10 +37,11 @@\n public class MultipleHiveFragmentsPerFileFragmenter extends BaseFragmenter {\n     private static final Log LOG = LogFactory.getLog(MultipleHiveFragmentsPerFileFragmenter.class);\n \n+    private static final ThreadLocal<Kryo> kryo = ThreadLocal.withInitial(Kryo::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4ODUxMQ==", "bodyText": "this function is repeated elsewhere, can it go into Utilities ?", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516188511", "createdAt": "2020-11-02T18:55:15Z", "author": {"login": "denalex"}, "path": "automation/src/main/java/org/greenplum/pxf/automation/testplugin/MultipleHiveFragmentsPerFileFragmenter.java", "diffHunk": "@@ -113,10 +109,16 @@ private String getFilePath(Table tbl) throws Exception {\n \n         for (InputSplit split : splits) {\n             FileSplit fsp = (FileSplit) split;\n-            String[] hosts = fsp.getLocations();\n-            String filepath = fsp.getPath().toString();\n-            return filepath;\n+            return fsp.getPath().toString();\n         }\n         throw new RuntimeException(\"Unable to get file path for table.\");\n     }\n+\n+    /* Turns a Properties class into a string */\n+    private byte[] serializeProperties(Properties properties) {\n+        Output out = new Output(4 * 1024, 10 * 1024 * 1024);\n+        kryo.get().writeObject(out, properties);\n+        out.close();\n+        return out.toBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4OTYwNg==", "bodyText": "this is the 3rd use of ThreadLocal, I believe", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516189606", "createdAt": "2020-11-02T18:57:22Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveClientWrapper.java", "diffHunk": "@@ -46,7 +52,15 @@\n     private static final Logger LOG = LoggerFactory.getLogger(HiveClientWrapper.class);\n \n     private static final String WILDCARD = \"*\";\n-    private static final int DEFAULT_DELIMITER_CODE = 44;\n+\n+    // The Kryo instance is not thread safe, and quite expensive to build,\n+    // storing it on a ThreadLocal is a recommended way to make sure that the\n+    // serializer is thread safe.\n+    private static final ThreadLocal<Kryo> kryo = ThreadLocal.withInitial(() -> {\n+        Kryo k = new Kryo();\n+        k.addDefaultSerializer(Map.class, PropertiesSerializer.class);\n+        return k;\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4OTgyNA==", "bodyText": "move to Utilities ?", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516189824", "createdAt": "2020-11-02T18:57:47Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveClientWrapper.java", "diffHunk": "@@ -318,68 +315,55 @@ private HiveConf getHiveConf(Configuration configuration) {\n     }\n \n     /* Turns a Properties class into a string */\n-    private String serializeProperties(Properties props) throws Exception {\n-        ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n-        props.store(outStream, \"\"/* comments */);\n-        return outStream.toString();\n+    private byte[] serializeProperties(Properties properties) {\n+        Output out = new Output(4 * 1024, 10 * 1024 * 1024);\n+        kryo.get().writeObject(out, properties);\n+        out.close();\n+        return out.toBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5MDkzMw==", "bodyText": "there was lowerCase() in the old logic. maybe it is taken care of somewhere else", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516190933", "createdAt": "2020-11-02T18:59:55Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveColumnarSerdeResolver.java", "diffHunk": "@@ -109,15 +95,8 @@ void initPartitionFields() {\n      */\n     @Override\n     void initTextPartitionFields(StringBuilder parts) {\n-        if (partitionKeys.equals(HiveDataFragmenter.HIVE_NO_PART_TBL)) {\n-            return;\n-        }\n-\n-        String[] partitionLevels = partitionKeys.split(HiveDataFragmenter.HIVE_PARTITIONS_DELIM);\n-        for (String partLevel : partitionLevels) {\n-            String[] levelKey = partLevel.split(HiveDataFragmenter.HIVE_1_PART_DELIM);\n-            partitionColumnNames.put(StringUtils.lowerCase(levelKey[0]), levelKey);\n-        }\n+        partitionColumnNames = metadata.getPartitions().stream()\n+                .collect(Collectors.toMap(HivePartition::getName, partition -> partition));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NjUwNw==", "bodyText": "why shorten the variable name ?", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516196507", "createdAt": "2020-11-02T19:11:00Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -78,23 +77,28 @@\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n \n+import static org.apache.hadoop.hive.serde.serdeConstants.SERIALIZATION_LIB;\n+\n /**\n  * Class HiveResolver handles deserialization of records that were serialized\n  * using Hadoop's Hive serialization framework.\n  */\n public class HiveResolver extends HivePlugin implements Resolver {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(HiveResolver.class);\n+\n     protected static final String MAPKEY_DELIM = \":\";\n     protected static final String COLLECTION_DELIM = \",\";\n     protected static final String nullChar = \"\\\\N\";\n+\n     protected char delimiter;\n     protected String collectionDelim;\n     protected String mapkeyDelim;\n-    protected Deserializer deserializer;\n+    protected Deserializer d;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NzQ0NA==", "bodyText": "isn't this also a class field ?", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516197444", "createdAt": "2020-11-02T19:13:00Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -105,25 +109,17 @@\n      * obtaining the serde class name, the serde properties string and the\n      * partition keys.\n      *\n-     * @param requestContext request context\n+     * @param context request context\n      */\n     @Override\n-    public void initialize(RequestContext requestContext) {\n-        super.initialize(requestContext);\n-\n+    public void initialize(RequestContext context) {\n+        super.initialize(context);\n         hiveDefaultPartName = HiveConf.getVar(configuration, HiveConf.ConfVars.DEFAULTPARTITIONNAME);\n-\n-        try {\n-            parseUserData(context);\n-            initPartitionFields();\n-            initSerde(context);\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"Failed to initialize HiveResolver\", e);\n-        }\n     }\n \n     @Override\n     public List<OneField> getFields(OneRow onerow) throws Exception {\n+        Deserializer deserializer = getDeserializer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5ODEyNw==", "bodyText": "are we removing  HIVE_NO_PART_TBL altogether ?", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516198127", "createdAt": "2020-11-02T19:14:24Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -279,25 +255,18 @@ void initPartitionFields() {\n         numberOfPartitions = partitionColumnNames.size();\n     }\n \n-    private boolean columnDescriptorContainsColumn(String columnName) {\n-        return context.getTupleDescription()\n-                .stream()\n-                .anyMatch(cd -> columnName.equals(cd.columnName()));\n-    }\n-\n     /*\n      * The partition fields are initialized one time based on userData provided\n      * by the fragmenter.\n      */\n     void initTextPartitionFields(StringBuilder parts) {\n-        if (partitionKeys.equals(HiveDataFragmenter.HIVE_NO_PART_TBL)) {\n+        List<HivePartition> hivePartitionList = metadata.getPartitions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5ODk0NA==", "bodyText": "are we deprecating DELIMITER user option (if it was used) ?", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516198944", "createdAt": "2020-11-02T19:16:07Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -681,11 +650,7 @@ void parseDelimiterChar(RequestContext input) {\n \n         if (userDelim == null) {\n             /* No DELIMITER in URL, try to get it from fragment's user data*/\n-            HiveUserData hiveUserData = HiveUtilities.parseHiveUserData(input);\n-            if (hiveUserData.getDelimiter() == null) {\n-                throw new IllegalArgumentException(\"DELIMITER is a required option\");\n-            }\n-            delimiter = (char) Integer.valueOf(hiveUserData.getDelimiter()).intValue();\n+            delimiter = (char) HiveUtilities.getDelimiterCode(metastoreProperties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMDExOA==", "bodyText": "this is a bit clunky how this works with protected fields, let's discuss", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516200118", "createdAt": "2020-11-02T19:18:40Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -717,4 +682,35 @@ void parseDelimiterChar(RequestContext input) {\n             delimiter = userDelim.charAt(0);\n         }\n     }\n+\n+    protected Properties getSerdeProperties() {\n+        return metadata.getProperties();\n+    }\n+\n+    protected Deserializer getDeserializer() {\n+        if (d == null) {\n+            // HiveUserData is passed from accessor\n+            metadata = (HiveMetadata) context.getMetadata();\n+            if (metadata == null) {\n+                throw new RuntimeException(\"No hive metadata detected in request context\");\n+            }\n+\n+            try {\n+                parseUserData(context);\n+                initPartitionFields();\n+                Class<?> c = Class.forName(serdeClassName, true, JavaUtils.getClassLoader());\n+                d = (Deserializer) c.getDeclaredConstructor().newInstance();\n+                d.initialize(getJobConf(), metastoreProperties);\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Failed to initialize HiveResolver\", e);\n+            }\n+        }\n+        return d;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMDQ2NQ==", "bodyText": "do we care about case insensitivity ?", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516200465", "createdAt": "2020-11-02T19:19:21Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -717,4 +682,35 @@ void parseDelimiterChar(RequestContext input) {\n             delimiter = userDelim.charAt(0);\n         }\n     }\n+\n+    protected Properties getSerdeProperties() {\n+        return metadata.getProperties();\n+    }\n+\n+    protected Deserializer getDeserializer() {\n+        if (d == null) {\n+            // HiveUserData is passed from accessor\n+            metadata = (HiveMetadata) context.getMetadata();\n+            if (metadata == null) {\n+                throw new RuntimeException(\"No hive metadata detected in request context\");\n+            }\n+\n+            try {\n+                parseUserData(context);\n+                initPartitionFields();\n+                Class<?> c = Class.forName(serdeClassName, true, JavaUtils.getClassLoader());\n+                d = (Deserializer) c.getDeclaredConstructor().newInstance();\n+                d.initialize(getJobConf(), metastoreProperties);\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Failed to initialize HiveResolver\", e);\n+            }\n+        }\n+        return d;\n+    }\n+\n+    private boolean columnDescriptorContainsColumn(String columnName) {\n+        return context.getTupleDescription()\n+                .stream()\n+                .anyMatch(cd -> columnName.equals(cd.columnName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMTE4Nw==", "bodyText": "are we losing the logic to not init serde on TEXT output format ?", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516201187", "createdAt": "2020-11-02T19:20:43Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveStringPassResolver.java", "diffHunk": "@@ -39,24 +38,10 @@\n     private StringBuilder parts;\n \n     @Override\n-    void parseUserData(RequestContext input) throws Exception {\n-        HiveUserData hiveUserData = HiveUtilities.parseHiveUserData(input);\n-        parseDelimiterChar(input);\n+    void parseUserData(RequestContext context) {\n+        super.parseUserData(context);\n+        parseDelimiterChar(context);\n         parts = new StringBuilder();\n-        partitionKeys = hiveUserData.getPartitionKeys();\n-        serdeClassName = hiveUserData.getSerdeClassName();\n-\n-        /* Needed only for GPDBWritable format*/\n-        if (context.getOutputFormat() == OutputFormat.GPDBWritable) {\n-            propsString = hiveUserData.getPropertiesString();\n-        }\n-    }\n-\n-    @Override\n-    void initSerde(RequestContext input) throws Exception {\n-        if (context.getOutputFormat() == OutputFormat.GPDBWritable) {\n-            super.initSerde(input);\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMTc4NA==", "bodyText": "kinda feels this belongs in a superclass", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516201784", "createdAt": "2020-11-02T19:21:55Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveStringPassResolver.java", "diffHunk": "@@ -84,4 +70,23 @@ void initPartitionFields() {\n         }\n     }\n \n+    /**\n+     * Make sure the required fields have been initialized\n+     */\n+    private void ensureInitialized() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMjU5Nw==", "bodyText": "not sure this method belongs here, it is very context heavy", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516202597", "createdAt": "2020-11-02T19:23:37Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/utilities/HiveUtilities.java", "diffHunk": "@@ -204,68 +199,62 @@ public static void validateTypeCompatible(DataType gpdbDataType, Integer[] gpdbT\n     }\n \n     /**\n-     * The method parses raw user data into HiveUserData class\n+     * Creates ORC file reader.\n      *\n-     * @param context input data\n-     * @return instance of HiveUserData class\n-     * @throws IllegalArgumentException when incorrect number of tokens in Hive user data received\n+     * @param requestContext input data with given data source\n+     * @return ORC file reader\n      */\n-    public static HiveUserData parseHiveUserData(RequestContext context) throws IllegalArgumentException {\n-        String userData = new String(context.getFragmentUserData());\n-        String[] toks = userData.split(HiveUserData.HIVE_UD_DELIM, HiveUserData.getNumOfTokens());\n-\n-        if (toks.length != (HiveUserData.getNumOfTokens())) {\n-            throw new IllegalArgumentException(\"HiveInputFormatFragmenter expected \"\n-                    + HiveUserData.getNumOfTokens() + \" tokens, but got \" + toks.length);\n-        }\n-\n-        String indexesStr = toks[8];\n-        List<Integer> indexes = null;\n-\n-        if (indexesStr != null && !\"null\".equals(indexesStr)) {\n-            indexes = Stream.of(indexesStr.split(\",\"))\n-                    .map(s -> \"null\".equals(s) ? null : Integer.parseInt(s))\n-                    .collect(Collectors.toList());\n+    public static Reader getOrcReader(Configuration configuration, RequestContext requestContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4de9989ff194b6450a58d0cf7992c02e48051d9a", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/4de9989ff194b6450a58d0cf7992c02e48051d9a", "committedDate": "2020-11-02T21:45:34Z", "message": "Address PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3981280aa02862e1ceb5464ba328216493c57dd", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/d3981280aa02862e1ceb5464ba328216493c57dd", "committedDate": "2020-11-02T21:53:31Z", "message": "add todo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDIxMzI1", "url": "https://github.com/greenplum-db/pxf/pull/474#pullrequestreview-522021325", "createdAt": "2020-11-02T21:55:07Z", "commit": {"oid": "d3981280aa02862e1ceb5464ba328216493c57dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0078f438cfbc023a37576876d5901b2f657203e", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/b0078f438cfbc023a37576876d5901b2f657203e", "committedDate": "2020-11-02T22:10:17Z", "message": "Remove delimiter code"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4922, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}