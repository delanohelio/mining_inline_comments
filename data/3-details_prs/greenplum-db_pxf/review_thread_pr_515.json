{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MjQwODE0", "number": 515, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzozMTowOFrOFDDB-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzo0ODoyN1rOFDDktA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzM5NzA0OnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzozMTowOFrOICgubQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoxNTo1OFrOICitTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUwNDIzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String accessor;\n          \n          \n            \n                private String accessorClassName;\n          \n      \n    \n    \n  \n\nshould we do this and for other components as well (fragmented / resolver) ?", "url": "https://github.com/greenplum-db/pxf/pull/515#discussion_r539504237", "createdAt": "2020-12-09T17:31:08Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "diffHunk": "@@ -63,25 +68,101 @@ public void setRequestType(RequestType requestType) {\n     }\n \n     // ----- NAMED PROPERTIES -----\n+\n+    /**\n+     * The fully-qualified class name for the java class that was defined as\n+     * Accessor.\n+     */\n     private String accessor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4efa84d7a70c5b44c34c092c5714cb5ea16a6c9d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzNjcxOQ==", "bodyText": "I do not want to make any changes that will impact other classes. This will make us change getters for accessor, fragmenter, resolver.", "url": "https://github.com/greenplum-db/pxf/pull/515#discussion_r539536719", "createdAt": "2020-12-09T18:15:58Z", "author": {"login": "frankgh"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "diffHunk": "@@ -63,25 +68,101 @@ public void setRequestType(RequestType requestType) {\n     }\n \n     // ----- NAMED PROPERTIES -----\n+\n+    /**\n+     * The fully-qualified class name for the java class that was defined as\n+     * Accessor.\n+     */\n     private String accessor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUwNDIzNw=="}, "originalCommit": {"oid": "4efa84d7a70c5b44c34c092c5714cb5ea16a6c9d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzQ1OTUxOnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzo0MjozMlrOIChUrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoxMjo0N1rOICillQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxNDAyOQ==", "bodyText": "nice, even though we technically do not need  @RequiredArgsConstructor that comes with it. Any way to suppress it ?", "url": "https://github.com/greenplum-db/pxf/pull/515#discussion_r539514029", "createdAt": "2020-12-09T17:42:32Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "diffHunk": "@@ -36,6 +40,7 @@\n  * Common configuration available to all PXF plugins. Represents input data\n  * coming from client applications, such as GPDB.\n  */\n+@Data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4efa84d7a70c5b44c34c092c5714cb5ea16a6c9d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzNDc0MQ==", "bodyText": "good catch, I'll replace it with @Getter @Setter.", "url": "https://github.com/greenplum-db/pxf/pull/515#discussion_r539534741", "createdAt": "2020-12-09T18:12:47Z", "author": {"login": "frankgh"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "diffHunk": "@@ -36,6 +40,7 @@\n  * Common configuration available to all PXF plugins. Represents input data\n  * coming from client applications, such as GPDB.\n  */\n+@Data", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxNDAyOQ=="}, "originalCommit": {"oid": "4efa84d7a70c5b44c34c092c5714cb5ea16a6c9d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzQ2NTAwOnYy", "diffSide": "LEFT", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzo0Mzo1MlrOIChYLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoxNzoyN1rOICixeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxNDkyNA==", "bodyText": "so this was not used at all ? the write case would not have any fragments, default will change from -1 to 0, hopefully no existing logic impact ?", "url": "https://github.com/greenplum-db/pxf/pull/515#discussion_r539514924", "createdAt": "2020-12-09T17:43:52Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "diffHunk": "@@ -63,25 +68,101 @@ public void setRequestType(RequestType requestType) {\n     }\n \n     // ----- NAMED PROPERTIES -----\n+\n+    /**\n+     * The fully-qualified class name for the java class that was defined as\n+     * Accessor.\n+     */\n     private String accessor;\n+\n+    /**\n+     * The aggregate type, i.e - count, min, max, etc\n+     */\n     private EnumAggregationType aggType;\n+\n+    /**\n+     * The name of the server configuration for this request.\n+     */\n+    @Setter(AccessLevel.NONE)\n     private String config;\n+\n+    /**\n+     * The server configuration associated to the server that this request is\n+     * accessing\n+     */\n     private Configuration configuration;\n-    private int dataFragment = -1; /* should be deprecated */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4efa84d7a70c5b44c34c092c5714cb5ea16a6c9d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzNzc4Ng==", "bodyText": "this was not used at all, but we had the same information here:\nhttps://github.com/greenplum-db/pxf/pull/515/files#diff-f4bcdfde3d8615e2a52da19be244339ca0e9b457df836d33d469f9a01a0d5148L228\nhttps://github.com/greenplum-db/pxf/pull/515/files#diff-f4bcdfde3d8615e2a52da19be244339ca0e9b457df836d33d469f9a01a0d5148L226", "url": "https://github.com/greenplum-db/pxf/pull/515#discussion_r539537786", "createdAt": "2020-12-09T18:17:27Z", "author": {"login": "frankgh"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "diffHunk": "@@ -63,25 +68,101 @@ public void setRequestType(RequestType requestType) {\n     }\n \n     // ----- NAMED PROPERTIES -----\n+\n+    /**\n+     * The fully-qualified class name for the java class that was defined as\n+     * Accessor.\n+     */\n     private String accessor;\n+\n+    /**\n+     * The aggregate type, i.e - count, min, max, etc\n+     */\n     private EnumAggregationType aggType;\n+\n+    /**\n+     * The name of the server configuration for this request.\n+     */\n+    @Setter(AccessLevel.NONE)\n     private String config;\n+\n+    /**\n+     * The server configuration associated to the server that this request is\n+     * accessing\n+     */\n     private Configuration configuration;\n-    private int dataFragment = -1; /* should be deprecated */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxNDkyNA=="}, "originalCommit": {"oid": "4efa84d7a70c5b44c34c092c5714cb5ea16a6c9d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzQ3MzMzOnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzo0NTo0N1rOIChdMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoxODozOVrOICi0cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxNjIxMA==", "bodyText": "should this be transient to exclude from toString / hashcode methods ?", "url": "https://github.com/greenplum-db/pxf/pull/515#discussion_r539516210", "createdAt": "2020-12-09T17:45:47Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "diffHunk": "@@ -94,15 +175,46 @@ public void setRequestType(RequestType requestType) {\n      */\n     private int numAttrsProjected;\n \n+    /**\n+     * The plugin configuration\n+     */\n+    private PluginConf pluginConf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4efa84d7a70c5b44c34c092c5714cb5ea16a6c9d"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzODU0NA==", "bodyText": "these should not be included anymore after I remove @Data and use @Getter, @Setter instead.", "url": "https://github.com/greenplum-db/pxf/pull/515#discussion_r539538544", "createdAt": "2020-12-09T18:18:39Z", "author": {"login": "frankgh"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "diffHunk": "@@ -94,15 +175,46 @@ public void setRequestType(RequestType requestType) {\n      */\n     private int numAttrsProjected;\n \n+    /**\n+     * The plugin configuration\n+     */\n+    private PluginConf pluginConf;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxNjIxMA=="}, "originalCommit": {"oid": "4efa84d7a70c5b44c34c092c5714cb5ea16a6c9d"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzQ3ODI5OnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzo0Njo0NVrOIChgBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoxOToyNFrOICi2Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxNjkzMg==", "bodyText": "why restrict getters ?", "url": "https://github.com/greenplum-db/pxf/pull/515#discussion_r539516932", "createdAt": "2020-12-09T17:46:45Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "diffHunk": "@@ -94,15 +175,46 @@ public void setRequestType(RequestType requestType) {\n      */\n     private int numAttrsProjected;\n \n+    /**\n+     * The plugin configuration\n+     */\n+    private PluginConf pluginConf;\n+\n+    /**\n+     * The server port providing the service.\n+     */\n+    private int port;\n+\n+    /**\n+     * The name of the profile associated to this request.\n+     */\n     private String profile;\n+\n+    /**\n+     * The scheme defined at the profile level\n+     */\n     private String profileScheme;\n \n-    // The protocol defined at the foreign data wrapper (FDW) level\n+    /**\n+     * The protocol defined at the foreign data wrapper (FDW) level\n+     */\n+    @Getter(AccessLevel.NONE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4efa84d7a70c5b44c34c092c5714cb5ea16a6c9d"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzOTAzOA==", "bodyText": "we have a getProtocol implementation down below that has some logic:\n    public String getProtocol() {\n        return StringUtils.isNotBlank(protocol) ? protocol : inferProtocolName();\n    }", "url": "https://github.com/greenplum-db/pxf/pull/515#discussion_r539539038", "createdAt": "2020-12-09T18:19:24Z", "author": {"login": "frankgh"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "diffHunk": "@@ -94,15 +175,46 @@ public void setRequestType(RequestType requestType) {\n      */\n     private int numAttrsProjected;\n \n+    /**\n+     * The plugin configuration\n+     */\n+    private PluginConf pluginConf;\n+\n+    /**\n+     * The server port providing the service.\n+     */\n+    private int port;\n+\n+    /**\n+     * The name of the profile associated to this request.\n+     */\n     private String profile;\n+\n+    /**\n+     * The scheme defined at the profile level\n+     */\n     private String profileScheme;\n \n-    // The protocol defined at the foreign data wrapper (FDW) level\n+    /**\n+     * The protocol defined at the foreign data wrapper (FDW) level\n+     */\n+    @Getter(AccessLevel.NONE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxNjkzMg=="}, "originalCommit": {"oid": "4efa84d7a70c5b44c34c092c5714cb5ea16a6c9d"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzQ4MjQ3OnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzo0NzozOVrOIChicA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoxOTo1NVrOICi37g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxNzU1Mg==", "bodyText": "wow, what are these for ?", "url": "https://github.com/greenplum-db/pxf/pull/515#discussion_r539517552", "createdAt": "2020-12-09T17:47:39Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "diffHunk": "@@ -118,26 +230,62 @@ public void setRequestType(RequestType requestType) {\n      */\n     private ColumnDescriptor recordkeyColumn;\n \n+    /**\n+     * The contents of pxf_remote_service_login set in Greenplum. Should the\n+     * user set it to an empty string this function will return null.\n+     */\n     private String remoteLogin;\n+\n+    /**\n+     * The contents of pxf_remote_service_secret set in Greenplum. Should the\n+     * user set it to an empty string this function will return null.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4efa84d7a70c5b44c34c092c5714cb5ea16a6c9d"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzOTQzOA==", "bodyText": "no idea, but I did not remove them, maybe we should clean up some of this code at some point", "url": "https://github.com/greenplum-db/pxf/pull/515#discussion_r539539438", "createdAt": "2020-12-09T18:19:55Z", "author": {"login": "frankgh"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "diffHunk": "@@ -118,26 +230,62 @@ public void setRequestType(RequestType requestType) {\n      */\n     private ColumnDescriptor recordkeyColumn;\n \n+    /**\n+     * The contents of pxf_remote_service_login set in Greenplum. Should the\n+     * user set it to an empty string this function will return null.\n+     */\n     private String remoteLogin;\n+\n+    /**\n+     * The contents of pxf_remote_service_secret set in Greenplum. Should the\n+     * user set it to an empty string this function will return null.\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxNzU1Mg=="}, "originalCommit": {"oid": "4efa84d7a70c5b44c34c092c5714cb5ea16a6c9d"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzQ4NTk2OnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzo0ODoyN1rOIChkfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoyMDoyNVrOICi5Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxODA3Nw==", "bodyText": "still PXF_BASE, no ?", "url": "https://github.com/greenplum-db/pxf/pull/515#discussion_r539518077", "createdAt": "2020-12-09T17:48:27Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "diffHunk": "@@ -118,26 +230,62 @@ public void setRequestType(RequestType requestType) {\n      */\n     private ColumnDescriptor recordkeyColumn;\n \n+    /**\n+     * The contents of pxf_remote_service_login set in Greenplum. Should the\n+     * user set it to an empty string this function will return null.\n+     */\n     private String remoteLogin;\n+\n+    /**\n+     * The contents of pxf_remote_service_secret set in Greenplum. Should the\n+     * user set it to an empty string this function will return null.\n+     */\n     private String remoteSecret;\n-    private String resolver;\n+\n+    /**\n+     * The current segment ID in Greenplum.\n+     */\n     private int segmentId;\n+\n+    /**\n+     * The transaction ID for the current Greenplum query.\n+     */\n     private String transactionId;\n+\n     /**\n      * The name of the server to access. The name will be used to build\n-     * a path for the config files (i.e. $PXF_BASE/servers/$serverName/*.xml)\n+     * a path for the config files (i.e. $PXF_CONF/servers/$serverName/*.xml)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4efa84d7a70c5b44c34c092c5714cb5ea16a6c9d"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzOTc1OA==", "bodyText": "good catch, thanks!", "url": "https://github.com/greenplum-db/pxf/pull/515#discussion_r539539758", "createdAt": "2020-12-09T18:20:25Z", "author": {"login": "frankgh"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/RequestContext.java", "diffHunk": "@@ -118,26 +230,62 @@ public void setRequestType(RequestType requestType) {\n      */\n     private ColumnDescriptor recordkeyColumn;\n \n+    /**\n+     * The contents of pxf_remote_service_login set in Greenplum. Should the\n+     * user set it to an empty string this function will return null.\n+     */\n     private String remoteLogin;\n+\n+    /**\n+     * The contents of pxf_remote_service_secret set in Greenplum. Should the\n+     * user set it to an empty string this function will return null.\n+     */\n     private String remoteSecret;\n-    private String resolver;\n+\n+    /**\n+     * The current segment ID in Greenplum.\n+     */\n     private int segmentId;\n+\n+    /**\n+     * The transaction ID for the current Greenplum query.\n+     */\n     private String transactionId;\n+\n     /**\n      * The name of the server to access. The name will be used to build\n-     * a path for the config files (i.e. $PXF_BASE/servers/$serverName/*.xml)\n+     * a path for the config files (i.e. $PXF_CONF/servers/$serverName/*.xml)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxODA3Nw=="}, "originalCommit": {"oid": "4efa84d7a70c5b44c34c092c5714cb5ea16a6c9d"}, "originalPosition": 206}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3379, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}