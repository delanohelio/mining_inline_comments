{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2Njg4NzIy", "number": 1953, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjoxNDoyMlrOEjZHeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjoxNDozOVrOEjZHyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTQ3MTI4OnYy", "diffSide": "RIGHT", "path": "metrics/metrics-core/src/main/java/org/apache/servicecomb/metrics/core/MetricsBootListener.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjoxNDoyMlrOHRt9RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDo1MTozN1rOHR8BxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0MDgwNQ==", "bodyText": "Maybe keep default value to true is better?", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1953#discussion_r488340805", "createdAt": "2020-09-15T02:14:22Z", "author": {"login": "liubao68"}, "path": "metrics/metrics-core/src/main/java/org/apache/servicecomb/metrics/core/MetricsBootListener.java", "diffHunk": "@@ -43,13 +42,10 @@ public SlowInvocationLogger getSlowInvocationLogger() {\n \n   @Override\n   public void onBeforeProducerProvider(BootEvent event) {\n-    if (!DynamicPropertyFactory.getInstance().getBooleanProperty(\"servicecomb.metrics.endpoint.enabled\", true).get()) {\n+    if (!DynamicPropertyFactory.getInstance().getBooleanProperty(\"servicecomb.metrics.endpoint.enabled\", false).get()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b91cd62fe36f4745596794f3454ee7d533ec5ca6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NzQ3Mg==", "bodyText": "Under the security sensitive circumstances, the users only want to expose their business REST interfaces. If we keep the default value to be true, they may expose these two REST interfaces by mistake.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1953#discussion_r488347472", "createdAt": "2020-09-15T02:38:14Z", "author": {"login": "yhs0092"}, "path": "metrics/metrics-core/src/main/java/org/apache/servicecomb/metrics/core/MetricsBootListener.java", "diffHunk": "@@ -43,13 +42,10 @@ public SlowInvocationLogger getSlowInvocationLogger() {\n \n   @Override\n   public void onBeforeProducerProvider(BootEvent event) {\n-    if (!DynamicPropertyFactory.getInstance().getBooleanProperty(\"servicecomb.metrics.endpoint.enabled\", true).get()) {\n+    if (!DynamicPropertyFactory.getInstance().getBooleanProperty(\"servicecomb.metrics.endpoint.enabled\", false).get()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0MDgwNQ=="}, "originalCommit": {"oid": "b91cd62fe36f4745596794f3454ee7d533ec5ca6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3MDkwMQ==", "bodyText": "I think these two interfaces do not have any sensitive information. And if the application is secrured , the two interfaces will be secured too. I don't know why explode the two interface will cause security issue.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1953#discussion_r488370901", "createdAt": "2020-09-15T04:09:23Z", "author": {"login": "liubao68"}, "path": "metrics/metrics-core/src/main/java/org/apache/servicecomb/metrics/core/MetricsBootListener.java", "diffHunk": "@@ -43,13 +42,10 @@ public SlowInvocationLogger getSlowInvocationLogger() {\n \n   @Override\n   public void onBeforeProducerProvider(BootEvent event) {\n-    if (!DynamicPropertyFactory.getInstance().getBooleanProperty(\"servicecomb.metrics.endpoint.enabled\", true).get()) {\n+    if (!DynamicPropertyFactory.getInstance().getBooleanProperty(\"servicecomb.metrics.endpoint.enabled\", false).get()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0MDgwNQ=="}, "originalCommit": {"oid": "b91cd62fe36f4745596794f3454ee7d533ec5ca6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3MTMzMg==", "bodyText": "Done, please review", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1953#discussion_r488571332", "createdAt": "2020-09-15T10:51:37Z", "author": {"login": "yhs0092"}, "path": "metrics/metrics-core/src/main/java/org/apache/servicecomb/metrics/core/MetricsBootListener.java", "diffHunk": "@@ -43,13 +42,10 @@ public SlowInvocationLogger getSlowInvocationLogger() {\n \n   @Override\n   public void onBeforeProducerProvider(BootEvent event) {\n-    if (!DynamicPropertyFactory.getInstance().getBooleanProperty(\"servicecomb.metrics.endpoint.enabled\", true).get()) {\n+    if (!DynamicPropertyFactory.getInstance().getBooleanProperty(\"servicecomb.metrics.endpoint.enabled\", false).get()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0MDgwNQ=="}, "originalCommit": {"oid": "b91cd62fe36f4745596794f3454ee7d533ec5ca6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTQ3MjA5OnYy", "diffSide": "RIGHT", "path": "metrics/metrics-core/src/main/java/org/apache/servicecomb/metrics/core/HealthBootListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjoxNDozOVrOHRt9rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDo1MTo0MFrOHR8B4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0MDkwOA==", "bodyText": "Maybe keep default value to true is better?", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1953#discussion_r488340908", "createdAt": "2020-09-15T02:14:39Z", "author": {"login": "liubao68"}, "path": "metrics/metrics-core/src/main/java/org/apache/servicecomb/metrics/core/HealthBootListener.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.metrics.core;\n+\n+import org.apache.servicecomb.core.BootListener;\n+import org.apache.servicecomb.metrics.core.publish.HealthCheckerRestPublisher;\n+import org.springframework.stereotype.Component;\n+\n+import com.netflix.config.DynamicPropertyFactory;\n+\n+@Component\n+public class HealthBootListener implements BootListener {\n+  @Override\n+  public void onBeforeProducerProvider(BootEvent event) {\n+    if (!DynamicPropertyFactory.getInstance().getBooleanProperty(\"servicecomb.health.endpoint.enabled\", false).get()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b91cd62fe36f4745596794f3454ee7d533ec5ca6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3MTM2Mw==", "bodyText": "Done, please review", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1953#discussion_r488571363", "createdAt": "2020-09-15T10:51:40Z", "author": {"login": "yhs0092"}, "path": "metrics/metrics-core/src/main/java/org/apache/servicecomb/metrics/core/HealthBootListener.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.metrics.core;\n+\n+import org.apache.servicecomb.core.BootListener;\n+import org.apache.servicecomb.metrics.core.publish.HealthCheckerRestPublisher;\n+import org.springframework.stereotype.Component;\n+\n+import com.netflix.config.DynamicPropertyFactory;\n+\n+@Component\n+public class HealthBootListener implements BootListener {\n+  @Override\n+  public void onBeforeProducerProvider(BootEvent event) {\n+    if (!DynamicPropertyFactory.getInstance().getBooleanProperty(\"servicecomb.health.endpoint.enabled\", false).get()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0MDkwOA=="}, "originalCommit": {"oid": "b91cd62fe36f4745596794f3454ee7d533ec5ca6"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1234, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}