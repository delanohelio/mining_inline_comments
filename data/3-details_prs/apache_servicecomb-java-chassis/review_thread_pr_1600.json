{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwOTMyOTAx", "number": 1600, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODoxNDo0NFrODkLMGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzoxNjozOVrOEWrgWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjU4NjQ5OnYy", "diffSide": "RIGHT", "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/RegistryUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODoxNDo0NFrOFwWjcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNDo0Nzo1MFrOFza3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0NTQ4OQ==", "bodyText": "should be private\uff1f", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1600#discussion_r386245489", "createdAt": "2020-03-02T08:14:44Z", "author": {"login": "GuoYL123"}, "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/RegistryUtils.java", "diffHunk": "@@ -20,62 +20,120 @@\n import java.net.InetSocketAddress;\n import java.net.URI;\n import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n \n import org.apache.http.client.utils.URIBuilder;\n import org.apache.servicecomb.config.ConfigUtil;\n import org.apache.servicecomb.config.archaius.sources.MicroserviceConfigLoader;\n+import org.apache.servicecomb.foundation.common.Holder;\n import org.apache.servicecomb.foundation.common.event.EventManager;\n import org.apache.servicecomb.foundation.common.net.IpPort;\n import org.apache.servicecomb.foundation.common.net.NetUtils;\n import org.apache.servicecomb.serviceregistry.api.registry.Microservice;\n import org.apache.servicecomb.serviceregistry.api.registry.MicroserviceInstance;\n+import org.apache.servicecomb.serviceregistry.api.response.FindInstancesResponse;\n import org.apache.servicecomb.serviceregistry.cache.InstanceCacheManager;\n+import org.apache.servicecomb.serviceregistry.cache.InstanceCacheManagerNew;\n import org.apache.servicecomb.serviceregistry.client.ServiceRegistryClient;\n import org.apache.servicecomb.serviceregistry.client.http.MicroserviceInstances;\n import org.apache.servicecomb.serviceregistry.config.ServiceRegistryConfig;\n+import org.apache.servicecomb.serviceregistry.consumer.AppManager;\n import org.apache.servicecomb.serviceregistry.definition.MicroserviceDefinition;\n import org.apache.servicecomb.serviceregistry.registry.ServiceRegistryFactory;\n+import org.apache.servicecomb.serviceregistry.registry.cache.AggregateServiceRegistryCache;\n+import org.apache.servicecomb.serviceregistry.registry.cache.MicroserviceCache;\n+import org.apache.servicecomb.serviceregistry.registry.cache.MicroserviceCache.MicroserviceCacheStatus;\n+import org.apache.servicecomb.serviceregistry.registry.cache.MicroserviceCacheKey;\n+import org.apache.servicecomb.serviceregistry.swagger.SwaggerLoader;\n+import org.apache.servicecomb.serviceregistry.task.MicroserviceInstanceRegisterTask;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.util.StringUtils;\n \n import com.google.common.base.Charsets;\n+import com.google.common.eventbus.Subscribe;\n import com.google.common.hash.Hashing;\n import com.netflix.config.DynamicPropertyFactory;\n \n public final class RegistryUtils {\n   private static final Logger LOGGER = LoggerFactory.getLogger(RegistryUtils.class);\n \n-  private static ServiceRegistry serviceRegistry;\n+  /**\n+   * The default ServiceRegistry instance\n+   */\n+  private static volatile ServiceRegistry serviceRegistry;\n \n   // value is ip or {interface name}\n   public static final String PUBLISH_ADDRESS = \"servicecomb.service.publishAddress\";\n \n   private static final String PUBLISH_PORT = \"servicecomb.{transport_name}.publishPort\";\n \n+  private static SwaggerLoader swaggerLoader = new SwaggerLoader();\n+\n+  private static AppManager appManager = new AppManager();\n+\n+  private static InstanceCacheManager instanceCacheManager = new InstanceCacheManagerNew(appManager);\n+\n+  private static final Map<String, ServiceRegistryConfig> EXTRA_SERVICE_REGISTRY_CONFIGS = new LinkedHashMap<>();\n+\n+  private static final Map<String, ServiceRegistry> EXTRA_SERVICE_REGISTRIES = new LinkedHashMap<>();\n+\n+  static AggregateServiceRegistryCache aggregateServiceRegistryCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a925f798e67f45b4898558fc989eb83c291a9c7"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2MTgxMw==", "bodyText": "Done, pls review it", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1600#discussion_r389461813", "createdAt": "2020-03-09T04:47:50Z", "author": {"login": "yhs0092"}, "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/RegistryUtils.java", "diffHunk": "@@ -20,62 +20,120 @@\n import java.net.InetSocketAddress;\n import java.net.URI;\n import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n \n import org.apache.http.client.utils.URIBuilder;\n import org.apache.servicecomb.config.ConfigUtil;\n import org.apache.servicecomb.config.archaius.sources.MicroserviceConfigLoader;\n+import org.apache.servicecomb.foundation.common.Holder;\n import org.apache.servicecomb.foundation.common.event.EventManager;\n import org.apache.servicecomb.foundation.common.net.IpPort;\n import org.apache.servicecomb.foundation.common.net.NetUtils;\n import org.apache.servicecomb.serviceregistry.api.registry.Microservice;\n import org.apache.servicecomb.serviceregistry.api.registry.MicroserviceInstance;\n+import org.apache.servicecomb.serviceregistry.api.response.FindInstancesResponse;\n import org.apache.servicecomb.serviceregistry.cache.InstanceCacheManager;\n+import org.apache.servicecomb.serviceregistry.cache.InstanceCacheManagerNew;\n import org.apache.servicecomb.serviceregistry.client.ServiceRegistryClient;\n import org.apache.servicecomb.serviceregistry.client.http.MicroserviceInstances;\n import org.apache.servicecomb.serviceregistry.config.ServiceRegistryConfig;\n+import org.apache.servicecomb.serviceregistry.consumer.AppManager;\n import org.apache.servicecomb.serviceregistry.definition.MicroserviceDefinition;\n import org.apache.servicecomb.serviceregistry.registry.ServiceRegistryFactory;\n+import org.apache.servicecomb.serviceregistry.registry.cache.AggregateServiceRegistryCache;\n+import org.apache.servicecomb.serviceregistry.registry.cache.MicroserviceCache;\n+import org.apache.servicecomb.serviceregistry.registry.cache.MicroserviceCache.MicroserviceCacheStatus;\n+import org.apache.servicecomb.serviceregistry.registry.cache.MicroserviceCacheKey;\n+import org.apache.servicecomb.serviceregistry.swagger.SwaggerLoader;\n+import org.apache.servicecomb.serviceregistry.task.MicroserviceInstanceRegisterTask;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.util.StringUtils;\n \n import com.google.common.base.Charsets;\n+import com.google.common.eventbus.Subscribe;\n import com.google.common.hash.Hashing;\n import com.netflix.config.DynamicPropertyFactory;\n \n public final class RegistryUtils {\n   private static final Logger LOGGER = LoggerFactory.getLogger(RegistryUtils.class);\n \n-  private static ServiceRegistry serviceRegistry;\n+  /**\n+   * The default ServiceRegistry instance\n+   */\n+  private static volatile ServiceRegistry serviceRegistry;\n \n   // value is ip or {interface name}\n   public static final String PUBLISH_ADDRESS = \"servicecomb.service.publishAddress\";\n \n   private static final String PUBLISH_PORT = \"servicecomb.{transport_name}.publishPort\";\n \n+  private static SwaggerLoader swaggerLoader = new SwaggerLoader();\n+\n+  private static AppManager appManager = new AppManager();\n+\n+  private static InstanceCacheManager instanceCacheManager = new InstanceCacheManagerNew(appManager);\n+\n+  private static final Map<String, ServiceRegistryConfig> EXTRA_SERVICE_REGISTRY_CONFIGS = new LinkedHashMap<>();\n+\n+  private static final Map<String, ServiceRegistry> EXTRA_SERVICE_REGISTRIES = new LinkedHashMap<>();\n+\n+  static AggregateServiceRegistryCache aggregateServiceRegistryCache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0NTQ4OQ=="}, "originalCommit": {"oid": "4a925f798e67f45b4898558fc989eb83c291a9c7"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjE2OTIwOnYy", "diffSide": "RIGHT", "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/RegistryUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzoxNjozOVrOG-Dn2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzoxNjozOVrOG-Dn2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcyNDI1MQ==", "bodyText": "\u8fd9\u4e2a\u662f\u4e0d\u517c\u5bb9\u7684\u4fee\u6539\uff1f\n\u4fee\u6539\u4e4b\u540eversionRule\u88ab\u5ffd\u7565\u4e86\uff0c\u4e3a\u4f55\u4e0d\u76f4\u63a5\u53bb\u6389\u8fd9\u4e2a\u53c2\u6570\uff1f\n\u8fd9\u4e2a\u7c7b\u76ee\u524d\u88ab\u4e1a\u52a1\u4f7f\u7528\uff0c\u5347\u7ea7\u4e4b\u540e\u6ca1\u6709\u53d1\u73b0\u8fd9\u4e2a\u63a5\u53e3\u7684\u529f\u80fd\u53d8\u66f4\uff0c\u5bfc\u81f4\u4e86\u4e00\u4e2a\u95ee\u9898\u3002", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1600#discussion_r467724251", "createdAt": "2020-08-10T07:16:39Z", "author": {"login": "Matrix0xCC"}, "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/RegistryUtils.java", "diffHunk": "@@ -214,24 +280,163 @@ private static IpPort genPublishIpPort(String schema, IpPort ipPort) {\n \n   public static List<MicroserviceInstance> findServiceInstance(String appId, String serviceName,\n       String versionRule) {\n-    return serviceRegistry.findServiceInstance(appId, serviceName, versionRule);\n+    MicroserviceCache serviceCache = aggregateServiceRegistryCache.findServiceCache(\n+        MicroserviceCacheKey.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcfe0714968a911d6ffe127b4bf53ae0cbd17271"}, "originalPosition": 158}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1311, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}