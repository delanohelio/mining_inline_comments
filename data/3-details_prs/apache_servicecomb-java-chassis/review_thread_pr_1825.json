{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMDA3OTI0", "number": 1825, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMTowMjoyNVrOEEGwjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMTowMjoyNVrOEEGwjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzQwNDk1OnYy", "diffSide": "RIGHT", "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMTowMjoyNVrOGhhYTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMjoyNDowNFrOGhio5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgwMzA4Nw==", "bodyText": "This logic seams not correct. Maybe you'd check the length of data actually received and using the correct data.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1825#discussion_r437803087", "createdAt": "2020-06-10T01:02:25Z", "author": {"login": "liubao68"}, "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java", "diffHunk": "@@ -179,12 +179,12 @@ private static ServerMicroserviceInstance buildServerMicroserviceInstanceFromMap\n \n   private static void startListenerForRegisterUnregisterEvent() {\n     try {\n-      byte[] buffer = new byte[DATA_PACKET_BUFFER_SIZE];\n       multicastSocket = new MulticastSocket(PORT);\n       group = InetAddress.getByName(GROUP);\n       multicastSocket.joinGroup(group); // need to join the group to be able to receive the data\n \n       while (true) {\n+        byte[] buffer = new byte[DATA_PACKET_BUFFER_SIZE];\n         DatagramPacket receivePacketBuffer = new DatagramPacket(buffer, buffer.length);\n         multicastSocket.receive(receivePacketBuffer);\n         String receivedPacketString = new String(receivePacketBuffer.getData(), ENCODE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b73ad72402b03002428a1896ac853485c436b6f0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMjY2MA==", "bodyText": "good point. Unfortunately, based on the Multicast working mechanism, we have to create a buffer before data is received.  After data is received, then buffer is filled with the received data.   So we can't create a buffer with size exactly same as the received data.\nBy the way, it's also mentioned in the JDK source code comments:\nhttps://github.com/frohoff/jdk8u-jdk/blob/master/src/share/classes/java/net/DatagramSocket.java#L698-L700", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1825#discussion_r437822660", "createdAt": "2020-06-10T02:20:10Z", "author": {"login": "jungan21"}, "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java", "diffHunk": "@@ -179,12 +179,12 @@ private static ServerMicroserviceInstance buildServerMicroserviceInstanceFromMap\n \n   private static void startListenerForRegisterUnregisterEvent() {\n     try {\n-      byte[] buffer = new byte[DATA_PACKET_BUFFER_SIZE];\n       multicastSocket = new MulticastSocket(PORT);\n       group = InetAddress.getByName(GROUP);\n       multicastSocket.joinGroup(group); // need to join the group to be able to receive the data\n \n       while (true) {\n+        byte[] buffer = new byte[DATA_PACKET_BUFFER_SIZE];\n         DatagramPacket receivePacketBuffer = new DatagramPacket(buffer, buffer.length);\n         multicastSocket.receive(receivePacketBuffer);\n         String receivedPacketString = new String(receivePacketBuffer.getData(), ENCODE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgwMzA4Nw=="}, "originalCommit": {"oid": "b73ad72402b03002428a1896ac853485c436b6f0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMzcxNw==", "bodyText": "Maybe you misunderstanding my point. You should do this\n multicastSocket.receive(receivePacketBuffer);\nint len = receivePacketBuffer.getLength() ;\nif(len > 0) {\n   String receivedPacketString = new String(receivePacketBuffer.getData(), 0, len, ENCODE);\n}\n\nAnd you can avoid creating new buffers for each receive, though this is not very important because the next receive happens in seconds.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1825#discussion_r437823717", "createdAt": "2020-06-10T02:24:04Z", "author": {"login": "liubao68"}, "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/server/ServerUtil.java", "diffHunk": "@@ -179,12 +179,12 @@ private static ServerMicroserviceInstance buildServerMicroserviceInstanceFromMap\n \n   private static void startListenerForRegisterUnregisterEvent() {\n     try {\n-      byte[] buffer = new byte[DATA_PACKET_BUFFER_SIZE];\n       multicastSocket = new MulticastSocket(PORT);\n       group = InetAddress.getByName(GROUP);\n       multicastSocket.joinGroup(group); // need to join the group to be able to receive the data\n \n       while (true) {\n+        byte[] buffer = new byte[DATA_PACKET_BUFFER_SIZE];\n         DatagramPacket receivePacketBuffer = new DatagramPacket(buffer, buffer.length);\n         multicastSocket.receive(receivePacketBuffer);\n         String receivedPacketString = new String(receivePacketBuffer.getData(), ENCODE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgwMzA4Nw=="}, "originalCommit": {"oid": "b73ad72402b03002428a1896ac853485c436b6f0"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1279, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}