{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NzA2MTM2", "number": 1688, "title": "[SCB-1828] Support @JSONVIEW ", "bodyText": "Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Make sure there is a JIRA issue filed for the change (usually before you start working on it).  Trivial changes like typos do not require a JIRA issue.  Your pull request should address just this issue, without pulling in other changes.\n Each commit in the pull request should have a meaningful subject line and body.\n Format the pull request title like [SCB-XXX] Fixes bug in ApproximateQuantiles, where you replace SCB-XXX with the appropriate JIRA issue.\n Write a pull request description that is detailed enough to understand what the pull request does, how, and why.\n Run mvn clean install -Pit to make sure basic checks pass. A more thorough check will be performed on your pull request automatically.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.", "createdAt": "2020-04-02T17:09:57Z", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1688", "merged": true, "mergeCommit": {"oid": "71821ab05f0ba936b0de142cce6fd7fadc694d80"}, "closed": true, "closedAt": "2020-04-13T08:27:45Z", "author": {"login": "heyile"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcT2gNhABqjMxOTQ0ODgxMDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXKmnPAFqTM5MjAyMjI1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ca0e8ba8b96c38ea2c7a52341efaf4f33ac1776", "author": {"user": {"login": "heyile", "name": null}}, "url": "https://github.com/apache/servicecomb-java-chassis/commit/0ca0e8ba8b96c38ea2c7a52341efaf4f33ac1776", "committedDate": "2020-04-02T17:08:38Z", "message": "[SCB-1828] Support @JsonView : add ut"}, "afterCommit": {"oid": "e7c8662ccd135416be4276e4b499c45f8e55176b", "author": {"user": {"login": "heyile", "name": null}}, "url": "https://github.com/apache/servicecomb-java-chassis/commit/e7c8662ccd135416be4276e4b499c45f8e55176b", "committedDate": "2020-04-03T01:20:11Z", "message": "[SCB-1828] Support @JsonView : add ut"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NzA3NzMx", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1688#pullrequestreview-388707731", "createdAt": "2020-04-07T00:27:32Z", "commit": {"oid": "9dd1a8a5df9cf68972713b3deed0779b01d89d92"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMDoyNzozMlrOGBusrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMDoyNzozMlrOGBusrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2Njg2Mg==", "bodyText": "It's better to add a log and throw an exception. This is an invalid usage when happens that users need to know.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1688#discussion_r404466862", "createdAt": "2020-04-07T00:27:32Z", "author": {"login": "liubao68"}, "path": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/BodyProcessorCreator.java", "diffHunk": "@@ -64,16 +67,34 @@\n   public static class BodyProcessor implements ParamValueProcessor {\n     protected JavaType targetType;\n \n+    protected Class<?> serialViewClass;\n+\n     private boolean isString;\n \n     protected boolean isRequired;\n \n     public BodyProcessor(JavaType targetType, boolean isString, boolean isRequired) {\n+      this(targetType, null, isString, isRequired);\n+    }\n+\n+    public BodyProcessor(JavaType targetType, String serialViewClass, boolean isString, boolean isRequired) {\n+      if (serialViewClass != null) {\n+        try {\n+          this.serialViewClass = Class.forName(serialViewClass);\n+        } catch (Throwable e) {\n+          //ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dd1a8a5df9cf68972713b3deed0779b01d89d92"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NzExMjQx", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1688#pullrequestreview-388711241", "createdAt": "2020-04-07T00:38:34Z", "commit": {"oid": "9dd1a8a5df9cf68972713b3deed0779b01d89d92"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMDozODozNFrOGBu46g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMDozODozNFrOGBu46g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2OTk5NA==", "bodyText": "LOGGER.error(\"Failed to create produceProcessor with {}\", acceptType, e);   will handle formation.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1688#discussion_r404469994", "createdAt": "2020-04-07T00:38:34Z", "author": {"login": "liubao68"}, "path": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/produce/ProduceProcessorManager.java", "diffHunk": "@@ -17,40 +17,89 @@\n \n package org.apache.servicecomb.common.rest.codec.produce;\n \n-import java.util.HashSet;\n+import java.util.HashMap;\n import java.util.List;\n-import java.util.Set;\n+import java.util.Map;\n \n import javax.ws.rs.core.MediaType;\n \n import org.apache.servicecomb.foundation.common.RegisterManager;\n import org.apache.servicecomb.foundation.common.utils.SPIServiceUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ProduceProcessorManager extends RegisterManager<String, Map<String, ProduceProcessor>> {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ProduceProcessorManager.class);\n \n-public final class ProduceProcessorManager extends RegisterManager<String, ProduceProcessor> {\n   private static final List<ProduceProcessor> produceProcessor =\n       SPIServiceUtils.getSortedService(ProduceProcessor.class);\n \n   private static final String NAME = \"produce processor mgr\";\n \n   public static final String DEFAULT_TYPE = MediaType.APPLICATION_JSON;\n \n+  public static final String DEFAULT_SERIAL_CLASS = \"servicecomb_default_class\";\n+\n   public static final ProduceProcessorManager INSTANCE = new ProduceProcessorManager();\n \n-  public static final ProduceProcessor JSON_PROCESSOR =\n-      SPIServiceUtils.getTargetService(ProduceProcessor.class, ProduceJsonProcessor.class);\n+  private Map<String, ProduceProcessor> jsonProcessorMap;\n \n-  public static final ProduceProcessor PLAIN_PROCESSOR =\n-      SPIServiceUtils.getTargetService(ProduceProcessor.class, ProduceTextPlainProcessor.class);\n+  private Map<String, ProduceProcessor> plainProcessorMap;\n \n-  public static final ProduceProcessor DEFAULT_PROCESSOR = JSON_PROCESSOR;\n+  private Map<String, ProduceProcessor> defaultProcessorMap;\n \n   private ProduceProcessorManager() {\n     super(NAME);\n-    Set<String> set = new HashSet<>();\n     produceProcessor.forEach(processor -> {\n-      if (set.add(processor.getName())) {\n-        register(processor.getName(), processor);\n-      }\n+      Map<String, ProduceProcessor> prodProcessorMap = getObjMap()\n+          .computeIfAbsent(processor.getName(), key -> new HashMap<>());\n+      prodProcessorMap.putIfAbsent(processor.getSerializationView(), processor);\n     });\n+    jsonProcessorMap = ensureFindValue(MediaType.APPLICATION_JSON);\n+    plainProcessorMap = ensureFindValue(MediaType.TEXT_PLAIN);\n+    defaultProcessorMap = jsonProcessorMap;\n+  }\n+\n+  public static ProduceProcessor cloneNewProduceProcessor(String acceptType, Class<?> serialViewClass,\n+      Map<String, ProduceProcessor> produceViewMap) {\n+    ProduceProcessor newInstance;\n+    try {\n+      newInstance = produceViewMap.get(DEFAULT_SERIAL_CLASS).getClass().newInstance();\n+      newInstance.setSerializationView(serialViewClass);\n+      return newInstance;\n+    } catch (Throwable e) {\n+      LOGGER.error(String.format(\"Failed to create produceProcessor with %s\", acceptType), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dd1a8a5df9cf68972713b3deed0779b01d89d92"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NzEyNjMy", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1688#pullrequestreview-388712632", "createdAt": "2020-04-07T00:42:57Z", "commit": {"oid": "9dd1a8a5df9cf68972713b3deed0779b01d89d92"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMDo0Mjo1N1rOGBu93Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMDo0Mjo1N1rOGBu93Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ3MTI2MQ==", "bodyText": "It's not good to expose Map to callers. Maybe\npublic ProduceProcessor getProduceProcessor(String name) \n\nis better. Following code are the same.\nAnd for setters, they seam not used, and can deleted.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1688#discussion_r404471261", "createdAt": "2020-04-07T00:42:57Z", "author": {"login": "liubao68"}, "path": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/produce/ProduceProcessorManager.java", "diffHunk": "@@ -17,40 +17,89 @@\n \n package org.apache.servicecomb.common.rest.codec.produce;\n \n-import java.util.HashSet;\n+import java.util.HashMap;\n import java.util.List;\n-import java.util.Set;\n+import java.util.Map;\n \n import javax.ws.rs.core.MediaType;\n \n import org.apache.servicecomb.foundation.common.RegisterManager;\n import org.apache.servicecomb.foundation.common.utils.SPIServiceUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ProduceProcessorManager extends RegisterManager<String, Map<String, ProduceProcessor>> {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ProduceProcessorManager.class);\n \n-public final class ProduceProcessorManager extends RegisterManager<String, ProduceProcessor> {\n   private static final List<ProduceProcessor> produceProcessor =\n       SPIServiceUtils.getSortedService(ProduceProcessor.class);\n \n   private static final String NAME = \"produce processor mgr\";\n \n   public static final String DEFAULT_TYPE = MediaType.APPLICATION_JSON;\n \n+  public static final String DEFAULT_SERIAL_CLASS = \"servicecomb_default_class\";\n+\n   public static final ProduceProcessorManager INSTANCE = new ProduceProcessorManager();\n \n-  public static final ProduceProcessor JSON_PROCESSOR =\n-      SPIServiceUtils.getTargetService(ProduceProcessor.class, ProduceJsonProcessor.class);\n+  private Map<String, ProduceProcessor> jsonProcessorMap;\n \n-  public static final ProduceProcessor PLAIN_PROCESSOR =\n-      SPIServiceUtils.getTargetService(ProduceProcessor.class, ProduceTextPlainProcessor.class);\n+  private Map<String, ProduceProcessor> plainProcessorMap;\n \n-  public static final ProduceProcessor DEFAULT_PROCESSOR = JSON_PROCESSOR;\n+  private Map<String, ProduceProcessor> defaultProcessorMap;\n \n   private ProduceProcessorManager() {\n     super(NAME);\n-    Set<String> set = new HashSet<>();\n     produceProcessor.forEach(processor -> {\n-      if (set.add(processor.getName())) {\n-        register(processor.getName(), processor);\n-      }\n+      Map<String, ProduceProcessor> prodProcessorMap = getObjMap()\n+          .computeIfAbsent(processor.getName(), key -> new HashMap<>());\n+      prodProcessorMap.putIfAbsent(processor.getSerializationView(), processor);\n     });\n+    jsonProcessorMap = ensureFindValue(MediaType.APPLICATION_JSON);\n+    plainProcessorMap = ensureFindValue(MediaType.TEXT_PLAIN);\n+    defaultProcessorMap = jsonProcessorMap;\n+  }\n+\n+  public static ProduceProcessor cloneNewProduceProcessor(String acceptType, Class<?> serialViewClass,\n+      Map<String, ProduceProcessor> produceViewMap) {\n+    ProduceProcessor newInstance;\n+    try {\n+      newInstance = produceViewMap.get(DEFAULT_SERIAL_CLASS).getClass().newInstance();\n+      newInstance.setSerializationView(serialViewClass);\n+      return newInstance;\n+    } catch (Throwable e) {\n+      LOGGER.error(String.format(\"Failed to create produceProcessor with %s\", acceptType), e);\n+    }\n+    return produceViewMap.get(DEFAULT_SERIAL_CLASS);\n+  }\n+\n+  public Map<String, ProduceProcessor> getJsonProcessorMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dd1a8a5df9cf68972713b3deed0779b01d89d92"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NzIzNTM1", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1688#pullrequestreview-388723535", "createdAt": "2020-04-07T01:18:57Z", "commit": {"oid": "9dd1a8a5df9cf68972713b3deed0779b01d89d92"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMToxODo1N1rOGBvkWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMToxODo1N1rOGBvkWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ4MTExMg==", "bodyText": "Maybe this code can be better. Because:\nProduceProcessor can be constructed at initialization, and will not change when excepting requests. So only findProduceProcessor(String type) can expose to the callers. findProduceProcessor(String type, String serialView) is not needed. And ensureFindProduceProcessor do not need to processing annotations for each request, but process once when initialization.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1688#discussion_r404481112", "createdAt": "2020-04-07T01:18:57Z", "author": {"login": "liubao68"}, "path": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/RestOperationMeta.java", "diffHunk": "@@ -257,31 +263,71 @@ private void addParam(RestParam param) {\n     paramMap.put(param.getParamName(), param);\n   }\n \n+  public ProduceProcessor findProduceProcessor(String type, String serialView) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dd1a8a5df9cf68972713b3deed0779b01d89d92"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e82e2d438fd141e65aff6eed52000cc7240b882", "author": {"user": {"login": "heyile", "name": null}}, "url": "https://github.com/apache/servicecomb-java-chassis/commit/2e82e2d438fd141e65aff6eed52000cc7240b882", "committedDate": "2020-04-08T00:51:01Z", "message": "[SCB-1828] Support @JsonView"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92c3e21952d6f1985a60f76ea8551bf46f01ceca", "author": {"user": {"login": "heyile", "name": null}}, "url": "https://github.com/apache/servicecomb-java-chassis/commit/92c3e21952d6f1985a60f76ea8551bf46f01ceca", "committedDate": "2020-04-08T00:51:01Z", "message": "[SCB-1828] Support @JsonView : add ut"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8a494ba743dc449f9eb3edd22b364857f986565", "author": {"user": {"login": "heyile", "name": null}}, "url": "https://github.com/apache/servicecomb-java-chassis/commit/d8a494ba743dc449f9eb3edd22b364857f986565", "committedDate": "2020-04-08T00:51:01Z", "message": "[SCB-1828] Support @JsonView: support @requestBody"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e361c2e24c43a68627152a73aa6ac7342b8688d", "author": {"user": {"login": "heyile", "name": null}}, "url": "https://github.com/apache/servicecomb-java-chassis/commit/0e361c2e24c43a68627152a73aa6ac7342b8688d", "committedDate": "2020-04-08T00:51:01Z", "message": "[SCB-1828] Support @JsonView: fixed as reviewed"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d6deed4e506a46198c343481aa18ad4d8bae5ff", "author": {"user": {"login": "heyile", "name": null}}, "url": "https://github.com/apache/servicecomb-java-chassis/commit/3d6deed4e506a46198c343481aa18ad4d8bae5ff", "committedDate": "2020-04-07T11:45:47Z", "message": "[SCB-1828] Support @JsonView: fixed as reviewed"}, "afterCommit": {"oid": "0e361c2e24c43a68627152a73aa6ac7342b8688d", "author": {"user": {"login": "heyile", "name": null}}, "url": "https://github.com/apache/servicecomb-java-chassis/commit/0e361c2e24c43a68627152a73aa6ac7342b8688d", "committedDate": "2020-04-08T00:51:01Z", "message": "[SCB-1828] Support @JsonView: fixed as reviewed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMDIyMjUw", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1688#pullrequestreview-392022250", "createdAt": "2020-04-13T08:27:34Z", "commit": {"oid": "0e361c2e24c43a68627152a73aa6ac7342b8688d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4507, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}