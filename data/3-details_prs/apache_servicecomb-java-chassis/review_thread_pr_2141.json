{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMjQ0MjQ5", "number": 2141, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTowMzozMVrOFGeG_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTowMzozMVrOFGeG_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzI5MDg3OnYy", "diffSide": "RIGHT", "path": "spring-boot/spring-boot-starters/java-chassis-spring-boot-starter/src/main/java/org/apache/servicecomb/springboot2/starter/ConfigurationSpringBootInitializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTowMzozMVrOIHf70A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTozMDowMFrOIHghyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDczNDE2MA==", "bodyText": "Is it better to add a new method 'addXXX' that has\naddMicroserviceYAMLToSpring & addMappingToString ?", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2141#discussion_r544734160", "createdAt": "2020-12-17T01:03:31Z", "author": {"login": "liubao68"}, "path": "spring-boot/spring-boot-starters/java-chassis-spring-boot-starter/src/main/java/org/apache/servicecomb/springboot2/starter/ConfigurationSpringBootInitializer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.springboot2.starter;\n+\n+import org.apache.servicecomb.core.ConfigurationSpringInitializer;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.env.EnvironmentPostProcessor;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+\n+/**\n+ * when run with springboot, add microservice.yaml to Environment earlier<br>\n+ * to affect {@link Conditional}<br>\n+ */\n+public class ConfigurationSpringBootInitializer implements EnvironmentPostProcessor {\n+  @Override\n+  public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n+    ConfigurationSpringInitializer.addMicroserviceYAMLToSpring(environment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb338b686dfbfb90c6279b1b9a292ac76e990bd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0Mzg4Mg==", "bodyText": "done", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2141#discussion_r544743882", "createdAt": "2020-12-17T01:30:00Z", "author": {"login": "wujimin"}, "path": "spring-boot/spring-boot-starters/java-chassis-spring-boot-starter/src/main/java/org/apache/servicecomb/springboot2/starter/ConfigurationSpringBootInitializer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.springboot2.starter;\n+\n+import org.apache.servicecomb.core.ConfigurationSpringInitializer;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.env.EnvironmentPostProcessor;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+\n+/**\n+ * when run with springboot, add microservice.yaml to Environment earlier<br>\n+ * to affect {@link Conditional}<br>\n+ */\n+public class ConfigurationSpringBootInitializer implements EnvironmentPostProcessor {\n+  @Override\n+  public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n+    ConfigurationSpringInitializer.addMicroserviceYAMLToSpring(environment);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDczNDE2MA=="}, "originalCommit": {"oid": "afb338b686dfbfb90c6279b1b9a292ac76e990bd"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1219, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}