{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5OTYxMDM5", "number": 2014, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMzozMjowM1rOEx5tIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjoyODo0NlrOEyMv8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzYxMTIzOnYy", "diffSide": "RIGHT", "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/config/ServiceRegistryConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMzozMjowM1rOHoPmww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMTowNDozMVrOHonupg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2MDc3MQ==", "bodyText": "Difference", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2014#discussion_r511960771", "createdAt": "2020-10-26T13:32:03Z", "author": {"login": "liubao68"}, "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/config/ServiceRegistryConfig.java", "diffHunk": "@@ -257,6 +257,14 @@ public boolean isAlwaysOverrideSchema() {\n     return property.get();\n   }\n \n+  public boolean isIgnoreSwaggerDifferent() {\n+    DynamicBooleanProperty property =\n+        DynamicPropertyFactory.getInstance()\n+            .getBooleanProperty(\"servicecomb.service.registry.instance.ignoreSwaggerDifferent\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4401075aeb542e8184b6902c466a404cb776ef28"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NjAwNg==", "bodyText": "Thanks for your suggestion.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2014#discussion_r512356006", "createdAt": "2020-10-27T01:04:31Z", "author": {"login": "develpoerX"}, "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/config/ServiceRegistryConfig.java", "diffHunk": "@@ -257,6 +257,14 @@ public boolean isAlwaysOverrideSchema() {\n     return property.get();\n   }\n \n+  public boolean isIgnoreSwaggerDifferent() {\n+    DynamicBooleanProperty property =\n+        DynamicPropertyFactory.getInstance()\n+            .getBooleanProperty(\"servicecomb.service.registry.instance.ignoreSwaggerDifferent\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2MDc3MQ=="}, "originalCommit": {"oid": "4401075aeb542e8184b6902c466a404cb776ef28"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzYxMjczOnYy", "diffSide": "RIGHT", "path": "service-registry/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMzozMjoyOFrOHoPn0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjo1NDoxMVrOHotlXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2MTA0MA==", "bodyText": "do not add version, use dependency management if neccessary", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2014#discussion_r511961040", "createdAt": "2020-10-26T13:32:28Z", "author": {"login": "liubao68"}, "path": "service-registry/pom.xml", "diffHunk": "@@ -71,5 +71,19 @@\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n+    <dependency>\n+        <groupId>io.swagger</groupId>\n+        <artifactId>swagger-models</artifactId>\n+        <version>1.5.22</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4401075aeb542e8184b6902c466a404cb776ef28"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1MTkzMg==", "bodyText": "done", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2014#discussion_r512451932", "createdAt": "2020-10-27T06:54:11Z", "author": {"login": "develpoerX"}, "path": "service-registry/pom.xml", "diffHunk": "@@ -71,5 +71,19 @@\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n+    <dependency>\n+        <groupId>io.swagger</groupId>\n+        <artifactId>swagger-models</artifactId>\n+        <version>1.5.22</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2MTA0MA=="}, "originalCommit": {"oid": "4401075aeb542e8184b6902c466a404cb776ef28"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzYxNjkwOnYy", "diffSide": "RIGHT", "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMzozMzoyM1rOHoPqQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjo1NDoyMVrOHotlqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2MTY2Ng==", "bodyText": "use StringUtils.isEmpty from commons lang 3", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2014#discussion_r511961666", "createdAt": "2020-10-26T13:33:23Z", "author": {"login": "liubao68"}, "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java", "diffHunk": "@@ -337,6 +354,12 @@ private boolean onlineSchemaIsModifiable() {\n         || ServiceRegistryConfig.INSTANCE.isAlwaysOverrideSchema();\n   }\n \n+  private boolean isIllegalValue(String context) {\n+    if (context == null || context == \"\" || context.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4401075aeb542e8184b6902c466a404cb776ef28"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1MjAwOA==", "bodyText": "done", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2014#discussion_r512452008", "createdAt": "2020-10-27T06:54:21Z", "author": {"login": "develpoerX"}, "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java", "diffHunk": "@@ -337,6 +354,12 @@ private boolean onlineSchemaIsModifiable() {\n         || ServiceRegistryConfig.INSTANCE.isAlwaysOverrideSchema();\n   }\n \n+  private boolean isIllegalValue(String context) {\n+    if (context == null || context == \"\" || context.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2MTY2Ng=="}, "originalCommit": {"oid": "4401075aeb542e8184b6902c466a404cb776ef28"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzYyMTg4OnYy", "diffSide": "RIGHT", "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMzozNDoyM1rOHoPtDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjozOTo0OFrOHotRhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2MjM4MQ==", "bodyText": "delete this method because should be  is valid value", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2014#discussion_r511962381", "createdAt": "2020-10-26T13:34:23Z", "author": {"login": "liubao68"}, "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java", "diffHunk": "@@ -337,6 +354,12 @@ private boolean onlineSchemaIsModifiable() {\n         || ServiceRegistryConfig.INSTANCE.isAlwaysOverrideSchema();\n   }\n \n+  private boolean isIllegalValue(String context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4401075aeb542e8184b6902c466a404cb776ef28"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0Njg1Mw==", "bodyText": "done", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2014#discussion_r512446853", "createdAt": "2020-10-27T06:39:48Z", "author": {"login": "develpoerX"}, "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java", "diffHunk": "@@ -337,6 +354,12 @@ private boolean onlineSchemaIsModifiable() {\n         || ServiceRegistryConfig.INSTANCE.isAlwaysOverrideSchema();\n   }\n \n+  private boolean isIllegalValue(String context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2MjM4MQ=="}, "originalCommit": {"oid": "4401075aeb542e8184b6902c466a404cb776ef28"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzY0NDU1OnYy", "diffSide": "RIGHT", "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMzozOToxOVrOHoP6zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjo1NDozMFrOHotl3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2NTkwMg==", "bodyText": "return true", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2014#discussion_r511965902", "createdAt": "2020-10-26T13:39:19Z", "author": {"login": "liubao68"}, "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java", "diffHunk": "@@ -261,6 +263,21 @@ private boolean compareAndReRegisterSchema(Entry<String, String> localSchemaEntr\n       String scSchemaContent = srClient.getSchema(microservice.getServiceId(), scSchema.getSchemaId());\n       String localSchemaContent = localSchemaEntry.getValue();\n \n+      if (isIllegalValue(scSchemaContent) && isIllegalValue(localSchemaContent)) {\n+        Swagger scSwagger = SwaggerUtils.parseSwagger(scSchemaContent);\n+        Swagger localSwagger = SwaggerUtils.parseSwagger(localSchemaContent);\n+        if (scSwagger.equals(localSwagger)) {\n+          if (ServiceRegistryConfig.INSTANCE.isIgnoreSwaggerDifferent()) {\n+            LOGGER.warn(\n+                \"the local schema[{}]'s content is same with the service center schema's content, but the order of some \"\n+                    + \" parameters in the configuration file is inconsistent:\\n service center schema:\\n[{}]\\n local schema:\\n[{}]\",\n+                localSchemaEntry.getKey(),\n+                scSchemaContent,\n+                localSchemaContent);\n+          }\n+          return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4401075aeb542e8184b6902c466a404cb776ef28"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1MjA2MQ==", "bodyText": "done", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2014#discussion_r512452061", "createdAt": "2020-10-27T06:54:30Z", "author": {"login": "develpoerX"}, "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java", "diffHunk": "@@ -261,6 +263,21 @@ private boolean compareAndReRegisterSchema(Entry<String, String> localSchemaEntr\n       String scSchemaContent = srClient.getSchema(microservice.getServiceId(), scSchema.getSchemaId());\n       String localSchemaContent = localSchemaEntry.getValue();\n \n+      if (isIllegalValue(scSchemaContent) && isIllegalValue(localSchemaContent)) {\n+        Swagger scSwagger = SwaggerUtils.parseSwagger(scSchemaContent);\n+        Swagger localSwagger = SwaggerUtils.parseSwagger(localSchemaContent);\n+        if (scSwagger.equals(localSwagger)) {\n+          if (ServiceRegistryConfig.INSTANCE.isIgnoreSwaggerDifferent()) {\n+            LOGGER.warn(\n+                \"the local schema[{}]'s content is same with the service center schema's content, but the order of some \"\n+                    + \" parameters in the configuration file is inconsistent:\\n service center schema:\\n[{}]\\n local schema:\\n[{}]\",\n+                localSchemaEntry.getKey(),\n+                scSchemaContent,\n+                localSchemaContent);\n+          }\n+          return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2NTkwMg=="}, "originalCommit": {"oid": "4401075aeb542e8184b6902c466a404cb776ef28"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzY1Njc1OnYy", "diffSide": "RIGHT", "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMzo0MjowMFrOHoQCJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjo1NDozNlrOHotl-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2Nzc4Mw==", "bodyText": "This block should executed when not equals.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2014#discussion_r511967783", "createdAt": "2020-10-26T13:42:00Z", "author": {"login": "liubao68"}, "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java", "diffHunk": "@@ -261,6 +263,21 @@ private boolean compareAndReRegisterSchema(Entry<String, String> localSchemaEntr\n       String scSchemaContent = srClient.getSchema(microservice.getServiceId(), scSchema.getSchemaId());\n       String localSchemaContent = localSchemaEntry.getValue();\n \n+      if (isIllegalValue(scSchemaContent) && isIllegalValue(localSchemaContent)) {\n+        Swagger scSwagger = SwaggerUtils.parseSwagger(scSchemaContent);\n+        Swagger localSwagger = SwaggerUtils.parseSwagger(localSchemaContent);\n+        if (scSwagger.equals(localSwagger)) {\n+          if (ServiceRegistryConfig.INSTANCE.isIgnoreSwaggerDifferent()) {\n+            LOGGER.warn(\n+                \"the local schema[{}]'s content is same with the service center schema's content, but the order of some \"\n+                    + \" parameters in the configuration file is inconsistent:\\n service center schema:\\n[{}]\\n local schema:\\n[{}]\",\n+                localSchemaEntry.getKey(),\n+                scSchemaContent,\n+                localSchemaContent);\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4401075aeb542e8184b6902c466a404cb776ef28"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1MjA4OQ==", "bodyText": "done", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2014#discussion_r512452089", "createdAt": "2020-10-27T06:54:36Z", "author": {"login": "develpoerX"}, "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java", "diffHunk": "@@ -261,6 +263,21 @@ private boolean compareAndReRegisterSchema(Entry<String, String> localSchemaEntr\n       String scSchemaContent = srClient.getSchema(microservice.getServiceId(), scSchema.getSchemaId());\n       String localSchemaContent = localSchemaEntry.getValue();\n \n+      if (isIllegalValue(scSchemaContent) && isIllegalValue(localSchemaContent)) {\n+        Swagger scSwagger = SwaggerUtils.parseSwagger(scSchemaContent);\n+        Swagger localSwagger = SwaggerUtils.parseSwagger(localSchemaContent);\n+        if (scSwagger.equals(localSwagger)) {\n+          if (ServiceRegistryConfig.INSTANCE.isIgnoreSwaggerDifferent()) {\n+            LOGGER.warn(\n+                \"the local schema[{}]'s content is same with the service center schema's content, but the order of some \"\n+                    + \" parameters in the configuration file is inconsistent:\\n service center schema:\\n[{}]\\n local schema:\\n[{}]\",\n+                localSchemaEntry.getKey(),\n+                scSchemaContent,\n+                localSchemaContent);\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2Nzc4Mw=="}, "originalCommit": {"oid": "4401075aeb542e8184b6902c466a404cb776ef28"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDcyMDEzOnYy", "diffSide": "RIGHT", "path": "service-registry/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjoyMzozNVrOHos7rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjozNTowNVrOHotLLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MTI2MA==", "bodyText": "duplicated", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2014#discussion_r512441260", "createdAt": "2020-10-27T06:23:35Z", "author": {"login": "liubao68"}, "path": "service-registry/pom.xml", "diffHunk": "@@ -71,5 +71,17 @@\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>io.swagger</groupId>\n+      <artifactId>swagger-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.servicecomb</groupId>\n+      <artifactId>swagger-generator-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.servicecomb</groupId>\n+      <artifactId>swagger-generator-core</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf9f855d83dbb1a23a13eb6c3222b83d9c44d24a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0NTIzMQ==", "bodyText": "Thanks for your suggestions", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2014#discussion_r512445231", "createdAt": "2020-10-27T06:35:05Z", "author": {"login": "develpoerX"}, "path": "service-registry/pom.xml", "diffHunk": "@@ -71,5 +71,17 @@\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>io.swagger</groupId>\n+      <artifactId>swagger-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.servicecomb</groupId>\n+      <artifactId>swagger-generator-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.servicecomb</groupId>\n+      <artifactId>swagger-generator-core</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MTI2MA=="}, "originalCommit": {"oid": "cf9f855d83dbb1a23a13eb6c3222b83d9c44d24a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDcyNzA0OnYy", "diffSide": "RIGHT", "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjoyNjozN1rOHos_6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjozNDoyNFrOHotKBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MjM0NA==", "bodyText": "service center schema and local schema both are different:\\n service center schema:\\n[{}]\\n local schema:\\n[{}]\"\n+ \"\\nYou have configured to ignore difference check. It's recommented  to increment microservice version before deploying when shcema change.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2014#discussion_r512442344", "createdAt": "2020-10-27T06:26:37Z", "author": {"login": "liubao68"}, "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java", "diffHunk": "@@ -261,6 +263,24 @@ private boolean compareAndReRegisterSchema(Entry<String, String> localSchemaEntr\n       String scSchemaContent = srClient.getSchema(microservice.getServiceId(), scSchema.getSchemaId());\n       String localSchemaContent = localSchemaEntry.getValue();\n \n+      if (!StringUtils.isEmpty(scSchemaContent) && !StringUtils.isEmpty(localSchemaContent)) {\n+        Swagger scSwagger = SwaggerUtils.parseSwagger(scSchemaContent);\n+        Swagger localSwagger = SwaggerUtils.parseSwagger(localSchemaContent);\n+        if (scSwagger.equals(localSwagger)) {\n+          return true;\n+        }\n+        if (ServiceRegistryConfig.INSTANCE.isIgnoreSwaggerDifference()) {\n+          LOGGER.warn(\n+              \"service center schema and local schema both are different:\\n service center schema:\\n[{}]\\n local schema:\\n[{}]\"\n+                  + \"\\nYou need to increment microservice version before deploying. \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf9f855d83dbb1a23a13eb6c3222b83d9c44d24a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0NDkzMg==", "bodyText": "ok", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2014#discussion_r512444932", "createdAt": "2020-10-27T06:34:24Z", "author": {"login": "develpoerX"}, "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java", "diffHunk": "@@ -261,6 +263,24 @@ private boolean compareAndReRegisterSchema(Entry<String, String> localSchemaEntr\n       String scSchemaContent = srClient.getSchema(microservice.getServiceId(), scSchema.getSchemaId());\n       String localSchemaContent = localSchemaEntry.getValue();\n \n+      if (!StringUtils.isEmpty(scSchemaContent) && !StringUtils.isEmpty(localSchemaContent)) {\n+        Swagger scSwagger = SwaggerUtils.parseSwagger(scSchemaContent);\n+        Swagger localSwagger = SwaggerUtils.parseSwagger(localSchemaContent);\n+        if (scSwagger.equals(localSwagger)) {\n+          return true;\n+        }\n+        if (ServiceRegistryConfig.INSTANCE.isIgnoreSwaggerDifference()) {\n+          LOGGER.warn(\n+              \"service center schema and local schema both are different:\\n service center schema:\\n[{}]\\n local schema:\\n[{}]\"\n+                  + \"\\nYou need to increment microservice version before deploying. \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MjM0NA=="}, "originalCommit": {"oid": "cf9f855d83dbb1a23a13eb6c3222b83d9c44d24a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDczMTM5OnYy", "diffSide": "RIGHT", "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjoyODo0NlrOHotClw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjo1ODozMVrOHotrlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MzAzMQ==", "bodyText": "put if (ServiceRegistryConfig.INSTANCE.isIgnoreSwaggerDifference()) { outside of\nif (!StringUtils.isEmpty(scSchemaContent) && !StringUtils.isEmpty(localSchemaContent)) {\nblock.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2014#discussion_r512443031", "createdAt": "2020-10-27T06:28:46Z", "author": {"login": "liubao68"}, "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java", "diffHunk": "@@ -261,6 +263,24 @@ private boolean compareAndReRegisterSchema(Entry<String, String> localSchemaEntr\n       String scSchemaContent = srClient.getSchema(microservice.getServiceId(), scSchema.getSchemaId());\n       String localSchemaContent = localSchemaEntry.getValue();\n \n+      if (!StringUtils.isEmpty(scSchemaContent) && !StringUtils.isEmpty(localSchemaContent)) {\n+        Swagger scSwagger = SwaggerUtils.parseSwagger(scSchemaContent);\n+        Swagger localSwagger = SwaggerUtils.parseSwagger(localSchemaContent);\n+        if (scSwagger.equals(localSwagger)) {\n+          return true;\n+        }\n+        if (ServiceRegistryConfig.INSTANCE.isIgnoreSwaggerDifference()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf9f855d83dbb1a23a13eb6c3222b83d9c44d24a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1MzUyNQ==", "bodyText": "done. I have put it behind EQUALS block.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/2014#discussion_r512453525", "createdAt": "2020-10-27T06:58:31Z", "author": {"login": "develpoerX"}, "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java", "diffHunk": "@@ -261,6 +263,24 @@ private boolean compareAndReRegisterSchema(Entry<String, String> localSchemaEntr\n       String scSchemaContent = srClient.getSchema(microservice.getServiceId(), scSchema.getSchemaId());\n       String localSchemaContent = localSchemaEntry.getValue();\n \n+      if (!StringUtils.isEmpty(scSchemaContent) && !StringUtils.isEmpty(localSchemaContent)) {\n+        Swagger scSwagger = SwaggerUtils.parseSwagger(scSchemaContent);\n+        Swagger localSwagger = SwaggerUtils.parseSwagger(localSchemaContent);\n+        if (scSwagger.equals(localSwagger)) {\n+          return true;\n+        }\n+        if (ServiceRegistryConfig.INSTANCE.isIgnoreSwaggerDifference()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MzAzMQ=="}, "originalCommit": {"oid": "cf9f855d83dbb1a23a13eb6c3222b83d9c44d24a"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1241, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}