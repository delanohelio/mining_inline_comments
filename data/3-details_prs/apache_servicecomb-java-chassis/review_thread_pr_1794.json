{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0ODU5NzQx", "number": 1794, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODoxNjoxNlrOEAzHzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODoxNjoxNlrOEAzHzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjczMDM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/servicecomb/core/filter/FilterNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODoxNjoxNlrOGcTKxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoxNzoxMVrOGcegRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMyNzM2Nw==", "bodyText": "It's better to be private.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1794#discussion_r432327367", "createdAt": "2020-05-29T08:16:16Z", "author": {"login": "liubao68"}, "path": "core/src/main/java/org/apache/servicecomb/core/filter/FilterNode.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.core.filter;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import org.apache.servicecomb.core.Invocation;\n+import org.apache.servicecomb.foundation.common.utils.AsyncUtils;\n+import org.apache.servicecomb.swagger.invocation.Response;\n+\n+public class FilterNode {\n+  public static FilterNode buildChain(Filter... filters) {\n+    return buildChain(Arrays.asList(filters));\n+  }\n+\n+  public static FilterNode buildChain(List<Filter> filters) {\n+    List<FilterNode> filterNodes = filters.stream()\n+        .map(FilterNode::new)\n+        .collect(Collectors.toList());\n+\n+    for (int idx = 0; idx < filterNodes.size() - 1; idx++) {\n+      filterNodes.get(idx).setNextNode(filterNodes.get(idx + 1));\n+    }\n+\n+    return filterNodes.get(0);\n+  }\n+\n+  private final Filter filter;\n+\n+  private FilterNode nextNode;\n+\n+  public FilterNode(Filter filter) {\n+    this.filter = filter;\n+  }\n+\n+  public void setNextNode(FilterNode nextNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a794783d9a214b4043642024ae0c2daa2a5662"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxMzA5Mg==", "bodyText": "done", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1794#discussion_r432513092", "createdAt": "2020-05-29T14:17:11Z", "author": {"login": "wujimin"}, "path": "core/src/main/java/org/apache/servicecomb/core/filter/FilterNode.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.core.filter;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import org.apache.servicecomb.core.Invocation;\n+import org.apache.servicecomb.foundation.common.utils.AsyncUtils;\n+import org.apache.servicecomb.swagger.invocation.Response;\n+\n+public class FilterNode {\n+  public static FilterNode buildChain(Filter... filters) {\n+    return buildChain(Arrays.asList(filters));\n+  }\n+\n+  public static FilterNode buildChain(List<Filter> filters) {\n+    List<FilterNode> filterNodes = filters.stream()\n+        .map(FilterNode::new)\n+        .collect(Collectors.toList());\n+\n+    for (int idx = 0; idx < filterNodes.size() - 1; idx++) {\n+      filterNodes.get(idx).setNextNode(filterNodes.get(idx + 1));\n+    }\n+\n+    return filterNodes.get(0);\n+  }\n+\n+  private final Filter filter;\n+\n+  private FilterNode nextNode;\n+\n+  public FilterNode(Filter filter) {\n+    this.filter = filter;\n+  }\n+\n+  public void setNextNode(FilterNode nextNode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMyNzM2Nw=="}, "originalCommit": {"oid": "46a794783d9a214b4043642024ae0c2daa2a5662"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1267, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}