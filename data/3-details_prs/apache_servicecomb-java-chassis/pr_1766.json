{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNDM1MjYz", "number": 1766, "title": "[SCB-1922] implemented core logic of zero-config registry", "bodyText": "Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Make sure there is a JIRA issue filed for the change (usually before you start working on it).  Trivial changes like typos do not require a JIRA issue.  Your pull request should address just this issue, without pulling in other changes.\n Each commit in the pull request should have a meaningful subject line and body.\n Format the pull request title like [SCB-XXX] Fixes bug in ApproximateQuantiles, where you replace SCB-XXX with the appropriate JIRA issue.\n Write a pull request description that is detailed enough to understand what the pull request does, how, and why.\n Run mvn clean install -Pit to make sure basic checks pass. A more thorough check will be performed on your pull request automatically.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.", "createdAt": "2020-05-20T00:21:01Z", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766", "merged": true, "mergeCommit": {"oid": "a6c9179e344cb5808489f27dc291c0284f45bab6"}, "closed": true, "closedAt": "2020-05-20T10:19:55Z", "author": {"login": "jungan21"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABci9db0AH2gAyNDIwNDM1MjYzOmJmZWNhNmU3OTRhZGQ3NmJjNzIxNmM0OTBkOTNhZjZiMjBmZTU5MzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjGYodAFqTQxNTE5MzEzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931", "author": {"user": {"login": "jungan21", "name": "Jun Gan"}}, "url": "https://github.com/apache/servicecomb-java-chassis/commit/bfeca6e794add76bc7216c490d93af6b20fe5931", "committedDate": "2020-05-19T23:55:52Z", "message": "[SCB-1922] implemented core logic of zero-config registry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTM0NzUy", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#pullrequestreview-414934752", "createdAt": "2020-05-20T01:38:02Z", "commit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTozODowMlrOGX4VZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTozODowMlrOGX4VZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5MzQxMg==", "bodyText": "This line is too long. use etc/*xml code template to format files.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#discussion_r427693412", "createdAt": "2020-05-20T01:38:02Z", "author": {"login": "liubao68"}, "path": "service-registry/registry-zero-config/src/test/java/org/apache/servicecomb/serviceregistry/client/TestZeroConfigRegistryClientImpl.java", "diffHunk": "@@ -0,0 +1,388 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.serviceregistry.client;\n+\n+import org.apache.servicecomb.serviceregistry.api.registry.MicroserviceInstance;\n+import org.apache.servicecomb.serviceregistry.api.registry.MicroserviceInstanceStatus;\n+import org.apache.servicecomb.serviceregistry.api.response.HeartbeatResponse;\n+import org.apache.servicecomb.serviceregistry.client.http.MicroserviceInstances;\n+import org.apache.servicecomb.serviceregistry.server.ServerMicroserviceInstance;\n+import org.mockito.Mock;\n+\n+import static org.apache.servicecomb.serviceregistry.ZeroConfigRegistryConstants.INSTANCE_ID;\n+import static org.apache.servicecomb.serviceregistry.ZeroConfigRegistryConstants.SCHEMA_CONTENT_ENDPOINT_BASE_PATH;\n+import static org.apache.servicecomb.serviceregistry.ZeroConfigRegistryConstants.SCHEMA_CONTENT_ENDPOINT_QUERY_KEYWORD;\n+import static org.apache.servicecomb.serviceregistry.ZeroConfigRegistryConstants.SCHEMA_CONTENT_ENDPOINT_SUBPATH;\n+import static org.apache.servicecomb.serviceregistry.ZeroConfigRegistryConstants.INSTANCE_HEARTBEAT_RESPONSE_MESSAGE_OK;\n+import static org.mockito.Matchers.anyObject;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+\n+import org.apache.servicecomb.serviceregistry.api.registry.Microservice;\n+import org.apache.servicecomb.serviceregistry.server.ZeroConfigRegistryService;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.io.IOException;\n+import java.net.MulticastSocket;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class TestZeroConfigRegistryClientImpl {\n+\n+    ZeroConfigRegistryClientImpl target;\n+\n+    @Mock\n+    ZeroConfigRegistryService zeroConfigRegistryService;\n+\n+    @Mock\n+    MulticastSocket multicastSocket;\n+\n+    @Mock\n+    RestTemplate restTemplate;\n+\n+    // testing data\n+    String selfServiceId = \"123\";\n+    String selfInstanceId = \"instanceId\";\n+    String otherServiceId = \"456\";\n+    String appId = \"appId\";\n+    String serviceName = \"serviceName\";\n+    String version = \"0.0.0.1\";\n+    String status = \"UP\";\n+    String host = \"host\";\n+    String schemaId1 = \"schemaId1\";\n+    String schemaContent1 = \"schemaContent1\";\n+    String newSchemaId = \"newSchemaId\";\n+    String newSchemaContent = \"newSchemaContent\";\n+    String nonExistSchemaId = \"nonExistSchemaId\";\n+    String endpoint1 = \"endpoint1\";\n+    String strVersionRule = \"0.0.0.0+\";\n+\n+    @Before\n+    public void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+        target = new ZeroConfigRegistryClientImpl(zeroConfigRegistryService, multicastSocket, restTemplate);\n+    }\n+\n+    private Microservice prepareService(String serviceId, boolean withId){\n+        Microservice microservice = new Microservice();\n+        if (withId){\n+            microservice.setServiceId(serviceId);\n+        }\n+        microservice.setServiceName(serviceName);\n+        microservice.setAppId(appId);\n+        microservice.setVersion(version);\n+        microservice.setStatus(status);\n+        List<String> schemas = new ArrayList<>();\n+        schemas.add(schemaId1);\n+        microservice.setSchemas(schemas);\n+        microservice.addSchema(schemaId1, schemaContent1);\n+        return microservice;\n+    }\n+\n+    private MicroserviceInstance prepareInstance(String instanceId, boolean withId){\n+        MicroserviceInstance instance = new MicroserviceInstance();\n+        if (withId){\n+            instance.setInstanceId(instanceId);\n+        }\n+        instance.setServiceId(selfServiceId);\n+        List<String> endpointList = new ArrayList<>();\n+        endpointList.add(endpoint1);\n+        instance.setEndpoints(endpointList);\n+        instance.setStatus(MicroserviceInstanceStatus.UP);\n+        instance.setHostName(host);\n+        return instance;\n+    }\n+\n+    private ServerMicroserviceInstance prepareServerServiceInstance(boolean withEndpoint){\n+        ServerMicroserviceInstance serverServiceInstance = new ServerMicroserviceInstance();\n+        serverServiceInstance.setServiceId(otherServiceId);\n+        serverServiceInstance.setInstanceId(selfInstanceId);\n+        serverServiceInstance.setServiceName(serviceName);\n+        serverServiceInstance.setAppId(appId);\n+        serverServiceInstance.setVersion(version);\n+        serverServiceInstance.setStatus(status);\n+        List<String> schemas = new ArrayList<>();\n+        schemas.add(schemaId1);\n+        serverServiceInstance.setSchemas(schemas);\n+        if (withEndpoint) {\n+            List<String> endpointList = new ArrayList<>();\n+            endpointList.add(endpoint1);\n+            serverServiceInstance.setEndpoints(endpointList);\n+        }\n+        serverServiceInstance.setHostName(host);\n+        return serverServiceInstance;\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+\n+    }\n+\n+    @Test\n+    public void test_registerMicroservice_withID_shouldReturnSameID(){\n+        Microservice selfService = prepareService(selfServiceId, true);\n+        ClientUtil.microserviceSelf = selfService;\n+\n+        String returnedServiceId = target.registerMicroservice(selfService);\n+\n+        Assert.assertEquals(selfServiceId, returnedServiceId);\n+    }\n+\n+    @Test\n+    public void test_registerMicroservice_withoutID_shouldReturnGeneratedID(){\n+        Microservice serviceWithoutID = prepareService(selfServiceId, false);\n+        ClientUtil.microserviceSelf = serviceWithoutID;\n+\n+        String returnedServiceId = target.registerMicroservice(serviceWithoutID);\n+\n+        Assert.assertEquals(ClientUtil.generateServiceId(serviceWithoutID), returnedServiceId);\n+    }\n+\n+    @Test\n+    public void test_getMicroservice_forItself_shouldReturnItself_And_NotCallZeroConfigRegistryService (){\n+        ClientUtil.microserviceSelf = prepareService(selfServiceId, true);;\n+\n+        Microservice microservice = target.getMicroservice(selfServiceId);\n+\n+        Assert.assertEquals(microservice.getServiceId(), ClientUtil.microserviceSelf.getServiceId());\n+        verifyZeroInteractions(zeroConfigRegistryService);\n+    }\n+\n+    @Test\n+    public void test_getMicroservice_forItself_shouldReturnOtherService_And_CallZeroConfigRegistryService (){\n+        ClientUtil.microserviceSelf = prepareService(selfServiceId, true);\n+\n+        when(zeroConfigRegistryService.getMicroservice(otherServiceId)).thenReturn(prepareServerServiceInstance(true));\n+\n+        Microservice returnedMicroservice = target.getMicroservice(otherServiceId);\n+\n+        Assert.assertEquals(otherServiceId, returnedMicroservice.getServiceId());\n+        verify(zeroConfigRegistryService, times(1)).getMicroservice(otherServiceId);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void test_isSchemaExist_whenServiceIdIsNull_shouldThrowIllegalArgumentException(){\n+        ClientUtil.microserviceSelf = prepareService(selfServiceId, false);\n+\n+        target.isSchemaExist(selfServiceId, schemaId1);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void test_isSchemaExist_whenServiceIdIsNotItselfId_shouldThrowIllegalArgumentException(){\n+        ClientUtil.microserviceSelf = prepareService(otherServiceId, true);\n+\n+        target.isSchemaExist(selfServiceId, schemaId1);\n+    }\n+\n+    @Test\n+    public void test_isSchemaExist_whenServiceIdIsItselfId_shouldReturnTrue(){\n+        ClientUtil.microserviceSelf = prepareService(selfServiceId, true);\n+\n+        boolean returnedResult = target.isSchemaExist(selfServiceId, schemaId1);\n+        Assert.assertTrue(returnedResult);\n+    }\n+\n+    @Test\n+    public void test_isSchemaExist_whenSchemaNotExist_shouldReturnFalse(){\n+        ClientUtil.microserviceSelf =  prepareService(selfServiceId, true);\n+\n+        boolean returnedResult = target.isSchemaExist(selfServiceId, nonExistSchemaId);\n+        Assert.assertFalse(returnedResult);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void test_registerSchema_whenServiceIdIsNull_shouldThrowIllegalArgumentException(){\n+        ClientUtil.microserviceSelf =  prepareService(selfServiceId, false);\n+\n+        target.registerSchema(selfServiceId, schemaId1, schemaContent1);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void test_registerSchema_whenServiceIdIsNotItSelfId_shouldThrowIllegalArgumentException(){\n+        ClientUtil.microserviceSelf =  prepareService(selfServiceId, true);\n+\n+        target.registerSchema(otherServiceId, schemaId1, schemaContent1);\n+    }\n+\n+    @Test\n+    public void test_registerSchema_whenReigsterForItself_shouldSuceed(){\n+        ClientUtil.microserviceSelf =  prepareService(selfServiceId, true);\n+\n+        boolean returnedResult = target.registerSchema(selfServiceId, newSchemaId, newSchemaContent);\n+        Assert.assertTrue(returnedResult);\n+        Assert.assertEquals(newSchemaContent, ClientUtil.microserviceSelf.getSchemaMap().computeIfPresent(newSchemaId, (k, v) -> {\n+            return v;\n+        }));\n+    }\n+\n+    @Test\n+    public void test_getSchema_whenForSelfMicroservice_shouldSuceed(){\n+        ClientUtil.microserviceSelf = prepareService(selfServiceId, true);\n+\n+        String returnedSchemaContent = target.getSchema(selfServiceId, schemaId1);\n+        Assert.assertEquals(schemaContent1, returnedSchemaContent);\n+    }\n+\n+    @Test\n+    public void test_getSchema_whenForSelfMicroservice_shouldNotCallZeroConfigRegistryServiceAndSucceed(){\n+        ClientUtil.microserviceSelf = prepareService(selfServiceId, true);\n+\n+        String returnedSchemaContent = target.getSchema(selfServiceId, schemaId1);\n+\n+        Assert.assertEquals(schemaContent1, returnedSchemaContent);\n+        verifyZeroInteractions(zeroConfigRegistryService);\n+    }\n+\n+    @Test\n+    public void test_getSchema_whenForOtherMicroservice_shouldCallZeroConfigRegistryService(){\n+        ClientUtil.microserviceSelf = prepareService(selfServiceId, true);\n+        when(zeroConfigRegistryService.getMicroservice(otherServiceId)).thenReturn(prepareServerServiceInstance(true));\n+        String schemaContentEndpoint = endpoint1 + SCHEMA_CONTENT_ENDPOINT_BASE_PATH + SCHEMA_CONTENT_ENDPOINT_SUBPATH + \"?\" + SCHEMA_CONTENT_ENDPOINT_QUERY_KEYWORD + \"=\" + schemaId1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "originalPosition": 263}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTM1OTA5", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#pullrequestreview-414935909", "createdAt": "2020-05-20T01:41:54Z", "commit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTo0MTo1NFrOGX4ZNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTo0MTo1NFrOGX4ZNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5NDM4OQ==", "bodyText": "Suggestions: path and name only used in endpoints, I think use literal is more readable than using a constant, we can easly get what's the url and param from method signature without a code jump.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#discussion_r427694389", "createdAt": "2020-05-20T01:41:54Z", "author": {"login": "liubao68"}, "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/serviceregistry/SchemaContentEndpoint.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.serviceregistry;\n+\n+import org.apache.servicecomb.provider.rest.common.RestSchema;\n+\n+import org.apache.servicecomb.serviceregistry.client.ClientUtil;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import javax.ws.rs.core.MediaType;\n+import java.util.Map;\n+\n+import static org.apache.servicecomb.serviceregistry.ZeroConfigRegistryConstants.*;\n+\n+@RestSchema(schemaId = SCHEMA_CONTENT_ENDPOINT)\n+@RequestMapping(path = SCHEMA_CONTENT_ENDPOINT_BASE_PATH)\n+public class SchemaContentEndpoint {\n+    // each service self-expose this endpoint for others(consumers) to retrieve the schema content\n+    @RequestMapping(path = SCHEMA_CONTENT_ENDPOINT_SUBPATH, produces = MediaType.TEXT_PLAIN, method = RequestMethod.POST )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTM2MTUw", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#pullrequestreview-414936150", "createdAt": "2020-05-20T01:42:38Z", "commit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTo0MjozOFrOGX4aBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTo0MjozOFrOGX4aBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5NDU5OQ==", "bodyText": "Suggestions: package name can rename to org.apache.serviecomb.zeroconfig", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#discussion_r427694599", "createdAt": "2020-05-20T01:42:38Z", "author": {"login": "liubao68"}, "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/serviceregistry/client/ClientUtil.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTQxMTM5", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#pullrequestreview-414941139", "createdAt": "2020-05-20T01:58:40Z", "commit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTo1ODo0MFrOGX4q4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTo1ODo0MFrOGX4q4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5ODkxNQ==", "bodyText": "better to use JAX-RS annotation, because not all project depend on swagger-generator-springmvc", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#discussion_r427698915", "createdAt": "2020-05-20T01:58:40Z", "author": {"login": "wujimin"}, "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/serviceregistry/SchemaContentEndpoint.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.serviceregistry;\n+\n+import org.apache.servicecomb.provider.rest.common.RestSchema;\n+\n+import org.apache.servicecomb.serviceregistry.client.ClientUtil;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import javax.ws.rs.core.MediaType;\n+import java.util.Map;\n+\n+import static org.apache.servicecomb.serviceregistry.ZeroConfigRegistryConstants.*;\n+\n+@RestSchema(schemaId = SCHEMA_CONTENT_ENDPOINT)\n+@RequestMapping(path = SCHEMA_CONTENT_ENDPOINT_BASE_PATH)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTQ1OTI2", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#pullrequestreview-414945926", "createdAt": "2020-05-20T02:14:11Z", "commit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjoxNDoxMVrOGX46yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjoxNDoxMVrOGX46yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwMjk4NA==", "bodyText": "seems http method should be GET", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#discussion_r427702984", "createdAt": "2020-05-20T02:14:11Z", "author": {"login": "wujimin"}, "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/serviceregistry/SchemaContentEndpoint.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.serviceregistry;\n+\n+import org.apache.servicecomb.provider.rest.common.RestSchema;\n+\n+import org.apache.servicecomb.serviceregistry.client.ClientUtil;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import javax.ws.rs.core.MediaType;\n+import java.util.Map;\n+\n+import static org.apache.servicecomb.serviceregistry.ZeroConfigRegistryConstants.*;\n+\n+@RestSchema(schemaId = SCHEMA_CONTENT_ENDPOINT)\n+@RequestMapping(path = SCHEMA_CONTENT_ENDPOINT_BASE_PATH)\n+public class SchemaContentEndpoint {\n+    // each service self-expose this endpoint for others(consumers) to retrieve the schema content\n+    @RequestMapping(path = SCHEMA_CONTENT_ENDPOINT_SUBPATH, produces = MediaType.TEXT_PLAIN, method = RequestMethod.POST )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76a8c3b1476c2298ae039e32884b37247348eccd", "author": {"user": {"login": "jungan21", "name": "Jun Gan"}}, "url": "https://github.com/apache/servicecomb-java-chassis/commit/76a8c3b1476c2298ae039e32884b37247348eccd", "committedDate": "2020-05-20T02:36:25Z", "message": "[SCB-1922] Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTUzMzAx", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#pullrequestreview-414953301", "createdAt": "2020-05-20T02:38:27Z", "commit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjozODoyN1rOGX5TXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjozODoyN1rOGX5TXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwOTI3OQ==", "bodyText": "utils with data is not so good\neven a utils with data, should provide a getter method, not access it directly", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#discussion_r427709279", "createdAt": "2020-05-20T02:38:27Z", "author": {"login": "wujimin"}, "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/serviceregistry/SchemaContentEndpoint.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.serviceregistry;\n+\n+import org.apache.servicecomb.provider.rest.common.RestSchema;\n+\n+import org.apache.servicecomb.serviceregistry.client.ClientUtil;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import javax.ws.rs.core.MediaType;\n+import java.util.Map;\n+\n+import static org.apache.servicecomb.serviceregistry.ZeroConfigRegistryConstants.*;\n+\n+@RestSchema(schemaId = SCHEMA_CONTENT_ENDPOINT)\n+@RequestMapping(path = SCHEMA_CONTENT_ENDPOINT_BASE_PATH)\n+public class SchemaContentEndpoint {\n+    // each service self-expose this endpoint for others(consumers) to retrieve the schema content\n+    @RequestMapping(path = SCHEMA_CONTENT_ENDPOINT_SUBPATH, produces = MediaType.TEXT_PLAIN, method = RequestMethod.POST )\n+    public String getSchemaEndpoint(@RequestParam(name = SCHEMA_CONTENT_ENDPOINT_QUERY_KEYWORD) String schemaId) {\n+        Map<String, String> schemaMap = ClientUtil.microserviceSelf.getSchemaMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTU0Njk1", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#pullrequestreview-414954695", "createdAt": "2020-05-20T02:43:02Z", "commit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjo0MzowMlrOGX5Xtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjo0MzowMlrOGX5Xtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxMDM5MA==", "bodyText": "please import codestyle:  etc/intellij-java-google-style.xml\nand then reformat new code.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#discussion_r427710390", "createdAt": "2020-05-20T02:43:02Z", "author": {"login": "wujimin"}, "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/serviceregistry/client/ClientUtil.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.serviceregistry.client;\n+\n+import org.apache.servicecomb.serviceregistry.api.registry.Microservice;\n+import org.apache.servicecomb.serviceregistry.api.registry.MicroserviceInstance;\n+import org.apache.servicecomb.serviceregistry.api.registry.MicroserviceInstanceStatus;\n+import org.apache.servicecomb.serviceregistry.server.ServerMicroserviceInstance;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.DatagramPacket;\n+import java.net.InetAddress;\n+import java.net.MulticastSocket;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.servicecomb.serviceregistry.ZeroConfigRegistryConstants.*;\n+\n+public class ClientUtil {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClientUtil.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTU0OTkx", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#pullrequestreview-414954991", "createdAt": "2020-05-20T02:44:08Z", "commit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjo0NDowOVrOGX5YrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjo0NDowOVrOGX5YrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxMDYzNw==", "bodyText": "must new for each times?", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#discussion_r427710637", "createdAt": "2020-05-20T02:44:09Z", "author": {"login": "wujimin"}, "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/serviceregistry/client/ClientUtil.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.serviceregistry.client;\n+\n+import org.apache.servicecomb.serviceregistry.api.registry.Microservice;\n+import org.apache.servicecomb.serviceregistry.api.registry.MicroserviceInstance;\n+import org.apache.servicecomb.serviceregistry.api.registry.MicroserviceInstanceStatus;\n+import org.apache.servicecomb.serviceregistry.server.ServerMicroserviceInstance;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.DatagramPacket;\n+import java.net.InetAddress;\n+import java.net.MulticastSocket;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.servicecomb.serviceregistry.ZeroConfigRegistryConstants.*;\n+\n+public class ClientUtil {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClientUtil.class);\n+\n+    private static ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n+\n+    public static Microservice microserviceSelf = new Microservice();\n+\n+    public static Map<String, String> serviceInstanceMapForHeartbeat = null;\n+\n+    public static synchronized void init(){\n+        Runnable heartbeatRunnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                if (serviceInstanceMapForHeartbeat != null && !serviceInstanceMapForHeartbeat.isEmpty()){\n+                    // after first registration succeeds\n+                    try {\n+                        byte[] heartbeatEventDataBytes = serviceInstanceMapForHeartbeat.toString().getBytes();\n+                        MulticastSocket multicastSocket = new MulticastSocket();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTU2Mjkz", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#pullrequestreview-414956293", "createdAt": "2020-05-20T02:48:47Z", "commit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjo0ODo0N1rOGX5dLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjo0ODo0N1rOGX5dLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxMTc4OA==", "bodyText": "String.join(\",\", list)", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#discussion_r427711788", "createdAt": "2020-05-20T02:48:47Z", "author": {"login": "wujimin"}, "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/serviceregistry/client/ClientUtil.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.serviceregistry.client;\n+\n+import org.apache.servicecomb.serviceregistry.api.registry.Microservice;\n+import org.apache.servicecomb.serviceregistry.api.registry.MicroserviceInstance;\n+import org.apache.servicecomb.serviceregistry.api.registry.MicroserviceInstanceStatus;\n+import org.apache.servicecomb.serviceregistry.server.ServerMicroserviceInstance;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.DatagramPacket;\n+import java.net.InetAddress;\n+import java.net.MulticastSocket;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.servicecomb.serviceregistry.ZeroConfigRegistryConstants.*;\n+\n+public class ClientUtil {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClientUtil.class);\n+\n+    private static ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n+\n+    public static Microservice microserviceSelf = new Microservice();\n+\n+    public static Map<String, String> serviceInstanceMapForHeartbeat = null;\n+\n+    public static synchronized void init(){\n+        Runnable heartbeatRunnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                if (serviceInstanceMapForHeartbeat != null && !serviceInstanceMapForHeartbeat.isEmpty()){\n+                    // after first registration succeeds\n+                    try {\n+                        byte[] heartbeatEventDataBytes = serviceInstanceMapForHeartbeat.toString().getBytes();\n+                        MulticastSocket multicastSocket = new MulticastSocket();\n+                        multicastSocket.setLoopbackMode(false);\n+                        multicastSocket.setTimeToLive(TIME_TO_LIVE);\n+\n+                        DatagramPacket instanceDataPacket = new DatagramPacket(heartbeatEventDataBytes, heartbeatEventDataBytes.length,\n+                                InetAddress.getByName(GROUP), PORT);\n+\n+                        multicastSocket.send(instanceDataPacket);\n+                    } catch (Exception e) {\n+                        LOGGER.error(\"Failed to send heartbeat event for object: {}\", serviceInstanceMapForHeartbeat, e);\n+                    }\n+                }\n+            }\n+        };\n+        executor.scheduleAtFixedRate(heartbeatRunnable, CLIENT_DELAY, HEALTH_CHECK_INTERVAL, TimeUnit.SECONDS);\n+    }\n+\n+    public static Optional<Map<String, String>> convertToRegisterDataModel(String serviceId, String microserviceInstanceId,\n+                                                                           MicroserviceInstance microserviceInstance, Microservice microservice) {\n+        Map<String, String> serviceInstanceTextAttributesMap = new HashMap<>();\n+\n+        serviceInstanceTextAttributesMap.put(EVENT, REGISTER_EVENT);\n+        serviceInstanceTextAttributesMap.put(VERSION, microservice.getVersion());\n+        serviceInstanceTextAttributesMap.put(SERVICE_ID, serviceId);\n+        serviceInstanceTextAttributesMap.put(INSTANCE_ID, microserviceInstanceId);\n+        serviceInstanceTextAttributesMap.put(STATUS, microserviceInstance.getStatus().toString());\n+        serviceInstanceTextAttributesMap.put(APP_ID, microservice.getAppId());\n+        serviceInstanceTextAttributesMap.put(SERVICE_NAME, microservice.getServiceName());\n+\n+        String hostName = microserviceInstance.getHostName();\n+        serviceInstanceTextAttributesMap.put(HOST_NAME, hostName);\n+\n+        // schema1$schema2\n+        serviceInstanceTextAttributesMap.put(ENDPOINTS, convertListToString(microserviceInstance.getEndpoints()));\n+        serviceInstanceTextAttributesMap.put(SCHEMA_IDS, convertListToString(microservice.getSchemas()));\n+\n+        return Optional.of(serviceInstanceTextAttributesMap);\n+    }\n+\n+    private static String convertListToString (List<String> list){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTU4NDY0", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#pullrequestreview-414958464", "createdAt": "2020-05-20T02:55:56Z", "commit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjo1NTo1NlrOGX5kOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjo1NTo1NlrOGX5kOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxMzU5NA==", "bodyText": "why schemaMap can be null?", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#discussion_r427713594", "createdAt": "2020-05-20T02:55:56Z", "author": {"login": "wujimin"}, "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/serviceregistry/SchemaContentEndpoint.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.serviceregistry;\n+\n+import org.apache.servicecomb.provider.rest.common.RestSchema;\n+\n+import org.apache.servicecomb.serviceregistry.client.ClientUtil;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import javax.ws.rs.core.MediaType;\n+import java.util.Map;\n+\n+import static org.apache.servicecomb.serviceregistry.ZeroConfigRegistryConstants.*;\n+\n+@RestSchema(schemaId = SCHEMA_CONTENT_ENDPOINT)\n+@RequestMapping(path = SCHEMA_CONTENT_ENDPOINT_BASE_PATH)\n+public class SchemaContentEndpoint {\n+    // each service self-expose this endpoint for others(consumers) to retrieve the schema content\n+    @RequestMapping(path = SCHEMA_CONTENT_ENDPOINT_SUBPATH, produces = MediaType.TEXT_PLAIN, method = RequestMethod.POST )\n+    public String getSchemaEndpoint(@RequestParam(name = SCHEMA_CONTENT_ENDPOINT_QUERY_KEYWORD) String schemaId) {\n+        Map<String, String> schemaMap = ClientUtil.microserviceSelf.getSchemaMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTU4NzUx", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#pullrequestreview-414958751", "createdAt": "2020-05-20T02:56:58Z", "commit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjo1Njo1OFrOGX5lIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjo1Njo1OFrOGX5lIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxMzgyNA==", "bodyText": "schemaMap.computeIfPresent(schemaId,  (key, schemaContent) -> { return schemaContent;}) \nwhat's the difference to schemaMap.get(schemaId)", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#discussion_r427713824", "createdAt": "2020-05-20T02:56:58Z", "author": {"login": "wujimin"}, "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/serviceregistry/SchemaContentEndpoint.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.serviceregistry;\n+\n+import org.apache.servicecomb.provider.rest.common.RestSchema;\n+\n+import org.apache.servicecomb.serviceregistry.client.ClientUtil;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import javax.ws.rs.core.MediaType;\n+import java.util.Map;\n+\n+import static org.apache.servicecomb.serviceregistry.ZeroConfigRegistryConstants.*;\n+\n+@RestSchema(schemaId = SCHEMA_CONTENT_ENDPOINT)\n+@RequestMapping(path = SCHEMA_CONTENT_ENDPOINT_BASE_PATH)\n+public class SchemaContentEndpoint {\n+    // each service self-expose this endpoint for others(consumers) to retrieve the schema content\n+    @RequestMapping(path = SCHEMA_CONTENT_ENDPOINT_SUBPATH, produces = MediaType.TEXT_PLAIN, method = RequestMethod.POST )\n+    public String getSchemaEndpoint(@RequestParam(name = SCHEMA_CONTENT_ENDPOINT_QUERY_KEYWORD) String schemaId) {\n+        Map<String, String> schemaMap = ClientUtil.microserviceSelf.getSchemaMap();\n+        return schemaMap != null ? schemaMap.computeIfPresent(schemaId,  (key, schemaContent) -> { return schemaContent;}) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfeca6e794add76bc7216c490d93af6b20fe5931"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d708cd13939d8fcae02511228266a41868cbf013", "author": {"user": {"login": "jungan21", "name": "Jun Gan"}}, "url": "https://github.com/apache/servicecomb-java-chassis/commit/d708cd13939d8fcae02511228266a41868cbf013", "committedDate": "2020-05-20T03:56:08Z", "message": "[SCB-1922] implemented core logic of zero-config registry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MDk2MjM3", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#pullrequestreview-415096237", "createdAt": "2020-05-20T08:17:12Z", "commit": {"oid": "d708cd13939d8fcae02511228266a41868cbf013"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODoxNzoxMlrOGYAUxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODoxNzoxMlrOGYAUxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgyNDMyNw==", "bodyText": "It's better to use the same configuratioin mechansim, see: https://docs.servicecomb.io/java-chassis/zh_CN/config/general-config/\nand use a boolean value, e.g 'DynamicPropertyFacotry.getInstance().getBooleanProperty(\"servicecomb.zeroconfig.enabled\", true).get()`", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#discussion_r427824327", "createdAt": "2020-05-20T08:17:12Z", "author": {"login": "liubao68"}, "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/ZeroConfigRegistryApplicationListener.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.zeroconfig;\n+\n+import org.apache.servicecomb.foundation.common.utils.BeanUtils;\n+import org.apache.servicecomb.serviceregistry.ServiceRegistry;\n+import org.apache.servicecomb.serviceregistry.client.ServiceRegistryClient;\n+import org.apache.servicecomb.serviceregistry.config.ServiceRegistryConfig;\n+\n+import org.apache.servicecomb.zeroconfig.client.ClientUtil;\n+import org.apache.servicecomb.zeroconfig.client.ZeroConfigRegistryClientImpl;\n+import org.apache.servicecomb.zeroconfig.server.ServerUtil;\n+import org.apache.servicecomb.zeroconfig.server.ZeroConfigRegistryService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeansException;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.context.ApplicationEvent;\n+import org.springframework.context.ApplicationListener;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.io.IOException;\n+import java.net.MulticastSocket;\n+import java.util.function.Function;\n+\n+/**\n+ * ZeroConfigServiceRegistryClientImpl is injected before cse application listener (order is -1000)\n+ */\n+\n+@Configuration\n+@Order(-1001)\n+public class ZeroConfigRegistryApplicationListener implements ApplicationListener<ApplicationEvent>,\n+    ApplicationContextAware {\n+\n+  private static final Logger LOGGER = LoggerFactory\n+      .getLogger(ZeroConfigRegistryApplicationListener.class);\n+\n+  private ApplicationContext applicationContext;\n+  private MulticastSocket multicastSocket;\n+\n+  @Override\n+  public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n+\n+    // same mechanism as Local registry to enable the Zero Config registry\n+    String flag = System.getProperty(ZeroConfigRegistryConstants.ZERO_CONFIG_REGISTRY_FLAG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d708cd13939d8fcae02511228266a41868cbf013"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MTAyNjEy", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#pullrequestreview-415102612", "createdAt": "2020-05-20T08:25:11Z", "commit": {"oid": "d708cd13939d8fcae02511228266a41868cbf013"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODoyNToxMlrOGYAoLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODoyNToxMlrOGYAoLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgyOTI5NQ==", "bodyText": "This attrubite is set but never read", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#discussion_r427829295", "createdAt": "2020-05-20T08:25:12Z", "author": {"login": "liubao68"}, "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/ZeroConfigRegistryApplicationListener.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.zeroconfig;\n+\n+import org.apache.servicecomb.foundation.common.utils.BeanUtils;\n+import org.apache.servicecomb.serviceregistry.ServiceRegistry;\n+import org.apache.servicecomb.serviceregistry.client.ServiceRegistryClient;\n+import org.apache.servicecomb.serviceregistry.config.ServiceRegistryConfig;\n+\n+import org.apache.servicecomb.zeroconfig.client.ClientUtil;\n+import org.apache.servicecomb.zeroconfig.client.ZeroConfigRegistryClientImpl;\n+import org.apache.servicecomb.zeroconfig.server.ServerUtil;\n+import org.apache.servicecomb.zeroconfig.server.ZeroConfigRegistryService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeansException;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.context.ApplicationEvent;\n+import org.springframework.context.ApplicationListener;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.io.IOException;\n+import java.net.MulticastSocket;\n+import java.util.function.Function;\n+\n+/**\n+ * ZeroConfigServiceRegistryClientImpl is injected before cse application listener (order is -1000)\n+ */\n+\n+@Configuration\n+@Order(-1001)\n+public class ZeroConfigRegistryApplicationListener implements ApplicationListener<ApplicationEvent>,\n+    ApplicationContextAware {\n+\n+  private static final Logger LOGGER = LoggerFactory\n+      .getLogger(ZeroConfigRegistryApplicationListener.class);\n+\n+  private ApplicationContext applicationContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d708cd13939d8fcae02511228266a41868cbf013"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MTAzMjU4", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#pullrequestreview-415103258", "createdAt": "2020-05-20T08:26:04Z", "commit": {"oid": "d708cd13939d8fcae02511228266a41868cbf013"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODoyNjowNFrOGYAqSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODoyNjowNFrOGYAqSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgyOTgzMw==", "bodyText": "Why need this line of code?", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#discussion_r427829833", "createdAt": "2020-05-20T08:26:04Z", "author": {"login": "liubao68"}, "path": "service-registry/registry-zero-config/src/main/java/org/apache/servicecomb/zeroconfig/ZeroConfigRegistryApplicationListener.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.zeroconfig;\n+\n+import org.apache.servicecomb.foundation.common.utils.BeanUtils;\n+import org.apache.servicecomb.serviceregistry.ServiceRegistry;\n+import org.apache.servicecomb.serviceregistry.client.ServiceRegistryClient;\n+import org.apache.servicecomb.serviceregistry.config.ServiceRegistryConfig;\n+\n+import org.apache.servicecomb.zeroconfig.client.ClientUtil;\n+import org.apache.servicecomb.zeroconfig.client.ZeroConfigRegistryClientImpl;\n+import org.apache.servicecomb.zeroconfig.server.ServerUtil;\n+import org.apache.servicecomb.zeroconfig.server.ZeroConfigRegistryService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeansException;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.context.ApplicationEvent;\n+import org.springframework.context.ApplicationListener;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.io.IOException;\n+import java.net.MulticastSocket;\n+import java.util.function.Function;\n+\n+/**\n+ * ZeroConfigServiceRegistryClientImpl is injected before cse application listener (order is -1000)\n+ */\n+\n+@Configuration\n+@Order(-1001)\n+public class ZeroConfigRegistryApplicationListener implements ApplicationListener<ApplicationEvent>,\n+    ApplicationContextAware {\n+\n+  private static final Logger LOGGER = LoggerFactory\n+      .getLogger(ZeroConfigRegistryApplicationListener.class);\n+\n+  private ApplicationContext applicationContext;\n+  private MulticastSocket multicastSocket;\n+\n+  @Override\n+  public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n+\n+    // same mechanism as Local registry to enable the Zero Config registry\n+    String flag = System.getProperty(ZeroConfigRegistryConstants.ZERO_CONFIG_REGISTRY_FLAG);\n+    if (flag != null && flag.equals(ZeroConfigRegistryConstants.ZERO_CONFIG_REGISTRY_ENABLE_FLAG)) {\n+      this.applicationContext = applicationContext;\n+      BeanUtils.setContext(applicationContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d708cd13939d8fcae02511228266a41868cbf013"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MTkzMTMy", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1766#pullrequestreview-415193132", "createdAt": "2020-05-20T10:19:46Z", "commit": {"oid": "d708cd13939d8fcae02511228266a41868cbf013"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4412, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}