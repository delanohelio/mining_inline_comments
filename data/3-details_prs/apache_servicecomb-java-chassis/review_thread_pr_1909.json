{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNjAxNzIw", "number": 1909, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTowNzozMFrOEVOGLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTowNzozMFrOEVOGLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjg2NTA5OnYy", "diffSide": "RIGHT", "path": "foundations/foundation-registry/src/main/java/org/apache/servicecomb/registry/api/registry/MicroserviceFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTowNzozMFrOG72lBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzo1Njo0NFrOG8nmGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMzM4MQ==", "bodyText": "version check can be done in setter, or easily missed checking when setting. e.g. for environment, this check is missed.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1909#discussion_r465413381", "createdAt": "2020-08-05T01:07:30Z", "author": {"login": "liubao68"}, "path": "foundations/foundation-registry/src/main/java/org/apache/servicecomb/registry/api/registry/MicroserviceFactory.java", "diffHunk": "@@ -49,14 +54,33 @@ public Microservice create(MicroserviceDefinition microserviceDefinition) {\n \n   private Microservice createMicroserviceFromDefinition(Configuration configuration) {\n     Microservice microservice = new Microservice();\n-    microservice.setServiceName(configuration.getString(CONFIG_QUALIFIED_MICROSERVICE_NAME_KEY,\n-        DEFAULT_MICROSERVICE_NAME));\n-    microservice.setAppId(configuration.getString(CONFIG_APPLICATION_ID_KEY, DefinitionConst.DEFAULT_APPLICATION_ID));\n-    String version = configuration.getString(CONFIG_QUALIFIED_MICROSERVICE_VERSION_KEY,\n-        DefinitionConst.DEFAULT_MICROSERVICE_VERSION);\n-    // just check version format\n-    new Version(version);\n-    microservice.setVersion(version);\n+\n+    EnvironmentConfiguration envConfig = new EnvironmentConfiguration();\n+    if (!StringUtils.isEmpty(envConfig.getString(APP_MAPPING)) &&\n+        !StringUtils.isEmpty(envConfig.getString(envConfig.getString(APP_MAPPING)))) {\n+      microservice.setAppId(envConfig.getString(envConfig.getString(APP_MAPPING)));\n+    } else {\n+      microservice.setAppId(configuration\n+          .getString(CONFIG_APPLICATION_ID_KEY, DefinitionConst.DEFAULT_APPLICATION_ID));\n+    }\n+    if (!StringUtils.isEmpty(envConfig.getString(SERVICE_MAPPING)) &&\n+        !StringUtils.isEmpty(envConfig.getString(envConfig.getString(SERVICE_MAPPING)))) {\n+      microservice.setServiceName(envConfig.getString(envConfig.getString(SERVICE_MAPPING)));\n+    } else {\n+      microservice.setServiceName(configuration.getString(CONFIG_QUALIFIED_MICROSERVICE_NAME_KEY,\n+          DEFAULT_MICROSERVICE_NAME));\n+    }\n+    if (!StringUtils.isEmpty(envConfig.getString(VERSION_MAPPING)) &&\n+        !StringUtils.isEmpty(envConfig.getString(envConfig.getString(VERSION_MAPPING)))) {\n+      microservice.setVersion(envConfig.getString(envConfig.getString(VERSION_MAPPING)));\n+    } else {\n+      // just check version format\n+      String version = configuration.getString(CONFIG_QUALIFIED_MICROSERVICE_VERSION_KEY,\n+          DefinitionConst.DEFAULT_MICROSERVICE_VERSION);\n+      new Version(version);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a038981fd2ec2b9ff88bb1692bbfd9039b2d8486"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0Nzc4Nw==", "bodyText": "done", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1909#discussion_r465547787", "createdAt": "2020-08-05T08:04:55Z", "author": {"login": "GuoYL123"}, "path": "foundations/foundation-registry/src/main/java/org/apache/servicecomb/registry/api/registry/MicroserviceFactory.java", "diffHunk": "@@ -49,14 +54,33 @@ public Microservice create(MicroserviceDefinition microserviceDefinition) {\n \n   private Microservice createMicroserviceFromDefinition(Configuration configuration) {\n     Microservice microservice = new Microservice();\n-    microservice.setServiceName(configuration.getString(CONFIG_QUALIFIED_MICROSERVICE_NAME_KEY,\n-        DEFAULT_MICROSERVICE_NAME));\n-    microservice.setAppId(configuration.getString(CONFIG_APPLICATION_ID_KEY, DefinitionConst.DEFAULT_APPLICATION_ID));\n-    String version = configuration.getString(CONFIG_QUALIFIED_MICROSERVICE_VERSION_KEY,\n-        DefinitionConst.DEFAULT_MICROSERVICE_VERSION);\n-    // just check version format\n-    new Version(version);\n-    microservice.setVersion(version);\n+\n+    EnvironmentConfiguration envConfig = new EnvironmentConfiguration();\n+    if (!StringUtils.isEmpty(envConfig.getString(APP_MAPPING)) &&\n+        !StringUtils.isEmpty(envConfig.getString(envConfig.getString(APP_MAPPING)))) {\n+      microservice.setAppId(envConfig.getString(envConfig.getString(APP_MAPPING)));\n+    } else {\n+      microservice.setAppId(configuration\n+          .getString(CONFIG_APPLICATION_ID_KEY, DefinitionConst.DEFAULT_APPLICATION_ID));\n+    }\n+    if (!StringUtils.isEmpty(envConfig.getString(SERVICE_MAPPING)) &&\n+        !StringUtils.isEmpty(envConfig.getString(envConfig.getString(SERVICE_MAPPING)))) {\n+      microservice.setServiceName(envConfig.getString(envConfig.getString(SERVICE_MAPPING)));\n+    } else {\n+      microservice.setServiceName(configuration.getString(CONFIG_QUALIFIED_MICROSERVICE_NAME_KEY,\n+          DEFAULT_MICROSERVICE_NAME));\n+    }\n+    if (!StringUtils.isEmpty(envConfig.getString(VERSION_MAPPING)) &&\n+        !StringUtils.isEmpty(envConfig.getString(envConfig.getString(VERSION_MAPPING)))) {\n+      microservice.setVersion(envConfig.getString(envConfig.getString(VERSION_MAPPING)));\n+    } else {\n+      // just check version format\n+      String version = configuration.getString(CONFIG_QUALIFIED_MICROSERVICE_VERSION_KEY,\n+          DefinitionConst.DEFAULT_MICROSERVICE_VERSION);\n+      new Version(version);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMzM4MQ=="}, "originalCommit": {"oid": "a038981fd2ec2b9ff88bb1692bbfd9039b2d8486"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIxNjQ3Mw==", "bodyText": "in setter will cause jackson parse failed", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1909#discussion_r466216473", "createdAt": "2020-08-06T07:56:44Z", "author": {"login": "GuoYL123"}, "path": "foundations/foundation-registry/src/main/java/org/apache/servicecomb/registry/api/registry/MicroserviceFactory.java", "diffHunk": "@@ -49,14 +54,33 @@ public Microservice create(MicroserviceDefinition microserviceDefinition) {\n \n   private Microservice createMicroserviceFromDefinition(Configuration configuration) {\n     Microservice microservice = new Microservice();\n-    microservice.setServiceName(configuration.getString(CONFIG_QUALIFIED_MICROSERVICE_NAME_KEY,\n-        DEFAULT_MICROSERVICE_NAME));\n-    microservice.setAppId(configuration.getString(CONFIG_APPLICATION_ID_KEY, DefinitionConst.DEFAULT_APPLICATION_ID));\n-    String version = configuration.getString(CONFIG_QUALIFIED_MICROSERVICE_VERSION_KEY,\n-        DefinitionConst.DEFAULT_MICROSERVICE_VERSION);\n-    // just check version format\n-    new Version(version);\n-    microservice.setVersion(version);\n+\n+    EnvironmentConfiguration envConfig = new EnvironmentConfiguration();\n+    if (!StringUtils.isEmpty(envConfig.getString(APP_MAPPING)) &&\n+        !StringUtils.isEmpty(envConfig.getString(envConfig.getString(APP_MAPPING)))) {\n+      microservice.setAppId(envConfig.getString(envConfig.getString(APP_MAPPING)));\n+    } else {\n+      microservice.setAppId(configuration\n+          .getString(CONFIG_APPLICATION_ID_KEY, DefinitionConst.DEFAULT_APPLICATION_ID));\n+    }\n+    if (!StringUtils.isEmpty(envConfig.getString(SERVICE_MAPPING)) &&\n+        !StringUtils.isEmpty(envConfig.getString(envConfig.getString(SERVICE_MAPPING)))) {\n+      microservice.setServiceName(envConfig.getString(envConfig.getString(SERVICE_MAPPING)));\n+    } else {\n+      microservice.setServiceName(configuration.getString(CONFIG_QUALIFIED_MICROSERVICE_NAME_KEY,\n+          DEFAULT_MICROSERVICE_NAME));\n+    }\n+    if (!StringUtils.isEmpty(envConfig.getString(VERSION_MAPPING)) &&\n+        !StringUtils.isEmpty(envConfig.getString(envConfig.getString(VERSION_MAPPING)))) {\n+      microservice.setVersion(envConfig.getString(envConfig.getString(VERSION_MAPPING)));\n+    } else {\n+      // just check version format\n+      String version = configuration.getString(CONFIG_QUALIFIED_MICROSERVICE_VERSION_KEY,\n+          DefinitionConst.DEFAULT_MICROSERVICE_VERSION);\n+      new Version(version);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMzM4MQ=="}, "originalCommit": {"oid": "a038981fd2ec2b9ff88bb1692bbfd9039b2d8486"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1225, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}