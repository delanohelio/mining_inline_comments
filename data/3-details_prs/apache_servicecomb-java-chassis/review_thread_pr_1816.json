{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NjIzOTI0", "number": 1816, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTozNzoyNVrOEChWPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTozNzoyNVrOEChWPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDc4OTc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/servicecomb/core/filter/impl/ParameterValidatorFilter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTozNzoyNVrOGfBv_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMToyOTowN1rOGfdfTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4NzcwOQ==", "bodyText": "seams no need to add callback. paramValidationEnabled only used in initialization(Filter enable apply to initinization too).", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1816#discussion_r435187709", "createdAt": "2020-06-04T11:37:25Z", "author": {"login": "liubao68"}, "path": "core/src/main/java/org/apache/servicecomb/core/filter/impl/ParameterValidatorFilter.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.core.filter.impl;\n+\n+import static org.apache.servicecomb.swagger.invocation.InvocationType.PRODUCER;\n+\n+import java.lang.reflect.Method;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import javax.validation.Validation;\n+import javax.validation.ValidatorFactory;\n+import javax.validation.executable.ExecutableValidator;\n+import javax.validation.groups.Default;\n+\n+import org.apache.servicecomb.core.Invocation;\n+import org.apache.servicecomb.core.filter.Filter;\n+import org.apache.servicecomb.core.filter.FilterMeta;\n+import org.apache.servicecomb.core.filter.FilterNode;\n+import org.apache.servicecomb.foundation.common.utils.AsyncUtils;\n+import org.apache.servicecomb.swagger.engine.SwaggerProducerOperation;\n+import org.apache.servicecomb.swagger.invocation.Response;\n+import org.hibernate.validator.HibernateValidator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.netflix.config.DynamicBooleanProperty;\n+import com.netflix.config.DynamicPropertyFactory;\n+\n+@FilterMeta(name = \"validator\", invocationType = PRODUCER)\n+public class ParameterValidatorFilter implements Filter {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ParameterValidatorFilter.class);\n+\n+  private static final String PARAM_VALIDATION_ENABLED = \"servicecomb.filters.validator.enabled\";\n+\n+  private ExecutableValidator validator;\n+\n+  private final DynamicBooleanProperty paramValidationEnabled = DynamicPropertyFactory.getInstance()\n+      .getBooleanProperty(PARAM_VALIDATION_ENABLED, false);\n+\n+  public ParameterValidatorFilter() {\n+    paramValidationEnabled\n+        .addCallback(() -> LOGGER.info(\"{} changed to {}\", PARAM_VALIDATION_ENABLED, paramValidationEnabled.get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92eb6612c5253dd71b675173268b2ca37788f45a"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzMDgyNQ==", "bodyText": "ok, only add when necessary", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1816#discussion_r435630825", "createdAt": "2020-06-05T00:40:36Z", "author": {"login": "wujimin"}, "path": "core/src/main/java/org/apache/servicecomb/core/filter/impl/ParameterValidatorFilter.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.core.filter.impl;\n+\n+import static org.apache.servicecomb.swagger.invocation.InvocationType.PRODUCER;\n+\n+import java.lang.reflect.Method;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import javax.validation.Validation;\n+import javax.validation.ValidatorFactory;\n+import javax.validation.executable.ExecutableValidator;\n+import javax.validation.groups.Default;\n+\n+import org.apache.servicecomb.core.Invocation;\n+import org.apache.servicecomb.core.filter.Filter;\n+import org.apache.servicecomb.core.filter.FilterMeta;\n+import org.apache.servicecomb.core.filter.FilterNode;\n+import org.apache.servicecomb.foundation.common.utils.AsyncUtils;\n+import org.apache.servicecomb.swagger.engine.SwaggerProducerOperation;\n+import org.apache.servicecomb.swagger.invocation.Response;\n+import org.hibernate.validator.HibernateValidator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.netflix.config.DynamicBooleanProperty;\n+import com.netflix.config.DynamicPropertyFactory;\n+\n+@FilterMeta(name = \"validator\", invocationType = PRODUCER)\n+public class ParameterValidatorFilter implements Filter {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ParameterValidatorFilter.class);\n+\n+  private static final String PARAM_VALIDATION_ENABLED = \"servicecomb.filters.validator.enabled\";\n+\n+  private ExecutableValidator validator;\n+\n+  private final DynamicBooleanProperty paramValidationEnabled = DynamicPropertyFactory.getInstance()\n+      .getBooleanProperty(PARAM_VALIDATION_ENABLED, false);\n+\n+  public ParameterValidatorFilter() {\n+    paramValidationEnabled\n+        .addCallback(() -> LOGGER.info(\"{} changed to {}\", PARAM_VALIDATION_ENABLED, paramValidationEnabled.get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4NzcwOQ=="}, "originalCommit": {"oid": "92eb6612c5253dd71b675173268b2ca37788f45a"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MjE4OQ==", "bodyText": "done", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1816#discussion_r435642189", "createdAt": "2020-06-05T01:29:07Z", "author": {"login": "wujimin"}, "path": "core/src/main/java/org/apache/servicecomb/core/filter/impl/ParameterValidatorFilter.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicecomb.core.filter.impl;\n+\n+import static org.apache.servicecomb.swagger.invocation.InvocationType.PRODUCER;\n+\n+import java.lang.reflect.Method;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import javax.validation.Validation;\n+import javax.validation.ValidatorFactory;\n+import javax.validation.executable.ExecutableValidator;\n+import javax.validation.groups.Default;\n+\n+import org.apache.servicecomb.core.Invocation;\n+import org.apache.servicecomb.core.filter.Filter;\n+import org.apache.servicecomb.core.filter.FilterMeta;\n+import org.apache.servicecomb.core.filter.FilterNode;\n+import org.apache.servicecomb.foundation.common.utils.AsyncUtils;\n+import org.apache.servicecomb.swagger.engine.SwaggerProducerOperation;\n+import org.apache.servicecomb.swagger.invocation.Response;\n+import org.hibernate.validator.HibernateValidator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.netflix.config.DynamicBooleanProperty;\n+import com.netflix.config.DynamicPropertyFactory;\n+\n+@FilterMeta(name = \"validator\", invocationType = PRODUCER)\n+public class ParameterValidatorFilter implements Filter {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ParameterValidatorFilter.class);\n+\n+  private static final String PARAM_VALIDATION_ENABLED = \"servicecomb.filters.validator.enabled\";\n+\n+  private ExecutableValidator validator;\n+\n+  private final DynamicBooleanProperty paramValidationEnabled = DynamicPropertyFactory.getInstance()\n+      .getBooleanProperty(PARAM_VALIDATION_ENABLED, false);\n+\n+  public ParameterValidatorFilter() {\n+    paramValidationEnabled\n+        .addCallback(() -> LOGGER.info(\"{} changed to {}\", PARAM_VALIDATION_ENABLED, paramValidationEnabled.get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4NzcwOQ=="}, "originalCommit": {"oid": "92eb6612c5253dd71b675173268b2ca37788f45a"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1276, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}