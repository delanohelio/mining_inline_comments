{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMjYxMzAx", "number": 1561, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODozMzowN1rODd8jLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTo0MjoxNlrODfBakw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI3MzQzOnYy", "diffSide": "RIGHT", "path": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/PathProcessorCreator.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODozMzowN1rOFm1kZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMjoyNjowMVrOFnY3UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2Nzg3OA==", "bodyText": "I think this modification is not correct. You can add a test case for HttpUtils, like\n  @Test\n  public void uriEncode_sss() {\n    String encoded = HttpUtils.uriEncodePath(\"a:b\");\n    Assert.assertEquals(\"a:b\", encoded);\n    Assert.assertEquals(\"a:b\", HttpUtils.uriDecodePath(encoded));\n  }\n\n\nAnd make this case pass.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1561#discussion_r376267878", "createdAt": "2020-02-07T08:33:07Z", "author": {"login": "liubao68"}, "path": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/PathProcessorCreator.java", "diffHunk": "@@ -52,6 +54,9 @@ public Object getValue(HttpServletRequest request) {\n       if (value == null) {\n         return null;\n       }\n+      if (value.contains(\":\")) {\n+        return convertValue(URLDecoder.decode(value, \"UTF-8\"), targetType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c1733733facffe4a4c78d0d90e29d4bb43f0ae7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3NTE1Mg==", "bodyText": "I notic there is a case org.apache.servicecomb.foundation.common.http.TestHttpUtils#uriDecode_failed\nto show a error when the param of HttpUtils.uriDecodePath contain \":\".\nI think modify  the HttpUtils.uriDecodePat will change the previous  logic.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1561#discussion_r376275152", "createdAt": "2020-02-07T08:50:50Z", "author": {"login": "GuoYL123"}, "path": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/PathProcessorCreator.java", "diffHunk": "@@ -52,6 +54,9 @@ public Object getValue(HttpServletRequest request) {\n       if (value == null) {\n         return null;\n       }\n+      if (value.contains(\":\")) {\n+        return convertValue(URLDecoder.decode(value, \"UTF-8\"), targetType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2Nzg3OA=="}, "originalCommit": {"oid": "5c1733733facffe4a4c78d0d90e29d4bb43f0ae7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMwMjY5Mg==", "bodyText": "Maybe this test case is not correct. Checked the RFC\n3.3. Path Component\n\n   The path component contains data, specific to the authority (or the\n   scheme if there is no authority component), identifying the resource\n   within the scope of that scheme and authority.\n\n      path          = [ abs_path | opaque_part ]\n\n      path_segments = segment *( \"/\" segment )\n      segment       = *pchar *( \";\" param )\n      param         = *pchar\n\n      pchar         = unreserved | escaped |\n                      \":\" | \"@\" | \"&\" | \"=\" | \"+\" | \"$\" | \",\"\n\n   The path may consist of a sequence of path segments separated by a\n   single slash \"/\" character.  Within a path segment, the characters\n   \"/\", \";\", \"=\", and \"?\" are reserved.  Each path segment may include a\n   sequence of parameters, indicated by the semicolon \";\" character.\n   The parameters are not significant to the parsing of relative\n   references.\n\nyou can also query @wujimin for the reason of the test case.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1561#discussion_r376302692", "createdAt": "2020-02-07T09:51:28Z", "author": {"login": "liubao68"}, "path": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/PathProcessorCreator.java", "diffHunk": "@@ -52,6 +54,9 @@ public Object getValue(HttpServletRequest request) {\n       if (value == null) {\n         return null;\n       }\n+      if (value.contains(\":\")) {\n+        return convertValue(URLDecoder.decode(value, \"UTF-8\"), targetType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2Nzg3OA=="}, "originalCommit": {"oid": "5c1733733facffe4a4c78d0d90e29d4bb43f0ae7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMwNTQzOQ==", "bodyText": "I checked the code again. May be \"encodePathParam\" and \"decodePathParam\" should be used here. You need check details usage of \"uriEncodePath\" and \"uriDecodePath\". They are different.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1561#discussion_r376305439", "createdAt": "2020-02-07T09:57:05Z", "author": {"login": "liubao68"}, "path": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/PathProcessorCreator.java", "diffHunk": "@@ -52,6 +54,9 @@ public Object getValue(HttpServletRequest request) {\n       if (value == null) {\n         return null;\n       }\n+      if (value.contains(\":\")) {\n+        return convertValue(URLDecoder.decode(value, \"UTF-8\"), targetType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2Nzg3OA=="}, "originalCommit": {"oid": "5c1733733facffe4a4c78d0d90e29d4bb43f0ae7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0NjE2MA==", "bodyText": "Add decodePathParam method.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1561#discussion_r376846160", "createdAt": "2020-02-10T02:26:01Z", "author": {"login": "GuoYL123"}, "path": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/PathProcessorCreator.java", "diffHunk": "@@ -52,6 +54,9 @@ public Object getValue(HttpServletRequest request) {\n       if (value == null) {\n         return null;\n       }\n+      if (value.contains(\":\")) {\n+        return convertValue(URLDecoder.decode(value, \"UTF-8\"), targetType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2Nzg3OA=="}, "originalCommit": {"oid": "5c1733733facffe4a4c78d0d90e29d4bb43f0ae7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODU0NDQ4OnYy", "diffSide": "RIGHT", "path": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/PathProcessorCreator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTozNToxOVrOFofHlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDoyNjo1NlrOFohcXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5NzIwNQ==", "bodyText": "remove unused import", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1561#discussion_r377997205", "createdAt": "2020-02-12T01:35:19Z", "author": {"login": "liubao68"}, "path": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/PathProcessorCreator.java", "diffHunk": "@@ -17,7 +17,9 @@\n \n package org.apache.servicecomb.common.rest.codec.param;\n \n+import java.io.UnsupportedEncodingException;\n import java.lang.reflect.Type;\n+import java.net.URLDecoder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdbfc4668ca42addfba988bde611a8efc67d752"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNTI5Mw==", "bodyText": "done", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1561#discussion_r378035293", "createdAt": "2020-02-12T04:26:56Z", "author": {"login": "GuoYL123"}, "path": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/PathProcessorCreator.java", "diffHunk": "@@ -17,7 +17,9 @@\n \n package org.apache.servicecomb.common.rest.codec.param;\n \n+import java.io.UnsupportedEncodingException;\n import java.lang.reflect.Type;\n+import java.net.URLDecoder;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5NzIwNQ=="}, "originalCommit": {"oid": "bcdbfc4668ca42addfba988bde611a8efc67d752"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODU1NDQyOnYy", "diffSide": "RIGHT", "path": "foundations/foundation-common/src/main/java/org/apache/servicecomb/foundation/common/http/HttpUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTo0MTowMVrOFofNhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDoyMjoyNlrOFohY_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5ODcyNg==", "bodyText": "Is  URLDecoder.decode(pathParam, \"UTF-8\"); is enough?  I think it is enough to use URLEncoder and URLDecoder to encode/decode path segments, and use URI to encode/decode path.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1561#discussion_r377998726", "createdAt": "2020-02-12T01:41:01Z", "author": {"login": "liubao68"}, "path": "foundations/foundation-common/src/main/java/org/apache/servicecomb/foundation/common/http/HttpUtils.java", "diffHunk": "@@ -94,6 +97,14 @@ public static String encodePathParam(String pathParam) {\n     return UrlEscapers.urlPathSegmentEscaper().escape(pathParam);\n   }\n \n+  public static String decodePathParam(String pathParam) throws UnsupportedEncodingException {\n+    String res = uriDecodePath(pathParam);\n+    if (StringUtils.isEmpty(res)) {\n+      return URLDecoder.decode(pathParam, \"UTF-8\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdbfc4668ca42addfba988bde611a8efc67d752"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNDQyOA==", "bodyText": "URLDecoder.decode(pathParam, \"UTF-8\")  can not handle the '+' .\nthere is a ut show that : org.apache.servicecomb.common.rest.codec.param.TestPathProcessor#testGetPlus.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1561#discussion_r378034428", "createdAt": "2020-02-12T04:22:26Z", "author": {"login": "GuoYL123"}, "path": "foundations/foundation-common/src/main/java/org/apache/servicecomb/foundation/common/http/HttpUtils.java", "diffHunk": "@@ -94,6 +97,14 @@ public static String encodePathParam(String pathParam) {\n     return UrlEscapers.urlPathSegmentEscaper().escape(pathParam);\n   }\n \n+  public static String decodePathParam(String pathParam) throws UnsupportedEncodingException {\n+    String res = uriDecodePath(pathParam);\n+    if (StringUtils.isEmpty(res)) {\n+      return URLDecoder.decode(pathParam, \"UTF-8\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5ODcyNg=="}, "originalCommit": {"oid": "bcdbfc4668ca42addfba988bde611a8efc67d752"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODU1NjM1OnYy", "diffSide": "RIGHT", "path": "foundations/foundation-common/src/main/java/org/apache/servicecomb/foundation/common/http/HttpUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTo0MjoxNlrOFofOuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDoyNTo1MFrOFohbfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5OTAzMw==", "bodyText": "This function seems not correct. According to the java docs, URL(path) will not parse the path, users should use\nnew URI(null, null, path, null); to parse the parse", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1561#discussion_r377999033", "createdAt": "2020-02-12T01:42:16Z", "author": {"login": "liubao68"}, "path": "foundations/foundation-common/src/main/java/org/apache/servicecomb/foundation/common/http/HttpUtils.java", "diffHunk": "@@ -94,6 +97,14 @@ public static String encodePathParam(String pathParam) {\n     return UrlEscapers.urlPathSegmentEscaper().escape(pathParam);\n   }\n \n+  public static String decodePathParam(String pathParam) throws UnsupportedEncodingException {\n+    String res = uriDecodePath(pathParam);\n+    if (StringUtils.isEmpty(res)) {\n+      return URLDecoder.decode(pathParam, \"UTF-8\");\n+    }\n+    return res;\n+  }\n+\n   public static String uriDecodePath(String path) {\n     if (path == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdbfc4668ca42addfba988bde611a8efc67d752"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNTA2OA==", "bodyText": "use new URI(null, null, path, null); will cause ut failed:\norg.apache.servicecomb.common.rest.codec.param.TestPathProcessor#testGetSpaceEncoded\nnew URI(null, null, path, null); can not convert '%20' to ' '", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1561#discussion_r378035068", "createdAt": "2020-02-12T04:25:50Z", "author": {"login": "GuoYL123"}, "path": "foundations/foundation-common/src/main/java/org/apache/servicecomb/foundation/common/http/HttpUtils.java", "diffHunk": "@@ -94,6 +97,14 @@ public static String encodePathParam(String pathParam) {\n     return UrlEscapers.urlPathSegmentEscaper().escape(pathParam);\n   }\n \n+  public static String decodePathParam(String pathParam) throws UnsupportedEncodingException {\n+    String res = uriDecodePath(pathParam);\n+    if (StringUtils.isEmpty(res)) {\n+      return URLDecoder.decode(pathParam, \"UTF-8\");\n+    }\n+    return res;\n+  }\n+\n   public static String uriDecodePath(String path) {\n     if (path == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5OTAzMw=="}, "originalCommit": {"oid": "bcdbfc4668ca42addfba988bde611a8efc67d752"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1305, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}