{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MTMyNzYz", "number": 1936, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzowMzoyMlrOEfLLGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNDowNDowN1rOEfNFxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTI0Mzc2OnYy", "diffSide": "RIGHT", "path": "handlers/handler-loadbalance/src/main/java/org/apache/servicecomb/loadbalance/ServiceCombServerStats.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzowMzoyMlrOHLRyyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODoxOTozMFrOHLjThA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU4NzkxMw==", "bodyText": "lock is never read", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1936#discussion_r481587913", "createdAt": "2020-09-02T03:03:22Z", "author": {"login": "liubao68"}, "path": "handlers/handler-loadbalance/src/main/java/org/apache/servicecomb/loadbalance/ServiceCombServerStats.java", "diffHunk": "@@ -35,15 +36,14 @@\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(ServiceCombServerStats.class);\n \n+  private final Object lock = new Object();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7ab067dda21cbb6027c57fdd5bc33ee2a54e1d5"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg3NDgyMA==", "bodyText": "The lock is used in method ensureWindow. It does not get involved in this issue.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1936#discussion_r481874820", "createdAt": "2020-09-02T08:19:30Z", "author": {"login": "yhs0092"}, "path": "handlers/handler-loadbalance/src/main/java/org/apache/servicecomb/loadbalance/ServiceCombServerStats.java", "diffHunk": "@@ -35,15 +36,14 @@\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(ServiceCombServerStats.class);\n \n+  private final Object lock = new Object();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU4NzkxMw=="}, "originalCommit": {"oid": "f7ab067dda21cbb6027c57fdd5bc33ee2a54e1d5"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTU1NzgzOnYy", "diffSide": "RIGHT", "path": "handlers/handler-loadbalance/src/main/java/org/apache/servicecomb/loadbalance/ServiceCombServerStats.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNDowNDowN1rOHLU_ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODoyMDozOVrOHLjXvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY0MDI5OA==", "bodyText": "This method is not thread safe.", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1936#discussion_r481640298", "createdAt": "2020-09-02T04:04:07Z", "author": {"login": "liubao68"}, "path": "handlers/handler-loadbalance/src/main/java/org/apache/servicecomb/loadbalance/ServiceCombServerStats.java", "diffHunk": "@@ -84,20 +84,35 @@ private void init(){\n   }\n \n   public static boolean isolatedServerCanTry() {\n-    return globalAllowIsolatedServerTryingFlag.get();\n+    TryingIsolatedServerMarker marker = globalAllowIsolatedServerTryingFlag.get();\n+    if (marker == null) {\n+      return true;\n+    }\n+    return marker.isOutdated();\n   }\n \n   /**\n    * Applying for a trying chance for the isolated server. There is only 1 trying chance globally concurrently.\n    *\n    * @return true if the chance is applied successfully, otherwise false\n    */\n-  public static boolean applyForTryingChance() {\n-    return isolatedServerCanTry() && globalAllowIsolatedServerTryingFlag.compareAndSet(true, false);\n+  public static boolean applyForTryingChance(Invocation invocation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7ab067dda21cbb6027c57fdd5bc33ee2a54e1d5"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg3NTkwMA==", "bodyText": "The thread safty is ensured by the CAS operation AtomicReference#compareAndSet", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1936#discussion_r481875900", "createdAt": "2020-09-02T08:20:39Z", "author": {"login": "yhs0092"}, "path": "handlers/handler-loadbalance/src/main/java/org/apache/servicecomb/loadbalance/ServiceCombServerStats.java", "diffHunk": "@@ -84,20 +84,35 @@ private void init(){\n   }\n \n   public static boolean isolatedServerCanTry() {\n-    return globalAllowIsolatedServerTryingFlag.get();\n+    TryingIsolatedServerMarker marker = globalAllowIsolatedServerTryingFlag.get();\n+    if (marker == null) {\n+      return true;\n+    }\n+    return marker.isOutdated();\n   }\n \n   /**\n    * Applying for a trying chance for the isolated server. There is only 1 trying chance globally concurrently.\n    *\n    * @return true if the chance is applied successfully, otherwise false\n    */\n-  public static boolean applyForTryingChance() {\n-    return isolatedServerCanTry() && globalAllowIsolatedServerTryingFlag.compareAndSet(true, false);\n+  public static boolean applyForTryingChance(Invocation invocation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY0MDI5OA=="}, "originalCommit": {"oid": "f7ab067dda21cbb6027c57fdd5bc33ee2a54e1d5"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1231, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}