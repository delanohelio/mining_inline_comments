{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2ODgyODkx", "number": 7949, "title": "ConfigRepo branching and PR support", "bodyText": "This PR encompasses the server-side changes required for branching support.\nContext\nThe majority of work to support PR/branch support in config repos will be implemented on the plugin-side. Conceptually, a plugin will know how to fetch branches or any other ref (e.g., GitHub PRs) and filter them against a pattern. Combined with template interpolation capabilities, a config repo can render individual pipelines per matching ref, and return the final config to the GoCD server to merge into the active configuration. Initially, we've decided to only apply this this git and hosted git providers (GitHub, BitBucket, etc). That is not to say it couldn't or shouldn't work for other SCMs.\nOn a similar note, the only plugin that will support this is the groovy plugin as it can render templates by its intrinsic nature. Support in YAML and JSON plugins may appear later once we prove this works well.\nWhat this PR introduces\n\n We now parse-directory every time we poll the config repo material, rather than only when we detect a new commit; new refs may have been introduced on the repo, even if no new commits happened on the branch that is watched by the material.\n Support user-defined properties on a config repo by adding a UI frontend to allow arbitrary and easy creation of plaintext and encrypted properties; a developer will be able to look up/dereference these values from within the config definition file. A common use case would be to inject API keys/secrets into the config to support polling PR information from a provider like GitHub.\n Error handling for freeform user-defined properties\n Separate section/component to display user-defined properties in the collapsible details\n Add a capabilities key to indicate support for user-defined properties lookup and interpolation; with this, we should only display the UI for defining properties if the plugin supports it\n\nRelated (will probably implement as separate PRs)\n\n Modify git clone and checkout to fetch arbitrary refs, including those that do not fit refs/{heads,tags}/*, such as GitHub pull requests (which arerefs/pull/*/head)\n Webhook support to control PR polling\n Ref/Branch caching mechanism on the plugin side, in combination with the aforementioned webhook to prevent GoCD from polling APIs or reaching out to remote repos too often\n\nMiscellany\nOne of the weird implementation details introduced here is the output of a configuration property view model. The view model in and of itself is not what is weird; what is weird is that the input to the view model is a Configuration instance, but the output is a plain JS object that is interface-compatible and is a direct representation of the resulting JSON. The reason for this is a bit hard to explain but ultimately has to do with the fact that the state tracked by the view model isn't completely mappable back to a Configuration instance.\nI plan to fix this in a future PR that refactors Configuration into a true Validatable instance. I chose not to touch it right now because it's a widely used object and this PR already has a lot of changes. Theoretically, this work will simplify validation, error handling, and this view model once I get to it.\nIf anyone thinks otherwise that I should introduce these changes alongside this PR, leave a comment and we can discuss it.\nTODO (separate PR):\n\n Make Configuration and Configurations actual Validatable types\n\nRunning this code yourself\nThis code makes use of config_repos API v4, which (at the time of writing) is behind a route toggle. Add this toggle to your go.feature.toggles (sorry, you must restart GoCD and you cannot use the toggle API for this):\n{\n  \"version\": \"1\",\n  \"toggles\": [\n    {\n      \"key\": \"config_repo_v4\",\n      \"value\": true\n    }\n  ]\n}\nWhat it looks like\nModal entry\n\nView in collapsible panel\n\nUsage in config file\nThe idea is to define these, and then be able to lookup() in the config file:\nGoCD.script { script ->\n\n  branches {\n    matching {\n      pattern = ~/^refs\\/pull\\/.+/\n\n      githubProvider {\n        repo = \"marques-work/sample-node\"\n        authToken = lookup(\"secret\") // <-- user-defined encrypted property\n      }\n\n      each { ctx ->\n        script.pipelines {\n          pipeline(\"pr-${ctx.branchSanitized}\") {\n            materials { add(ctx.repo) }\n            stages {\n              stage('tests') {\n                jobs {\n                  job('units') {\n                    tasks { bash { commandString = 'whoami' } }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } \n}\nNote for Reviewers\nSorry about the size of this PR (again). I try to make a cohesive narrative by keeping everything related together.\nIt may be helpful to go through the commits individually. I've tried to provide context and detail in each commit to maintain a cohesive narrative through code, comments, and commit messages.", "createdAt": "2020-04-01T09:46:14Z", "url": "https://github.com/gocd/gocd/pull/7949", "merged": true, "mergeCommit": {"oid": "74bc4d0d0214bdf5199c0a52aa326247a68e7f6b"}, "closed": true, "closedAt": "2020-05-14T14:42:50Z", "author": {"login": "marques-work"}, "timelineItems": {"totalCount": 54, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcT6fx9gBqjMxOTQ5NTY2NzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchc5PlgFqTQxMjQwNjk5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6e47b8027d34bc9ab41cf35b40507b1939452a0", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/c6e47b8027d34bc9ab41cf35b40507b1939452a0", "committedDate": "2020-04-02T06:12:07Z", "message": "wip2"}, "afterCommit": {"oid": "e469396e17cbc947ef929c39aa75933a25da014f", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/e469396e17cbc947ef929c39aa75933a25da014f", "committedDate": "2020-04-03T05:59:23Z", "message": "wip"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e469396e17cbc947ef929c39aa75933a25da014f", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/e469396e17cbc947ef929c39aa75933a25da014f", "committedDate": "2020-04-03T05:59:23Z", "message": "wip"}, "afterCommit": {"oid": "5b788697616a4790d921f79238291971704dbb67", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/5b788697616a4790d921f79238291971704dbb67", "committedDate": "2020-04-03T06:12:49Z", "message": "wip"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b788697616a4790d921f79238291971704dbb67", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/5b788697616a4790d921f79238291971704dbb67", "committedDate": "2020-04-03T06:12:49Z", "message": "wip"}, "afterCommit": {"oid": "3532b5ccdb9b6e18727758d4b6c7f4895bf12593", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/3532b5ccdb9b6e18727758d4b6c7f4895bf12593", "committedDate": "2020-04-03T06:17:55Z", "message": "wip"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3532b5ccdb9b6e18727758d4b6c7f4895bf12593", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/3532b5ccdb9b6e18727758d4b6c7f4895bf12593", "committedDate": "2020-04-03T06:17:55Z", "message": "wip"}, "afterCommit": {"oid": "fe27a14e0863363d4edf2664402638fd2e4961cf", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/fe27a14e0863363d4edf2664402638fd2e4961cf", "committedDate": "2020-04-03T06:34:10Z", "message": "wip"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72109005ba4be1b2e01a47d70184a3fb1c0d9317", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/72109005ba4be1b2e01a47d70184a3fb1c0d9317", "committedDate": "2020-04-03T07:48:10Z", "message": "moar."}, "afterCommit": {"oid": "bf7fcf71e1e013ce38feb16d4ea6554744ad310d", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/bf7fcf71e1e013ce38feb16d4ea6554744ad310d", "committedDate": "2020-04-03T20:05:34Z", "message": "moar."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf7fcf71e1e013ce38feb16d4ea6554744ad310d", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/bf7fcf71e1e013ce38feb16d4ea6554744ad310d", "committedDate": "2020-04-03T20:05:34Z", "message": "moar."}, "afterCommit": {"oid": "8372bf71bb9ed54eec1cfc9974513a85df404c33", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/8372bf71bb9ed54eec1cfc9974513a85df404c33", "committedDate": "2020-04-03T22:34:55Z", "message": "moar."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8372bf71bb9ed54eec1cfc9974513a85df404c33", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/8372bf71bb9ed54eec1cfc9974513a85df404c33", "committedDate": "2020-04-03T22:34:55Z", "message": "moar."}, "afterCommit": {"oid": "70b80e7183dca69d8fc0d3c6a282029f9c3caf95", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/70b80e7183dca69d8fc0d3c6a282029f9c3caf95", "committedDate": "2020-04-03T23:00:11Z", "message": "ConfigRepo modals annotate the existing repo model with errors rather than replacing the repo model\n\n  - `consumeErrorResponse()` knows how to automatically assign errors to respective fields.\n  - Replacing the repo model can have unwanted side effects in that the replaced repo model\n    instance may no longer be in sync with the UI.\n    - This is particularly problematic when a view model for a complex interaction needs to\n      bind to data in the backing model, as will be the case with user-defined config properties.\n      Unless the view model knows to rebind to a replaced model, the user will no longer be\n      able to correct any problems reported by the server since the data binding would be stale.\n    - Moreover, with such user-defined properties, the answer back from the server may have\n      transformed the data (e.g., encrypting secret properties), in which case changing the\n      shape of the data would result in strange/confusing UI behaviors on error even if the\n      new data was rebinded.\n    - In short, keeping the original model rather than replacing avoids all these pitfalls."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74500368de3010de721d1935f0f6faca3de19232", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/74500368de3010de721d1935f0f6faca3de19232", "committedDate": "2020-04-04T05:18:54Z", "message": "squashme java"}, "afterCommit": {"oid": "b10506d716297aa03cd33ae4ed6e370bbf0defff", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/b10506d716297aa03cd33ae4ed6e370bbf0defff", "committedDate": "2020-04-04T05:19:49Z", "message": "working, now with error binding"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b10506d716297aa03cd33ae4ed6e370bbf0defff", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/b10506d716297aa03cd33ae4ed6e370bbf0defff", "committedDate": "2020-04-04T05:19:49Z", "message": "working, now with error binding"}, "afterCommit": {"oid": "ac5e58785c4bc3ce3c3a5b56a4a7e84bb01bddf5", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/ac5e58785c4bc3ce3c3a5b56a4a7e84bb01bddf5", "committedDate": "2020-04-04T08:38:27Z", "message": "working, now with error binding"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac5e58785c4bc3ce3c3a5b56a4a7e84bb01bddf5", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/ac5e58785c4bc3ce3c3a5b56a4a7e84bb01bddf5", "committedDate": "2020-04-04T08:38:27Z", "message": "working, now with error binding"}, "afterCommit": {"oid": "750ed22e6140b7096d2d02298878948a72155ee9", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/750ed22e6140b7096d2d02298878948a72155ee9", "committedDate": "2020-04-04T10:04:43Z", "message": "error handling and such"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "750ed22e6140b7096d2d02298878948a72155ee9", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/750ed22e6140b7096d2d02298878948a72155ee9", "committedDate": "2020-04-04T10:04:43Z", "message": "error handling and such"}, "afterCommit": {"oid": "7cfe1aa8cb61bbd1bf79a59d77a9056a9ee810e0", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/7cfe1aa8cb61bbd1bf79a59d77a9056a9ee810e0", "committedDate": "2020-04-07T08:35:23Z", "message": "error handling and such"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7cfe1aa8cb61bbd1bf79a59d77a9056a9ee810e0", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/7cfe1aa8cb61bbd1bf79a59d77a9056a9ee810e0", "committedDate": "2020-04-07T08:35:23Z", "message": "error handling and such"}, "afterCommit": {"oid": "21274c0e08fc2db886da04ffa22b42434d6cbf11", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/21274c0e08fc2db886da04ffa22b42434d6cbf11", "committedDate": "2020-04-07T09:16:46Z", "message": "error handling and such"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21274c0e08fc2db886da04ffa22b42434d6cbf11", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/21274c0e08fc2db886da04ffa22b42434d6cbf11", "committedDate": "2020-04-07T09:16:46Z", "message": "error handling and such"}, "afterCommit": {"oid": "7b9570c3a38d873cf9526b2f93c375ec9869c5cf", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/7b9570c3a38d873cf9526b2f93c375ec9869c5cf", "committedDate": "2020-04-07T22:37:05Z", "message": "error handling and such"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a859f64c957be30ad1557a8433f7281e17715565", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/a859f64c957be30ad1557a8433f7281e17715565", "committedDate": "2020-04-08T02:22:29Z", "message": "wip"}, "afterCommit": {"oid": "596404d4c68c52d7b7262f61264ef2cee8feb693", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/596404d4c68c52d7b7262f61264ef2cee8feb693", "committedDate": "2020-04-08T02:42:34Z", "message": "wip"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "596404d4c68c52d7b7262f61264ef2cee8feb693", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/596404d4c68c52d7b7262f61264ef2cee8feb693", "committedDate": "2020-04-08T02:42:34Z", "message": "wip"}, "afterCommit": {"oid": "2841370d962cfca9577b4e8f64eb3453509a02f4", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/2841370d962cfca9577b4e8f64eb3453509a02f4", "committedDate": "2020-04-09T07:03:57Z", "message": "writeback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2841370d962cfca9577b4e8f64eb3453509a02f4", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/2841370d962cfca9577b4e8f64eb3453509a02f4", "committedDate": "2020-04-09T07:03:57Z", "message": "writeback"}, "afterCommit": {"oid": "81b49f94a2d7ab30c4ae51d4999f1e23a6f69fb1", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/81b49f94a2d7ab30c4ae51d4999f1e23a6f69fb1", "committedDate": "2020-04-13T06:58:46Z", "message": "writeback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81b49f94a2d7ab30c4ae51d4999f1e23a6f69fb1", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/81b49f94a2d7ab30c4ae51d4999f1e23a6f69fb1", "committedDate": "2020-04-13T06:58:46Z", "message": "writeback"}, "afterCommit": {"oid": "355fd2870aa86344c72ffef1eeb604b4e535a518", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/355fd2870aa86344c72ffef1eeb604b4e535a518", "committedDate": "2020-04-13T08:10:00Z", "message": "writeback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "355fd2870aa86344c72ffef1eeb604b4e535a518", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/355fd2870aa86344c72ffef1eeb604b4e535a518", "committedDate": "2020-04-13T08:10:00Z", "message": "writeback"}, "afterCommit": {"oid": "653171479c87c872cffc5b7f186fd84c1c41a53c", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/653171479c87c872cffc5b7f186fd84c1c41a53c", "committedDate": "2020-04-13T10:11:35Z", "message": "writeback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "653171479c87c872cffc5b7f186fd84c1c41a53c", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/653171479c87c872cffc5b7f186fd84c1c41a53c", "committedDate": "2020-04-13T10:11:35Z", "message": "writeback"}, "afterCommit": {"oid": "5f6b4dc846e168154ba2ca253d8348c597c0de39", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/5f6b4dc846e168154ba2ca253d8348c597c0de39", "committedDate": "2020-04-15T22:06:15Z", "message": "writeback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f6b4dc846e168154ba2ca253d8348c597c0de39", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/5f6b4dc846e168154ba2ca253d8348c597c0de39", "committedDate": "2020-04-15T22:06:15Z", "message": "writeback"}, "afterCommit": {"oid": "035e814666d4076480167add0a8cbf67c634c7f6", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/035e814666d4076480167add0a8cbf67c634c7f6", "committedDate": "2020-04-15T22:07:42Z", "message": "writeback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "035e814666d4076480167add0a8cbf67c634c7f6", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/035e814666d4076480167add0a8cbf67c634c7f6", "committedDate": "2020-04-15T22:07:42Z", "message": "writeback"}, "afterCommit": {"oid": "82a5403519163a5b651c60bb3c84ef52436dee4c", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/82a5403519163a5b651c60bb3c84ef52436dee4c", "committedDate": "2020-04-16T11:14:12Z", "message": "error consumer uses accessor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82a5403519163a5b651c60bb3c84ef52436dee4c", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/82a5403519163a5b651c60bb3c84ef52436dee4c", "committedDate": "2020-04-16T11:14:12Z", "message": "error consumer uses accessor"}, "afterCommit": {"oid": "79fc799a843471d63c3dc3b6e1d08cbe0f882095", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/79fc799a843471d63c3dc3b6e1d08cbe0f882095", "committedDate": "2020-04-17T01:29:51Z", "message": "error consumer uses accessor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79fc799a843471d63c3dc3b6e1d08cbe0f882095", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/79fc799a843471d63c3dc3b6e1d08cbe0f882095", "committedDate": "2020-04-17T01:29:51Z", "message": "error consumer uses accessor"}, "afterCommit": {"oid": "7b7e5a40b70305c740b226aa1b395283dd0e690a", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/7b7e5a40b70305c740b226aa1b395283dd0e690a", "committedDate": "2020-04-17T01:28:21Z", "message": "Basic styling for the `<KeyValueEditor/>`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTE5ODI1", "url": "https://github.com/gocd/gocd/pull/7949#pullrequestreview-395119825", "createdAt": "2020-04-17T02:24:36Z", "commit": {"oid": "7b7e5a40b70305c740b226aa1b395283dd0e690a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjoyNDozN1rOGG9rQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjoyNDozN1rOGG9rQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1NTEzOQ==", "bodyText": "This should be inexpensive for repos that do not take advantage of branch support.\nFor repos that do use branch support, it is up to the plugin to provide some caching of references so as not to pommel the remote repo or API.", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r409955139", "createdAt": "2020-04-17T02:24:37Z", "author": {"login": "marques-work"}, "path": "server/src/main/java/com/thoughtworks/go/server/materials/ConfigMaterialUpdateListener.java", "diffHunk": "@@ -73,18 +69,19 @@ public void onMessage(MaterialUpdateCompletedMessage message) {\n                 MaterialRevisions latestModification = materialRepository.findLatestModification(material);\n                 Modification modification = latestModification.firstModifiedMaterialRevision().getLatestModification();\n \n-                MaterialRevision lastParseRevision = getMaterialRevisionAtLastParseAttempt(message);\n-                if (lastParseRevision == null) {\n-                    //never parsed\n-                    updateConfigurationFromCheckout(folder, modification, material);\n-                } else if (latestModification.findRevisionFor(material.config()).hasChangedSince(lastParseRevision) ||\n-                        this.repoConfigDataSource.hasConfigRepoConfigChangedSinceLastUpdate(material.config())) {\n-                    // revision has changed. the config files might have been updated\n-                    updateConfigurationFromCheckout(folder, modification, material);\n-                } else {\n-                    // revision is the same as last time, no need to parse again\n-                    LOGGER.debug(\"[Config Material Update] Skipping parsing of Config material {} since material has no change since last parse.\", material);\n-                }\n+                // Previously, we only forced a parse when the repo had never been parsed before and if a new revision\n+                // was pushed to the material; if no new revisions existed, we did a no-op.\n+                //\n+                // Now, we need to reparse every time to support ref/branch scanning; even if there are no changes to\n+                // the current material, new branches/refs could have been created that might change the output of\n+                // templated config repo definitions that use this feature.\n+                //\n+                // In theory, this should be inexpensive, as the working copies of materials are cached on disk. This\n+                // will cause more frequent `parse-directory` messages, however. Generally (crosses fingers), evaluating\n+                // this is fast, but we may need to consider only merging into the main config if different?\n+                //\n+                // Open to any better ideas :).\n+                updateConfigurationFromCheckout(folder, modification, material);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b7e5a40b70305c740b226aa1b395283dd0e690a"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTIxMjcx", "url": "https://github.com/gocd/gocd/pull/7949#pullrequestreview-395121271", "createdAt": "2020-04-17T02:29:42Z", "commit": {"oid": "7b7e5a40b70305c740b226aa1b395283dd0e690a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjoyOTo0M1rOGG9wcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjoyOTo0M1rOGG9wcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1NjQ2NQ==", "bodyText": "You might be thinking at this point, \"Why not use a Stream?\"\nThere is an edge case where one may find this useful (look at the configuration properties mixin): The Accessor<T> may do some magical abstraction when setting a value (in a way that is not supported via Stream.map() or Stream.combine(), but you still want the getter result to serialize.\nThis should be a rare case, admittedly, but it can be useful. This function is idempotent.", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r409956465", "createdAt": "2020-04-17T02:29:43Z", "author": {"login": "marques-work"}, "path": "server/src/main/webapp/WEB-INF/rails/webpack/models/base/accessor.ts", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/** An interface similar to, but more generic than, {@link Stream} that is both getter and setter */\n+export type Accessor<T> = (val?: T) => T;\n+\n+/** An {@link Accessor} that also serializes like {@link Stream} does */\n+export interface SerializableAccessor<T> extends Accessor<T> {\n+  toJSON(): any;\n+}\n+\n+/** Higher order function to convert an {@link Accessor} into a {@link SerializableAccessor} by ensuring a `toJSON()` */\n+export function serializing<T>(fn: Accessor<T>, thisArg?: any): SerializableAccessor<T> {\n+  const f = ((arguments.length > 1) ? fn.bind(thisArg) : fn) as any;\n+  if (\"function\" !== typeof f.toJSON) {\n+    f.toJSON = () => f();\n+  }\n+  return f;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b7e5a40b70305c740b226aa1b395283dd0e690a"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTIyMjY2", "url": "https://github.com/gocd/gocd/pull/7949#pullrequestreview-395122266", "createdAt": "2020-04-17T02:33:04Z", "commit": {"oid": "7b7e5a40b70305c740b226aa1b395283dd0e690a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjozMzowNFrOGG90Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjozMzowNFrOGG90Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1NzM4Ng==", "bodyText": "Great for when you want a storage/retrieval function that is Stream-like without having to litter your code with __varname members to make sure it is excluded from serialization.", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r409957386", "createdAt": "2020-04-17T02:33:04Z", "author": {"login": "marques-work"}, "path": "server/src/main/webapp/WEB-INF/rails/webpack/models/base/accessor.ts", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/** An interface similar to, but more generic than, {@link Stream} that is both getter and setter */\n+export type Accessor<T> = (val?: T) => T;\n+\n+/** An {@link Accessor} that also serializes like {@link Stream} does */\n+export interface SerializableAccessor<T> extends Accessor<T> {\n+  toJSON(): any;\n+}\n+\n+/** Higher order function to convert an {@link Accessor} into a {@link SerializableAccessor} by ensuring a `toJSON()` */\n+export function serializing<T>(fn: Accessor<T>, thisArg?: any): SerializableAccessor<T> {\n+  const f = ((arguments.length > 1) ? fn.bind(thisArg) : fn) as any;\n+  if (\"function\" !== typeof f.toJSON) {\n+    f.toJSON = () => f();\n+  }\n+  return f;\n+}\n+\n+/**\n+ * Returns a very simple {@link Accessor}; sometimes you want something even simpler than\n+ * a {@link Stream}. This will not serialize by default. This is sort of a \"Stream-lite\".\n+ */\n+export function basicAccessor<T>(initial?: T): Accessor<T> {\n+  let value: T;\n+\n+  if (arguments.length) {\n+    value = initial!;\n+  }\n+\n+  return function accessor(v?: T): T {\n+    if (arguments.length) {\n+      value = v!;\n+    }\n+    return value;\n+  };\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b7e5a40b70305c740b226aa1b395283dd0e690a"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTI0NDI1", "url": "https://github.com/gocd/gocd/pull/7949#pullrequestreview-395124425", "createdAt": "2020-04-17T02:40:09Z", "commit": {"oid": "7b7e5a40b70305c740b226aa1b395283dd0e690a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjo0MDowOVrOGG98Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjo0MDowOVrOGG98Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1OTQ1MQ==", "bodyText": "Changed these types here to satisfy the types in the widget that imports this.", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r409959451", "createdAt": "2020-04-17T02:40:09Z", "author": {"login": "marques-work"}, "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/components/rules/configure_rules_widget.tsx", "diffHunk": "@@ -45,7 +46,7 @@ export let RuleActions = {\n export type RuleInfos = RuleInfo[];\n \n interface Attrs {\n-  rules: Stream<Rules>;\n+  rules: Accessor<Rules>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b7e5a40b70305c740b226aa1b395283dd0e690a"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTI0Njgx", "url": "https://github.com/gocd/gocd/pull/7949#pullrequestreview-395124681", "createdAt": "2020-04-17T02:41:07Z", "commit": {"oid": "7b7e5a40b70305c740b226aa1b395283dd0e690a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjo0MTowOFrOGG99Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjo0MTowOFrOGG99Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1OTcwMg==", "bodyText": "No functional changes here, just tidying the subsequent code to make it a little more readable with less vnode.attrs noise.", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r409959702", "createdAt": "2020-04-17T02:41:08Z", "author": {"login": "marques-work"}, "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/pages/config_repos/modals.tsx", "diffHunk": "@@ -39,18 +43,21 @@ import materialStyles from \"./materials.scss\";\n \n type EditableMaterial = SaveOperation\n   & { repo: ConfigRepo }\n+  & { userProps: EntriesVM }\n   & { isNew: boolean }\n   & RequiresPluginInfos\n   & { error?: m.Children }\n   & { resourceAutocompleteHelper: Map<string, string[]> };\n \n class MaterialEditWidget extends MithrilViewComponent<EditableMaterial> {\n   view(vnode: m.Vnode<EditableMaterial>) {\n-    const pluginList = _.map(vnode.attrs.pluginInfos(), (pluginInfo: PluginInfo) => {\n+    const { repo, userProps, isNew, error, pluginInfos, resourceAutocompleteHelper } = vnode.attrs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b7e5a40b70305c740b226aa1b395283dd0e690a"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b7e5a40b70305c740b226aa1b395283dd0e690a", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/7b7e5a40b70305c740b226aa1b395283dd0e690a", "committedDate": "2020-04-17T01:28:21Z", "message": "Basic styling for the `<KeyValueEditor/>`"}, "afterCommit": {"oid": "f6114db56785f961dd8c08a4b345d53aaa1de16f", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/f6114db56785f961dd8c08a4b345d53aaa1de16f", "committedDate": "2020-04-17T02:50:30Z", "message": "Basic styling for the `<KeyValueEditor/>`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2588c366a22307656e371c98b5408afc4fede502", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/2588c366a22307656e371c98b5408afc4fede502", "committedDate": "2020-04-17T04:11:11Z", "message": "Add section for user-defined properties in the config repo details collapsible panel"}, "afterCommit": {"oid": "26e7ac39b4465a79ad509bb8617975b4841045e3", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/26e7ac39b4465a79ad509bb8617975b4841045e3", "committedDate": "2020-04-17T04:38:06Z", "message": "Add section for user-defined properties in the config repo details collapsible panel"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6d83263514e954f1526fe6e5618191266a5dede", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/c6d83263514e954f1526fe6e5618191266a5dede", "committedDate": "2020-04-20T03:05:23Z", "message": "Document `PropertyJSON` vs `PropertyLike` interfaces"}, "afterCommit": {"oid": "9ab928fdf71f26ecc4d50bc0e5d7b724e2b62de4", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/9ab928fdf71f26ecc4d50bc0e5d7b724e2b62de4", "committedDate": "2020-04-20T03:08:05Z", "message": "Add section for user-defined properties in the config repo details collapsible panel"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ab928fdf71f26ecc4d50bc0e5d7b724e2b62de4", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/9ab928fdf71f26ecc4d50bc0e5d7b724e2b62de4", "committedDate": "2020-04-20T03:08:05Z", "message": "Add section for user-defined properties in the config repo details collapsible panel"}, "afterCommit": {"oid": "f3c165b050f5c22e7461b7aac738ad34f0b736a0", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/f3c165b050f5c22e7461b7aac738ad34f0b736a0", "committedDate": "2020-04-20T04:33:12Z", "message": "Add section for user-defined properties in the config repo details collapsible panel"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3c165b050f5c22e7461b7aac738ad34f0b736a0", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/f3c165b050f5c22e7461b7aac738ad34f0b736a0", "committedDate": "2020-04-20T04:33:12Z", "message": "Add section for user-defined properties in the config repo details collapsible panel"}, "afterCommit": {"oid": "89a9000989f7af8faf9867cecda8d05c9ecb81ea", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/89a9000989f7af8faf9867cecda8d05c9ecb81ea", "committedDate": "2020-04-20T19:03:48Z", "message": "Add section for user-defined properties in the config repo details collapsible panel"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89a9000989f7af8faf9867cecda8d05c9ecb81ea", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/89a9000989f7af8faf9867cecda8d05c9ecb81ea", "committedDate": "2020-04-20T19:03:48Z", "message": "Add section for user-defined properties in the config repo details collapsible panel"}, "afterCommit": {"oid": "5178ba69ab051f59006a3327b3d61dea2c1e5c6a", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/5178ba69ab051f59006a3327b3d61dea2c1e5c6a", "committedDate": "2020-04-22T06:11:43Z", "message": "Add section for user-defined properties in the config repo details collapsible panel"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5178ba69ab051f59006a3327b3d61dea2c1e5c6a", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/5178ba69ab051f59006a3327b3d61dea2c1e5c6a", "committedDate": "2020-04-22T06:11:43Z", "message": "Add section for user-defined properties in the config repo details collapsible panel"}, "afterCommit": {"oid": "045c593884e81ee87c16b720bcedffe8ef3dc11c", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/045c593884e81ee87c16b720bcedffe8ef3dc11c", "committedDate": "2020-04-29T23:39:37Z", "message": "Add section for user-defined properties in the config repo details collapsible panel"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "045c593884e81ee87c16b720bcedffe8ef3dc11c", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/045c593884e81ee87c16b720bcedffe8ef3dc11c", "committedDate": "2020-04-29T23:39:37Z", "message": "Add section for user-defined properties in the config repo details collapsible panel"}, "afterCommit": {"oid": "6558ff8922076a6dd9eb2973be911db70bc72f99", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/6558ff8922076a6dd9eb2973be911db70bc72f99", "committedDate": "2020-05-13T07:19:15Z", "message": "Add section for user-defined properties in the config repo details collapsible panel"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6558ff8922076a6dd9eb2973be911db70bc72f99", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/6558ff8922076a6dd9eb2973be911db70bc72f99", "committedDate": "2020-05-13T07:19:15Z", "message": "Add section for user-defined properties in the config repo details collapsible panel"}, "afterCommit": {"oid": "c6167d264d82b0d063de0cf41dc9a4ddd3347db7", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/c6167d264d82b0d063de0cf41dc9a4ddd3347db7", "committedDate": "2020-05-14T08:25:02Z", "message": "Remove route toggle to enable ConfigRepo REST API v4 as the latest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a67ee396becfdfb4e51edef6d17f57a3b45f224", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/9a67ee396becfdfb4e51edef6d17f57a3b45f224", "committedDate": "2020-05-14T09:14:12Z", "message": "Allow `ConfigMaterialUpdateListener` to always parse-directory as it may output a different config because of new or removed refs/branches/PRs even if no code changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b210153cee2b2e6117fb2cc3a576b5944c6a8da", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/7b210153cee2b2e6117fb2cc3a576b5944c6a8da", "committedDate": "2020-05-14T09:14:12Z", "message": "<KeyValEditor/> component exposes a UI to modify a set of encryptable key-value entries.\n\nThe typical model to back this component is a set of configuration properties.\n\nThis editor supports the new serialization option to represent plain-text values that\na client wishes to encrypt:\n\n```json\n{\n  \"key\": \"some.property\",\n  \"value\": \"I will be encrypted by the server upon completion\",\n  \"secure\": true\n}\n```\n\nThe intent is to use this in the config_repo modal so users can define variables to be\nused in pipeline definition files."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ee43b28b3bdceff42fdb8a4a4134df1195b753a", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/1ee43b28b3bdceff42fdb8a4a4134df1195b753a", "committedDate": "2020-05-14T09:14:12Z", "message": "<KeyValEditor/> now knows how to transparently namespace (i.e., prefix) property keys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0395c7d3eedf48099debb99b00b88a3186529ba6", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/0395c7d3eedf48099debb99b00b88a3186529ba6", "committedDate": "2020-05-14T09:14:12Z", "message": "Test the <KeyValEditor/> view models as it contains the vast majority of the logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9e557537578216c2c6bdcda60f5c2a289cc1836", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/a9e557537578216c2c6bdcda60f5c2a289cc1836", "committedDate": "2020-05-14T09:14:12Z", "message": "Tests for <KevValEditor/> component itself"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e82f45cc57a608bd4872b4283113bb4df31a267", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/8e82f45cc57a608bd4872b4283113bb4df31a267", "committedDate": "2020-05-14T09:14:12Z", "message": "ConfigReposCRUD now uses the `latest` API verison"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da7ab00f95c616098eecf383e3fb9fe4c5c01ee1", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/da7ab00f95c616098eecf383e3fb9fe4c5c01ee1", "committedDate": "2020-05-14T09:14:12Z", "message": "Extract configuration properties and related functions into a separate mixin\n\n  - Refactors how the various file pattern properties are managed (simplifies serialization, interface)\n  - Allows models to optionally support user-defined properties (separate namespace)\n  - Adds helper utilities for creating stream-like accessors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be7e181a40c76788626b476507609aa04565bb73", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/be7e181a40c76788626b476507609aa04565bb73", "committedDate": "2020-05-14T09:14:12Z", "message": "ConfigRepo modals annotate the existing repo model with errors rather than replacing the repo model\n\n  - `consumeErrorResponse()` knows how to automatically assign errors to respective fields.\n  - Replacing the repo model can have unwanted side effects in that the replaced repo model\n    instance may no longer be in sync with the UI.\n    - This is particularly problematic when a view model for a complex interaction needs to\n      bind to data in the backing model, as will be the case with user-defined config properties.\n      Unless the view model knows to rebind to a replaced model, the user will no longer be\n      able to correct any problems reported by the server since the data binding would be stale.\n    - Moreover, with such user-defined properties, the answer back from the server may have\n      transformed the data (e.g., encrypting secret properties), in which case changing the\n      shape of the data would result in strange/confusing UI behaviors on error even if the\n      new data was rebinded.\n    - In short, keeping the original model rather than replacing avoids all these pitfalls."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4e50a830e1e12fa5637fb86a3a7baf267f050cc", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/c4e50a830e1e12fa5637fb86a3a7baf267f050cc", "committedDate": "2020-05-14T09:14:12Z", "message": "Add validation and error handling to config repo configuration properties\n\n  - Extract common bits of `ConfigRepoModal#performSave()` into `ConfigRepoModal#save()`\n  - Write back to the ConfigRepo model on field value change in the properties section and also right before validation\n  - Client-side validation in the form of a custom validator asserts name uniqueness and presence among properties\n  - Errors returned by the server are bound back to the respective fields on properties, with a best-effort to handle\n    namespace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5c61b152726a86fd5ccab143fe04259dd047ad3", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/a5c61b152726a86fd5ccab143fe04259dd047ad3", "committedDate": "2020-05-14T09:14:12Z", "message": "Basic styling for the `<KeyValueEditor/>`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cd1e82bce7a20bb3d3d0c5dc701170465ab8962", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/9cd1e82bce7a20bb3d3d0c5dc701170465ab8962", "committedDate": "2020-05-14T09:14:13Z", "message": "Add section for user-defined properties in the config repo details collapsible panel"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6167d264d82b0d063de0cf41dc9a4ddd3347db7", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/c6167d264d82b0d063de0cf41dc9a4ddd3347db7", "committedDate": "2020-05-14T08:25:02Z", "message": "Remove route toggle to enable ConfigRepo REST API v4 as the latest"}, "afterCommit": {"oid": "ec5f1c9775aa004e308dbde9a5d0bae4e56b891d", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/ec5f1c9775aa004e308dbde9a5d0bae4e56b891d", "committedDate": "2020-05-14T09:14:13Z", "message": "Remove route toggle to enable ConfigRepo REST API v4 as the latest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d03e995e2bd9ed84ab80ab44942248218f664d6", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/3d03e995e2bd9ed84ab80ab44942248218f664d6", "committedDate": "2020-05-14T09:32:03Z", "message": "Finish ConfigRepo v3.0 extension API and add capabilities\n\nv3.0 was never published/documented because it was born from the\nnow-defunct test drive enhancements. It was waiting on the release\nof the new PaC page (which has been since merged).\n\nAs luck would have it, I could then freely add the correct capabilities\nfor this version, specifically flags to indicate support for:\n\n  - enumerating config files stored in a given repo (i.e., get-config-files\n    request)\n  - allowing user properties to be referenced from a config file\n\nAs part of branch support, the latter flag is used to conditionally\ndisplay the user-defined property entry widget in the configrepo\ncreate/update modal."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "570a7aa0ca71696e36b8b4bbd6a18deb72974641", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/570a7aa0ca71696e36b8b4bbd6a18deb72974641", "committedDate": "2020-05-14T09:32:03Z", "message": "Remove route toggle to enable ConfigRepo REST API v4 as the latest"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec5f1c9775aa004e308dbde9a5d0bae4e56b891d", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/ec5f1c9775aa004e308dbde9a5d0bae4e56b891d", "committedDate": "2020-05-14T09:14:13Z", "message": "Remove route toggle to enable ConfigRepo REST API v4 as the latest"}, "afterCommit": {"oid": "570a7aa0ca71696e36b8b4bbd6a18deb72974641", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/570a7aa0ca71696e36b8b4bbd6a18deb72974641", "committedDate": "2020-05-14T09:32:03Z", "message": "Remove route toggle to enable ConfigRepo REST API v4 as the latest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNDAyNTEx", "url": "https://github.com/gocd/gocd/pull/7949#pullrequestreview-412402511", "createdAt": "2020-05-15T07:17:34Z", "commit": {"oid": "570a7aa0ca71696e36b8b4bbd6a18deb72974641"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzoxNzozNFrOGV5Q1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzoxNzozNFrOGV5Q1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxMTQ3OQ==", "bodyText": "@marques-work - here we're modifying the existing Plugin Infos API v6.\nShould we consider adding Plugin Infos API v7?", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r425611479", "createdAt": "2020-05-15T07:17:34Z", "author": {"login": "GaneshSPatil"}, "path": "api/api-plugin-infos-v6/src/main/java/com/thoughtworks/go/apiv6/plugininfos/representers/extensions/ConfigRepoExtensionRepresenter.java", "diffHunk": "@@ -28,7 +28,10 @@ public void toJSON(OutputWriter extensionWriter, PluginInfo extension) {\n \n         extensionWriter.addChild(\"capabilities\", capabilitiesWriter ->\n                 capabilitiesWriter.add(\"supports_pipeline_export\", configRepoPluginInfo.getCapabilities().isSupportsPipelineExport())\n-                        .add(\"supports_parse_content\", configRepoPluginInfo.getCapabilities().isSupportsParseContent()));\n+                        .add(\"supports_parse_content\", configRepoPluginInfo.getCapabilities().isSupportsParseContent())\n+                        .add(\"supports_list_config_files\", configRepoPluginInfo.getCapabilities().isSupportsListConfigFiles())\n+                        .add(\"supports_user_defined_properties\", configRepoPluginInfo.getCapabilities().isSupportsUserDefinedProperties())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570a7aa0ca71696e36b8b4bbd6a18deb72974641"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNDA2OTk5", "url": "https://github.com/gocd/gocd/pull/7949#pullrequestreview-412406999", "createdAt": "2020-05-15T07:25:26Z", "commit": {"oid": "570a7aa0ca71696e36b8b4bbd6a18deb72974641"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzoyNToyN1rOGV5e4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzoyNToyN1rOGV5e4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxNTA3NA==", "bodyText": "should we consider using Lombok?\n@Getter\n@Setter\n@EqualsAndHashCode\n@Accessors(chain = true)\n@NoArgsConstructor(access = AccessLevel.PUBLIC)\n@AllArgsConstructor(access = AccessLevel.NONE)\npublic class Capabilities2 {\n    private boolean supportsPipelineExport;\n    private boolean supportsParseContent;\n    private boolean supportsListConfigFiles;\n    private boolean supportsUserDefinedProperties;\n}", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r425615074", "createdAt": "2020-05-15T07:25:27Z", "author": {"login": "GaneshSPatil"}, "path": "plugin-infra/go-plugin-domain/src/main/java/com/thoughtworks/go/plugin/domain/configrepo/Capabilities.java", "diffHunk": "@@ -46,17 +50,35 @@ public void setSupportsParseContent(boolean supportsParseContent) {\n         this.supportsParseContent = supportsParseContent;\n     }\n \n+    public boolean isSupportsListConfigFiles() {\n+        return supportsListConfigFiles;\n+    }\n+\n+    public void setSupportsListConfigFiles(boolean supportsListConfigFiles) {\n+        this.supportsListConfigFiles = supportsListConfigFiles;\n+    }\n+\n+    public boolean isSupportsUserDefinedProperties() {\n+        return supportsUserDefinedProperties;\n+    }\n+\n+    public void setSupportsUserDefinedProperties(boolean supportsUserDefinedProperties) {\n+        this.supportsUserDefinedProperties = supportsUserDefinedProperties;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570a7aa0ca71696e36b8b4bbd6a18deb72974641"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1908, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}