{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2OTE5OTM0", "number": 8210, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTozNzoxNVrOEEg0Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMTozMzo1MlrOELpgMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTY3NDE5OnYy", "diffSide": "RIGHT", "path": "commandline/src/main/java/com/thoughtworks/go/util/command/CommandLine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTozNzoxNVrOGiLo_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDozNzoxN1rOGwE8kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NTQ4Nw==", "bodyText": "This is the heart of this change (adding convenience methods); the rest is IntelliJ IDEA regrouping private and protected methods together at the bottom.", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r438495487", "createdAt": "2020-06-11T01:37:15Z", "author": {"login": "marques-work"}, "path": "commandline/src/main/java/com/thoughtworks/go/util/command/CommandLine.java", "diffHunk": "@@ -319,6 +256,19 @@ public CommandLine withArgs(List<String> args) {\n         return this;\n     }\n \n+    public CommandLine when(boolean condition, Consumer<CommandLine> thenDo) {\n+        return this.tap((cmd) -> {\n+            if (condition) {\n+                thenDo.accept(cmd);\n+            }\n+        });\n+    }\n+\n+    public CommandLine tap(Consumer<CommandLine> thenDo) {\n+        thenDo.accept(this);\n+        return this;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f379b8e4ee576ea880e3c8be807416badaa9cf02"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2NTg3Mw==", "bodyText": "@marques-work thanks for adding comments around the actual changes. Another option to consider is having a separate commit only for things like regrouping/refactoring.", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r453065873", "createdAt": "2020-07-10T20:37:17Z", "author": {"login": "maheshp"}, "path": "commandline/src/main/java/com/thoughtworks/go/util/command/CommandLine.java", "diffHunk": "@@ -319,6 +256,19 @@ public CommandLine withArgs(List<String> args) {\n         return this;\n     }\n \n+    public CommandLine when(boolean condition, Consumer<CommandLine> thenDo) {\n+        return this.tap((cmd) -> {\n+            if (condition) {\n+                thenDo.accept(cmd);\n+            }\n+        });\n+    }\n+\n+    public CommandLine tap(Consumer<CommandLine> thenDo) {\n+        thenDo.accept(this);\n+        return this;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NTQ4Nw=="}, "originalCommit": {"oid": "f379b8e4ee576ea880e3c8be807416badaa9cf02"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTY4MjQ4OnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/thoughtworks/go/domain/materials/git/GitCommandTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTo0Mjo0MFrOGiLuEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTo0Mjo0MFrOGiLuEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5Njc4Ng==", "bodyText": "Apologies for the messy diff;\nThe main bits here are adding the RefSpec and RefSpecIntegration @Nested tests. The rest is reorganizing the original tests under the @Nested class Integration {} tests.", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r438496786", "createdAt": "2020-06-11T01:42:40Z", "author": {"login": "marques-work"}, "path": "common/src/test/java/com/thoughtworks/go/domain/materials/git/GitCommandTest.java", "diffHunk": "@@ -25,777 +25,879 @@\n import com.thoughtworks.go.mail.SysOutStreamConsumer;\n import com.thoughtworks.go.util.DateUtils;\n import com.thoughtworks.go.util.FileUtil;\n+import com.thoughtworks.go.util.NamedProcessTag;\n import com.thoughtworks.go.util.command.*;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.junit.Rule;\n import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n import org.junit.jupiter.migrationsupport.rules.EnableRuleMigrationSupport;\n-import org.junit.rules.ExpectedException;\n import org.junit.rules.TemporaryFolder;\n import org.junit.rules.TestRule;\n \n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.nio.charset.Charset;\n import java.util.*;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n import static com.thoughtworks.go.domain.materials.git.GitTestRepo.*;\n import static com.thoughtworks.go.util.DateUtils.parseRFC822;\n-import static com.thoughtworks.go.util.ReflectionUtil.getField;\n import static com.thoughtworks.go.util.command.ProcessOutputStreamConsumer.inMemoryConsumer;\n+import static java.lang.String.format;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.regex.Pattern.compile;\n+import static java.util.regex.Pattern.quote;\n import static org.apache.commons.io.filefilter.FileFilterUtils.*;\n import static org.apache.commons.lang3.time.DateUtils.addDays;\n import static org.apache.commons.lang3.time.DateUtils.setMilliseconds;\n-import static org.assertj.core.api.Assertions.*;\n-import static org.mockito.MockitoAnnotations.initMocks;\n+import static org.junit.jupiter.api.Assertions.*;\n \n-@EnableRuleMigrationSupport\n public class GitCommandTest {\n-    private static final String BRANCH = \"foo\";\n-    private static final String SUBMODULE = \"submodule-1\";\n-\n-    private GitCommand git;\n-    private String repoUrl;\n-    private File repoLocation;\n-    private static final Date THREE_DAYS_FROM_NOW = setMilliseconds(addDays(new Date(), 3), 0);\n-    private GitTestRepo gitRepo;\n-    private File gitLocalRepoDir;\n-    private GitTestRepo gitFooBranchBundle;\n-\n-    @Rule\n-    public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n-\n-    @Rule\n-    public final TestRule restoreSystemProperties = new RestoreSystemProperties();\n-\n-    @Rule\n-    public final ExpectedException expectedException = ExpectedException.none();\n-\n-    @BeforeEach\n-    void setup() throws Exception {\n-        gitRepo = new GitTestRepo(temporaryFolder);\n-        gitLocalRepoDir = createTempWorkingDirectory();\n-        git = new GitCommand(null, gitLocalRepoDir, GitMaterialConfig.DEFAULT_BRANCH, false, null);\n-        repoLocation = gitRepo.gitRepository();\n-        repoUrl = gitRepo.projectRepositoryUrl();\n-        InMemoryStreamConsumer outputStreamConsumer = inMemoryConsumer();\n-        int returnCode = git.cloneWithNoCheckout(outputStreamConsumer, repoUrl);\n-        if (returnCode > 0) {\n-            fail(outputStreamConsumer.getAllOutput());\n-        }\n-        gitFooBranchBundle = GitTestRepo.testRepoAtBranch(GIT_FOO_BRANCH_BUNDLE, BRANCH, temporaryFolder);\n-        initMocks(this);\n-    }\n+    private static GitCommand withBranch(String branch) {\n+        return new GitCommand(null, null, branch, false, null);\n+    }\n+\n+    private static GitCommand withBranch(String branch, File cwd) {\n+        return new GitCommand(null, cwd, branch, false, null);\n+    }\n+\n+    @Nested\n+    class RefSpec {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1772ef1fcc5ea380496e95b826081fa0ebcfd23d"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTY4NjQ4OnYy", "diffSide": "LEFT", "path": "domain/src/main/java/com/thoughtworks/go/config/materials/git/GitMaterial.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTo0NDo1OFrOGiLwiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTo0NDo1OFrOGiLwiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NzQxNw==", "bodyText": "Most of the changes here are IntelliJ IDEA cleanup; grouping non-public methods at the bottom and inlining some unchanging parameters.\nKeep scrolling for the main bits; I'll call out what the essence of this file's changes are.", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r438497417", "createdAt": "2020-06-11T01:44:58Z", "author": {"login": "marques-work"}, "path": "domain/src/main/java/com/thoughtworks/go/config/materials/git/GitMaterial.java", "diffHunk": "@@ -199,95 +185,6 @@ public ValidationBean handleException(Exception e, GitVersion gitVersion) {\n         }\n     }\n \n-    private GitCommand getGit(File workingdir, int preferredCloneDepth, SubprocessExecutionContext executionContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1772ef1fcc5ea380496e95b826081fa0ebcfd23d"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTY5MDQwOnYy", "diffSide": "RIGHT", "path": "domain/src/main/java/com/thoughtworks/go/config/materials/git/GitMaterial.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTo0NzozM1rOGiLy-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTo0NzozM1rOGiLy-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5ODA0MA==", "bodyText": "Renamed only the field so it's clear what it really points to and how it should be interpreted/treated. Did not rename the getter for fear of changing serialization or something.", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r438498040", "createdAt": "2020-06-11T01:47:33Z", "author": {"login": "marques-work"}, "path": "domain/src/main/java/com/thoughtworks/go/config/materials/git/GitMaterial.java", "diffHunk": "@@ -50,20 +51,18 @@\n import static org.apache.commons.lang3.StringUtils.isBlank;\n \n public class GitMaterial extends ScmMaterial implements PasswordAwareMaterial {\n-    private static final Logger LOG = LoggerFactory.getLogger(GitMaterial.class);\n     public static final int UNSHALLOW_TRYOUT_STEP = 100;\n     public static final int DEFAULT_SHALLOW_CLONE_DEPTH = 2;\n     public static final String GO_MATERIAL_BRANCH = \"GO_MATERIAL_BRANCH\";\n-\n-    private UrlArgument url;\n-    private String branch = GitMaterialConfig.DEFAULT_BRANCH;\n-    private boolean shallowClone = false;\n-    private String submoduleFolder;\n-\n     //TODO: use iBatis to set the type for us, and we can get rid of this field.\n     public static final String TYPE = \"GitMaterial\";\n-    private static final String ERR_GIT_NOT_FOUND = \"Failed to find 'git' on your PATH. Please ensure 'git' is executable by the Go Server and on the Go Agents where this material will be used.\";\n     public static final String ERR_GIT_OLD_VERSION = \"Please install Git-core 1.6 or above. \";\n+    private static final Logger LOG = LoggerFactory.getLogger(GitMaterial.class);\n+    private static final String ERR_GIT_NOT_FOUND = \"Failed to find 'git' on your PATH. Please ensure 'git' is executable by the Go Server and on the Go Agents where this material will be used.\";\n+    private final UrlArgument url;\n+    private String refSpecOrBranch = GitMaterialConfig.DEFAULT_BRANCH;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1772ef1fcc5ea380496e95b826081fa0ebcfd23d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTY5NDU0OnYy", "diffSide": "RIGHT", "path": "domain/src/main/java/com/thoughtworks/go/config/materials/git/GitMaterial.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTo0OTo1MVrOGiL1gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTo0OTo1MVrOGiL1gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5ODY5MQ==", "bodyText": "One of the main bits changed here; it's important to return the local branch name and not the raw refspec. The comparison that references this expects this to be a real branch name.", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r438498691", "createdAt": "2020-06-11T01:49:51Z", "author": {"login": "marques-work"}, "path": "domain/src/main/java/com/thoughtworks/go/config/materials/git/GitMaterial.java", "diffHunk": "@@ -443,13 +314,136 @@ public GitMaterial withShallowClone(boolean value) {\n         return gitMaterial;\n     }\n \n-    public String branchWithDefault() {\n-        return isBlank(branch) ? GitMaterialConfig.DEFAULT_BRANCH : branch;\n+    public String effectiveLocalBranch() {\n+        return localBranch(isBlank(refSpecOrBranch) ? GitMaterialConfig.DEFAULT_BRANCH : refSpecOrBranch);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1772ef1fcc5ea380496e95b826081fa0ebcfd23d"}, "originalPosition": 332}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzAyOTg5OnYy", "diffSide": "RIGHT", "path": "domain/src/main/java/com/thoughtworks/go/config/materials/git/GitMaterial.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMToyMTowNFrOGiZAog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMToyMTowNFrOGiZAog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcxNDUzMA==", "bodyText": "This is the last main bit (isRemoteFetchConfigEqual() \u261d\ud83c\udffc); essentially, we should verify that the fetch configuration is equivalent as well when testing isRepositoryChanged().", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r438714530", "createdAt": "2020-06-11T11:21:04Z", "author": {"login": "marques-work"}, "path": "domain/src/main/java/com/thoughtworks/go/config/materials/git/GitMaterial.java", "diffHunk": "@@ -443,13 +314,136 @@ public GitMaterial withShallowClone(boolean value) {\n         return gitMaterial;\n     }\n \n-    public String branchWithDefault() {\n-        return isBlank(branch) ? GitMaterialConfig.DEFAULT_BRANCH : branch;\n+    public String effectiveLocalBranch() {\n+        return localBranch(isBlank(refSpecOrBranch) ? GitMaterialConfig.DEFAULT_BRANCH : refSpecOrBranch);\n+    }\n+\n+    @Override\n+    protected void appendCriteria(Map<String, Object> parameters) {\n+        parameters.put(ScmMaterialConfig.URL, url.originalArgument());\n+        parameters.put(\"branch\", refSpecOrBranch);\n+    }\n+\n+    @Override\n+    protected void appendAttributes(Map<String, Object> parameters) {\n+        parameters.put(\"url\", url);\n+        parameters.put(\"branch\", refSpecOrBranch);\n+        parameters.put(\"shallowClone\", shallowClone);\n+    }\n+\n+    @Override\n+    protected String getLocation() {\n+        return url.forDisplay();\n     }\n \n     @Override\n     protected void setGoMaterialVariables(EnvironmentVariableContext environmentVariableContext) {\n         super.setGoMaterialVariables(environmentVariableContext);\n-        setVariableWithName(environmentVariableContext, branchWithDefault(), GO_MATERIAL_BRANCH);\n+        setVariableWithName(environmentVariableContext, effectiveLocalBranch(), GO_MATERIAL_BRANCH);\n+    }\n+\n+    private GitCommand getGit(File workingdir, SubprocessExecutionContext executionContext) {\n+        InMemoryStreamConsumer output = inMemoryConsumer();\n+        try {\n+            return git(output, workingdir, DEFAULT_SHALLOW_CLONE_DEPTH, executionContext);\n+        } catch (Exception e) {\n+            throw bomb(e.getMessage() + \" \" + output.getStdError(), e);\n+        }\n+    }\n+\n+    private GitCommand git(ConsoleOutputStreamConsumer outputStreamConsumer, final File workingFolder, int preferredCloneDepth, SubprocessExecutionContext executionContext) throws Exception {\n+        if (isSubmoduleFolder()) {\n+            return new GitCommand(getFingerprint(), new File(workingFolder.getPath()), GitMaterialConfig.DEFAULT_BRANCH, true, secrets());\n+        }\n+        System.out.printf(\"**** [%s] WorkingDir for %s: %s\\n\", executionContext.isServer() ? \"server\" : \"agent\", urlForCommandLine(), workingFolder.getPath());\n+        GitCommand gitCommand = new GitCommand(getFingerprint(), workingFolder, refSpecOrBranch, false, secrets());\n+        if (!isGitRepository(workingFolder) || isRepositoryChanged(gitCommand, workingFolder)) {\n+            LOG.debug(\"Invalid git working copy or repository changed. Delete folder: {}\", workingFolder);\n+            deleteDirectoryNoisily(workingFolder);\n+        }\n+        createParentFolderIfNotExist(workingFolder);\n+        if (!workingFolder.exists()) {\n+            TransactionSynchronizationManager txManager = new TransactionSynchronizationManager();\n+            if (txManager.isActualTransactionActive()) {\n+                txManager.registerSynchronization(new TransactionSynchronizationAdapter() {\n+                    @Override\n+                    public void afterCompletion(int status) {\n+                        if (status != TransactionSynchronization.STATUS_COMMITTED) {\n+                            FileUtils.deleteQuietly(workingFolder);\n+                        }\n+                    }\n+                });\n+            }\n+            int cloneDepth = shallowClone ? preferredCloneDepth : Integer.MAX_VALUE;\n+            int returnValue;\n+            if (executionContext.isServer()) {\n+                returnValue = gitCommand.cloneWithNoCheckout(outputStreamConsumer, urlForCommandLine());\n+            } else {\n+                returnValue = gitCommand.clone(outputStreamConsumer, urlForCommandLine(), cloneDepth);\n+            }\n+            bombIfFailedToRunCommandLine(returnValue, \"Failed to run git clone command\");\n+        }\n+        return gitCommand;\n+    }\n+\n+    private List<SecretString> secrets() {\n+        SecretString secretSubstitution = line -> line.replace(urlForCommandLine(), getUriForDisplay());\n+        return Collections.singletonList(secretSubstitution);\n+    }\n+\n+    // Unshallow local repo to include a revision operating on via two step process:\n+    // First try to fetch forward 100 level with \"git fetch -depth 100\". If revision still missing,\n+    // unshallow the whole repo with \"git fetch --2147483647\".\n+    private void unshallowIfNeeded(GitCommand gitCommand, ConsoleOutputStreamConsumer streamConsumer, Revision revision) {\n+        if (gitCommand.isShallow() && !gitCommand.containsRevisionInBranch(revision)) {\n+            gitCommand.unshallow(streamConsumer, UNSHALLOW_TRYOUT_STEP);\n+\n+            if (gitCommand.isShallow() && !gitCommand.containsRevisionInBranch(revision)) {\n+                fullyUnshallow(gitCommand, streamConsumer);\n+            }\n+        }\n+    }\n+\n+    private void fullyUnshallow(GitCommand gitCommand, ConsoleOutputStreamConsumer streamConsumer) {\n+        if (gitCommand.isShallow()) {\n+            gitCommand.unshallow(streamConsumer, Integer.MAX_VALUE);\n+        }\n+    }\n+\n+    private boolean isSubmoduleFolder() {\n+        return getSubmoduleFolder() != null;\n+    }\n+\n+    private boolean isGitRepository(File workingFolder) {\n+        return new File(workingFolder, \".git\").isDirectory();\n+    }\n+\n+    private boolean isRepositoryChanged(GitCommand command, File workingDirectory) {\n+        UrlArgument currentWorkingUrl = command.workingRepositoryUrl();\n+        LOG.trace(\"Current repository url of [{}]: {}\", workingDirectory, currentWorkingUrl);\n+        LOG.trace(\"Target repository url: {}\", url);\n+        return !MaterialUrl.sameUrl(url.forDisplay(), currentWorkingUrl.forDisplay())\n+                || !isRemoteFetchConfigEqual(command)\n+                || !isBranchEqual(command)\n+                || (!shallowClone && command.isShallow());\n+    }\n+\n+    private boolean isRemoteFetchConfigEqual(GitCommand command) {\n+        if (command.hasRefSpec()) {\n+            try {\n+                return (\"+\" + command.expandRefSpec()).equals(command.getConfigValue(\"remote.origin.fetch\"));\n+            } catch (Throwable ignored) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15947872ae7ecd0e2db1ff30b861776551dc3cc8"}, "originalPosition": 454}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzAzOTE2OnYy", "diffSide": "RIGHT", "path": "domain/src/test/java/com/thoughtworks/go/helper/GitRepoContainingSubmodule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMToyNDoxN1rOGiZGcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMToyNDoxN1rOGiZGcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcxNjAxOQ==", "bodyText": "This is just some refactoring to get rid of GitCommand#pull(), which was a @TestOnly method. The rest is IDEA cleanup/method re-org. This is the only method I removed because I got too lazy to factor out the other @TestOnly methods. I also figured that effort is best saved for a separate PR.", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r438716019", "createdAt": "2020-06-11T11:24:17Z", "author": {"login": "marques-work"}, "path": "domain/src/test/java/com/thoughtworks/go/helper/GitRepoContainingSubmodule.java", "diffHunk": "@@ -131,7 +97,9 @@ public String projectRepositoryUrl() {\n         changeFile(remoteSubmoduleRepoLocation, fileName, newContentOfFile);\n         checkInOneFile(remoteSubmoduleRepoLocation, new File(fileName), comment);\n \n-        git(new File(remoteRepoDir, submoduleNameInRepo)).pull();\n+        CommandLine.createCommandLine(\"git\").withEncoding(\"UTF-8\").withArg(\"pull\").\n+                withWorkingDir(new File(remoteRepoDir, submoduleNameInRepo)).\n+                runOrBomb(new MaterialFingerprintTag(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15947872ae7ecd0e2db1ff30b861776551dc3cc8"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzA1MDc5OnYy", "diffSide": "RIGHT", "path": "domain/src/main/java/com/thoughtworks/go/domain/materials/git/GitCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMToyODoxM1rOGiZNaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMToyODoxM1rOGiZNaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcxNzgwMw==", "bodyText": "This and clone() are the main changes here (other parts are IDEA cleanup). Cloning to accommodate for refspecs is a multi-step process involving manually configuring fetch behavior and explicit branch creation and switching.", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r438717803", "createdAt": "2020-06-11T11:28:13Z", "author": {"login": "marques-work"}, "path": "domain/src/main/java/com/thoughtworks/go/domain/materials/git/GitCommand.java", "diffHunk": "@@ -56,95 +59,97 @@ public GitCommand(String materialFingerprint, File workingDir, String branch, bo\n         super(materialFingerprint);\n         this.workingDir = workingDir;\n         this.secrets = secrets != null ? secrets : new ArrayList<>();\n-        this.branch = StringUtils.isBlank(branch) ? GitMaterialConfig.DEFAULT_BRANCH : branch;\n+        this.branch = StringUtils.defaultIfBlank(branch, GitMaterialConfig.DEFAULT_BRANCH);\n         this.isSubmodule = isSubmodule;\n     }\n \n-    public int cloneWithNoCheckout(ConsoleOutputStreamConsumer outputStreamConsumer, String url) {\n-        CommandLine gitClone = cloneCommand().withArg(\"--no-checkout\");\n-\n-        gitClone.withArg(new UrlArgument(url)).withArg(workingDir.getAbsolutePath());\n+    private static boolean hasExactlyOneMatchingBranch(ConsoleResult branchList) {\n+        return branchList.output().size() == 1;\n+    }\n \n-        return run(gitClone, outputStreamConsumer);\n+    public String localBranch() {\n+        return RefSpecHelper.localBranch(branch);\n     }\n \n-    public int clone(ConsoleOutputStreamConsumer outputStreamConsumer, String url) {\n-        return clone(outputStreamConsumer, url, Integer.MAX_VALUE);\n+    public String remoteBranch() {\n+        return RefSpecHelper.remoteBranch(branch);\n     }\n \n-    // Clone repository from url with specified depth.\n-    // Special depth 2147483647 (Integer.MAX_VALUE) are treated as full clone\n-    public int clone(ConsoleOutputStreamConsumer outputStreamConsumer, String url, Integer depth) {\n-        CommandLine gitClone = cloneCommand();\n+    public String fullUpstreamRef() {\n+        return RefSpecHelper.fullUpstreamRef(branch);\n+    }\n \n-        if (depth < Integer.MAX_VALUE) {\n-            gitClone.withArg(String.format(\"--depth=%s\", depth));\n-        }\n-        gitClone.withArg(new UrlArgument(url)).withArg(workingDir.getAbsolutePath());\n+    public String expandRefSpec() {\n+        return RefSpecHelper.expandRefSpec(branch);\n+    }\n \n-        return run(gitClone, outputStreamConsumer);\n+    public boolean hasRefSpec() {\n+        return RefSpecHelper.hasRefSpec(branch);\n     }\n \n-    private CommandLine cloneCommand() {\n-        return git()\n-                .withArg(\"clone\")\n-                .withArg(String.format(\"--branch=%s\", branch));\n+    public String getConfigValue(String key) {\n+        return runOrBomb(git_C().withArgs(\"config\", \"--get-all\", key)).outputAsString();\n     }\n \n-    public List<Modification> latestModification() {\n-        return gitLog(\"-1\", \"--date=iso\", \"--no-decorate\", \"--pretty=medium\", \"--no-color\", remoteBranch());\n+    public int cloneWithNoCheckout(ConsoleOutputStreamConsumer outputStreamConsumer, String url) {\n+        CommandLine gitClone = cloneCommand().\n+                when(!hasRefSpec(), git -> git.withArgs(\"--branch\", branch)).\n+                withArg(\"--no-checkout\").\n+                withArg(new UrlArgument(url)).\n+                withArg(workingDir.getAbsolutePath());\n+\n+        if (!hasRefSpec()) {\n+            return run(gitClone, outputStreamConsumer);\n+        }\n+\n+        final String abbrevBranch = localBranch();\n+        final String fullLocalRef = abbrevBranch.startsWith(\"refs/\") ? abbrevBranch : REFS_HEADS + abbrevBranch;\n \n+        return runCascade(outputStreamConsumer,\n+                gitClone,\n+                git_C().withArgs(\"config\", \"--replace-all\", \"remote.origin.fetch\", \"+\" + expandRefSpec()),\n+                git_C().withArgs(\"fetch\", \"--prune\", \"--recurse-submodules=no\"),\n+                // Important to create a \"real\" local branch and not just use `symbolic-ref`\n+                // to update HEAD in order to ensure that GitMaterial#isBranchEqual() passes;\n+                // failing this check will cause the working directory to be obliterated and we\n+                // will re-clone the given repository every time. Yikes!\n+                git_C().withArgs(\"branch\", \"-f\", abbrevBranch, remoteBranch()),\n+                git_C().withArgs(\"symbolic-ref\", \"HEAD\", fullLocalRef)\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15947872ae7ecd0e2db1ff30b861776551dc3cc8"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzA1MTY3OnYy", "diffSide": "RIGHT", "path": "domain/src/main/java/com/thoughtworks/go/domain/materials/git/GitCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMToyODozNVrOGiZN6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMToyODozNVrOGiZN6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcxNzkzMQ==", "bodyText": "Main changes in clone()", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r438717931", "createdAt": "2020-06-11T11:28:35Z", "author": {"login": "marques-work"}, "path": "domain/src/main/java/com/thoughtworks/go/domain/materials/git/GitCommand.java", "diffHunk": "@@ -56,95 +59,97 @@ public GitCommand(String materialFingerprint, File workingDir, String branch, bo\n         super(materialFingerprint);\n         this.workingDir = workingDir;\n         this.secrets = secrets != null ? secrets : new ArrayList<>();\n-        this.branch = StringUtils.isBlank(branch) ? GitMaterialConfig.DEFAULT_BRANCH : branch;\n+        this.branch = StringUtils.defaultIfBlank(branch, GitMaterialConfig.DEFAULT_BRANCH);\n         this.isSubmodule = isSubmodule;\n     }\n \n-    public int cloneWithNoCheckout(ConsoleOutputStreamConsumer outputStreamConsumer, String url) {\n-        CommandLine gitClone = cloneCommand().withArg(\"--no-checkout\");\n-\n-        gitClone.withArg(new UrlArgument(url)).withArg(workingDir.getAbsolutePath());\n+    private static boolean hasExactlyOneMatchingBranch(ConsoleResult branchList) {\n+        return branchList.output().size() == 1;\n+    }\n \n-        return run(gitClone, outputStreamConsumer);\n+    public String localBranch() {\n+        return RefSpecHelper.localBranch(branch);\n     }\n \n-    public int clone(ConsoleOutputStreamConsumer outputStreamConsumer, String url) {\n-        return clone(outputStreamConsumer, url, Integer.MAX_VALUE);\n+    public String remoteBranch() {\n+        return RefSpecHelper.remoteBranch(branch);\n     }\n \n-    // Clone repository from url with specified depth.\n-    // Special depth 2147483647 (Integer.MAX_VALUE) are treated as full clone\n-    public int clone(ConsoleOutputStreamConsumer outputStreamConsumer, String url, Integer depth) {\n-        CommandLine gitClone = cloneCommand();\n+    public String fullUpstreamRef() {\n+        return RefSpecHelper.fullUpstreamRef(branch);\n+    }\n \n-        if (depth < Integer.MAX_VALUE) {\n-            gitClone.withArg(String.format(\"--depth=%s\", depth));\n-        }\n-        gitClone.withArg(new UrlArgument(url)).withArg(workingDir.getAbsolutePath());\n+    public String expandRefSpec() {\n+        return RefSpecHelper.expandRefSpec(branch);\n+    }\n \n-        return run(gitClone, outputStreamConsumer);\n+    public boolean hasRefSpec() {\n+        return RefSpecHelper.hasRefSpec(branch);\n     }\n \n-    private CommandLine cloneCommand() {\n-        return git()\n-                .withArg(\"clone\")\n-                .withArg(String.format(\"--branch=%s\", branch));\n+    public String getConfigValue(String key) {\n+        return runOrBomb(git_C().withArgs(\"config\", \"--get-all\", key)).outputAsString();\n     }\n \n-    public List<Modification> latestModification() {\n-        return gitLog(\"-1\", \"--date=iso\", \"--no-decorate\", \"--pretty=medium\", \"--no-color\", remoteBranch());\n+    public int cloneWithNoCheckout(ConsoleOutputStreamConsumer outputStreamConsumer, String url) {\n+        CommandLine gitClone = cloneCommand().\n+                when(!hasRefSpec(), git -> git.withArgs(\"--branch\", branch)).\n+                withArg(\"--no-checkout\").\n+                withArg(new UrlArgument(url)).\n+                withArg(workingDir.getAbsolutePath());\n+\n+        if (!hasRefSpec()) {\n+            return run(gitClone, outputStreamConsumer);\n+        }\n+\n+        final String abbrevBranch = localBranch();\n+        final String fullLocalRef = abbrevBranch.startsWith(\"refs/\") ? abbrevBranch : REFS_HEADS + abbrevBranch;\n \n+        return runCascade(outputStreamConsumer,\n+                gitClone,\n+                git_C().withArgs(\"config\", \"--replace-all\", \"remote.origin.fetch\", \"+\" + expandRefSpec()),\n+                git_C().withArgs(\"fetch\", \"--prune\", \"--recurse-submodules=no\"),\n+                // Important to create a \"real\" local branch and not just use `symbolic-ref`\n+                // to update HEAD in order to ensure that GitMaterial#isBranchEqual() passes;\n+                // failing this check will cause the working directory to be obliterated and we\n+                // will re-clone the given repository every time. Yikes!\n+                git_C().withArgs(\"branch\", \"-f\", abbrevBranch, remoteBranch()),\n+                git_C().withArgs(\"symbolic-ref\", \"HEAD\", fullLocalRef)\n+        );\n     }\n \n-    public List<Modification> modificationsSince(Revision revision) {\n-        return gitLog(\"--date=iso\", \"--pretty=medium\", \"--no-decorate\", \"--no-color\", String.format(\"%s..%s\", revision.getRevision(), remoteBranch()));\n+    @TestOnly\n+    public int clone(ConsoleOutputStreamConsumer outputStreamConsumer, String url) {\n+        return clone(outputStreamConsumer, url, Integer.MAX_VALUE);\n     }\n \n-    private List<Modification> gitLog(String... args) {\n-        // Git log will only show changes before the currently checked out revision\n-        InMemoryStreamConsumer outputStreamConsumer = inMemoryConsumer();\n+    // Clone repository from url with specified depth.\n+    // Special depth 2147483647 (Integer.MAX_VALUE) are treated as full clone\n+    public int clone(ConsoleOutputStreamConsumer outputStreamConsumer, String url, Integer depth) {\n+        CommandLine gitClone = cloneCommand().\n+                when(!hasRefSpec(), git -> git.withArgs(\"--branch\", branch)).\n+                when(depth < Integer.MAX_VALUE, git -> git.withArg(format(\"--depth=%s\", depth))).\n+                withArg(new UrlArgument(url)).withArg(workingDir.getAbsolutePath());\n \n-        try {\n-            if (!isSubmodule) {\n-                fetch(outputStreamConsumer);\n-            }\n-        } catch (Exception e) {\n-            throw new RuntimeException(String.format(\"Working directory: %s\\n%s\", workingDir, outputStreamConsumer.getStdError()), e);\n+        if (!hasRefSpec()) {\n+            return run(gitClone, outputStreamConsumer);\n         }\n \n-        CommandLine gitCmd = git().withArg(\"log\").withArgs(args).withWorkingDir(workingDir);\n-        ConsoleResult result = runOrBomb(gitCmd);\n-\n-        GitModificationParser parser = new GitModificationParser();\n-        List<Modification> mods = parser.parse(result.output());\n-        for (Modification mod : mods) {\n-            addModifiedFiles(mod);\n-        }\n-        return mods;\n+        return runCascade(outputStreamConsumer,\n+                gitClone,\n+                git_C().withArgs(\"config\", \"--replace-all\", \"remote.origin.fetch\", \"+\" + expandRefSpec()),\n+                git_C().withArgs(\"fetch\", \"--prune\", \"--recurse-submodules=no\"),\n+                git_C().withArgs(\"checkout\", \"-B\", localBranch(), remoteBranch())\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15947872ae7ecd0e2db1ff30b861776551dc3cc8"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzA1NjM5OnYy", "diffSide": "RIGHT", "path": "domain/src/main/java/com/thoughtworks/go/domain/materials/SCMCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTozMDozNlrOGiZRFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTozMDozNlrOGiZRFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcxODc0Mw==", "bodyText": "Adding this just makes for concise multi-step command invocations.", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r438718743", "createdAt": "2020-06-11T11:30:36Z", "author": {"login": "marques-work"}, "path": "domain/src/main/java/com/thoughtworks/go/domain/materials/SCMCommand.java", "diffHunk": "@@ -30,15 +30,39 @@ public SCMCommand(String materialFingerprint) {\n         this.materialFingerprint = materialFingerprint;\n     }\n \n-    protected int run(CommandLine commandLine, ConsoleOutputStreamConsumer outputStreamConsumer, String... input) {\n-        return commandLine.run(outputStreamConsumer, new MaterialFingerprintTag(materialFingerprint), input);\n-    }\n-\n     public ConsoleResult runOrBomb(CommandLine commandLine, boolean failOnNonZeroReturn, String... input) {\n         return commandLine.runOrBomb(failOnNonZeroReturn, new MaterialFingerprintTag(materialFingerprint), input);\n     }\n \n     public ConsoleResult runOrBomb(CommandLine commandLine, String... input) {\n         return commandLine.runOrBomb(new MaterialFingerprintTag(materialFingerprint), input);\n     }\n+\n+    protected int run(CommandLine commandLine, ConsoleOutputStreamConsumer outputStreamConsumer, String... input) {\n+        return commandLine.run(outputStreamConsumer, new MaterialFingerprintTag(materialFingerprint), input);\n+    }\n+\n+    /**\n+     * Conveniently runs commands sequentially on a given console, aborting on the first failure.\n+     *\n+     * @param console  collects console output\n+     * @param commands the set of sequential commands\n+     * @return the exit status of the last executed command\n+     */\n+    protected int runCascade(ConsoleOutputStreamConsumer console, CommandLine... commands) {\n+        int code = 0;\n+\n+        // Doing this via streams is awkward; it's hard to *both* collect the return code\n+        // *AND* exit iteration early. Curse Java for only giving us fake closures!\n+        //\n+        // My un-amusement is \"effectively final\" \ud83d\ude12.\n+        for (CommandLine cmd : commands) {\n+            code = run(cmd, console);\n+            if (0 != code) {\n+                break;\n+            }\n+        }\n+\n+        return code;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15947872ae7ecd0e2db1ff30b861776551dc3cc8"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzA3MTEzOnYy", "diffSide": "RIGHT", "path": "domain/src/main/java/com/thoughtworks/go/domain/materials/git/RefSpecHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTozNjoyMVrOGiZajg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTozNjoyMVrOGiZajg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyMTE2Ng==", "bodyText": "This util class handles all the logic to extract meaningful source and destination refs from refspecs, as well as defaulting to old behaviors when provided just a plain branch.\nThis util class exists because the logic is shared between GitMaterial and GitCommand.", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r438721166", "createdAt": "2020-06-11T11:36:21Z", "author": {"login": "marques-work"}, "path": "domain/src/main/java/com/thoughtworks/go/domain/materials/git/RefSpecHelper.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.thoughtworks.go.domain.materials.git;\n+\n+import com.thoughtworks.go.util.command.UrlArgument;\n+\n+public class RefSpecHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15947872ae7ecd0e2db1ff30b861776551dc3cc8"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjA4NDA1OnYy", "diffSide": "RIGHT", "path": "config/config-api/src/main/java/com/thoughtworks/go/config/materials/git/RefSpecHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMTo1ODo1OVrOGsuHXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMTo1ODo1OVrOGsuHXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0NjA3OQ==", "bodyText": "Worth calling out this decision in expandRefSpec()", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r449546079", "createdAt": "2020-07-03T11:58:59Z", "author": {"login": "marques-work"}, "path": "config/config-api/src/main/java/com/thoughtworks/go/config/materials/git/RefSpecHelper.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.thoughtworks.go.config.materials.git;\n+\n+public class RefSpecHelper {\n+    public static final String REFS_HEADS = \"refs/heads/\";\n+    public static final String REFS_REMOTES = \"refs/remotes/\";\n+\n+    private RefSpecHelper() {\n+    }\n+\n+    public static String localBranch(String branch) {\n+        final String local = findDest(branch);\n+\n+        if (null == local) {\n+            return branch;\n+        }\n+\n+        if (local.startsWith(REFS_HEADS)) {\n+            return local.substring(REFS_HEADS.length());\n+        }\n+\n+        if (local.startsWith(REFS_REMOTES)) {\n+            final int bound = local.indexOf(\"/\", REFS_REMOTES.length());\n+            // If the user does not specify a branch under the remote, this is likely\n+            // a user error. As a failsafe, allow the condition to fall through, which\n+            // effectively returns `refs/remotes/<remote-name>` as this will be\n+            // resolvable in git.\n+            if (-1 != bound) {\n+                return local.substring(bound + 1);\n+            }\n+        }\n+\n+        return local;\n+    }\n+\n+    public static String remoteBranch(String branch) {\n+        final String local = findDest(branch);\n+\n+        if (null == local) {\n+            return \"origin/\" + branch;\n+        }\n+\n+        if (!local.startsWith(\"refs/\")) {\n+            return REFS_HEADS + local;\n+        }\n+\n+        if (local.startsWith(REFS_REMOTES)) {\n+            // If the user does not specify a branch under the remote, this is likely\n+            // a user error. As a failsafe, allow the condition to fall through, which\n+            // effectively returns `refs/remotes/<remote-name>` as this will be\n+            // resolvable in git.\n+            if (-1 != local.indexOf(\"/\", REFS_REMOTES.length())) {\n+                return local.substring(REFS_REMOTES.length());\n+            }\n+        }\n+\n+        return local;\n+    }\n+\n+    /**\n+     * Finds the full ref of the upstream branch; for refSpecs, this returns the source fragment.\n+     * <p>\n+     * This is mainly used for {@code git ls-remote} during git connection check.\n+     *\n+     * @return the full ref of the upstream branch or source fragment of the refSpec\n+     */\n+    public static String fullUpstreamRef(String branch) {\n+        final String source = findSource(branch);\n+        return null == source ? REFS_HEADS + branch : source;\n+    }\n+\n+    public static boolean hasRefSpec(String branch) {\n+        return -1 != refSpecBoundary(branch);\n+    }\n+\n+    /**\n+     * Ensures that the refSpec destination has an absolute path\n+     *\n+     * @return the absolute refSpec\n+     */\n+    public static String expandRefSpec(String branch) {\n+        final String source = findSource(branch);\n+\n+        if (null == source) { // equiv to hasRefSpec()\n+            return branch;\n+        }\n+\n+        final String dest = findDest(branch);\n+\n+        if (null == dest || dest.startsWith(\"refs/\")) {\n+            return branch;\n+        }\n+\n+        // NOTE: This behavior differs from the `git fetch <remote> <refSpec>` implicit, default\n+        // expansion, which effectively interprets `refs/a/b:c` as `refs/a/b:refs/heads/c`.\n+        //\n+        // Expanding the destination to be under `refs/remotes/origin/<dest>` is a more sensible\n+        // default for how GoCD works. As we actually create and _switch_ to the branch named\n+        // by the destination, `git fetch` would *fail* if the refSpec destination were to be\n+        // `refs/heads/<branchName>`; fetching directly to the current branch is illegal in `git`\n+        // (HEAD actually points to `refs/heads/<branchName>`).\n+        //\n+        // Fetching to `refs/remotes/origin/<branchName>` (and then merging, \u00e0 la \"pull\") works\n+        // perfectly fine from the current branch.\n+        //\n+        //   -- In case you were wondering. \ud83d\udd96\ud83c\udffc\n+        return source + \":\" + REFS_REMOTES + \"origin/\" + dest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1661b8d88c33d9f55233d4c8c9befe022b2e4e0e"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjQ5Nzc3OnYy", "diffSide": "RIGHT", "path": "domain/src/main/java/com/thoughtworks/go/config/materials/git/GitMaterial.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMTozMzo1MlrOGtTmMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDozODoxOFrOGtu1Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MDE3Ng==", "bodyText": "@marques-work - is this System.out.printf intentional?", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r450160176", "createdAt": "2020-07-06T11:33:52Z", "author": {"login": "GaneshSPatil"}, "path": "domain/src/main/java/com/thoughtworks/go/config/materials/git/GitMaterial.java", "diffHunk": "@@ -443,13 +314,136 @@ public GitMaterial withShallowClone(boolean value) {\n         return gitMaterial;\n     }\n \n-    public String branchWithDefault() {\n-        return isBlank(branch) ? GitMaterialConfig.DEFAULT_BRANCH : branch;\n+    public String effectiveLocalBranch() {\n+        return localBranch(isBlank(refSpecOrBranch) ? GitMaterialConfig.DEFAULT_BRANCH : refSpecOrBranch);\n+    }\n+\n+    @Override\n+    protected void appendCriteria(Map<String, Object> parameters) {\n+        parameters.put(ScmMaterialConfig.URL, url.originalArgument());\n+        parameters.put(\"branch\", refSpecOrBranch);\n+    }\n+\n+    @Override\n+    protected void appendAttributes(Map<String, Object> parameters) {\n+        parameters.put(\"url\", url);\n+        parameters.put(\"branch\", refSpecOrBranch);\n+        parameters.put(\"shallowClone\", shallowClone);\n+    }\n+\n+    @Override\n+    protected String getLocation() {\n+        return url.forDisplay();\n     }\n \n     @Override\n     protected void setGoMaterialVariables(EnvironmentVariableContext environmentVariableContext) {\n         super.setGoMaterialVariables(environmentVariableContext);\n-        setVariableWithName(environmentVariableContext, branchWithDefault(), GO_MATERIAL_BRANCH);\n+        setVariableWithName(environmentVariableContext, effectiveLocalBranch(), GO_MATERIAL_BRANCH);\n+    }\n+\n+    private GitCommand getGit(File workingdir, SubprocessExecutionContext executionContext) {\n+        InMemoryStreamConsumer output = inMemoryConsumer();\n+        try {\n+            return git(output, workingdir, DEFAULT_SHALLOW_CLONE_DEPTH, executionContext);\n+        } catch (Exception e) {\n+            throw bomb(e.getMessage() + \" \" + output.getStdError(), e);\n+        }\n+    }\n+\n+    private GitCommand git(ConsoleOutputStreamConsumer outputStreamConsumer, final File workingFolder, int preferredCloneDepth, SubprocessExecutionContext executionContext) throws Exception {\n+        if (isSubmoduleFolder()) {\n+            return new GitCommand(getFingerprint(), new File(workingFolder.getPath()), GitMaterialConfig.DEFAULT_BRANCH, true, secrets());\n+        }\n+        System.out.printf(\"**** [%s] WorkingDir for %s: %s\\n\", executionContext.isServer() ? \"server\" : \"agent\", urlForCommandLine(), workingFolder.getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1661b8d88c33d9f55233d4c8c9befe022b2e4e0e"}, "originalPosition": 372}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwNjQyMg==", "bodyText": "@GaneshSPatil oops! no, it is not.", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r450606422", "createdAt": "2020-07-07T04:38:18Z", "author": {"login": "marques-work"}, "path": "domain/src/main/java/com/thoughtworks/go/config/materials/git/GitMaterial.java", "diffHunk": "@@ -443,13 +314,136 @@ public GitMaterial withShallowClone(boolean value) {\n         return gitMaterial;\n     }\n \n-    public String branchWithDefault() {\n-        return isBlank(branch) ? GitMaterialConfig.DEFAULT_BRANCH : branch;\n+    public String effectiveLocalBranch() {\n+        return localBranch(isBlank(refSpecOrBranch) ? GitMaterialConfig.DEFAULT_BRANCH : refSpecOrBranch);\n+    }\n+\n+    @Override\n+    protected void appendCriteria(Map<String, Object> parameters) {\n+        parameters.put(ScmMaterialConfig.URL, url.originalArgument());\n+        parameters.put(\"branch\", refSpecOrBranch);\n+    }\n+\n+    @Override\n+    protected void appendAttributes(Map<String, Object> parameters) {\n+        parameters.put(\"url\", url);\n+        parameters.put(\"branch\", refSpecOrBranch);\n+        parameters.put(\"shallowClone\", shallowClone);\n+    }\n+\n+    @Override\n+    protected String getLocation() {\n+        return url.forDisplay();\n     }\n \n     @Override\n     protected void setGoMaterialVariables(EnvironmentVariableContext environmentVariableContext) {\n         super.setGoMaterialVariables(environmentVariableContext);\n-        setVariableWithName(environmentVariableContext, branchWithDefault(), GO_MATERIAL_BRANCH);\n+        setVariableWithName(environmentVariableContext, effectiveLocalBranch(), GO_MATERIAL_BRANCH);\n+    }\n+\n+    private GitCommand getGit(File workingdir, SubprocessExecutionContext executionContext) {\n+        InMemoryStreamConsumer output = inMemoryConsumer();\n+        try {\n+            return git(output, workingdir, DEFAULT_SHALLOW_CLONE_DEPTH, executionContext);\n+        } catch (Exception e) {\n+            throw bomb(e.getMessage() + \" \" + output.getStdError(), e);\n+        }\n+    }\n+\n+    private GitCommand git(ConsoleOutputStreamConsumer outputStreamConsumer, final File workingFolder, int preferredCloneDepth, SubprocessExecutionContext executionContext) throws Exception {\n+        if (isSubmoduleFolder()) {\n+            return new GitCommand(getFingerprint(), new File(workingFolder.getPath()), GitMaterialConfig.DEFAULT_BRANCH, true, secrets());\n+        }\n+        System.out.printf(\"**** [%s] WorkingDir for %s: %s\\n\", executionContext.isServer() ? \"server\" : \"agent\", urlForCommandLine(), workingFolder.getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MDE3Ng=="}, "originalCommit": {"oid": "1661b8d88c33d9f55233d4c8c9befe022b2e4e0e"}, "originalPosition": 372}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2855, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}