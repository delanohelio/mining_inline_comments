{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2MDg4OTYw", "number": 8503, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMzozMzowOFrOEhfeMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTozOTo1NVrOEid8Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTU0MDk2OnYy", "diffSide": "RIGHT", "path": "config/config-api/src/main/java/com/thoughtworks/go/domain/config/ConfigurationProperty.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMzozMzowOFrOHO1XBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODo0Njo0MFrOHQUDuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMxNjM1Ng==", "bodyText": "Reason behind introducing a new method: parsing of a secret param and substituting the same needs to check the following cases:\n\nnot secure values: null nd not blank\nsecure values: null nd successful decryption.\n\nThese checks are already performed in getValue() method. Hence, to avoid code duplication, decided to introduce a new method. Let me know if this is not ok.", "url": "https://github.com/gocd/gocd/pull/8503#discussion_r485316356", "createdAt": "2020-09-09T03:33:08Z", "author": {"login": "kritika-singh3"}, "path": "config/config-api/src/main/java/com/thoughtworks/go/domain/config/ConfigurationProperty.java", "diffHunk": "@@ -349,4 +348,26 @@ public ConfigurationProperty deserialize(String name, String value, String encry\n         }\n         return this;\n     }\n+\n+    private void parseSecretParams() {\n+        this.secretParamsForValue = SecretParams.parse(getValue());\n+    }\n+\n+    @Override\n+    public boolean hasSecretParams() {\n+        return !this.secretParamsForValue.isEmpty();\n+    }\n+\n+    @Override\n+    public SecretParams getSecretParams() {\n+        return this.secretParamsForValue;\n+    }\n+\n+    public String getResolvedValue() {\n+        if (hasSecretParams()) {\n+            return getSecretParams().substitute(getValue());\n+        }\n+\n+        return getValue();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b6a59018d1a268220624b49bdd2d1f584024a3"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2Nzg5Nw==", "bodyText": "Also, this method is required because there are places wherein we just need the value configured(e.g in API's) and there are times when we would need the values to resolved if it contains secrets (e.g during MDU the resolved values needs to be sent to the plugin)", "url": "https://github.com/gocd/gocd/pull/8503#discussion_r486867897", "createdAt": "2020-09-11T08:46:40Z", "author": {"login": "maheshp"}, "path": "config/config-api/src/main/java/com/thoughtworks/go/domain/config/ConfigurationProperty.java", "diffHunk": "@@ -349,4 +348,26 @@ public ConfigurationProperty deserialize(String name, String value, String encry\n         }\n         return this;\n     }\n+\n+    private void parseSecretParams() {\n+        this.secretParamsForValue = SecretParams.parse(getValue());\n+    }\n+\n+    @Override\n+    public boolean hasSecretParams() {\n+        return !this.secretParamsForValue.isEmpty();\n+    }\n+\n+    @Override\n+    public SecretParams getSecretParams() {\n+        return this.secretParamsForValue;\n+    }\n+\n+    public String getResolvedValue() {\n+        if (hasSecretParams()) {\n+            return getSecretParams().substitute(getValue());\n+        }\n+\n+        return getValue();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMxNjM1Ng=="}, "originalCommit": {"oid": "a1b6a59018d1a268220624b49bdd2d1f584024a3"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTUzNjU3OnYy", "diffSide": "RIGHT", "path": "domain/src/main/java/com/thoughtworks/go/config/materials/PluggableSCMMaterial.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODo1Nzo0OVrOHQUktA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNToxNjozNFrOHRELtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3NjM0MA==", "bodyText": "Can we change configurationProperty.isSecure to have an additional check for secretParams over calling configurationProperty.hasSecretParams()", "url": "https://github.com/gocd/gocd/pull/8503#discussion_r486876340", "createdAt": "2020-09-11T08:57:49Z", "author": {"login": "maheshp"}, "path": "domain/src/main/java/com/thoughtworks/go/config/materials/PluggableSCMMaterial.java", "diffHunk": "@@ -270,28 +269,14 @@ public void populateEnvironmentContext(EnvironmentVariableContext context, Mater\n         context.setProperty(getEnvironmentVariableKey(\"GO_SCM_%s_%s\", \"LABEL\"), materialRevision.getRevision().getRevision(), false);\n         for (ConfigurationProperty configurationProperty : scmConfig.getConfiguration()) {\n             context.setProperty(getEnvironmentVariableKey(\"GO_SCM_%s_%s\", configurationProperty.getConfigurationKey().getName()),\n-                    configurationProperty.getValue(), configurationProperty.isSecure());\n+                    configurationProperty.getResolvedValue(), configurationProperty.isSecure() || configurationProperty.hasSecretParams());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff9bc9064a88ca671cd5273fa89379d75fd65a9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1NjM3NA==", "bodyText": "The isSecure method is used to decide whether to send the encrypted value or the normal value. Hence, the same was not altered.", "url": "https://github.com/gocd/gocd/pull/8503#discussion_r487656374", "createdAt": "2020-09-14T05:16:34Z", "author": {"login": "kritika-singh3"}, "path": "domain/src/main/java/com/thoughtworks/go/config/materials/PluggableSCMMaterial.java", "diffHunk": "@@ -270,28 +269,14 @@ public void populateEnvironmentContext(EnvironmentVariableContext context, Mater\n         context.setProperty(getEnvironmentVariableKey(\"GO_SCM_%s_%s\", \"LABEL\"), materialRevision.getRevision().getRevision(), false);\n         for (ConfigurationProperty configurationProperty : scmConfig.getConfiguration()) {\n             context.setProperty(getEnvironmentVariableKey(\"GO_SCM_%s_%s\", configurationProperty.getConfigurationKey().getName()),\n-                    configurationProperty.getValue(), configurationProperty.isSecure());\n+                    configurationProperty.getResolvedValue(), configurationProperty.isSecure() || configurationProperty.hasSecretParams());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3NjM0MA=="}, "originalCommit": {"oid": "4ff9bc9064a88ca671cd5273fa89379d75fd65a9"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTcwMzY5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/thoughtworks/go/server/service/MaterialService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOToyNzowMlrOHQWYgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOToyNzowMlrOHQWYgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkwNTk4Nw==", "bodyText": "Can we have a resolve method on SecretParamResolver which takes any type of material over having multiple methods for each material type.", "url": "https://github.com/gocd/gocd/pull/8503#discussion_r486905987", "createdAt": "2020-09-11T09:27:02Z", "author": {"login": "maheshp"}, "path": "server/src/main/java/com/thoughtworks/go/server/service/MaterialService.java", "diffHunk": "@@ -160,7 +160,11 @@ public Modifications getModificationsFor(MaterialConfig materialConfig, Paginati\n \n     private void resolveSecretParams(Material material) {\n         if ((material instanceof SecretParamAware) && ((SecretParamAware) material).hasSecretParams()) {\n-            this.secretParamResolver.resolve((ScmMaterial) material);\n+            if (material instanceof ScmMaterial) {\n+                this.secretParamResolver.resolve((ScmMaterial) material);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff9bc9064a88ca671cd5273fa89379d75fd65a9"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTcxNDE2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/thoughtworks/go/server/service/RulesService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOToyODo1OVrOHQWgMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOToyODo1OVrOHQWgMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkwNzk1Mg==", "bodyText": "Do not log an error here. We are throwing an exception, leave it to services to handle exception and log errors.", "url": "https://github.com/gocd/gocd/pull/8503#discussion_r486907952", "createdAt": "2020-09-11T09:28:59Z", "author": {"login": "maheshp"}, "path": "server/src/main/java/com/thoughtworks/go/server/service/RulesService.java", "diffHunk": "@@ -78,15 +80,32 @@ public boolean validateSecretConfigReferences(ScmMaterial scmMaterial) {\n         return true;\n     }\n \n-    private void addError(HashMap<CaseInsensitiveString, StringBuilder> pipelinesWithErrors, CaseInsensitiveString pipelineName, String message) {\n-        if (pipelinesWithErrors == null) {\n-            pipelinesWithErrors = new HashMap<>();\n+    public void validateSecretConfigReferences(PluggableSCMMaterial pluggableSCMMaterial) {\n+        SCM scmConfig = pluggableSCMMaterial.getScmConfig();\n+        SecretParams secretParams = pluggableSCMMaterial.getSecretParams();\n+        if (secretParams.isEmpty()) {\n+            LOGGER.debug(\"No secret params available in pluggable SCM {}.\", pluggableSCMMaterial.getDisplayName());\n+            return;\n         }\n-        if (!pipelinesWithErrors.containsKey(pipelineName)) {\n-            pipelinesWithErrors.put(pipelineName, new StringBuilder());\n+        HashMap<CaseInsensitiveString, StringBuilder> pipelinesWithErrors = new HashMap<>();\n+        String scmConfigName = scmConfig.getName();\n+\n+        secretParams.groupBySecretConfigId()\n+                .forEach((secretConfigId, secretParamsToResolve) -> {\n+                    SecretConfig secretConfig = goConfigService.getSecretConfigById(secretConfigId);\n+                    if (secretConfig == null) {\n+                        addError(pipelinesWithErrors, new CaseInsensitiveString(scmConfigName), format(\"Pluggable SCM '%s' is referring to none-existent secret config '%s'.\", scmConfigName, secretConfigId));\n+                    } else if (!secretConfig.canRefer(scmConfig.getClass(), scmConfigName)) {\n+                        addError(pipelinesWithErrors, new CaseInsensitiveString(scmConfigName), format(\"Pluggable SCM '%s' does not have permission to refer to secrets using secret config '%s'\", scmConfigName, secretConfigId));\n+                    }\n+                });\n+\n+        StringBuilder errorMessage = new StringBuilder();\n+        if (!pipelinesWithErrors.isEmpty()) {\n+            errorMessage.append(StringUtils.join(pipelinesWithErrors.values(), '\\n').trim());\n+            LOGGER.error(\"[Material Update] Failure: {}\", errorMessage.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff9bc9064a88ca671cd5273fa89379d75fd65a9"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTc3NTkxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/thoughtworks/go/server/service/SecretParamResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTozOTo1NVrOHQXJ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTozOTo1NVrOHQXJ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkxODYxMg==", "bodyText": "Does it make sense to move hasSecretParams() check inside the resolve method?", "url": "https://github.com/gocd/gocd/pull/8503#discussion_r486918612", "createdAt": "2020-09-11T09:39:55Z", "author": {"login": "maheshp"}, "path": "server/src/main/java/com/thoughtworks/go/server/service/SecretParamResolver.java", "diffHunk": "@@ -49,6 +50,18 @@ public SecretParamResolver(SecretsExtension secretsExtension, GoConfigService go\n         this.rulesService = rulesService;\n     }\n \n+    public void resolve(List<Material> materials) {\n+        materials.stream()\n+                .filter((material) -> material instanceof SecretParamAware && ((SecretParamAware) material).hasSecretParams())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa5a9dae275b3e9544059e5477a22ecc5461ee79"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2830, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}