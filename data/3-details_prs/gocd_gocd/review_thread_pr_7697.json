{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMjc3Nzk4", "number": 7697, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwODozMDoyOFrODc5JPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwODozMDoyOFrODc5JPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjIyOTczOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/thoughtworks/go/config/update/PartialConfigUpdateCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwODozMDoyOFrOFlLlGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwODozMDoyOFrOFlLlGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzMTM1Mw==", "bodyText": "@kritika-singh3 @arvindsv @adityasood\nPipeline reference rule defined on a config repository is not applicable for the pipelines coming from the same repository.\nDescription:\nFor the following rule:\n<allow action=\"refer\" type=\"pipeline\">up42</pipeline>\nFollowing partials are coming from config repository:\n\npipeline1 (which has a pipeline-dependency up42)\npipeline2 (which has a pipeline-dependency pipeline1)\n\nEven though, there is no explicit allow permission mentioned for pipeline1 pipeline dependency, it is allowed because both the pipelines are defined in the same repository.\nNote: We need to mention this behavior on our docs explicitly.", "url": "https://github.com/gocd/gocd/pull/7697#discussion_r374531353", "createdAt": "2020-02-04T08:30:28Z", "author": {"login": "GaneshSPatil"}, "path": "server/src/main/java/com/thoughtworks/go/config/update/PartialConfigUpdateCommand.java", "diffHunk": "@@ -58,4 +75,44 @@ public CruiseConfig update(CruiseConfig cruiseConfig) {\n         }\n         return cruiseConfig;\n     }\n+\n+    private boolean validateEntityForRules(PartialConfig partialConfig) {\n+        //preflight check\n+        if (configRepoConfig == null) {\n+            return true;\n+        }\n+\n+        if (configRepoConfig.getRules().isEmpty()) {\n+            throw new InvalidPartialConfigException(partialConfig, \"Configurations can not be merged as no rules are defined.\");\n+        }\n+\n+        partialConfig.getEnvironments().stream()\n+                .filter(env -> !configRepoConfig.canRefer(ENVIRONMENT.getEntityType(), env.name().toString()))\n+                .forEach(envThatCanNotBeReferred -> {\n+                    envThatCanNotBeReferred.addError(ENVIRONMENT.getType(), format(\"Cannot refer environment: '%s' from the config repository.\", envThatCanNotBeReferred.name()));\n+                });\n+\n+        partialConfig.getGroups().stream()\n+                .filter(pipelineGrp -> !configRepoConfig.canRefer(PIPELINE_GROUP.getEntityType(), pipelineGrp.getGroup()))\n+                .forEach(pipelineGrpThatCannotBeReferred -> {\n+                    pipelineGrpThatCannotBeReferred.addError(PIPELINE_GROUP.getType(), format(\"Cannot refer pipeline group: '%s' from the config repository.\", pipelineGrpThatCannotBeReferred.getGroup()));\n+                });\n+\n+        List<DependencyMaterialConfig> dependencyMaterialConfigs = new ArrayList<>();\n+        partialConfig.getGroups().forEach((pipelineGrp) -> {\n+            pipelineGrp.forEach((pipelineConfig) -> dependencyMaterialConfigs.addAll(pipelineConfig.dependencyMaterialConfigs()));\n+        });\n+        dependencyMaterialConfigs.stream()\n+                .filter(dependencyMaterialConfig -> !doesPipelineExistInPartialConfig(partialConfig, dependencyMaterialConfig.getPipelineName()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c85244b440c35f58f435a38b8eb17247614b97d"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2745, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}