{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNTkxMzY5", "number": 8898, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOToxNzo1MVrOFG3ZhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOToxNzo1MVrOFG3ZhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzQzNDI4OnYy", "diffSide": "RIGHT", "path": "api/api-internal-agent-v1/src/main/java/com/thoughtworks/go/apiv1/internalagent/InternalAgentControllerV1.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOToxNzo1MVrOIIE9Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMzowODoyM1rOIIRZ4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0MDY3OA==", "bodyText": "@maheshp If I\u2019m not mistaken, this returns raw text? For consistency, do you think we should quote it to be valid JSON?", "url": "https://github.com/gocd/gocd/pull/8898#discussion_r545340678", "createdAt": "2020-12-17T19:17:51Z", "author": {"login": "marques-work"}, "path": "api/api-internal-agent-v1/src/main/java/com/thoughtworks/go/apiv1/internalagent/InternalAgentControllerV1.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.thoughtworks.go.apiv1.internalagent;\n+\n+import com.thoughtworks.go.api.ApiController;\n+import com.thoughtworks.go.api.ApiVersion;\n+import com.thoughtworks.go.apiv1.internalagent.representers.*;\n+import com.thoughtworks.go.remote.AgentInstruction;\n+import com.thoughtworks.go.remote.request.*;\n+import com.thoughtworks.go.remote.work.Work;\n+import com.thoughtworks.go.server.messaging.BuildRepositoryMessageProducer;\n+import com.thoughtworks.go.spark.Routes;\n+import com.thoughtworks.go.spark.spring.SparkSpringController;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import spark.Request;\n+import spark.Response;\n+\n+import static com.thoughtworks.go.api.util.HaltApiResponses.haltBecauseForbidden;\n+import static java.lang.String.valueOf;\n+import static spark.Spark.*;\n+\n+@Component\n+public class InternalAgentControllerV1 extends ApiController implements SparkSpringController {\n+    private final BuildRepositoryMessageProducer buildRepositoryMessageProducer;\n+\n+    @Autowired\n+    public InternalAgentControllerV1(BuildRepositoryMessageProducer buildRepositoryMessageProducer) {\n+        super(ApiVersion.v1);\n+        this.buildRepositoryMessageProducer = buildRepositoryMessageProducer;\n+    }\n+\n+    @Override\n+    public String controllerBasePath() {\n+        return Routes.InternalAgent.BASE;\n+    }\n+\n+    @Override\n+    public void setupRoutes() {\n+        path(controllerBasePath(), () -> {\n+            before(\"\", mimeType, this::setContentType);\n+            before(\"/*\", mimeType, this::setContentType);\n+\n+            before(\"\", mimeType, this::verifyContentType);\n+            before(\"/*\", mimeType, this::verifyContentType);\n+\n+            post(Routes.InternalAgent.PING, mimeType, this::ping);\n+            post(Routes.InternalAgent.REPORT_CURRENT_STATUS, mimeType, this::reportCurrentStatus);\n+            post(Routes.InternalAgent.REPORT_COMPLETING, mimeType, this::reportCompleting);\n+            post(Routes.InternalAgent.REPORT_COMPLETED, mimeType, this::reportCompleted);\n+            post(Routes.InternalAgent.IS_IGNORED, mimeType, this::isIgnored);\n+            post(Routes.InternalAgent.GET_COOKIE, mimeType, this::getCookie);\n+            post(Routes.InternalAgent.GET_WORK, mimeType, this::getWork);\n+        });\n+    }\n+\n+    public String ping(Request request, Response response) {\n+        PingRequest pingRequest = PingRequestRepresenter.fromJSON(request.body());\n+        ensureAgentIsMakingARequestForItself(pingRequest, request);\n+\n+        AgentInstruction agentInstruction = buildRepositoryMessageProducer.ping(pingRequest.getAgentRuntimeInfo());\n+\n+        return AgentInstructionRepresenter.toJSON(agentInstruction);\n+    }\n+\n+    public String reportCurrentStatus(Request request, Response response) {\n+        ReportCurrentStatusRequest req = ReportCurrentStatusRequestRepresenter.fromJSON(request.body());\n+        ensureAgentIsMakingARequestForItself(req, request);\n+\n+        buildRepositoryMessageProducer.reportCurrentStatus(req.getAgentRuntimeInfo(), req.getJobIdentifier(),\n+                req.getJobState());\n+\n+        return NOTHING;\n+    }\n+\n+    public String reportCompleting(Request request, Response response) {\n+        ReportCompleteStatusRequest req = ReportCompleteStatusRequestRepresenter.fromJSON(request.body());\n+        ensureAgentIsMakingARequestForItself(req, request);\n+\n+        buildRepositoryMessageProducer.reportCompleting(req.getAgentRuntimeInfo(), req.getJobIdentifier(),\n+                req.getJobResult());\n+\n+        return NOTHING;\n+    }\n+\n+    public String reportCompleted(Request request, Response response) {\n+        ReportCompleteStatusRequest req = ReportCompleteStatusRequestRepresenter.fromJSON(request.body());\n+        ensureAgentIsMakingARequestForItself(req, request);\n+\n+        buildRepositoryMessageProducer.reportCompleted(req.getAgentRuntimeInfo(), req.getJobIdentifier(),\n+                req.getJobResult());\n+\n+        return NOTHING;\n+    }\n+\n+    public String isIgnored(Request request, Response response) {\n+        IsIgnoredRequest isIgnoredRequest = IsIgnoredRequestRepresenter.fromJSON(request.body());\n+        ensureAgentIsMakingARequestForItself(isIgnoredRequest, request);\n+\n+        boolean isIgnored = buildRepositoryMessageProducer.isIgnored(isIgnoredRequest.getAgentRuntimeInfo(), isIgnoredRequest.getJobIdentifier());\n+\n+        return valueOf(isIgnored);\n+    }\n+\n+    public String getCookie(Request request, Response response) {\n+        GetCookieRequest getCookieRequest = GetCookieRequestRepresenter.fromJSON(request.body());\n+        ensureAgentIsMakingARequestForItself(getCookieRequest, request);\n+\n+        return buildRepositoryMessageProducer.getCookie(getCookieRequest.getAgentRuntimeInfo());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b74314a09f067f0ff050916772939120b95c408"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU0NDY3Mw==", "bodyText": "You are right, I will change it.", "url": "https://github.com/gocd/gocd/pull/8898#discussion_r545544673", "createdAt": "2020-12-18T03:08:23Z", "author": {"login": "maheshp"}, "path": "api/api-internal-agent-v1/src/main/java/com/thoughtworks/go/apiv1/internalagent/InternalAgentControllerV1.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.thoughtworks.go.apiv1.internalagent;\n+\n+import com.thoughtworks.go.api.ApiController;\n+import com.thoughtworks.go.api.ApiVersion;\n+import com.thoughtworks.go.apiv1.internalagent.representers.*;\n+import com.thoughtworks.go.remote.AgentInstruction;\n+import com.thoughtworks.go.remote.request.*;\n+import com.thoughtworks.go.remote.work.Work;\n+import com.thoughtworks.go.server.messaging.BuildRepositoryMessageProducer;\n+import com.thoughtworks.go.spark.Routes;\n+import com.thoughtworks.go.spark.spring.SparkSpringController;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import spark.Request;\n+import spark.Response;\n+\n+import static com.thoughtworks.go.api.util.HaltApiResponses.haltBecauseForbidden;\n+import static java.lang.String.valueOf;\n+import static spark.Spark.*;\n+\n+@Component\n+public class InternalAgentControllerV1 extends ApiController implements SparkSpringController {\n+    private final BuildRepositoryMessageProducer buildRepositoryMessageProducer;\n+\n+    @Autowired\n+    public InternalAgentControllerV1(BuildRepositoryMessageProducer buildRepositoryMessageProducer) {\n+        super(ApiVersion.v1);\n+        this.buildRepositoryMessageProducer = buildRepositoryMessageProducer;\n+    }\n+\n+    @Override\n+    public String controllerBasePath() {\n+        return Routes.InternalAgent.BASE;\n+    }\n+\n+    @Override\n+    public void setupRoutes() {\n+        path(controllerBasePath(), () -> {\n+            before(\"\", mimeType, this::setContentType);\n+            before(\"/*\", mimeType, this::setContentType);\n+\n+            before(\"\", mimeType, this::verifyContentType);\n+            before(\"/*\", mimeType, this::verifyContentType);\n+\n+            post(Routes.InternalAgent.PING, mimeType, this::ping);\n+            post(Routes.InternalAgent.REPORT_CURRENT_STATUS, mimeType, this::reportCurrentStatus);\n+            post(Routes.InternalAgent.REPORT_COMPLETING, mimeType, this::reportCompleting);\n+            post(Routes.InternalAgent.REPORT_COMPLETED, mimeType, this::reportCompleted);\n+            post(Routes.InternalAgent.IS_IGNORED, mimeType, this::isIgnored);\n+            post(Routes.InternalAgent.GET_COOKIE, mimeType, this::getCookie);\n+            post(Routes.InternalAgent.GET_WORK, mimeType, this::getWork);\n+        });\n+    }\n+\n+    public String ping(Request request, Response response) {\n+        PingRequest pingRequest = PingRequestRepresenter.fromJSON(request.body());\n+        ensureAgentIsMakingARequestForItself(pingRequest, request);\n+\n+        AgentInstruction agentInstruction = buildRepositoryMessageProducer.ping(pingRequest.getAgentRuntimeInfo());\n+\n+        return AgentInstructionRepresenter.toJSON(agentInstruction);\n+    }\n+\n+    public String reportCurrentStatus(Request request, Response response) {\n+        ReportCurrentStatusRequest req = ReportCurrentStatusRequestRepresenter.fromJSON(request.body());\n+        ensureAgentIsMakingARequestForItself(req, request);\n+\n+        buildRepositoryMessageProducer.reportCurrentStatus(req.getAgentRuntimeInfo(), req.getJobIdentifier(),\n+                req.getJobState());\n+\n+        return NOTHING;\n+    }\n+\n+    public String reportCompleting(Request request, Response response) {\n+        ReportCompleteStatusRequest req = ReportCompleteStatusRequestRepresenter.fromJSON(request.body());\n+        ensureAgentIsMakingARequestForItself(req, request);\n+\n+        buildRepositoryMessageProducer.reportCompleting(req.getAgentRuntimeInfo(), req.getJobIdentifier(),\n+                req.getJobResult());\n+\n+        return NOTHING;\n+    }\n+\n+    public String reportCompleted(Request request, Response response) {\n+        ReportCompleteStatusRequest req = ReportCompleteStatusRequestRepresenter.fromJSON(request.body());\n+        ensureAgentIsMakingARequestForItself(req, request);\n+\n+        buildRepositoryMessageProducer.reportCompleted(req.getAgentRuntimeInfo(), req.getJobIdentifier(),\n+                req.getJobResult());\n+\n+        return NOTHING;\n+    }\n+\n+    public String isIgnored(Request request, Response response) {\n+        IsIgnoredRequest isIgnoredRequest = IsIgnoredRequestRepresenter.fromJSON(request.body());\n+        ensureAgentIsMakingARequestForItself(isIgnoredRequest, request);\n+\n+        boolean isIgnored = buildRepositoryMessageProducer.isIgnored(isIgnoredRequest.getAgentRuntimeInfo(), isIgnoredRequest.getJobIdentifier());\n+\n+        return valueOf(isIgnored);\n+    }\n+\n+    public String getCookie(Request request, Response response) {\n+        GetCookieRequest getCookieRequest = GetCookieRequestRepresenter.fromJSON(request.body());\n+        ensureAgentIsMakingARequestForItself(getCookieRequest, request);\n+\n+        return buildRepositoryMessageProducer.getCookie(getCookieRequest.getAgentRuntimeInfo());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0MDY3OA=="}, "originalCommit": {"oid": "9b74314a09f067f0ff050916772939120b95c408"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2674, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}