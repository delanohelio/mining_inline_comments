{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNTE3Mzg5", "number": 8646, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNToxMTowMFrOEs3gvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNToxNDo1OFrOEs3jmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDgyMzAzOnYy", "diffSide": "RIGHT", "path": "api/api-webhook-v1/src/main/java/com/thoughtworks/go/apiv1/webhook/request/mixins/bitbucketcloud/BitBucketCloudAuth.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNToxMTowMFrOHgVmug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNTozMjowM1rOHgV9_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3MDQ1OA==", "bodyText": "Wouldn't this take the username and not the personal token?", "url": "https://github.com/gocd/gocd/pull/8646#discussion_r503670458", "createdAt": "2020-10-13T05:11:00Z", "author": {"login": "marques-work"}, "path": "api/api-webhook-v1/src/main/java/com/thoughtworks/go/apiv1/webhook/request/mixins/bitbucketcloud/BitBucketCloudAuth.java", "diffHunk": "@@ -63,7 +63,7 @@ private String getTokenFromHeader(Request request) {\n             }\n \n             String encodedCredentials = new String(Base64.getDecoder().decode(credentials), UTF_8);\n-            return encodedCredentials.contains(\":\") ? split(encodedCredentials, \":\", 2)[1] : encodedCredentials;\n+            return encodedCredentials.contains(\":\") ? split(encodedCredentials, \":\", 2)[0] : encodedCredentials;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d7824676191816418e7eaa2a177e58a175ef46e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3NTI1OQ==", "bodyText": "In our API docs, we have mentioned to put the webhook secret as username and some random value as password: https://api.gocd.org/current/#hosting-on-bitbucket\nI think Bitbucket does not recognize personal token in url - it only takes username:password format.", "url": "https://github.com/gocd/gocd/pull/8646#discussion_r503675259", "createdAt": "2020-10-13T05:28:05Z", "author": {"login": "kritika-singh3"}, "path": "api/api-webhook-v1/src/main/java/com/thoughtworks/go/apiv1/webhook/request/mixins/bitbucketcloud/BitBucketCloudAuth.java", "diffHunk": "@@ -63,7 +63,7 @@ private String getTokenFromHeader(Request request) {\n             }\n \n             String encodedCredentials = new String(Base64.getDecoder().decode(credentials), UTF_8);\n-            return encodedCredentials.contains(\":\") ? split(encodedCredentials, \":\", 2)[1] : encodedCredentials;\n+            return encodedCredentials.contains(\":\") ? split(encodedCredentials, \":\", 2)[0] : encodedCredentials;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3MDQ1OA=="}, "originalCommit": {"oid": "4d7824676191816418e7eaa2a177e58a175ef46e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3NjQxMw==", "bodyText": "@kritika-singh3 ah ok, disregard my first point in my review summary then", "url": "https://github.com/gocd/gocd/pull/8646#discussion_r503676413", "createdAt": "2020-10-13T05:32:03Z", "author": {"login": "marques-work"}, "path": "api/api-webhook-v1/src/main/java/com/thoughtworks/go/apiv1/webhook/request/mixins/bitbucketcloud/BitBucketCloudAuth.java", "diffHunk": "@@ -63,7 +63,7 @@ private String getTokenFromHeader(Request request) {\n             }\n \n             String encodedCredentials = new String(Base64.getDecoder().decode(credentials), UTF_8);\n-            return encodedCredentials.contains(\":\") ? split(encodedCredentials, \":\", 2)[1] : encodedCredentials;\n+            return encodedCredentials.contains(\":\") ? split(encodedCredentials, \":\", 2)[0] : encodedCredentials;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3MDQ1OA=="}, "originalCommit": {"oid": "4d7824676191816418e7eaa2a177e58a175ef46e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDgzMDM1OnYy", "diffSide": "RIGHT", "path": "api/api-webhook-v1/src/test/groovy/com/thoughtworks/go/apiv1/webhook/request/push/BitBucketCloudPushRequestTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNToxNDo1OFrOHgVq6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNToyODoyNFrOHgV5zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3MTUzMQ==", "bodyText": "This isn't wrong, but isn't this more simply new String[]{\"scm1\"}?", "url": "https://github.com/gocd/gocd/pull/8646#discussion_r503671531", "createdAt": "2020-10-13T05:14:58Z", "author": {"login": "marques-work"}, "path": "api/api-webhook-v1/src/test/groovy/com/thoughtworks/go/apiv1/webhook/request/push/BitBucketCloudPushRequestTest.java", "diffHunk": "@@ -93,6 +96,26 @@ void shouldGuessTheWebhookUrls(String body) {\n                 );\n     }\n \n+    @ParameterizedTest\n+    @FileSource(files = \"/bitbucket-payload.json\")\n+    void shouldReturnScmNameIfAny(String body) {\n+        Request request = newRequestWithAuthorizationHeader(\"repo:push\", \"\", body);\n+\n+        BitBucketCloudPushRequest bitBucketCloudPushRequest = new BitBucketCloudPushRequest(request);\n+        QueryParamsMap map = mock(QueryParamsMap.class);\n+        when(request.queryMap()).thenReturn(map);\n+        when(map.hasKey(KEY_SCM_NAME)).thenReturn(false);\n+        assertThat(bitBucketCloudPushRequest.getScmNames()).isEmpty();\n+\n+        when(request.queryMap()).thenReturn(map);\n+        when(map.hasKey(KEY_SCM_NAME)).thenReturn(true);\n+\n+        QueryParamsMap value = mock(QueryParamsMap.class);\n+        when(map.get(KEY_SCM_NAME)).thenReturn(value);\n+        when(value.values()).thenReturn(singletonList(\"scm1\").toArray(new String[]{}));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d7824676191816418e7eaa2a177e58a175ef46e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3NTM0Mw==", "bodyText": "Yes u r right - will update it", "url": "https://github.com/gocd/gocd/pull/8646#discussion_r503675343", "createdAt": "2020-10-13T05:28:24Z", "author": {"login": "kritika-singh3"}, "path": "api/api-webhook-v1/src/test/groovy/com/thoughtworks/go/apiv1/webhook/request/push/BitBucketCloudPushRequestTest.java", "diffHunk": "@@ -93,6 +96,26 @@ void shouldGuessTheWebhookUrls(String body) {\n                 );\n     }\n \n+    @ParameterizedTest\n+    @FileSource(files = \"/bitbucket-payload.json\")\n+    void shouldReturnScmNameIfAny(String body) {\n+        Request request = newRequestWithAuthorizationHeader(\"repo:push\", \"\", body);\n+\n+        BitBucketCloudPushRequest bitBucketCloudPushRequest = new BitBucketCloudPushRequest(request);\n+        QueryParamsMap map = mock(QueryParamsMap.class);\n+        when(request.queryMap()).thenReturn(map);\n+        when(map.hasKey(KEY_SCM_NAME)).thenReturn(false);\n+        assertThat(bitBucketCloudPushRequest.getScmNames()).isEmpty();\n+\n+        when(request.queryMap()).thenReturn(map);\n+        when(map.hasKey(KEY_SCM_NAME)).thenReturn(true);\n+\n+        QueryParamsMap value = mock(QueryParamsMap.class);\n+        when(map.get(KEY_SCM_NAME)).thenReturn(value);\n+        when(value.values()).thenReturn(singletonList(\"scm1\").toArray(new String[]{}));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3MTUzMQ=="}, "originalCommit": {"oid": "4d7824676191816418e7eaa2a177e58a175ef46e"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2682, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}