{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MjY3Mzcw", "number": 8334, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOToyNzozMFrOEQEidg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOToyNzozMFrOEQEidg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Mjg3MDMwOnYy", "diffSide": "RIGHT", "path": "api/api-version-infos-v1/src/main/java/com/thoughtworks/go/apiv1/versioninfos/VersionInfosControllerV1.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOToyNzozMFrOG0CUgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozNjowOFrOG0CvpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxNzE1Mg==", "bodyText": "need to specify mimeType. Not specifying mimeType will cause the API to work for all the API versions.\nExample:\nchange:  get(Routes.VersionInfos.STALE, this::stale);\nto            get(Routes.VersionInfos.STALE, mimeType, this::stale);", "url": "https://github.com/gocd/gocd/pull/8334#discussion_r457217152", "createdAt": "2020-07-20T09:27:30Z", "author": {"login": "GaneshSPatil"}, "path": "api/api-version-infos-v1/src/main/java/com/thoughtworks/go/apiv1/versioninfos/VersionInfosControllerV1.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.thoughtworks.go.apiv1.versioninfos;\n+\n+import com.thoughtworks.go.api.ApiController;\n+import com.thoughtworks.go.api.ApiVersion;\n+import com.thoughtworks.go.api.representers.JsonReader;\n+import com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\n+import com.thoughtworks.go.api.util.GsonTransformer;\n+import com.thoughtworks.go.apiv1.versioninfos.models.GoLatestVersion;\n+import com.thoughtworks.go.apiv1.versioninfos.representers.GoLatestVersionRepresenter;\n+import com.thoughtworks.go.apiv1.versioninfos.representers.VersionInfoRepresenter;\n+import com.thoughtworks.go.domain.VersionInfo;\n+import com.thoughtworks.go.server.service.VersionInfoService;\n+import com.thoughtworks.go.server.service.result.HttpLocalizedOperationResult;\n+import com.thoughtworks.go.spark.Routes;\n+import com.thoughtworks.go.spark.spring.SparkSpringController;\n+import com.thoughtworks.go.util.SystemEnvironment;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import spark.Request;\n+import spark.Response;\n+\n+import java.io.IOException;\n+\n+import static spark.Spark.*;\n+\n+@Component\n+public class VersionInfosControllerV1 extends ApiController implements SparkSpringController {\n+    private final ApiAuthenticationHelper apiAuthenticationHelper;\n+    private VersionInfoService versionInfoService;\n+    private SystemEnvironment systemEnvironment;\n+\n+    @Autowired\n+    public VersionInfosControllerV1(ApiAuthenticationHelper apiAuthenticationHelper, VersionInfoService versionInfoService, SystemEnvironment systemEnvironment) {\n+        super(ApiVersion.v1);\n+        this.apiAuthenticationHelper = apiAuthenticationHelper;\n+        this.versionInfoService = versionInfoService;\n+        this.systemEnvironment = systemEnvironment;\n+    }\n+\n+    @Override\n+    public String controllerBasePath() {\n+        return Routes.VersionInfos.BASE;\n+    }\n+\n+    @Override\n+    public void setupRoutes() {\n+        path(controllerBasePath(), () -> {\n+            before(\"\", mimeType, this::setContentType);\n+            before(\"/*\", mimeType, this::setContentType);\n+\n+            before(\"\", mimeType, this.apiAuthenticationHelper::checkUserAnd403);\n+            before(\"/*\", mimeType, this.apiAuthenticationHelper::checkUserAnd403);\n+\n+            get(Routes.VersionInfos.STALE, this::stale);\n+            get(Routes.VersionInfos.LATEST_VERSION, this::latestVersion);\n+            patch(Routes.VersionInfos.GO_SERVER, this::updateGoServerInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d7e06ea48cb8160b6d4a20cfeb8d589b28789a"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyNDEwMQ==", "bodyText": "Done: #8359\nThanks!", "url": "https://github.com/gocd/gocd/pull/8334#discussion_r457224101", "createdAt": "2020-07-20T09:36:08Z", "author": {"login": "kritika-singh3"}, "path": "api/api-version-infos-v1/src/main/java/com/thoughtworks/go/apiv1/versioninfos/VersionInfosControllerV1.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.thoughtworks.go.apiv1.versioninfos;\n+\n+import com.thoughtworks.go.api.ApiController;\n+import com.thoughtworks.go.api.ApiVersion;\n+import com.thoughtworks.go.api.representers.JsonReader;\n+import com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\n+import com.thoughtworks.go.api.util.GsonTransformer;\n+import com.thoughtworks.go.apiv1.versioninfos.models.GoLatestVersion;\n+import com.thoughtworks.go.apiv1.versioninfos.representers.GoLatestVersionRepresenter;\n+import com.thoughtworks.go.apiv1.versioninfos.representers.VersionInfoRepresenter;\n+import com.thoughtworks.go.domain.VersionInfo;\n+import com.thoughtworks.go.server.service.VersionInfoService;\n+import com.thoughtworks.go.server.service.result.HttpLocalizedOperationResult;\n+import com.thoughtworks.go.spark.Routes;\n+import com.thoughtworks.go.spark.spring.SparkSpringController;\n+import com.thoughtworks.go.util.SystemEnvironment;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import spark.Request;\n+import spark.Response;\n+\n+import java.io.IOException;\n+\n+import static spark.Spark.*;\n+\n+@Component\n+public class VersionInfosControllerV1 extends ApiController implements SparkSpringController {\n+    private final ApiAuthenticationHelper apiAuthenticationHelper;\n+    private VersionInfoService versionInfoService;\n+    private SystemEnvironment systemEnvironment;\n+\n+    @Autowired\n+    public VersionInfosControllerV1(ApiAuthenticationHelper apiAuthenticationHelper, VersionInfoService versionInfoService, SystemEnvironment systemEnvironment) {\n+        super(ApiVersion.v1);\n+        this.apiAuthenticationHelper = apiAuthenticationHelper;\n+        this.versionInfoService = versionInfoService;\n+        this.systemEnvironment = systemEnvironment;\n+    }\n+\n+    @Override\n+    public String controllerBasePath() {\n+        return Routes.VersionInfos.BASE;\n+    }\n+\n+    @Override\n+    public void setupRoutes() {\n+        path(controllerBasePath(), () -> {\n+            before(\"\", mimeType, this::setContentType);\n+            before(\"/*\", mimeType, this::setContentType);\n+\n+            before(\"\", mimeType, this.apiAuthenticationHelper::checkUserAnd403);\n+            before(\"/*\", mimeType, this.apiAuthenticationHelper::checkUserAnd403);\n+\n+            get(Routes.VersionInfos.STALE, this::stale);\n+            get(Routes.VersionInfos.LATEST_VERSION, this::latestVersion);\n+            patch(Routes.VersionInfos.GO_SERVER, this::updateGoServerInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxNzE1Mg=="}, "originalCommit": {"oid": "31d7e06ea48cb8160b6d4a20cfeb8d589b28789a"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2837, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}