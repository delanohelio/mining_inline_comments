{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMjA2OTUw", "number": 8426, "title": "Add internal endpoint to render modifications for a given material", "bodyText": "Issue: #8331\nDescription:\n\nadded internal endpoint to render modifications for a given fingerprint\nsupports cursor based pagination\nalso support search based on pattern which tests for the presence of the specified string in username, revision and comment.\n\nRequest:\ncurl 'http://localhost:8153/go/api/internal/materials/some-fingerprint/modifications' \\\n      -u 'username:password' \\\n      -H 'Accept: application/vnd.go.cd+json'\nResponse:\n{\n  \"_links\": {\n    \"next\": {\n      \"href\": \"http://localhost:8153/go/api/internal/materials/some-fingerprint/modifications?after=26\"\n    }\n  },\n  \"modifications\": [\n    {\n      \"username\": \"GoCD Test User <some@test.com>\",\n      \"revision\": \"4ac44673467473c7517e94\",\n      \"modified_time\": \"2020-07-29T10:07:49Z\",\n      \"comment\": \"delete c\"\n    },\n   ....\n}", "createdAt": "2020-08-05T07:41:28Z", "url": "https://github.com/gocd/gocd/pull/8426", "merged": true, "mergeCommit": {"oid": "bdf7857c418218dbc7207b82e1cf2d6129e9247d"}, "closed": true, "closedAt": "2020-08-07T05:42:58Z", "author": {"login": "kritika-singh3"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8AAKdgFqTQ2MTgyNzg2Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8dU8uABqjM2MzE3Njg3NjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxODI3ODY2", "url": "https://github.com/gocd/gocd/pull/8426#pullrequestreview-461827866", "createdAt": "2020-08-05T16:26:32Z", "commit": {"oid": "ab3ce163418dd6e4352b6e8df66e2c291a288867"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNjoyNjozM1rOG8RRyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODoyMDozMFrOG8VTyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg1MDgyNw==", "bodyText": "I would probably add these methods to ApiController over creating this new interface.", "url": "https://github.com/gocd/gocd/pull/8426#discussion_r465850827", "createdAt": "2020-08-05T16:26:33Z", "author": {"login": "maheshp"}, "path": "api/api-base/src/main/java/com/thoughtworks/go/api/HistoryMethods.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.thoughtworks.go.api;\n+\n+import com.thoughtworks.go.config.exceptions.BadRequestException;\n+import spark.Request;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+\n+public interface HistoryMethods {\n+    String BAD_PAGE_SIZE_MSG = \"The query parameter 'page_size', if specified must be a number between 10 and 100.\";\n+    String BAD_CURSOR_MSG = \"The query parameter '%s', if specified, must be a positive integer.\";\n+\n+    default Integer getPageSize(Request request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab3ce163418dd6e4352b6e8df66e2c291a288867"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxNjA0Nw==", "bodyText": "Is the lookup for MaterialInstance required, we get the material fingerprint as part of the request, can't we just fire a single query to fetch modifications and join on materials which matches the fingerprint?", "url": "https://github.com/gocd/gocd/pull/8426#discussion_r465916047", "createdAt": "2020-08-05T18:19:03Z", "author": {"login": "maheshp"}, "path": "server/src/main/java/com/thoughtworks/go/server/service/MaterialService.java", "diffHunk": "@@ -169,4 +172,44 @@ private void resolveSecretParams(Material material) {\n                 .stream()\n                 .collect(toMap(mod -> mod.getMaterialInstance().getFingerprint(), mod -> mod));\n     }\n+\n+    public List<Modification> getModificationsFor(MaterialConfig materialConfig, long afterCursor, long beforeCursor, Integer pageSize) {\n+        MaterialInstance materialInstance = materialRepository.findMaterialInstance(materialConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab3ce163418dd6e4352b6e8df66e2c291a288867"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxNjg3Mg==", "bodyText": "Why do we need a exactMatchQuery, are we expecting users to provide the complete material revision?", "url": "https://github.com/gocd/gocd/pull/8426#discussion_r465916872", "createdAt": "2020-08-05T18:20:30Z", "author": {"login": "maheshp"}, "path": "server/src/main/java/com/thoughtworks/go/server/persistence/MaterialRepository.java", "diffHunk": "@@ -1040,4 +1042,172 @@ public File folderFor(Material material) {\n                     .list();\n         });\n     }\n+\n+    public List<Modification> loadHistory(long materialId, FeedModifier modifier, long cursor, Integer pageSize) {\n+        Map<String, Object> params = new HashMap<>();\n+        String queryString = null;\n+        switch (modifier) {\n+            case Latest:\n+                queryString = \"SELECT * \" +\n+                        \"FROM modifications \" +\n+                        \"WHERE materialid = :materialId \" +\n+                        \"ORDER BY id DESC \" +\n+                        \"LIMIT :size \";\n+                params.put(\"materialId\", materialId);\n+                params.put(\"size\", pageSize);\n+                break;\n+            case After:\n+                queryString = \"SELECT * \" +\n+                        \"FROM modifications \" +\n+                        \"WHERE materialid = :materialId \" +\n+                        \"  and id < :cursor \" +\n+                        \"ORDER BY id DESC \" +\n+                        \"LIMIT :size \";\n+                params.put(\"materialId\", materialId);\n+                params.put(\"size\", pageSize);\n+                params.put(\"cursor\", cursor);\n+                break;\n+            case Before:\n+                queryString = \"SELECT * \" +\n+                        \"FROM (SELECT * \" +\n+                        \"      FROM modifications \" +\n+                        \"      WHERE materialid = :materialId \" +\n+                        \"        and id > :cursor \" +\n+                        \"      ORDER BY id ASC \" +\n+                        \"      LIMIT :size ) as HistoryBeforeSpecifiedId \" +\n+                        \"ORDER BY id DESC\";\n+                params.put(\"materialId\", materialId);\n+                params.put(\"size\", pageSize);\n+                params.put(\"cursor\", cursor);\n+                break;\n+        }\n+        String finalQueryString = queryString;\n+        List<Modification> mods = (List<Modification>) getHibernateTemplate().execute((HibernateCallback) session -> {\n+            SQLQuery query = session.createSQLQuery(finalQueryString);\n+            query.setProperties(params);\n+            return query.addEntity(\"mods\", Modification.class)\n+                    .list();\n+        });\n+        return mods;\n+    }\n+\n+    public PipelineRunIdInfo getOldestAndLatestModificationId(long materialId, String pattern) {\n+        String queryString = \"SELECT MAX(modifications.id) as latestRunId, MIN(modifications.id) as oldestRunId \" +\n+                \"FROM modifications \" +\n+                \"WHERE modifications.materialid = :materialId \";\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"materialId\", materialId);\n+        if (isNotBlank(pattern)) {\n+            queryString = queryString +\n+                    \"  AND (LOWER(modifications.comment) LIKE :pattern \" +\n+                    \"  OR LOWER(modifications.userName) LIKE :pattern \" +\n+                    \"  OR LOWER(modifications.revision) LIKE :pattern ) \";\n+\n+            params.put(\"pattern\", \"%\" + pattern.toLowerCase() + \"%\");\n+        }\n+        String finalQueryString = queryString;\n+        Object[] info = (Object[]) getHibernateTemplate().execute((HibernateCallback) session -> {\n+            SQLQuery query = session.createSQLQuery(finalQueryString);\n+            query.setProperties(params);\n+            return query.addScalar(\"latestRunId\", new LongType())\n+                    .addScalar(\"oldestRunId\", new LongType())\n+                    .uniqueResult();\n+        });\n+        if (info == null || info[0] == null || info[1] == null) {\n+            return null;\n+        }\n+        return new PipelineRunIdInfo((long) info[0], (long) info[1]);\n+    }\n+\n+    public List<Modification> findLatestMatchingModifications(long materialId, String pattern, Integer pageSize) {\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"materialId\", materialId);\n+        params.put(\"pattern\", \"%\" + pattern.toLowerCase() + \"%\");\n+        params.put(\"rawPattern\", pattern.toLowerCase());\n+        params.put(\"size\", pageSize);\n+        String exactMatchQuery = \"SELECT * \" +\n+                \"FROM modifications \" +\n+                \"WHERE materialid = :materialId \" +\n+                \"  AND LOWER(revision) = :rawPattern \" +\n+                \"ORDER BY id DESC \" +\n+                \"LIMIT :size\";\n+        String likeMatchQuery = \"SELECT * \" +\n+                \"FROM modifications \" +\n+                \"WHERE materialid = :materialId \" +\n+                \"  AND (LOWER(modifications.comment) LIKE :pattern \" +\n+                \"  OR LOWER(userName) LIKE :pattern \" +\n+                \"  OR LOWER(revision) LIKE :pattern ) \" +\n+                \"ORDER BY id DESC \" +\n+                \"LIMIT :size\";\n+        return getMatchingModifications(exactMatchQuery, likeMatchQuery, params);\n+    }\n+\n+    public List<Modification> findMatchingModificationsBeforeCursor(long materialId, String pattern, long cursor, Integer pageSize) {\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"materialId\", materialId);\n+        params.put(\"pattern\", \"%\" + pattern.toLowerCase() + \"%\");\n+        params.put(\"rawPattern\", pattern.toLowerCase());\n+        params.put(\"size\", pageSize);\n+        params.put(\"cursor\", cursor);\n+        String exactMatchQuery = \"SELECT * \" +\n+                \"FROM ( SELECT * \" +\n+                \"    FROM modifications \" +\n+                \"    WHERE materialid = :materialId AND id > :cursor \" +\n+                \"      AND LOWER(revision) = :rawPattern \" +\n+                \"    ORDER BY id DESC \" +\n+                \"    LIMIT :size ) as MatchBeforeSpecifiedCursor \" +\n+                \"ORDER BY id DESC\";\n+        String likeMatchQuery = \"SELECT * \" +\n+                \"FROM ( SELECT * \" +\n+                \"    FROM modifications \" +\n+                \"    WHERE materialid = :materialId AND id > :cursor \" +\n+                \"      AND (LOWER(modifications.comment) LIKE :pattern \" +\n+                \"      OR LOWER(userName) LIKE :pattern \" +\n+                \"      OR LOWER(revision) LIKE :pattern ) \" +\n+                \"    ORDER BY id DESC \" +\n+                \"    LIMIT :size) as LikeMatchBeforeSpecifiedCursor \" +\n+                \"ORDER BY id DESC\";\n+        return getMatchingModifications(exactMatchQuery, likeMatchQuery, params);\n+    }\n+\n+    public List<Modification> findMatchingModificationsAfterCursor(long materialId, String pattern, long cursor, Integer pageSize) {\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"materialId\", materialId);\n+        params.put(\"pattern\", \"%\" + pattern.toLowerCase() + \"%\");\n+        params.put(\"rawPattern\", pattern.toLowerCase());\n+        params.put(\"size\", pageSize);\n+        params.put(\"cursor\", cursor);\n+        String exactMatchQuery = \"SELECT * \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab3ce163418dd6e4352b6e8df66e2c291a288867"}, "originalPosition": 155}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab3ce163418dd6e4352b6e8df66e2c291a288867", "author": {"user": {"login": "kritika-singh3", "name": "Kritika"}}, "url": "https://github.com/gocd/gocd/commit/ab3ce163418dd6e4352b6e8df66e2c291a288867", "committedDate": "2020-08-05T07:36:57Z", "message": "Update:\n\n - added support for `pattern` query paramater for modification endpoint\n - will return modifications which contains the specified pattern in revision, comment and username\n - supports cursor based pagination"}, "afterCommit": {"oid": "22f9231d3e4470b1c8fa7085b58eae2de16fe288", "author": {"user": {"login": "kritika-singh3", "name": "Kritika"}}, "url": "https://github.com/gocd/gocd/commit/22f9231d3e4470b1c8fa7085b58eae2de16fe288", "committedDate": "2020-08-06T05:31:02Z", "message": "Removed the exact match query from modification search\n - refactored a bit"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "22f9231d3e4470b1c8fa7085b58eae2de16fe288", "author": {"user": {"login": "kritika-singh3", "name": "Kritika"}}, "url": "https://github.com/gocd/gocd/commit/22f9231d3e4470b1c8fa7085b58eae2de16fe288", "committedDate": "2020-08-06T05:31:02Z", "message": "Removed the exact match query from modification search\n - refactored a bit"}, "afterCommit": {"oid": "79eb91373253078fb565ad73718c9a5f0242b996", "author": {"user": {"login": "kritika-singh3", "name": "Kritika"}}, "url": "https://github.com/gocd/gocd/commit/79eb91373253078fb565ad73718c9a5f0242b996", "committedDate": "2020-08-06T08:05:37Z", "message": "Removed the exact match query from modification search\n - refactored a bit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e78edca4bd164b9220be7a330bb401ef87119b3", "author": {"user": {"login": "kritika-singh3", "name": "Kritika"}}, "url": "https://github.com/gocd/gocd/commit/3e78edca4bd164b9220be7a330bb401ef87119b3", "committedDate": "2020-08-07T03:49:23Z", "message": "Refactored:\n - moved the logic of extracting cursor and page_size to interface HistoryMethods\n - moved the logic of validating cursor to ServiceConstants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d922baf8f42ef5ec9255bd46f690292fc31f7a6", "author": {"user": {"login": "kritika-singh3", "name": "Kritika"}}, "url": "https://github.com/gocd/gocd/commit/8d922baf8f42ef5ec9255bd46f690292fc31f7a6", "committedDate": "2020-08-07T03:49:23Z", "message": "Updates\n - added modification endpoint for a given material fingerprint\n - utilized cursor based pagination for the same"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65638505267995d0c812a8123fb93022320be83a", "author": {"user": {"login": "kritika-singh3", "name": "Kritika"}}, "url": "https://github.com/gocd/gocd/commit/65638505267995d0c812a8123fb93022320be83a", "committedDate": "2020-08-07T03:49:23Z", "message": "Update:\n\n - added support for `pattern` query paramater for modification endpoint\n - will return modifications which contains the specified pattern in revision, comment and username\n - supports cursor based pagination"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbe5c1965223d9be7634a7f0281c7dedfc25249c", "author": {"user": {"login": "kritika-singh3", "name": "Kritika"}}, "url": "https://github.com/gocd/gocd/commit/fbe5c1965223d9be7634a7f0281c7dedfc25249c", "committedDate": "2020-08-07T03:49:23Z", "message": "Merge HistoryMethods with ApiController. The former served as a holder for helper methods. The latter was a better place for them."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ccd8de2ab296ca2c64f33086ae2e8a7ae26b696", "author": {"user": {"login": "kritika-singh3", "name": "Kritika"}}, "url": "https://github.com/gocd/gocd/commit/7ccd8de2ab296ca2c64f33086ae2e8a7ae26b696", "committedDate": "2020-08-07T03:49:23Z", "message": "Removed the exact match query from modification search\n - refactored a bit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "037b9016a2693a9885cfc840bc6a74986b0601f2", "author": {"user": {"login": "kritika-singh3", "name": "Kritika"}}, "url": "https://github.com/gocd/gocd/commit/037b9016a2693a9885cfc840bc6a74986b0601f2", "committedDate": "2020-08-07T05:10:56Z", "message": "Refactored for cleaner code\n - add pattern to the next and previous link if present"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79eb91373253078fb565ad73718c9a5f0242b996", "author": {"user": {"login": "kritika-singh3", "name": "Kritika"}}, "url": "https://github.com/gocd/gocd/commit/79eb91373253078fb565ad73718c9a5f0242b996", "committedDate": "2020-08-06T08:05:37Z", "message": "Removed the exact match query from modification search\n - refactored a bit"}, "afterCommit": {"oid": "037b9016a2693a9885cfc840bc6a74986b0601f2", "author": {"user": {"login": "kritika-singh3", "name": "Kritika"}}, "url": "https://github.com/gocd/gocd/commit/037b9016a2693a9885cfc840bc6a74986b0601f2", "committedDate": "2020-08-07T05:10:56Z", "message": "Refactored for cleaner code\n - add pattern to the next and previous link if present"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1847, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}