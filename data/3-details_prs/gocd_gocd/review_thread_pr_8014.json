{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzODI2MDQ4", "number": 8014, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyMDoyOVrODyHyTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyMDoyOVrODyHyTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODgyOTU5OnYy", "diffSide": "RIGHT", "path": "config/config-api/src/test/java/com/thoughtworks/go/config/materials/AbstractMaterialConfigTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyMDoyOVrOGF-6Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNTo0OTo0MlrOGGVg_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNjcyNw==", "bodyText": "@GaneshSPatil  I hope the conversion was correct.", "url": "https://github.com/gocd/gocd/pull/8014#discussion_r408926727", "createdAt": "2020-04-15T15:20:29Z", "author": {"login": "kritika-singh3"}, "path": "config/config-api/src/test/java/com/thoughtworks/go/config/materials/AbstractMaterialConfigTest.java", "diffHunk": "@@ -15,87 +15,85 @@\n  */\n package com.thoughtworks.go.config.materials;\n \n-import com.thoughtworks.go.config.*;\n+import com.thoughtworks.go.config.CaseInsensitiveString;\n+import com.thoughtworks.go.config.PipelineConfig;\n+import com.thoughtworks.go.config.PipelineConfigSaveValidationContext;\n+import com.thoughtworks.go.config.ValidationContext;\n import com.thoughtworks.go.config.materials.dependency.DependencyMaterialConfig;\n import com.thoughtworks.go.config.materials.mercurial.HgMaterialConfig;\n import com.thoughtworks.go.domain.BaseCollection;\n import com.thoughtworks.go.domain.materials.MaterialConfig;\n-import org.hamcrest.Matchers;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.util.HashMap;\n import java.util.Map;\n \n-import static org.hamcrest.Matchers.not;\n-import static org.hamcrest.Matchers.sameInstance;\n-import static org.hamcrest.Matchers.is;\n-import static org.hamcrest.Matchers.nullValue;\n-import static org.junit.Assert.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.*;\n \n-public class AbstractMaterialConfigTest {\n+class AbstractMaterialConfigTest {\n     @Test\n-    public void shouldRecomputePipelineUniqueFingerprint_whenAttributesChanged() {\n+    void shouldRecomputePipelineUniqueFingerprint_whenAttributesChanged() {\n         TestMaterialConfig testMaterialConfig = new TestMaterialConfig(\"foo\");\n \n         String pipelineUniqueFingerprint = testMaterialConfig.getPipelineUniqueFingerprint();\n         testMaterialConfig.setConfigAttributes(m(\"bar\", \"baz\"));\n-        assertThat(testMaterialConfig.getPipelineUniqueFingerprint(), not(pipelineUniqueFingerprint));\n+        assertThat(testMaterialConfig.getPipelineUniqueFingerprint()).isNotEqualTo(pipelineUniqueFingerprint);\n     }\n \n     @Test\n-    public void shouldNotSetMaterialNameIfItIsSetToEmptyAsItsAnOptionalField() {\n+    void shouldNotSetMaterialNameIfItIsSetToEmptyAsItsAnOptionalField() {\n         AbstractMaterialConfig materialConfig = new TestMaterialConfig(\"\");\n         Map<String, String> map = new HashMap<>();\n         map.put(AbstractMaterialConfig.MATERIAL_NAME, \"\");\n \n         materialConfig.setConfigAttributes(map);\n \n-        assertThat(materialConfig.getName(), is(nullValue()));\n+        assertThat(materialConfig.getName()).isNull();\n     }\n \n     @Test\n-    public void shouldRecomputeSqlCriteriaAndXmlAttributeMap_whenAttributesChanged() {\n+    void shouldRecomputeSqlCriteriaAndXmlAttributeMap_whenAttributesChanged() {\n         AbstractMaterialConfig testMaterialConfig = new TestMaterialConfig(\"foo\");\n \n         Map<String, Object> sqlCriteria = testMaterialConfig.getSqlCriteria();\n         testMaterialConfig.setConfigAttributes(m(\"bar\", \"baz\"));\n-        assertThat(testMaterialConfig.getSqlCriteria(), not(sameInstance(sqlCriteria)));\n-        assertThat(testMaterialConfig.getSqlCriteria().get(\"foo\"), is(\"baz\"));\n+        assertThat(testMaterialConfig.getSqlCriteria()).isNotEqualTo(sqlCriteria);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09ca93580804dcd7c74a38d4e7a8e9640bb136c4"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MDA4NA==", "bodyText": "@kritika-singh3 - https://github.com/gocd/gocd/pull/8013/files#diff-1ff479f423bf1a1145900a784673600aR52-R53 is the only change which can possibly cause the spec failures. I am not sure why this would fail.\nAlso, we must bring back assertThat(testMaterialConfig.getSqlCriteria().get(\"foo\"), is(\"baz\")); assertion.", "url": "https://github.com/gocd/gocd/pull/8014#discussion_r409270084", "createdAt": "2020-04-16T04:11:20Z", "author": {"login": "GaneshSPatil"}, "path": "config/config-api/src/test/java/com/thoughtworks/go/config/materials/AbstractMaterialConfigTest.java", "diffHunk": "@@ -15,87 +15,85 @@\n  */\n package com.thoughtworks.go.config.materials;\n \n-import com.thoughtworks.go.config.*;\n+import com.thoughtworks.go.config.CaseInsensitiveString;\n+import com.thoughtworks.go.config.PipelineConfig;\n+import com.thoughtworks.go.config.PipelineConfigSaveValidationContext;\n+import com.thoughtworks.go.config.ValidationContext;\n import com.thoughtworks.go.config.materials.dependency.DependencyMaterialConfig;\n import com.thoughtworks.go.config.materials.mercurial.HgMaterialConfig;\n import com.thoughtworks.go.domain.BaseCollection;\n import com.thoughtworks.go.domain.materials.MaterialConfig;\n-import org.hamcrest.Matchers;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.util.HashMap;\n import java.util.Map;\n \n-import static org.hamcrest.Matchers.not;\n-import static org.hamcrest.Matchers.sameInstance;\n-import static org.hamcrest.Matchers.is;\n-import static org.hamcrest.Matchers.nullValue;\n-import static org.junit.Assert.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.*;\n \n-public class AbstractMaterialConfigTest {\n+class AbstractMaterialConfigTest {\n     @Test\n-    public void shouldRecomputePipelineUniqueFingerprint_whenAttributesChanged() {\n+    void shouldRecomputePipelineUniqueFingerprint_whenAttributesChanged() {\n         TestMaterialConfig testMaterialConfig = new TestMaterialConfig(\"foo\");\n \n         String pipelineUniqueFingerprint = testMaterialConfig.getPipelineUniqueFingerprint();\n         testMaterialConfig.setConfigAttributes(m(\"bar\", \"baz\"));\n-        assertThat(testMaterialConfig.getPipelineUniqueFingerprint(), not(pipelineUniqueFingerprint));\n+        assertThat(testMaterialConfig.getPipelineUniqueFingerprint()).isNotEqualTo(pipelineUniqueFingerprint);\n     }\n \n     @Test\n-    public void shouldNotSetMaterialNameIfItIsSetToEmptyAsItsAnOptionalField() {\n+    void shouldNotSetMaterialNameIfItIsSetToEmptyAsItsAnOptionalField() {\n         AbstractMaterialConfig materialConfig = new TestMaterialConfig(\"\");\n         Map<String, String> map = new HashMap<>();\n         map.put(AbstractMaterialConfig.MATERIAL_NAME, \"\");\n \n         materialConfig.setConfigAttributes(map);\n \n-        assertThat(materialConfig.getName(), is(nullValue()));\n+        assertThat(materialConfig.getName()).isNull();\n     }\n \n     @Test\n-    public void shouldRecomputeSqlCriteriaAndXmlAttributeMap_whenAttributesChanged() {\n+    void shouldRecomputeSqlCriteriaAndXmlAttributeMap_whenAttributesChanged() {\n         AbstractMaterialConfig testMaterialConfig = new TestMaterialConfig(\"foo\");\n \n         Map<String, Object> sqlCriteria = testMaterialConfig.getSqlCriteria();\n         testMaterialConfig.setConfigAttributes(m(\"bar\", \"baz\"));\n-        assertThat(testMaterialConfig.getSqlCriteria(), not(sameInstance(sqlCriteria)));\n-        assertThat(testMaterialConfig.getSqlCriteria().get(\"foo\"), is(\"baz\"));\n+        assertThat(testMaterialConfig.getSqlCriteria()).isNotEqualTo(sqlCriteria);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNjcyNw=="}, "originalCommit": {"oid": "09ca93580804dcd7c74a38d4e7a8e9640bb136c4"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MjQ5NA==", "bodyText": "This is just the conversion from Junit4 assertion to assertj assertions.\nThat line is still present.", "url": "https://github.com/gocd/gocd/pull/8014#discussion_r409272494", "createdAt": "2020-04-16T04:20:50Z", "author": {"login": "kritika-singh3"}, "path": "config/config-api/src/test/java/com/thoughtworks/go/config/materials/AbstractMaterialConfigTest.java", "diffHunk": "@@ -15,87 +15,85 @@\n  */\n package com.thoughtworks.go.config.materials;\n \n-import com.thoughtworks.go.config.*;\n+import com.thoughtworks.go.config.CaseInsensitiveString;\n+import com.thoughtworks.go.config.PipelineConfig;\n+import com.thoughtworks.go.config.PipelineConfigSaveValidationContext;\n+import com.thoughtworks.go.config.ValidationContext;\n import com.thoughtworks.go.config.materials.dependency.DependencyMaterialConfig;\n import com.thoughtworks.go.config.materials.mercurial.HgMaterialConfig;\n import com.thoughtworks.go.domain.BaseCollection;\n import com.thoughtworks.go.domain.materials.MaterialConfig;\n-import org.hamcrest.Matchers;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.util.HashMap;\n import java.util.Map;\n \n-import static org.hamcrest.Matchers.not;\n-import static org.hamcrest.Matchers.sameInstance;\n-import static org.hamcrest.Matchers.is;\n-import static org.hamcrest.Matchers.nullValue;\n-import static org.junit.Assert.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.*;\n \n-public class AbstractMaterialConfigTest {\n+class AbstractMaterialConfigTest {\n     @Test\n-    public void shouldRecomputePipelineUniqueFingerprint_whenAttributesChanged() {\n+    void shouldRecomputePipelineUniqueFingerprint_whenAttributesChanged() {\n         TestMaterialConfig testMaterialConfig = new TestMaterialConfig(\"foo\");\n \n         String pipelineUniqueFingerprint = testMaterialConfig.getPipelineUniqueFingerprint();\n         testMaterialConfig.setConfigAttributes(m(\"bar\", \"baz\"));\n-        assertThat(testMaterialConfig.getPipelineUniqueFingerprint(), not(pipelineUniqueFingerprint));\n+        assertThat(testMaterialConfig.getPipelineUniqueFingerprint()).isNotEqualTo(pipelineUniqueFingerprint);\n     }\n \n     @Test\n-    public void shouldNotSetMaterialNameIfItIsSetToEmptyAsItsAnOptionalField() {\n+    void shouldNotSetMaterialNameIfItIsSetToEmptyAsItsAnOptionalField() {\n         AbstractMaterialConfig materialConfig = new TestMaterialConfig(\"\");\n         Map<String, String> map = new HashMap<>();\n         map.put(AbstractMaterialConfig.MATERIAL_NAME, \"\");\n \n         materialConfig.setConfigAttributes(map);\n \n-        assertThat(materialConfig.getName(), is(nullValue()));\n+        assertThat(materialConfig.getName()).isNull();\n     }\n \n     @Test\n-    public void shouldRecomputeSqlCriteriaAndXmlAttributeMap_whenAttributesChanged() {\n+    void shouldRecomputeSqlCriteriaAndXmlAttributeMap_whenAttributesChanged() {\n         AbstractMaterialConfig testMaterialConfig = new TestMaterialConfig(\"foo\");\n \n         Map<String, Object> sqlCriteria = testMaterialConfig.getSqlCriteria();\n         testMaterialConfig.setConfigAttributes(m(\"bar\", \"baz\"));\n-        assertThat(testMaterialConfig.getSqlCriteria(), not(sameInstance(sqlCriteria)));\n-        assertThat(testMaterialConfig.getSqlCriteria().get(\"foo\"), is(\"baz\"));\n+        assertThat(testMaterialConfig.getSqlCriteria()).isNotEqualTo(sqlCriteria);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNjcyNw=="}, "originalCommit": {"oid": "09ca93580804dcd7c74a38d4e7a8e9640bb136c4"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI5NzE0OA==", "bodyText": "Ahh Okay. Got it. Thanks.", "url": "https://github.com/gocd/gocd/pull/8014#discussion_r409297148", "createdAt": "2020-04-16T05:49:42Z", "author": {"login": "GaneshSPatil"}, "path": "config/config-api/src/test/java/com/thoughtworks/go/config/materials/AbstractMaterialConfigTest.java", "diffHunk": "@@ -15,87 +15,85 @@\n  */\n package com.thoughtworks.go.config.materials;\n \n-import com.thoughtworks.go.config.*;\n+import com.thoughtworks.go.config.CaseInsensitiveString;\n+import com.thoughtworks.go.config.PipelineConfig;\n+import com.thoughtworks.go.config.PipelineConfigSaveValidationContext;\n+import com.thoughtworks.go.config.ValidationContext;\n import com.thoughtworks.go.config.materials.dependency.DependencyMaterialConfig;\n import com.thoughtworks.go.config.materials.mercurial.HgMaterialConfig;\n import com.thoughtworks.go.domain.BaseCollection;\n import com.thoughtworks.go.domain.materials.MaterialConfig;\n-import org.hamcrest.Matchers;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.util.HashMap;\n import java.util.Map;\n \n-import static org.hamcrest.Matchers.not;\n-import static org.hamcrest.Matchers.sameInstance;\n-import static org.hamcrest.Matchers.is;\n-import static org.hamcrest.Matchers.nullValue;\n-import static org.junit.Assert.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.*;\n \n-public class AbstractMaterialConfigTest {\n+class AbstractMaterialConfigTest {\n     @Test\n-    public void shouldRecomputePipelineUniqueFingerprint_whenAttributesChanged() {\n+    void shouldRecomputePipelineUniqueFingerprint_whenAttributesChanged() {\n         TestMaterialConfig testMaterialConfig = new TestMaterialConfig(\"foo\");\n \n         String pipelineUniqueFingerprint = testMaterialConfig.getPipelineUniqueFingerprint();\n         testMaterialConfig.setConfigAttributes(m(\"bar\", \"baz\"));\n-        assertThat(testMaterialConfig.getPipelineUniqueFingerprint(), not(pipelineUniqueFingerprint));\n+        assertThat(testMaterialConfig.getPipelineUniqueFingerprint()).isNotEqualTo(pipelineUniqueFingerprint);\n     }\n \n     @Test\n-    public void shouldNotSetMaterialNameIfItIsSetToEmptyAsItsAnOptionalField() {\n+    void shouldNotSetMaterialNameIfItIsSetToEmptyAsItsAnOptionalField() {\n         AbstractMaterialConfig materialConfig = new TestMaterialConfig(\"\");\n         Map<String, String> map = new HashMap<>();\n         map.put(AbstractMaterialConfig.MATERIAL_NAME, \"\");\n \n         materialConfig.setConfigAttributes(map);\n \n-        assertThat(materialConfig.getName(), is(nullValue()));\n+        assertThat(materialConfig.getName()).isNull();\n     }\n \n     @Test\n-    public void shouldRecomputeSqlCriteriaAndXmlAttributeMap_whenAttributesChanged() {\n+    void shouldRecomputeSqlCriteriaAndXmlAttributeMap_whenAttributesChanged() {\n         AbstractMaterialConfig testMaterialConfig = new TestMaterialConfig(\"foo\");\n \n         Map<String, Object> sqlCriteria = testMaterialConfig.getSqlCriteria();\n         testMaterialConfig.setConfigAttributes(m(\"bar\", \"baz\"));\n-        assertThat(testMaterialConfig.getSqlCriteria(), not(sameInstance(sqlCriteria)));\n-        assertThat(testMaterialConfig.getSqlCriteria().get(\"foo\"), is(\"baz\"));\n+        assertThat(testMaterialConfig.getSqlCriteria()).isNotEqualTo(sqlCriteria);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNjcyNw=="}, "originalCommit": {"oid": "09ca93580804dcd7c74a38d4e7a8e9640bb136c4"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2714, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}