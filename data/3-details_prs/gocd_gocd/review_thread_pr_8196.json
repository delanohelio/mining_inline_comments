{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NzQxNjI5", "number": 8196, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzoyODoyMFrOEAyNtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzoyODoyMFrOEAyNtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjU4MTY1OnYy", "diffSide": "RIGHT", "path": "api/api-internal-pipeline-groups-v1/src/main/java/com/thoughtworks/go/apiv1/internalpipelinegroups/representers/InternalPipelineGroupsRepresenter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzoyODoyMFrOGcRuYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMToyNzozNVrOGcsjkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMzcxMg==", "bodyText": "This is not required as the envs page does not need the users and roles info.", "url": "https://github.com/gocd/gocd/pull/8196#discussion_r432303712", "createdAt": "2020-05-29T07:28:20Z", "author": {"login": "kritika-singh3"}, "path": "api/api-internal-pipeline-groups-v1/src/main/java/com/thoughtworks/go/apiv1/internalpipelinegroups/representers/InternalPipelineGroupsRepresenter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.thoughtworks.go.apiv1.internalpipelinegroups.representers;\n+\n+import com.thoughtworks.go.api.base.OutputWriter;\n+import com.thoughtworks.go.apiv1.internalpipelinegroups.models.PipelineGroupsViewModel;\n+import com.thoughtworks.go.config.EnvironmentConfig;\n+import com.thoughtworks.go.config.PipelineConfig;\n+import com.thoughtworks.go.config.remote.ConfigOrigin;\n+import com.thoughtworks.go.config.remote.FileConfigOrigin;\n+import com.thoughtworks.go.config.remote.RepoConfigOrigin;\n+\n+import java.util.Collection;\n+\n+public class InternalPipelineGroupsRepresenter {\n+    public static void toJSON(OutputWriter outputWriter, PipelineGroupsViewModel pipelineGroupsViewModel) {\n+        outputWriter.\n+                addChildList(\"groups\", groupsWriter -> {\n+                    pipelineGroupsViewModel.getPipelineGroups().forEach(group -> {\n+                        groupsWriter.addChild(groupWriter -> {\n+                            groupWriter.add(\"name\", group.getGroup())\n+                                    .addChildList(\"pipelines\",\n+                                            outputListWriter -> group.forEach(pipelineConfig -> {\n+                                                outputListWriter.addChild(pipelineWriter -> {\n+                                                    pipelineWriter.add(\"name\", pipelineConfig.name());\n+                                                    writeOrigin(pipelineWriter, pipelineConfig.getOrigin());\n+                                                    renderEnvironment(pipelineWriter, pipelineConfig, pipelineGroupsViewModel);\n+                                                });\n+                                            }));\n+                        });\n+                    });\n+                });\n+    }\n+\n+    private static void renderEnvironment(OutputWriter pipelineWriter, PipelineConfig pipelineConfig, PipelineGroupsViewModel environments) {\n+        EnvironmentConfig envForPipeline = environments.environmentFor(pipelineConfig.name());\n+        if (envForPipeline != null) {\n+            pipelineWriter.add(\"environment\", envForPipeline.name());\n+        } else {\n+            pipelineWriter.renderNull(\"environment\");\n+        }\n+    }\n+\n+    private static void writeOrigin(OutputWriter jsonWriter, ConfigOrigin origin) {\n+        if (origin instanceof FileConfigOrigin) {\n+            jsonWriter.addChild(\"origin\", originWriter -> originWriter.add(\"type\", \"gocd\"));\n+        } else if (origin instanceof RepoConfigOrigin) {\n+            jsonWriter.addChild(\"origin\", originWriter -> {\n+                originWriter.add(\"type\", \"config_repo\");\n+                originWriter.add(\"id\", ((RepoConfigOrigin) origin).getConfigRepo().getId());\n+            });\n+        }\n+    }\n+\n+    public static void toJSON(OutputWriter outputWriter, PipelineGroupsViewModel pipelineGroupsViewModel, Collection<String> users, Collection<String> roles) {\n+        toJSON(outputWriter, pipelineGroupsViewModel);\n+        outputWriter.addChild(\"additional_info\", (writer) -> writer.addChildList(\"users\", users)\n+                .addChildList(\"roles\", roles));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49763ba244cee66488725c4c22a47e359b865a82"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc0MzMxNA==", "bodyText": "Done", "url": "https://github.com/gocd/gocd/pull/8196#discussion_r432743314", "createdAt": "2020-05-29T21:27:35Z", "author": {"login": "maheshp"}, "path": "api/api-internal-pipeline-groups-v1/src/main/java/com/thoughtworks/go/apiv1/internalpipelinegroups/representers/InternalPipelineGroupsRepresenter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.thoughtworks.go.apiv1.internalpipelinegroups.representers;\n+\n+import com.thoughtworks.go.api.base.OutputWriter;\n+import com.thoughtworks.go.apiv1.internalpipelinegroups.models.PipelineGroupsViewModel;\n+import com.thoughtworks.go.config.EnvironmentConfig;\n+import com.thoughtworks.go.config.PipelineConfig;\n+import com.thoughtworks.go.config.remote.ConfigOrigin;\n+import com.thoughtworks.go.config.remote.FileConfigOrigin;\n+import com.thoughtworks.go.config.remote.RepoConfigOrigin;\n+\n+import java.util.Collection;\n+\n+public class InternalPipelineGroupsRepresenter {\n+    public static void toJSON(OutputWriter outputWriter, PipelineGroupsViewModel pipelineGroupsViewModel) {\n+        outputWriter.\n+                addChildList(\"groups\", groupsWriter -> {\n+                    pipelineGroupsViewModel.getPipelineGroups().forEach(group -> {\n+                        groupsWriter.addChild(groupWriter -> {\n+                            groupWriter.add(\"name\", group.getGroup())\n+                                    .addChildList(\"pipelines\",\n+                                            outputListWriter -> group.forEach(pipelineConfig -> {\n+                                                outputListWriter.addChild(pipelineWriter -> {\n+                                                    pipelineWriter.add(\"name\", pipelineConfig.name());\n+                                                    writeOrigin(pipelineWriter, pipelineConfig.getOrigin());\n+                                                    renderEnvironment(pipelineWriter, pipelineConfig, pipelineGroupsViewModel);\n+                                                });\n+                                            }));\n+                        });\n+                    });\n+                });\n+    }\n+\n+    private static void renderEnvironment(OutputWriter pipelineWriter, PipelineConfig pipelineConfig, PipelineGroupsViewModel environments) {\n+        EnvironmentConfig envForPipeline = environments.environmentFor(pipelineConfig.name());\n+        if (envForPipeline != null) {\n+            pipelineWriter.add(\"environment\", envForPipeline.name());\n+        } else {\n+            pipelineWriter.renderNull(\"environment\");\n+        }\n+    }\n+\n+    private static void writeOrigin(OutputWriter jsonWriter, ConfigOrigin origin) {\n+        if (origin instanceof FileConfigOrigin) {\n+            jsonWriter.addChild(\"origin\", originWriter -> originWriter.add(\"type\", \"gocd\"));\n+        } else if (origin instanceof RepoConfigOrigin) {\n+            jsonWriter.addChild(\"origin\", originWriter -> {\n+                originWriter.add(\"type\", \"config_repo\");\n+                originWriter.add(\"id\", ((RepoConfigOrigin) origin).getConfigRepo().getId());\n+            });\n+        }\n+    }\n+\n+    public static void toJSON(OutputWriter outputWriter, PipelineGroupsViewModel pipelineGroupsViewModel, Collection<String> users, Collection<String> roles) {\n+        toJSON(outputWriter, pipelineGroupsViewModel);\n+        outputWriter.addChild(\"additional_info\", (writer) -> writer.addChildList(\"users\", users)\n+                .addChildList(\"roles\", roles));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMzcxMg=="}, "originalCommit": {"oid": "49763ba244cee66488725c4c22a47e359b865a82"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2847, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}