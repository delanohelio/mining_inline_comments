{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NTY0MzY0", "number": 8241, "title": "`GoFileConfigDataSource#areKnownPartialsSameAsValidPartials()` should base its result on structure and not just the origins", "bodyText": "This involves a number of refactorings, but most importantly:\n\nExtract PartialConfig digest and diffing logic into PartialConfigHelper.\nExtract digest calculations into EntityHashes component.\nReplace all hashCode() digests with serialized content digests; hashCode() collisions are surprisingly easy as uniqueness is not part of the contract of hashCode(); its purpose is to help distribute objects in memory sections for hashed data structures such as HashMap and friends.\nThe above changes allow us to share PartialConfig comparison logic without causing circular dependencies during Spring dependency injection.\n\nKnown innocent bystanders of drive-by/hand-grenade refactoring:\n\nGoPartialConfig renamed to PartialConfigService and no longer holds the implementation for PartialConfig comparison.\nEntityHashingService is no longer responsible for the digest implementation (that is now handled by EntityHashes); rather, it is concerned with listener registration and etag generation of specific entity types, and caching those digest values.\n/Go.Config.(Service|DataSource)?.*/ and friends - so, so many dependent components suffered refactoring on account of all of the above as well as housekeeping (a number of unused constructor params were gutted).", "createdAt": "2020-06-17T02:29:49Z", "url": "https://github.com/gocd/gocd/pull/8241", "merged": true, "mergeCommit": {"oid": "c2f2a50065b0a175a58ba2042a39afe4ab5f8aa6"}, "closed": true, "closedAt": "2020-07-01T18:07:55Z", "author": {"login": "marques-work"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsSUBxgBqjM0NTU3NDY0MDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwuQEhABqjM1MDM2Mjc2ODc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0fa10187a3b2b092623e61beb057464f84400d59", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/0fa10187a3b2b092623e61beb057464f84400d59", "committedDate": "2020-06-15T18:48:21Z", "message": "`GoFileConfigDataSource#areKnownPartialsSameAsValidPartials()` should base its result on structure and not just the origins\n\nThis involves a number of refactorings, but most importantly:\n\n  - Extract `PartialConfig` digest and diffing logic into `PartialConfigHelper`.\n  - Extract digest calculations into `EntityHashes` component.\n  - Replace all `hashCode()` digests with serialized content digests;\n    `hashCode()` collisions are surprisingly easy as uniqueness is not\n    part of the contract of `hashCode()`; its purpose is to help\n    distribute objects in memory sections for hashed data structures\n    such as `HashMap` and friends.\n  - The above changes allow us to share `PartialConfig` comparison logic\n    without causing circular dependencies during Spring dependency\n    injection.\n\nKnown innocent bystanders of drive-by/hand-grenade refactoring:\n\n  - `GoPartialConfig` renamed to `PartialConfigService` and no longer\n    holds the implementation for `PartialConfig` comparison.\n  - `EntityHashingService` is no longer responsible for the digest\n    implementation (that is now handled by `EntityHashes`); rather, it\n    is concerned with listener registration and etag generation of\n    specific entity types, and caching those digest values.\n  - /Go.*Config.*(Service|DataSource)?.*/ and friends - so, so many\n    dependent components suffered refactoring on account of all of the\n    above as well as housekeeping (a number of unused constructor params\n    were gutted)."}, "afterCommit": {"oid": "20a3cf689a85621e0fb5b3e44dbd995f8b3794ae", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/20a3cf689a85621e0fb5b3e44dbd995f8b3794ae", "committedDate": "2020-06-17T23:15:45Z", "message": "`GoFileConfigDataSource#areKnownPartialsSameAsValidPartials()` should base its result on structure and not just the origins\n\nThis involves a number of refactorings, but most importantly:\n\n  - Extract `PartialConfig` digest and diffing logic into `PartialConfigHelper`.\n  - Extract digest calculations into `EntityHashes` component.\n  - Replace all `hashCode()` digests with serialized content digests;\n    `hashCode()` collisions are surprisingly easy as uniqueness is not\n    part of the contract of `hashCode()`; its purpose is to help\n    distribute objects in memory sections for hashed data structures\n    such as `HashMap` and friends.\n  - The above changes allow us to share `PartialConfig` comparison logic\n    without causing circular dependencies during Spring dependency\n    injection.\n\nKnown innocent bystanders of drive-by/hand-grenade refactoring:\n\n  - `GoPartialConfig` renamed to `PartialConfigService` and no longer\n    holds the implementation for `PartialConfig` comparison.\n  - `EntityHashingService` is no longer responsible for the digest\n    implementation (that is now handled by `EntityHashes`); rather, it\n    is concerned with listener registration and etag generation of\n    specific entity types, and caching those digest values.\n  - /Go.*Config.*(Service|DataSource)?.*/ and friends - so, so many\n    dependent components suffered refactoring on account of all of the\n    above as well as housekeeping (a number of unused constructor params\n    were gutted)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20a3cf689a85621e0fb5b3e44dbd995f8b3794ae", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/20a3cf689a85621e0fb5b3e44dbd995f8b3794ae", "committedDate": "2020-06-17T23:15:45Z", "message": "`GoFileConfigDataSource#areKnownPartialsSameAsValidPartials()` should base its result on structure and not just the origins\n\nThis involves a number of refactorings, but most importantly:\n\n  - Extract `PartialConfig` digest and diffing logic into `PartialConfigHelper`.\n  - Extract digest calculations into `EntityHashes` component.\n  - Replace all `hashCode()` digests with serialized content digests;\n    `hashCode()` collisions are surprisingly easy as uniqueness is not\n    part of the contract of `hashCode()`; its purpose is to help\n    distribute objects in memory sections for hashed data structures\n    such as `HashMap` and friends.\n  - The above changes allow us to share `PartialConfig` comparison logic\n    without causing circular dependencies during Spring dependency\n    injection.\n\nKnown innocent bystanders of drive-by/hand-grenade refactoring:\n\n  - `GoPartialConfig` renamed to `PartialConfigService` and no longer\n    holds the implementation for `PartialConfig` comparison.\n  - `EntityHashingService` is no longer responsible for the digest\n    implementation (that is now handled by `EntityHashes`); rather, it\n    is concerned with listener registration and etag generation of\n    specific entity types, and caching those digest values.\n  - /Go.*Config.*(Service|DataSource)?.*/ and friends - so, so many\n    dependent components suffered refactoring on account of all of the\n    above as well as housekeeping (a number of unused constructor params\n    were gutted)."}, "afterCommit": {"oid": "93a48662074e527549156178185dd4d1fa1e11e6", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/93a48662074e527549156178185dd4d1fa1e11e6", "committedDate": "2020-06-19T02:36:07Z", "message": "`GoFileConfigDataSource#areKnownPartialsSameAsValidPartials()` should base its result on structure and not just the origins\n\nThis involves a number of refactorings, but most importantly:\n\n  - Extract `PartialConfig` digest and diffing logic into `PartialConfigHelper`.\n  - Extract digest calculations into `EntityHashes` component.\n  - Replace all `hashCode()` digests with serialized content digests;\n    `hashCode()` collisions are surprisingly easy as uniqueness is not\n    part of the contract of `hashCode()`; its purpose is to help\n    distribute objects in memory sections for hashed data structures\n    such as `HashMap` and friends.\n  - The above changes allow us to share `PartialConfig` comparison logic\n    without causing circular dependencies during Spring dependency\n    injection.\n\nKnown innocent bystanders of drive-by/hand-grenade refactoring:\n\n  - `GoPartialConfig` renamed to `PartialConfigService` and no longer\n    holds the implementation for `PartialConfig` comparison.\n  - `EntityHashingService` is no longer responsible for the digest\n    implementation (that is now handled by `EntityHashes`); rather, it\n    is concerned with listener registration and etag generation of\n    specific entity types, and caching those digest values.\n  - /Go.*Config.*(Service|DataSource)?.*/ and friends - so, so many\n    dependent components suffered refactoring on account of all of the\n    above as well as housekeeping (a number of unused constructor params\n    were gutted)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93a48662074e527549156178185dd4d1fa1e11e6", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/93a48662074e527549156178185dd4d1fa1e11e6", "committedDate": "2020-06-19T02:36:07Z", "message": "`GoFileConfigDataSource#areKnownPartialsSameAsValidPartials()` should base its result on structure and not just the origins\n\nThis involves a number of refactorings, but most importantly:\n\n  - Extract `PartialConfig` digest and diffing logic into `PartialConfigHelper`.\n  - Extract digest calculations into `EntityHashes` component.\n  - Replace all `hashCode()` digests with serialized content digests;\n    `hashCode()` collisions are surprisingly easy as uniqueness is not\n    part of the contract of `hashCode()`; its purpose is to help\n    distribute objects in memory sections for hashed data structures\n    such as `HashMap` and friends.\n  - The above changes allow us to share `PartialConfig` comparison logic\n    without causing circular dependencies during Spring dependency\n    injection.\n\nKnown innocent bystanders of drive-by/hand-grenade refactoring:\n\n  - `GoPartialConfig` renamed to `PartialConfigService` and no longer\n    holds the implementation for `PartialConfig` comparison.\n  - `EntityHashingService` is no longer responsible for the digest\n    implementation (that is now handled by `EntityHashes`); rather, it\n    is concerned with listener registration and etag generation of\n    specific entity types, and caching those digest values.\n  - /Go.*Config.*(Service|DataSource)?.*/ and friends - so, so many\n    dependent components suffered refactoring on account of all of the\n    above as well as housekeeping (a number of unused constructor params\n    were gutted)."}, "afterCommit": {"oid": "9233e1d3c43e1bfb60fb69194a540474d994d224", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/9233e1d3c43e1bfb60fb69194a540474d994d224", "committedDate": "2020-06-29T16:30:15Z", "message": "`GoFileConfigDataSource#areKnownPartialsSameAsValidPartials()` should base its result on structure and not just the origins\n\nThis involves a number of refactorings, but most importantly:\n\n  - Extract `PartialConfig` digest and diffing logic into `PartialConfigHelper`.\n  - Extract digest calculations into `EntityHashes` component.\n  - Replace all `hashCode()` digests with serialized content digests;\n    `hashCode()` collisions are surprisingly easy as uniqueness is not\n    part of the contract of `hashCode()`; its purpose is to help\n    distribute objects in memory sections for hashed data structures\n    such as `HashMap` and friends.\n  - The above changes allow us to share `PartialConfig` comparison logic\n    without causing circular dependencies during Spring dependency\n    injection.\n\nKnown innocent bystanders of drive-by/hand-grenade refactoring:\n\n  - `GoPartialConfig` renamed to `PartialConfigService` and no longer\n    holds the implementation for `PartialConfig` comparison.\n  - `EntityHashingService` is no longer responsible for the digest\n    implementation (that is now handled by `EntityHashes`); rather, it\n    is concerned with listener registration and etag generation of\n    specific entity types, and caching those digest values.\n  - /Go.*Config.*(Service|DataSource)?.*/ and friends - so, so many\n    dependent components suffered refactoring on account of all of the\n    above as well as housekeeping (a number of unused constructor params\n    were gutted)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDM3NjM1", "url": "https://github.com/gocd/gocd/pull/8241#pullrequestreview-437037635", "createdAt": "2020-06-24T22:01:49Z", "commit": {"oid": "93a48662074e527549156178185dd4d1fa1e11e6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjowMTo0OVrOGokpsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMzoyMTo0M1rOGomT2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5NjcyMQ==", "bodyText": "Maybe rename partials =>  partialConfigHelper?", "url": "https://github.com/gocd/gocd/pull/8241#discussion_r445196721", "createdAt": "2020-06-24T22:01:49Z", "author": {"login": "maheshp"}, "path": "server/src/main/java/com/thoughtworks/go/config/PartialConfigService.java", "diffHunk": "@@ -28,49 +27,36 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Optional;\n import java.util.Set;\n \n import static java.lang.String.format;\n \n-/**\n- * @understands current state of configuration part.\n- * <p/>\n- * Provides partial configurations.\n- */\n @Component\n-public class GoPartialConfig implements PartialConfigUpdateCompletedListener, ChangedRepoConfigWatchListListener {\n+public class PartialConfigService implements PartialConfigUpdateCompletedListener, ChangedRepoConfigWatchListListener {\n     public static final String INVALID_CRUISE_CONFIG_MERGE = \"Invalid Merged Configuration\";\n \n     private final GoConfigService goConfigService;\n     private final CachedGoPartials cachedGoPartials;\n     private final ServerHealthService serverHealthService;\n-    private final EntityHashingService entityHashingService;\n+    private final PartialConfigHelper partials;\n     private final GoConfigRepoConfigDataSource repoConfigDataSource;\n     private final GoConfigWatchList configWatchList;\n \n     @Autowired\n-    public GoPartialConfig(GoConfigRepoConfigDataSource repoConfigDataSource,\n-                           GoConfigWatchList configWatchList, GoConfigService goConfigService,\n-                           CachedGoPartials cachedGoPartials, ServerHealthService serverHealthService,\n-                           EntityHashingService entityHashingService) {\n+    public PartialConfigService(GoConfigRepoConfigDataSource repoConfigDataSource,\n+                                GoConfigWatchList configWatchList, GoConfigService goConfigService,\n+                                CachedGoPartials cachedGoPartials, ServerHealthService serverHealthService, PartialConfigHelper partials) {\n         this.repoConfigDataSource = repoConfigDataSource;\n         this.configWatchList = configWatchList;\n         this.goConfigService = goConfigService;\n         this.cachedGoPartials = cachedGoPartials;\n         this.serverHealthService = serverHealthService;\n-        this.entityHashingService = entityHashingService;\n+        this.partials = partials;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a48662074e527549156178185dd4d1fa1e11e6"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyMzg5OQ==", "bodyText": "Why do we need to hash values separately here? src.getValue() returns a plain text value.", "url": "https://github.com/gocd/gocd/pull/8241#discussion_r445223899", "createdAt": "2020-06-24T23:21:43Z", "author": {"login": "maheshp"}, "path": "server/src/main/java/com/thoughtworks/go/server/service/EntityHashes.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.thoughtworks.go.server.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSerializer;\n+import com.thoughtworks.go.config.ConfigCache;\n+import com.thoughtworks.go.config.EnvironmentVariableConfig;\n+import com.thoughtworks.go.config.MagicalGoConfigXmlWriter;\n+import com.thoughtworks.go.config.registry.ConfigElementImplementationRegistry;\n+import com.thoughtworks.go.config.remote.PartialConfig;\n+import com.thoughtworks.go.domain.config.ConfigurationProperty;\n+import com.thoughtworks.go.plugin.domain.common.PluginInfo;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Collection;\n+import java.util.stream.Collectors;\n+\n+import static com.thoughtworks.go.util.CachedDigestUtils.sha512_256Hex;\n+import static org.apache.commons.lang3.StringUtils.join;\n+\n+@Component\n+public class EntityHashes {\n+    public static final String SEP_CHAR = \"/\";\n+\n+    private static final Gson GSON = new GsonBuilder().\n+            registerTypeAdapter(ConfigurationProperty.class, Serializers.CONFIGURATION_PROPERTY).\n+            registerTypeAdapter(EnvironmentVariableConfig.class, Serializers.ENVIRONMENT_VARIABLE).\n+            registerTypeAdapter(PluginInfo.class, Serializers.PLUGIN_INFO).\n+            create();\n+\n+    private final MagicalGoConfigXmlWriter xmlSerializer;\n+\n+    @Autowired\n+    public EntityHashes(ConfigCache configCache, ConfigElementImplementationRegistry registry) {\n+        xmlSerializer = new MagicalGoConfigXmlWriter(configCache, registry);\n+    }\n+\n+    private static String digestHex(String data) {\n+        return sha512_256Hex(data);\n+    }\n+\n+    /**\n+     * Computes a digest of a {@link PartialConfig}.\n+     *\n+     * @param partial a {@link PartialConfig} to hash\n+     * @return a cryptographic digest that can be used for comparison.\n+     */\n+    public String digestPartial(PartialConfig partial) {\n+        if (null == partial) {\n+            return null;\n+        }\n+\n+        return digestMany(\n+                digestMany(partial.getGroups()),\n+                digestMany(partial.getEnvironments()),\n+                digestMany(partial.getScms())\n+        );\n+    }\n+\n+    public String digestMany(String... data) {\n+        return digestHex(join(data, SEP_CHAR));\n+    }\n+\n+    /**\n+     * Computes a cryptographic digest of a collection's contents\n+     *\n+     * @param entities any {@link Collection} of config entities\n+     * @return a cryptographic hex digest ({@link String})\n+     */\n+    public String digestMany(Collection<?> entities) {\n+        if (null == entities) {\n+            return null;\n+        }\n+\n+        return digestHex(entities.stream().\n+                map(this::digestDomainConfigEntity).\n+                collect(Collectors.joining(SEP_CHAR)));\n+    }\n+\n+    public String digestDomainConfigEntity(Object entity) {\n+        return digestHex(serializeDomainEntity(entity));\n+    }\n+\n+    public String digestDomainNonConfigEntity(Object entity) {\n+        return digestHex(GSON.toJson(entity));\n+    }\n+\n+    protected String serializeDomainEntity(Object domainObject) {\n+        return xmlSerializer.toXmlPartial(domainObject);\n+    }\n+\n+    private interface Serializers {\n+        /**\n+         * Custom serializer for encrypted data to ensure stable JSON output when crypto salt changes\n+         * over certain requests due to re-encryption\n+         */\n+        JsonSerializer<ConfigurationProperty> CONFIGURATION_PROPERTY = (src, typeOfSrc, context) -> {\n+            final JsonObject result = new JsonObject();\n+            result.addProperty(\"key\", src.getConfigKeyName());\n+            result.addProperty(\"value\", sha512_256Hex(src.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a48662074e527549156178185dd4d1fa1e11e6"}, "originalPosition": 118}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9233e1d3c43e1bfb60fb69194a540474d994d224", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/9233e1d3c43e1bfb60fb69194a540474d994d224", "committedDate": "2020-06-29T16:30:15Z", "message": "`GoFileConfigDataSource#areKnownPartialsSameAsValidPartials()` should base its result on structure and not just the origins\n\nThis involves a number of refactorings, but most importantly:\n\n  - Extract `PartialConfig` digest and diffing logic into `PartialConfigHelper`.\n  - Extract digest calculations into `EntityHashes` component.\n  - Replace all `hashCode()` digests with serialized content digests;\n    `hashCode()` collisions are surprisingly easy as uniqueness is not\n    part of the contract of `hashCode()`; its purpose is to help\n    distribute objects in memory sections for hashed data structures\n    such as `HashMap` and friends.\n  - The above changes allow us to share `PartialConfig` comparison logic\n    without causing circular dependencies during Spring dependency\n    injection.\n\nKnown innocent bystanders of drive-by/hand-grenade refactoring:\n\n  - `GoPartialConfig` renamed to `PartialConfigService` and no longer\n    holds the implementation for `PartialConfig` comparison.\n  - `EntityHashingService` is no longer responsible for the digest\n    implementation (that is now handled by `EntityHashes`); rather, it\n    is concerned with listener registration and etag generation of\n    specific entity types, and caching those digest values.\n  - /Go.*Config.*(Service|DataSource)?.*/ and friends - so, so many\n    dependent components suffered refactoring on account of all of the\n    above as well as housekeeping (a number of unused constructor params\n    were gutted)."}, "afterCommit": {"oid": "dd988589bf54f0da13420837478f1e0528e6e826", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/dd988589bf54f0da13420837478f1e0528e6e826", "committedDate": "2020-06-30T00:29:51Z", "message": "`GoFileConfigDataSource#areKnownPartialsSameAsValidPartials()` should base its result on structure and not just the origins\n\nThis involves a number of refactorings, but most importantly:\n\n  - Extract `PartialConfig` digest and diffing logic into `PartialConfigHelper`.\n  - Extract digest calculations into `EntityHashes` component.\n  - Replace all `hashCode()` digests with serialized content digests;\n    `hashCode()` collisions are surprisingly easy as uniqueness is not\n    part of the contract of `hashCode()`; its purpose is to help\n    distribute objects in memory sections for hashed data structures\n    such as `HashMap` and friends.\n  - The above changes allow us to share `PartialConfig` comparison logic\n    without causing circular dependencies during Spring dependency\n    injection.\n\nKnown innocent bystanders of drive-by/hand-grenade refactoring:\n\n  - `GoPartialConfig` renamed to `PartialConfigService` and no longer\n    holds the implementation for `PartialConfig` comparison.\n  - `EntityHashingService` is no longer responsible for the digest\n    implementation (that is now handled by `EntityHashes`); rather, it\n    is concerned with listener registration and etag generation of\n    specific entity types, and caching those digest values.\n  - /Go.*Config.*(Service|DataSource)?.*/ and friends - so, so many\n    dependent components suffered refactoring on account of all of the\n    above as well as housekeeping (a number of unused constructor params\n    were gutted)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDM3NDA0", "url": "https://github.com/gocd/gocd/pull/8241#pullrequestreview-440437404", "createdAt": "2020-06-30T22:48:20Z", "commit": {"oid": "dd988589bf54f0da13420837478f1e0528e6e826"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjo0ODoyMFrOGrRDBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzowMTo1MlrOGrRVKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyMTI1Mg==", "bodyText": "@marques-work origins comparison checks for equality of ConfigRepoConfig and revision. Since we check for revision equality do we need to check if it is isStructurallyEquivalent? Am I missing anything here?", "url": "https://github.com/gocd/gocd/pull/8241#discussion_r448021252", "createdAt": "2020-06-30T22:48:20Z", "author": {"login": "maheshp"}, "path": "server/src/main/java/com/thoughtworks/go/config/PartialConfigHelper.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.thoughtworks.go.config;\n+\n+import com.thoughtworks.go.config.remote.PartialConfig;\n+import com.thoughtworks.go.config.remote.RepoConfigOrigin;\n+import com.thoughtworks.go.server.service.EntityHashes;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class PartialConfigHelper {\n+    private final EntityHashes hashes;\n+\n+    @Autowired\n+    public PartialConfigHelper(EntityHashes hashes) {\n+        this.hashes = hashes;\n+    }\n+\n+    /**\n+     * Tests whether two {@link PartialConfig} instances have identical structure and origin\n+     *\n+     * @param left  a {@link PartialConfig}\n+     * @param right a {@link PartialConfig}\n+     * @return whether or not the {@link PartialConfig}s are equivalent\n+     */\n+    public boolean isEquivalent(PartialConfig left, PartialConfig right) {\n+        return hasSameOrigins(left, right) && isStructurallyEquivalent(left, right);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd988589bf54f0da13420837478f1e0528e6e826"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNTg5Ng==", "bodyText": "I get your point.\nI am not sure how much of a performance impact this will have since we hash values for each config property. We will have to verify the impact and take a call.", "url": "https://github.com/gocd/gocd/pull/8241#discussion_r448025896", "createdAt": "2020-06-30T23:01:52Z", "author": {"login": "maheshp"}, "path": "server/src/main/java/com/thoughtworks/go/server/service/EntityHashes.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.thoughtworks.go.server.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSerializer;\n+import com.thoughtworks.go.config.ConfigCache;\n+import com.thoughtworks.go.config.EnvironmentVariableConfig;\n+import com.thoughtworks.go.config.MagicalGoConfigXmlWriter;\n+import com.thoughtworks.go.config.registry.ConfigElementImplementationRegistry;\n+import com.thoughtworks.go.config.remote.PartialConfig;\n+import com.thoughtworks.go.domain.config.ConfigurationProperty;\n+import com.thoughtworks.go.plugin.domain.common.PluginInfo;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Collection;\n+import java.util.stream.Collectors;\n+\n+import static com.thoughtworks.go.util.CachedDigestUtils.sha512_256Hex;\n+import static org.apache.commons.lang3.StringUtils.join;\n+\n+@Component\n+public class EntityHashes {\n+    public static final String SEP_CHAR = \"/\";\n+\n+    private static final Gson GSON = new GsonBuilder().\n+            registerTypeAdapter(ConfigurationProperty.class, Serializers.CONFIGURATION_PROPERTY).\n+            registerTypeAdapter(EnvironmentVariableConfig.class, Serializers.ENVIRONMENT_VARIABLE).\n+            registerTypeAdapter(PluginInfo.class, Serializers.PLUGIN_INFO).\n+            create();\n+\n+    private final MagicalGoConfigXmlWriter xmlSerializer;\n+\n+    @Autowired\n+    public EntityHashes(ConfigCache configCache, ConfigElementImplementationRegistry registry) {\n+        xmlSerializer = new MagicalGoConfigXmlWriter(configCache, registry);\n+    }\n+\n+    private static String digestHex(String data) {\n+        return sha512_256Hex(data);\n+    }\n+\n+    /**\n+     * Computes a digest of a {@link PartialConfig}.\n+     *\n+     * @param partial a {@link PartialConfig} to hash\n+     * @return a cryptographic digest that can be used for comparison.\n+     */\n+    public String digestPartial(PartialConfig partial) {\n+        if (null == partial) {\n+            return null;\n+        }\n+\n+        return digestMany(\n+                digestMany(partial.getGroups()),\n+                digestMany(partial.getEnvironments()),\n+                digestMany(partial.getScms())\n+        );\n+    }\n+\n+    public String digestMany(String... data) {\n+        return digestHex(join(data, SEP_CHAR));\n+    }\n+\n+    /**\n+     * Computes a cryptographic digest of a collection's contents\n+     *\n+     * @param entities any {@link Collection} of config entities\n+     * @return a cryptographic hex digest ({@link String})\n+     */\n+    public String digestMany(Collection<?> entities) {\n+        if (null == entities) {\n+            return null;\n+        }\n+\n+        return digestHex(entities.stream().\n+                map(this::digestDomainConfigEntity).\n+                collect(Collectors.joining(SEP_CHAR)));\n+    }\n+\n+    public String digestDomainConfigEntity(Object entity) {\n+        return digestHex(serializeDomainEntity(entity));\n+    }\n+\n+    public String digestDomainNonConfigEntity(Object entity) {\n+        return digestHex(GSON.toJson(entity));\n+    }\n+\n+    protected String serializeDomainEntity(Object domainObject) {\n+        return xmlSerializer.toXmlPartial(domainObject);\n+    }\n+\n+    private interface Serializers {\n+        /**\n+         * Custom serializer for encrypted data to ensure stable JSON output when crypto salt changes\n+         * over certain requests due to re-encryption\n+         */\n+        JsonSerializer<ConfigurationProperty> CONFIGURATION_PROPERTY = (src, typeOfSrc, context) -> {\n+            final JsonObject result = new JsonObject();\n+            result.addProperty(\"key\", src.getConfigKeyName());\n+            result.addProperty(\"value\", sha512_256Hex(src.getValue()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyMzg5OQ=="}, "originalCommit": {"oid": "93a48662074e527549156178185dd4d1fa1e11e6"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16eb91c6e99d6cfd4bb4e25a4b66ebe7e2c6d2e2", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/16eb91c6e99d6cfd4bb4e25a4b66ebe7e2c6d2e2", "committedDate": "2020-07-01T18:07:07Z", "message": "`GoFileConfigDataSource#areKnownPartialsSameAsValidPartials()` should base its result on structure and not just the origins\n\nThis involves a number of refactorings, but most importantly:\n\n  - Extract `PartialConfig` digest and diffing logic into `PartialConfigHelper`.\n  - Extract digest calculations into `EntityHashes` component.\n  - Replace all `hashCode()` digests with serialized content digests;\n    `hashCode()` collisions are surprisingly easy as uniqueness is not\n    part of the contract of `hashCode()`; its purpose is to help\n    distribute objects in memory sections for hashed data structures\n    such as `HashMap` and friends.\n  - The above changes allow us to share `PartialConfig` comparison logic\n    without causing circular dependencies during Spring dependency\n    injection.\n\nKnown innocent bystanders of drive-by/hand-grenade refactoring:\n\n  - `GoPartialConfig` renamed to `PartialConfigService` and no longer\n    holds the implementation for `PartialConfig` comparison.\n  - `EntityHashingService` is no longer responsible for the digest\n    implementation (that is now handled by `EntityHashes`); rather, it\n    is concerned with listener registration and etag generation of\n    specific entity types, and caching those digest values.\n  - /Go.*Config.*(Service|DataSource)?.*/ and friends - so, so many\n    dependent components suffered refactoring on account of all of the\n    above as well as housekeeping (a number of unused constructor params\n    were gutted)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd988589bf54f0da13420837478f1e0528e6e826", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/dd988589bf54f0da13420837478f1e0528e6e826", "committedDate": "2020-06-30T00:29:51Z", "message": "`GoFileConfigDataSource#areKnownPartialsSameAsValidPartials()` should base its result on structure and not just the origins\n\nThis involves a number of refactorings, but most importantly:\n\n  - Extract `PartialConfig` digest and diffing logic into `PartialConfigHelper`.\n  - Extract digest calculations into `EntityHashes` component.\n  - Replace all `hashCode()` digests with serialized content digests;\n    `hashCode()` collisions are surprisingly easy as uniqueness is not\n    part of the contract of `hashCode()`; its purpose is to help\n    distribute objects in memory sections for hashed data structures\n    such as `HashMap` and friends.\n  - The above changes allow us to share `PartialConfig` comparison logic\n    without causing circular dependencies during Spring dependency\n    injection.\n\nKnown innocent bystanders of drive-by/hand-grenade refactoring:\n\n  - `GoPartialConfig` renamed to `PartialConfigService` and no longer\n    holds the implementation for `PartialConfig` comparison.\n  - `EntityHashingService` is no longer responsible for the digest\n    implementation (that is now handled by `EntityHashes`); rather, it\n    is concerned with listener registration and etag generation of\n    specific entity types, and caching those digest values.\n  - /Go.*Config.*(Service|DataSource)?.*/ and friends - so, so many\n    dependent components suffered refactoring on account of all of the\n    above as well as housekeeping (a number of unused constructor params\n    were gutted)."}, "afterCommit": {"oid": "16eb91c6e99d6cfd4bb4e25a4b66ebe7e2c6d2e2", "author": {"user": {"login": "marques-work", "name": null}}, "url": "https://github.com/gocd/gocd/commit/16eb91c6e99d6cfd4bb4e25a4b66ebe7e2c6d2e2", "committedDate": "2020-07-01T18:07:07Z", "message": "`GoFileConfigDataSource#areKnownPartialsSameAsValidPartials()` should base its result on structure and not just the origins\n\nThis involves a number of refactorings, but most importantly:\n\n  - Extract `PartialConfig` digest and diffing logic into `PartialConfigHelper`.\n  - Extract digest calculations into `EntityHashes` component.\n  - Replace all `hashCode()` digests with serialized content digests;\n    `hashCode()` collisions are surprisingly easy as uniqueness is not\n    part of the contract of `hashCode()`; its purpose is to help\n    distribute objects in memory sections for hashed data structures\n    such as `HashMap` and friends.\n  - The above changes allow us to share `PartialConfig` comparison logic\n    without causing circular dependencies during Spring dependency\n    injection.\n\nKnown innocent bystanders of drive-by/hand-grenade refactoring:\n\n  - `GoPartialConfig` renamed to `PartialConfigService` and no longer\n    holds the implementation for `PartialConfig` comparison.\n  - `EntityHashingService` is no longer responsible for the digest\n    implementation (that is now handled by `EntityHashes`); rather, it\n    is concerned with listener registration and etag generation of\n    specific entity types, and caching those digest values.\n  - /Go.*Config.*(Service|DataSource)?.*/ and friends - so, so many\n    dependent components suffered refactoring on account of all of the\n    above as well as housekeeping (a number of unused constructor params\n    were gutted)."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1894, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}