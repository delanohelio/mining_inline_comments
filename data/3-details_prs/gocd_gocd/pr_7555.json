{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMzgxOTY1", "number": 7555, "title": "Feeds api", "bodyText": "Issue: #7482\nAPI Toggle\nAPI is migrated to use pipeline counter, stage counter and job name instead of pipeline id, stage id, and job id respectively. Hence, it is impossible to add a toggle for the feed API. However, the toggle is added to access feeds API from the stage details page and defaults to new API.\n\nTo use old API\n\ncurl \"https://go-server/go/api/admin/feature_toggles/new_feed_api\"  \\\n  -H 'Accept: application/vnd.go.cd.v1+json' \\\n  -u 'username:password' \\\n  -X PUT -d '{\"toggle_value\": \"off\"}'\nBreaking changes in APIs URL\n\n\n\nAPI Name\nOld feed APIs\nNew feed APIs\n\n\n\n\nPipelines\n/api/pipelines.xml\n/api/feed/pipelines.xml\n\n\nStages\n/api/pipelines/:pipeline_name/stages.xml\n/api/feed/pipelines/:pipeline_name/stages.xml\n\n\nPipeline\n/api/pipelines/:pipeline_name/:pipeline_id.xml\n/api/feed/pipelines/:pipeline_name/:pipeline_counter.xml\n\n\nStage\n/api/stages/:stage_id.xml\n/api/feed/pipelines/:pipeline_name/:pipeline_counter/:stage_name/:stage_counter.xml\n\n\nJob\n/api/jobs/:job_id.xml\n/api/feed/pipelines/:pipeline_name/:pipeline_counter/:stage_name/:stage_counter/:job_name.xml\n\n\nMaterial\n/api/materials/:material_id.xml\n/api/feed/materials/:pipeline_name/:pipeline_counter/:pipeline_unique_fingerprint.xml\n\n\nWaiting Jobs\n/api/jobs/scheduled.xml\n/api/feed/jobs/scheduled.xml\n\n\n\nExamples\nPipelines.xml\n\nURL: http://localhost:8153/go/api/feed/pipelines.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<pipelines>\n  <link href=\"http://localhost:8153/go/api/feed/pipelines.xml\" rel=\"self\"/>\n  <pipeline href=\"http://localhost:8153/go/api/feed/pipelines/up42/stages.xml\"/>\n</pipelines>\nPipeline.xml\n\nURL: http://localhost:8153/go/api/feed/pipelines/:pipeline_name/:pipeline_counter.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<pipeline name=\"up42\" counter=\"3\">\n  <link rel=\"self\" href=\"http://localhost:8153/go/api/feed/pipelines/up42/3.xml\"/>\n  <id><![CDATA[urn:x-go.studios.thoughtworks.com:job-id:up42:3]]></id>\n  <scheduleTime>2020-01-08T12:55:43Z</scheduleTime>\n  <link rel=\"insertedAfter\" href=\"http://localhost:8153/go/api/feed/pipelines/up42/34.xml\"/>\n  <materials>\n    <material>\n      <material materialUri=\"http://localhost:8153/go/api/feed/materials/up42/3/b2b0be001da0211c323ab15807d14a09497a1826e31b05a2969b87d7eb304fc9.xml\" type=\"GitMaterial\" url=\"test-repo\" branch=\"master\" shallowClone=\"false\">\n        <modifications>\n          <changeset>\n            <user><![CDATA[GoCD Test User <devnull@example.com>]]></user>\n            <checkinTime>2020-01-07T16:10:16Z</checkinTime>\n            <revision><![CDATA[149232e134a1bf9d398c7c61835da4ccb7872850]]></revision>\n            <message><![CDATA[Initial commit]]></message>\n            <file name=\"README.md\" action=\"added\"/>\n          </changeset>\n        </modifications>\n      </material>\n    </material>\n  </materials>\n  <stages>\n    <stage href=\"http://localhost:8153/go/api/feed/pipelines/up42/3/up42_stage/1.xml\"/>\n  </stages>\n  <approvedBy><![CDATA[admin]]></approvedBy>\n</pipeline>\n\nStages.xml\n\nURL: http://localhost:8153/go/api/feed/pipelines/:pipeline_name/stages.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:go=\"http://www.thoughtworks-studios.com/ns/go\">\n  <title>\n    <![CDATA[up42]]>\n  </title>\n  <id>http://localhost:8153/go/api/feed/pipelines/up42/stages.xml</id>\n  <author>\n    <name>Go</name>\n  </author>\n  <updated>2020-01-08T12:56:00Z</updated>\n  <link href=\"http://localhost:8153/go/api/feed/pipelines/up42/stages.xml\" rel=\"self\"/>\n  <link href=\"http://localhost:8153/go/api/feed/pipelines/up42/stages.xml?before=1\" rel=\"next\"/>\n  <entry>\n    <title>\n      <![CDATA[up42(1) stage up42_stage(1) Passed]]>\n    </title>\n    <updated>2020-01-08T12:53:35Z</updated>\n    <id>http://localhost:8153/go/pipelines/up42/1/up42_stage/1</id>\n    <author>\n      <name><![CDATA[joe <joe@gocd.org>]]></name>\n    </author>\n    <link href=\"http://localhost:8153/go/api/feed/pipelines/up42/1/up42_stage/1.xml\" rel=\"alternate\" title=\"up42_stage Stage Detail\" type=\"application/vnd.go+xml\"/>\n    <link href=\"http://localhost:8153/go/pipelines/up42/1/up42_stage/1\" rel=\"alternate\" title=\"up42_stage Stage Detail\" type=\"text/html\"/>\n    <link href=\"http://localhost:8153/go/api/feed/pipelines/up42/1.xml\" rel=\"http://www.thoughtworks-studios.com/ns/relations/go/pipeline\" title=\"up42 Pipeline Detail\" type=\"application/vnd.go+xml\"/>\n    <link href=\"http://localhost:8153/go/pipelines/up42/1/up42_stage/1\" rel=\"http://www.thoughtworks-studios.com/ns/relations/go/pipeline\" title=\"up42 Pipeline Detail\" type=\"text/html\"/>\n    <category label=\"Stage\" scheme=\"http://www.thoughtworks-studios.com/ns/categories/go\" term=\"stage\"/>\n    <category label=\"Completed\" scheme=\"http://www.thoughtworks-studios.com/ns/categories/go\" term=\"completed\"/>\n    <category label=\"Passed\" scheme=\"http://www.thoughtworks-studios.com/ns/categories/go\" term=\"passed\"/>\n  </entry>\n</feed>\nStage.xml\n\nURL: http://localhost:8153/go/api/feed/pipelines/:pipeline_name/:pipeline_counter/:stage_name/:stage_counter.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<stage counter=\"1\" name=\"up42_stage\">\n  <link href=\"http://localhost:8153/go/api/feed/pipelines/up42/3/up42_stage/1.xml\" rel=\"self\"/>\n  <id>\n    <![CDATA[urn:x-go.studios.thoughtworks.com:stage-id:up42:3:up42_stage:1 ]]>\n  </id>\n  <pipeline counter=\"3\" href=\"http://localhost:8153/go/api/feed/pipelines/up42/3.xml\" label=\"3\" name=\"up42\"/>\n  <updated>2020-01-08T12:56:00Z</updated>\n  <result>Passed</result>\n  <state>Completed</state>\n  <approvedBy>\n    <![CDATA[admin ]]>\n  </approvedBy>\n  <jobs>\n    <job href=\"http://localhost:8153/go/api/feed/pipelines/up42/3/up42_stage/1/up42_job.xml\"/>\n  </jobs>\n</stage>\nJob.xml\n\nURL: http://localhost:8153/go/api/feed/pipelines/:pipeline_name/:pipeline_counter/:stage_name/:stage_counter/:job_name.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<job name=\"up42_job\">\n  <link rel=\"self\" href=\"http://localhost:8153/go/api/feed/pipelines/up42/3/up42_stage/1/up42_job.xml\"/>\n  <id><![CDATA[urn:x-go.studios.thoughtworks.com:job-id:up42:3:up42_stage:1:up42_job]]></id>\n  <pipeline name=\"up42\" counter=\"3\" label=\"3\"/>\n  <stage name=\"up42_stage\" counter=\"1\" href=\"http://localhost:8153/go/api/feed/pipelines/up42/3/up42_stage/1.xml\"/>\n  <result>Passed</result>\n  <state>Completed</state>\n  <agent uuid=\"545d39c2-5d6e-4f6d-b83f-9cf80de7e0fb\"/>\n  <!--Artifacts of type `file` will not be shown. See https://github.com/gocd/gocd/pull/2875-->\n  <artifacts baseUri=\"http://localhost:8153/go/files/up42/3/up42_stage/1/up42_job\" pathFromArtifactRoot=\"pipelines/up42/3/up42_stage/1/up42_job\"/>\n  <!--Resources are now intentionally left blank. See https://github.com/gocd/gocd/pull/2875-->\n  <resources/>\n  <!--Environment variables are now intentionally left blank. See https://github.com/gocd/gocd/pull/2875-->\n  <environmentVariables/>\n</job>\nMaterial.xml\n\nURL: http://localhost:8153/go/api/feed/materials/:pipeline_name/:pipeline_counter/:pipeline_unique_fingerprint.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<material materialUri=\"http://localhost:8153/go/api/feed/materials/up42/3/b2b0be001da0211c323ab15807d14a09497a1826e31b05a2969b87d7eb304fc9.xml\" type=\"GitMaterial\" url=\"test-repo\" branch=\"master\" shallowClone=\"false\">\n  <modifications>\n    <changeset>\n      <user><![CDATA[GoCD Test User <devnull@example.com>]]></user>\n      <checkinTime>2020-01-07T16:10:16Z</checkinTime>\n      <revision><![CDATA[149232e134a1bf9d398c7c61835da4ccb7872850]]></revision>\n      <message><![CDATA[Initial commit]]></message>\n      <file name=\"README.md\" action=\"added\"/>\n    </changeset>\n  </modifications>\n</material>", "createdAt": "2020-01-08T10:18:46Z", "url": "https://github.com/gocd/gocd/pull/7555", "merged": true, "mergeCommit": {"oid": "1ebcb91cee444d969eba674533a264827717103a"}, "closed": true, "closedAt": "2020-01-09T11:50:29Z", "author": {"login": "bdpiprava"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4UTklABqjI5MzA5NDAxOTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4ogrXgBqjI5MzQ2NTAxMDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "536a6428afe2004e16f1a40abc9514012efc47bf", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/536a6428afe2004e16f1a40abc9514012efc47bf", "committedDate": "2020-01-08T10:32:21Z", "message": "Adding author name as cdata instead of text as it may contain some special chars"}, "afterCommit": {"oid": "32b11c8e5859c78e31979adc97892e8cd412ac08", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/32b11c8e5859c78e31979adc97892e8cd412ac08", "committedDate": "2020-01-08T12:14:01Z", "message": "Adding author name as cdata instead of text as it may contain some special chars"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32b11c8e5859c78e31979adc97892e8cd412ac08", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/32b11c8e5859c78e31979adc97892e8cd412ac08", "committedDate": "2020-01-08T12:14:01Z", "message": "Adding author name as cdata instead of text as it may contain some special chars"}, "afterCommit": {"oid": "9a7a0378ab184359a5fa81b058ce8eedd86a7dce", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/9a7a0378ab184359a5fa81b058ce8eedd86a7dce", "committedDate": "2020-01-09T04:07:18Z", "message": "Adding author name as cdata instead of text as it may contain some special chars"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMjk0Mjcz", "url": "https://github.com/gocd/gocd/pull/7555#pullrequestreview-340294273", "createdAt": "2020-01-09T05:21:04Z", "commit": {"oid": "9a7a0378ab184359a5fa81b058ce8eedd86a7dce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNToyMTowNFrOFbrLZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNToyMTowNFrOFbrLZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU2MzMwMw==", "bodyText": "Update copyright year to 2020?\nMaybe we change it for all the files?", "url": "https://github.com/gocd/gocd/pull/7555#discussion_r364563303", "createdAt": "2020-01-09T05:21:04Z", "author": {"login": "GaneshSPatil"}, "path": "api/api-feeds-api-v1/build.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019 ThoughtWorks, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7a0378ab184359a5fa81b058ce8eedd86a7dce"}, "originalPosition": 2}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a7a0378ab184359a5fa81b058ce8eedd86a7dce", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/9a7a0378ab184359a5fa81b058ce8eedd86a7dce", "committedDate": "2020-01-09T04:07:18Z", "message": "Adding author name as cdata instead of text as it may contain some special chars"}, "afterCommit": {"oid": "f0ec879f6e4831510269b0c344af2c63c1710f4d", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/f0ec879f6e4831510269b0c344af2c63c1710f4d", "committedDate": "2020-01-09T05:50:25Z", "message": "Adding author name as cdata instead of text as it may contain some special chars"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMzAyNzUy", "url": "https://github.com/gocd/gocd/pull/7555#pullrequestreview-340302752", "createdAt": "2020-01-09T05:58:23Z", "commit": {"oid": "175304df230bc03b8c43810bf2b2cc7eb5832c1b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNTo1ODoyNFrOFbrlkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNTo1ODoyNFrOFbrlkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MDAwMQ==", "bodyText": "Feeds APIs do not need Accept header.\nShould FeedsApiControllerV1 implement implements SparkController, ControllerMethods, SparkSpringController instead of extends ApiController implements SparkSpringController?\nRefer: ApiSupportController", "url": "https://github.com/gocd/gocd/pull/7555#discussion_r364570001", "createdAt": "2020-01-09T05:58:24Z", "author": {"login": "GaneshSPatil"}, "path": "api/api-feeds-api-v1/src/main/java/com/thoughtworks/go/apiv1/feedsapi/FeedsApiControllerV1.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.thoughtworks.go.apiv1.feedsapi;\n+\n+import com.thoughtworks.go.api.ApiController;\n+import com.thoughtworks.go.api.ApiVersion;\n+import com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\n+import com.thoughtworks.go.config.exceptions.BadRequestException;\n+import com.thoughtworks.go.server.service.FeedService;\n+import com.thoughtworks.go.spark.RequestContext;\n+import com.thoughtworks.go.spark.Routes;\n+import com.thoughtworks.go.spark.spring.SparkSpringController;\n+import org.dom4j.Document;\n+import org.dom4j.io.OutputFormat;\n+import org.dom4j.io.XMLWriter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import spark.Request;\n+import spark.Response;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+\n+import static java.lang.String.format;\n+import static org.apache.commons.io.FilenameUtils.removeExtension;\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+import static org.springframework.http.MediaType.APPLICATION_XML_VALUE;\n+import static spark.Spark.*;\n+\n+@Component\n+public class FeedsApiControllerV1 extends ApiController implements SparkSpringController {\n+    private final ApiAuthenticationHelper apiAuthenticationHelper;\n+    private final FeedService feedService;\n+\n+    @Autowired\n+    public FeedsApiControllerV1(ApiAuthenticationHelper apiAuthenticationHelper,\n+                                FeedService feedService) {\n+        super(ApiVersion.v1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175304df230bc03b8c43810bf2b2cc7eb5832c1b"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMzAzOTcz", "url": "https://github.com/gocd/gocd/pull/7555#pullrequestreview-340303973", "createdAt": "2020-01-09T06:03:36Z", "commit": {"oid": "175304df230bc03b8c43810bf2b2cc7eb5832c1b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNjowMzozNlrOFbrpcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNjowMzozNlrOFbrpcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MDk5NQ==", "bodyText": "NormalUserSecurity? Should this be based on some permissions (pipeline, pipeline group level view permissions)?\nNot sure if keeping it public for all has any security implications.\n\\cc: @arvindsv @bdpiparva", "url": "https://github.com/gocd/gocd/pull/7555#discussion_r364570995", "createdAt": "2020-01-09T06:03:36Z", "author": {"login": "GaneshSPatil"}, "path": "api/api-feeds-api-v1/src/main/java/com/thoughtworks/go/apiv1/feedsapi/FeedsApiControllerV1.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.thoughtworks.go.apiv1.feedsapi;\n+\n+import com.thoughtworks.go.api.ApiController;\n+import com.thoughtworks.go.api.ApiVersion;\n+import com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\n+import com.thoughtworks.go.config.exceptions.BadRequestException;\n+import com.thoughtworks.go.server.service.FeedService;\n+import com.thoughtworks.go.spark.RequestContext;\n+import com.thoughtworks.go.spark.Routes;\n+import com.thoughtworks.go.spark.spring.SparkSpringController;\n+import org.dom4j.Document;\n+import org.dom4j.io.OutputFormat;\n+import org.dom4j.io.XMLWriter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import spark.Request;\n+import spark.Response;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+\n+import static java.lang.String.format;\n+import static org.apache.commons.io.FilenameUtils.removeExtension;\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+import static org.springframework.http.MediaType.APPLICATION_XML_VALUE;\n+import static spark.Spark.*;\n+\n+@Component\n+public class FeedsApiControllerV1 extends ApiController implements SparkSpringController {\n+    private final ApiAuthenticationHelper apiAuthenticationHelper;\n+    private final FeedService feedService;\n+\n+    @Autowired\n+    public FeedsApiControllerV1(ApiAuthenticationHelper apiAuthenticationHelper,\n+                                FeedService feedService) {\n+        super(ApiVersion.v1);\n+        this.mimeType = APPLICATION_XML_VALUE;\n+        this.apiAuthenticationHelper = apiAuthenticationHelper;\n+        this.feedService = feedService;\n+    }\n+\n+    @Override\n+    public String controllerBasePath() {\n+        return Routes.FeedsAPI.BASE;\n+    }\n+\n+    @Override\n+    public void setupRoutes() {\n+        path(controllerBasePath(), () -> {\n+            before(\"/*\", mimeType, this::setContentType);\n+            before(\"/*\", mimeType, this.apiAuthenticationHelper::checkUserAnd403);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175304df230bc03b8c43810bf2b2cc7eb5832c1b"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMzA0MTky", "url": "https://github.com/gocd/gocd/pull/7555#pullrequestreview-340304192", "createdAt": "2020-01-09T06:04:32Z", "commit": {"oid": "175304df230bc03b8c43810bf2b2cc7eb5832c1b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNjowNDozMlrOFbrqMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNjowNDozMlrOFbrqMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MTE4Ng==", "bodyText": "should we extract request param strings into class field constants?", "url": "https://github.com/gocd/gocd/pull/7555#discussion_r364571186", "createdAt": "2020-01-09T06:04:32Z", "author": {"login": "GaneshSPatil"}, "path": "api/api-feeds-api-v1/src/main/java/com/thoughtworks/go/apiv1/feedsapi/FeedsApiControllerV1.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.thoughtworks.go.apiv1.feedsapi;\n+\n+import com.thoughtworks.go.api.ApiController;\n+import com.thoughtworks.go.api.ApiVersion;\n+import com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\n+import com.thoughtworks.go.config.exceptions.BadRequestException;\n+import com.thoughtworks.go.server.service.FeedService;\n+import com.thoughtworks.go.spark.RequestContext;\n+import com.thoughtworks.go.spark.Routes;\n+import com.thoughtworks.go.spark.spring.SparkSpringController;\n+import org.dom4j.Document;\n+import org.dom4j.io.OutputFormat;\n+import org.dom4j.io.XMLWriter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import spark.Request;\n+import spark.Response;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+\n+import static java.lang.String.format;\n+import static org.apache.commons.io.FilenameUtils.removeExtension;\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+import static org.springframework.http.MediaType.APPLICATION_XML_VALUE;\n+import static spark.Spark.*;\n+\n+@Component\n+public class FeedsApiControllerV1 extends ApiController implements SparkSpringController {\n+    private final ApiAuthenticationHelper apiAuthenticationHelper;\n+    private final FeedService feedService;\n+\n+    @Autowired\n+    public FeedsApiControllerV1(ApiAuthenticationHelper apiAuthenticationHelper,\n+                                FeedService feedService) {\n+        super(ApiVersion.v1);\n+        this.mimeType = APPLICATION_XML_VALUE;\n+        this.apiAuthenticationHelper = apiAuthenticationHelper;\n+        this.feedService = feedService;\n+    }\n+\n+    @Override\n+    public String controllerBasePath() {\n+        return Routes.FeedsAPI.BASE;\n+    }\n+\n+    @Override\n+    public void setupRoutes() {\n+        path(controllerBasePath(), () -> {\n+            before(\"/*\", mimeType, this::setContentType);\n+            before(\"/*\", mimeType, this.apiAuthenticationHelper::checkUserAnd403);\n+\n+            get(Routes.FeedsAPI.PIPELINES_XML, this.mimeType, this::pipelinesXML);\n+            get(Routes.FeedsAPI.STAGES_XML, this.mimeType, this::stagesXML);\n+            get(Routes.FeedsAPI.PIPELINE_XML, this.mimeType, this::pipelineXML);\n+            get(Routes.FeedsAPI.STAGE_XML, this.mimeType, this::stageXML);\n+            get(Routes.FeedsAPI.JOB_XML, this.mimeType, this::jobXML);\n+            get(Routes.FeedsAPI.SCHEDULED_JOB_XML, this.mimeType, this::scheduledJobs);\n+            get(Routes.FeedsAPI.MATERIAL_URL, this.mimeType, this::materialXML);\n+        });\n+    }\n+\n+    public String pipelinesXML(Request request, Response response) throws IOException {\n+        return prettyPrint(feedService.pipelinesXml(currentUsername(), baseUrl(request)));\n+    }\n+\n+    public String pipelineXML(Request request, Response response) throws IOException {\n+        String pipelineName = request.params(\"pipeline_name\");\n+        Integer pipelineCounter = parseInt(removeExtension(request.params(\"pipeline_counter\")), \"pipeline counter\");\n+        return prettyPrint(feedService.pipelineXml(currentUsername(), pipelineName, pipelineCounter, baseUrl(request)));\n+    }\n+\n+    public String stagesXML(Request request, Response response) throws IOException {\n+        String pipelineName = request.params(\"pipeline_name\");\n+        String beforeFromRequest = request.queryParams(\"before\");\n+        Integer before = isBlank(beforeFromRequest) ? null : parseInt(beforeFromRequest, \"before\");\n+        return prettyPrint(feedService.stagesXml(currentUsername(), pipelineName, before, baseUrl(request)));\n+    }\n+\n+    public String stageXML(Request request, Response response) throws IOException {\n+        String pipelineName = request.params(\"pipeline_name\");\n+        Integer pipelineCounter = parseInt(request.params(\"pipeline_counter\"), \"pipeline counter\");\n+        String stageName = request.params(\"stage_name\");\n+        Integer stageCounter = parseInt(removeExtension(request.params(\"stage_counter\")), \"stage counter\");\n+        return prettyPrint(feedService.stageXml(currentUsername(), pipelineName, pipelineCounter, stageName, stageCounter, baseUrl(request)));\n+    }\n+\n+    public String jobXML(Request request, Response response) throws IOException {\n+        String pipelineName = request.params(\"pipeline_name\");\n+        Integer pipelineCounter = parseInt(request.params(\"pipeline_counter\"), \"pipeline counter\");\n+        String stageName = request.params(\"stage_name\");\n+        Integer stageCounter = parseInt(request.params(\"stage_counter\"), \"stage counter\");\n+        String jobName = removeExtension(request.params(\"job_name\"));\n+\n+        return prettyPrint(feedService.jobXml(currentUsername(), pipelineName, pipelineCounter, stageName, stageCounter, jobName, baseUrl(request)));\n+    }\n+\n+    public String scheduledJobs(Request request, Response response) throws IOException {\n+        return prettyPrint(feedService.waitingJobPlansXml(baseUrl(request)));\n+    }\n+\n+    public String materialXML(Request request, Response response) throws IOException {\n+        String pipelineName = request.params(\"pipeline_name\");\n+        Integer pipelineCounter = parseInt(request.params(\"pipeline_counter\"), \"pipeline counter\");\n+        String fingerprint = removeExtension(request.params(\"fingerprint\"));\n+\n+        return prettyPrint(feedService.materialXml(currentUsername(), pipelineName, pipelineCounter, fingerprint, baseUrl(request)));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175304df230bc03b8c43810bf2b2cc7eb5832c1b"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMzA2MzAz", "url": "https://github.com/gocd/gocd/pull/7555#pullrequestreview-340306303", "createdAt": "2020-01-09T06:12:55Z", "commit": {"oid": "175304df230bc03b8c43810bf2b2cc7eb5832c1b"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b650a58e92a9fa6de561c3a714e5563d1afab3a5", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/b650a58e92a9fa6de561c3a714e5563d1afab3a5", "committedDate": "2020-01-09T08:51:01Z", "message": "Set content type based on status and accept header"}, "afterCommit": {"oid": "3ceb79cbb19e7c9230c4cbd3e83341721d194f6b", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/3ceb79cbb19e7c9230c4cbd3e83341721d194f6b", "committedDate": "2020-01-09T08:51:34Z", "message": "Set content type based on status and accept header\n\nIn case of faulire, send error message based on the requested accept\nheader type. This will allow client interpret the error message as\nper requested types.\n\nIn case of success, Feed APIs always sends response as xml. Hence\nexpected content types can be one from application/xml, text/xml,\napplication/rss+xml or application/atom+xml. Content type will be\nset based on the Accept header. Defaults to application/xml if accept\n header contains non xml content type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMzgzMTIw", "url": "https://github.com/gocd/gocd/pull/7555#pullrequestreview-340383120", "createdAt": "2020-01-09T09:24:36Z", "commit": {"oid": "3ceb79cbb19e7c9230c4cbd3e83341721d194f6b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwOToyNDozN1rOFbvZZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwOToyNDozN1rOFbvZZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYzMjQyMg==", "bodyText": "this.mimeType?? may be after(\"/*\", this.mimeType, this::setContentType);", "url": "https://github.com/gocd/gocd/pull/7555#discussion_r364632422", "createdAt": "2020-01-09T09:24:37Z", "author": {"login": "GaneshSPatil"}, "path": "api/api-feeds-api-v1/src/main/java/com/thoughtworks/go/apiv1/feedsapi/FeedsApiControllerV1.java", "diffHunk": "@@ -76,6 +79,8 @@ public void setupRoutes() {\n             get(Routes.FeedsAPI.JOB_XML, this.mimeType, this::jobXML);\n             get(Routes.FeedsAPI.SCHEDULED_JOB_XML, this.mimeType, this::scheduledJobs);\n             get(Routes.FeedsAPI.MATERIAL_URL, this.mimeType, this::materialXML);\n+\n+            after(\"/*\", this::setContentType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ceb79cbb19e7c9230c4cbd3e83341721d194f6b"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2843ae5d859f06bf203d90516294f0cdc8a252a2", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/2843ae5d859f06bf203d90516294f0cdc8a252a2", "committedDate": "2020-01-09T11:39:54Z", "message": "Adding job xml representer to generate xml document"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5d4f77ebefb04baf6759dc930702d8938acc335", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/b5d4f77ebefb04baf6759dc930702d8938acc335", "committedDate": "2020-01-09T11:39:55Z", "message": "Adding job plan xml representer to generate xml document"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37bf8c37e6b2ac78316e68917e9136aa7de9fcd5", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/37bf8c37e6b2ac78316e68917e9136aa7de9fcd5", "committedDate": "2020-01-09T11:39:55Z", "message": "Adding stage xml representer to generate xml document"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ac2b07cb4e692caf28276ebc936e454a39f9ba6", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/1ac2b07cb4e692caf28276ebc936e454a39f9ba6", "committedDate": "2020-01-09T11:39:55Z", "message": "Adding feed entries xml representer to  generate xml document"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdfbf21c714c3599b78d31c155543f552c4d0320", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/cdfbf21c714c3599b78d31c155543f552c4d0320", "committedDate": "2020-01-09T11:39:55Z", "message": "Adding pipelines xml representer to generate xml document"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "991f918e23b42ae0b1a52584cc77d7e4b95927a5", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/991f918e23b42ae0b1a52584cc77d7e4b95927a5", "committedDate": "2020-01-09T11:39:55Z", "message": "Adding pipeline xml representer to generate xml document"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa8d73e4c4fa169d64b5cfb60624e78ad51b886c", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/fa8d73e4c4fa169d64b5cfb60624e78ad51b886c", "committedDate": "2020-01-09T11:39:56Z", "message": "Adding pipeline load method without http result argument"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b559f94455b859a14a0002217389e903308fc586", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/b559f94455b859a14a0002217389e903308fc586", "committedDate": "2020-01-09T11:39:56Z", "message": "Adding feed service to get xml of various entities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e02d51594ebf58628a3200175ed663b4638f4817", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/e02d51594ebf58628a3200175ed663b4638f4817", "committedDate": "2020-01-09T11:39:56Z", "message": "Adding feed api controller"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9932aadf9c6d6e5e8eb737583eb434f4f07ef1a", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/f9932aadf9c6d6e5e8eb737583eb434f4f07ef1a", "committedDate": "2020-01-09T11:44:03Z", "message": "Use pipeline and stage counter instead of id to get xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a787432c93250f4cd33641f6b85b92f30c52714", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/4a787432c93250f4cd33641f6b85b92f30c52714", "committedDate": "2020-01-09T11:44:03Z", "message": "Get material xml by pipeline name, counter and pipeline unique fingerprint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22ba60a27bea6b1ee0828609b59e507946062c9b", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/22ba60a27bea6b1ee0828609b59e507946062c9b", "committedDate": "2020-01-09T11:46:23Z", "message": "Move feed entries based on pipeline counter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c75add076ab26822049e0f6735cc37fae057fe19", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/c75add076ab26822049e0f6735cc37fae057fe19", "committedDate": "2020-01-09T11:46:23Z", "message": "Removing change set url from scm and package material"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e225293cc2476fe81a322c0d70901d5213f02d7", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/6e225293cc2476fe81a322c0d70901d5213f02d7", "committedDate": "2020-01-09T11:46:24Z", "message": "Adding toggle for feed api on stage details page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea69525cd6b82b18d7a58b6de29c4a964b02735c", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/ea69525cd6b82b18d7a58b6de29c4a964b02735c", "committedDate": "2020-01-09T11:46:24Z", "message": "Adding author name as cdata instead of text as it may contain some special chars"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18f9510e00eb5a752e428fb30076fbaa69081f52", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/18f9510e00eb5a752e428fb30076fbaa69081f52", "committedDate": "2020-01-09T11:46:24Z", "message": "Updated year in copyright headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63511e8f3c2163ae4adbf814434c8fb04bab64fe", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/63511e8f3c2163ae4adbf814434c8fb04bab64fe", "committedDate": "2020-01-09T11:46:24Z", "message": "Moved common params as constants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c4c161e62aa1f0eb389117831ae148dc08977b2", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/3c4c161e62aa1f0eb389117831ae148dc08977b2", "committedDate": "2020-01-09T11:46:25Z", "message": "Print dates in UTC timezone"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "189223ef27e4046bd5207436d1705b5d578e685c", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/189223ef27e4046bd5207436d1705b5d578e685c", "committedDate": "2020-01-09T11:46:25Z", "message": "Set content type based on status and accept header\n\nIn case of faulire, send error message based on the requested accept\nheader type. This will allow client interpret the error message as\nper requested types.\n\nIn case of success, Feed APIs always sends response as xml. Hence\nexpected content types can be one from application/xml, text/xml,\napplication/rss+xml or application/atom+xml. Content type will be\nset based on the Accept header. Defaults to application/xml if accept\n header contains non xml content type"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ceb79cbb19e7c9230c4cbd3e83341721d194f6b", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/3ceb79cbb19e7c9230c4cbd3e83341721d194f6b", "committedDate": "2020-01-09T08:51:34Z", "message": "Set content type based on status and accept header\n\nIn case of faulire, send error message based on the requested accept\nheader type. This will allow client interpret the error message as\nper requested types.\n\nIn case of success, Feed APIs always sends response as xml. Hence\nexpected content types can be one from application/xml, text/xml,\napplication/rss+xml or application/atom+xml. Content type will be\nset based on the Accept header. Defaults to application/xml if accept\n header contains non xml content type"}, "afterCommit": {"oid": "189223ef27e4046bd5207436d1705b5d578e685c", "author": {"user": {"login": "bdpiprava", "name": "Bhupendrakumar Piprava"}}, "url": "https://github.com/gocd/gocd/commit/189223ef27e4046bd5207436d1705b5d578e685c", "committedDate": "2020-01-09T11:46:25Z", "message": "Set content type based on status and accept header\n\nIn case of faulire, send error message based on the requested accept\nheader type. This will allow client interpret the error message as\nper requested types.\n\nIn case of success, Feed APIs always sends response as xml. Hence\nexpected content types can be one from application/xml, text/xml,\napplication/rss+xml or application/atom+xml. Content type will be\nset based on the Accept header. Defaults to application/xml if accept\n header contains non xml content type"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1976, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}