{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2ODgyODkx", "number": 7949, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjoyNDozN1rODyvfMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzoyNToyNlrOD8wxFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTMzNDI0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/thoughtworks/go/server/materials/ConfigMaterialUpdateListener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjoyNDozN1rOGG9rQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjoyNDozN1rOGG9rQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1NTEzOQ==", "bodyText": "This should be inexpensive for repos that do not take advantage of branch support.\nFor repos that do use branch support, it is up to the plugin to provide some caching of references so as not to pommel the remote repo or API.", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r409955139", "createdAt": "2020-04-17T02:24:37Z", "author": {"login": "marques-work"}, "path": "server/src/main/java/com/thoughtworks/go/server/materials/ConfigMaterialUpdateListener.java", "diffHunk": "@@ -73,18 +69,19 @@ public void onMessage(MaterialUpdateCompletedMessage message) {\n                 MaterialRevisions latestModification = materialRepository.findLatestModification(material);\n                 Modification modification = latestModification.firstModifiedMaterialRevision().getLatestModification();\n \n-                MaterialRevision lastParseRevision = getMaterialRevisionAtLastParseAttempt(message);\n-                if (lastParseRevision == null) {\n-                    //never parsed\n-                    updateConfigurationFromCheckout(folder, modification, material);\n-                } else if (latestModification.findRevisionFor(material.config()).hasChangedSince(lastParseRevision) ||\n-                        this.repoConfigDataSource.hasConfigRepoConfigChangedSinceLastUpdate(material.config())) {\n-                    // revision has changed. the config files might have been updated\n-                    updateConfigurationFromCheckout(folder, modification, material);\n-                } else {\n-                    // revision is the same as last time, no need to parse again\n-                    LOGGER.debug(\"[Config Material Update] Skipping parsing of Config material {} since material has no change since last parse.\", material);\n-                }\n+                // Previously, we only forced a parse when the repo had never been parsed before and if a new revision\n+                // was pushed to the material; if no new revisions existed, we did a no-op.\n+                //\n+                // Now, we need to reparse every time to support ref/branch scanning; even if there are no changes to\n+                // the current material, new branches/refs could have been created that might change the output of\n+                // templated config repo definitions that use this feature.\n+                //\n+                // In theory, this should be inexpensive, as the working copies of materials are cached on disk. This\n+                // will cause more frequent `parse-directory` messages, however. Generally (crosses fingers), evaluating\n+                // this is fast, but we may need to consider only merging into the main config if different?\n+                //\n+                // Open to any better ideas :).\n+                updateConfigurationFromCheckout(folder, modification, material);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b7e5a40b70305c740b226aa1b395283dd0e690a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTM0Mjk4OnYy", "diffSide": "RIGHT", "path": "server/src/main/webapp/WEB-INF/rails/webpack/models/base/accessor.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjoyOTo0M1rOGG9wcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjoyOTo0M1rOGG9wcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1NjQ2NQ==", "bodyText": "You might be thinking at this point, \"Why not use a Stream?\"\nThere is an edge case where one may find this useful (look at the configuration properties mixin): The Accessor<T> may do some magical abstraction when setting a value (in a way that is not supported via Stream.map() or Stream.combine(), but you still want the getter result to serialize.\nThis should be a rare case, admittedly, but it can be useful. This function is idempotent.", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r409956465", "createdAt": "2020-04-17T02:29:43Z", "author": {"login": "marques-work"}, "path": "server/src/main/webapp/WEB-INF/rails/webpack/models/base/accessor.ts", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/** An interface similar to, but more generic than, {@link Stream} that is both getter and setter */\n+export type Accessor<T> = (val?: T) => T;\n+\n+/** An {@link Accessor} that also serializes like {@link Stream} does */\n+export interface SerializableAccessor<T> extends Accessor<T> {\n+  toJSON(): any;\n+}\n+\n+/** Higher order function to convert an {@link Accessor} into a {@link SerializableAccessor} by ensuring a `toJSON()` */\n+export function serializing<T>(fn: Accessor<T>, thisArg?: any): SerializableAccessor<T> {\n+  const f = ((arguments.length > 1) ? fn.bind(thisArg) : fn) as any;\n+  if (\"function\" !== typeof f.toJSON) {\n+    f.toJSON = () => f();\n+  }\n+  return f;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b7e5a40b70305c740b226aa1b395283dd0e690a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTM0OTM1OnYy", "diffSide": "RIGHT", "path": "server/src/main/webapp/WEB-INF/rails/webpack/models/base/accessor.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjozMzowNFrOGG90Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjozMzowNFrOGG90Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1NzM4Ng==", "bodyText": "Great for when you want a storage/retrieval function that is Stream-like without having to litter your code with __varname members to make sure it is excluded from serialization.", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r409957386", "createdAt": "2020-04-17T02:33:04Z", "author": {"login": "marques-work"}, "path": "server/src/main/webapp/WEB-INF/rails/webpack/models/base/accessor.ts", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/** An interface similar to, but more generic than, {@link Stream} that is both getter and setter */\n+export type Accessor<T> = (val?: T) => T;\n+\n+/** An {@link Accessor} that also serializes like {@link Stream} does */\n+export interface SerializableAccessor<T> extends Accessor<T> {\n+  toJSON(): any;\n+}\n+\n+/** Higher order function to convert an {@link Accessor} into a {@link SerializableAccessor} by ensuring a `toJSON()` */\n+export function serializing<T>(fn: Accessor<T>, thisArg?: any): SerializableAccessor<T> {\n+  const f = ((arguments.length > 1) ? fn.bind(thisArg) : fn) as any;\n+  if (\"function\" !== typeof f.toJSON) {\n+    f.toJSON = () => f();\n+  }\n+  return f;\n+}\n+\n+/**\n+ * Returns a very simple {@link Accessor}; sometimes you want something even simpler than\n+ * a {@link Stream}. This will not serialize by default. This is sort of a \"Stream-lite\".\n+ */\n+export function basicAccessor<T>(initial?: T): Accessor<T> {\n+  let value: T;\n+\n+  if (arguments.length) {\n+    value = initial!;\n+  }\n+\n+  return function accessor(v?: T): T {\n+    if (arguments.length) {\n+      value = v!;\n+    }\n+    return value;\n+  };\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b7e5a40b70305c740b226aa1b395283dd0e690a"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTM2MzQ0OnYy", "diffSide": "RIGHT", "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/components/rules/configure_rules_widget.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjo0MDowOVrOGG98Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjo0MDowOVrOGG98Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1OTQ1MQ==", "bodyText": "Changed these types here to satisfy the types in the widget that imports this.", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r409959451", "createdAt": "2020-04-17T02:40:09Z", "author": {"login": "marques-work"}, "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/components/rules/configure_rules_widget.tsx", "diffHunk": "@@ -45,7 +46,7 @@ export let RuleActions = {\n export type RuleInfos = RuleInfo[];\n \n interface Attrs {\n-  rules: Stream<Rules>;\n+  rules: Accessor<Rules>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b7e5a40b70305c740b226aa1b395283dd0e690a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTM2NTEzOnYy", "diffSide": "RIGHT", "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/pages/config_repos/modals.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjo0MTowOFrOGG99Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjo0MTowOFrOGG99Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1OTcwMg==", "bodyText": "No functional changes here, just tidying the subsequent code to make it a little more readable with less vnode.attrs noise.", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r409959702", "createdAt": "2020-04-17T02:41:08Z", "author": {"login": "marques-work"}, "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/pages/config_repos/modals.tsx", "diffHunk": "@@ -39,18 +43,21 @@ import materialStyles from \"./materials.scss\";\n \n type EditableMaterial = SaveOperation\n   & { repo: ConfigRepo }\n+  & { userProps: EntriesVM }\n   & { isNew: boolean }\n   & RequiresPluginInfos\n   & { error?: m.Children }\n   & { resourceAutocompleteHelper: Map<string, string[]> };\n \n class MaterialEditWidget extends MithrilViewComponent<EditableMaterial> {\n   view(vnode: m.Vnode<EditableMaterial>) {\n-    const pluginList = _.map(vnode.attrs.pluginInfos(), (pluginInfo: PluginInfo) => {\n+    const { repo, userProps, isNew, error, pluginInfos, resourceAutocompleteHelper } = vnode.attrs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b7e5a40b70305c740b226aa1b395283dd0e690a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDM3ODgzOnYy", "diffSide": "RIGHT", "path": "api/api-plugin-infos-v6/src/main/java/com/thoughtworks/go/apiv6/plugininfos/representers/extensions/ConfigRepoExtensionRepresenter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzoxNzozNFrOGV5Q1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDo1NTowM1rOGWAHFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxMTQ3OQ==", "bodyText": "@marques-work - here we're modifying the existing Plugin Infos API v6.\nShould we consider adding Plugin Infos API v7?", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r425611479", "createdAt": "2020-05-15T07:17:34Z", "author": {"login": "GaneshSPatil"}, "path": "api/api-plugin-infos-v6/src/main/java/com/thoughtworks/go/apiv6/plugininfos/representers/extensions/ConfigRepoExtensionRepresenter.java", "diffHunk": "@@ -28,7 +28,10 @@ public void toJSON(OutputWriter extensionWriter, PluginInfo extension) {\n \n         extensionWriter.addChild(\"capabilities\", capabilitiesWriter ->\n                 capabilitiesWriter.add(\"supports_pipeline_export\", configRepoPluginInfo.getCapabilities().isSupportsPipelineExport())\n-                        .add(\"supports_parse_content\", configRepoPluginInfo.getCapabilities().isSupportsParseContent()));\n+                        .add(\"supports_parse_content\", configRepoPluginInfo.getCapabilities().isSupportsParseContent())\n+                        .add(\"supports_list_config_files\", configRepoPluginInfo.getCapabilities().isSupportsListConfigFiles())\n+                        .add(\"supports_user_defined_properties\", configRepoPluginInfo.getCapabilities().isSupportsUserDefinedProperties())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570a7aa0ca71696e36b8b4bbd6a18deb72974641"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyMzY3MQ==", "bodyText": "Yes, you're right. I probably should have moved this to a new v7. Curious though, does anyone actually use this API? It feels very, very specialized/niche. I suppose that's a larger discussion though.", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r425723671", "createdAt": "2020-05-15T10:55:03Z", "author": {"login": "marques-work"}, "path": "api/api-plugin-infos-v6/src/main/java/com/thoughtworks/go/apiv6/plugininfos/representers/extensions/ConfigRepoExtensionRepresenter.java", "diffHunk": "@@ -28,7 +28,10 @@ public void toJSON(OutputWriter extensionWriter, PluginInfo extension) {\n \n         extensionWriter.addChild(\"capabilities\", capabilitiesWriter ->\n                 capabilitiesWriter.add(\"supports_pipeline_export\", configRepoPluginInfo.getCapabilities().isSupportsPipelineExport())\n-                        .add(\"supports_parse_content\", configRepoPluginInfo.getCapabilities().isSupportsParseContent()));\n+                        .add(\"supports_parse_content\", configRepoPluginInfo.getCapabilities().isSupportsParseContent())\n+                        .add(\"supports_list_config_files\", configRepoPluginInfo.getCapabilities().isSupportsListConfigFiles())\n+                        .add(\"supports_user_defined_properties\", configRepoPluginInfo.getCapabilities().isSupportsUserDefinedProperties())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxMTQ3OQ=="}, "originalCommit": {"oid": "570a7aa0ca71696e36b8b4bbd6a18deb72974641"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDQwMTUxOnYy", "diffSide": "RIGHT", "path": "plugin-infra/go-plugin-domain/src/main/java/com/thoughtworks/go/plugin/domain/configrepo/Capabilities.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzoyNToyN1rOGV5e4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDo1MDo1NlrOGWAABA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxNTA3NA==", "bodyText": "should we consider using Lombok?\n@Getter\n@Setter\n@EqualsAndHashCode\n@Accessors(chain = true)\n@NoArgsConstructor(access = AccessLevel.PUBLIC)\n@AllArgsConstructor(access = AccessLevel.NONE)\npublic class Capabilities2 {\n    private boolean supportsPipelineExport;\n    private boolean supportsParseContent;\n    private boolean supportsListConfigFiles;\n    private boolean supportsUserDefinedProperties;\n}", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r425615074", "createdAt": "2020-05-15T07:25:27Z", "author": {"login": "GaneshSPatil"}, "path": "plugin-infra/go-plugin-domain/src/main/java/com/thoughtworks/go/plugin/domain/configrepo/Capabilities.java", "diffHunk": "@@ -46,17 +50,35 @@ public void setSupportsParseContent(boolean supportsParseContent) {\n         this.supportsParseContent = supportsParseContent;\n     }\n \n+    public boolean isSupportsListConfigFiles() {\n+        return supportsListConfigFiles;\n+    }\n+\n+    public void setSupportsListConfigFiles(boolean supportsListConfigFiles) {\n+        this.supportsListConfigFiles = supportsListConfigFiles;\n+    }\n+\n+    public boolean isSupportsUserDefinedProperties() {\n+        return supportsUserDefinedProperties;\n+    }\n+\n+    public void setSupportsUserDefinedProperties(boolean supportsUserDefinedProperties) {\n+        this.supportsUserDefinedProperties = supportsUserDefinedProperties;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570a7aa0ca71696e36b8b4bbd6a18deb72974641"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyMTg2MA==", "bodyText": "@GaneshSPatil I thought about that too. Hesitated to mess with the gradle deps at the time. But, yes, we probably should. All these objects are just @Data essentially.", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r425721860", "createdAt": "2020-05-15T10:50:56Z", "author": {"login": "marques-work"}, "path": "plugin-infra/go-plugin-domain/src/main/java/com/thoughtworks/go/plugin/domain/configrepo/Capabilities.java", "diffHunk": "@@ -46,17 +50,35 @@ public void setSupportsParseContent(boolean supportsParseContent) {\n         this.supportsParseContent = supportsParseContent;\n     }\n \n+    public boolean isSupportsListConfigFiles() {\n+        return supportsListConfigFiles;\n+    }\n+\n+    public void setSupportsListConfigFiles(boolean supportsListConfigFiles) {\n+        this.supportsListConfigFiles = supportsListConfigFiles;\n+    }\n+\n+    public boolean isSupportsUserDefinedProperties() {\n+        return supportsUserDefinedProperties;\n+    }\n+\n+    public void setSupportsUserDefinedProperties(boolean supportsUserDefinedProperties) {\n+        this.supportsUserDefinedProperties = supportsUserDefinedProperties;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxNTA3NA=="}, "originalCommit": {"oid": "570a7aa0ca71696e36b8b4bbd6a18deb72974641"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2696, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}