{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNTQ0OTQ3", "number": 8008, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNToyMToxOVrODx6vRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNToyNjo0NFrODx6zPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjY5MTg4OnYy", "diffSide": "RIGHT", "path": "server/src/main/webapp/WEB-INF/rails/webpack/models/pipeline_configs/pipeline_config.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNToyMToxOVrOGFqLVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjowODo1MlrOGFrDjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4NzA5Mw==", "bodyText": "this would iterate the collection twice.\nHow about moving the material.attributes() instanceof ScmMaterialAttributes check inside some?", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408587093", "createdAt": "2020-04-15T05:21:19Z", "author": {"login": "GaneshSPatil"}, "path": "server/src/main/webapp/WEB-INF/rails/webpack/models/pipeline_configs/pipeline_config.ts", "diffHunk": "@@ -281,4 +281,20 @@ export class Materials extends Array<Material> {\n       this.splice(index, 1);\n     }\n   }\n+\n+  scmMaterialsHaveDestination(): boolean {\n+    const hasScmMaterialWithEmptyDestination          = this\n+      .filter((material) => material.attributes() instanceof ScmMaterialAttributes)\n+      .some((material) => {\n+        const attrs = material.attributes() as ScmMaterialAttributes;\n+        return _.isEmpty(attrs.destination());\n+      });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a757a693ce0aa46b8daa458506571baa8813fa76"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NDI4OQ==", "bodyText": "IMO, the iteration over the collection twice is the worst case scenario. Looping over collection twice is not necessary a performance issue. I factored readability before it.", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408594289", "createdAt": "2020-04-15T05:45:39Z", "author": {"login": "kritika-singh3"}, "path": "server/src/main/webapp/WEB-INF/rails/webpack/models/pipeline_configs/pipeline_config.ts", "diffHunk": "@@ -281,4 +281,20 @@ export class Materials extends Array<Material> {\n       this.splice(index, 1);\n     }\n   }\n+\n+  scmMaterialsHaveDestination(): boolean {\n+    const hasScmMaterialWithEmptyDestination          = this\n+      .filter((material) => material.attributes() instanceof ScmMaterialAttributes)\n+      .some((material) => {\n+        const attrs = material.attributes() as ScmMaterialAttributes;\n+        return _.isEmpty(attrs.destination());\n+      });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4NzA5Mw=="}, "originalCommit": {"oid": "a757a693ce0aa46b8daa458506571baa8813fa76"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMTQ4NA==", "bodyText": "Sure, everyone will have their own preferences of writing code. :)\nIn this particular scenario, we are iterating over the collection 4 times in worst case. Best case, still has to do 2 iterations. Where, everything can be achieved in just 1 iteration.", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408601484", "createdAt": "2020-04-15T06:08:52Z", "author": {"login": "GaneshSPatil"}, "path": "server/src/main/webapp/WEB-INF/rails/webpack/models/pipeline_configs/pipeline_config.ts", "diffHunk": "@@ -281,4 +281,20 @@ export class Materials extends Array<Material> {\n       this.splice(index, 1);\n     }\n   }\n+\n+  scmMaterialsHaveDestination(): boolean {\n+    const hasScmMaterialWithEmptyDestination          = this\n+      .filter((material) => material.attributes() instanceof ScmMaterialAttributes)\n+      .some((material) => {\n+        const attrs = material.attributes() as ScmMaterialAttributes;\n+        return _.isEmpty(attrs.destination());\n+      });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4NzA5Mw=="}, "originalCommit": {"oid": "a757a693ce0aa46b8daa458506571baa8813fa76"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjY5MjEzOnYy", "diffSide": "RIGHT", "path": "server/src/main/webapp/WEB-INF/rails/webpack/models/pipeline_configs/pipeline_config.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNToyMTozM1rOGFqLhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNToyMTozM1rOGFqLhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4NzE0MQ==", "bodyText": "this would iterate the collection twice.\nHow about moving the material.attributes() instanceof ScmMaterialAttributes check inside some?", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408587141", "createdAt": "2020-04-15T05:21:33Z", "author": {"login": "GaneshSPatil"}, "path": "server/src/main/webapp/WEB-INF/rails/webpack/models/pipeline_configs/pipeline_config.ts", "diffHunk": "@@ -281,4 +281,20 @@ export class Materials extends Array<Material> {\n       this.splice(index, 1);\n     }\n   }\n+\n+  scmMaterialsHaveDestination(): boolean {\n+    const hasScmMaterialWithEmptyDestination          = this\n+      .filter((material) => material.attributes() instanceof ScmMaterialAttributes)\n+      .some((material) => {\n+        const attrs = material.attributes() as ScmMaterialAttributes;\n+        return _.isEmpty(attrs.destination());\n+      });\n+    const hasPluggableScmMaterialWithEmptyDestination = this\n+      .filter((material) => material.attributes() instanceof PluggableScmMaterialAttributes)\n+      .some((material) => {\n+        const attrs = material.attributes() as PluggableScmMaterialAttributes;\n+        return _.isEmpty(attrs.destination());\n+      });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a757a693ce0aa46b8daa458506571baa8813fa76"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjY5NDMxOnYy", "diffSide": "RIGHT", "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/pages/clicky_pipeline_config/modal/material_modal.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNToyMjo0MVrOGFqM4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjowMjowNVrOGFq7Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4NzQ4OQ==", "bodyText": "should we use if for better readability?", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408587489", "createdAt": "2020-04-15T05:22:41Z", "author": {"login": "GaneshSPatil"}, "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/pages/clicky_pipeline_config/modal/material_modal.tsx", "diffHunk": "@@ -71,9 +72,18 @@ export class MaterialModal extends Modal {\n   }\n \n   body(): m.Children {\n+    const allScmMaterialsHaveDestination = this.materials().scmMaterialsHaveDestination();\n+    const maybeMsg                       = this.isNew && !allScmMaterialsHaveDestination\n+      ? <FlashMessage type={MessageType.warning} dataTestId={\"materials-destination-warning-message\"}>\n+        In order to configure multiple SCM materials for this pipeline, each of its material needs have to a 'Destination Directory' specified. Please\n+        edit the existing material and specify a 'Destination Directory' in order to proceed with this operation.\n+      </FlashMessage>\n+      : undefined;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a757a693ce0aa46b8daa458506571baa8813fa76"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NDU2NQ==", "bodyText": "Is the multi-line message an issue or the involvement of two boolean variables?", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408594565", "createdAt": "2020-04-15T05:46:33Z", "author": {"login": "kritika-singh3"}, "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/pages/clicky_pipeline_config/modal/material_modal.tsx", "diffHunk": "@@ -71,9 +72,18 @@ export class MaterialModal extends Modal {\n   }\n \n   body(): m.Children {\n+    const allScmMaterialsHaveDestination = this.materials().scmMaterialsHaveDestination();\n+    const maybeMsg                       = this.isNew && !allScmMaterialsHaveDestination\n+      ? <FlashMessage type={MessageType.warning} dataTestId={\"materials-destination-warning-message\"}>\n+        In order to configure multiple SCM materials for this pipeline, each of its material needs have to a 'Destination Directory' specified. Please\n+        edit the existing material and specify a 'Destination Directory' in order to proceed with this operation.\n+      </FlashMessage>\n+      : undefined;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4NzQ4OQ=="}, "originalCommit": {"oid": "a757a693ce0aa46b8daa458506571baa8813fa76"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTMzNA==", "bodyText": "Umm, in this particular scenario,\nthe condition has two parts, this.isNew && !allScmMaterialsHaveDestination which itself was complex to understand.\nAlso, the ternary contains undefined as one of the value evaluation, Where in javascript, if a variable isn't initialized, by default it has undefined value. Which makes the undefined part of the ternary redundant.", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408599334", "createdAt": "2020-04-15T06:02:05Z", "author": {"login": "GaneshSPatil"}, "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/pages/clicky_pipeline_config/modal/material_modal.tsx", "diffHunk": "@@ -71,9 +72,18 @@ export class MaterialModal extends Modal {\n   }\n \n   body(): m.Children {\n+    const allScmMaterialsHaveDestination = this.materials().scmMaterialsHaveDestination();\n+    const maybeMsg                       = this.isNew && !allScmMaterialsHaveDestination\n+      ? <FlashMessage type={MessageType.warning} dataTestId={\"materials-destination-warning-message\"}>\n+        In order to configure multiple SCM materials for this pipeline, each of its material needs have to a 'Destination Directory' specified. Please\n+        edit the existing material and specify a 'Destination Directory' in order to proceed with this operation.\n+      </FlashMessage>\n+      : undefined;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4NzQ4OQ=="}, "originalCommit": {"oid": "a757a693ce0aa46b8daa458506571baa8813fa76"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjcwMjA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/pages/pipelines/spec/material_editor_spec.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNToyNjo0NFrOGFqRbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTo1ODo1MVrOGFq3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4ODY1NA==", "bodyText": "Generally, we should avoid writing loops and logic in the tests. Or else we will need to write a test for the test too :)\nHere, can we write multiple assertions, one for each material type?", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408588654", "createdAt": "2020-04-15T05:26:44Z", "author": {"login": "GaneshSPatil"}, "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/pages/pipelines/spec/material_editor_spec.tsx", "diffHunk": "@@ -148,4 +148,25 @@ describe(\"AddPipeline: Material Editor\", () => {\n     expect(helper.byTestId('form-field-input-material-type')).toBeDisabled();\n     expect(helper.byTestId('form-field-input-repository-url')).not.toBeDisabled();\n   });\n+\n+  it('should disable only scm material type options when `disableScmMaterials` is set to true', () => {\n+    helper.mount(() => <MaterialEditor material={material} showExtraMaterials={true} disableScmMaterials={true}/>);\n+\n+    const materialTypeSelection = helper.byTestId('form-field-input-material-type');\n+    expect(materialTypeSelection).not.toBeDisabled();\n+\n+    const disabled: string[] = [];\n+    const enabled: string[]  = [];\n+    helper.qa('option', materialTypeSelection)\n+          .forEach((option) => {\n+            if (option.hasAttribute('disabled')) {\n+              disabled.push(option.textContent!);\n+            } else {\n+              enabled.push(option.textContent!);\n+            }\n+          });\n+\n+    expect(enabled).toEqual([\"Another Pipeline\", \"Package\"]);\n+    expect(disabled).toEqual([\"Git\", \"Mercurial\", \"Subversion\", \"Perforce\", \"Team Foundation Server\", \"SCM\"]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a757a693ce0aa46b8daa458506571baa8813fa76"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5Mjc2Ng==", "bodyText": "Why would you write a test for looping on a list of option? There is no logic here.", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408592766", "createdAt": "2020-04-15T05:40:48Z", "author": {"login": "kritika-singh3"}, "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/pages/pipelines/spec/material_editor_spec.tsx", "diffHunk": "@@ -148,4 +148,25 @@ describe(\"AddPipeline: Material Editor\", () => {\n     expect(helper.byTestId('form-field-input-material-type')).toBeDisabled();\n     expect(helper.byTestId('form-field-input-repository-url')).not.toBeDisabled();\n   });\n+\n+  it('should disable only scm material type options when `disableScmMaterials` is set to true', () => {\n+    helper.mount(() => <MaterialEditor material={material} showExtraMaterials={true} disableScmMaterials={true}/>);\n+\n+    const materialTypeSelection = helper.byTestId('form-field-input-material-type');\n+    expect(materialTypeSelection).not.toBeDisabled();\n+\n+    const disabled: string[] = [];\n+    const enabled: string[]  = [];\n+    helper.qa('option', materialTypeSelection)\n+          .forEach((option) => {\n+            if (option.hasAttribute('disabled')) {\n+              disabled.push(option.textContent!);\n+            } else {\n+              enabled.push(option.textContent!);\n+            }\n+          });\n+\n+    expect(enabled).toEqual([\"Another Pipeline\", \"Package\"]);\n+    expect(disabled).toEqual([\"Git\", \"Mercurial\", \"Subversion\", \"Perforce\", \"Team Foundation Server\", \"SCM\"]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4ODY1NA=="}, "originalCommit": {"oid": "a757a693ce0aa46b8daa458506571baa8813fa76"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5ODMyMw==", "bodyText": "The test includes a loop and an a condition. Isn't that logic?\nI mean, its just a good practice to keep the test simple, which reduces the possibility of bugs in the tests itself.", "url": "https://github.com/gocd/gocd/pull/8008#discussion_r408598323", "createdAt": "2020-04-15T05:58:51Z", "author": {"login": "GaneshSPatil"}, "path": "server/src/main/webapp/WEB-INF/rails/webpack/views/pages/pipelines/spec/material_editor_spec.tsx", "diffHunk": "@@ -148,4 +148,25 @@ describe(\"AddPipeline: Material Editor\", () => {\n     expect(helper.byTestId('form-field-input-material-type')).toBeDisabled();\n     expect(helper.byTestId('form-field-input-repository-url')).not.toBeDisabled();\n   });\n+\n+  it('should disable only scm material type options when `disableScmMaterials` is set to true', () => {\n+    helper.mount(() => <MaterialEditor material={material} showExtraMaterials={true} disableScmMaterials={true}/>);\n+\n+    const materialTypeSelection = helper.byTestId('form-field-input-material-type');\n+    expect(materialTypeSelection).not.toBeDisabled();\n+\n+    const disabled: string[] = [];\n+    const enabled: string[]  = [];\n+    helper.qa('option', materialTypeSelection)\n+          .forEach((option) => {\n+            if (option.hasAttribute('disabled')) {\n+              disabled.push(option.textContent!);\n+            } else {\n+              enabled.push(option.textContent!);\n+            }\n+          });\n+\n+    expect(enabled).toEqual([\"Another Pipeline\", \"Package\"]);\n+    expect(disabled).toEqual([\"Git\", \"Mercurial\", \"Subversion\", \"Perforce\", \"Team Foundation Server\", \"SCM\"]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4ODY1NA=="}, "originalCommit": {"oid": "a757a693ce0aa46b8daa458506571baa8813fa76"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2708, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}