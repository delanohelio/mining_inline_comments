{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MTQxODQ4", "number": 8369, "title": "Fix config repository rules violation (#8368)", "bodyText": "Issue: #8368\nDescription:\n\nRemove pipelines from config on rules failure.\nRemove cached partial when merge fails.\nRevalidate last valid partials with latest config repo rules.", "createdAt": "2020-07-22T14:06:20Z", "url": "https://github.com/gocd/gocd/pull/8369", "merged": true, "mergeCommit": {"oid": "1cd64d9553adfe4c33086b56a53adb84d71fedbb"}, "closed": true, "closedAt": "2020-07-24T04:39:40Z", "author": {"login": "GaneshSPatil"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3cRV2ABqjM1NzYyNDU1NDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc372AHAH2gAyNDU1MTQxODQ4OmI4MDNjMGY1OGIxYTVhYzY2MGIzZTgzNmY5YWJjYjNjY2YzODFhODE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc5a9bb3591333ee12d28991356a4791b31e4185", "author": {"user": {"login": "GaneshSPatil", "name": "Ganesh S Patil"}}, "url": "https://github.com/gocd/gocd/commit/dc5a9bb3591333ee12d28991356a4791b31e4185", "committedDate": "2020-07-22T14:05:20Z", "message": "Fix config repository rules violation (#8368)\n\n* Remove pipelines from config on rules failure.\n* Remove cached partial when merge fails.\n* Revalidate last valid partials with latest config repo rules."}, "afterCommit": {"oid": "7bdbdf95c693da3e9f12163d223f71a2404abeaf", "author": {"user": {"login": "GaneshSPatil", "name": "Ganesh S Patil"}}, "url": "https://github.com/gocd/gocd/commit/7bdbdf95c693da3e9f12163d223f71a2404abeaf", "committedDate": "2020-07-22T15:05:05Z", "message": "Fix config repository rules violation (#8368)\n\n* Remove pipelines from config on rules failure.\n* Remove cached partial when merge fails.\n* Revalidate last valid partials with latest config repo rules."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTk1Mjk0", "url": "https://github.com/gocd/gocd/pull/8369#pullrequestreview-453595294", "createdAt": "2020-07-22T18:52:53Z", "commit": {"oid": "7bdbdf95c693da3e9f12163d223f71a2404abeaf"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo1Mjo1NFrOG1v3DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTowMzozMlrOG1wPTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxMTg1Mg==", "bodyText": "if I understand right, the assumption made here is that if the current version is same as the last valid version, the config update is failed due to rules violation. If that is the case we that would be a wrong assumption now that we are adding support for branches/PR. For a same revision of the config repo material, the partials can differ based on the PRs/branches at the time of parse.\nLet me know if the below logic makes sense,\nif (updateConfig(incoming, fingerprint, repoConfig)) {\n    cachedGoPartials.markAsValid(fingerprint, incoming);\n} else {\n    final PartialConfig previousValidPartial = cachedGoPartials.getValid(repoConfig.getRepo().getFingerprint());\n    if (violatesRules && previousValidPartial != null) {\n        // do not allow fallback to the last version of the partial if the current rules do not allow\n        cachedGoPartials.removeValidWithoutClearingServerHealthMessage(repoConfig.getRepo().getFingerprint());\n        goConfigService.updateConfig(cruiseConfig -> {\n            cruiseConfig.getPartials().remove(cachedGoPartials.findPartialByFingerprint(cruiseConfig, fingerprint));\n            return cruiseConfig;\n        });\n    }\n}", "url": "https://github.com/gocd/gocd/pull/8369#discussion_r459011852", "createdAt": "2020-07-22T18:52:54Z", "author": {"login": "maheshp"}, "path": "server/src/main/java/com/thoughtworks/go/config/PartialConfigService.java", "diffHunk": "@@ -69,27 +70,57 @@ public void onSuccessPartialConfig(ConfigRepoConfig repoConfig, PartialConfig in\n \n         if (this.configWatchList.hasConfigRepoWithFingerprint(fingerprint)) {\n             if (shouldMergePartial(incoming, fingerprint, repoConfig)) {\n-                // validate rules before attempting updateConfig() so that\n-                // rule violations will be considered before accepting a merge;\n-                // updateConfig() only considers structural validity.\n-                final boolean violatesRules = hasRuleViolations(incoming);\n-\n+                // mark the fingerprint as last known\n                 cachedGoPartials.cacheAsLastKnown(fingerprint, incoming);\n \n-                if (updateConfig(incoming, fingerprint, repoConfig)) {\n+                //validate rules\n+                hasRuleViolations(incoming);\n+\n+                //validate config.\n+                // updateConfig will fail to update the configuration if there are validation errors.\n+                // Even in case of rules violation, the updateConfig method is required to populate a server health message of rule violation, which also will be shown on the config repo spa.\n+                final boolean isConfigUpdated = updateConfig(incoming, fingerprint, repoConfig);\n+\n+                if (isConfigUpdated) {\n+                    // mark the partial as valid when config is updated successfully for it.\n                     cachedGoPartials.markAsValid(fingerprint, incoming);\n                 } else {\n                     final PartialConfig previousValidPartial = cachedGoPartials.getValid(repoConfig.getRepo().getFingerprint());\n \n-                    if (violatesRules && hasRuleViolations(previousValidPartial)) {\n-                        // do not allow fallback to the last version of the partial if the current rules do not allow\n-                        cachedGoPartials.removeValid(repoConfig.getRepo().getFingerprint());\n+                    if (previousValidPartial != null) {\n+                        final boolean isSameRevisionAsOfPreviousValidPartial = ((RepoConfigOrigin) incoming.getOrigin()).getRevision().equals(((RepoConfigOrigin) previousValidPartial.getOrigin()).getRevision());\n+                        // In case of last valid partials are same as of incoming partials, config repo rules are changed causing the rule validation failure.\n+                        // in such case, remove the valid partials without clearing the server health message. Server health message is populated for the same fingerprint with the latest parse failure message.\n+                        if (isSameRevisionAsOfPreviousValidPartial) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bdbdf95c693da3e9f12163d223f71a2404abeaf"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxODA2Mg==", "bodyText": "I get your point why we need to check rules for last valid partial against the current rules. guess my previous comment has to change to something like,\nif (updateConfig(incoming, fingerprint, repoConfig)) {\n    cachedGoPartials.markAsValid(fingerprint, incoming);\n} else {\n    final PartialConfig previousValidPartial = cachedGoPartials.getValid(repoConfig.getRepo().getFingerprint());\n    if (validPartialHasRuleViolations(previousValidPartial)) {\n        // do not allow fallback to the last version of the partial if the current rules do not allow\n        cachedGoPartials.removeValidWithoutClearingServerHealthMessage(repoConfig.getRepo().getFingerprint());\n        goConfigService.updateConfig(cruiseConfig -> {\n            cruiseConfig.getPartials().remove(cachedGoPartials.findPartialByFingerprint(cruiseConfig, fingerprint));\n            return cruiseConfig;\n        });\n    }\n}", "url": "https://github.com/gocd/gocd/pull/8369#discussion_r459018062", "createdAt": "2020-07-22T19:03:32Z", "author": {"login": "maheshp"}, "path": "server/src/main/java/com/thoughtworks/go/config/PartialConfigService.java", "diffHunk": "@@ -69,27 +70,57 @@ public void onSuccessPartialConfig(ConfigRepoConfig repoConfig, PartialConfig in\n \n         if (this.configWatchList.hasConfigRepoWithFingerprint(fingerprint)) {\n             if (shouldMergePartial(incoming, fingerprint, repoConfig)) {\n-                // validate rules before attempting updateConfig() so that\n-                // rule violations will be considered before accepting a merge;\n-                // updateConfig() only considers structural validity.\n-                final boolean violatesRules = hasRuleViolations(incoming);\n-\n+                // mark the fingerprint as last known\n                 cachedGoPartials.cacheAsLastKnown(fingerprint, incoming);\n \n-                if (updateConfig(incoming, fingerprint, repoConfig)) {\n+                //validate rules\n+                hasRuleViolations(incoming);\n+\n+                //validate config.\n+                // updateConfig will fail to update the configuration if there are validation errors.\n+                // Even in case of rules violation, the updateConfig method is required to populate a server health message of rule violation, which also will be shown on the config repo spa.\n+                final boolean isConfigUpdated = updateConfig(incoming, fingerprint, repoConfig);\n+\n+                if (isConfigUpdated) {\n+                    // mark the partial as valid when config is updated successfully for it.\n                     cachedGoPartials.markAsValid(fingerprint, incoming);\n                 } else {\n                     final PartialConfig previousValidPartial = cachedGoPartials.getValid(repoConfig.getRepo().getFingerprint());\n \n-                    if (violatesRules && hasRuleViolations(previousValidPartial)) {\n-                        // do not allow fallback to the last version of the partial if the current rules do not allow\n-                        cachedGoPartials.removeValid(repoConfig.getRepo().getFingerprint());\n+                    if (previousValidPartial != null) {\n+                        final boolean isSameRevisionAsOfPreviousValidPartial = ((RepoConfigOrigin) incoming.getOrigin()).getRevision().equals(((RepoConfigOrigin) previousValidPartial.getOrigin()).getRevision());\n+                        // In case of last valid partials are same as of incoming partials, config repo rules are changed causing the rule validation failure.\n+                        // in such case, remove the valid partials without clearing the server health message. Server health message is populated for the same fingerprint with the latest parse failure message.\n+                        if (isSameRevisionAsOfPreviousValidPartial) {\n+                            removeCachedPartialsAndUpdateConfig(fingerprint);\n+                        } else {\n+                            // lets say the latest partial is invalid for the current config repo rules.\n+                            // in such cases, validate the previous valid partial with respect to current config repo rules.\n+                            // if the previous valid partials are valid - do nothing - as the error for the latest partial is already populated and config contains the last known partial\n+                            // and if the previous valid partials are invalid - remove those config without clearing the server health message. Server health message is populated for the same fingerprint with the latest parse failure message.\n+                            ((RepoConfigOrigin) previousValidPartial.getOrigin()).setConfigRepo(((RepoConfigOrigin) incoming.getOrigin()).getConfigRepo());\n+                            if (hasRuleViolations(previousValidPartial)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bdbdf95c693da3e9f12163d223f71a2404abeaf"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18463b8dbd635de151687d8ea0ce294a68ee9338", "author": {"user": {"login": "GaneshSPatil", "name": "Ganesh S Patil"}}, "url": "https://github.com/gocd/gocd/commit/18463b8dbd635de151687d8ea0ce294a68ee9338", "committedDate": "2020-07-23T03:48:51Z", "message": "Fix config repository rules violation (#8368)\n\n* Remove pipelines from config on rules failure.\n* Remove cached partial when merge fails.\n* Revalidate last valid partials with latest config repo rules."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7bdbdf95c693da3e9f12163d223f71a2404abeaf", "author": {"user": {"login": "GaneshSPatil", "name": "Ganesh S Patil"}}, "url": "https://github.com/gocd/gocd/commit/7bdbdf95c693da3e9f12163d223f71a2404abeaf", "committedDate": "2020-07-22T15:05:05Z", "message": "Fix config repository rules violation (#8368)\n\n* Remove pipelines from config on rules failure.\n* Remove cached partial when merge fails.\n* Revalidate last valid partials with latest config repo rules."}, "afterCommit": {"oid": "18463b8dbd635de151687d8ea0ce294a68ee9338", "author": {"user": {"login": "GaneshSPatil", "name": "Ganesh S Patil"}}, "url": "https://github.com/gocd/gocd/commit/18463b8dbd635de151687d8ea0ce294a68ee9338", "committedDate": "2020-07-23T03:48:51Z", "message": "Fix config repository rules violation (#8368)\n\n* Remove pipelines from config on rules failure.\n* Remove cached partial when merge fails.\n* Revalidate last valid partials with latest config repo rules."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDQ4NTg4", "url": "https://github.com/gocd/gocd/pull/8369#pullrequestreview-454448588", "createdAt": "2020-07-23T19:53:22Z", "commit": {"oid": "18463b8dbd635de151687d8ea0ce294a68ee9338"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo1MzoyMlrOG2ZT8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo1MzoyMlrOG2ZT8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5MDk5Mw==", "bodyText": "@GaneshSPatil do we need to explicitly check for rules violation here? Wouldn't config update apply rules?", "url": "https://github.com/gocd/gocd/pull/8369#discussion_r459690993", "createdAt": "2020-07-23T19:53:22Z", "author": {"login": "maheshp"}, "path": "server/src/main/java/com/thoughtworks/go/config/PartialConfigService.java", "diffHunk": "@@ -69,21 +70,40 @@ public void onSuccessPartialConfig(ConfigRepoConfig repoConfig, PartialConfig in\n \n         if (this.configWatchList.hasConfigRepoWithFingerprint(fingerprint)) {\n             if (shouldMergePartial(incoming, fingerprint, repoConfig)) {\n-                // validate rules before attempting updateConfig() so that\n-                // rule violations will be considered before accepting a merge;\n-                // updateConfig() only considers structural validity.\n-                final boolean violatesRules = hasRuleViolations(incoming);\n-\n+                // mark the fingerprint as last known\n                 cachedGoPartials.cacheAsLastKnown(fingerprint, incoming);\n \n-                if (updateConfig(incoming, fingerprint, repoConfig)) {\n+                //validate rules\n+                hasRuleViolations(incoming);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18463b8dbd635de151687d8ea0ce294a68ee9338"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b803c0f58b1a5ac660b3e836f9abcb3ccf381a81", "author": {"user": {"login": "maheshp", "name": "Mahesh Panchaksharaiah"}}, "url": "https://github.com/gocd/gocd/commit/b803c0f58b1a5ac660b3e836f9abcb3ccf381a81", "committedDate": "2020-07-24T03:55:18Z", "message": "Check rule violation on last valid partials #8368\n\n* PartialConfigService#onFailedPartialConfig was a no-op earlier.\n  In cases where the config repo parse failed with the latest commit\n  but had a last valid partial, any rule changes were not applied till\n  the config repo parse was successful.\n  Now config_repo parse failures checks rule violation on last\n  valid partial."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1879, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}