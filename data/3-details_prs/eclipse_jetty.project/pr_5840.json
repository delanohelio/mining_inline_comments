{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0NDQyNjA5", "number": 5840, "title": "Issue #5832 - shutdown Javax WSClientContainer with webapp if possible.", "bodyText": "Issue #5832\nIf ContainerProvider.getWebSocketContainer() is used within a webapp, we will attach its lifeCycle to the ContextHandler so that it shuts down with the webapp and not in the ShutdownThread.", "createdAt": "2020-12-23T00:49:18Z", "url": "https://github.com/eclipse/jetty.project/pull/5840", "merged": true, "mergeCommit": {"oid": "d9eefc92313ea6c7bfc4505600da0fa5ad5b3b07"}, "closed": true, "closedAt": "2021-03-01T05:00:15Z", "author": {"login": "lachlan-roberts"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdofWS-gH2gAyNTQ0NDQyNjA5Ojk3YmJlYzdhYzA2OTU3ODBjY2FkMzU3NWQzZTZhNTViYzc4Y2ViNmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd85sugAFqTU5NjE4NTY2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "97bbec7ac0695780ccad3575d3e6a55bc78ceb6b", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/97bbec7ac0695780ccad3575d3e6a55bc78ceb6b", "committedDate": "2020-12-22T00:25:37Z", "message": "Issue #5832 - deregister ShutdownThread for WebSocketClientContainer\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "374e02cbc3990622f3679d98a71aa27b011cc372", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/374e02cbc3990622f3679d98a71aa27b011cc372", "committedDate": "2020-12-22T04:53:10Z", "message": "register ShutdownThread in doStart\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25f8c65539e3349e10f9b62ff9d4cee365e5afdb", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/25f8c65539e3349e10f9b62ff9d4cee365e5afdb", "committedDate": "2020-12-23T00:36:18Z", "message": "Issue #5832 - shutdown WSClientContainer with ContextHandler if possible\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd1d4bc1ca783f07b6542038f47cfa329f44b12f", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/dd1d4bc1ca783f07b6542038f47cfa329f44b12f", "committedDate": "2020-12-23T00:45:09Z", "message": "Issue #5832 - use lifeCycleStopping as lifeCycleStopped is never called\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3ODMxNjcw", "url": "https://github.com/eclipse/jetty.project/pull/5840#pullrequestreview-557831670", "createdAt": "2020-12-23T12:13:52Z", "commit": {"oid": "dd1d4bc1ca783f07b6542038f47cfa329f44b12f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoxMzo1MlrOIKi92w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoxMzo1MlrOIKi92w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyOTU2Mw==", "bodyText": "I don't think you can just ask the classloader of the JavaxWebSocketClientContainer to load the ContextHandler. You have to consider all the permutations of the way the javax websocket client can be deployed, and thus which classloaders may be in play:\n\ndeployed as a standalone java program:  in this case probably the classloader of JavaxWebSocketClientContainer can see the ContextHandler class (if there is one).\ndeployed in jetty, with the javax.websocket client jars inside the webapp: in this case the classloader of JavaxWebSocketClientContainer is probably the webapp classloader, and the ContextHandler class is hidden from the webapp so you get a false negative.\ndeployed in jetty, javax.websocket client jars on the server classpath: in this case probably the classloader of JavaxWebSocketClientContainer can see the ContextHandler.\ndeployed in another container, javax.websocket client jars inside the webapp: in this case it doesn't matter which classloader, none of them should be able to see ContextHandler (unless the user has also included the server jar inside the webapp, but that's ok, there won't be a current context).\n\nSo, to be sure to cover every possible way the javax.websocket client can be deployed, I think you have to start at the Thread context classloader, and then work backwards up the parent chain, trying them all to find the ContextHandler class.", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r547929563", "createdAt": "2020-12-23T12:13:52Z", "author": {"login": "janbartel"}, "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -271,4 +274,55 @@ private ClientEndpointConfig getAnnotatedConfig(Object endpoint) throws Deployme\n \n         return new AnnotatedClientEndpointConfig(anno);\n     }\n+\n+    @Override\n+    protected void doStart() throws Exception\n+    {\n+        doClientStart();\n+        super.doStart();\n+    }\n+\n+    protected void doClientStart()\n+    {\n+        try\n+        {\n+            Object context = getClass().getClassLoader()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1d4bc1ca783f07b6542038f47cfa329f44b12f"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MDE5MDcz", "url": "https://github.com/eclipse/jetty.project/pull/5840#pullrequestreview-558019073", "createdAt": "2020-12-23T16:02:10Z", "commit": {"oid": "dd1d4bc1ca783f07b6542038f47cfa329f44b12f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjowMjoxMFrOIKpBEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjoxMTo1NFrOIKpRuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyODY5MA==", "bodyText": "Replace this try block with LifeCycle.start(clientContainer).", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r548028690", "createdAt": "2020-12-23T16:02:10Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketClientContainerProvider.java", "diffHunk": "@@ -59,22 +58,14 @@ protected WebSocketContainer getContainer()\n         // TODO: do we want to provide a non-standard way to configure to always return the same clientContainer based on a config somewhere? (system.property?)\n \n         JavaxWebSocketClientContainer clientContainer = new JavaxWebSocketClientContainer();\n-\n-        // Register as JVM runtime shutdown hook?\n-        ShutdownThread.register(clientContainer);\n-\n-        if (!clientContainer.isStarted())\n+        try", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1d4bc1ca783f07b6542038f47cfa329f44b12f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMTczMQ==", "bodyText": "@janbartel I think this is a best effort to try to link this object to the server component tree.\nCases 1 and 3 are covered. Case 2 we don't care -- if you have the implementation classes in the war, chances are the war is not deployed in Jetty (case 4) and even if it is, it's a non-optimal deployment and we tried our best.\nI think the current code is minimal and correct.", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r548031731", "createdAt": "2020-12-23T16:08:58Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -271,4 +274,55 @@ private ClientEndpointConfig getAnnotatedConfig(Object endpoint) throws Deployme\n \n         return new AnnotatedClientEndpointConfig(anno);\n     }\n+\n+    @Override\n+    protected void doStart() throws Exception\n+    {\n+        doClientStart();\n+        super.doStart();\n+    }\n+\n+    protected void doClientStart()\n+    {\n+        try\n+        {\n+            Object context = getClass().getClassLoader()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyOTU2Mw=="}, "originalCommit": {"oid": "dd1d4bc1ca783f07b6542038f47cfa329f44b12f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMjM4Mg==", "bodyText": "This may work, but it's not optimal for dump() purposes.\nI would rather call (via reflection) contextHandler.addBean(this).", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r548032382", "createdAt": "2020-12-23T16:10:32Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -271,4 +274,55 @@ private ClientEndpointConfig getAnnotatedConfig(Object endpoint) throws Deployme\n \n         return new AnnotatedClientEndpointConfig(anno);\n     }\n+\n+    @Override\n+    protected void doStart() throws Exception\n+    {\n+        doClientStart();\n+        super.doStart();\n+    }\n+\n+    protected void doClientStart()\n+    {\n+        try\n+        {\n+            Object context = getClass().getClassLoader()\n+                .loadClass(\"org.eclipse.jetty.server.handler.ContextHandler\")\n+                .getMethod(\"getCurrentContext\")\n+                .invoke(null);\n+\n+            Object contextHandler = context.getClass()\n+                .getMethod(\"getContextHandler\")\n+                .invoke(context);\n+\n+            AbstractLifeCycleListener shutdownListener = new AbstractLifeCycleListener()\n+            {\n+                @Override\n+                public void lifeCycleStopping(LifeCycle event)\n+                {\n+                    LifeCycle.stop(JavaxWebSocketClientContainer.this);\n+                }\n+            };\n+\n+            contextHandler.getClass()\n+                .getMethod(\"addEventListener\", EventListener.class)\n+                .invoke(contextHandler, shutdownListener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1d4bc1ca783f07b6542038f47cfa329f44b12f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMjk1Mw==", "bodyText": "ServerSocket is a bad name, just call it WebSocketContainerServlet.", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r548032953", "createdAt": "2020-12-23T16:11:54Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-tests/src/test/java/org/eclipse/jetty/websocket/javax/tests/ClientInWebappTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under the\n+// terms of the Eclipse Public License v. 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+// which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.javax.tests;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.websocket.ContainerProvider;\n+import javax.websocket.WebSocketContainer;\n+\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.servlet.ServletHolder;\n+import org.eclipse.jetty.websocket.javax.client.internal.JavaxWebSocketClientContainer;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+public class ClientInWebappTest\n+{\n+    private Server server;\n+    private URI serverUri;\n+    private HttpClient httpClient;\n+    private volatile WebSocketContainer container;\n+\n+    public class ServerSocket extends HttpServlet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1d4bc1ca783f07b6542038f47cfa329f44b12f"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3286f9a4546e705da60a7f99130bc6cf52e8f3b8", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/3286f9a4546e705da60a7f99130bc6cf52e8f3b8", "committedDate": "2020-12-24T02:59:45Z", "message": "Issue #5832 - changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMDExMTE1", "url": "https://github.com/eclipse/jetty.project/pull/5840#pullrequestreview-560011115", "createdAt": "2020-12-30T11:30:08Z", "commit": {"oid": "3286f9a4546e705da60a7f99130bc6cf52e8f3b8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMTozMDowOFrOIMrPLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMTozMDowOFrOIMrPLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2MjIyMA==", "bodyText": "@lachlan-roberts fair enough with regards to removing the bean, but then I would prefer to have it symmetrical in doClientStop() -- i.e. call (via reflection) contextHandler.removeBean(this).", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r550162220", "createdAt": "2020-12-30T11:30:08Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -271,4 +274,55 @@ private ClientEndpointConfig getAnnotatedConfig(Object endpoint) throws Deployme\n \n         return new AnnotatedClientEndpointConfig(anno);\n     }\n+\n+    @Override\n+    protected void doStart() throws Exception\n+    {\n+        doClientStart();\n+        super.doStart();\n+    }\n+\n+    protected void doClientStart()\n+    {\n+        try\n+        {\n+            Object context = getClass().getClassLoader()\n+                .loadClass(\"org.eclipse.jetty.server.handler.ContextHandler\")\n+                .getMethod(\"getCurrentContext\")\n+                .invoke(null);\n+\n+            Object contextHandler = context.getClass()\n+                .getMethod(\"getContextHandler\")\n+                .invoke(context);\n+\n+            AbstractLifeCycleListener shutdownListener = new AbstractLifeCycleListener()\n+            {\n+                @Override\n+                public void lifeCycleStopping(LifeCycle event)\n+                {\n+                    LifeCycle.stop(JavaxWebSocketClientContainer.this);\n+                }\n+            };\n+\n+            contextHandler.getClass()\n+                .getMethod(\"addEventListener\", EventListener.class)\n+                .invoke(contextHandler, shutdownListener);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMjM4Mg=="}, "originalCommit": {"oid": "dd1d4bc1ca783f07b6542038f47cfa329f44b12f"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMDMwMTY2", "url": "https://github.com/eclipse/jetty.project/pull/5840#pullrequestreview-560030166", "createdAt": "2020-12-30T12:33:30Z", "commit": {"oid": "3286f9a4546e705da60a7f99130bc6cf52e8f3b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMjozMzozMFrOIMsSjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMjozMzozMFrOIMsSjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3OTQ2OQ==", "bodyText": "As @sbordet says above, I don't think we can add this as a LifeCycle instance, because it may be a different LifeCycle.\nTwo options:\n\ncreate a Proxy class from the LifeCycle interface obtained from the same classloader as the ContextHandler\nuse a javax.servlet.ServletContextListener... but @janbartel will have to let us add one after init and for it's destroy method to still be called (see #5837 )", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r550179469", "createdAt": "2020-12-30T12:33:30Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -271,4 +278,68 @@ private ClientEndpointConfig getAnnotatedConfig(Object endpoint) throws Deployme\n \n         return new AnnotatedClientEndpointConfig(anno);\n     }\n+\n+    @Override\n+    protected void doStart() throws Exception\n+    {\n+        doClientStart();\n+        super.doStart();\n+    }\n+\n+    protected void doClientStart()\n+    {\n+        try\n+        {\n+            Object context = getClass().getClassLoader()\n+                .loadClass(\"org.eclipse.jetty.server.handler.ContextHandler\")\n+                .getMethod(\"getCurrentContext\")\n+                .invoke(null);\n+\n+            Object contextHandler = context.getClass()\n+                .getMethod(\"getContextHandler\")\n+                .invoke(context);\n+\n+            contextHandler.getClass()\n+                .getMethod(\"addManaged\", LifeCycle.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3286f9a4546e705da60a7f99130bc6cf52e8f3b8"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "774dac66a2364b42c43bd8ef1e39c2fde78369b6", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/774dac66a2364b42c43bd8ef1e39c2fde78369b6", "committedDate": "2021-01-08T11:56:44Z", "message": "Allow shutdown of Javax WS Client Container though a SCI\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e19e875f526ef2b766accf73b28c0dd568770a1", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/9e19e875f526ef2b766accf73b28c0dd568770a1", "committedDate": "2021-01-12T06:08:53Z", "message": "Issue #5832 - deprecate and remove usage of the ContainerInitializer utility\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MzQwMjk4", "url": "https://github.com/eclipse/jetty.project/pull/5840#pullrequestreview-566340298", "createdAt": "2021-01-12T14:43:47Z", "commit": {"oid": "9e19e875f526ef2b766accf73b28c0dd568770a1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNDo0Mzo0OFrOISEykA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNjowNjoyNVrOISIzGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgyMzc2MA==", "bodyText": "This method is not used anywhere.\nIf it is really necessary, have it called from the method with less parameters.", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r555823760", "createdAt": "2021-01-12T14:43:48Z", "author": {"login": "sbordet"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java", "diffHunk": "@@ -696,6 +696,27 @@ else if (handler instanceof ServletHandler)\n         relinkHandlers();\n     }\n \n+    /**\n+     * Utility Method to allow for manual execution of {@link javax.servlet.ServletContainerInitializer} when using Embedded Jetty.\n+     * @param containerInitializer the ServletContainerInitializer to register.\n+     * @see Initializer\n+     */\n+    public void addServletContainerInitializer(ServletContainerInitializer containerInitializer)\n+    {\n+        addManaged(new Initializer(this, containerInitializer));\n+    }\n+\n+    /**\n+     * Utility Method to allow for manual execution of {@link javax.servlet.ServletContainerInitializer} when using Embedded Jetty.\n+     * @param containerInitializer the ServletContainerInitializer to register.\n+     * @param classes the Set of application classes.\n+     * @see Initializer\n+     */\n+    public void addServletContainerInitializer(ServletContainerInitializer containerInitializer, Set<Class<?>> classes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e19e875f526ef2b766accf73b28c0dd568770a1"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgyNTM5Ng==", "bodyText": "Can you modify EmbeddedWelTest to use this method?\nCan Initializer be made private?", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r555825396", "createdAt": "2021-01-12T14:45:53Z", "author": {"login": "sbordet"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java", "diffHunk": "@@ -696,6 +696,27 @@ else if (handler instanceof ServletHandler)\n         relinkHandlers();\n     }\n \n+    /**\n+     * Utility Method to allow for manual execution of {@link javax.servlet.ServletContainerInitializer} when using Embedded Jetty.\n+     * @param containerInitializer the ServletContainerInitializer to register.\n+     * @see Initializer\n+     */\n+    public void addServletContainerInitializer(ServletContainerInitializer containerInitializer)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e19e875f526ef2b766accf73b28c0dd568770a1"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgzODU3OA==", "bodyText": "Use a method such as initialize(this) rather than referencing a public field.", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r555838578", "createdAt": "2021-01-12T15:03:06Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketClientShutdown.java", "diffHunk": "@@ -0,0 +1,48 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under the\n+// terms of the Eclipse Public License v. 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+// which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.javax.client;\n+\n+import java.util.Set;\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import javax.servlet.ServletException;\n+\n+import org.eclipse.jetty.util.component.ContainerLifeCycle;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.eclipse.jetty.websocket.javax.client.internal.JavaxWebSocketClientContainer;\n+\n+public class JavaxWebSocketClientShutdown extends ContainerLifeCycle implements ServletContainerInitializer, ServletContextListener\n+{\n+    @Override\n+    public void onStartup(Set<Class<?>> c, ServletContext ctx) throws ServletException\n+    {\n+        JavaxWebSocketClientContainer.SHUTDOWN_CONTAINER.compareAndSet(null, this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e19e875f526ef2b766accf73b28c0dd568770a1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg4MTkzNQ==", "bodyText": "removeBeans() should not be needed.\nAFAIU JavaxWebSocketClientContainer should remove itself (because it adds itself in doClientStart()).\nIf JavaxWebSocketClientContainer.doStop() is missing, it should be implemented similar to doStart().", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r555881935", "createdAt": "2021-01-12T15:56:33Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketClientShutdown.java", "diffHunk": "@@ -0,0 +1,48 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under the\n+// terms of the Eclipse Public License v. 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+// which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.javax.client;\n+\n+import java.util.Set;\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import javax.servlet.ServletException;\n+\n+import org.eclipse.jetty.util.component.ContainerLifeCycle;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.eclipse.jetty.websocket.javax.client.internal.JavaxWebSocketClientContainer;\n+\n+public class JavaxWebSocketClientShutdown extends ContainerLifeCycle implements ServletContainerInitializer, ServletContextListener\n+{\n+    @Override\n+    public void onStartup(Set<Class<?>> c, ServletContext ctx) throws ServletException\n+    {\n+        JavaxWebSocketClientContainer.SHUTDOWN_CONTAINER.compareAndSet(null, this);\n+        ctx.addListener(this);\n+    }\n+\n+    @Override\n+    public void contextInitialized(ServletContextEvent sce)\n+    {\n+        LifeCycle.start(this);\n+    }\n+\n+    @Override\n+    public void contextDestroyed(ServletContextEvent sce)\n+    {\n+        LifeCycle.stop(this);\n+        removeBeans();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e19e875f526ef2b766accf73b28c0dd568770a1"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg4MjQ3Mg==", "bodyText": "No public field, use a method instead.", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r555882472", "createdAt": "2021-01-12T15:57:10Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -52,6 +59,9 @@\n @ManagedObject(\"JSR356 Client Container\")\n public class JavaxWebSocketClientContainer extends JavaxWebSocketContainer implements javax.websocket.WebSocketContainer\n {\n+    private static final Logger LOG = LoggerFactory.getLogger(JavaxWebSocketClientContainer.class);\n+    public static final AtomicReference<ContainerLifeCycle> SHUTDOWN_CONTAINER = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e19e875f526ef2b766accf73b28c0dd568770a1"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg4MzUxMg==", "bodyText": "Now that there is a SCI mechanism, is this needed? The SCI mechanism should cover both when we run in Jetty as well as when we run in other containers because it's a standard mechanism, no?", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r555883512", "createdAt": "2021-01-12T15:58:29Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -271,4 +281,75 @@ private ClientEndpointConfig getAnnotatedConfig(Object endpoint) throws Deployme\n \n         return new AnnotatedClientEndpointConfig(anno);\n     }\n+\n+    @Override\n+    protected void doStart() throws Exception\n+    {\n+        doClientStart();\n+        super.doStart();\n+    }\n+\n+    protected void doClientStart()\n+    {\n+        // If we are running in Jetty register shutdown with the ContextHandler.\n+        // TODO: add test mode to disable this.\n+        if (shutdownWithContextHandler(this))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e19e875f526ef2b766accf73b28c0dd568770a1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg4ODU4MQ==", "bodyText": "This is confusing, as you are passing a lambda to be run after onStartup() with code from the same class?\nWhy can't you just inline the lambda code at the end of onStartup() (where in fact you call afterStartupConsumer.accept())?", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r555888581", "createdAt": "2021-01-12T16:05:15Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/config/JavaxWebSocketServletContainerInitializer.java", "diffHunk": "@@ -102,7 +104,7 @@ public static void configure(ServletContextHandler context, Configurator configu\n         // the initialization phase is over. (important for this SCI to function)\n         context.getServletContext().setExtendedListenerTypes(true);\n \n-        context.addEventListener(ContainerInitializer.asContextListener(new JavaxWebSocketServletContainerInitializer())\n+        context.addServletContainerInitializer(new JavaxWebSocketServletContainerInitializer()\n             .afterStartup((servletContext) ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e19e875f526ef2b766accf73b28c0dd568770a1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg4OTQzMw==", "bodyText": "Same comment as for the javax version.\nThe lambda should be inlined in onStartup().", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r555889433", "createdAt": "2021-01-12T16:06:25Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketServletContainerInitializer.java", "diffHunk": "@@ -51,17 +52,15 @@ public static void configure(ServletContextHandler context, Configurator configu\n         if (!context.isStopped())\n             throw new IllegalStateException(\"configure should be called before starting\");\n \n-        context.addEventListener(\n-            ContainerInitializer\n-                .asContextListener(new JettyWebSocketServletContainerInitializer())\n-                .afterStartup((servletContext) ->\n+        context.addServletContainerInitializer(new JettyWebSocketServletContainerInitializer()\n+            .afterStartup((servletContext) ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e19e875f526ef2b766accf73b28c0dd568770a1"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35051dfde51a53442384e5eb3bf85758c765ac7b", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/35051dfde51a53442384e5eb3bf85758c765ac7b", "committedDate": "2021-01-13T06:54:30Z", "message": "Issue #5832 - changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f6176661a824b153eb6997177ccc594a9ac876c", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/2f6176661a824b153eb6997177ccc594a9ac876c", "committedDate": "2021-01-14T03:38:12Z", "message": "improve testing for JavaxWebSocketClientContainer shutdown\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29f185931e262cc10ada924243320e0c52dead91", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/29f185931e262cc10ada924243320e0c52dead91", "committedDate": "2021-01-18T05:01:18Z", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-5832-WebSocketShutdownThread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a60ecfa4cc86490db8496f3f6117d28e8c28ab50", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/a60ecfa4cc86490db8496f3f6117d28e8c28ab50", "committedDate": "2021-01-18T12:23:35Z", "message": "Issue #5832 - fix bugs when stopping the JavaxWebSocketClientContainer\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99aef1a2c0d8721b69cb027ff33d048c609c73f1", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/99aef1a2c0d8721b69cb027ff33d048c609c73f1", "committedDate": "2021-01-18T12:50:20Z", "message": "Issue #5832 - fix bugs when stopping the JavaxWebSocketClientContainer\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxNDE4MDgw", "url": "https://github.com/eclipse/jetty.project/pull/5840#pullrequestreview-571418080", "createdAt": "2021-01-19T16:23:54Z", "commit": {"oid": "99aef1a2c0d8721b69cb027ff33d048c609c73f1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxNjoyMzo1NFrOIWWYvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxNjozMDoxOFrOIWWs2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMwNjM2NQ==", "bodyText": "You should not be able to add a ServletContainerInitializer after the ServletContextHandler has started.\nBut in any case I'm -1 to add these methods to ServletContextHandler without a greater consideration of the integration with the handling of ServletContainerInitializers by the AnnotationConfiguration.  There's already been divergence with the addition of the ServletContextHandler.Initializer and the ServletContextHandler.ServletContainerInitializerCaller.  Once we expose methods, it's extremely hard to remove them, so we have to be sure we're crafting exactly the right methods.", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r560306365", "createdAt": "2021-01-19T16:23:54Z", "author": {"login": "janbartel"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java", "diffHunk": "@@ -696,6 +696,27 @@ else if (handler instanceof ServletHandler)\n         relinkHandlers();\n     }\n \n+    /**\n+     * Utility Method to allow for manual execution of {@link javax.servlet.ServletContainerInitializer} when using Embedded Jetty.\n+     * @param containerInitializer the ServletContainerInitializer to register.\n+     * @see Initializer\n+     */\n+    public void addServletContainerInitializer(ServletContainerInitializer containerInitializer)\n+    {\n+        addServletContainerInitializer(containerInitializer, Collections.emptySet());\n+    }\n+\n+    /**\n+     * Utility Method to allow for manual execution of {@link javax.servlet.ServletContainerInitializer} when using Embedded Jetty.\n+     * @param containerInitializer the ServletContainerInitializer to register.\n+     * @param classes the Set of application classes.\n+     * @see Initializer\n+     */\n+    public void addServletContainerInitializer(ServletContainerInitializer containerInitializer, Set<Class<?>> classes)\n+    {\n+        addManaged(new Initializer(this, containerInitializer, classes));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99aef1a2c0d8721b69cb027ff33d048c609c73f1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMwODU2MA==", "bodyText": "Why is this a ContainerLifeCycle?  I don't see any overriding of doStart/doStop, so I don't see the point?", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r560308560", "createdAt": "2021-01-19T16:26:37Z", "author": {"login": "janbartel"}, "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketShutdownContainer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under the\n+// terms of the Eclipse Public License v. 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+// which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.javax.client;\n+\n+import java.util.Set;\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import javax.servlet.ServletException;\n+\n+import org.eclipse.jetty.util.component.ContainerLifeCycle;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.eclipse.jetty.websocket.javax.client.internal.JavaxWebSocketClientContainer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JavaxWebSocketShutdownContainer extends ContainerLifeCycle implements ServletContainerInitializer, ServletContextListener", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99aef1a2c0d8721b69cb027ff33d048c609c73f1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMxMDc4Ng==", "bodyText": "I don't understand why this is necessary? Why can't this ServletContainerInitializer be discovered by jetty in the same way as other ServletContainerInitializers?", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r560310786", "createdAt": "2021-01-19T16:29:20Z", "author": {"login": "janbartel"}, "path": "jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/config/JavaxWebSocketServletContainerInitializer.java", "diffHunk": "@@ -96,28 +107,7 @@ public static void configure(ServletContextHandler context, Configurator configu\n     {\n         if (!context.isStopped())\n             throw new IllegalStateException(\"configure should be called before starting\");\n-\n-        // In this embedded-jetty usage, allow ServletContext.addListener() to\n-        // add other ServletContextListeners (such as the ContextDestroyListener) after\n-        // the initialization phase is over. (important for this SCI to function)\n-        context.getServletContext().setExtendedListenerTypes(true);\n-\n-        context.addEventListener(ContainerInitializer.asContextListener(new JavaxWebSocketServletContainerInitializer())\n-            .afterStartup((servletContext) ->\n-            {\n-                JavaxWebSocketServerContainer serverContainer = JavaxWebSocketServerContainer.getContainer(servletContext);\n-                if (configurator != null)\n-                {\n-                    try\n-                    {\n-                        configurator.accept(servletContext, serverContainer);\n-                    }\n-                    catch (DeploymentException e)\n-                    {\n-                        throw new RuntimeException(\"Failed to deploy WebSocket Endpoint\", e);\n-                    }\n-                }\n-            }));\n+        context.addServletContainerInitializer(new JavaxWebSocketServletContainerInitializer(configurator));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99aef1a2c0d8721b69cb027ff33d048c609c73f1"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMxMTUxNA==", "bodyText": "See previous comments.", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r560311514", "createdAt": "2021-01-19T16:30:18Z", "author": {"login": "janbartel"}, "path": "jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketServletContainerInitializer.java", "diffHunk": "@@ -50,18 +60,7 @@ public static void configure(ServletContextHandler context, Configurator configu\n     {\n         if (!context.isStopped())\n             throw new IllegalStateException(\"configure should be called before starting\");\n-\n-        context.addEventListener(\n-            ContainerInitializer\n-                .asContextListener(new JettyWebSocketServletContainerInitializer())\n-                .afterStartup((servletContext) ->\n-                {\n-                    if (configurator != null)\n-                    {\n-                        JettyWebSocketServerContainer container = JettyWebSocketServerContainer.getContainer(servletContext);\n-                        configurator.accept(servletContext, container);\n-                    }\n-                }));\n+        context.addServletContainerInitializer(new JettyWebSocketServletContainerInitializer(configurator));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99aef1a2c0d8721b69cb027ff33d048c609c73f1"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxNTU0NzU4", "url": "https://github.com/eclipse/jetty.project/pull/5840#pullrequestreview-571554758", "createdAt": "2021-01-19T18:58:28Z", "commit": {"oid": "99aef1a2c0d8721b69cb027ff33d048c609c73f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxODo1ODoyOFrOIWczFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxODo1ODoyOFrOIWczFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQxMTQxMg==", "bodyText": "can this be named as a setter rather than initialize as it is used to null reference as well on destroy", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r560411412", "createdAt": "2021-01-19T18:58:28Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -52,9 +58,20 @@\n @ManagedObject(\"JSR356 Client Container\")\n public class JavaxWebSocketClientContainer extends JavaxWebSocketContainer implements javax.websocket.WebSocketContainer\n {\n+    private static final Logger LOG = LoggerFactory.getLogger(JavaxWebSocketClientContainer.class);\n+    private static final AtomicReference<ContainerLifeCycle> SHUTDOWN_CONTAINER = new AtomicReference<>();\n+\n+    public static void initialize(ContainerLifeCycle container)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99aef1a2c0d8721b69cb027ff33d048c609c73f1"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6c1ccfdd08b3494ab0a215e1591da721630af7c", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/c6c1ccfdd08b3494ab0a215e1591da721630af7c", "committedDate": "2021-01-20T06:00:33Z", "message": "Rename JavaxWebSocketClientContainer.initialize to setShutdownContainer.\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff4f2ef28f4f83036f5c409116ab457dfd7f5348", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/ff4f2ef28f4f83036f5c409116ab457dfd7f5348", "committedDate": "2021-01-21T04:27:15Z", "message": "only allow adding ServletContainerInitializers before starting\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc2MTMxNjYy", "url": "https://github.com/eclipse/jetty.project/pull/5840#pullrequestreview-576131662", "createdAt": "2021-01-26T08:49:25Z", "commit": {"oid": "ff4f2ef28f4f83036f5c409116ab457dfd7f5348"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwODo0OToyNVrOIaMjnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwODo1NTo1NlrOIaMz6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDMzOTYxMw==", "bodyText": "Now that you have implemented doClientStop() I don't think this is necessary.", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r564339613", "createdAt": "2021-01-26T08:49:25Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketShutdownContainer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under the\n+// terms of the Eclipse Public License v. 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+// which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.javax.client;\n+\n+import java.util.Set;\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import javax.servlet.ServletException;\n+\n+import org.eclipse.jetty.util.component.ContainerLifeCycle;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.eclipse.jetty.websocket.javax.client.internal.JavaxWebSocketClientContainer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JavaxWebSocketShutdownContainer extends ContainerLifeCycle implements ServletContainerInitializer, ServletContextListener\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(JavaxWebSocketShutdownContainer.class);\n+\n+    @Override\n+    public void onStartup(Set<Class<?>> c, ServletContext ctx) throws ServletException\n+    {\n+        JavaxWebSocketClientContainer.setShutdownContainer(this);\n+        ctx.addListener(this);\n+    }\n+\n+    @Override\n+    public void contextInitialized(ServletContextEvent sce)\n+    {\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"contextInitialized({}) {}\", sce, this);\n+        LifeCycle.start(this);\n+    }\n+\n+    @Override\n+    public void contextDestroyed(ServletContextEvent sce)\n+    {\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"contextDestroyed({}) {}\", sce, this);\n+\n+        LifeCycle.stop(this);\n+        removeBeans();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4f2ef28f4f83036f5c409116ab457dfd7f5348"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDM0MDczNA==", "bodyText": "This needs to be a proper setter method, starting with set and the getter should be there too, and used in the code.", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r564340734", "createdAt": "2021-01-26T08:51:13Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -95,6 +112,11 @@ public JavaxWebSocketClientContainer(WebSocketComponents components, Function<We\n         this.frameHandlerFactory = new JavaxWebSocketClientFrameHandlerFactory(this);\n     }\n \n+    public void allowShutdownWithContextHandler(boolean allowShutdownWithContextHandler)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4f2ef28f4f83036f5c409116ab457dfd7f5348"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDM0Mzc4NQ==", "bodyText": "I would add two tests that prove the behavior in case of multiple web applications, since we want to make sure that the static field SHUTDOWN_CONTAINER is not overwritten by other instances.\nOne test should have the classes provided by the server, and one by the web applications (both).", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r564343785", "createdAt": "2021-01-26T08:55:56Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-tests/src/test/java/org/eclipse/jetty/websocket/javax/tests/JavaxClientShutdownWithServerTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under the\n+// terms of the Eclipse Public License v. 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+// which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.javax.tests;\n+\n+import java.net.URI;\n+import java.util.Collection;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.websocket.ContainerProvider;\n+import javax.websocket.WebSocketContainer;\n+\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.servlet.ServletHolder;\n+import org.eclipse.jetty.util.component.ContainerLifeCycle;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.eclipse.jetty.websocket.javax.client.JavaxWebSocketShutdownContainer;\n+import org.eclipse.jetty.websocket.javax.client.internal.JavaxWebSocketClientContainer;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+public class JavaxClientShutdownWithServerTest\n+{\n+    private Server server;\n+    private ServletContextHandler contextHandler;\n+    private URI serverUri;\n+    private HttpClient httpClient;\n+    private volatile WebSocketContainer container;\n+    private ContainerLifeCycle shutdownContainer;\n+\n+    public class ContextHandlerShutdownServlet extends HttpServlet\n+    {\n+        @Override\n+        protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n+        {\n+            container = ContainerProvider.getWebSocketContainer();\n+        }\n+    }\n+\n+    public class ServletContainerInitializerShutdownServlet extends HttpServlet\n+    {\n+        @Override\n+        protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n+        {\n+            JavaxWebSocketClientContainer clientContainer = new JavaxWebSocketClientContainer();\n+            clientContainer.allowShutdownWithContextHandler(false);\n+            LifeCycle.start(clientContainer);\n+            container = clientContainer;\n+        }\n+    }\n+\n+    @BeforeEach\n+    public void before() throws Exception\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        contextHandler = new ServletContextHandler();\n+        contextHandler.setContextPath(\"/\");\n+        contextHandler.addServlet(new ServletHolder(new ContextHandlerShutdownServlet()), \"/contextHandler\");\n+        contextHandler.addServlet(new ServletHolder(new ServletContainerInitializerShutdownServlet()), \"/shutdownContainer\");\n+        server.setHandler(contextHandler);\n+\n+        // Because we are using embedded we must manually add the Javax WS Client Shutdown SCI.\n+        JavaxWebSocketShutdownContainer javaxWebSocketClientShutdown = new JavaxWebSocketShutdownContainer();\n+        shutdownContainer = javaxWebSocketClientShutdown;\n+        contextHandler.addServletContainerInitializer(javaxWebSocketClientShutdown);\n+\n+        server.start();\n+        serverUri = WSURI.toWebsocket(server.getURI());\n+\n+        httpClient = new HttpClient();\n+        httpClient.start();\n+    }\n+\n+    @AfterEach\n+    public void after() throws Exception\n+    {\n+        httpClient.stop();\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testShutdownWithContextHandler() throws Exception\n+    {\n+        ContentResponse response = httpClient.GET(serverUri.resolve(\"/contextHandler\"));\n+        assertThat(response.getStatus(), is(HttpStatus.OK_200));\n+\n+        assertNotNull(container);\n+        assertThat(container, instanceOf(JavaxWebSocketClientContainer.class));\n+        JavaxWebSocketClientContainer clientContainer = (JavaxWebSocketClientContainer)container;\n+        assertThat(clientContainer.isRunning(), is(true));\n+\n+        // The container should be a bean on the ContextHandler.\n+        Collection<WebSocketContainer> containedBeans = contextHandler.getBeans(WebSocketContainer.class);\n+        assertThat(containedBeans.size(), is(1));\n+        assertThat(containedBeans.toArray()[0], is(container));\n+\n+        // The client should be attached to the servers LifeCycle and should stop with it.\n+        server.stop();\n+        assertThat(clientContainer.isRunning(), is(false));\n+        assertThat(server.getContainedBeans(WebSocketContainer.class), empty());\n+    }\n+\n+    @Test\n+    public void testShutdownWithShutdownContainer() throws Exception\n+    {\n+        ContentResponse response = httpClient.GET(serverUri.resolve(\"/shutdownContainer\"));\n+        assertThat(response.getStatus(), is(HttpStatus.OK_200));\n+\n+        assertNotNull(container);\n+        assertThat(container, instanceOf(JavaxWebSocketClientContainer.class));\n+        JavaxWebSocketClientContainer clientContainer = (JavaxWebSocketClientContainer)container;\n+        assertThat(clientContainer.isRunning(), is(true));\n+\n+        // The container should be a bean on the ContextHandler.\n+        Collection<WebSocketContainer> containedBeans = shutdownContainer.getBeans(WebSocketContainer.class);\n+        assertThat(containedBeans.size(), is(1));\n+        assertThat(containedBeans.toArray()[0], is(container));\n+\n+        // The client should be attached to the servers LifeCycle and should stop with it.\n+        server.stop();\n+        assertThat(clientContainer.isRunning(), is(false));\n+        assertThat(server.getContainedBeans(WebSocketContainer.class), empty());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4f2ef28f4f83036f5c409116ab457dfd7f5348"}, "originalPosition": 149}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7760d04a87c963cecc35b22121f28462a08a4b85", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/7760d04a87c963cecc35b22121f28462a08a4b85", "committedDate": "2021-02-21T22:53:31Z", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-5832-WebSocketShutdownThread\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed863615819e9c4a98abf6d405b2846b1f1d86e7", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/ed863615819e9c4a98abf6d405b2846b1f1d86e7", "committedDate": "2021-02-21T23:03:43Z", "message": "Revert changes to ServletContainerInitializer\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47f24db0bea94b2057acaaca7d901584cf1cbd02", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/47f24db0bea94b2057acaaca7d901584cf1cbd02", "committedDate": "2021-02-22T10:12:57Z", "message": "Issue #5832 - Improve testing for WebSocket client shutdown.\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk1MjM0MTAx", "url": "https://github.com/eclipse/jetty.project/pull/5840#pullrequestreview-595234101", "createdAt": "2021-02-22T11:03:01Z", "commit": {"oid": "47f24db0bea94b2057acaaca7d901584cf1cbd02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMTowMzowMVrOIpSR4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMTowMzowMVrOIpSR4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDE2MjAxOA==", "bodyText": "comment here", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r580162018", "createdAt": "2021-02-22T11:03:01Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -261,4 +277,123 @@ private ClientEndpointConfig getAnnotatedConfig(Object endpoint) throws Deployme\n \n         return new AnnotatedClientEndpointConfig(anno);\n     }\n+\n+    @Override\n+    protected void doStart() throws Exception\n+    {\n+        doClientStart();\n+        super.doStart();\n+    }\n+\n+    @Override\n+    protected void doStop() throws Exception\n+    {\n+        super.doStop();\n+        doClientStop();\n+    }\n+\n+    protected void doClientStart()\n+    {\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"doClientStart() {}\", this);\n+\n+        // If we are running in Jetty register shutdown with the ContextHandler.\n+        if (addToContextHandler())\n+        {\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"Shutdown registered with ContextHandler\");\n+            return;\n+        }\n+\n+        // If we are running inside a different ServletContainer we can register with the SHUTDOWN_CONTAINER static.\n+        ContainerLifeCycle shutdownContainer = SHUTDOWN_CONTAINER.get();\n+        if (shutdownContainer != null)\n+        {\n+            shutdownContainer.addManaged(this);\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"Shutdown registered with ShutdownContainer {}\", shutdownContainer);\n+            return;\n+        }\n+\n+        ShutdownThread.register(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f24db0bea94b2057acaaca7d901584cf1cbd02"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk1MjM1NDQ4", "url": "https://github.com/eclipse/jetty.project/pull/5840#pullrequestreview-595235448", "createdAt": "2021-02-22T11:04:51Z", "commit": {"oid": "47f24db0bea94b2057acaaca7d901584cf1cbd02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMTowNDo1MVrOIpSWJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMTowNDo1MVrOIpSWJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDE2MzExMQ==", "bodyText": "I comment here about the scope of this static with regards to server/context classloaders would be handy", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r580163111", "createdAt": "2021-02-22T11:04:51Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -52,6 +58,16 @@\n @ManagedObject(\"JSR356 Client Container\")\n public class JavaxWebSocketClientContainer extends JavaxWebSocketContainer implements javax.websocket.WebSocketContainer\n {\n+    private static final Logger LOG = LoggerFactory.getLogger(JavaxWebSocketClientContainer.class);\n+    private static final AtomicReference<ContainerLifeCycle> SHUTDOWN_CONTAINER = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f24db0bea94b2057acaaca7d901584cf1cbd02"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk1MjM3MzU1", "url": "https://github.com/eclipse/jetty.project/pull/5840#pullrequestreview-595237355", "createdAt": "2021-02-22T11:07:27Z", "commit": {"oid": "47f24db0bea94b2057acaaca7d901584cf1cbd02"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk1NTU1Mzk1", "url": "https://github.com/eclipse/jetty.project/pull/5840#pullrequestreview-595555395", "createdAt": "2021-02-22T16:47:23Z", "commit": {"oid": "47f24db0bea94b2057acaaca7d901584cf1cbd02"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk2MTg1NjYz", "url": "https://github.com/eclipse/jetty.project/pull/5840#pullrequestreview-596185663", "createdAt": "2021-02-23T10:26:08Z", "commit": {"oid": "47f24db0bea94b2057acaaca7d901584cf1cbd02"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4957, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}