{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MDQ1MjAz", "number": 5778, "title": "fix ByteBufferPool race condition", "bodyText": "Closes #5775", "createdAt": "2020-12-09T09:39:52Z", "url": "https://github.com/eclipse/jetty.project/pull/5778", "merged": true, "mergeCommit": {"oid": "ea621cea9b5cc67ee5efc2608b6e913fa64a504b"}, "closed": true, "closedAt": "2020-12-09T15:34:13Z", "author": {"login": "lorban"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkcvcGAFqTU0ODA3Mzc0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkgjA9gBqjQwOTA1NTY3NjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MDczNzQ0", "url": "https://github.com/eclipse/jetty.project/pull/5778#pullrequestreview-548073744", "createdAt": "2020-12-09T11:07:34Z", "commit": {"oid": "5318f1da5da37d53b26897cb81181e7e57739bf6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTowNzozNFrOICPDQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTowNzozNFrOICPDQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIxNDY1OQ==", "bodyText": "In this way we always pay the cost of volatile, which is updated much more often than it's being read.\nFrankly, I would leave it non-volatile.\nNext best is using AtomicLong.lazySet() in 9.4.x and VarHandle in 10.0.x.\nI would refrain using volatile unconditionally like proposed here, if possible.", "url": "https://github.com/eclipse/jetty.project/pull/5778#discussion_r539214659", "createdAt": "2020-12-09T11:07:34Z", "author": {"login": "sbordet"}, "path": "jetty-io/src/main/java/org/eclipse/jetty/io/ByteBufferPool.java", "diffHunk": "@@ -158,7 +158,7 @@ public void release(ByteBuffer buffer)\n         private final int _capacity;\n         private final int _maxSize;\n         private final AtomicInteger _size;\n-        private long _lastUpdate = System.nanoTime();\n+        private volatile long _lastUpdate = System.nanoTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5318f1da5da37d53b26897cb81181e7e57739bf6"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MTMwODI3", "url": "https://github.com/eclipse/jetty.project/pull/5778#pullrequestreview-548130827", "createdAt": "2020-12-09T12:25:27Z", "commit": {"oid": "ee84d8c58d68b49c95e9a7ca3652d434398a5118"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjoyNToyN1rOICSChA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjoyNToyN1rOICSChA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI2MzYyMA==", "bodyText": "I think it should be getAcquire() because we want to see all modifications made by other threads (i.e. we want the semantic of a volatile read). I would remove the comment entirely -- the code difference would be enough.", "url": "https://github.com/eclipse/jetty.project/pull/5778#discussion_r539263620", "createdAt": "2020-12-09T12:25:27Z", "author": {"login": "sbordet"}, "path": "jetty-io/src/main/java/org/eclipse/jetty/io/ByteBufferPool.java", "diffHunk": "@@ -252,6 +252,7 @@ int size()\n \n         long getLastUpdate()\n         {\n+            // This could be changed to a getOpaque() call on JDK 9+.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee84d8c58d68b49c95e9a7ca3652d434398a5118"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MzA3MjAz", "url": "https://github.com/eclipse/jetty.project/pull/5778#pullrequestreview-548307203", "createdAt": "2020-12-09T15:32:59Z", "commit": {"oid": "647cae213e31d57ca1001bd51db43f8d8355ebb7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "415196520ecf798121c6e3e85cc7f64e7d74918c", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/415196520ecf798121c6e3e85cc7f64e7d74918c", "committedDate": "2020-12-09T15:33:29Z", "message": "fix race condition that may make the bucket cleaning pick the wrong one in case the timestamp is read while being modified"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "647cae213e31d57ca1001bd51db43f8d8355ebb7", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/647cae213e31d57ca1001bd51db43f8d8355ebb7", "committedDate": "2020-12-09T12:31:10Z", "message": "use AtomicLong.lazySet() to update the timestamp"}, "afterCommit": {"oid": "415196520ecf798121c6e3e85cc7f64e7d74918c", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/415196520ecf798121c6e3e85cc7f64e7d74918c", "committedDate": "2020-12-09T15:33:29Z", "message": "fix race condition that may make the bucket cleaning pick the wrong one in case the timestamp is read while being modified"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 602, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}