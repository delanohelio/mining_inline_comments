{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwODk5NjYy", "number": 5518, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoxMjo1N1rOEysaQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDoxNToyOFrOE0MxfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTkxODc0OnYy", "diffSide": "RIGHT", "path": "jetty-jaas/src/test/java/org/eclipse/jetty/jaas/spi/PropertyFileLoginModuleTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoxMjo1N1rOHpePww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDoxMTo0OFrOHr99Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0OTIxOQ==", "bodyText": "There is an extra blank line here.", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r513249219", "createdAt": "2020-10-28T08:12:57Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-jaas/src/test/java/org/eclipse/jetty/jaas/spi/PropertyFileLoginModuleTest.java", "diffHunk": "@@ -19,34 +19,73 @@\n package org.eclipse.jetty.jaas.spi;\n \n import java.io.File;\n-import java.util.HashMap;\n-import javax.security.auth.Subject;\n+import java.util.Collections;\n+import javax.security.auth.login.AppConfigurationEntry;\n+import javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag;\n+import javax.security.auth.login.Configuration;\n \n-import org.eclipse.jetty.jaas.callback.DefaultCallbackHandler;\n+import org.eclipse.jetty.jaas.JAASLoginService;\n+import org.eclipse.jetty.jaas.PropertyUserStoreManager;\n+import org.eclipse.jetty.security.DefaultIdentityService;\n+import org.eclipse.jetty.security.PropertyUserStore;\n+import org.eclipse.jetty.server.Request;\n+import org.eclipse.jetty.server.UserIdentity;\n import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n import org.junit.jupiter.api.Test;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.contains;\n-import static org.hamcrest.Matchers.containsInAnyOrder;\n-import static org.hamcrest.Matchers.not;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n \n public class PropertyFileLoginModuleTest\n {\n     @Test\n-    public void testRoles()\n-        throws Exception\n+    public void testPropertyFileLoginModule() throws Exception\n     {\n-        File file = MavenTestingUtils.getTestResourceFile(\"login.properties\");\n-        PropertyFileLoginModule module = new PropertyFileLoginModule();\n-        Subject subject = new Subject();\n-        HashMap<String, String> options = new HashMap<>();\n-        options.put(\"file\", file.getCanonicalPath());\n-        module.initialize(subject, new DefaultCallbackHandler(), new HashMap<String, String>(), options);\n-        UserInfo fred = module.getUserInfo(\"fred\");\n-        assertEquals(\"fred\", fred.getUserName());\n-        assertThat(fred.getRoleNames(), containsInAnyOrder(\"role1\", \"role2\", \"role3\"));\n-        assertThat(fred.getRoleNames(), not(contains(\"fred\")));\n+        //configure for PropertyFileLoginModule\n+        File loginProperties = MavenTestingUtils.getTestResourceFile(\"login.properties\");\n+\n+        Configuration testConfig = new Configuration()\n+        {\n+            @Override\n+            public AppConfigurationEntry[] getAppConfigurationEntry(String name)\n+            { \n+                return new AppConfigurationEntry[]{new AppConfigurationEntry(PropertyFileLoginModule.class.getName(), \n+                                                                             LoginModuleControlFlag.REQUIRED,\n+                                                                             Collections.singletonMap(\"file\", loginProperties.getAbsolutePath()))};\n+            }\n+        };\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda991c716c6613cf9e1872f89b7afc259dad474"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2NTkyNw==", "bodyText": "Pedant :)", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515865927", "createdAt": "2020-11-02T10:11:48Z", "author": {"login": "janbartel"}, "path": "jetty-jaas/src/test/java/org/eclipse/jetty/jaas/spi/PropertyFileLoginModuleTest.java", "diffHunk": "@@ -19,34 +19,73 @@\n package org.eclipse.jetty.jaas.spi;\n \n import java.io.File;\n-import java.util.HashMap;\n-import javax.security.auth.Subject;\n+import java.util.Collections;\n+import javax.security.auth.login.AppConfigurationEntry;\n+import javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag;\n+import javax.security.auth.login.Configuration;\n \n-import org.eclipse.jetty.jaas.callback.DefaultCallbackHandler;\n+import org.eclipse.jetty.jaas.JAASLoginService;\n+import org.eclipse.jetty.jaas.PropertyUserStoreManager;\n+import org.eclipse.jetty.security.DefaultIdentityService;\n+import org.eclipse.jetty.security.PropertyUserStore;\n+import org.eclipse.jetty.server.Request;\n+import org.eclipse.jetty.server.UserIdentity;\n import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n import org.junit.jupiter.api.Test;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.contains;\n-import static org.hamcrest.Matchers.containsInAnyOrder;\n-import static org.hamcrest.Matchers.not;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n \n public class PropertyFileLoginModuleTest\n {\n     @Test\n-    public void testRoles()\n-        throws Exception\n+    public void testPropertyFileLoginModule() throws Exception\n     {\n-        File file = MavenTestingUtils.getTestResourceFile(\"login.properties\");\n-        PropertyFileLoginModule module = new PropertyFileLoginModule();\n-        Subject subject = new Subject();\n-        HashMap<String, String> options = new HashMap<>();\n-        options.put(\"file\", file.getCanonicalPath());\n-        module.initialize(subject, new DefaultCallbackHandler(), new HashMap<String, String>(), options);\n-        UserInfo fred = module.getUserInfo(\"fred\");\n-        assertEquals(\"fred\", fred.getUserName());\n-        assertThat(fred.getRoleNames(), containsInAnyOrder(\"role1\", \"role2\", \"role3\"));\n-        assertThat(fred.getRoleNames(), not(contains(\"fred\")));\n+        //configure for PropertyFileLoginModule\n+        File loginProperties = MavenTestingUtils.getTestResourceFile(\"login.properties\");\n+\n+        Configuration testConfig = new Configuration()\n+        {\n+            @Override\n+            public AppConfigurationEntry[] getAppConfigurationEntry(String name)\n+            { \n+                return new AppConfigurationEntry[]{new AppConfigurationEntry(PropertyFileLoginModule.class.getName(), \n+                                                                             LoginModuleControlFlag.REQUIRED,\n+                                                                             Collections.singletonMap(\"file\", loginProperties.getAbsolutePath()))};\n+            }\n+        };\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0OTIxOQ=="}, "originalCommit": {"oid": "dda991c716c6613cf9e1872f89b7afc259dad474"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTY4MTUxOnYy", "diffSide": "RIGHT", "path": "jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMzo0NTo1NVrOHrzMdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDoxMjoxNFrOHr9-TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4OTU5MA==", "bodyText": "You could use lambdas above like .map(Class::getName).forEach(classnames::add).\nAlso I think the distinct() is unnecessary, probably better off doing something like roleClassNames.stream().anyMatch(classnames::contains).", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515689590", "createdAt": "2020-11-01T23:45:55Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java", "diffHunk": "@@ -305,53 +277,47 @@ public void logout(UserIdentity user)\n      */\n     protected String[] getGroups(Subject subject)\n     {\n+        List<String> roleNameList = Arrays.asList(getRoleClassNames());\n+        \n         Collection<String> groups = new LinkedHashSet<>();\n         Set<Principal> principals = subject.getPrincipals();\n         for (Principal principal : principals)\n         {\n             Class<?> c = principal.getClass();\n-            while (c != null)\n+            boolean added = false;\n+            //check whether the type of this Principle is a role\n+            while (c != null && !added)\n             {\n-                if (roleClassNameMatches(c.getName()))\n+                if (roleClassNameMatches(c, roleNameList))\n                 {\n                     groups.add(principal.getName());\n-                    break;\n-                }\n-\n-                boolean added = false;\n-                for (Class<?> ci : c.getInterfaces())\n-                {\n-                    if (roleClassNameMatches(ci.getName()))\n-                    {\n-                        groups.add(principal.getName());\n-                        added = true;\n-                        break;\n-                    }\n-                }\n-\n-                if (!added)\n-                {\n-                    c = c.getSuperclass();\n+                    added = true;\n                 }\n                 else\n-                    break;\n+                    c = c.getSuperclass();\n             }\n         }\n \n         return groups.toArray(new String[groups.size()]);\n     }\n-\n-    private boolean roleClassNameMatches(String classname)\n+    \n+    /**\n+     * Check if a given class, or any of the interfaces that it implements is one of the role classes.\n+     * We do this comparison by classnames, without loading the role classes.\n+     * @param clazz the class and its interfaces to check\n+     * @param roleClassNames class names of the role classes\n+     * @return true if the class or one of its interfaces is one of the configured role classes\n+     */\n+    private static boolean roleClassNameMatches(Class<?> clazz, List<String> roleClassNames)\n     {\n-        boolean result = false;\n-        for (String roleClassName : getRoleClassNames())\n-        {\n-            if (roleClassName.equals(classname))\n-            {\n-                result = true;\n-                break;\n-            }\n-        }\n-        return result;\n+        if (clazz == null || roleClassNames == null)\n+            return false;\n+        //collect the names of the class and any interfaces it implements\n+        List<String> classnames = new ArrayList<>();\n+        classnames.add(clazz.getName());\n+        Arrays.stream(clazz.getInterfaces()).map(i -> i.getName()).forEach(i -> classnames.add(i));\n+        \n+        return roleClassNames.stream().filter(classnames::contains).distinct().count() > 0;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda991c716c6613cf9e1872f89b7afc259dad474"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2NjE4OA==", "bodyText": "Yep, good idea. Done.", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515866188", "createdAt": "2020-11-02T10:12:14Z", "author": {"login": "janbartel"}, "path": "jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java", "diffHunk": "@@ -305,53 +277,47 @@ public void logout(UserIdentity user)\n      */\n     protected String[] getGroups(Subject subject)\n     {\n+        List<String> roleNameList = Arrays.asList(getRoleClassNames());\n+        \n         Collection<String> groups = new LinkedHashSet<>();\n         Set<Principal> principals = subject.getPrincipals();\n         for (Principal principal : principals)\n         {\n             Class<?> c = principal.getClass();\n-            while (c != null)\n+            boolean added = false;\n+            //check whether the type of this Principle is a role\n+            while (c != null && !added)\n             {\n-                if (roleClassNameMatches(c.getName()))\n+                if (roleClassNameMatches(c, roleNameList))\n                 {\n                     groups.add(principal.getName());\n-                    break;\n-                }\n-\n-                boolean added = false;\n-                for (Class<?> ci : c.getInterfaces())\n-                {\n-                    if (roleClassNameMatches(ci.getName()))\n-                    {\n-                        groups.add(principal.getName());\n-                        added = true;\n-                        break;\n-                    }\n-                }\n-\n-                if (!added)\n-                {\n-                    c = c.getSuperclass();\n+                    added = true;\n                 }\n                 else\n-                    break;\n+                    c = c.getSuperclass();\n             }\n         }\n \n         return groups.toArray(new String[groups.size()]);\n     }\n-\n-    private boolean roleClassNameMatches(String classname)\n+    \n+    /**\n+     * Check if a given class, or any of the interfaces that it implements is one of the role classes.\n+     * We do this comparison by classnames, without loading the role classes.\n+     * @param clazz the class and its interfaces to check\n+     * @param roleClassNames class names of the role classes\n+     * @return true if the class or one of its interfaces is one of the configured role classes\n+     */\n+    private static boolean roleClassNameMatches(Class<?> clazz, List<String> roleClassNames)\n     {\n-        boolean result = false;\n-        for (String roleClassName : getRoleClassNames())\n-        {\n-            if (roleClassName.equals(classname))\n-            {\n-                result = true;\n-                break;\n-            }\n-        }\n-        return result;\n+        if (clazz == null || roleClassNames == null)\n+            return false;\n+        //collect the names of the class and any interfaces it implements\n+        List<String> classnames = new ArrayList<>();\n+        classnames.add(clazz.getName());\n+        Arrays.stream(clazz.getInterfaces()).map(i -> i.getName()).forEach(i -> classnames.add(i));\n+        \n+        return roleClassNames.stream().filter(classnames::contains).distinct().count() > 0;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4OTU5MA=="}, "originalCommit": {"oid": "dda991c716c6613cf9e1872f89b7afc259dad474"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTY5NTg0OnYy", "diffSide": "RIGHT", "path": "jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDowMjo0OFrOHrzThg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDoxMjozMFrOHr9-3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MTM5OA==", "bodyText": "Maybe this logic of testing the class then moving to the super class should be put inside roleClassNameMatches.", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515691398", "createdAt": "2020-11-02T00:02:48Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java", "diffHunk": "@@ -305,53 +277,47 @@ public void logout(UserIdentity user)\n      */\n     protected String[] getGroups(Subject subject)\n     {\n+        List<String> roleNameList = Arrays.asList(getRoleClassNames());\n+        \n         Collection<String> groups = new LinkedHashSet<>();\n         Set<Principal> principals = subject.getPrincipals();\n         for (Principal principal : principals)\n         {\n             Class<?> c = principal.getClass();\n-            while (c != null)\n+            boolean added = false;\n+            //check whether the type of this Principle is a role\n+            while (c != null && !added)\n             {\n-                if (roleClassNameMatches(c.getName()))\n+                if (roleClassNameMatches(c, roleNameList))\n                 {\n                     groups.add(principal.getName());\n-                    break;\n-                }\n-\n-                boolean added = false;\n-                for (Class<?> ci : c.getInterfaces())\n-                {\n-                    if (roleClassNameMatches(ci.getName()))\n-                    {\n-                        groups.add(principal.getName());\n-                        added = true;\n-                        break;\n-                    }\n-                }\n-\n-                if (!added)\n-                {\n-                    c = c.getSuperclass();\n+                    added = true;\n                 }\n                 else\n-                    break;\n+                    c = c.getSuperclass();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda991c716c6613cf9e1872f89b7afc259dad474"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2NjMzMw==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515866333", "createdAt": "2020-11-02T10:12:30Z", "author": {"login": "janbartel"}, "path": "jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java", "diffHunk": "@@ -305,53 +277,47 @@ public void logout(UserIdentity user)\n      */\n     protected String[] getGroups(Subject subject)\n     {\n+        List<String> roleNameList = Arrays.asList(getRoleClassNames());\n+        \n         Collection<String> groups = new LinkedHashSet<>();\n         Set<Principal> principals = subject.getPrincipals();\n         for (Principal principal : principals)\n         {\n             Class<?> c = principal.getClass();\n-            while (c != null)\n+            boolean added = false;\n+            //check whether the type of this Principle is a role\n+            while (c != null && !added)\n             {\n-                if (roleClassNameMatches(c.getName()))\n+                if (roleClassNameMatches(c, roleNameList))\n                 {\n                     groups.add(principal.getName());\n-                    break;\n-                }\n-\n-                boolean added = false;\n-                for (Class<?> ci : c.getInterfaces())\n-                {\n-                    if (roleClassNameMatches(ci.getName()))\n-                    {\n-                        groups.add(principal.getName());\n-                        added = true;\n-                        break;\n-                    }\n-                }\n-\n-                if (!added)\n-                {\n-                    c = c.getSuperclass();\n+                    added = true;\n                 }\n                 else\n-                    break;\n+                    c = c.getSuperclass();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MTM5OA=="}, "originalCommit": {"oid": "dda991c716c6613cf9e1872f89b7afc259dad474"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTcwNjg0OnYy", "diffSide": "RIGHT", "path": "jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDoxNToyOFrOHrzZCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMzowMjoyNFrOHsDb8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MjgxMA==", "bodyText": "This seems like an unusual way to share the LoginService with the LoginModule.\nWould it be better to do this with a Callback instead? similar how we would use ServletRequestCallback.", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515692810", "createdAt": "2020-11-02T00:15:28Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java", "diffHunk": "@@ -58,13 +56,14 @@\n  * Implementation of jetty's LoginService that works with JAAS for\n  * authorization and authentication.\n  */\n-public class JAASLoginService extends AbstractLifeCycle implements LoginService\n+public class JAASLoginService extends ContainerLifeCycle implements LoginService\n {\n     private static final Logger LOG = Log.getLogger(JAASLoginService.class);\n \n     public static final String DEFAULT_ROLE_CLASS_NAME = \"org.eclipse.jetty.jaas.JAASRole\";\n     public static final String[] DEFAULT_ROLE_CLASS_NAMES = {DEFAULT_ROLE_CLASS_NAME};\n-\n+    public static final ThreadLocal<JAASLoginService> INSTANCE = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda991c716c6613cf9e1872f89b7afc259dad474"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1MDIzMA==", "bodyText": "The problem is that we allow the user to supply their own CallbackHandler class, which might not know anything about the special jetty  Callbacks, therefore couldn't supply a value for the JAASLoginService.", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515850230", "createdAt": "2020-11-02T09:45:59Z", "author": {"login": "janbartel"}, "path": "jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java", "diffHunk": "@@ -58,13 +56,14 @@\n  * Implementation of jetty's LoginService that works with JAAS for\n  * authorization and authentication.\n  */\n-public class JAASLoginService extends AbstractLifeCycle implements LoginService\n+public class JAASLoginService extends ContainerLifeCycle implements LoginService\n {\n     private static final Logger LOG = Log.getLogger(JAASLoginService.class);\n \n     public static final String DEFAULT_ROLE_CLASS_NAME = \"org.eclipse.jetty.jaas.JAASRole\";\n     public static final String[] DEFAULT_ROLE_CLASS_NAMES = {DEFAULT_ROLE_CLASS_NAME};\n-\n+    public static final ThreadLocal<JAASLoginService> INSTANCE = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MjgxMA=="}, "originalCommit": {"oid": "dda991c716c6613cf9e1872f89b7afc259dad474"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk1NTY5Ng==", "bodyText": "Yeah that seems strange to me, how would you ever use ServletRequestCallback or RequestParameterCallback inside a login module because they only ever get set on the DefaultCallbackHandler? Seems like using this would also just break if they supplied a custom CallbackHandler.", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515955696", "createdAt": "2020-11-02T13:02:24Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java", "diffHunk": "@@ -58,13 +56,14 @@\n  * Implementation of jetty's LoginService that works with JAAS for\n  * authorization and authentication.\n  */\n-public class JAASLoginService extends AbstractLifeCycle implements LoginService\n+public class JAASLoginService extends ContainerLifeCycle implements LoginService\n {\n     private static final Logger LOG = Log.getLogger(JAASLoginService.class);\n \n     public static final String DEFAULT_ROLE_CLASS_NAME = \"org.eclipse.jetty.jaas.JAASRole\";\n     public static final String[] DEFAULT_ROLE_CLASS_NAMES = {DEFAULT_ROLE_CLASS_NAME};\n-\n+    public static final ThreadLocal<JAASLoginService> INSTANCE = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MjgxMA=="}, "originalCommit": {"oid": "dda991c716c6613cf9e1872f89b7afc259dad474"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2194, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}