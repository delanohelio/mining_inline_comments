{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4Nzc4ODE1", "number": 5637, "title": "Issue #5605 unconsumed input on sendError", "bodyText": "Add Connection:close if content can't be consumed during a sendError. Processed after the request has returned to the container.\nSigned-off-by: Greg Wilkins gregw@webtide.com", "createdAt": "2020-11-10T21:37:25Z", "url": "https://github.com/eclipse/jetty.project/pull/5637", "merged": true, "mergeCommit": {"oid": "14f94f738df5adf68549749d01d4f9d97ea51452"}, "closed": true, "closedAt": "2020-11-18T09:40:06Z", "author": {"login": "gregw"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbQV_7AH2gAyNTE4Nzc4ODE1OjBjZGM3OGUzYTYwODlkODAyMTI2OWVkN2U0ODBkYWIwYWQyMWI4OTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddpt_jgH2gAyNTE4Nzc4ODE1OmYzYTU4NjgwMWNjNDI4MTkxMTI0MTMxZWE2ZGNjNzkzNjMwYTI5Yzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0cdc78e3a6089d8021269ed7e480dab0ad21b896", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/0cdc78e3a6089d8021269ed7e480dab0ad21b896", "committedDate": "2020-11-10T21:35:42Z", "message": "Issue #5605 unconsumed input on sendError\n\nAdd Connection:close if content can't be consumed during a sendError. Processed after the request has returned to the container.\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "368b0715ba83698569f680d19475e9351fe5473a", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/368b0715ba83698569f680d19475e9351fe5473a", "committedDate": "2020-11-11T08:45:44Z", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5605-unconsumed-send-error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/4b934b5262c3dd1da794bf3bfe7e3f15e92912ea", "committedDate": "2020-11-11T12:55:33Z", "message": "Update from review\n\n + Add close on all uncommitted requests when content cannot be consumed."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MzIyMDgy", "url": "https://github.com/eclipse/jetty.project/pull/5637#pullrequestreview-528322082", "createdAt": "2020-11-11T16:17:50Z", "commit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjoxNzo1MFrOHxUIjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjoyNjoxOVrOHxUfKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3MjE0MA==", "bodyText": "Isn't this a duplication of what happens in COMPLETE?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521472140", "createdAt": "2020-11-11T16:17:50Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -406,7 +410,13 @@ public boolean handle()\n                             // the following is needed as you cannot trust the response code and reason\n                             // as those could have been modified after calling sendError\n                             Integer code = (Integer)_request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);\n-                            _response.setStatus(code != null ? code : HttpStatus.INTERNAL_SERVER_ERROR_500);\n+                            if (code == null)\n+                                code = HttpStatus.INTERNAL_SERVER_ERROR_500;\n+                            _response.setStatus(code);\n+\n+                            // Add Connection:close if we can't consume the input\n+                            if (!_request.getHttpInput().consumeAll())\n+                                ensureConnectionClose();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3MjQ0NQ==", "bodyText": "Remove \"then\" at end of line, it duplicates the one on the next line.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521472445", "createdAt": "2020-11-11T16:18:18Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -492,10 +502,18 @@ public boolean handle()\n \n                     case COMPLETE:\n                     {\n-                        if (!_response.isCommitted() && !_request.isHandled() && !_response.getHttpOutput().isClosed())\n+                        if (!_response.isCommitted())\n                         {\n-                            _response.sendError(HttpStatus.NOT_FOUND_404);\n-                            break;\n+                            if (!_request.isHandled() && !_response.getHttpOutput().isClosed())\n+                            {\n+                                // The request was not actually handled\n+                                _response.sendError(HttpStatus.NOT_FOUND_404);\n+                                break;\n+                            }\n+                            // If content has not been consumed and we can't consume it now without blocking, then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NDc2NA==", "bodyText": "Shouldn't duplicates be discarded?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521474764", "createdAt": "2020-11-11T16:21:43Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -545,6 +558,29 @@ public boolean handle()\n         return !suspended;\n     }\n \n+    private void ensureConnectionClose()\n+    {\n+        _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+        {\n+            if (fields == null || fields.isEmpty())\n+                return HttpConnection.CONNECTION_CLOSE;\n+\n+            if (fields.stream().anyMatch(f -> f.contains(HttpHeaderValue.CLOSE.asString())))\n+            {\n+                if (fields.size() == 1)\n+                    return fields.get(0);\n+\n+                return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                    .flatMap(field -> Stream.of(field.getValues()))\n+                    .collect(Collectors.joining(\", \")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NTcxNA==", "bodyText": "You are using \", \" (comma+space) to delimit value, so add a space before \"close\" when you add it.\nSame as above, should duplicates be discarded?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521475714", "createdAt": "2020-11-11T16:23:08Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -545,6 +558,29 @@ public boolean handle()\n         return !suspended;\n     }\n \n+    private void ensureConnectionClose()\n+    {\n+        _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+        {\n+            if (fields == null || fields.isEmpty())\n+                return HttpConnection.CONNECTION_CLOSE;\n+\n+            if (fields.stream().anyMatch(f -> f.contains(HttpHeaderValue.CLOSE.asString())))\n+            {\n+                if (fields.size() == 1)\n+                    return fields.get(0);\n+\n+                return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                    .flatMap(field -> Stream.of(field.getValues()))\n+                    .collect(Collectors.joining(\", \")));\n+            }\n+\n+            return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                .flatMap(field -> Stream.of(field.getValues()))\n+                .collect(Collectors.joining(\", \")) + \",close\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NjA5OA==", "bodyText": "Why was this removed?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521476098", "createdAt": "2020-11-11T16:23:40Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannelState.java", "diffHunk": "@@ -904,8 +904,6 @@ public void sendError(int code, String message)\n                 default:\n                     throw new IllegalStateException(getStatusStringLocked());\n             }\n-            if (_outputState != OutputState.OPEN)\n-                throw new IllegalStateException(\"Response is \" + _outputState);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NzkzMA==", "bodyText": "Gah! This test will break as soon as we change the order of the headers, or if a JDK decides to change how things are stored in a Map. Not a biggie for this PR, but...", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521477930", "createdAt": "2020-11-11T16:26:19Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/AsyncRequestReadTest.java", "diffHunk": "@@ -328,6 +328,7 @@ public void testPartialReadThenClose() throws Exception\n \n             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n             assertThat(in.readLine(), containsString(\"HTTP/1.1 200 OK\"));\n+            assertThat(in.readLine(), containsString(\"Connection: close\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ea3c05b99a790c4be696e91742bf55ad455697b", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/6ea3c05b99a790c4be696e91742bf55ad455697b", "committedDate": "2020-11-11T16:43:29Z", "message": "Update from review\n\n + fixed comment\n + space comma"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4Mzg3OTAw", "url": "https://github.com/eclipse/jetty.project/pull/5637#pullrequestreview-528387900", "createdAt": "2020-11-11T17:31:32Z", "commit": {"oid": "6ea3c05b99a790c4be696e91742bf55ad455697b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzozMTozMlrOHxXLTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzozMjowNlrOHxXMkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUyMTk5OA==", "bodyText": "@gregw and so, if we may dispatch to an error handler that then reads the request content, we should not do it ourselves here, no?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521521998", "createdAt": "2020-11-11T17:31:32Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -406,7 +410,13 @@ public boolean handle()\n                             // the following is needed as you cannot trust the response code and reason\n                             // as those could have been modified after calling sendError\n                             Integer code = (Integer)_request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);\n-                            _response.setStatus(code != null ? code : HttpStatus.INTERNAL_SERVER_ERROR_500);\n+                            if (code == null)\n+                                code = HttpStatus.INTERNAL_SERVER_ERROR_500;\n+                            _response.setStatus(code);\n+\n+                            // Add Connection:close if we can't consume the input\n+                            if (!_request.getHttpInput().consumeAll())\n+                                ensureConnectionClose();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3MjE0MA=="}, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUyMjMyMQ==", "bodyText": "Okay.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521522321", "createdAt": "2020-11-11T17:32:06Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -545,6 +558,29 @@ public boolean handle()\n         return !suspended;\n     }\n \n+    private void ensureConnectionClose()\n+    {\n+        _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+        {\n+            if (fields == null || fields.isEmpty())\n+                return HttpConnection.CONNECTION_CLOSE;\n+\n+            if (fields.stream().anyMatch(f -> f.contains(HttpHeaderValue.CLOSE.asString())))\n+            {\n+                if (fields.size() == 1)\n+                    return fields.get(0);\n+\n+                return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                    .flatMap(field -> Stream.of(field.getValues()))\n+                    .collect(Collectors.joining(\", \")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NDc2NA=="}, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NDA0Nzg0", "url": "https://github.com/eclipse/jetty.project/pull/5637#pullrequestreview-528404784", "createdAt": "2020-11-11T17:51:52Z", "commit": {"oid": "6ea3c05b99a790c4be696e91742bf55ad455697b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83ad9ccb0e3f8303a22d4234d3662c86602f01fe", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/83ad9ccb0e3f8303a22d4234d3662c86602f01fe", "committedDate": "2020-11-11T18:42:54Z", "message": "Only consume input in COMPLETE if response is >=200 (ie not an upgrade or similar)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef560df09d08922df2ee4200e5b4b53afd788c01", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/ef560df09d08922df2ee4200e5b4b53afd788c01", "committedDate": "2020-11-12T11:44:35Z", "message": "Updated to be less adventurous\n\nI do not think it was valid to always consumeAll in COMPLETE as this could break upgrades with both 101s and 200s\nInstead I have reverted to having this consumeAll logic only:\n + in sendError once control has passed back to the container and we are about to generate an error page.\n + in front of all the sendRedirection that we do without calling the application first.\n\nExtra tests also added"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MTY4ODk1", "url": "https://github.com/eclipse/jetty.project/pull/5637#pullrequestreview-529168895", "createdAt": "2020-11-12T14:56:45Z", "commit": {"oid": "ef560df09d08922df2ee4200e5b4b53afd788c01"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c0e4fe204022d17d4075e49e914de2abfc9ce27", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/8c0e4fe204022d17d4075e49e914de2abfc9ce27", "committedDate": "2020-11-12T16:05:06Z", "message": "Updated to be less adventurous\n\nreverted test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "727b3e18e98ea08a66090f8a282a399ad00fdf56", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/727b3e18e98ea08a66090f8a282a399ad00fdf56", "committedDate": "2020-11-14T00:43:03Z", "message": "Testcase for odd sendError(400) issue.\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59611a4661f527ae5273990f7f62301f2ffb1ea6", "author": {"user": {"login": "sbordet", "name": "Simone Bordet"}}, "url": "https://github.com/eclipse/jetty.project/commit/59611a4661f527ae5273990f7f62301f2ffb1ea6", "committedDate": "2020-11-14T10:59:02Z", "message": "Fix for odd sendError(400) issue.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7846e0fd39991aa714fdd0d8db91e2866760e19d", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/7846e0fd39991aa714fdd0d8db91e2866760e19d", "committedDate": "2020-11-14T12:04:27Z", "message": "Testcase for odd sendError(400) issue.\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66ea4cccf25f0b60225c1b77ec1176d9159d81cf", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/66ea4cccf25f0b60225c1b77ec1176d9159d81cf", "committedDate": "2020-11-14T13:09:54Z", "message": "Always try to consumeAll on all requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05182736271af0cdd9536861d549109f977c60b7", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/05182736271af0cdd9536861d549109f977c60b7", "committedDate": "2020-11-16T10:23:47Z", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5605-unconsumed-send-error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c04f31b4897b2ebfdcde2169e9ef12fb749b9cd3", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/c04f31b4897b2ebfdcde2169e9ef12fb749b9cd3", "committedDate": "2020-11-16T10:40:10Z", "message": "Refinements after testing in 10"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "901e6dcdd6676ed745ee3853d787b90f5abe1020", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/901e6dcdd6676ed745ee3853d787b90f5abe1020", "committedDate": "2020-11-16T10:46:14Z", "message": "Refinements after testing in 10\n\nFixed test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMjIwNzMw", "url": "https://github.com/eclipse/jetty.project/pull/5637#pullrequestreview-531220730", "createdAt": "2020-11-16T11:06:06Z", "commit": {"oid": "901e6dcdd6676ed745ee3853d787b90f5abe1020"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMTowNjowNlrOHz2XMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMTozOTozOFrOHz4lnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzMDA5OQ==", "bodyText": "I would put this code inside sendRedirect() to: A) avoid duplicating it all over the places and B) avoid Request.getBaseRequest(request) since I'm already inside the Jetty Response where I can easily access the HttpChannel.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524130099", "createdAt": "2020-11-16T11:06:06Z", "author": {"login": "sbordet"}, "path": "jetty-jaspi/src/main/java/org/eclipse/jetty/security/jaspi/modules/FormAuthModule.java", "diffHunk": "@@ -173,6 +173,7 @@ public AuthStatus validateRequest(MessageInfo messageInfo, Subject clientSubject\n                     }\n \n                     response.setContentLength(0);\n+                    Request.getBaseRequest(request).getHttpChannel().ensureContentConsumedOrConnectionClose();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901e6dcdd6676ed745ee3853d787b90f5abe1020"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE1NjQ4Mg==", "bodyText": "I wonder whether this could be more lax... take into account 201 Created, 204 No Content, 206 Partial Content, etc.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524156482", "createdAt": "2020-11-16T11:30:12Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -492,10 +501,18 @@ public boolean handle()\n \n                     case COMPLETE:\n                     {\n-                        if (!_response.isCommitted() && !_request.isHandled() && !_response.getHttpOutput().isClosed())\n+                        if (!_response.isCommitted())\n                         {\n-                            _response.sendError(HttpStatus.NOT_FOUND_404);\n-                            break;\n+                            if (!_request.isHandled() && !_response.getHttpOutput().isClosed())\n+                            {\n+                                // The request was not actually handled\n+                                _response.sendError(HttpStatus.NOT_FOUND_404);\n+                                break;\n+                            }\n+\n+                            // Indicate Connection:close if we can't consume all.\n+                            if (_response.getStatus() >= 200)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901e6dcdd6676ed745ee3853d787b90f5abe1020"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE2MDczOQ==", "bodyText": "The block above has a call to abort(), which then falls through, which I don't think it's right, we should break.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524160739", "createdAt": "2020-11-16T11:34:01Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -511,12 +528,7 @@ public boolean handle()\n                                 break;\n                             }\n                         }\n-\n-                        // TODO Currently a blocking/aborting consumeAll is done in the handling of the TERMINATED\n-                        // TODO Action triggered by the completed callback below.  It would be possible to modify the\n-                        // TODO callback to do a non-blocking consumeAll at this point and only call completed when\n-                        // TODO that is done.\n-\n+                        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901e6dcdd6676ed745ee3853d787b90f5abe1020"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE2MzIzMg==", "bodyText": "I think this needs a comment on why it is done here, because otherwise it should be done only in COMPLETE.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524163232", "createdAt": "2020-11-16T11:36:27Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -406,7 +410,12 @@ public boolean handle()\n                             // the following is needed as you cannot trust the response code and reason\n                             // as those could have been modified after calling sendError\n                             Integer code = (Integer)_request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);\n-                            _response.setStatus(code != null ? code : HttpStatus.INTERNAL_SERVER_ERROR_500);\n+                            if (code == null)\n+                                code = HttpStatus.INTERNAL_SERVER_ERROR_500;\n+                            _response.setStatus(code);\n+\n+                            // Add Connection:close if we can't consume the input\n+                            ensureContentConsumedOrConnectionClose();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901e6dcdd6676ed745ee3853d787b90f5abe1020"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE2NjU1Ng==", "bodyText": "Perhaps simplify the log -- do we really need the \"chunking\" difference? Perhaps just log the _parser object.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524166556", "createdAt": "2020-11-16T11:39:38Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpConnection.java", "diffHunk": "@@ -408,28 +408,12 @@ public void onCompleted()\n             // close to seek EOF\n             _parser.close();\n         }\n-        else if (_parser.inContentState() && _generator.isPersistent())\n+        // else abort if we can't consume all\n+        else if (_generator.isPersistent() && !_input.consumeAll())\n         {\n-            // Try to progress without filling.\n-            parseRequestBuffer();\n-            if (_parser.inContentState())\n-            {\n-                // If we are async, then we have problems to complete neatly\n-                if (_input.isAsync())\n-                {\n-                    if (LOG.isDebugEnabled())\n-                        LOG.debug(\"{}unconsumed input while async {}\", _parser.isChunking() ? \"Possible \" : \"\", this);\n-                    _channel.abort(new IOException(\"unconsumed input\"));\n-                }\n-                else\n-                {\n-                    if (LOG.isDebugEnabled())\n-                        LOG.debug(\"{}unconsumed input {}\", _parser.isChunking() ? \"Possible \" : \"\", this);\n-                    // Complete reading the request\n-                    if (!_input.consumeAll())\n-                        _channel.abort(new IOException(\"unconsumed input\"));\n-                }\n-            }\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"{}unconsumed input {}\", _parser.isChunking() ? \"Possible \" : \"\", this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901e6dcdd6676ed745ee3853d787b90f5abe1020"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdbd5d9dde092715bed1a985ab76d12502a92e34", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/bdbd5d9dde092715bed1a985ab76d12502a92e34", "committedDate": "2020-11-16T12:10:04Z", "message": "Fixed comment from review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbaf3bfbd6399eab2c83ac44227bf1631e084837", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/cbaf3bfbd6399eab2c83ac44227bf1631e084837", "committedDate": "2020-11-16T14:02:31Z", "message": "Updates from review\n\n+ added redirect methods that consumeAll\n+ ensureContentConsumedOrConnectionClose renamed to ensureConsumeAllOrNotPersistent\n+ ensureConsumeAllOrNotPersistent now handles HTTP/1.0 and HTTP/1.1 differently"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c6d60d6932ff266404930661ae09d9eb1881b93", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/9c6d60d6932ff266404930661ae09d9eb1881b93", "committedDate": "2020-11-16T16:27:47Z", "message": "better consumeAll implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNTMxMjI2", "url": "https://github.com/eclipse/jetty.project/pull/5637#pullrequestreview-531531226", "createdAt": "2020-11-16T17:11:31Z", "commit": {"oid": "9c6d60d6932ff266404930661ae09d9eb1881b93"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoxMTozMVrOH0I5Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzo0NToyOFrOH0KUOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzMzc0Nw==", "bodyText": "Fix javadocs: \"Sends a response with the given redirection status code\".", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524433747", "createdAt": "2020-11-16T17:11:31Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Response.java", "diffHunk": "@@ -497,6 +497,36 @@ public void sendProcessing() throws IOException\n      */\n     public void sendRedirect(int code, String location) throws IOException\n     {\n+        sendRedirect(code, location, false);\n+    }\n+\n+    /**\n+     * Sends a response with one of the 300 series redirection codes.\n+     *\n+     * @param location the location to send in {@code Location} headers\n+     * @param consumeAll if True, consume any HTTP/1 request input before doing the redirection. If the input cannot\n+     * be consumed without blocking, then add a `Connection: close` header to the response.\n+     * @throws IOException if unable to send the redirect\n+     */\n+    public void sendRedirect(String location, boolean consumeAll) throws IOException\n+    {\n+        sendRedirect(getHttpChannel().getRequest().getHttpVersion().getVersion() < HttpVersion.HTTP_1_1.getVersion()\n+            ? HttpServletResponse.SC_MOVED_TEMPORARILY : HttpServletResponse.SC_SEE_OTHER, location, consumeAll);\n+    }\n+\n+    /**\n+     * Sends a response with one of the 300 series redirection codes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c6d60d6932ff266404930661ae09d9eb1881b93"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0MDk5OA==", "bodyText": "Since many clients also add Connection: keep-alive is it worth to remove it even if the protocol is HTTP/1.1?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524440998", "createdAt": "2020-11-16T17:22:07Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -545,6 +562,60 @@ public boolean handle()\n         return !suspended;\n     }\n \n+    public void ensureConsumeAllOrNotPersistent()\n+    {\n+        switch (_request.getHttpVersion())\n+        {\n+            case HTTP_1_0:\n+                if (_request.getHttpInput().consumeAll())\n+                    return;\n+\n+                // Remove any keep-alive value in Connection headers\n+                _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+                {\n+                    if (fields == null || fields.isEmpty())\n+                        return null;\n+                    String v = fields.stream()\n+                        .flatMap(field -> Stream.of(field.getValues()).filter(s -> !HttpHeaderValue.KEEP_ALIVE.is(s)))\n+                        .collect(Collectors.joining(\", \"));\n+                    if (StringUtil.isEmpty(v))\n+                        return null;\n+\n+                    return new HttpField(HttpHeader.CONNECTION, v);\n+                });\n+                break;\n+\n+            case HTTP_1_1:\n+                if (_request.getHttpInput().consumeAll())\n+                    return;\n+\n+                // Add close value to Connection headers\n+                _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+                {\n+                    if (fields == null || fields.isEmpty())\n+                        return HttpConnection.CONNECTION_CLOSE;\n+\n+                    if (fields.stream().anyMatch(f -> f.contains(HttpHeaderValue.CLOSE.asString())))\n+                    {\n+                        if (fields.size() == 1)\n+                            return fields.get(0);\n+\n+                        return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                            .flatMap(field -> Stream.of(field.getValues()))\n+                            .collect(Collectors.joining(\", \")));\n+                    }\n+\n+                    return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                        .flatMap(field -> Stream.of(field.getValues()))\n+                        .collect(Collectors.joining(\", \")) + \", \" + HttpHeaderValue.CLOSE.asString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c6d60d6932ff266404930661ae09d9eb1881b93"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1MjM4OQ==", "bodyText": "Add javadocs with the precise semantic about the return value.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524452389", "createdAt": "2020-11-16T17:38:30Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpInput.java", "diffHunk": "@@ -672,29 +672,44 @@ public boolean eof()\n \n     public boolean consumeAll()\n     {\n-        synchronized (_inputQ)\n+        while (true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c6d60d6932ff266404930661ae09d9eb1881b93"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1NTYxNA==", "bodyText": "Maybe use a local variable for the query?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524455614", "createdAt": "2020-11-16T17:43:20Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ContextHandler.java", "diffHunk": "@@ -1240,10 +1240,10 @@ public boolean checkContext(final String target, final Request baseRequest, fina\n         {\n             // context request must end with /\n             baseRequest.setHandled(true);\n-            if (baseRequest.getQueryString() != null)\n-                response.sendRedirect(baseRequest.getRequestURI() + \"/?\" + baseRequest.getQueryString());\n-            else\n-                response.sendRedirect(baseRequest.getRequestURI() + \"/\");\n+            baseRequest.getResponse().sendRedirect(\n+                HttpServletResponse.SC_MOVED_TEMPORARILY,\n+                baseRequest.getRequestURI() + (baseRequest.getQueryString() == null ? \"/\" : (\"/?\" + baseRequest.getQueryString())),\n+                true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c6d60d6932ff266404930661ae09d9eb1881b93"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1NzAxOA==", "bodyText": "One more test with HTTP/1.1 with Connection: keep-alive?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524457018", "createdAt": "2020-11-16T17:45:28Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/ErrorHandlerTest.java", "diffHunk": "@@ -233,6 +233,88 @@ public void test404HtmlAccept() throws Exception\n         assertContent(response);\n     }\n \n+    @Test\n+    public void test404PostHttp10() throws Exception\n+    {\n+        String rawResponse = connector.getResponse(\n+            \"POST / HTTP/1.0\\r\\n\" +\n+                \"Host: Localhost\\r\\n\" +\n+                \"Accept: text/html\\r\\n\" +\n+                \"Content-Length: 10\\r\\n\" +\n+                \"Connection: keep-alive\\r\\n\" +\n+                \"\\r\\n\" +\n+                \"0123456789\");\n+\n+        HttpTester.Response response = HttpTester.parseResponse(rawResponse);\n+\n+        assertThat(response.getStatus(), is(404));\n+        assertThat(response.getField(HttpHeader.CONTENT_LENGTH).getIntValue(), greaterThan(0));\n+        assertThat(response.get(HttpHeader.CONTENT_TYPE), containsString(\"text/html;charset=ISO-8859-1\"));\n+        assertThat(response.get(HttpHeader.CONNECTION), is(\"keep-alive\"));\n+        assertContent(response);\n+    }\n+\n+    @Test\n+    public void test404PostHttp11() throws Exception\n+    {\n+        String rawResponse = connector.getResponse(\n+            \"POST / HTTP/1.1\\r\\n\" +\n+                \"Host: Localhost\\r\\n\" +\n+                \"Accept: text/html\\r\\n\" +\n+                \"Content-Length: 10\\r\\n\" +\n+                \"\\r\\n\" +\n+                \"0123456789\");\n+\n+        HttpTester.Response response = HttpTester.parseResponse(rawResponse);\n+\n+        assertThat(response.getStatus(), is(404));\n+        assertThat(response.getField(HttpHeader.CONTENT_LENGTH).getIntValue(), greaterThan(0));\n+        assertThat(response.get(HttpHeader.CONTENT_TYPE), containsString(\"text/html;charset=ISO-8859-1\"));\n+        assertThat(response.getField(HttpHeader.CONNECTION), nullValue());\n+        assertContent(response);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c6d60d6932ff266404930661ae09d9eb1881b93"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5daecad494a70d12262c71f9a07d4dec11cabd2a", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/5daecad494a70d12262c71f9a07d4dec11cabd2a", "committedDate": "2020-11-17T09:10:27Z", "message": "update from review\n\n + better javadoc\n + filter out keep-alive\n + added more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "578a961a38d5bbec61341e62ca83d72105c20a66", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/578a961a38d5bbec61341e62ca83d72105c20a66", "committedDate": "2020-11-17T09:15:06Z", "message": "update from review\n\n + better javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a5f987418f4bf4eb39535f24e0a9819569a000f", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/9a5f987418f4bf4eb39535f24e0a9819569a000f", "committedDate": "2020-11-17T09:39:31Z", "message": "update from review\n\n + fixed form redirection test for http 1.0 and 1.1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMzI0NzE1", "url": "https://github.com/eclipse/jetty.project/pull/5637#pullrequestreview-532324715", "createdAt": "2020-11-17T12:46:09Z", "commit": {"oid": "9a5f987418f4bf4eb39535f24e0a9819569a000f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjo0NjowOVrOH0zMCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjo1MDowM1rOH0zUYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyNjY2Nw==", "bodyText": "Now you first check for keep-alive, but then if close is there, shouldn't you remove keep-alive?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r525126667", "createdAt": "2020-11-17T12:46:09Z", "author": {"login": "sbordet"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpGenerator.java", "diffHunk": "@@ -659,16 +659,15 @@ else if (contentLength != field.getLongValue())\n                         case CONNECTION:\n                         {\n                             putTo(field, header);\n+                            if (info.getHttpVersion() == HttpVersion.HTTP_1_0 && _persistent == null && field.contains(HttpHeaderValue.KEEP_ALIVE.asString()))\n+                            {\n+                                _persistent = true;\n+                            }\n                             if (field.contains(HttpHeaderValue.CLOSE.asString()))\n                             {\n                                 close = true;\n                                 _persistent = false;\n                             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a5f987418f4bf4eb39535f24e0a9819569a000f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyODgwMw==", "bodyText": "I think there is a HttpStatus.isRedirection(int) that you can use here.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r525128803", "createdAt": "2020-11-17T12:50:03Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Response.java", "diffHunk": "@@ -497,6 +497,36 @@ public void sendProcessing() throws IOException\n      */\n     public void sendRedirect(int code, String location) throws IOException\n     {\n+        sendRedirect(code, location, false);\n+    }\n+\n+    /**\n+     * Sends a response with a HTTP version appropriate 30x redirection.\n+     *\n+     * @param location the location to send in {@code Location} headers\n+     * @param consumeAll if True, consume any HTTP/1 request input before doing the redirection. If the input cannot\n+     * be consumed without blocking, then add a `Connection: close` header to the response.\n+     * @throws IOException if unable to send the redirect\n+     */\n+    public void sendRedirect(String location, boolean consumeAll) throws IOException\n+    {\n+        sendRedirect(getHttpChannel().getRequest().getHttpVersion().getVersion() < HttpVersion.HTTP_1_1.getVersion()\n+            ? HttpServletResponse.SC_MOVED_TEMPORARILY : HttpServletResponse.SC_SEE_OTHER, location, consumeAll);\n+    }\n+\n+    /**\n+     * Sends a response with a given redirection code.\n+     *\n+     * @param code the redirect status code\n+     * @param location the location to send in {@code Location} headers\n+     * @param consumeAll if True, consume any HTTP/1 request input before doing the redirection. If the input cannot\n+     * be consumed without blocking, then add a `Connection: close` header to the response.\n+     * @throws IOException if unable to send the redirect\n+     */\n+    public void sendRedirect(int code, String location, boolean consumeAll) throws IOException\n+    {\n+        if (consumeAll)\n+            getHttpChannel().ensureConsumeAllOrNotPersistent();\n         if ((code < HttpServletResponse.SC_MULTIPLE_CHOICES) || (code >= HttpServletResponse.SC_BAD_REQUEST))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a5f987418f4bf4eb39535f24e0a9819569a000f"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bff386b9a5d9fce5aca86a0c6428053fb9350324", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/bff386b9a5d9fce5aca86a0c6428053fb9350324", "committedDate": "2020-11-17T14:18:07Z", "message": "update from review\n\n + HttpGenerator removes keep-alive if close present\n + Use isRedirection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNDM1MjI1", "url": "https://github.com/eclipse/jetty.project/pull/5637#pullrequestreview-532435225", "createdAt": "2020-11-17T14:45:55Z", "commit": {"oid": "bff386b9a5d9fce5aca86a0c6428053fb9350324"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3a586801cc428191124131ea6dcc793630a29c7", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/f3a586801cc428191124131ea6dcc793630a29c7", "committedDate": "2020-11-18T08:17:23Z", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x-400-gzip' into jetty-9.4.x-5605-unconsumed-send-error"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4963, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}