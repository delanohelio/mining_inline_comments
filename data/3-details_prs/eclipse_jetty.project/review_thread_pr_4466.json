{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNzM3NjU0", "number": 4466, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwOTo1NjoxMFrODWy3dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMDoxNjoyOVrODWzPuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjI4NjYxOnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwOTo1NjoxMFrOFbwWZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMjo1Mzo1OVrOFb042w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0ODAzOA==", "bodyText": "This is, in general, wrong.\nIf an application sets bufferSize=512, when we get _aggregate from the buffer pool, we get back a buffer with capacity 1024 (or different, depending on the buffer pool configuration).\nWe must either not rely on the capacity of the buffer to return the aggregate space, or slice() the buffer returned by the buffer pool to the desired capacity.", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364648038", "createdAt": "2020-01-09T09:56:10Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "diffHunk": "@@ -378,6 +378,19 @@ private boolean updateApiState(Throwable failure)\n         return wake;\n     }\n \n+    private int getAggregateSpace()\n+    {\n+        // If no aggregate, we can allocate one of bufferSize\n+        if (_aggregate == null)\n+            return getBufferSize();\n+\n+        // if the position is not zero, compact to avoid empty at capacity\n+        if (_aggregate.position() != 0)\n+            BufferUtil.compact(_aggregate);\n+\n+        return BufferUtil.space(_aggregate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY4MjY0MA==", "bodyText": "How can the calculation of space not be based on capacity?\nThe spec allows for a larger buffer than set:\n     * The servlet container will use a buffer at least as large as \n     * the size requested.  The actual buffer size used can be found\n     * using <code>getBufferSize</code>.\n\nIt would be crazy to allocate a larger buffer and then run a shadow capacity to only use a part of it.  If you think we should not use larger buffers than requested, then the buffer pool should never return a larger buffer than requested.", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364682640", "createdAt": "2020-01-09T11:11:08Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "diffHunk": "@@ -378,6 +378,19 @@ private boolean updateApiState(Throwable failure)\n         return wake;\n     }\n \n+    private int getAggregateSpace()\n+    {\n+        // If no aggregate, we can allocate one of bufferSize\n+        if (_aggregate == null)\n+            return getBufferSize();\n+\n+        // if the position is not zero, compact to avoid empty at capacity\n+        if (_aggregate.position() != 0)\n+            BufferUtil.compact(_aggregate);\n+\n+        return BufferUtil.space(_aggregate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0ODAzOA=="}, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcxOTQ1Ng==", "bodyText": "I agree with @sbordet here.\nIf a user uses HttpConfiguration.setOutputBufferSize(512) or HttpConfiguration.setOutputAggregationSize(256) then they expect behavior based on that configuration, not some larger / mysterious / black box / implementation specific size.\nThe fact that our ByteBufferPool might return a larger size is a side-effect of being efficient with memory allocation here.\nI would expect our behavior to remain unchanged, using the returned ByteBuffer (regardless of actual space/capacity) for the configured buffer size (eg: 512).", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364719456", "createdAt": "2020-01-09T12:46:01Z", "author": {"login": "joakime"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "diffHunk": "@@ -378,6 +378,19 @@ private boolean updateApiState(Throwable failure)\n         return wake;\n     }\n \n+    private int getAggregateSpace()\n+    {\n+        // If no aggregate, we can allocate one of bufferSize\n+        if (_aggregate == null)\n+            return getBufferSize();\n+\n+        // if the position is not zero, compact to avoid empty at capacity\n+        if (_aggregate.position() != 0)\n+            BufferUtil.compact(_aggregate);\n+\n+        return BufferUtil.space(_aggregate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0ODAzOA=="}, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyMjM5NQ==", "bodyText": "Sorry but it is nonsensical to return a larger buffer and then only use a part of it.  The contract allows for a larger buffer to be used, so why would we not use it if it has been allocated?", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364722395", "createdAt": "2020-01-09T12:53:59Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "diffHunk": "@@ -378,6 +378,19 @@ private boolean updateApiState(Throwable failure)\n         return wake;\n     }\n \n+    private int getAggregateSpace()\n+    {\n+        // If no aggregate, we can allocate one of bufferSize\n+        if (_aggregate == null)\n+            return getBufferSize();\n+\n+        // if the position is not zero, compact to avoid empty at capacity\n+        if (_aggregate.position() != 0)\n+            BufferUtil.compact(_aggregate);\n+\n+        return BufferUtil.space(_aggregate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0ODAzOA=="}, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjI5NjMzOnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwOTo1OToxMlrOFbwcYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMTowODoyNVrOFbyZbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0OTU2OQ==", "bodyText": "This would be a getter with side effects, it will just bite us back. Must not compact here!", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364649569", "createdAt": "2020-01-09T09:59:12Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "diffHunk": "@@ -378,6 +378,19 @@ private boolean updateApiState(Throwable failure)\n         return wake;\n     }\n \n+    private int getAggregateSpace()\n+    {\n+        // If no aggregate, we can allocate one of bufferSize\n+        if (_aggregate == null)\n+            return getBufferSize();\n+\n+        // if the position is not zero, compact to avoid empty at capacity\n+        if (_aggregate.position() != 0)\n+            BufferUtil.compact(_aggregate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY4MTU4Mg==", "bodyText": "Do you have a suggestion of where the commit should be done then?\nI initially did the compact after every blocking write and in the callback of every async write, but that put the logic in many places.   Having the compact done immediately before the space is checked is the simplest solution I can think of.", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364681582", "createdAt": "2020-01-09T11:08:25Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "diffHunk": "@@ -378,6 +378,19 @@ private boolean updateApiState(Throwable failure)\n         return wake;\n     }\n \n+    private int getAggregateSpace()\n+    {\n+        // If no aggregate, we can allocate one of bufferSize\n+        if (_aggregate == null)\n+            return getBufferSize();\n+\n+        // if the position is not zero, compact to avoid empty at capacity\n+        if (_aggregate.position() != 0)\n+            BufferUtil.compact(_aggregate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0OTU2OQ=="}, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjMxNDc3OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMDowNToyMlrOFbwnvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMjo1NjozN1rOFb09Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1MjQ3OA==", "bodyText": "This code block should really be removed, so that aggregation will happen only in 1 place, and only due to computing whether it should happen or not only once.\nThe conditions at line 829 (new code) are slightly different from the conditions at line 757 (new code), so it's difficult to follow the code, trying to understand why in the world there is a call to onWriteComplete() inside a block that does aggregation.\nActually, turns out that we do (again) a similar aggregation logic in AsyncWrite.process(), so we need to clean this up even more.", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364652478", "createdAt": "2020-01-09T10:05:22Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "diffHunk": "@@ -801,9 +826,10 @@ public void write(byte[] b, int off, int len) throws IOException\n                 channelWrite(_aggregate, last && len == 0);\n \n                 // should we fill aggregate again from the buffer?\n-                if (len > 0 && !last && len <= _commitSize && len <= BufferUtil.space(_aggregate))\n+                if (len > 0 && !last && len <= _commitSize && len <= getAggregateSpace())\n                 {\n                     BufferUtil.append(_aggregate, b, off, len);\n+                    onWriteComplete(false, null);\n                     return;\n                 }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY4MTAxNQ==", "bodyText": "I tend to agree, but for jetty-10 only.  In Jetty-9 I do not think we should be making significant behaviour changes as they tend to have unintended consequences.", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364681015", "createdAt": "2020-01-09T11:06:44Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "diffHunk": "@@ -801,9 +826,10 @@ public void write(byte[] b, int off, int len) throws IOException\n                 channelWrite(_aggregate, last && len == 0);\n \n                 // should we fill aggregate again from the buffer?\n-                if (len > 0 && !last && len <= _commitSize && len <= BufferUtil.space(_aggregate))\n+                if (len > 0 && !last && len <= _commitSize && len <= getAggregateSpace())\n                 {\n                     BufferUtil.append(_aggregate, b, off, len);\n+                    onWriteComplete(false, null);\n                     return;\n                 }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1MjQ3OA=="}, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyMzQ4Ng==", "bodyText": "I am also concerned about the performance. Consider an app that always writes small 5, 10, 20 byte writes. Eventually a small write overflows the buffer. Currently the code fills the buffer to max size, flushes it and then aggregates the small remaining data.\nThe alternative is to flush a non full buffer and then write a small write, so we get 2 non optimal writes instead of one.\nThe real solution is to add gather writes in jetty-10 or beyond", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364723486", "createdAt": "2020-01-09T12:56:37Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "diffHunk": "@@ -801,9 +826,10 @@ public void write(byte[] b, int off, int len) throws IOException\n                 channelWrite(_aggregate, last && len == 0);\n \n                 // should we fill aggregate again from the buffer?\n-                if (len > 0 && !last && len <= _commitSize && len <= BufferUtil.space(_aggregate))\n+                if (len > 0 && !last && len <= _commitSize && len <= getAggregateSpace())\n                 {\n                     BufferUtil.append(_aggregate, b, off, len);\n+                    onWriteComplete(false, null);\n                     return;\n                 }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1MjQ3OA=="}, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjM0MDAzOnYy", "diffSide": "LEFT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMDoxMzoyOVrOFbw3Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMTowMzoxOVrOFbyR_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1NjM5OQ==", "bodyText": "Why was this removed?", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364656399", "createdAt": "2020-01-09T10:13:29Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "diffHunk": "@@ -1670,15 +1696,6 @@ protected Action process() throws Exception\n                 return Action.SCHEDULED;\n             }\n \n-            // all content written, but if we have not yet signal completion, we\n-            // need to do so\n-            if (_last && !_completed)\n-            {\n-                _completed = true;\n-                channelWrite(BufferUtil.EMPTY_BUFFER, true, this);\n-                return Action.SCHEDULED;\n-            }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY3OTY3OA==", "bodyText": "Because is can never ever happen.  I tried to write a unit test to give it code coverage and I was unable to do so.", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364679678", "createdAt": "2020-01-09T11:03:19Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "diffHunk": "@@ -1670,15 +1696,6 @@ protected Action process() throws Exception\n                 return Action.SCHEDULED;\n             }\n \n-            // all content written, but if we have not yet signal completion, we\n-            // need to do so\n-            if (_last && !_completed)\n-            {\n-                _completed = true;\n-                channelWrite(BufferUtil.EMPTY_BUFFER, true, this);\n-                return Action.SCHEDULED;\n-            }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1NjM5OQ=="}, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjM0Mzc2OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/test/java/org/eclipse/jetty/server/HttpOutputTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMDoxNDo1OFrOFbw5ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMTowMzo1M1rOFbyS9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1NzAzNA==", "bodyText": "The test should parametrize on these values, something like [512, 512], [512, 1024], [1024, 1024], [1024, 4096].", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364657034", "createdAt": "2020-01-09T10:14:58Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/HttpOutputTest.java", "diffHunk": "@@ -54,6 +58,8 @@\n  */\n public class HttpOutputTest\n {\n+    public static final int OUTPUT_AGGREGATION_SIZE = 1024;\n+    public static final int OUTPUT_BUFFER_SIZE = 4096;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY3OTkyNQ==", "bodyText": "why? what does the absolute size of the buffer have to do with it?", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364679925", "createdAt": "2020-01-09T11:03:53Z", "author": {"login": "gregw"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/HttpOutputTest.java", "diffHunk": "@@ -54,6 +58,8 @@\n  */\n public class HttpOutputTest\n {\n+    public static final int OUTPUT_AGGREGATION_SIZE = 1024;\n+    public static final int OUTPUT_BUFFER_SIZE = 4096;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1NzAzNA=="}, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjM0ODczOnYy", "diffSide": "RIGHT", "path": "jetty-server/src/test/java/org/eclipse/jetty/server/HttpOutputTest.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMDoxNjoyOVrOFbw8kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMjo1OTozMlrOFb1B4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1NzgxMQ==", "bodyText": "With this, this test is testing conditions that will never be the ones with the normal Jetty code, rendering this test useless.", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364657811", "createdAt": "2020-01-09T10:16:29Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/HttpOutputTest.java", "diffHunk": "@@ -64,10 +70,25 @@ public void init() throws Exception\n     {\n         _server = new Server();\n \n+        _server.addBean(new ByteBufferPool()\n+        {\n+            @Override\n+            public ByteBuffer acquire(int size, boolean direct)\n+            {\n+                return direct ? BufferUtil.allocateDirect(size) : BufferUtil.allocate(size);\n+            }\n+\n+            @Override\n+            public void release(ByteBuffer buffer)\n+            {\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY4MDYwMw==", "bodyText": "Because it is testing aggregation, which is dependent on the actual size of the buffer.  As our buffer pools can give back buffers with larger capacities, this test uses a simple buffer pool that gives back a buffer of exact size and thus allows the tests to be determinant about if they do or do not aggregate/commit etc.", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364680603", "createdAt": "2020-01-09T11:05:39Z", "author": {"login": "gregw"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/HttpOutputTest.java", "diffHunk": "@@ -64,10 +70,25 @@ public void init() throws Exception\n     {\n         _server = new Server();\n \n+        _server.addBean(new ByteBufferPool()\n+        {\n+            @Override\n+            public ByteBuffer acquire(int size, boolean direct)\n+            {\n+                return direct ? BufferUtil.allocateDirect(size) : BufferUtil.allocate(size);\n+            }\n+\n+            @Override\n+            public void release(ByteBuffer buffer)\n+            {\n+            }\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1NzgxMQ=="}, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY4NDU1Nw==", "bodyText": "The real buffer pool behaviors are one of the reasons the original code failed in a production capacity.  I think @sbordet has a point, this should use a real world scenario, not a pie-in-the-sky wishful scenario.", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364684557", "createdAt": "2020-01-09T11:16:18Z", "author": {"login": "joakime"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/HttpOutputTest.java", "diffHunk": "@@ -64,10 +70,25 @@ public void init() throws Exception\n     {\n         _server = new Server();\n \n+        _server.addBean(new ByteBufferPool()\n+        {\n+            @Override\n+            public ByteBuffer acquire(int size, boolean direct)\n+            {\n+                return direct ? BufferUtil.allocateDirect(size) : BufferUtil.allocate(size);\n+            }\n+\n+            @Override\n+            public void release(ByteBuffer buffer)\n+            {\n+            }\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1NzgxMQ=="}, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY4NjE5OQ==", "bodyText": "This is not pie in the sky wishful thinking.  It is a deterministic test case that actually tests what it thinks it is testing, not some random behaviour that is dependent on a buffer pool beyond the control of the test.", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364686199", "createdAt": "2020-01-09T11:20:38Z", "author": {"login": "gregw"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/HttpOutputTest.java", "diffHunk": "@@ -64,10 +70,25 @@ public void init() throws Exception\n     {\n         _server = new Server();\n \n+        _server.addBean(new ByteBufferPool()\n+        {\n+            @Override\n+            public ByteBuffer acquire(int size, boolean direct)\n+            {\n+                return direct ? BufferUtil.allocateDirect(size) : BufferUtil.allocate(size);\n+            }\n+\n+            @Override\n+            public void release(ByteBuffer buffer)\n+            {\n+            }\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1NzgxMQ=="}, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcxNjgzMw==", "bodyText": "OK, then add an alternate test that tests the opposite case.\nA new ByteBufferPool implementation that always returns 4x the size requested.", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364716833", "createdAt": "2020-01-09T12:39:05Z", "author": {"login": "joakime"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/HttpOutputTest.java", "diffHunk": "@@ -64,10 +70,25 @@ public void init() throws Exception\n     {\n         _server = new Server();\n \n+        _server.addBean(new ByteBufferPool()\n+        {\n+            @Override\n+            public ByteBuffer acquire(int size, boolean direct)\n+            {\n+                return direct ? BufferUtil.allocateDirect(size) : BufferUtil.allocate(size);\n+            }\n+\n+            @Override\n+            public void release(ByteBuffer buffer)\n+            {\n+            }\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1NzgxMQ=="}, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyNDcwNg==", "bodyText": "But that is not what I'm testing.  The tests only need to know if a write is bigger, smaller or the same as the buffers. It is relative size not absolute size that is important here.   If I had a 4x buffer returning pool, then I'd just have to alter the test case to write 4x as much data in each write to test the scenarios that are needed to test.\nThe point being that the HttpOutputTest is providing very good (well above average) coverage of HttpOutput.   The purpose here is not to test the buffer pools", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364724706", "createdAt": "2020-01-09T12:59:32Z", "author": {"login": "gregw"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/HttpOutputTest.java", "diffHunk": "@@ -64,10 +70,25 @@ public void init() throws Exception\n     {\n         _server = new Server();\n \n+        _server.addBean(new ByteBufferPool()\n+        {\n+            @Override\n+            public ByteBuffer acquire(int size, boolean direct)\n+            {\n+                return direct ? BufferUtil.allocateDirect(size) : BufferUtil.allocate(size);\n+            }\n+\n+            @Override\n+            public void release(ByteBuffer buffer)\n+            {\n+            }\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1NzgxMQ=="}, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2743, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}