{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MDE4MTMx", "number": 5295, "title": "Issue #5287 - rework CompressionPool to use the jetty-util pool", "bodyText": "This is based on PR #5248 which should be merged before this PR.", "createdAt": "2020-09-18T01:48:08Z", "url": "https://github.com/eclipse/jetty.project/pull/5295", "merged": true, "mergeCommit": {"oid": "c95fc2a3dc1ac05345a422bf23cdb3d9046d9e72"}, "closed": true, "closedAt": "2020-10-16T06:12:37Z", "author": {"login": "lachlan-roberts"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKBaw6gFqTQ5MTI1Mzk4Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSdwAIgFqTUwODM4NjAxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMjUzOTg2", "url": "https://github.com/eclipse/jetty.project/pull/5295#pullrequestreview-491253986", "createdAt": "2020-09-18T08:25:43Z", "commit": {"oid": "01fbd2daed651383abf866f6879f4ca6b3869295"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoyNTo0M1rOHUDJ1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODozNToxM1rOHUDe_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4NTIzOA==", "bodyText": "I think this will make a very large array list if capacity is MAX_VALUE?!?!?!?\nI think by default we want to pool to be 1024 or similar", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490785238", "createdAt": "2020-09-18T08:25:43Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java", "diffHunk": "@@ -56,73 +65,102 @@ public CompressionPool(int capacity)\n     /**\n      * @return Object taken from the pool if it is not empty or a newly created Object\n      */\n-    public T acquire()\n+    public Entry acquire()\n     {\n-        T object;\n-\n-        if (_capacity == 0)\n-            object = newObject();\n-        else\n+        Entry entry = null;\n+        if (_pool != null)\n         {\n-            object = _pool.poll();\n-            if (object == null)\n-                object = newObject();\n-            else if (_capacity > 0)\n-                _numObjects.decrementAndGet();\n+            Pool<Entry>.Entry acquiredEntry = _pool.acquire(e -> new Entry(newObject()));\n+            if (acquiredEntry != null)\n+            {\n+                entry = acquiredEntry.getPooled();\n+                entry.setEntry(acquiredEntry);\n+            }\n         }\n \n-        return object;\n+        return (entry == null) ? new Entry(newObject()) : entry;\n     }\n \n     /**\n-     * @param object returns this Object to the pool or calls {@link #end(Object)} if the pool is full.\n+     * @param entry returns this Object to the pool or calls {@link #end(Object)} if the pool is full.\n      */\n-    public void release(T object)\n+    public void release(Entry entry)\n     {\n-        if (object == null)\n-            return;\n+        entry.release();\n+    }\n \n-        if (_capacity == 0 || !isRunning())\n+    @Override\n+    protected void doStart() throws Exception\n+    {\n+        if (_capacity > 0)\n+            _pool = new Pool<>(Pool.StrategyType.RANDOM, _capacity, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fbd2daed651383abf866f6879f4ca6b3869295"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4NTg1Mw==", "bodyText": "INFINITE_CAPACITY is probably not an option and should be renamed to DEFAULT_CAPACITY or similar", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490785853", "createdAt": "2020-09-18T08:26:45Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java", "diffHunk": "@@ -56,73 +65,102 @@ public CompressionPool(int capacity)\n     /**\n      * @return Object taken from the pool if it is not empty or a newly created Object\n      */\n-    public T acquire()\n+    public Entry acquire()\n     {\n-        T object;\n-\n-        if (_capacity == 0)\n-            object = newObject();\n-        else\n+        Entry entry = null;\n+        if (_pool != null)\n         {\n-            object = _pool.poll();\n-            if (object == null)\n-                object = newObject();\n-            else if (_capacity > 0)\n-                _numObjects.decrementAndGet();\n+            Pool<Entry>.Entry acquiredEntry = _pool.acquire(e -> new Entry(newObject()));\n+            if (acquiredEntry != null)\n+            {\n+                entry = acquiredEntry.getPooled();\n+                entry.setEntry(acquiredEntry);\n+            }\n         }\n \n-        return object;\n+        return (entry == null) ? new Entry(newObject()) : entry;\n     }\n \n     /**\n-     * @param object returns this Object to the pool or calls {@link #end(Object)} if the pool is full.\n+     * @param entry returns this Object to the pool or calls {@link #end(Object)} if the pool is full.\n      */\n-    public void release(T object)\n+    public void release(Entry entry)\n     {\n-        if (object == null)\n-            return;\n+        entry.release();\n+    }\n \n-        if (_capacity == 0 || !isRunning())\n+    @Override\n+    protected void doStart() throws Exception\n+    {\n+        if (_capacity > 0)\n+            _pool = new Pool<>(Pool.StrategyType.RANDOM, _capacity, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4NTIzOA=="}, "originalCommit": {"oid": "01fbd2daed651383abf866f6879f4ca6b3869295"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4ODAwNA==", "bodyText": "It is confusing to have your Entry called Entry.... but eitherway, don't set the entry on the entry, instead pass it into the constructor and make it final:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Pool<Entry>.Entry acquiredEntry = _pool.acquire(e -> new Entry(newObject()));\n          \n          \n            \n                        if (acquiredEntry != null)\n          \n          \n            \n                        {\n          \n          \n            \n                            entry = acquiredEntry.getPooled();\n          \n          \n            \n                            entry.setEntry(acquiredEntry);\n          \n          \n            \n                        }\n          \n          \n            \n                        Pool<Entry>.Entry acquiredEntry = _pool.acquire(e -> new Entry(newObject(), e));\n          \n          \n            \n                        if (acquiredEntry == null)\n          \n          \n            \n                            return new Entry(newObject(), null);\n          \n          \n            \n                        return acquiredEntry.getPooled();", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490788004", "createdAt": "2020-09-18T08:30:36Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java", "diffHunk": "@@ -56,73 +65,102 @@ public CompressionPool(int capacity)\n     /**\n      * @return Object taken from the pool if it is not empty or a newly created Object\n      */\n-    public T acquire()\n+    public Entry acquire()\n     {\n-        T object;\n-\n-        if (_capacity == 0)\n-            object = newObject();\n-        else\n+        Entry entry = null;\n+        if (_pool != null)\n         {\n-            object = _pool.poll();\n-            if (object == null)\n-                object = newObject();\n-            else if (_capacity > 0)\n-                _numObjects.decrementAndGet();\n+            Pool<Entry>.Entry acquiredEntry = _pool.acquire(e -> new Entry(newObject()));\n+            if (acquiredEntry != null)\n+            {\n+                entry = acquiredEntry.getPooled();\n+                entry.setEntry(acquiredEntry);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fbd2daed651383abf866f6879f4ca6b3869295"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4ODg5NA==", "bodyText": "can we rename newObject to newCompressor", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490788894", "createdAt": "2020-09-18T08:32:03Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java", "diffHunk": "@@ -56,73 +65,102 @@ public CompressionPool(int capacity)\n     /**\n      * @return Object taken from the pool if it is not empty or a newly created Object\n      */\n-    public T acquire()\n+    public Entry acquire()\n     {\n-        T object;\n-\n-        if (_capacity == 0)\n-            object = newObject();\n-        else\n+        Entry entry = null;\n+        if (_pool != null)\n         {\n-            object = _pool.poll();\n-            if (object == null)\n-                object = newObject();\n-            else if (_capacity > 0)\n-                _numObjects.decrementAndGet();\n+            Pool<Entry>.Entry acquiredEntry = _pool.acquire(e -> new Entry(newObject()));\n+            if (acquiredEntry != null)\n+            {\n+                entry = acquiredEntry.getPooled();\n+                entry.setEntry(acquiredEntry);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4ODAwNA=="}, "originalCommit": {"oid": "01fbd2daed651383abf866f6879f4ca6b3869295"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4OTQwMQ==", "bodyText": "make value and entry final", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490789401", "createdAt": "2020-09-18T08:32:53Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java", "diffHunk": "@@ -56,73 +65,102 @@ public CompressionPool(int capacity)\n     /**\n      * @return Object taken from the pool if it is not empty or a newly created Object\n      */\n-    public T acquire()\n+    public Entry acquire()\n     {\n-        T object;\n-\n-        if (_capacity == 0)\n-            object = newObject();\n-        else\n+        Entry entry = null;\n+        if (_pool != null)\n         {\n-            object = _pool.poll();\n-            if (object == null)\n-                object = newObject();\n-            else if (_capacity > 0)\n-                _numObjects.decrementAndGet();\n+            Pool<Entry>.Entry acquiredEntry = _pool.acquire(e -> new Entry(newObject()));\n+            if (acquiredEntry != null)\n+            {\n+                entry = acquiredEntry.getPooled();\n+                entry.setEntry(acquiredEntry);\n+            }\n         }\n \n-        return object;\n+        return (entry == null) ? new Entry(newObject()) : entry;\n     }\n \n     /**\n-     * @param object returns this Object to the pool or calls {@link #end(Object)} if the pool is full.\n+     * @param entry returns this Object to the pool or calls {@link #end(Object)} if the pool is full.\n      */\n-    public void release(T object)\n+    public void release(Entry entry)\n     {\n-        if (object == null)\n-            return;\n+        entry.release();\n+    }\n \n-        if (_capacity == 0 || !isRunning())\n+    @Override\n+    protected void doStart() throws Exception\n+    {\n+        if (_capacity > 0)\n+            _pool = new Pool<>(Pool.StrategyType.RANDOM, _capacity, true);\n+        super.doStart();\n+    }\n+\n+    @Override\n+    public void doStop() throws Exception\n+    {\n+        _pool.close();\n+        _pool = null;\n+        super.doStop();\n+    }\n+\n+    public class Entry implements Closeable\n+    {\n+        private T _value;\n+        private Pool<Entry>.Entry _entry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fbd2daed651383abf866f6879f4ca6b3869295"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5MDE1OA==", "bodyText": "deflaterHolder?\npooledDeflater?", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490790158", "createdAt": "2020-09-18T08:34:18Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-core-common/src/main/java/org/eclipse/jetty/websocket/core/internal/PerMessageDeflateExtension.java", "diffHunk": "@@ -178,28 +180,28 @@ public static boolean endsWithTail(ByteBuffer buf)\n \n     public Deflater getDeflater()\n     {\n-        if (deflaterImpl == null)\n-            deflaterImpl = getDeflaterPool().acquire();\n-        return deflaterImpl;\n+        if (deflaterEntry == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fbd2daed651383abf866f6879f4ca6b3869295"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5MDY1Mw==", "bodyText": "... and the answer to the 'how fast/slow' question is???", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490790653", "createdAt": "2020-09-18T08:35:13Z", "author": {"login": "gregw"}, "path": "tests/jetty-jmh/src/main/java/org/eclipse/jetty/server/jmh/DeflaterPoolBenchmark.java", "diffHunk": "@@ -92,13 +92,14 @@ public static void stopTrial() throws Exception\n     @SuppressWarnings(\"deprecation\")\n     public long testPool() throws Exception\n     {\n-        Deflater deflater = _pool.acquire();\n+        DeflaterPool.Entry entry = _pool.acquire();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fbd2daed651383abf866f6879f4ca6b3869295"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NDk2Nzc3", "url": "https://github.com/eclipse/jetty.project/pull/5295#pullrequestreview-506496777", "createdAt": "2020-10-12T10:31:03Z", "commit": {"oid": "8325608727304925423d0413668f0d986d889831"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDozMTowM1rOHf43Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDozMzozN1rOHf48oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5OTU4Mg==", "bodyText": "Probably just\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static DeflaterPool ensurePool(ContainerLifeCycle containerLifeCycle)\n          \n          \n            \n                public static DeflaterPool ensurePool(Container container)", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r503199582", "createdAt": "2020-10-12T10:31:03Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/DeflaterPool.java", "diffHunk": "@@ -60,4 +63,20 @@ protected void reset(Deflater deflater)\n     {\n         deflater.reset();\n     }\n+\n+    public static DeflaterPool ensurePool(ContainerLifeCycle containerLifeCycle)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8325608727304925423d0413668f0d986d889831"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIwMDA0NQ==", "bodyText": "ditto", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r503200045", "createdAt": "2020-10-12T10:31:56Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/InflaterPool.java", "diffHunk": "@@ -57,4 +60,20 @@ protected void reset(Inflater inflater)\n     {\n         inflater.reset();\n     }\n+\n+    public static InflaterPool ensurePool(ContainerLifeCycle containerLifeCycle)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8325608727304925423d0413668f0d986d889831"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIwMDkyOA==", "bodyText": "IT may be good to have an override mechanism, so you can pass in a non shared pool if you want an only iff null do you use the ensure pool methods", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r503200928", "createdAt": "2020-10-12T10:33:37Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-core-server/src/main/java/org/eclipse/jetty/websocket/core/server/WebSocketServerComponents.java", "diffHunk": "@@ -21,31 +21,50 @@\n import javax.servlet.ServletContext;\n \n import org.eclipse.jetty.io.ByteBufferPool;\n+import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.util.DecoratedObjectFactory;\n+import org.eclipse.jetty.util.compression.DeflaterPool;\n+import org.eclipse.jetty.util.compression.InflaterPool;\n import org.eclipse.jetty.websocket.core.WebSocketComponents;\n import org.eclipse.jetty.websocket.core.WebSocketExtensionRegistry;\n \n /**\n  * A collection of components which are the resources needed for websockets such as\n  * {@link ByteBufferPool}, {@link WebSocketExtensionRegistry}, and {@link DecoratedObjectFactory}.\n  *\n- * These components should be accessed through {@link WebSocketServerComponents#ensureWebSocketComponents} so that\n+ * These components should be accessed through {@link WebSocketServerComponents#getWebSocketComponents} so that\n  * the instance can be shared by being stored as a bean on the ContextHandler.\n  */\n public class WebSocketServerComponents extends WebSocketComponents\n {\n     public static final String WEBSOCKET_COMPONENTS_ATTRIBUTE = WebSocketComponents.class.getName();\n \n-    public static WebSocketComponents ensureWebSocketComponents(ServletContext servletContext)\n+    WebSocketServerComponents(InflaterPool inflaterPool, DeflaterPool deflaterPool)\n     {\n-        // Ensure a mapping exists\n-        WebSocketComponents components = (WebSocketComponents)servletContext.getAttribute(WEBSOCKET_COMPONENTS_ATTRIBUTE);\n+        super(null, null, null, inflaterPool, deflaterPool);\n+    }\n+\n+    public static WebSocketComponents ensureWebSocketComponents(Server server, ServletContext servletContext)\n+    {\n+        WebSocketComponents components = server.getBean(WebSocketComponents.class);\n         if (components == null)\n         {\n-            components = new WebSocketServerComponents();\n-            servletContext.setAttribute(WEBSOCKET_COMPONENTS_ATTRIBUTE, components);\n+            InflaterPool inflaterPool = InflaterPool.ensurePool(server);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8325608727304925423d0413668f0d986d889831"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b239fa07c607dde42bec2a80566dd68822058a40", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/b239fa07c607dde42bec2a80566dd68822058a40", "committedDate": "2020-10-14T11:28:26Z", "message": "Issue #5287 - rework CompressionPool to use the jetty-util pool\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21576f2312a0a4e16f79841160ec3b635e4f9c8a", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/21576f2312a0a4e16f79841160ec3b635e4f9c8a", "committedDate": "2020-10-14T11:28:26Z", "message": "Issue #5287 - fix usages of new CompressionPool\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d241c6694be97614f040ec9d0f8c8b34b0247d23", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/d241c6694be97614f040ec9d0f8c8b34b0247d23", "committedDate": "2020-10-14T11:28:26Z", "message": "Issue #5287 - Pool the entries instead of just the Deflater/Inflaters\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dc024298672b227c720961440c2b1787535714f", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/5dc024298672b227c720961440c2b1787535714f", "committedDate": "2020-10-14T11:28:26Z", "message": "Issue #5287 - Changes from review & fix broken tests from NPE\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd06008ff4f10c7ed82abebcc1232193294499c3", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/dd06008ff4f10c7ed82abebcc1232193294499c3", "committedDate": "2020-10-14T11:28:26Z", "message": "Issue #5287 - remove IllegalArgumentException from CompressionPool Entry\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef816fcc4266201f17036713be3862801e8b570b", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/ef816fcc4266201f17036713be3862801e8b570b", "committedDate": "2020-10-14T11:28:26Z", "message": "DeflaterPoolBenchmark should manage lifecycle of the CompressionPool\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "608a895aab4ad9d66ec18ff4bd1c746e81ff372b", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/608a895aab4ad9d66ec18ff4bd1c746e81ff372b", "committedDate": "2020-10-14T11:28:26Z", "message": "Issue #5287 - make default CompressionPool capacity 1024\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cac3d76bbe974cd3aa2f06fa03b7a11ffbb0377", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/7cac3d76bbe974cd3aa2f06fa03b7a11ffbb0377", "committedDate": "2020-10-14T11:28:26Z", "message": "Issue #5287 - close deflater on release if non-pooled entry\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e3cfe8fc22e8083f04449a2bb85246490fb47e0", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/0e3cfe8fc22e8083f04449a2bb85246490fb47e0", "committedDate": "2020-10-14T11:28:26Z", "message": "Issue #5287 - share compression pools and size with max num threads\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4690aa51ba498454b0e27529c252f2b7cc017b3a", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/4690aa51ba498454b0e27529c252f2b7cc017b3a", "committedDate": "2020-10-14T11:28:26Z", "message": "allow override of shared CompressionPools in WebSocketServerComponents\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb1a4b6192de25aa3106ef52181639813557f8b6", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/bb1a4b6192de25aa3106ef52181639813557f8b6", "committedDate": "2020-10-14T07:33:34Z", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-5287-CompressionPool"}, "afterCommit": {"oid": "4690aa51ba498454b0e27529c252f2b7cc017b3a", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/4690aa51ba498454b0e27529c252f2b7cc017b3a", "committedDate": "2020-10-14T11:28:26Z", "message": "allow override of shared CompressionPools in WebSocketServerComponents\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4Mzg2MDE5", "url": "https://github.com/eclipse/jetty.project/pull/5295#pullrequestreview-508386019", "createdAt": "2020-10-14T14:07:33Z", "commit": {"oid": "4690aa51ba498454b0e27529c252f2b7cc017b3a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 7, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}