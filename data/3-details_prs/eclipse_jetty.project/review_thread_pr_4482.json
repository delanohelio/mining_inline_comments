{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNzQxNjQ3", "number": 4482, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDoxMTo0OFrODYrizA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNjoyMTozMFrODbdqhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjA1ODM2OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/AbstractConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDoxMTo0OFrOFercrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDoxMTo0OFrOFercrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxMzQ1NA==", "bodyText": "Don't use the _shutdown field directly here could throw NPE if the value can change to null.", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r367713454", "createdAt": "2020-01-17T00:11:48Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/AbstractConnector.java", "diffHunk": "@@ -345,13 +371,27 @@ protected void interruptAcceptors()\n     @Override\n     public Future<Void> shutdown()\n     {\n-        return _shutdown.shutdown();\n+        Shutdown shutdown = _shutdown;\n+        if (shutdown == null)\n+            return FutureCallback.SUCCEEDED;\n+\n+        // Signal for the acceptors to stop\n+        Future<Void> done = shutdown.shutdown();\n+        interruptAcceptors();\n+\n+        // Reduce the idle timeout of existing connections\n+        for (EndPoint ep : _endpoints)\n+            ep.setIdleTimeout(_shutdownIdleTimeout);\n+\n+        // Return Future that waits for no acceptors and no connections.\n+        return done;\n     }\n \n     @Override\n     public boolean isShutdown()\n     {\n-        return _shutdown.isShutdown();\n+        Shutdown shutdown = _shutdown;\n+        return shutdown == null || _shutdown.isShutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8dc84dad9f62a128ff8e7ed6246ec27a4f28cd"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjA5MTk2OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Server.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDozNDoyN1rOFerxeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDozNDoyN1rOFerxeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxODc3Ng==", "bodyText": "Should have the @Override annotation.", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r367718776", "createdAt": "2020-01-17T00:34:27Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Server.java", "diffHunk": "@@ -173,22 +174,26 @@ public static String getVersion()\n         return Jetty.VERSION;\n     }\n \n-    public boolean getStopAtShutdown()\n-    {\n-        return _stopAtShutdown;\n-    }\n-\n     /**\n      * Set a graceful stop time.\n      * The {@link StatisticsHandler} must be configured so that open connections can\n      * be tracked for a graceful shutdown.\n      *\n-     * @see org.eclipse.jetty.util.component.ContainerLifeCycle#setStopTimeout(long)\n      */\n-    @Override\n     public void setStopTimeout(long stopTimeout)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8dc84dad9f62a128ff8e7ed6246ec27a4f28cd"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjA5MjI3OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Server.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDozNDo0MFrOFerxqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDozNDo0MFrOFerxqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxODgyNQ==", "bodyText": "@Override annotation.", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r367718825", "createdAt": "2020-01-17T00:34:40Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Server.java", "diffHunk": "@@ -173,22 +174,26 @@ public static String getVersion()\n         return Jetty.VERSION;\n     }\n \n-    public boolean getStopAtShutdown()\n-    {\n-        return _stopAtShutdown;\n-    }\n-\n     /**\n      * Set a graceful stop time.\n      * The {@link StatisticsHandler} must be configured so that open connections can\n      * be tracked for a graceful shutdown.\n      *\n-     * @see org.eclipse.jetty.util.component.ContainerLifeCycle#setStopTimeout(long)\n      */\n-    @Override\n     public void setStopTimeout(long stopTimeout)\n     {\n-        super.setStopTimeout(stopTimeout);\n+        _stopTimeout = stopTimeout;\n+    }\n+\n+    @ManagedAttribute(\"Time in ms to gracefully shutdown the server\")\n+    public long getStopTimeout()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8dc84dad9f62a128ff8e7ed6246ec27a4f28cd"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjEwNzM0OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/AbstractHandlerContainer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDo0NDo1NlrOFer68g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNDo1Nzo0MVrOFeu3HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyMTIwMg==", "bodyText": "AbstractHandlerContainer seems like a strange place to put the GracefulContainer interface and the shutdown static method. Why is this not done the way you did  Graceful.LifeCycle and have Graceful.Container.", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r367721202", "createdAt": "2020-01-17T00:44:56Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/AbstractHandlerContainer.java", "diffHunk": "@@ -139,50 +141,51 @@ public void setServer(Server server)\n             }\n     }\n \n-    /**\n-     * Shutdown nested Gracefule handlers\n-     *\n-     * @param futures A list of Futures which must also be waited on for the shutdown (or null)\n-     * returns A MultiException to which any failures are added or null\n-     */\n-    protected void doShutdown(List<Future<Void>> futures) throws MultiException\n+    public interface GracefulContainer extends Graceful.LifeCycle, Container", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8dc84dad9f62a128ff8e7ed6246ec27a4f28cd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc2OTIzNA==", "bodyText": "Because org.eclipse.util.container does not know about Handlers... but yes it is a kind of strange place... I might make it top level.", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r367769234", "createdAt": "2020-01-17T04:56:41Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/AbstractHandlerContainer.java", "diffHunk": "@@ -139,50 +141,51 @@ public void setServer(Server server)\n             }\n     }\n \n-    /**\n-     * Shutdown nested Gracefule handlers\n-     *\n-     * @param futures A list of Futures which must also be waited on for the shutdown (or null)\n-     * returns A MultiException to which any failures are added or null\n-     */\n-    protected void doShutdown(List<Future<Void>> futures) throws MultiException\n+    public interface GracefulContainer extends Graceful.LifeCycle, Container", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyMTIwMg=="}, "originalCommit": {"oid": "8f8dc84dad9f62a128ff8e7ed6246ec27a4f28cd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc2OTM3Mg==", "bodyText": "hmmm it no longer needs to know about Handlers!", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r367769372", "createdAt": "2020-01-17T04:57:41Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/AbstractHandlerContainer.java", "diffHunk": "@@ -139,50 +141,51 @@ public void setServer(Server server)\n             }\n     }\n \n-    /**\n-     * Shutdown nested Gracefule handlers\n-     *\n-     * @param futures A list of Futures which must also be waited on for the shutdown (or null)\n-     * returns A MultiException to which any failures are added or null\n-     */\n-    protected void doShutdown(List<Future<Void>> futures) throws MultiException\n+    public interface GracefulContainer extends Graceful.LifeCycle, Container", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyMTIwMg=="}, "originalCommit": {"oid": "8f8dc84dad9f62a128ff8e7ed6246ec27a4f28cd"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjE0MDI5OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/QueuedThreadPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMTowNjozOVrOFesPsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNToxNzozMVrOFevEvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyNjUxNQ==", "bodyText": "This change is a little concerning, is this somehow related to the graceful shutdown refactor or just a cleanup?", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r367726515", "createdAt": "2020-01-17T01:06:39Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/QueuedThreadPool.java", "diffHunk": "@@ -675,10 +689,17 @@ private boolean addCounts(int deltaThreads, int deltaIdle)\n             int threads = AtomicBiInteger.getHi(encoded);\n             int idle = AtomicBiInteger.getLo(encoded);\n             if (threads == Integer.MIN_VALUE) // This is a marker that the pool is stopped.\n-                return false;\n-            long update = AtomicBiInteger.encode(threads + deltaThreads, idle + deltaIdle);\n-            if (_counts.compareAndSet(encoded, update))\n-                return true;\n+            {\n+                long update = AtomicBiInteger.encode(threads, idle + deltaIdle);\n+                if (_counts.compareAndSet(encoded, update))\n+                    return false;\n+            }\n+            else\n+            {\n+                long update = AtomicBiInteger.encode(threads + deltaThreads, idle + deltaIdle);\n+                if (_counts.compareAndSet(encoded, update))\n+                    return true;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8dc84dad9f62a128ff8e7ed6246ec27a4f28cd"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc3Mjg2MA==", "bodyText": "It is a minor change that allowed better debugging of graceful shutdown.  It allows the idle count to be maintained while the QTP is stopping", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r367772860", "createdAt": "2020-01-17T05:17:31Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/QueuedThreadPool.java", "diffHunk": "@@ -675,10 +689,17 @@ private boolean addCounts(int deltaThreads, int deltaIdle)\n             int threads = AtomicBiInteger.getHi(encoded);\n             int idle = AtomicBiInteger.getLo(encoded);\n             if (threads == Integer.MIN_VALUE) // This is a marker that the pool is stopped.\n-                return false;\n-            long update = AtomicBiInteger.encode(threads + deltaThreads, idle + deltaIdle);\n-            if (_counts.compareAndSet(encoded, update))\n-                return true;\n+            {\n+                long update = AtomicBiInteger.encode(threads, idle + deltaIdle);\n+                if (_counts.compareAndSet(encoded, update))\n+                    return false;\n+            }\n+            else\n+            {\n+                long update = AtomicBiInteger.encode(threads + deltaThreads, idle + deltaIdle);\n+                if (_counts.compareAndSet(encoded, update))\n+                    return true;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyNjUxNQ=="}, "originalCommit": {"oid": "8f8dc84dad9f62a128ff8e7ed6246ec27a4f28cd"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODY2NDA2OnYy", "diffSide": "RIGHT", "path": "jetty-jmx/src/test/java/org/eclipse/jetty/jmx/ObjectMBeanTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzoyMzowOFrOFikv5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDoxMDoyNFrOFimTHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5Nzk4OA==", "bodyText": "I don't understand why this value changed here? Doesn't seem anything to do with shutdown?", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r371797988", "createdAt": "2020-01-28T13:23:08Z", "author": {"login": "janbartel"}, "path": "jetty-jmx/src/test/java/org/eclipse/jetty/jmx/ObjectMBeanTest.java", "diffHunk": "@@ -123,7 +123,7 @@ public void testDerivedAttributes() throws Exception\n \n         assertEquals(\"com.acme.Derived\", derivedInfo.getClassName(), \"name does not match\");\n         assertEquals(\"Test the mbean stuff\", derivedInfo.getDescription(), \"description does not match\");\n-        assertEquals(6, derivedInfo.getAttributes().length, \"attribute count does not match\");\n+        assertEquals(5, derivedInfo.getAttributes().length, \"attribute count does not match\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b1422ae287cf31a6d2670d0164accaf8ebeabb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyMzM4OA==", "bodyText": "the stopTimeout used to be an attribute on every AbstractLifeCycle. It no longer is, hence one less attribute.", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r371823388", "createdAt": "2020-01-28T14:10:24Z", "author": {"login": "gregw"}, "path": "jetty-jmx/src/test/java/org/eclipse/jetty/jmx/ObjectMBeanTest.java", "diffHunk": "@@ -123,7 +123,7 @@ public void testDerivedAttributes() throws Exception\n \n         assertEquals(\"com.acme.Derived\", derivedInfo.getClassName(), \"name does not match\");\n         assertEquals(\"Test the mbean stuff\", derivedInfo.getDescription(), \"description does not match\");\n-        assertEquals(6, derivedInfo.getAttributes().length, \"attribute count does not match\");\n+        assertEquals(5, derivedInfo.getAttributes().length, \"attribute count does not match\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5Nzk4OA=="}, "originalCommit": {"oid": "b0b1422ae287cf31a6d2670d0164accaf8ebeabb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODY2NzI2OnYy", "diffSide": "RIGHT", "path": "jetty-maven-plugin/src/it/jetty-start-gwt-it/beer-client/src/main/java/org/olamy/App.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzoyNDoxNFrOFikx5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDoxMToyMVrOFimVWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5ODUwMg==", "bodyText": "Again, odd that this has nothing to do with shutdown. Perhaps you are missing a merge from jetty-10.0.x?", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r371798502", "createdAt": "2020-01-28T13:24:14Z", "author": {"login": "janbartel"}, "path": "jetty-maven-plugin/src/it/jetty-start-gwt-it/beer-client/src/main/java/org/olamy/App.java", "diffHunk": "@@ -44,9 +44,9 @@\n      * The message displayed to the user when the server cannot be reached or\n      * returns an error.\n      */\n-    private static final String SERVER_ERROR = \"An error occurred while \"\n-        + \"attempting to contact the server. Please check your network \"\n-        + \"connection and try again.\";\n+    private static final String SERVER_ERROR = \"An error occurred while \" +\n+        \"attempting to contact the server. Please check your network \" +\n+        \"connection and try again.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b1422ae287cf31a6d2670d0164accaf8ebeabb"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyMzk2Mg==", "bodyText": "I started getting checkstyle failures, so I had to fix this.  I think it was a problem with the merge of the change to apply checkstyle to tests?", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r371823962", "createdAt": "2020-01-28T14:11:21Z", "author": {"login": "gregw"}, "path": "jetty-maven-plugin/src/it/jetty-start-gwt-it/beer-client/src/main/java/org/olamy/App.java", "diffHunk": "@@ -44,9 +44,9 @@\n      * The message displayed to the user when the server cannot be reached or\n      * returns an error.\n      */\n-    private static final String SERVER_ERROR = \"An error occurred while \"\n-        + \"attempting to contact the server. Please check your network \"\n-        + \"connection and try again.\";\n+    private static final String SERVER_ERROR = \"An error occurred while \" +\n+        \"attempting to contact the server. Please check your network \" +\n+        \"connection and try again.\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5ODUwMg=="}, "originalCommit": {"oid": "b0b1422ae287cf31a6d2670d0164accaf8ebeabb"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODY3Mzg4OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/component/Graceful.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzoyNjoyOFrOFik1_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzoyNjoyOFrOFik1_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5OTU1MA==", "bodyText": "The comment at line 40 should be for a CompletableFuture, not just a Future.", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r371799550", "createdAt": "2020-01-28T13:26:28Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/component/Graceful.java", "diffHunk": "@@ -43,47 +46,96 @@\n  */\n public interface Graceful", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b1422ae287cf31a6d2670d0164accaf8ebeabb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTIwNDIzOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/component/Graceful.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTo1NToyMFrOFi9WNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzo0Nzo1MVrOFi_Jsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMTAxMw==", "bodyText": "Does this really need to be a CompleteableFuture rather than just a Future?\nWould you ever expect the caller of this to complete the future or is it to be done internally like in the Shutdown utility with check().", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r372201013", "createdAt": "2020-01-29T05:55:20Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/component/Graceful.java", "diffHunk": "@@ -43,47 +47,96 @@\n  */\n public interface Graceful\n {\n-    Future<Void> shutdown();\n+    /**\n+     * Shutdown the component. When this method returns, the component should not accept any new load.\n+     * @return A future that is completed once all load on the component is completed\n+     */\n+    CompletableFuture<Void> shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d17882f5a15403bd244b7e0f6054a67e94f1745"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIzMDU3OA==", "bodyText": "I guess the whole point of the API is that we don't know how the caller will wait for the shutdown to be complete... and it is possible to use a CompetableFuture as a Future, but not the other way around.", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r372230578", "createdAt": "2020-01-29T07:47:51Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/component/Graceful.java", "diffHunk": "@@ -43,47 +47,96 @@\n  */\n public interface Graceful\n {\n-    Future<Void> shutdown();\n+    /**\n+     * Shutdown the component. When this method returns, the component should not accept any new load.\n+     * @return A future that is completed once all load on the component is completed\n+     */\n+    CompletableFuture<Void> shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMTAxMw=="}, "originalCommit": {"oid": "2d17882f5a15403bd244b7e0f6054a67e94f1745"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTIzNTcxOnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Server.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNjoxODoxNFrOFi9o3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzo1MjowMlrOFi_PMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwNTc5MA==", "bodyText": "I think this should be the only line in the try/catch, otherwise if it throws the stopTimeout will never be set on the ThreadPool.", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r372205790", "createdAt": "2020-01-29T06:18:14Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Server.java", "diffHunk": "@@ -466,21 +464,20 @@ protected void doStop() throws Exception\n \n         MultiException mex = new MultiException();\n \n-        try\n+        if (getStopTimeout() > 0)\n         {\n-            // list if graceful futures\n-            List<Future<Void>> futures = new ArrayList<>();\n-            // First shutdown the network connectors to stop accepting new connections\n-            for (Connector connector : _connectors)\n+            try\n             {\n-                futures.add(connector.shutdown());\n+                long end = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(getStopTimeout());\n+                Graceful.shutdown(this).get(getStopTimeout(), TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d17882f5a15403bd244b7e0f6054a67e94f1745"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIzMTk4NQ==", "bodyText": "ack", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r372231985", "createdAt": "2020-01-29T07:52:02Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Server.java", "diffHunk": "@@ -466,21 +464,20 @@ protected void doStop() throws Exception\n \n         MultiException mex = new MultiException();\n \n-        try\n+        if (getStopTimeout() > 0)\n         {\n-            // list if graceful futures\n-            List<Future<Void>> futures = new ArrayList<>();\n-            // First shutdown the network connectors to stop accepting new connections\n-            for (Connector connector : _connectors)\n+            try\n             {\n-                futures.add(connector.shutdown());\n+                long end = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(getStopTimeout());\n+                Graceful.shutdown(this).get(getStopTimeout(), TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwNTc5MA=="}, "originalCommit": {"oid": "2d17882f5a15403bd244b7e0f6054a67e94f1745"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTI0MTY2OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Server.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNjoyMTozMFrOFi9sIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzo1MTo1NlrOFi_PFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwNjYyNg==", "bodyText": "This logic seems wrong to me, we can never set the stopTimeout on the ThreadPool to longer than 1000ms, and if the Graceful.shutdown takes a full stopTimeout we could get a negative value for the ThreadPool stopTimeout.", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r372206626", "createdAt": "2020-01-29T06:21:30Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Server.java", "diffHunk": "@@ -466,21 +464,20 @@ protected void doStop() throws Exception\n \n         MultiException mex = new MultiException();\n \n-        try\n+        if (getStopTimeout() > 0)\n         {\n-            // list if graceful futures\n-            List<Future<Void>> futures = new ArrayList<>();\n-            // First shutdown the network connectors to stop accepting new connections\n-            for (Connector connector : _connectors)\n+            try\n             {\n-                futures.add(connector.shutdown());\n+                long end = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(getStopTimeout());\n+                Graceful.shutdown(this).get(getStopTimeout(), TimeUnit.MILLISECONDS);\n+                QueuedThreadPool qtp = getBean(QueuedThreadPool.class);\n+                if (qtp != null)\n+                    qtp.setStopTimeout(Math.min(1000L, TimeUnit.NANOSECONDS.toMillis(end - System.nanoTime())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d17882f5a15403bd244b7e0f6054a67e94f1745"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIzMTk1Nw==", "bodyText": "oops", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r372231957", "createdAt": "2020-01-29T07:51:56Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Server.java", "diffHunk": "@@ -466,21 +464,20 @@ protected void doStop() throws Exception\n \n         MultiException mex = new MultiException();\n \n-        try\n+        if (getStopTimeout() > 0)\n         {\n-            // list if graceful futures\n-            List<Future<Void>> futures = new ArrayList<>();\n-            // First shutdown the network connectors to stop accepting new connections\n-            for (Connector connector : _connectors)\n+            try\n             {\n-                futures.add(connector.shutdown());\n+                long end = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(getStopTimeout());\n+                Graceful.shutdown(this).get(getStopTimeout(), TimeUnit.MILLISECONDS);\n+                QueuedThreadPool qtp = getBean(QueuedThreadPool.class);\n+                if (qtp != null)\n+                    qtp.setStopTimeout(Math.min(1000L, TimeUnit.NANOSECONDS.toMillis(end - System.nanoTime())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwNjYyNg=="}, "originalCommit": {"oid": "2d17882f5a15403bd244b7e0f6054a67e94f1745"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2750, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}