{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NTM3NDI1", "number": 5405, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNzo1MDo0M1rOErfTzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNzo1MjoxNFrOErfWFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDM3MTk4OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-util-server/src/main/java/org/eclipse/jetty/websocket/util/server/WebSocketUpgradeFilter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNzo1MDo0M1rOHeSGnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTozNzozNFrOHeWMEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxNTkzMg==", "bodyText": "Are there other ensureFoo methods in the websocket setup that also need such locks?", "url": "https://github.com/eclipse/jetty.project/pull/5405#discussion_r501515932", "createdAt": "2020-10-08T07:50:43Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-util-server/src/main/java/org/eclipse/jetty/websocket/util/server/WebSocketUpgradeFilter.java", "diffHunk": "@@ -105,22 +109,27 @@ private static FilterHolder getFilter(ServletContext servletContext)\n      */\n     public static FilterHolder ensureFilter(ServletContext servletContext)\n     {\n-        FilterHolder existingFilter = WebSocketUpgradeFilter.getFilter(servletContext);\n-        if (existingFilter != null)\n-            return existingFilter;\n-\n-        final String name = \"WebSocketUpgradeFilter\";\n-        final String pathSpec = \"/*\";\n-        FilterHolder holder = new FilterHolder(new WebSocketUpgradeFilter());\n-        holder.setName(name);\n-        holder.setInitParameter(MAPPING_ATTRIBUTE_INIT_PARAM, WebSocketMapping.DEFAULT_KEY);\n-\n-        holder.setAsyncSupported(true);\n-        ServletHandler servletHandler = ContextHandler.getContextHandler(servletContext).getChildHandlerByClass(ServletHandler.class);\n-        servletHandler.addFilterWithMapping(holder, pathSpec, EnumSet.of(DispatcherType.REQUEST));\n-        if (LOG.isDebugEnabled())\n-            LOG.debug(\"Adding {} mapped to {} in {}\", holder, pathSpec, servletContext);\n-        return holder;\n+        // Lock in case two concurrent requests are initializing the filter lazily.\n+        try (AutoLock l = LOCK.lock())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2beb2861d795a479ab89de6f9bd6446b7548648"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxODM4OQ==", "bodyText": "I'll approve this PR, but feel free to add other such locks before merging.", "url": "https://github.com/eclipse/jetty.project/pull/5405#discussion_r501518389", "createdAt": "2020-10-08T07:54:48Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-util-server/src/main/java/org/eclipse/jetty/websocket/util/server/WebSocketUpgradeFilter.java", "diffHunk": "@@ -105,22 +109,27 @@ private static FilterHolder getFilter(ServletContext servletContext)\n      */\n     public static FilterHolder ensureFilter(ServletContext servletContext)\n     {\n-        FilterHolder existingFilter = WebSocketUpgradeFilter.getFilter(servletContext);\n-        if (existingFilter != null)\n-            return existingFilter;\n-\n-        final String name = \"WebSocketUpgradeFilter\";\n-        final String pathSpec = \"/*\";\n-        FilterHolder holder = new FilterHolder(new WebSocketUpgradeFilter());\n-        holder.setName(name);\n-        holder.setInitParameter(MAPPING_ATTRIBUTE_INIT_PARAM, WebSocketMapping.DEFAULT_KEY);\n-\n-        holder.setAsyncSupported(true);\n-        ServletHandler servletHandler = ContextHandler.getContextHandler(servletContext).getChildHandlerByClass(ServletHandler.class);\n-        servletHandler.addFilterWithMapping(holder, pathSpec, EnumSet.of(DispatcherType.REQUEST));\n-        if (LOG.isDebugEnabled())\n-            LOG.debug(\"Adding {} mapped to {} in {}\", holder, pathSpec, servletContext);\n-        return holder;\n+        // Lock in case two concurrent requests are initializing the filter lazily.\n+        try (AutoLock l = LOCK.lock())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxNTkzMg=="}, "originalCommit": {"oid": "d2beb2861d795a479ab89de6f9bd6446b7548648"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2NjAwMg==", "bodyText": "The other ensureFoo methods are all called directly from within the SCI, so we don't get the same sort of race occurring.\nDo you think we should just add the locks there as well anyway?", "url": "https://github.com/eclipse/jetty.project/pull/5405#discussion_r501566002", "createdAt": "2020-10-08T09:10:53Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-websocket/websocket-util-server/src/main/java/org/eclipse/jetty/websocket/util/server/WebSocketUpgradeFilter.java", "diffHunk": "@@ -105,22 +109,27 @@ private static FilterHolder getFilter(ServletContext servletContext)\n      */\n     public static FilterHolder ensureFilter(ServletContext servletContext)\n     {\n-        FilterHolder existingFilter = WebSocketUpgradeFilter.getFilter(servletContext);\n-        if (existingFilter != null)\n-            return existingFilter;\n-\n-        final String name = \"WebSocketUpgradeFilter\";\n-        final String pathSpec = \"/*\";\n-        FilterHolder holder = new FilterHolder(new WebSocketUpgradeFilter());\n-        holder.setName(name);\n-        holder.setInitParameter(MAPPING_ATTRIBUTE_INIT_PARAM, WebSocketMapping.DEFAULT_KEY);\n-\n-        holder.setAsyncSupported(true);\n-        ServletHandler servletHandler = ContextHandler.getContextHandler(servletContext).getChildHandlerByClass(ServletHandler.class);\n-        servletHandler.addFilterWithMapping(holder, pathSpec, EnumSet.of(DispatcherType.REQUEST));\n-        if (LOG.isDebugEnabled())\n-            LOG.debug(\"Adding {} mapped to {} in {}\", holder, pathSpec, servletContext);\n-        return holder;\n+        // Lock in case two concurrent requests are initializing the filter lazily.\n+        try (AutoLock l = LOCK.lock())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxNTkzMg=="}, "originalCommit": {"oid": "d2beb2861d795a479ab89de6f9bd6446b7548648"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4Mjg2NA==", "bodyText": "Ok. No need then.", "url": "https://github.com/eclipse/jetty.project/pull/5405#discussion_r501582864", "createdAt": "2020-10-08T09:37:34Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-util-server/src/main/java/org/eclipse/jetty/websocket/util/server/WebSocketUpgradeFilter.java", "diffHunk": "@@ -105,22 +109,27 @@ private static FilterHolder getFilter(ServletContext servletContext)\n      */\n     public static FilterHolder ensureFilter(ServletContext servletContext)\n     {\n-        FilterHolder existingFilter = WebSocketUpgradeFilter.getFilter(servletContext);\n-        if (existingFilter != null)\n-            return existingFilter;\n-\n-        final String name = \"WebSocketUpgradeFilter\";\n-        final String pathSpec = \"/*\";\n-        FilterHolder holder = new FilterHolder(new WebSocketUpgradeFilter());\n-        holder.setName(name);\n-        holder.setInitParameter(MAPPING_ATTRIBUTE_INIT_PARAM, WebSocketMapping.DEFAULT_KEY);\n-\n-        holder.setAsyncSupported(true);\n-        ServletHandler servletHandler = ContextHandler.getContextHandler(servletContext).getChildHandlerByClass(ServletHandler.class);\n-        servletHandler.addFilterWithMapping(holder, pathSpec, EnumSet.of(DispatcherType.REQUEST));\n-        if (LOG.isDebugEnabled())\n-            LOG.debug(\"Adding {} mapped to {} in {}\", holder, pathSpec, servletContext);\n-        return holder;\n+        // Lock in case two concurrent requests are initializing the filter lazily.\n+        try (AutoLock l = LOCK.lock())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxNTkzMg=="}, "originalCommit": {"oid": "d2beb2861d795a479ab89de6f9bd6446b7548648"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDM3NzgxOnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-jetty-tests/src/test/java/org/eclipse/jetty/websocket/tests/JettyWebSocketFilterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNzo1MjoxNFrOHeSKBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNzo1NDoxMlrOHeSOzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxNjgwNQ==", "bodyText": "Can we put a check within configure on the start of the contextHandler passed?  If it is started then it should ISE.   No sure about if it is starting?", "url": "https://github.com/eclipse/jetty.project/pull/5405#discussion_r501516805", "createdAt": "2020-10-08T07:52:14Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-jetty-tests/src/test/java/org/eclipse/jetty/websocket/tests/JettyWebSocketFilterTest.java", "diffHunk": "@@ -45,18 +50,29 @@\n     private WebSocketClient client;\n     private ServletContextHandler contextHandler;\n \n-    @BeforeEach\n-    public void start() throws Exception\n+    public void start(JettyWebSocketServletContainerInitializer.Configurator configurator) throws Exception\n+    {\n+        start(configurator, null);\n+    }\n+\n+    public void start(ServletHolder servletHolder) throws Exception\n+    {\n+        start(null, servletHolder);\n+    }\n+\n+    public void start(JettyWebSocketServletContainerInitializer.Configurator configurator, ServletHolder servletHolder) throws Exception\n     {\n         server = new Server();\n         connector = new ServerConnector(server);\n         server.addConnector(connector);\n \n         contextHandler = new ServletContextHandler(ServletContextHandler.SESSIONS);\n         contextHandler.setContextPath(\"/\");\n+        if (servletHolder != null)\n+            contextHandler.addServlet(servletHolder, \"/\");\n         server.setHandler(contextHandler);\n \n-        JettyWebSocketServletContainerInitializer.configure(contextHandler, null);\n+        JettyWebSocketServletContainerInitializer.configure(contextHandler, configurator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2beb2861d795a479ab89de6f9bd6446b7548648"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxODAzMA==", "bodyText": "Ah I just saw #5406, so ignore this one.", "url": "https://github.com/eclipse/jetty.project/pull/5405#discussion_r501518030", "createdAt": "2020-10-08T07:54:12Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-jetty-tests/src/test/java/org/eclipse/jetty/websocket/tests/JettyWebSocketFilterTest.java", "diffHunk": "@@ -45,18 +50,29 @@\n     private WebSocketClient client;\n     private ServletContextHandler contextHandler;\n \n-    @BeforeEach\n-    public void start() throws Exception\n+    public void start(JettyWebSocketServletContainerInitializer.Configurator configurator) throws Exception\n+    {\n+        start(configurator, null);\n+    }\n+\n+    public void start(ServletHolder servletHolder) throws Exception\n+    {\n+        start(null, servletHolder);\n+    }\n+\n+    public void start(JettyWebSocketServletContainerInitializer.Configurator configurator, ServletHolder servletHolder) throws Exception\n     {\n         server = new Server();\n         connector = new ServerConnector(server);\n         server.addConnector(connector);\n \n         contextHandler = new ServletContextHandler(ServletContextHandler.SESSIONS);\n         contextHandler.setContextPath(\"/\");\n+        if (servletHolder != null)\n+            contextHandler.addServlet(servletHolder, \"/\");\n         server.setHandler(contextHandler);\n \n-        JettyWebSocketServletContainerInitializer.configure(contextHandler, null);\n+        JettyWebSocketServletContainerInitializer.configure(contextHandler, configurator);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxNjgwNQ=="}, "originalCommit": {"oid": "d2beb2861d795a479ab89de6f9bd6446b7548648"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2265, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}