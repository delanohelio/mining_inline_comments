{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNzUzNjc3", "number": 5177, "title": "Issue #5162 CDI embedded integration improvements", "bodyText": "Clean up CDI integration and documentation to better support embedded usage.\n\nmade listener public\nadded utility class for SCIs", "createdAt": "2020-08-20T08:31:15Z", "url": "https://github.com/eclipse/jetty.project/pull/5177", "merged": true, "mergeCommit": {"oid": "7ecf42e3f8b99a18ca87cc2894effaeb7552b627"}, "closed": true, "closedAt": "2020-09-07T12:00:21Z", "author": {"login": "gregw"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAr8YFAH2gAyNDcwNzUzNjc3OjY3YzM3M2M3ZDk4NmI3M2UwM2ZmYjEzN2Y4NjAyOThjODkxY2RjMGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdE6KPsgFqTQ4MDcyMDA1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/67c373c7d986b73e03ffb137f860298c891cdc0a", "committedDate": "2020-08-20T08:29:06Z", "message": "Issue #5162 CDI embedded integration improvements\n\nClean up CDI integration and documentation to better support embedded usage.\n + made listener public\n + added utility class for SCIs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzc3NTgx", "url": "https://github.com/eclipse/jetty.project/pull/5177#pullrequestreview-471377581", "createdAt": "2020-08-20T08:32:09Z", "commit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozMjowOVrOHD0KPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozMjowOVrOHD0KPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2MjM2Nw==", "bodyText": "Made public so it can be directly used without SCI", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473762367", "createdAt": "2020-08-20T08:32:09Z", "author": {"login": "gregw"}, "path": "jetty-cdi/src/main/java/org/eclipse/jetty/cdi/CdiDecoratingListener.java", "diffHunk": "@@ -24,13 +24,14 @@\n /**\n  * A DecoratingListener that listens for \"org.eclipse.jetty.cdi.decorator\"\n  */\n-class CdiDecoratingListener extends DecoratingListener\n+public class CdiDecoratingListener extends DecoratingListener", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzc3ODgz", "url": "https://github.com/eclipse/jetty.project/pull/5177#pullrequestreview-471377883", "createdAt": "2020-08-20T08:32:34Z", "commit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozMjozNFrOHD0L3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozMjozNFrOHD0L3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2Mjc4MQ==", "bodyText": "Set the mode here, so direct usage still signals to weld the method used.", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473762781", "createdAt": "2020-08-20T08:32:34Z", "author": {"login": "gregw"}, "path": "jetty-cdi/src/main/java/org/eclipse/jetty/cdi/CdiDecoratingListener.java", "diffHunk": "@@ -24,13 +24,14 @@\n /**\n  * A DecoratingListener that listens for \"org.eclipse.jetty.cdi.decorator\"\n  */\n-class CdiDecoratingListener extends DecoratingListener\n+public class CdiDecoratingListener extends DecoratingListener\n {\n     public static final String MODE = \"CdiDecoratingListener\";\n     public static final String ATTRIBUTE = \"org.eclipse.jetty.cdi.decorator\";\n \n     public CdiDecoratingListener(ServletContextHandler contextHandler)\n     {\n         super(contextHandler, ATTRIBUTE);\n+        contextHandler.setAttribute(CdiServletContainerInitializer.CDI_INTEGRATION_ATTRIBUTE, MODE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzc4MTUw", "url": "https://github.com/eclipse/jetty.project/pull/5177#pullrequestreview-471378150", "createdAt": "2020-08-20T08:32:56Z", "commit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozMjo1NlrOHD0NOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozMjo1NlrOHD0NOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2MzEyOA==", "bodyText": "make work when there is no classloader", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473763128", "createdAt": "2020-08-20T08:32:56Z", "author": {"login": "gregw"}, "path": "jetty-cdi/src/main/java/org/eclipse/jetty/cdi/CdiSpiDecorator.java", "diffHunk": "@@ -65,7 +65,10 @@\n     public CdiSpiDecorator(ServletContextHandler context) throws UnsupportedOperationException\n     {\n         _context = context;\n+        context.setAttribute(CdiServletContainerInitializer.CDI_INTEGRATION_ATTRIBUTE, MODE);\n         ClassLoader classLoader = _context.getClassLoader();\n+        if (classLoader == null)\n+            classLoader = this.getClass().getClassLoader();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzc5MjUz", "url": "https://github.com/eclipse/jetty.project/pull/5177#pullrequestreview-471379253", "createdAt": "2020-08-20T08:34:23Z", "commit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozNDoyNFrOHD0SeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozNDoyNFrOHD0SeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NDQ3Mw==", "bodyText": "This complex little dance is because it is too easy to install CdiSpiDecorator and then try to init Weld with it's listener, which will fail because CdiSpiDecorator will try to decorate it, but CDI is not enabled yet.     This soft dependency  breaks that chicken-egg problem.", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473764473", "createdAt": "2020-08-20T08:34:24Z", "author": {"login": "gregw"}, "path": "jetty-cdi/src/main/java/org/eclipse/jetty/cdi/CdiSpiDecorator.java", "diffHunk": "@@ -92,6 +95,35 @@ public CdiSpiDecorator(ServletContextHandler context) throws UnsupportedOperatio\n         }\n     }\n \n+    /**\n+     * Test if a class can be decorated.\n+     * @implNote The default implementation calls {@link #isKnownUndecoratable(String) }\n+     * on the class and all it's super classes.\n+     * @param clazz The class to check\n+     * @return True if the class and all it's super classes can be decorated\n+     */\n+    protected boolean isDecoratable(Class<?> clazz)\n+    {\n+        if (Object.class == clazz)\n+            return true;\n+        if (isKnownUndecoratable(clazz.getName()))\n+            return false;\n+        return isDecoratable(clazz.getSuperclass());\n+    }\n+\n+    /**\n+     * Test if a specific class name is known to not be decoratable.\n+     * @implNote default implementation checks for well known classes that are used to\n+     * setup CDI itself, and thus cannot themselves be decorated.\n+     * @see #isDecoratable(Class)\n+     * @param className The name of the class to check\n+     * @return True if the class is known not to be decoratable\n+     */\n+    protected boolean isKnownUndecoratable(String className)\n+    {\n+        return \"org.jboss.weld.environment.servlet.Listener\".equals(className);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzc5ODIw", "url": "https://github.com/eclipse/jetty.project/pull/5177#pullrequestreview-471379820", "createdAt": "2020-08-20T08:35:06Z", "commit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozNTowNlrOHD0U-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozNTowNlrOHD0U-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NTExMw==", "bodyText": "This is no longer needed.  Always called with correct classloader set.", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473765113", "createdAt": "2020-08-20T08:35:06Z", "author": {"login": "gregw"}, "path": "jetty-plus/src/main/java/org/eclipse/jetty/plus/annotation/ContainerInitializer.java", "diffHunk": "@@ -124,9 +124,6 @@ public void callStartup(WebAppContext context)\n         {\n             Set<Class<?>> classes = new HashSet<Class<?>>();\n \n-            ClassLoader oldLoader = Thread.currentThread().getContextClassLoader();\n-            Thread.currentThread().setContextClassLoader(context.getClassLoader());\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzgwMzA0", "url": "https://github.com/eclipse/jetty.project/pull/5177#pullrequestreview-471380304", "createdAt": "2020-08-20T08:35:43Z", "commit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozNTo0NFrOHD0XJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozNTo0NFrOHD0XJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NTY2OQ==", "bodyText": "This allows for multiple SCI Callers.  It also correctly sets them as managed if this handler starts them.", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473765669", "createdAt": "2020-08-20T08:35:44Z", "author": {"login": "gregw"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java", "diffHunk": "@@ -336,9 +338,15 @@ protected ServletHandler newServletHandler()\n     @Override\n     protected void startContext() throws Exception\n     {\n-        ServletContainerInitializerCaller sciBean = getBean(ServletContainerInitializerCaller.class);\n-        if (sciBean != null)\n-            sciBean.start();\n+        for (ServletContainerInitializerCaller  sci : getBeans(ServletContainerInitializerCaller.class))\n+        {\n+            if (sci.isStopped())\n+            {\n+                sci.start();\n+                if (isAuto(sci))\n+                    manage(sci);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzgxMTgy", "url": "https://github.com/eclipse/jetty.project/pull/5177#pullrequestreview-471381182", "createdAt": "2020-08-20T08:36:50Z", "commit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozNjo1MFrOHD0bLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozNjo1MFrOHD0bLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NjcwMw==", "bodyText": "This utility class avoids the need to create custom SCI callers.   The name is not perfect, but this name space is a bit messed up.  It does read well when used.", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473766703", "createdAt": "2020-08-20T08:36:50Z", "author": {"login": "gregw"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java", "diffHunk": "@@ -1493,4 +1501,43 @@ public void destroy(Object o)\n             decorator.destroy(o);\n         }\n     }\n+\n+    /**\n+     * A utility class to hold a {@link ServletContainerInitializer} and implement the\n+     * {@link ServletContainerInitializerCaller} interface so that the SCI is correctly\n+     * started if an instance of this class is added as a bean to a {@link ServletContextHandler}.\n+     */\n+    public static class Initializer extends AbstractLifeCycle implements ServletContainerInitializerCaller\n+    {\n+        private final ServletContextHandler _context;\n+        private final ServletContainerInitializer _sci;\n+        private final Set<Class<?>> _classes;\n+\n+        public Initializer(ServletContextHandler context, ServletContainerInitializer sci, Set<Class<?>> classes)\n+        {\n+            _context = context;\n+            _sci = sci;\n+            _classes = classes;\n+        }\n+\n+        public Initializer(ServletContextHandler context, ServletContainerInitializer sci)\n+        {\n+            this(context, sci, Collections.emptySet());\n+        }\n+\n+        @Override\n+        protected void doStart() throws Exception\n+        {\n+            boolean oldExtended = _context.getServletContext().isExtendedListenerTypes();\n+            try\n+            {\n+                _context.getServletContext().setExtendedListenerTypes(true);\n+                _sci.onStartup(_classes, _context.getServletContext());\n+            }\n+            finally\n+            {\n+                _context.getServletContext().setExtendedListenerTypes(oldExtended);\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzgxMzQ3", "url": "https://github.com/eclipse/jetty.project/pull/5177#pullrequestreview-471381347", "createdAt": "2020-08-20T08:37:04Z", "commit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozNzowNFrOHD0b2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozNzowNFrOHD0b2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2Njg3Mg==", "bodyText": "This test mode is now supported", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473766872", "createdAt": "2020-08-20T08:37:04Z", "author": {"login": "gregw"}, "path": "tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/CDITests.java", "diffHunk": "@@ -61,7 +61,7 @@\n             Arguments.of(\"weld\", \"cdi2\", null),\n             Arguments.of(\"weld\", \"cdi-spi\", null), // Weld >= 3.1.2\n             Arguments.of(\"weld\", \"decorate\", null), // Weld >= 3.1.2\n-            // TODO Arguments.of(\"weld\", \"cdi-decorate\", null), // Weld >= 3.1.3\n+            Arguments.of(\"weld\", \"cdi-decorate\", null), // Weld >= 3.1.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzgxODEx", "url": "https://github.com/eclipse/jetty.project/pull/5177#pullrequestreview-471381811", "createdAt": "2020-08-20T08:37:42Z", "commit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozNzo0MlrOHD0eEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozNzo0MlrOHD0eEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NzQ0MA==", "bodyText": "Added this unit test to test similar features as the webapp, but from embedded", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473767440", "createdAt": "2020-08-20T08:37:42Z", "author": {"login": "gregw"}, "path": "tests/test-webapps/test-weld-cdi-webapp/src/test/java/org/eclipse/jetty/cdi/weld/EmbeddedWeldTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.cdi.weld;\n+\n+import java.io.IOException;\n+import java.util.EnumSet;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.inject.Inject;\n+import javax.servlet.DispatcherType;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jetty.annotations.AnnotationConfiguration;\n+import org.eclipse.jetty.cdi.CdiServletContainerInitializer;\n+import org.eclipse.jetty.server.LocalConnector;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ListenerHolder;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.test.GreetingsServlet;\n+import org.eclipse.jetty.test.MyContextListener;\n+import org.eclipse.jetty.test.ServerIDFilter;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.JettyWebXmlConfiguration;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class EmbeddedWeldTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzgyNjA2", "url": "https://github.com/eclipse/jetty.project/pull/5177#pullrequestreview-471382606", "createdAt": "2020-08-20T08:38:46Z", "commit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozODo0NlrOHD0hqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozODo0NlrOHD0hqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2ODM2MA==", "bodyText": "I don't think all these modes are recommended, but all variations are probably used somewhere so best to test to know if we break any usages.", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473768360", "createdAt": "2020-08-20T08:38:46Z", "author": {"login": "gregw"}, "path": "tests/test-webapps/test-weld-cdi-webapp/src/test/java/org/eclipse/jetty/cdi/weld/EmbeddedWeldTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.cdi.weld;\n+\n+import java.io.IOException;\n+import java.util.EnumSet;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.inject.Inject;\n+import javax.servlet.DispatcherType;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jetty.annotations.AnnotationConfiguration;\n+import org.eclipse.jetty.cdi.CdiServletContainerInitializer;\n+import org.eclipse.jetty.server.LocalConnector;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ListenerHolder;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.test.GreetingsServlet;\n+import org.eclipse.jetty.test.MyContextListener;\n+import org.eclipse.jetty.test.ServerIDFilter;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.JettyWebXmlConfiguration;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class EmbeddedWeldTest\n+{\n+    public static Server createServerWithServletContext(int mode)\n+    {\n+        Server server = new Server();\n+        server.addConnector(new LocalConnector(server));\n+        ServletContextHandler context = new ServletContextHandler();\n+        context.setContextPath(\"/\");\n+        server.setHandler(context);\n+\n+        // Setup context\n+        context.addServlet(GreetingsServlet.class, \"/\");\n+        context.addServlet(BeanServlet.class, \"/beans\");\n+        context.addFilter(ServerIDFilter.class, \"/*\", EnumSet.of(DispatcherType.REQUEST));\n+\n+        // Setup Jetty weld integration\n+        switch (mode)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzgzMTA2", "url": "https://github.com/eclipse/jetty.project/pull/5177#pullrequestreview-471383106", "createdAt": "2020-08-20T08:39:27Z", "commit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozOToyN1rOHD0j3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODozOToyN1rOHD0j3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2ODkyNw==", "bodyText": "We can add a CdiConfiguration to do this in 10.", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473768927", "createdAt": "2020-08-20T08:39:27Z", "author": {"login": "gregw"}, "path": "tests/test-webapps/test-weld-cdi-webapp/src/test/java/org/eclipse/jetty/cdi/weld/EmbeddedWeldTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.cdi.weld;\n+\n+import java.io.IOException;\n+import java.util.EnumSet;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.inject.Inject;\n+import javax.servlet.DispatcherType;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jetty.annotations.AnnotationConfiguration;\n+import org.eclipse.jetty.cdi.CdiServletContainerInitializer;\n+import org.eclipse.jetty.server.LocalConnector;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ListenerHolder;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.test.GreetingsServlet;\n+import org.eclipse.jetty.test.MyContextListener;\n+import org.eclipse.jetty.test.ServerIDFilter;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.JettyWebXmlConfiguration;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class EmbeddedWeldTest\n+{\n+    public static Server createServerWithServletContext(int mode)\n+    {\n+        Server server = new Server();\n+        server.addConnector(new LocalConnector(server));\n+        ServletContextHandler context = new ServletContextHandler();\n+        context.setContextPath(\"/\");\n+        server.setHandler(context);\n+\n+        // Setup context\n+        context.addServlet(GreetingsServlet.class, \"/\");\n+        context.addServlet(BeanServlet.class, \"/beans\");\n+        context.addFilter(ServerIDFilter.class, \"/*\", EnumSet.of(DispatcherType.REQUEST));\n+\n+        // Setup Jetty weld integration\n+        switch (mode)\n+        {\n+            case 0: // Do nothing, let weld work it out.\n+                // Expect:INFO: WELD-ENV-001201: Jetty 7.2+ detected, CDI injection will be available in Servlets and Filters. Injection into Listeners is not supported.\n+                context.getServletHandler().addListener(new ListenerHolder(org.jboss.weld.environment.servlet.Listener.class));\n+                break;\n+\n+            case 1:  // Deprecated use of Decorating Listener\n+                // Expect:INFO: WELD-ENV-001212: Jetty CdiDecoratingListener support detected, CDI injection will be available in Listeners, Servlets and Filters.\n+                context.addEventListener(new org.eclipse.jetty.webapp.DecoratingListener(context));\n+                context.getServletHandler().addListener(new ListenerHolder(org.jboss.weld.environment.servlet.Listener.class));\n+                break;\n+\n+            case 2: // CDI Decorating Listener\n+                // Expect:INFO: WELD-ENV-001212: Jetty CdiDecoratingListener support detected, CDI injection will be available in Listeners, Servlets and Filters.\n+                context.addEventListener(new org.eclipse.jetty.cdi.CdiDecoratingListener(context));\n+                context.addEventListener(new org.jboss.weld.environment.servlet.Listener());\n+                break;\n+\n+            case 3: // CDI SPI\n+                // Expect:INFO: WELD-ENV-001213: Jetty CDI SPI support detected, CDI injection will be available in Listeners, Servlets and Filters.\n+                context.getObjectFactory().addDecorator(new org.eclipse.jetty.cdi.CdiSpiDecorator(context));\n+                context.getServletHandler().addListener(new ListenerHolder(org.jboss.weld.environment.servlet.Listener.class));\n+                break;\n+\n+            case 4: // SCI invocation with no mode selected\n+                // Expect:INFO: WELD-ENV-001213: Jetty CDI SPI support detected, CDI injection will be available in Listeners, Servlets and Filters.\n+                context.addBean(new ServletContextHandler.Initializer(context, new org.eclipse.jetty.cdi.CdiServletContainerInitializer()));\n+                context.addEventListener(new org.jboss.weld.environment.servlet.Listener());\n+                // context.getServletHandler().addListener(new ListenerHolder(org.jboss.weld.environment.servlet.Listener.class));\n+                break;\n+\n+            case 5: // SCI invocation with mode selected\n+                // Expect:INFO: WELD-ENV-001212: Jetty CdiDecoratingListener support detected, CDI injection will be available in Listeners, Servlets and Filters\n+                context.setInitParameter(org.eclipse.jetty.cdi.CdiServletContainerInitializer.CDI_INTEGRATION_ATTRIBUTE, org.eclipse.jetty.cdi.CdiDecoratingListener.MODE);\n+                context.addBean(new ServletContextHandler.Initializer(context, new org.eclipse.jetty.cdi.CdiServletContainerInitializer()));\n+                context.getServletHandler().addListener(new ListenerHolder(org.jboss.weld.environment.servlet.Listener.class));\n+                break;\n+\n+            case 6: // direct SCI invocation of jetty and Weld SCI\n+                // Expect:INFO: WELD-ENV-001213: Jetty CDI SPI support detected, CDI injection will be available in Listeners, Servlets and Filters.\n+                context.addBean(new ServletContextHandler.Initializer(context, new org.jboss.weld.environment.servlet.EnhancedListener()));\n+                context.addBean(new ServletContextHandler.Initializer(context, new org.eclipse.jetty.cdi.CdiServletContainerInitializer()));\n+\n+                // Can decorate MyContextListener in this setup\n+                context.getServletHandler().addListener(new ListenerHolder(MyContextListener.class));\n+                break;\n+\n+            case 7: // direct SCI invocation of jetty and Weld SCI with mode selected\n+                // Expect:INFO: WELD-ENV-001212: Jetty CdiDecoratingListener support detected, CDI injection will be available in Listeners, Servlets and Filters\n+                context.setInitParameter(org.eclipse.jetty.cdi.CdiServletContainerInitializer.CDI_INTEGRATION_ATTRIBUTE, org.eclipse.jetty.cdi.CdiDecoratingListener.MODE);\n+                context.addBean(new ServletContextHandler.Initializer(context, new org.jboss.weld.environment.servlet.EnhancedListener()));\n+                context.addBean(new ServletContextHandler.Initializer(context, new org.eclipse.jetty.cdi.CdiServletContainerInitializer()));\n+\n+                // Can decorate MyContextListener in this setup\n+                context.getServletHandler().addListener(new ListenerHolder(MyContextListener.class));\n+                break;\n+\n+            case 8: // direct SCI invocation of jetty and Weld SCI with mode selected - check order independent\n+                // Expect:INFO: WELD-ENV-001212: Jetty CdiDecoratingListener support detected, CDI injection will be available in Listeners, Servlets and Filters\n+                context.setInitParameter(org.eclipse.jetty.cdi.CdiServletContainerInitializer.CDI_INTEGRATION_ATTRIBUTE, org.eclipse.jetty.cdi.CdiDecoratingListener.MODE);\n+                context.addBean(new ServletContextHandler.Initializer(context, new org.eclipse.jetty.cdi.CdiServletContainerInitializer()));\n+                context.addBean(new ServletContextHandler.Initializer(context, new org.jboss.weld.environment.servlet.EnhancedListener()));\n+\n+                // Can decorate MyContextListener in this setup\n+                context.getServletHandler().addListener(new ListenerHolder(MyContextListener.class));\n+                break;\n+        }\n+\n+        return server;\n+    }\n+\n+    @ParameterizedTest()\n+    @ValueSource(ints = {0, 1, 2, 3, 4, 5, 6, 7, 8})\n+    public void testServletContext(int mode) throws Exception\n+    {\n+        Server server = createServerWithServletContext(mode);\n+        server.start();\n+        LocalConnector connector = server.getBean(LocalConnector.class);\n+        String response = connector.getResponse(\"GET / HTTP/1.0\\r\\n\\r\\n\");\n+        assertThat(response, containsString(\"HTTP/1.1 200 OK\"));\n+        assertThat(response, containsString(\"Hello GreetingsServlet\"));\n+        if (mode >= 6)\n+            assertThat(response, containsString(\" from CDI-Demo-org.eclipse.jetty.test\"));\n+\n+        response = connector.getResponse(\"GET /beans HTTP/1.0\\r\\n\\r\\n\");\n+        assertThat(response, containsString(\"Beans from Weld BeanManager for \"));\n+\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testWebappContext() throws Exception\n+    {\n+        Server server = new Server(8080);\n+        server.addConnector(new LocalConnector(server));\n+        WebAppContext webapp = new WebAppContext();\n+        webapp.setContextPath(\"/\");\n+        webapp.setResourceBase(\"src/test/resources\");\n+        server.setHandler(webapp);\n+\n+        webapp.setInitParameter(org.eclipse.jetty.cdi.CdiServletContainerInitializer.CDI_INTEGRATION_ATTRIBUTE, org.eclipse.jetty.cdi.CdiDecoratingListener.MODE);\n+        webapp.addBean(new ServletContextHandler.Initializer(webapp, new org.eclipse.jetty.cdi.CdiServletContainerInitializer()));\n+        webapp.addBean(new ServletContextHandler.Initializer(webapp, new org.jboss.weld.environment.servlet.EnhancedListener()));\n+\n+        // This is ugly but needed for maven for testing in a overlaid war pom\n+        webapp.getServerClasspathPattern().add(\"-org.eclipse.jetty.test.\");\n+        webapp.getSystemClasspathPattern().add(\"org.eclipse.jetty.test.\");\n+\n+        webapp.addServlet(GreetingsServlet.class, \"/\");\n+        webapp.addFilter(ServerIDFilter.class, \"/*\", EnumSet.of(DispatcherType.REQUEST));\n+        webapp.getServletHandler().addListener(new ListenerHolder(MyContextListener.class));\n+\n+        server.start();\n+\n+        LocalConnector connector = server.getBean(LocalConnector.class);\n+        String response = connector.getResponse(\"GET / HTTP/1.0\\r\\n\\r\\n\");\n+        System.err.println(response);\n+        assertThat(response, containsString(\"HTTP/1.1 200 OK\"));\n+        assertThat(response, containsString(\"Hello GreetingsServlet\"));\n+        assertThat(response, containsString(\" from CDI-Demo-org.eclipse.jetty.test\"));\n+        server.stop();\n+\n+    }\n+\n+    @Test\n+    public void testWebappContextDiscovered() throws Exception\n+    {\n+        Server server = new Server(8080);\n+        server.addConnector(new LocalConnector(server));\n+        WebAppContext webapp = new WebAppContext();\n+        webapp.setContextPath(\"/\");\n+        webapp.setResourceBase(\"src/test/resources\");\n+        server.setHandler(webapp);\n+\n+        // Need the AnnotationConfiguration to detect SCIs\n+        Configuration.ClassList.setServerDefault(server).addBefore(JettyWebXmlConfiguration.class.getName(),\n+            AnnotationConfiguration.class.getName());\n+\n+        // Need to expose our SCI.  This is ugly could be made better in jetty-10 with a CdiConfiguration\n+        webapp.getServerClasspathPattern().add(\"-\" + CdiServletContainerInitializer.class.getName());\n+        webapp.getSystemClasspathPattern().add(CdiServletContainerInitializer.class.getName());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a"}, "originalPosition": 208}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed0b344a1cfd99b8092fcb99cc394946181be28c", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/ed0b344a1cfd99b8092fcb99cc394946181be28c", "committedDate": "2020-08-24T10:47:58Z", "message": "Issue #5162 CDI embedded integration improvements\n\nClean up CDI integration and documentation to better support embedded usage.\n + moved EmbeddedWeldTest to jetty-embedded"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0f16c64aa4b8e4538b86832cfa2315ef7e712b4", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/b0f16c64aa4b8e4538b86832cfa2315ef7e712b4", "committedDate": "2020-08-24T11:52:30Z", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5162-Improve-Decorating-Listener-Examples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2fd5af3eddf4e0a6bdbd3169e6deb7590456e82", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/b2fd5af3eddf4e0a6bdbd3169e6deb7590456e82", "committedDate": "2020-08-24T14:36:00Z", "message": "fix javadoc\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNjAxNTMy", "url": "https://github.com/eclipse/jetty.project/pull/5177#pullrequestreview-473601532", "createdAt": "2020-08-24T15:15:52Z", "commit": {"oid": "b2fd5af3eddf4e0a6bdbd3169e6deb7590456e82"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4d7712863b366208c0df6c2c7e5762ab6fe132d", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/e4d7712863b366208c0df6c2c7e5762ab6fe132d", "committedDate": "2020-08-24T15:35:12Z", "message": "Issue #5162 CDI embedded integration improvements\n\nventilated text"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1052180245bb95dfabee558c6101ebd08dd6f4b7", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/1052180245bb95dfabee558c6101ebd08dd6f4b7", "committedDate": "2020-08-24T15:36:25Z", "message": "Merge branch 'jetty-9.4.x-5162-Improve-Decorating-Listener-Examples' of github.com:eclipse/jetty.project into jetty-9.4.x-5162-Improve-Decorating-Listener-Examples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68cf3f55c1a7ea4fa766f05d3c383f69bee43281", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/68cf3f55c1a7ea4fa766f05d3c383f69bee43281", "committedDate": "2020-08-24T16:43:28Z", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5162-Improve-Decorating-Listener-Examples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f923d9b8b337d68243fb61ee719916faff5efcb8", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/f923d9b8b337d68243fb61ee719916faff5efcb8", "committedDate": "2020-08-24T17:47:29Z", "message": "fix test pom\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3c4bd8c35f0e13fce939b429d260ec97400bdad", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/d3c4bd8c35f0e13fce939b429d260ec97400bdad", "committedDate": "2020-08-25T10:37:31Z", "message": "Fixed javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7784be49004f6c99e08bbd2a920b349c57972980", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/7784be49004f6c99e08bbd2a920b349c57972980", "committedDate": "2020-08-25T10:44:56Z", "message": "Merge branch 'jetty-9.4.x-5162-Improve-Decorating-Listener-Examples' of github.com:eclipse/jetty.project into jetty-9.4.x-5162-Improve-Decorating-Listener-Examples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "400838503972b3aa5accc7b9f1f9ab95dee0c658", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/400838503972b3aa5accc7b9f1f9ab95dee0c658", "committedDate": "2020-08-25T12:12:46Z", "message": "Fixed javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9e1fa50971f2a2b1f4b954a06cc3de026dc27d1", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/c9e1fa50971f2a2b1f4b954a06cc3de026dc27d1", "committedDate": "2020-08-25T13:05:43Z", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5162-Improve-Decorating-Listener-Examples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a6f48ce74c45f15348bff075f1e5342f9d5f535", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/9a6f48ce74c45f15348bff075f1e5342f9d5f535", "committedDate": "2020-08-25T13:26:39Z", "message": "Issue #5162 CDI embedded integration improvements\n\nMoved tests to jetty-cdi to avoid consequences to other tests in embedded"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MjkwMTE3", "url": "https://github.com/eclipse/jetty.project/pull/5177#pullrequestreview-475290117", "createdAt": "2020-08-26T08:58:11Z", "commit": {"oid": "9a6f48ce74c45f15348bff075f1e5342f9d5f535"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODo1ODoxMVrOHHCoRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTowNjoyM1rOHHC7ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0NTE1Ng==", "bodyText": "Again with the extraneous changes!", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r477145156", "createdAt": "2020-08-26T08:58:11Z", "author": {"login": "janbartel"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java", "diffHunk": "@@ -749,13 +757,13 @@ public static ServletContextHandler getServletContextHandler(ServletContext cont\n \n     public static class JspPropertyGroup implements JspPropertyGroupDescriptor\n     {\n-        private List<String> _urlPatterns = new ArrayList<>();\n+        private final List<String> _urlPatterns = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a6f48ce74c45f15348bff075f1e5342f9d5f535"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0NjA5OA==", "bodyText": "Why is the comment removed?", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r477146098", "createdAt": "2020-08-26T08:59:42Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/component/ContainerLifeCycle.java", "diffHunk": "@@ -915,11 +915,6 @@ public void updateBeans(Object[] oldBeans, final Object[] newBeans)\n         }\n     }\n \n-    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a6f48ce74c45f15348bff075f1e5342f9d5f535"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1MDA3NQ==", "bodyText": "I don't see any refactoring of the existing ContainerInitializer and ServletContainerInitializersStarter classes used by webapps - I would think that we could extend this ServletContextHandler.Initializer class, or have the other classes extend it. I don't like having 2 completely separate mechanisms.", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r477150075", "createdAt": "2020-08-26T09:06:23Z", "author": {"login": "janbartel"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java", "diffHunk": "@@ -1493,4 +1501,43 @@ public void destroy(Object o)\n             decorator.destroy(o);\n         }\n     }\n+\n+    /**\n+     * A utility class to hold a {@link ServletContainerInitializer} and implement the\n+     * {@link ServletContainerInitializerCaller} interface so that the SCI is correctly\n+     * started if an instance of this class is added as a bean to a {@link ServletContextHandler}.\n+     */\n+    public static class Initializer extends AbstractLifeCycle implements ServletContainerInitializerCaller", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a6f48ce74c45f15348bff075f1e5342f9d5f535"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16bae47a73b4916928ade19fd00612d954150b50", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/16bae47a73b4916928ade19fd00612d954150b50", "committedDate": "2020-08-26T12:37:45Z", "message": "trailing new line\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNjU0NjY5", "url": "https://github.com/eclipse/jetty.project/pull/5177#pullrequestreview-480654669", "createdAt": "2020-09-02T09:42:55Z", "commit": {"oid": "16bae47a73b4916928ade19fd00612d954150b50"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTo0Mjo1NVrOHLnV5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTo0NToxOVrOHLnbkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0MDk2NA==", "bodyText": "Not at all fond of the name isKnownDecoratable(). How about instead you remove isKnownDecoratable() and add a field list of _undecoratables, a setter for them, and in isDecoratable() you just check the list? This might also be a good idea in case CDI adds some other classes that can't be decorated?", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r481940964", "createdAt": "2020-09-02T09:42:55Z", "author": {"login": "janbartel"}, "path": "jetty-cdi/src/main/java/org/eclipse/jetty/cdi/CdiSpiDecorator.java", "diffHunk": "@@ -92,6 +95,35 @@ public CdiSpiDecorator(ServletContextHandler context) throws UnsupportedOperatio\n         }\n     }\n \n+    /**\n+     * Test if a class can be decorated.\n+     * The default implementation calls {@link #isKnownUndecoratable(String) }\n+     * on the class and all it's super classes.\n+     * @param clazz The class to check\n+     * @return True if the class and all it's super classes can be decorated\n+     */\n+    protected boolean isDecoratable(Class<?> clazz)\n+    {\n+        if (Object.class == clazz)\n+            return true;\n+        if (isKnownUndecoratable(clazz.getName()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16bae47a73b4916928ade19fd00612d954150b50"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0MjQxNg==", "bodyText": "Need a link here?", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r481942416", "createdAt": "2020-09-02T09:45:19Z", "author": {"login": "janbartel"}, "path": "jetty-documentation/src/main/asciidoc/development/frameworks/cdi.adoc", "diffHunk": "@@ -0,0 +1,119 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ========================================================================\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+[[framework-cdi]]\n+=== CDI\n+\n+Contexts and Dependency Injection for Java EE (http://www.cdi-spec.org/[CDI]) is a standard implemented by frameworks such as http://seamframework.org/Weld[Weld] and https://openwebbeans.apache.org/[Apache OpenWebBeans].\n+This is a common way to assemble and configure webapplications by a process often referred to as 'decoration'.\n+\n+Jetty integration of CDI frameworks allows CDI to be used to inject the Filters, Servlets and Listeners created within a Servlet Context.\n+There are two approaches to integration:\n+\n+ * CDI implementation can integrate with Jetty.\n+   This requires the CDI implementation to have Jetty specific code.\n+   Since Jetty-9.4.20 a loosely bound mechanism has been available for CDI implementations to extends the Jetty `DecoratedObjectFactory` without hard API dependencies.\n+   Prior to that, CDI implementations directly called jetty APIs that need to be explicitly exposed to the webapp.\n+\n+ * Alternately, Jetty can integrate with CDI implementations by using standard CDI SPIs.\n+\n+==== Jetty CDI Modules\n+\n+The Jetty distribution come with several CDI modules.\n+These modules do not provide CDI, but instead enable one of more integration mechanisms.\n+\n+===== Jetty `cdi` Module\n+The `cdi` module supports either two modes of CDI integration which can be selected either by the \"org.eclipse.jetty.cdi\" context init parameter or the \"org.eclipse.jetty.cdi\" server attribute (which is initialised from the \"jetty.cdi.mode\" start property).\n+Supported modes are:\n+\n+ * `CdiSpiDecorator` Jetty will call the CDI SPI within the webapp to decorate objects (default).\n+\n+ * `CdiDecoratingLister` The webapp may register a decorator on the context attribute \"org.eclipse.jetty.cdi.decorator\".\n+-------------------------\n+cd $JETTY_BASE\n+java -jar $JETTY_HOME/start.jar --add-to-start=cdi\n+-------------------------\n+\n+===== Jetty `cdi-decorate` Module\n+This module depends on the `cdi` module and sets the default mode to `CdiDecoratingListener`.\n+This is the preferred mode for Weld integration.\n+-------------------------\n+cd $JETTY_BASE\n+java -jar $JETTY_HOME/start.jar --add-to-start=cdi-decorate\n+-------------------------\n+\n+===== Jetty `cdi-spi` Module\n+This module depends on the `cdi` module and sets the default mode to `CdiSpiDecorator`.\n+This is the preferred mode for Open Web Beans integration.\n+-------------------------\n+cd $JETTY_BASE\n+java -jar $JETTY_HOME/start.jar --add-to-start=cdi-spi\n+-------------------------\n+\n+===== Jetty `cdi2` Module\n+This module supports the *deprecated* technique of exposing private Jetty decorate APIs to the CDI implementation in the webapp.\n+\n+-------------------------\n+cd $JETTY_BASE\n+java -jar $JETTY_HOME/start.jar --add-to-start=cdi2\n+-------------------------\n+\n+This module is equivalent to directly modifying the class path configuration with a `jetty-web.xml` like:\n+\n+[source.XML, xml]\n+-------------------------------------------------------------\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE Configure PUBLIC \"-//Jetty//Configure//EN\" \"http://www.eclipse.org/jetty/configure.dtd\">\n+<Configure class=\"org.eclipse.jetty.webapp.WebAppContext\">\n+   <Call name=\"prependServerClass\">\n+      <Arg>-org.eclipse.jetty.util.Decorator</Arg>\n+   </Call>\n+   <Call name=\"prependServerClass\">\n+      <Arg>-org.eclipse.jetty.util.DecoratedObjectFactory</Arg>\n+   </Call>\n+   <Call name=\"prependServerClass\">\n+      <Arg>-org.eclipse.jetty.server.handler.ContextHandler.</Arg>\n+   </Call>\n+   <Call name=\"prependServerClass\">\n+      <Arg>-org.eclipse.jetty.server.handler.ContextHandler</Arg>\n+   </Call>\n+   <Call name=\"prependServerClass\">\n+      <Arg>-org.eclipse.jetty.servlet.ServletContextHandler</Arg>\n+   </Call>\n+</Configure>\n+-------------------------------------------------------------\n+\n+____\n+[TIP]\n+The `cdi2` module or directly modifying the web application classpath will not work for Jetty 10.0.0 and later.\n+It should only be used for versions prior to Jetty 9.4.20 and/or Weld 3.1.2.Final\n+____\n+\n+\n+[[cdi-embedded]]\n+==== Embedded Jetty with CDI\n+When starting embedded Jetty programmatically from the `main` method, to use CDI it may be\n+necessary:\n+\n+ * enable a Jetty CDI integration mode\n+\n+ * and/or enable a CDI frame integration.\n+\n+However, depending on the exact configuration of the embedded server, either or both steps may not be required as Servlet Container Initializers may be discovered.\n+\n+The details for embedding CDI will be explain in the Embedded Jetty with Weld section, but can be adapted to other CDI frameworks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16bae47a73b4916928ade19fd00612d954150b50"}, "originalPosition": 119}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b665a6ed05d607f8f928f8084e5f4c613f0fe864", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/b665a6ed05d607f8f928f8084e5f4c613f0fe864", "committedDate": "2020-09-02T10:08:26Z", "message": "updates from review\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNjc1OTQ0", "url": "https://github.com/eclipse/jetty.project/pull/5177#pullrequestreview-480675944", "createdAt": "2020-09-02T10:12:54Z", "commit": {"oid": "b665a6ed05d607f8f928f8084e5f4c613f0fe864"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDoxMjo1NFrOHLoW1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDoxMjo1NFrOHLoW1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk1NzU4OA==", "bodyText": "I meant \"setUndecoratableClasses\". Undecorated makes it sound like they haven't been decorated yet.", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r481957588", "createdAt": "2020-09-02T10:12:54Z", "author": {"login": "janbartel"}, "path": "jetty-cdi/src/main/java/org/eclipse/jetty/cdi/CdiSpiDecorator.java", "diffHunk": "@@ -92,6 +100,54 @@ public CdiSpiDecorator(ServletContextHandler context) throws UnsupportedOperatio\n         }\n     }\n \n+    /**\n+     * Test if a class can be decorated.\n+     * The default implementation checks the set from  {@link #getUndecoratedClasses()}\n+     * on the class and all it's super classes.\n+     * @param clazz The class to check\n+     * @return True if the class and all it's super classes can be decorated\n+     */\n+    protected boolean isDecoratable(Class<?> clazz)\n+    {\n+        if (Object.class == clazz)\n+            return true;\n+        if (getUndecoratedClasses().contains(clazz.getName()))\n+            return false;\n+        return isDecoratable(clazz.getSuperclass());\n+    }\n+\n+    /**\n+     * Get the set of classes that will not be decorated. The default set includes the listener from Weld that will itself\n+     * setup decoration.\n+     * @return The modifiable set of class names that will not be decorated (ie {@link #isDecoratable(Class)} will return false.\n+     * @see #isDecoratable(Class)\n+     */\n+    public Set<String> getUndecoratedClasses()\n+    {\n+        return _undecorated;\n+    }\n+\n+    /**\n+     * @param undecorated The set of class names that will not be decorated.\n+     * @see #isDecoratable(Class)\n+     */\n+    public void setUndecoratedClasses(Set<String> undecorated)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b665a6ed05d607f8f928f8084e5f4c613f0fe864"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bd8e1c7cae83f18386303428b12c29966521a8a", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/2bd8e1c7cae83f18386303428b12c29966521a8a", "committedDate": "2020-09-02T11:13:46Z", "message": "Feedback from review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNzIwMDU5", "url": "https://github.com/eclipse/jetty.project/pull/5177#pullrequestreview-480720059", "createdAt": "2020-09-02T11:18:37Z", "commit": {"oid": "2bd8e1c7cae83f18386303428b12c29966521a8a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 299, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}