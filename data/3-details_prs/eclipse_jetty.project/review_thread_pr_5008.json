{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMDUyMzg2", "number": 5008, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTozODozMFrOEKebMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo0MjozNFrOEKef5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDE5Njk5OnYy", "diffSide": "RIGHT", "path": "jetty-io/src/main/java/org/eclipse/jetty/io/Connection.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTozODozMFrOGriSBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNzozODoyNVrOGs1lgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwMzYyMA==", "bodyText": "The contract changes you're proposing forces a ByteBuffer allocation.\nCouldn't that be avoided by specifying that the buffer returned by onUpgradeFrom and passed to onUpgradeTo must be fully consumed and no reference to it should be kept?\nI would phrase that as:\nFor onUpgradeTo: Implementations MUST consume all bytes of the buffer and MUST NOT keep a reference to the buffer.\nFor onUpgradeFrom: The buffer WILL only be used for the duration of the Endpoint.upgrade call and MAY be disposed of afterwards.", "url": "https://github.com/eclipse/jetty.project/pull/5008#discussion_r448303620", "createdAt": "2020-07-01T11:38:30Z", "author": {"login": "lorban"}, "path": "jetty-io/src/main/java/org/eclipse/jetty/io/Connection.java", "diffHunk": "@@ -96,31 +96,49 @@\n \n     long getCreatedTimeStamp();\n \n+    /**\n+     * <p>{@link Connection} implementations implement this interface when they\n+     * can upgrade from the protocol they speak (for example HTTP/1.1)\n+     * to a different protocol (e.g. HTTP/2).</p>\n+     *\n+     * @see EndPoint#upgrade(Connection)\n+     * @see UpgradeTo\n+     */\n     interface UpgradeFrom\n     {\n         /**\n-         * <p>Takes the input buffer from the connection on upgrade.</p>\n-         * <p>This method is used to take any unconsumed input from\n-         * a connection during an upgrade.</p>\n+         * <p>Invoked during an {@link EndPoint#upgrade(Connection) upgrade}\n+         * to produce a buffer containing bytes that have not been consumed by\n+         * this connection, and that must be consumed by the upgrade-to\n+         * connection.</p>\n          *\n-         * @return A buffer of unconsumed input. The caller must return the buffer\n-         * to the bufferpool when consumed and this connection must not.\n+         * @return a buffer of unconsumed bytes to pass to the upgrade-to connection.\n+         * The buffer does not belong to any pool and should be discarded after\n+         * having consumed its bytes.\n+         * The returned buffer may be null if there are no unconsumed bytes.\n          */\n         ByteBuffer onUpgradeFrom();\n     }\n \n+    /**\n+     * <p>{@link Connection} implementations implement this interface when they\n+     * can be upgraded to the protocol they speak (e.g. HTTP/2)\n+     * from a different protocol (e.g. HTTP/1.1).</p>\n+     */\n     interface UpgradeTo\n     {\n         /**\n-         * <p>Callback method invoked when this connection is upgraded.</p>\n-         * <p>This must be called before {@link #onOpen()}.</p>\n+         * <p>Invoked during an {@link EndPoint#upgrade(Connection) upgrade}\n+         * to receive a buffer containing bytes that have not been consumed by\n+         * the upgrade-from connection, and that must be consumed by this\n+         * connection.</p>\n          *\n-         * @param prefilled An optional buffer that can contain prefilled data. Typically this\n-         * results from an upgrade of one protocol to the other where the old connection has buffered\n-         * data destined for the new connection.  The new connection must take ownership of the buffer\n-         * and is responsible for returning it to the buffer pool\n+         * @param buffer a non-null buffer of unconsumed bytes received from\n+         * the upgrade-from connection.\n+         * The buffer does not belong to any pool and should be discarded after\n+         * having consumed its bytes.\n          */\n-        void onUpgradeTo(ByteBuffer prefilled);\n+        void onUpgradeTo(ByteBuffer buffer);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "359252144d7cfc51b4e08420472ca4831847ec70"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY2ODQ4Mg==", "bodyText": "@lorban and I discussed this and the problem with the approach he proposes is that onUpgradeFrom() returns a buffer, but it won't know when it's free to release it back to the pool.", "url": "https://github.com/eclipse/jetty.project/pull/5008#discussion_r449668482", "createdAt": "2020-07-03T17:38:25Z", "author": {"login": "sbordet"}, "path": "jetty-io/src/main/java/org/eclipse/jetty/io/Connection.java", "diffHunk": "@@ -96,31 +96,49 @@\n \n     long getCreatedTimeStamp();\n \n+    /**\n+     * <p>{@link Connection} implementations implement this interface when they\n+     * can upgrade from the protocol they speak (for example HTTP/1.1)\n+     * to a different protocol (e.g. HTTP/2).</p>\n+     *\n+     * @see EndPoint#upgrade(Connection)\n+     * @see UpgradeTo\n+     */\n     interface UpgradeFrom\n     {\n         /**\n-         * <p>Takes the input buffer from the connection on upgrade.</p>\n-         * <p>This method is used to take any unconsumed input from\n-         * a connection during an upgrade.</p>\n+         * <p>Invoked during an {@link EndPoint#upgrade(Connection) upgrade}\n+         * to produce a buffer containing bytes that have not been consumed by\n+         * this connection, and that must be consumed by the upgrade-to\n+         * connection.</p>\n          *\n-         * @return A buffer of unconsumed input. The caller must return the buffer\n-         * to the bufferpool when consumed and this connection must not.\n+         * @return a buffer of unconsumed bytes to pass to the upgrade-to connection.\n+         * The buffer does not belong to any pool and should be discarded after\n+         * having consumed its bytes.\n+         * The returned buffer may be null if there are no unconsumed bytes.\n          */\n         ByteBuffer onUpgradeFrom();\n     }\n \n+    /**\n+     * <p>{@link Connection} implementations implement this interface when they\n+     * can be upgraded to the protocol they speak (e.g. HTTP/2)\n+     * from a different protocol (e.g. HTTP/1.1).</p>\n+     */\n     interface UpgradeTo\n     {\n         /**\n-         * <p>Callback method invoked when this connection is upgraded.</p>\n-         * <p>This must be called before {@link #onOpen()}.</p>\n+         * <p>Invoked during an {@link EndPoint#upgrade(Connection) upgrade}\n+         * to receive a buffer containing bytes that have not been consumed by\n+         * the upgrade-from connection, and that must be consumed by this\n+         * connection.</p>\n          *\n-         * @param prefilled An optional buffer that can contain prefilled data. Typically this\n-         * results from an upgrade of one protocol to the other where the old connection has buffered\n-         * data destined for the new connection.  The new connection must take ownership of the buffer\n-         * and is responsible for returning it to the buffer pool\n+         * @param buffer a non-null buffer of unconsumed bytes received from\n+         * the upgrade-from connection.\n+         * The buffer does not belong to any pool and should be discarded after\n+         * having consumed its bytes.\n          */\n-        void onUpgradeTo(ByteBuffer prefilled);\n+        void onUpgradeTo(ByteBuffer buffer);\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwMzYyMA=="}, "originalCommit": {"oid": "359252144d7cfc51b4e08420472ca4831847ec70"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDIwOTAzOnYy", "diffSide": "RIGHT", "path": "jetty-io/src/main/java/org/eclipse/jetty/io/EndPoint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo0MjozNFrOGriZhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo0MjozNFrOGriZhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwNTU0MA==", "bodyText": "Shouldn't we also specify what happens when the current connection is not an instance of UpgradeFrom and/or the new connection is not an instance of UpgradeTo?\nAlso, we could specify what happens when onUpgradeTo does not consume all the bytes of the buffer, like throwing an exception, or discarding the bytes with a warning.", "url": "https://github.com/eclipse/jetty.project/pull/5008#discussion_r448305540", "createdAt": "2020-07-01T11:42:34Z", "author": {"login": "lorban"}, "path": "jetty-io/src/main/java/org/eclipse/jetty/io/EndPoint.java", "diffHunk": "@@ -266,13 +266,15 @@\n     boolean isOptimizedForDirectBuffers();\n \n     /**\n-     * Upgrade connections.\n-     * Close the old connection, update the endpoint and open the new connection.\n-     * If the oldConnection is an instance of {@link Connection.UpgradeFrom} then\n-     * a prefilled buffer is requested and passed to the newConnection if it is an instance\n-     * of {@link Connection.UpgradeTo}\n+     * <p>Upgrades this EndPoint from the current connection to the given new connection.</p>\n+     * <p>Closes the current connection, links this EndPoint to the new connection and\n+     * then opens the new connection.</p>\n+     * <p>If the current connection is an instance of {@link Connection.UpgradeFrom} then\n+     * a buffer of unconsumed bytes is requested; if there are unconsumed bytes, and if\n+     * the new connection is an instance of {@link Connection.UpgradeTo}, the unconsumed\n+     * buffer is passed to the new connection.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "359252144d7cfc51b4e08420472ca4831847ec70"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2403, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}