{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MTcyNjA3", "number": 4601, "title": "Issue #4572 - Introduce jetty-slf4j-impl (part 1 of 3)", "bodyText": "This is part 1 (of 3) for the Replace Jetty Logging with slf4j effort.\nSee PR #4643 for part 2.\nIntroduction of slf4j implementation that performs what StdErrLog does.\nThis is the initial PR to focus the new work on.\nA followup PR will occur after this one has been accepted, and will represent the change over to slf4j-api (and using this new jetty-slf4j-impl module for use in testing and jetty-home)", "createdAt": "2020-02-24T19:24:00Z", "url": "https://github.com/eclipse/jetty.project/pull/4601", "merged": true, "mergeCommit": {"oid": "8b7e64915f9e6d7be6ca69cc1143931e1b35fde2"}, "closed": true, "closedAt": "2020-03-16T17:29:11Z", "author": {"login": "joakime"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHvEX4AFqTM2Mzk4MDA5MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOQnGwgBqjMxMzM5NjQ3OTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzOTgwMDkx", "url": "https://github.com/eclipse/jetty.project/pull/4601#pullrequestreview-363980091", "createdAt": "2020-02-25T09:20:53Z", "commit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOToyMDo1NFrOFt-OoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo1MzozOFrOFt_fxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0OTc5Mw==", "bodyText": "I don't particularly like this because it is designed to force allocation, and we can avoid it.\nThis can just be emit(JettyLogger, Level, String, Object...) as all the rest can be computed by the implementation.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383749793", "createdAt": "2020-02-25T09:20:54Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyAppender.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+public interface JettyAppender\n+{\n+    void emit(JettyLoggingEvent event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1MTY1Mw==", "bodyText": "See above, all these asEvent() are not necessary.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383751653", "createdAt": "2020-02-25T09:24:10Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLogger.java", "diffHunk": "@@ -0,0 +1,663 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+import org.slf4j.event.Level;\n+import org.slf4j.spi.LocationAwareLogger;\n+\n+public class JettyLogger implements LocationAwareLogger, Logger\n+{\n+    /**\n+     * The Level to set if you want this logger to be \"OFF\"\n+     */\n+    public static final int OFF = 999;\n+    /**\n+     * The Level to set if you want this logger to show all events from all levels.\n+     */\n+    public static final int ALL = -1;\n+\n+    private final String name;\n+    private final String condensedName;\n+    private int level;\n+    private JettyAppender appender;\n+    private boolean hideStacks = false;\n+\n+    public JettyLogger(String name)\n+    {\n+        this.name = name;\n+        this.condensedName = JettyLoggerFactory.condensePackageString(name);\n+    }\n+\n+    @Override\n+    public void debug(String msg)\n+    {\n+        if (isDebugEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.DEBUG, msg));\n+        }\n+    }\n+\n+    @Override\n+    public void debug(String format, Object arg)\n+    {\n+        if (isDebugEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.DEBUG, format, arg));\n+        }\n+    }\n+\n+    @Override\n+    public void debug(String format, Object arg1, Object arg2)\n+    {\n+        if (isDebugEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.DEBUG, format, arg1, arg2));\n+        }\n+    }\n+\n+    @Override\n+    public void debug(String format, Object... arguments)\n+    {\n+        if (isDebugEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.DEBUG, format, arguments));\n+        }\n+    }\n+\n+    @Override\n+    public void debug(String msg, Throwable throwable)\n+    {\n+        if (isDebugEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.DEBUG, msg, throwable));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled(Marker marker)\n+    {\n+        return isDebugEnabled();\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String msg)\n+    {\n+        debug(msg);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String format, Object arg)\n+    {\n+        debug(format, arg);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String format, Object arg1, Object arg2)\n+    {\n+        debug(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String format, Object... arguments)\n+    {\n+        debug(format, arguments);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String msg, Throwable t)\n+    {\n+        debug(msg, t);\n+    }\n+\n+    @Override\n+    public void error(String msg)\n+    {\n+        if (isErrorEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.ERROR, msg));\n+        }\n+    }\n+\n+    @Override\n+    public void error(String format, Object arg)\n+    {\n+        if (isErrorEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.ERROR, format, arg));\n+        }\n+    }\n+\n+    @Override\n+    public void error(String format, Object arg1, Object arg2)\n+    {\n+        if (isErrorEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.ERROR, format, arg1, arg2));\n+        }\n+    }\n+\n+    @Override\n+    public void error(String format, Object... arguments)\n+    {\n+        if (isErrorEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.ERROR, format, arguments));\n+        }\n+    }\n+\n+    @Override\n+    public void error(String msg, Throwable throwable)\n+    {\n+        if (isErrorEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.ERROR, msg, throwable));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isErrorEnabled(Marker marker)\n+    {\n+        return isErrorEnabled();\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String msg)\n+    {\n+        error(msg);\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String format, Object arg)\n+    {\n+        error(format, arg);\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String format, Object arg1, Object arg2)\n+    {\n+        error(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String format, Object... arguments)\n+    {\n+        error(format, arguments);\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String msg, Throwable t)\n+    {\n+        error(msg, t);\n+    }\n+\n+    public JettyAppender getAppender()\n+    {\n+        return appender;\n+    }\n+\n+    @Override\n+    public void log(Marker marker, String fqcn, int levelInt, String message, Object[] argArray, Throwable throwable)\n+    {\n+        if (this.level <= levelInt)\n+        {\n+            getAppender().emit(asEvent(intToLevel(levelInt), message, throwable, argArray));\n+        }\n+    }\n+\n+    public void setAppender(JettyAppender appender)\n+    {\n+        this.appender = appender;\n+    }\n+\n+    public String getCondensedName()\n+    {\n+        return condensedName;\n+    }\n+\n+    public int getLevel()\n+    {\n+        return level;\n+    }\n+\n+    public void setLevel(Level level)\n+    {\n+        Objects.requireNonNull(level, \"Level\");\n+        setLevel(level.toInt());\n+    }\n+\n+    public void setLevel(int lvlInt)\n+    {\n+        this.level = lvlInt;\n+\n+        // apply setLevel to children too.\n+        JettyLoggerFactory jettyLoggerFactory = JettyLoggerFactory.getLoggerFactory();\n+        jettyLoggerFactory.walkChildLoggers(this.getName(), (logger) -> logger.setLevel(lvlInt));\n+    }\n+\n+    @Override\n+    public String getName()\n+    {\n+        return name;\n+    }\n+\n+    @Override\n+    public void info(String msg)\n+    {\n+        if (isInfoEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.INFO, msg));\n+        }\n+    }\n+\n+    @Override\n+    public void info(String format, Object arg)\n+    {\n+        if (isInfoEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.INFO, format, arg));\n+        }\n+    }\n+\n+    @Override\n+    public void info(String format, Object arg1, Object arg2)\n+    {\n+        if (isInfoEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.INFO, format, arg1, arg2));\n+        }\n+    }\n+\n+    @Override\n+    public void info(String format, Object... arguments)\n+    {\n+        if (isInfoEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.INFO, format, arguments));\n+        }\n+    }\n+\n+    @Override\n+    public void info(String msg, Throwable throwable)\n+    {\n+        if (isInfoEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.INFO, msg, throwable));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled(Marker marker)\n+    {\n+        return isInfoEnabled();\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String msg)\n+    {\n+        info(msg);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String format, Object arg)\n+    {\n+        info(format, arg);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String format, Object arg1, Object arg2)\n+    {\n+        info(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String format, Object... arguments)\n+    {\n+        info(format, arguments);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String msg, Throwable t)\n+    {\n+        info(msg, t);\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled()\n+    {\n+        return level <= Level.DEBUG.toInt();\n+    }\n+\n+    @Override\n+    public boolean isErrorEnabled()\n+    {\n+        return level <= Level.ERROR.toInt();\n+    }\n+\n+    public boolean isHideStacks()\n+    {\n+        return hideStacks;\n+    }\n+\n+    public void setHideStacks(boolean hideStacks)\n+    {\n+        this.hideStacks = hideStacks;\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled()\n+    {\n+        return level <= Level.INFO.toInt();\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled()\n+    {\n+        return level <= Level.TRACE.toInt();\n+    }\n+\n+    @Override\n+    public boolean isWarnEnabled()\n+    {\n+        return level <= Level.WARN.toInt();\n+    }\n+\n+    @Override\n+    public void trace(String msg)\n+    {\n+        if (isTraceEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.TRACE, msg));\n+        }\n+    }\n+\n+    @Override\n+    public void trace(String format, Object arg)\n+    {\n+        if (isTraceEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.TRACE, format, arg));\n+        }\n+    }\n+\n+    @Override\n+    public void trace(String format, Object arg1, Object arg2)\n+    {\n+        if (isTraceEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.TRACE, format, arg1, arg2));\n+        }\n+    }\n+\n+    @Override\n+    public void trace(String format, Object... arguments)\n+    {\n+        if (isTraceEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.TRACE, format, arguments));\n+        }\n+    }\n+\n+    @Override\n+    public void trace(String msg, Throwable throwable)\n+    {\n+        if (isTraceEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.TRACE, msg, throwable));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled(Marker marker)\n+    {\n+        return isTraceEnabled();\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String msg)\n+    {\n+        trace(msg);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String format, Object arg)\n+    {\n+        trace(format, arg);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String format, Object arg1, Object arg2)\n+    {\n+        trace(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String format, Object... argArray)\n+    {\n+        trace(format, argArray);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String msg, Throwable t)\n+    {\n+        trace(msg, t);\n+    }\n+\n+    @Override\n+    public void warn(String msg)\n+    {\n+        if (isWarnEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.WARN, msg));\n+        }\n+    }\n+\n+    @Override\n+    public void warn(String format, Object arg)\n+    {\n+        if (isWarnEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.WARN, format, arg));\n+        }\n+    }\n+\n+    @Override\n+    public void warn(String format, Object... arguments)\n+    {\n+        if (isWarnEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.WARN, format, arguments));\n+        }\n+    }\n+\n+    @Override\n+    public void warn(String format, Object arg1, Object arg2)\n+    {\n+        if (isWarnEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.WARN, format, arg1, arg2));\n+        }\n+    }\n+\n+    @Override\n+    public void warn(String msg, Throwable throwable)\n+    {\n+        if (isWarnEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.WARN, msg, throwable));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isWarnEnabled(Marker marker)\n+    {\n+        return isWarnEnabled();\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String msg)\n+    {\n+        warn(msg);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String format, Object arg)\n+    {\n+        warn(format, arg);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String format, Object arg1, Object arg2)\n+    {\n+        warn(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String format, Object... arguments)\n+    {\n+        warn(format, arguments);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String msg, Throwable t)\n+    {\n+        warn(msg, t);\n+    }\n+\n+    public static Level intToLevel(int level)\n+    {\n+        if (level >= JettyLogger.OFF)\n+            return Level.ERROR;\n+        if (level >= Level.ERROR.toInt())\n+            return Level.ERROR;\n+        if (level >= Level.WARN.toInt())\n+            return Level.WARN;\n+        if (level >= Level.INFO.toInt())\n+            return Level.INFO;\n+        if (level >= Level.DEBUG.toInt())\n+            return Level.DEBUG;\n+        if (level >= Level.TRACE.toInt())\n+            return Level.TRACE;\n+        return Level.TRACE; // everything else\n+    }\n+\n+    public static String levelToString(int level)\n+    {\n+        if (level >= JettyLogger.OFF)\n+            return \"OFF\";\n+        if (level >= Level.ERROR.toInt())\n+            return \"ERROR\";\n+        if (level >= Level.WARN.toInt())\n+            return \"WARN\";\n+        if (level >= Level.INFO.toInt())\n+            return \"INFO\";\n+        if (level >= Level.DEBUG.toInt())\n+            return \"DEBUG\";\n+        if (level >= Level.TRACE.toInt())\n+            return \"TRACE\";\n+        return \"OFF\"; // everything else\n+    }\n+\n+    @SuppressWarnings(\"StringBufferReplaceableByString\")\n+    @Override\n+    public String toString()\n+    {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(JettyLogger.class.getSimpleName());\n+        sb.append(':').append(name);\n+        sb.append(\":LEVEL=\").append(levelToString(level));\n+        return sb.toString();\n+    }\n+\n+    private JettyLoggingEvent asEvent(Level level, String msg)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 591}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1MzI0NA==", "bodyText": "We want to write the code in a way that this assert is not necessary - why paying the cost for every call?", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383753244", "createdAt": "2020-02-25T09:26:57Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()\n+    {\n+        if (instance == null)\n+        {\n+            instance = new JettyLoggerFactory();\n+        }\n+\n+        return instance;\n+    }\n+\n+    protected static void setInstance(JettyLoggerFactory loggerFactory)\n+    {\n+        if (loggerFactory != null && instance != null)\n+        {\n+            System.err.printf(\"Replacing main Instance %s@%x with %s@%x\",\n+                instance.getClass().getName(),\n+                instance.hashCode(),\n+                loggerFactory.getClass().getName(),\n+                loggerFactory.hashCode());\n+        }\n+        instance = loggerFactory;\n+    }\n+\n+    private static JettyLoggerFactory instance;\n+\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private boolean initialized = false;\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;\n+    private ConcurrentMap<String, JettyLogger> loggerMap;\n+\n+    private JettyLoggerFactory()\n+    {\n+    }\n+\n+    public JettyLoggerFactory initialize(JettyLoggerConfiguration config)\n+    {\n+        configuration = Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+\n+        loggerMap = new ConcurrentHashMap<>();\n+\n+        rootLogger = new JettyLogger(ROOT_LOGGER_NAME);\n+        loggerMap.put(ROOT_LOGGER_NAME, rootLogger);\n+\n+        rootLogger.setLevel(configuration.getLevel(ROOT_LOGGER_NAME));\n+        rootLogger.setAppender(new StdErrAppender(configuration));\n+\n+        initialized = true;\n+        return this;\n+    }\n+\n+    private void assertInitialized()\n+    {\n+        if (!initialized)\n+        {\n+            throw new IllegalStateException(this.getClass().getSimpleName() + \" is not initialized yet\");\n+        }\n+    }\n+\n+    /**\n+     * Get a {@link JettyLogger} instance, creating if not yet existing.\n+     *\n+     * @param name the name of the logger\n+     * @return the JettyLogger instance\n+     */\n+    public JettyLogger getJettyLogger(String name)\n+    {\n+        assertInitialized();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1MzgwMg==", "bodyText": "The static parts of this class need to be synchronized, or eagerly initialized.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383753802", "createdAt": "2020-02-25T09:27:59Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1NDI5NA==", "bodyText": "Why do we need this at all? Just for testing?", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383754294", "createdAt": "2020-02-25T09:28:51Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()\n+    {\n+        if (instance == null)\n+        {\n+            instance = new JettyLoggerFactory();\n+        }\n+\n+        return instance;\n+    }\n+\n+    protected static void setInstance(JettyLoggerFactory loggerFactory)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1NTQ0Mw==", "bodyText": "This is not atomic. Use loggerMap.compute().", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383755443", "createdAt": "2020-02-25T09:30:47Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()\n+    {\n+        if (instance == null)\n+        {\n+            instance = new JettyLoggerFactory();\n+        }\n+\n+        return instance;\n+    }\n+\n+    protected static void setInstance(JettyLoggerFactory loggerFactory)\n+    {\n+        if (loggerFactory != null && instance != null)\n+        {\n+            System.err.printf(\"Replacing main Instance %s@%x with %s@%x\",\n+                instance.getClass().getName(),\n+                instance.hashCode(),\n+                loggerFactory.getClass().getName(),\n+                loggerFactory.hashCode());\n+        }\n+        instance = loggerFactory;\n+    }\n+\n+    private static JettyLoggerFactory instance;\n+\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private boolean initialized = false;\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;\n+    private ConcurrentMap<String, JettyLogger> loggerMap;\n+\n+    private JettyLoggerFactory()\n+    {\n+    }\n+\n+    public JettyLoggerFactory initialize(JettyLoggerConfiguration config)\n+    {\n+        configuration = Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+\n+        loggerMap = new ConcurrentHashMap<>();\n+\n+        rootLogger = new JettyLogger(ROOT_LOGGER_NAME);\n+        loggerMap.put(ROOT_LOGGER_NAME, rootLogger);\n+\n+        rootLogger.setLevel(configuration.getLevel(ROOT_LOGGER_NAME));\n+        rootLogger.setAppender(new StdErrAppender(configuration));\n+\n+        initialized = true;\n+        return this;\n+    }\n+\n+    private void assertInitialized()\n+    {\n+        if (!initialized)\n+        {\n+            throw new IllegalStateException(this.getClass().getSimpleName() + \" is not initialized yet\");\n+        }\n+    }\n+\n+    /**\n+     * Get a {@link JettyLogger} instance, creating if not yet existing.\n+     *\n+     * @param name the name of the logger\n+     * @return the JettyLogger instance\n+     */\n+    public JettyLogger getJettyLogger(String name)\n+    {\n+        assertInitialized();\n+\n+        if (name.equals(ROOT_LOGGER_NAME))\n+        {\n+            return getRootLogger();\n+        }\n+\n+        JettyLogger jettyLogger = loggerMap.get(name);\n+        if (jettyLogger == null)\n+        {\n+            jettyLogger = createLogger(name);\n+            loggerMap.putIfAbsent(name, jettyLogger);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1NzY3MQ==", "bodyText": "This method and the one above are never used.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383757671", "createdAt": "2020-02-25T09:34:55Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()\n+    {\n+        if (instance == null)\n+        {\n+            instance = new JettyLoggerFactory();\n+        }\n+\n+        return instance;\n+    }\n+\n+    protected static void setInstance(JettyLoggerFactory loggerFactory)\n+    {\n+        if (loggerFactory != null && instance != null)\n+        {\n+            System.err.printf(\"Replacing main Instance %s@%x with %s@%x\",\n+                instance.getClass().getName(),\n+                instance.hashCode(),\n+                loggerFactory.getClass().getName(),\n+                loggerFactory.hashCode());\n+        }\n+        instance = loggerFactory;\n+    }\n+\n+    private static JettyLoggerFactory instance;\n+\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private boolean initialized = false;\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;\n+    private ConcurrentMap<String, JettyLogger> loggerMap;\n+\n+    private JettyLoggerFactory()\n+    {\n+    }\n+\n+    public JettyLoggerFactory initialize(JettyLoggerConfiguration config)\n+    {\n+        configuration = Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+\n+        loggerMap = new ConcurrentHashMap<>();\n+\n+        rootLogger = new JettyLogger(ROOT_LOGGER_NAME);\n+        loggerMap.put(ROOT_LOGGER_NAME, rootLogger);\n+\n+        rootLogger.setLevel(configuration.getLevel(ROOT_LOGGER_NAME));\n+        rootLogger.setAppender(new StdErrAppender(configuration));\n+\n+        initialized = true;\n+        return this;\n+    }\n+\n+    private void assertInitialized()\n+    {\n+        if (!initialized)\n+        {\n+            throw new IllegalStateException(this.getClass().getSimpleName() + \" is not initialized yet\");\n+        }\n+    }\n+\n+    /**\n+     * Get a {@link JettyLogger} instance, creating if not yet existing.\n+     *\n+     * @param name the name of the logger\n+     * @return the JettyLogger instance\n+     */\n+    public JettyLogger getJettyLogger(String name)\n+    {\n+        assertInitialized();\n+\n+        if (name.equals(ROOT_LOGGER_NAME))\n+        {\n+            return getRootLogger();\n+        }\n+\n+        JettyLogger jettyLogger = loggerMap.get(name);\n+        if (jettyLogger == null)\n+        {\n+            jettyLogger = createLogger(name);\n+            loggerMap.putIfAbsent(name, jettyLogger);\n+        }\n+        return jettyLogger;\n+    }\n+\n+    /**\n+     * Main interface for {@link ILoggerFactory}\n+     *\n+     * @param name the name of the logger\n+     * @return the Slf4j Logger\n+     */\n+    @Override\n+    public Logger getLogger(String name)\n+    {\n+        return getJettyLogger(name);\n+    }\n+\n+    protected void walkChildLoggers(String parentName, Consumer<JettyLogger> childConsumer)\n+    {\n+        String prefix = parentName;\n+        if (parentName.length() > 0 && !prefix.endsWith(\".\"))\n+        {\n+            prefix += \".\";\n+        }\n+\n+        for (JettyLogger logger : loggerMap.values())\n+        {\n+            if (logger.getName().equals(parentName))\n+            {\n+                // skip self\n+                continue;\n+            }\n+\n+            // is child, and is not itself\n+            if (logger.getName().startsWith(prefix))\n+            {\n+                childConsumer.accept(logger);\n+            }\n+        }\n+    }\n+\n+    public JettyLogger getConfiguredJettyLogger(Class<?> clazz)\n+    {\n+        return getConfiguredJettyLogger(clazz.getName());\n+    }\n+\n+    public JettyLogger getConfiguredJettyLogger(String name)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1NzkyMQ==", "bodyText": "Not needed, see above.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383757921", "createdAt": "2020-02-25T09:35:23Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggingEvent.java", "diffHunk": "@@ -0,0 +1,107 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import org.slf4j.Marker;\n+import org.slf4j.event.Level;\n+import org.slf4j.event.LoggingEvent;\n+\n+public class JettyLoggingEvent implements LoggingEvent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1ODk3Ng==", "bodyText": "Can't we use BasicMDCAdapter? I don't think we need a Jetty specific one, but we may want to use the MDC, so we want to have a working implementation.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383758976", "createdAt": "2020-02-25T09:37:19Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggingServiceProvider.java", "diffHunk": "@@ -0,0 +1,78 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.IMarkerFactory;\n+import org.slf4j.helpers.BasicMarkerFactory;\n+import org.slf4j.helpers.NOPMDCAdapter;\n+import org.slf4j.spi.MDCAdapter;\n+import org.slf4j.spi.SLF4JServiceProvider;\n+\n+public class JettyLoggingServiceProvider implements SLF4JServiceProvider\n+{\n+    /**\n+     * Declare the version of the SLF4J API this implementation is compiled against.\n+     * The value of this field is modified with each major release.\n+     */\n+    // to avoid constant folding by the compiler, this field must *not* be final\n+    public static String REQUESTED_API_VERSION = \"1.8.99\"; // !final\n+\n+    private JettyLoggerFactory loggerFactory;\n+    private BasicMarkerFactory markerFactory;\n+    private MDCAdapter mdcAdapter;\n+\n+    @Override\n+    public void initialize()\n+    {\n+        JettyLoggerConfiguration config = new JettyLoggerConfiguration().loadRuntime(this.getClass().getClassLoader());\n+        loggerFactory = JettyLoggerFactory.getLoggerFactory().initialize(config);\n+        markerFactory = new BasicMarkerFactory();\n+        mdcAdapter = new NOPMDCAdapter(); // TODO: Provide Jetty Implementation?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2MjQzOA==", "bodyText": "What if 2 thread concurrently trigger the first initialization of this service provider? Does SLF4J make any guarantee that this will not happen?\nIf it does not, then we may have a concurrent call to a static object that must be guarded.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383762438", "createdAt": "2020-02-25T09:41:40Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggingServiceProvider.java", "diffHunk": "@@ -0,0 +1,78 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.IMarkerFactory;\n+import org.slf4j.helpers.BasicMarkerFactory;\n+import org.slf4j.helpers.NOPMDCAdapter;\n+import org.slf4j.spi.MDCAdapter;\n+import org.slf4j.spi.SLF4JServiceProvider;\n+\n+public class JettyLoggingServiceProvider implements SLF4JServiceProvider\n+{\n+    /**\n+     * Declare the version of the SLF4J API this implementation is compiled against.\n+     * The value of this field is modified with each major release.\n+     */\n+    // to avoid constant folding by the compiler, this field must *not* be final\n+    public static String REQUESTED_API_VERSION = \"1.8.99\"; // !final\n+\n+    private JettyLoggerFactory loggerFactory;\n+    private BasicMarkerFactory markerFactory;\n+    private MDCAdapter mdcAdapter;\n+\n+    @Override\n+    public void initialize()\n+    {\n+        JettyLoggerConfiguration config = new JettyLoggerConfiguration().loadRuntime(this.getClass().getClassLoader());\n+        loggerFactory = JettyLoggerFactory.getLoggerFactory().initialize(config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2NTgwMg==", "bodyText": "We do not remember if the stack were hidden before? We should restore to whatever value it was before, rather than forcing false, no? Make squelched a Map and we should be good.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383765802", "createdAt": "2020-02-25T09:45:44Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StacklessLogging.java", "diffHunk": "@@ -0,0 +1,126 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A try-with-resources compatible layer for {@link JettyLogger#setHideStacks(boolean) hiding stacktraces} within the scope of the <code>try</code> block when\n+ * logging with {@link JettyLogger} implementation.\n+ * <p>\n+ * Use of other logging implementation cause no effect when using this class\n+ * <p>\n+ * Example:\n+ *\n+ * <pre>\n+ * try (StacklessLogging scope = new StacklessLogging(EventDriver.class,Noisy.class))\n+ * {\n+ *     doActionThatCausesStackTraces();\n+ * }\n+ * </pre>\n+ */\n+public class StacklessLogging implements AutoCloseable\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(StacklessLogging.class);\n+    private static final JettyLoggerFactory loggerFactory;\n+\n+    static\n+    {\n+        JettyLoggerFactory jettyLoggerFactory = null;\n+        ILoggerFactory activeLoggerFactory = LoggerFactory.getILoggerFactory();\n+        if (activeLoggerFactory instanceof JettyLoggerFactory)\n+        {\n+            jettyLoggerFactory = (JettyLoggerFactory)activeLoggerFactory;\n+        }\n+        else\n+        {\n+            LOG.warn(\"Unable to squelch stacktraces ({} is not a {})\",\n+                activeLoggerFactory.getClass().getName(),\n+                JettyLoggerFactory.class.getName());\n+        }\n+        loggerFactory = jettyLoggerFactory;\n+    }\n+\n+    private final Set<JettyLogger> squelched = new HashSet<>();\n+\n+    public StacklessLogging(Class<?>... classesToSquelch)\n+    {\n+        for (Class<?> clazz : classesToSquelch)\n+        {\n+            JettyLogger jettyLogger = loggerFactory.getJettyLogger(clazz.getName());\n+            // only operate on loggers that are of type StdErrLog\n+            if (!jettyLogger.isDebugEnabled())\n+            {\n+                if (!jettyLogger.isHideStacks())\n+                {\n+                    jettyLogger.setHideStacks(true);\n+                    squelched.add(jettyLogger);\n+                }\n+            }\n+        }\n+    }\n+\n+    public StacklessLogging(Package... packagesToSquelch)\n+    {\n+        for (Package pkg : packagesToSquelch)\n+        {\n+            JettyLogger jettyLogger = loggerFactory.getJettyLogger(pkg.getName());\n+            // only operate on loggers that are of type StdErrLog\n+            if (!jettyLogger.isDebugEnabled())\n+            {\n+                if (!jettyLogger.isHideStacks())\n+                {\n+                    jettyLogger.setHideStacks(true);\n+                    squelched.add(jettyLogger);\n+                }\n+            }\n+        }\n+    }\n+\n+    public StacklessLogging(Logger... logs)\n+    {\n+        for (Logger log : logs)\n+        {\n+            // only operate on loggers that are of type StdErrLog\n+            if (log instanceof JettyLogger && !log.isDebugEnabled())\n+            {\n+                JettyLogger jettyLogger = ((JettyLogger)log);\n+                if (!jettyLogger.isHideStacks())\n+                {\n+                    jettyLogger.setHideStacks(true);\n+                    squelched.add(jettyLogger);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+        for (JettyLogger log : squelched)\n+        {\n+            log.setHideStacks(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2NjQwNA==", "bodyText": "Use {@code ...} instead of <code>.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383766404", "createdAt": "2020-02-25T09:46:41Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,251 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3MDU2Nw==", "bodyText": "Why we want back to 1.8.0-beta1 from 1.8.0-beta2?", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383770567", "createdAt": "2020-02-25T09:53:38Z", "author": {"login": "sbordet"}, "path": "pom.xml", "diffHunk": "@@ -19,9 +19,9 @@\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <build-support.version>1.4</build-support.version>\n     <checkstyle.version>8.20</checkstyle.version>\n-    <slf4j.version>1.8.0-beta2</slf4j.version>\n-    <log4j2.version>2.11.2</log4j2.version>\n-    <logback.version>1.3.0-alpha4</logback.version>\n+    <slf4j.version>1.8.0-beta1</slf4j.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTEyMDE0", "url": "https://github.com/eclipse/jetty.project/pull/4601#pullrequestreview-364112014", "createdAt": "2020-02-25T12:45:35Z", "commit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjo0NTozNVrOFuEtMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjo0NTozNVrOFuEtMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg1NTkyMQ==", "bodyText": "Can we do this work against 2.0.0-alpha0.  I know that is an early release, but there is no point going to 1.8 for this change.  If we work against the alpha then we can see any problems and give feedback", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383855921", "createdAt": "2020-02-25T12:45:35Z", "author": {"login": "gregw"}, "path": "pom.xml", "diffHunk": "@@ -19,9 +19,9 @@\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <build-support.version>1.4</build-support.version>\n     <checkstyle.version>8.20</checkstyle.version>\n-    <slf4j.version>1.8.0-beta2</slf4j.version>\n-    <log4j2.version>2.11.2</log4j2.version>\n-    <logback.version>1.3.0-alpha4</logback.version>\n+    <slf4j.version>1.8.0-beta1</slf4j.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3MDU2Nw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NjQ3ODU2", "url": "https://github.com/eclipse/jetty.project/pull/4601#pullrequestreview-364647856", "createdAt": "2020-02-26T06:27:35Z", "commit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjoyNzozNVrOFufiKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjoyNzozNVrOFufiKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NTQ2Nw==", "bodyText": "I'm really curious about the story behind this? :) ERROR is 5 characters so DEBUG will not be longer", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384295467", "createdAt": "2020-02-26T06:27:35Z", "author": {"login": "olamy"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string\n+     * to the number of arguments provided on the various {@link org.slf4j.Logger} methods.\n+     * False will use the old-school Jetty message formatter, which will add missing <code>{}</code>\n+     * entries to the end of the format String if it detects more arguments then there are <code>{}</code>\n+     * elements in the provided format String.\n+     */\n+    private final boolean strictFormat;\n+\n+    /**\n+     * The fixed size of the thread name to use for output\n+     */\n+    private final int threadPadding;\n+\n+    /**\n+     * The stream to write logging events to.\n+     */\n+    private PrintStream stderr;\n+\n+    public StdErrAppender(JettyLoggerConfiguration config)\n+    {\n+        this(config, System.err);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream)\n+    {\n+        this(config, stream, null);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream, ZoneId zoneId)\n+    {\n+        Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+        this.stderr = Objects.requireNonNull(stream, \"PrintStream\");\n+\n+        ZoneId tzone = zoneId;\n+        if (tzone == null)\n+        {\n+            tzone = config.getZoneId(ZONEID_KEY);\n+            if (tzone == null)\n+            {\n+                tzone = TimeZone.getDefault().toZoneId();\n+            }\n+        }\n+\n+        this.timezone = tzone;\n+        this.timestampFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+        this.timestampFormatter.withZone(timezone);\n+\n+        this.condensedNames = config.getBoolean(NAME_CONDENSE_KEY, true);\n+        this.escapedMessages = config.getBoolean(MESSAGE_ESCAPE_KEY, true);\n+        this.strictFormat = config.getBoolean(STRICT_SLF4J_FORMAT_KEY, true);\n+        this.threadPadding = config.getInt(THREAD_PADDING_KEY, -1);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, null, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, throwable, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message, Object... argumentArray)\n+    {\n+        Throwable cause = NormalizedParameters.getThrowableCandidate(argumentArray);\n+        emit(logger, level, timestamp, threadName, cause, message, argumentArray);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        StringBuilder builder = new StringBuilder(64);\n+        format(builder, logger, level, timestamp, threadName, throwable, message, argumentArray);\n+        stderr.println(builder);\n+    }\n+\n+    public ZoneId getTimeZone()\n+    {\n+        return timezone;\n+    }\n+\n+    public boolean isCondensedNames()\n+    {\n+        return condensedNames;\n+    }\n+\n+    public boolean isEscapedMessages()\n+    {\n+        return escapedMessages;\n+    }\n+\n+    public int getThreadPadding()\n+    {\n+        return threadPadding;\n+    }\n+\n+    public boolean isStrictFormat()\n+    {\n+        return strictFormat;\n+    }\n+\n+    public void setStream(PrintStream stream)\n+    {\n+        this.stderr = stream;\n+    }\n+\n+    private void format(StringBuilder builder, JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        Throwable cause = throwable;\n+\n+        // Timestamp\n+        ZonedDateTime tsInstant = Instant.ofEpochMilli(timestamp).atZone(timezone);\n+        timestampFormatter.formatTo(tsInstant, builder);\n+\n+        // Level\n+        builder.append(':').append(renderedLevel(level));\n+\n+        // Logger Name\n+        builder.append(':');\n+        if (condensedNames)\n+        {\n+            builder.append(logger.getCondensedName());\n+        }\n+        else\n+        {\n+            builder.append(logger.getName());\n+        }\n+\n+        // Thread Name\n+        builder.append(':');\n+        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(':');\n+\n+        // Message\n+        builder.append(' ');\n+\n+        if (strictFormat)\n+        {\n+            FormattingTuple ft = MessageFormatter.arrayFormat(message, argumentArray);\n+            appendEscaped(builder, ft.getMessage());\n+            if (cause == null)\n+            {\n+                cause = ft.getThrowable();\n+            }\n+        }\n+        else\n+        {\n+            // TODO: this should really be removed, as it violates the slf4j API contract for throwables and such\n+            StringBuilder msg = new StringBuilder();\n+            Object[] args = argumentArray == null ? EMPTY_ARGS : argumentArray;\n+            msg.append(Objects.requireNonNullElseGet(message, () -> \"{} \".repeat(args.length)));\n+            String braces = \"{}\";\n+            int start = 0;\n+            for (Object arg : args)\n+            {\n+                int bracesIndex = msg.indexOf(braces, start);\n+                if (bracesIndex < 0)\n+                {\n+                    appendEscaped(builder, msg.substring(start));\n+                    builder.append(\" \");\n+                    if (arg != null)\n+                        builder.append(arg);\n+                    start = msg.length();\n+                }\n+                else\n+                {\n+                    appendEscaped(builder, msg.substring(start, bracesIndex));\n+                    builder.append(arg);\n+                    start = bracesIndex + braces.length();\n+                }\n+            }\n+            appendEscaped(builder, msg.substring(start));\n+        }\n+\n+        // Throwable\n+        if (cause != null)\n+        {\n+            if (logger.isHideStacks())\n+            {\n+                builder.append(\": \").append(cause);\n+            }\n+            else\n+            {\n+                appendCause(builder, cause, \"\");\n+            }\n+        }\n+    }\n+\n+    private String renderedLevel(Level level)\n+    {\n+        switch (level)\n+        {\n+            case ERROR:  // New for Jetty 10+\n+                return \"ERROR\";\n+            case WARN:\n+                return \"WARN\";\n+            case INFO:\n+                return \"INFO\";\n+            case DEBUG:\n+                return \"DBUG\"; // keeping abbreviated name for historical reasons", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 264}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NjY1ODI3", "url": "https://github.com/eclipse/jetty.project/pull/4601#pullrequestreview-364665827", "createdAt": "2020-02-26T07:18:57Z", "commit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzoxODo1N1rOFugZtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzozMzo1NFrOFugshg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwOTY4Nw==", "bodyText": "Do we need this static instance at all?  The instance we will use is the one created by the JettyLoggingServiceProvider so why confuse things and have another lazy static?", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384309687", "createdAt": "2020-02-26T07:18:57Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,213 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMTAwMA==", "bodyText": "Why are we not using DateCache?    I know it is not as flexible as a modern formatter, but it is fast for the simple data stamp that this log needs.  If users want anything fancier, they should replace our logging.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384311000", "createdAt": "2020-02-26T07:23:13Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMjYxOQ==", "bodyText": "what is this?  Looks like slf4j implementation to me.... and a mode of operation.   We don't want either.\nWe just want simple formatting as we currently do, if anything different is required then we replace the logging jar.\nModes of operation are just slow and confusing.\nSo we definitely have to remove the modes.\nAre the slf4j helper classes in the API jar?   What are the differences between their format and ours?", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384312619", "createdAt": "2020-02-26T07:28:13Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string\n+     * to the number of arguments provided on the various {@link org.slf4j.Logger} methods.\n+     * False will use the old-school Jetty message formatter, which will add missing <code>{}</code>\n+     * entries to the end of the format String if it detects more arguments then there are <code>{}</code>\n+     * elements in the provided format String.\n+     */\n+    private final boolean strictFormat;\n+\n+    /**\n+     * The fixed size of the thread name to use for output\n+     */\n+    private final int threadPadding;\n+\n+    /**\n+     * The stream to write logging events to.\n+     */\n+    private PrintStream stderr;\n+\n+    public StdErrAppender(JettyLoggerConfiguration config)\n+    {\n+        this(config, System.err);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream)\n+    {\n+        this(config, stream, null);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream, ZoneId zoneId)\n+    {\n+        Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+        this.stderr = Objects.requireNonNull(stream, \"PrintStream\");\n+\n+        ZoneId tzone = zoneId;\n+        if (tzone == null)\n+        {\n+            tzone = config.getZoneId(ZONEID_KEY);\n+            if (tzone == null)\n+            {\n+                tzone = TimeZone.getDefault().toZoneId();\n+            }\n+        }\n+\n+        this.timezone = tzone;\n+        this.timestampFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+        this.timestampFormatter.withZone(timezone);\n+\n+        this.condensedNames = config.getBoolean(NAME_CONDENSE_KEY, true);\n+        this.escapedMessages = config.getBoolean(MESSAGE_ESCAPE_KEY, true);\n+        this.strictFormat = config.getBoolean(STRICT_SLF4J_FORMAT_KEY, true);\n+        this.threadPadding = config.getInt(THREAD_PADDING_KEY, -1);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, null, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, throwable, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message, Object... argumentArray)\n+    {\n+        Throwable cause = NormalizedParameters.getThrowableCandidate(argumentArray);\n+        emit(logger, level, timestamp, threadName, cause, message, argumentArray);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        StringBuilder builder = new StringBuilder(64);\n+        format(builder, logger, level, timestamp, threadName, throwable, message, argumentArray);\n+        stderr.println(builder);\n+    }\n+\n+    public ZoneId getTimeZone()\n+    {\n+        return timezone;\n+    }\n+\n+    public boolean isCondensedNames()\n+    {\n+        return condensedNames;\n+    }\n+\n+    public boolean isEscapedMessages()\n+    {\n+        return escapedMessages;\n+    }\n+\n+    public int getThreadPadding()\n+    {\n+        return threadPadding;\n+    }\n+\n+    public boolean isStrictFormat()\n+    {\n+        return strictFormat;\n+    }\n+\n+    public void setStream(PrintStream stream)\n+    {\n+        this.stderr = stream;\n+    }\n+\n+    private void format(StringBuilder builder, JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        Throwable cause = throwable;\n+\n+        // Timestamp\n+        ZonedDateTime tsInstant = Instant.ofEpochMilli(timestamp).atZone(timezone);\n+        timestampFormatter.formatTo(tsInstant, builder);\n+\n+        // Level\n+        builder.append(':').append(renderedLevel(level));\n+\n+        // Logger Name\n+        builder.append(':');\n+        if (condensedNames)\n+        {\n+            builder.append(logger.getCondensedName());\n+        }\n+        else\n+        {\n+            builder.append(logger.getName());\n+        }\n+\n+        // Thread Name\n+        builder.append(':');\n+        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(':');\n+\n+        // Message\n+        builder.append(' ');\n+\n+        if (strictFormat)\n+        {\n+            FormattingTuple ft = MessageFormatter.arrayFormat(message, argumentArray);\n+            appendEscaped(builder, ft.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxNDM3Nw==", "bodyText": "The intention is that all the level tags are the same length so that they read nicely down the screen (not sure how ignored escaped that), so they should either be:\n\"ERR \"\n\"WARN\"\n\"INFO\"\n\"DBUG\"\n\nor\n\"ERROR\"\n\"WARN \"\n\"INFO \"\n\"DEBUG\"", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384314377", "createdAt": "2020-02-26T07:33:29Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string\n+     * to the number of arguments provided on the various {@link org.slf4j.Logger} methods.\n+     * False will use the old-school Jetty message formatter, which will add missing <code>{}</code>\n+     * entries to the end of the format String if it detects more arguments then there are <code>{}</code>\n+     * elements in the provided format String.\n+     */\n+    private final boolean strictFormat;\n+\n+    /**\n+     * The fixed size of the thread name to use for output\n+     */\n+    private final int threadPadding;\n+\n+    /**\n+     * The stream to write logging events to.\n+     */\n+    private PrintStream stderr;\n+\n+    public StdErrAppender(JettyLoggerConfiguration config)\n+    {\n+        this(config, System.err);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream)\n+    {\n+        this(config, stream, null);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream, ZoneId zoneId)\n+    {\n+        Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+        this.stderr = Objects.requireNonNull(stream, \"PrintStream\");\n+\n+        ZoneId tzone = zoneId;\n+        if (tzone == null)\n+        {\n+            tzone = config.getZoneId(ZONEID_KEY);\n+            if (tzone == null)\n+            {\n+                tzone = TimeZone.getDefault().toZoneId();\n+            }\n+        }\n+\n+        this.timezone = tzone;\n+        this.timestampFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+        this.timestampFormatter.withZone(timezone);\n+\n+        this.condensedNames = config.getBoolean(NAME_CONDENSE_KEY, true);\n+        this.escapedMessages = config.getBoolean(MESSAGE_ESCAPE_KEY, true);\n+        this.strictFormat = config.getBoolean(STRICT_SLF4J_FORMAT_KEY, true);\n+        this.threadPadding = config.getInt(THREAD_PADDING_KEY, -1);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, null, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, throwable, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message, Object... argumentArray)\n+    {\n+        Throwable cause = NormalizedParameters.getThrowableCandidate(argumentArray);\n+        emit(logger, level, timestamp, threadName, cause, message, argumentArray);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        StringBuilder builder = new StringBuilder(64);\n+        format(builder, logger, level, timestamp, threadName, throwable, message, argumentArray);\n+        stderr.println(builder);\n+    }\n+\n+    public ZoneId getTimeZone()\n+    {\n+        return timezone;\n+    }\n+\n+    public boolean isCondensedNames()\n+    {\n+        return condensedNames;\n+    }\n+\n+    public boolean isEscapedMessages()\n+    {\n+        return escapedMessages;\n+    }\n+\n+    public int getThreadPadding()\n+    {\n+        return threadPadding;\n+    }\n+\n+    public boolean isStrictFormat()\n+    {\n+        return strictFormat;\n+    }\n+\n+    public void setStream(PrintStream stream)\n+    {\n+        this.stderr = stream;\n+    }\n+\n+    private void format(StringBuilder builder, JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        Throwable cause = throwable;\n+\n+        // Timestamp\n+        ZonedDateTime tsInstant = Instant.ofEpochMilli(timestamp).atZone(timezone);\n+        timestampFormatter.formatTo(tsInstant, builder);\n+\n+        // Level\n+        builder.append(':').append(renderedLevel(level));\n+\n+        // Logger Name\n+        builder.append(':');\n+        if (condensedNames)\n+        {\n+            builder.append(logger.getCondensedName());\n+        }\n+        else\n+        {\n+            builder.append(logger.getName());\n+        }\n+\n+        // Thread Name\n+        builder.append(':');\n+        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(':');\n+\n+        // Message\n+        builder.append(' ');\n+\n+        if (strictFormat)\n+        {\n+            FormattingTuple ft = MessageFormatter.arrayFormat(message, argumentArray);\n+            appendEscaped(builder, ft.getMessage());\n+            if (cause == null)\n+            {\n+                cause = ft.getThrowable();\n+            }\n+        }\n+        else\n+        {\n+            // TODO: this should really be removed, as it violates the slf4j API contract for throwables and such\n+            StringBuilder msg = new StringBuilder();\n+            Object[] args = argumentArray == null ? EMPTY_ARGS : argumentArray;\n+            msg.append(Objects.requireNonNullElseGet(message, () -> \"{} \".repeat(args.length)));\n+            String braces = \"{}\";\n+            int start = 0;\n+            for (Object arg : args)\n+            {\n+                int bracesIndex = msg.indexOf(braces, start);\n+                if (bracesIndex < 0)\n+                {\n+                    appendEscaped(builder, msg.substring(start));\n+                    builder.append(\" \");\n+                    if (arg != null)\n+                        builder.append(arg);\n+                    start = msg.length();\n+                }\n+                else\n+                {\n+                    appendEscaped(builder, msg.substring(start, bracesIndex));\n+                    builder.append(arg);\n+                    start = bracesIndex + braces.length();\n+                }\n+            }\n+            appendEscaped(builder, msg.substring(start));\n+        }\n+\n+        // Throwable\n+        if (cause != null)\n+        {\n+            if (logger.isHideStacks())\n+            {\n+                builder.append(\": \").append(cause);\n+            }\n+            else\n+            {\n+                appendCause(builder, cause, \"\");\n+            }\n+        }\n+    }\n+\n+    private String renderedLevel(Level level)\n+    {\n+        switch (level)\n+        {\n+            case ERROR:  // New for Jetty 10+\n+                return \"ERROR\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxNDUwMg==", "bodyText": "ERROR is a new level that was not there before. See my comment above.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384314502", "createdAt": "2020-02-26T07:33:54Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string\n+     * to the number of arguments provided on the various {@link org.slf4j.Logger} methods.\n+     * False will use the old-school Jetty message formatter, which will add missing <code>{}</code>\n+     * entries to the end of the format String if it detects more arguments then there are <code>{}</code>\n+     * elements in the provided format String.\n+     */\n+    private final boolean strictFormat;\n+\n+    /**\n+     * The fixed size of the thread name to use for output\n+     */\n+    private final int threadPadding;\n+\n+    /**\n+     * The stream to write logging events to.\n+     */\n+    private PrintStream stderr;\n+\n+    public StdErrAppender(JettyLoggerConfiguration config)\n+    {\n+        this(config, System.err);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream)\n+    {\n+        this(config, stream, null);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream, ZoneId zoneId)\n+    {\n+        Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+        this.stderr = Objects.requireNonNull(stream, \"PrintStream\");\n+\n+        ZoneId tzone = zoneId;\n+        if (tzone == null)\n+        {\n+            tzone = config.getZoneId(ZONEID_KEY);\n+            if (tzone == null)\n+            {\n+                tzone = TimeZone.getDefault().toZoneId();\n+            }\n+        }\n+\n+        this.timezone = tzone;\n+        this.timestampFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+        this.timestampFormatter.withZone(timezone);\n+\n+        this.condensedNames = config.getBoolean(NAME_CONDENSE_KEY, true);\n+        this.escapedMessages = config.getBoolean(MESSAGE_ESCAPE_KEY, true);\n+        this.strictFormat = config.getBoolean(STRICT_SLF4J_FORMAT_KEY, true);\n+        this.threadPadding = config.getInt(THREAD_PADDING_KEY, -1);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, null, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, throwable, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message, Object... argumentArray)\n+    {\n+        Throwable cause = NormalizedParameters.getThrowableCandidate(argumentArray);\n+        emit(logger, level, timestamp, threadName, cause, message, argumentArray);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        StringBuilder builder = new StringBuilder(64);\n+        format(builder, logger, level, timestamp, threadName, throwable, message, argumentArray);\n+        stderr.println(builder);\n+    }\n+\n+    public ZoneId getTimeZone()\n+    {\n+        return timezone;\n+    }\n+\n+    public boolean isCondensedNames()\n+    {\n+        return condensedNames;\n+    }\n+\n+    public boolean isEscapedMessages()\n+    {\n+        return escapedMessages;\n+    }\n+\n+    public int getThreadPadding()\n+    {\n+        return threadPadding;\n+    }\n+\n+    public boolean isStrictFormat()\n+    {\n+        return strictFormat;\n+    }\n+\n+    public void setStream(PrintStream stream)\n+    {\n+        this.stderr = stream;\n+    }\n+\n+    private void format(StringBuilder builder, JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        Throwable cause = throwable;\n+\n+        // Timestamp\n+        ZonedDateTime tsInstant = Instant.ofEpochMilli(timestamp).atZone(timezone);\n+        timestampFormatter.formatTo(tsInstant, builder);\n+\n+        // Level\n+        builder.append(':').append(renderedLevel(level));\n+\n+        // Logger Name\n+        builder.append(':');\n+        if (condensedNames)\n+        {\n+            builder.append(logger.getCondensedName());\n+        }\n+        else\n+        {\n+            builder.append(logger.getName());\n+        }\n+\n+        // Thread Name\n+        builder.append(':');\n+        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(':');\n+\n+        // Message\n+        builder.append(' ');\n+\n+        if (strictFormat)\n+        {\n+            FormattingTuple ft = MessageFormatter.arrayFormat(message, argumentArray);\n+            appendEscaped(builder, ft.getMessage());\n+            if (cause == null)\n+            {\n+                cause = ft.getThrowable();\n+            }\n+        }\n+        else\n+        {\n+            // TODO: this should really be removed, as it violates the slf4j API contract for throwables and such\n+            StringBuilder msg = new StringBuilder();\n+            Object[] args = argumentArray == null ? EMPTY_ARGS : argumentArray;\n+            msg.append(Objects.requireNonNullElseGet(message, () -> \"{} \".repeat(args.length)));\n+            String braces = \"{}\";\n+            int start = 0;\n+            for (Object arg : args)\n+            {\n+                int bracesIndex = msg.indexOf(braces, start);\n+                if (bracesIndex < 0)\n+                {\n+                    appendEscaped(builder, msg.substring(start));\n+                    builder.append(\" \");\n+                    if (arg != null)\n+                        builder.append(arg);\n+                    start = msg.length();\n+                }\n+                else\n+                {\n+                    appendEscaped(builder, msg.substring(start, bracesIndex));\n+                    builder.append(arg);\n+                    start = bracesIndex + braces.length();\n+                }\n+            }\n+            appendEscaped(builder, msg.substring(start));\n+        }\n+\n+        // Throwable\n+        if (cause != null)\n+        {\n+            if (logger.isHideStacks())\n+            {\n+                builder.append(\": \").append(cause);\n+            }\n+            else\n+            {\n+                appendCause(builder, cause, \"\");\n+            }\n+        }\n+    }\n+\n+    private String renderedLevel(Level level)\n+    {\n+        switch (level)\n+        {\n+            case ERROR:  // New for Jetty 10+\n+                return \"ERROR\";\n+            case WARN:\n+                return \"WARN\";\n+            case INFO:\n+                return \"INFO\";\n+            case DEBUG:\n+                return \"DBUG\"; // keeping abbreviated name for historical reasons", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NTQ2Nw=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 264}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MTM5Mjgx", "url": "https://github.com/eclipse/jetty.project/pull/4601#pullrequestreview-365139281", "createdAt": "2020-02-26T18:30:45Z", "commit": {"oid": "8a85bfb10f9aaea7a593a1cb2708b256f13aec88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODozMDo0NVrOFu3IJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODozMDo0NVrOFu3IJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4MjAyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private JettyLoggerConfiguration configuration;\n          \n          \n            \n                private JettyLogger rootLogger;\n          \n          \n            \n                private final JettyLoggerConfiguration configuration;\n          \n          \n            \n                private final JettyLogger rootLogger;", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384682020", "createdAt": "2020-02-26T18:30:45Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,196 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a85bfb10f9aaea7a593a1cb2708b256f13aec88"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MTQwMTgz", "url": "https://github.com/eclipse/jetty.project/pull/4601#pullrequestreview-365140183", "createdAt": "2020-02-26T18:32:01Z", "commit": {"oid": "8a85bfb10f9aaea7a593a1cb2708b256f13aec88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODozMjowMVrOFu3K8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODozMjowMVrOFu3K8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4MjczOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    initialize(config);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                /**\n          \n          \n            \n                 * Reinitialize this Factory, forgetting about all prior config and loggers.\n          \n          \n            \n                 * <p>\n          \n          \n            \n                 * This is really only used in test cases.\n          \n          \n            \n                 * </p>\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param config the configuration to reset to\n          \n          \n            \n                 */\n          \n          \n            \n                protected void initialize(JettyLoggerConfiguration config)\n          \n          \n            \n                {", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384682739", "createdAt": "2020-02-26T18:32:01Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,196 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;\n+    private ConcurrentMap<String, JettyLogger> loggerMap;\n+\n+    public JettyLoggerFactory(JettyLoggerConfiguration config)\n+    {\n+        initialize(config);\n+    }\n+\n+    /**\n+     * Reinitialize this Factory, forgetting about all prior config and loggers.\n+     * <p>\n+     * This is really only used in test cases.\n+     * </p>\n+     *\n+     * @param config the configuration to reset to\n+     */\n+    protected void initialize(JettyLoggerConfiguration config)\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a85bfb10f9aaea7a593a1cb2708b256f13aec88"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjIyODA1", "url": "https://github.com/eclipse/jetty.project/pull/4601#pullrequestreview-365222805", "createdAt": "2020-02-26T20:36:03Z", "commit": {"oid": "1339bd1d851ecd5d07a5cc9223f42653a0361ac3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDozNjowNFrOFu7RZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDozNjowNFrOFu7RZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0OTkyNQ==", "bodyText": "Nope. This is not needed.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384749925", "createdAt": "2020-02-26T20:36:04Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -69,7 +69,7 @@ public JettyLogger getJettyLogger(String name)\n      * @return the Slf4j Logger\n      */\n     @Override\n-    public Logger getLogger(String name)\n+    public synchronized Logger getLogger(String name)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1339bd1d851ecd5d07a5cc9223f42653a0361ac3"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjU3MDI5", "url": "https://github.com/eclipse/jetty.project/pull/4601#pullrequestreview-365257029", "createdAt": "2020-02-26T21:30:51Z", "commit": {"oid": "0fd661c9f1857c82b94dc964244053dd6717ad94"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1Mjk3OTEz", "url": "https://github.com/eclipse/jetty.project/pull/4601#pullrequestreview-365297913", "createdAt": "2020-02-26T22:40:40Z", "commit": {"oid": "74bf55454fb00799a57eb87728df1408865f5bad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b7e64915f9e6d7be6ca69cc1143931e1b35fde2", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/8b7e64915f9e6d7be6ca69cc1143931e1b35fde2", "committedDate": "2020-03-16T16:21:54Z", "message": "Issue #4572 - Replace Jetty Logging with SLF4J\n\n* Introducing jetty-slf4j-impl\n* Make Jetty use org.slf4j\n* Removed most of org.eclipse.jetty.util.log classes\n* Left org.eclipse.jetty.util.log.Log and\n       org.eclipse.jetty.util.log.Logger but as\n  simple bridge classes that are deprecated\n* Migrated code using org.eclipse.jetty.util.log.StacklessLogging\n  to org.eclipse.jetty.logging.StacklessLogging found in\n  the jetty-slf4j-impl\n* Moved logging start modules from jetty-util to jetty-home\n* Simplified logging start modules\n* Updated code that was using StdErrLog directly\n* Updating module-info.java for org.slf4j\n* removing org.eclipse.jetty.util.log.class references\n* jetty-start supports manually declared default provider\n  + and we use it to default \"logging\" to the \"logging-jetty\" provider\n* Cleaning up jetty-maven-plugin and IT testing for Logging\n* Using old slf4j for it testing\n* Updating compiler config to show Xlint:exports warnings\n* Updating console-capture and logging-noop\n* Adding slf4j bridge (capture) jetty modules\n* Updates to jetty logging module locations\n* Changing reference to slf4j dependent mod\n* Process requested enabled modules in topological order\n* Limiting inclusions in shaded jetty-start\n  + Also adding note to jetty-util classes that are used by\n    jetty-start\n* Default logging level on baseline logging config is INFO (not DEBUG)\n* Changing from system to server classes in logging\n* Updating other modules to use new logging names\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c39897c1f4d2a45a768b66f9c698cab2c50feb9e", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/c39897c1f4d2a45a768b66f9c698cab2c50feb9e", "committedDate": "2020-03-16T16:04:30Z", "message": "Merge pull request #4643 from eclipse/jetty-10.0.x-4572-slf4j-logging-part2\n\nIssue #4572 - Replace Jetty Logging with slf4j logging (part 2 of 3)"}, "afterCommit": {"oid": "8b7e64915f9e6d7be6ca69cc1143931e1b35fde2", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/8b7e64915f9e6d7be6ca69cc1143931e1b35fde2", "committedDate": "2020-03-16T16:21:54Z", "message": "Issue #4572 - Replace Jetty Logging with SLF4J\n\n* Introducing jetty-slf4j-impl\n* Make Jetty use org.slf4j\n* Removed most of org.eclipse.jetty.util.log classes\n* Left org.eclipse.jetty.util.log.Log and\n       org.eclipse.jetty.util.log.Logger but as\n  simple bridge classes that are deprecated\n* Migrated code using org.eclipse.jetty.util.log.StacklessLogging\n  to org.eclipse.jetty.logging.StacklessLogging found in\n  the jetty-slf4j-impl\n* Moved logging start modules from jetty-util to jetty-home\n* Simplified logging start modules\n* Updated code that was using StdErrLog directly\n* Updating module-info.java for org.slf4j\n* removing org.eclipse.jetty.util.log.class references\n* jetty-start supports manually declared default provider\n  + and we use it to default \"logging\" to the \"logging-jetty\" provider\n* Cleaning up jetty-maven-plugin and IT testing for Logging\n* Using old slf4j for it testing\n* Updating compiler config to show Xlint:exports warnings\n* Updating console-capture and logging-noop\n* Adding slf4j bridge (capture) jetty modules\n* Updates to jetty logging module locations\n* Changing reference to slf4j dependent mod\n* Process requested enabled modules in topological order\n* Limiting inclusions in shaded jetty-start\n  + Also adding note to jetty-util classes that are used by\n    jetty-start\n* Default logging level on baseline logging config is INFO (not DEBUG)\n* Changing from system to server classes in logging\n* Updating other modules to use new logging names\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 467, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}