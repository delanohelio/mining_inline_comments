{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3Mjc1OTgy", "number": 5483, "title": "Improve testing for temp directories", "bodyText": "", "createdAt": "2020-10-21T06:04:37Z", "url": "https://github.com/eclipse/jetty.project/pull/5483", "merged": true, "mergeCommit": {"oid": "941d7fb3697a684071915358d005228f014e89aa"}, "closed": true, "closedAt": "2021-04-06T00:29:08Z", "author": {"login": "lachlan-roberts"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUlBNqAH2gAyNTA3Mjc1OTgyOmE0ZTcxYzI4MDg0MTQyOWUxNDNkYzE2NzdmODY4MzQwYzEzYzVjMzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeI_NmBgFqTYyNjcxMzE1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a4e71c280841429e143dc1677f868340c13c5c36", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/a4e71c280841429e143dc1677f868340c13c5c36", "committedDate": "2020-10-21T03:43:32Z", "message": "Add tests for the WebAppContext tmp directory\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62b71344d72f35e41def5a1dc8388d8e5d87f202", "author": {"user": {"login": "olamy", "name": "Olivier Lamy"}}, "url": "https://github.com/eclipse/jetty.project/commit/62b71344d72f35e41def5a1dc8388d8e5d87f202", "committedDate": "2020-10-21T06:26:19Z", "message": "add more test on ServletContext.TEMPDIR\n\nSigned-off-by: olivier lamy <oliver.lamy@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNTI0MzA5", "url": "https://github.com/eclipse/jetty.project/pull/5483#pullrequestreview-513524309", "createdAt": "2020-10-21T10:20:29Z", "commit": {"oid": "62b71344d72f35e41def5a1dc8388d8e5d87f202"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDoyMDoyOVrOHlkz1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDoyNzozMFrOHllDyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE2MjQ1Mw==", "bodyText": "Add an assert for the expected WebAppContext.isPersistentTempDirectory() value to all tests.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r509162453", "createdAt": "2020-10-21T10:20:29Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ServletContextTmpAttributeTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import javax.servlet.ServletContext;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class ServletContextTmpAttributeTest\n+{\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File tmp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext temp directory parent is java.io.tmpdir\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62b71344d72f35e41def5a1dc8388d8e5d87f202"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE2NDMwNg==", "bodyText": "We'd have to change WebInfConfiguration - AFAIK we've never supported a Path as the value of ServletContext.TEMPDIR.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r509164306", "createdAt": "2020-10-21T10:23:42Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ServletContextTmpAttributeTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import javax.servlet.ServletContext;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class ServletContextTmpAttributeTest\n+{\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File tmp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext temp directory parent is java.io.tmpdir\",\n+                    tmp.getParentFile(),\n+                    is(new File(System.getProperty(\"java.io.tmpdir\"))));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as String to valid directory\n+     */\n+    @Test\n+    public void attributeWithStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toString());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidFileDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toFile());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as Path to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidPathDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp);\n+        // FIXME we should have an exception here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62b71344d72f35e41def5a1dc8388d8e5d87f202"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE2NTY5NQ==", "bodyText": "\ud83d\udcaf", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r509165695", "createdAt": "2020-10-21T10:26:07Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ServletContextTmpAttributeTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import javax.servlet.ServletContext;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class ServletContextTmpAttributeTest\n+{\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File tmp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext temp directory parent is java.io.tmpdir\",\n+                    tmp.getParentFile(),\n+                    is(new File(System.getProperty(\"java.io.tmpdir\"))));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as String to valid directory\n+     */\n+    @Test\n+    public void attributeWithStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toString());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidFileDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toFile());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as Path to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidPathDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp);\n+        // FIXME we should have an exception here\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithInvalidStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"/French/Cheese/Rocks\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62b71344d72f35e41def5a1dc8388d8e5d87f202"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE2NjUzOA==", "bodyText": "Couldn't the test create a directory, then remove user read permission from it?", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r509166538", "createdAt": "2020-10-21T10:27:30Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ServletContextTmpAttributeTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import javax.servlet.ServletContext;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class ServletContextTmpAttributeTest\n+{\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File tmp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext temp directory parent is java.io.tmpdir\",\n+                    tmp.getParentFile(),\n+                    is(new File(System.getProperty(\"java.io.tmpdir\"))));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as String to valid directory\n+     */\n+    @Test\n+    public void attributeWithStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toString());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidFileDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toFile());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as Path to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidPathDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp);\n+        // FIXME we should have an exception here\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithInvalidStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"/French/Cheese/Rocks\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value (wrong permission to write into it)\n+     * IllegalStateException\n+     */\n+    @Disabled(\"will fail if executed as root or super power user so Disabled it\")\n+    public void attributeWithInvalidPermissionStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62b71344d72f35e41def5a1dc8388d8e5d87f202"}, "originalPosition": 135}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "531472f67a2664cd0a1caf5b339b622519fabd56", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/531472f67a2664cd0a1caf5b339b622519fabd56", "committedDate": "2020-10-21T13:36:36Z", "message": "add testing for tmp dir after hot redeploy of context\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02b5142e45067d4ddc5f4fd681d0a84b2255e19b", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/02b5142e45067d4ddc5f4fd681d0a84b2255e19b", "committedDate": "2020-11-10T23:22:51Z", "message": "disable failing attributeWithInvalidStringValue test\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf8cab5beb35d00b6bdd29e439ac7edbf1653a62", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/cf8cab5beb35d00b6bdd29e439ac7edbf1653a62", "committedDate": "2020-11-11T04:52:09Z", "message": "fix checkstyle issues\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2964714c8acd1ce2bf0bab61e3338e3a1b3b4a20", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/2964714c8acd1ce2bf0bab61e3338e3a1b3b4a20", "committedDate": "2020-11-11T05:11:08Z", "message": "move webapp temp dir tests to single file\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34adb9bddcb9455f7ae3381229b5e3118b40bb5a", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/34adb9bddcb9455f7ae3381229b5e3118b40bb5a", "committedDate": "2020-11-12T03:43:18Z", "message": "improve testing for webapp temp directories\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NzMwNjQ5", "url": "https://github.com/eclipse/jetty.project/pull/5483#pullrequestreview-528730649", "createdAt": "2020-11-12T03:47:51Z", "commit": {"oid": "34adb9bddcb9455f7ae3381229b5e3118b40bb5a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo0Nzo1MVrOHxo7Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo1MTo0NFrOHxpFHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMjc5OA==", "bodyText": "@olamy how is this different to the attributeWithNonExistentDirectory test?\nI don't think /French/Cheese/Rocks is  an invalid value, just a directory which doesn't exist. This could be why it was failing CI but passes for me locally, because in CI we are running as root so we do have permission to create this.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r521812798", "createdAt": "2020-11-12T03:47:51Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/TempDirTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.servlet.ServletContext;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TempDirTest\n+{\n+    private Server server;\n+    private WebAppContext webapp;\n+\n+    public void setupServer()\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        File testWebAppDir = MavenTestingUtils.getProjectDir(\"src/test/webapp\");\n+        webapp = new WebAppContext();\n+        webapp.setContextPath(\"/\");\n+        webapp.setWar(testWebAppDir.getAbsolutePath());\n+        server.setHandler(webapp);\n+    }\n+\n+    @AfterEach\n+    public void stopServer() throws Exception\n+    {\n+        if (server != null)\n+            server.stop();\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().getParent(), is(System.getProperty(\"java.io.tmpdir\")));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * Test ServletContext.TEMPDIR as valid directory with types File, String and Path.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithValidDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\");\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().toPath(), is(tmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to a non existent directory.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithNonExistentDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\").resolve(\"foo_test_tmp\");\n+        Files.deleteIfExists(tmpDir);\n+        assertFalse(Files.exists(tmpDir));\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        Path webappTmpDir = webAppContext.getTempDirectory().toPath();\n+        assertThat(webappTmpDir, is(tmpDir));\n+        assertTrue(Files.exists(webappTmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value\n+     * IllegalStateException\n+     */\n+    @Disabled\n+    @Test\n+    public void attributeWithInvalidStringValue() throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34adb9bddcb9455f7ae3381229b5e3118b40bb5a"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxNTMyNw==", "bodyText": "@olamy if we can't test this in CI should we remove this test?\nIf you want I could try the docker/testcontainers approach to test this if you think its worth the effort.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r521815327", "createdAt": "2020-11-12T03:51:44Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/TempDirTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.servlet.ServletContext;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TempDirTest\n+{\n+    private Server server;\n+    private WebAppContext webapp;\n+\n+    public void setupServer()\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        File testWebAppDir = MavenTestingUtils.getProjectDir(\"src/test/webapp\");\n+        webapp = new WebAppContext();\n+        webapp.setContextPath(\"/\");\n+        webapp.setWar(testWebAppDir.getAbsolutePath());\n+        server.setHandler(webapp);\n+    }\n+\n+    @AfterEach\n+    public void stopServer() throws Exception\n+    {\n+        if (server != null)\n+            server.stop();\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().getParent(), is(System.getProperty(\"java.io.tmpdir\")));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * Test ServletContext.TEMPDIR as valid directory with types File, String and Path.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithValidDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\");\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().toPath(), is(tmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to a non existent directory.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithNonExistentDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\").resolve(\"foo_test_tmp\");\n+        Files.deleteIfExists(tmpDir);\n+        assertFalse(Files.exists(tmpDir));\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        Path webappTmpDir = webAppContext.getTempDirectory().toPath();\n+        assertThat(webappTmpDir, is(tmpDir));\n+        assertTrue(Files.exists(webappTmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value\n+     * IllegalStateException\n+     */\n+    @Disabled\n+    @Test\n+    public void attributeWithInvalidStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"/French/Cheese/Rocks\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value (wrong permission to write into it)\n+     * IllegalStateException\n+     */\n+    @Disabled(\"will fail if executed as root or super power user so Disabled it\")\n+    public void attributeWithInvalidPermissionStringValue() throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34adb9bddcb9455f7ae3381229b5e3118b40bb5a"}, "originalPosition": 179}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1329115158c2a35f59150b6e0f1d95049217b648", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/1329115158c2a35f59150b6e0f1d95049217b648", "committedDate": "2020-11-12T06:42:22Z", "message": "throw if tempDir attribute was an unknown type\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23a2e70dcf01c070f64edbe021c37aab5c527bc3", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/23a2e70dcf01c070f64edbe021c37aab5c527bc3", "committedDate": "2020-12-09T05:51:35Z", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-TempDirTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9f4180dd56e170e345a5261812e5571c64990e8", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/e9f4180dd56e170e345a5261812e5571c64990e8", "committedDate": "2020-12-15T06:31:16Z", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-TempDirTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07f663283f976d5da6e854bcd8e0956d0119a102", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/07f663283f976d5da6e854bcd8e0956d0119a102", "committedDate": "2020-12-15T06:52:35Z", "message": "Attempt to fix broken tests on Jenkins for DeploymentTempDirTest\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eaf4444664360d835f55c1f12c26ce635342832", "author": {"user": {"login": "olamy", "name": "Olivier Lamy"}}, "url": "https://github.com/eclipse/jetty.project/commit/3eaf4444664360d835f55c1f12c26ce635342832", "committedDate": "2020-12-29T02:18:04Z", "message": "increase timeout for CI\n\nSigned-off-by: olivier lamy <oliver.lamy@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "043693c4800d88c4cec31578a46983671c9d1abf", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/043693c4800d88c4cec31578a46983671c9d1abf", "committedDate": "2021-02-15T23:43:04Z", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-TempDirTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27e6e75a5025782f7cfaa23ab2866055ee7295fc", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/27e6e75a5025782f7cfaa23ab2866055ee7295fc", "committedDate": "2021-02-16T02:31:29Z", "message": "Disable DeploymentTempDirTest\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "033397c4b674e66fd614855b5765b3411d24bf71", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/033397c4b674e66fd614855b5765b3411d24bf71", "committedDate": "2021-02-16T00:14:37Z", "message": "Disable DeploymentTempDirTest\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}, "afterCommit": {"oid": "27e6e75a5025782f7cfaa23ab2866055ee7295fc", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/27e6e75a5025782f7cfaa23ab2866055ee7295fc", "committedDate": "2021-02-16T02:31:29Z", "message": "Disable DeploymentTempDirTest\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3aa892e2631db26823d9d49ce056fe675b5071e", "author": {"user": {"login": "olamy", "name": "Olivier Lamy"}}, "url": "https://github.com/eclipse/jetty.project/commit/a3aa892e2631db26823d9d49ce056fe675b5071e", "committedDate": "2021-03-02T06:06:07Z", "message": "enable again test to try debug the issue\n\nSigned-off-by: olivier lamy <oliver.lamy@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0462e9eb407842a374c8911da01139fc6ee6401", "author": {"user": {"login": "olamy", "name": "Olivier Lamy"}}, "url": "https://github.com/eclipse/jetty.project/commit/f0462e9eb407842a374c8911da01139fc6ee6401", "committedDate": "2021-03-02T06:17:39Z", "message": "add some debug informations\n\nSigned-off-by: olivier lamy <oliver.lamy@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbb48033c859f8c195eb96a68d5db5c019d80bf1", "author": {"user": {"login": "olamy", "name": "Olivier Lamy"}}, "url": "https://github.com/eclipse/jetty.project/commit/cbb48033c859f8c195eb96a68d5db5c019d80bf1", "committedDate": "2021-03-02T09:25:16Z", "message": "more debug\n\nSigned-off-by: olivier lamy <oliver.lamy@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf2ffa3d75ea54c8bb6c053c3e2be45347206a2b", "author": {"user": {"login": "olamy", "name": "Olivier Lamy"}}, "url": "https://github.com/eclipse/jetty.project/commit/bf2ffa3d75ea54c8bb6c053c3e2be45347206a2b", "committedDate": "2021-03-02T10:24:35Z", "message": "more debug\n\nSigned-off-by: olivier lamy <oliver.lamy@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa3e52aaabce4759c7ee00a8052b764079bf8b49", "author": {"user": {"login": "olamy", "name": "Olivier Lamy"}}, "url": "https://github.com/eclipse/jetty.project/commit/fa3e52aaabce4759c7ee00a8052b764079bf8b49", "committedDate": "2021-03-02T11:06:42Z", "message": "fix logging debug\n\nSigned-off-by: olivier lamy <oliver.lamy@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c968321aeaac613e673cff7f015c29fce4cdb6af", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/c968321aeaac613e673cff7f015c29fce4cdb6af", "committedDate": "2021-03-19T02:39:16Z", "message": "Fix bug in DeploymentTempDirTest.\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f7fb5bf8bee9512020eaf087d866bb1bc95fefa", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/4f7fb5bf8bee9512020eaf087d866bb1bc95fefa", "committedDate": "2021-03-19T02:39:41Z", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-TempDirTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/4ab3ae4f6ed7145336e96a2455102661733a41c1", "committedDate": "2021-03-19T06:10:16Z", "message": "Cleanup jetty-logging.properties file for jetty-deploy tests.\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjE3MDc4MzM2", "url": "https://github.com/eclipse/jetty.project/pull/5483#pullrequestreview-617078336", "createdAt": "2021-03-21T23:50:39Z", "commit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjE3MTY3MDY2", "url": "https://github.com/eclipse/jetty.project/pull/5483#pullrequestreview-617167066", "createdAt": "2021-03-22T05:50:45Z", "commit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQwNTo1MDo0NlrOI6t4AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQwNjo0NTozM1rOI6vADw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQzOTkzNg==", "bodyText": "Isn't this going to add yet another connector for every test? The Server instance is durable across every test ...", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r598439936", "createdAt": "2021-03-22T05:50:46Z", "author": {"login": "janbartel"}, "path": "jetty-deploy/src/test/java/org/eclipse/jetty/deploy/DeploymentTempDirTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.deploy;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jetty.deploy.providers.WebAppProvider;\n+import org.eclipse.jetty.server.Handler;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.handler.ContextHandlerCollection;\n+import org.eclipse.jetty.server.handler.DefaultHandler;\n+import org.eclipse.jetty.server.handler.HandlerCollection;\n+import org.eclipse.jetty.toolchain.test.FS;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.eclipse.jetty.util.Scanner;\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DeploymentTempDirTest\n+{\n+    private static final Logger LOG = Log.getLogger(DeploymentTempDirTest.class);\n+\n+    private final WebAppProvider webAppProvider = new WebAppProvider();\n+    private final ContextHandlerCollection contexts = new ContextHandlerCollection();\n+    private final Path testDir = MavenTestingUtils.getTargetTestingPath(DeploymentTempDirTest.class.getSimpleName());\n+    private final Path tmpDir = testDir.resolve(\"tmpDir\");\n+    private final Path webapps = testDir.resolve(\"webapps\");\n+    private final Server server = new Server();\n+\n+    @BeforeEach\n+    public void setup() throws Exception\n+    {\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ0NjgxNQ==", "bodyText": "Need to update the javadoc for this method to say it supports Path type.\nI'm not convinced about throwing ISE - the behaviour of this method has always been to return null as the fall through, and the resolveTempDirectory method would go on to make a custom tmp directory. If you throw ISE this will stop the deployment. Maybe just LOG.WARN instead?", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r598446815", "createdAt": "2021-03-22T06:11:54Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java", "diffHunk": "@@ -478,18 +478,15 @@ public void resolveTempDirectory(WebAppContext context)\n     private File asFile(Object fileattr)\n     {\n         if (fileattr == null)\n-        {\n             return null;\n-        }\n         if (fileattr instanceof File)\n-        {\n             return (File)fileattr;\n-        }\n         if (fileattr instanceof String)\n-        {\n             return new File((String)fileattr);\n-        }\n-        return null;\n+        if (fileattr instanceof Path)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ0NzA5Ng==", "bodyText": "It's not \"but\" but \"so\" or \"therefore\".", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r598447096", "createdAt": "2021-03-22T06:12:46Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/TempDirTest.java", "diffHunk": "@@ -0,0 +1,265 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.servlet.ServletContext;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TempDirTest\n+{\n+    private Server server;\n+    private WebAppContext webapp;\n+\n+    public void setupServer()\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        File testWebAppDir = MavenTestingUtils.getProjectDir(\"src/test/webapp\");\n+        webapp = new WebAppContext();\n+        webapp.setContextPath(\"/\");\n+        webapp.setWar(testWebAppDir.getAbsolutePath());\n+        server.setHandler(webapp);\n+    }\n+\n+    @AfterEach\n+    public void stopServer() throws Exception\n+    {\n+        if (server != null)\n+            server.stop();\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ0OTg2OQ==", "bodyText": "Need tests for using the WebAppContext.BASETEMPDIR, and for using $jetty.base/work dir.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r598449869", "createdAt": "2021-03-22T06:21:09Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/TempDirTest.java", "diffHunk": "@@ -0,0 +1,265 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.servlet.ServletContext;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TempDirTest\n+{\n+    private Server server;\n+    private WebAppContext webapp;\n+\n+    public void setupServer()\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        File testWebAppDir = MavenTestingUtils.getProjectDir(\"src/test/webapp\");\n+        webapp = new WebAppContext();\n+        webapp.setContextPath(\"/\");\n+        webapp.setWar(testWebAppDir.getAbsolutePath());\n+        server.setHandler(webapp);\n+    }\n+\n+    @AfterEach\n+    public void stopServer() throws Exception\n+    {\n+        if (server != null)\n+            server.stop();\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().getParent(), is(System.getProperty(\"java.io.tmpdir\")));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has value which is not a known type.\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithInvalidValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, new Object());\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * Test ServletContext.TEMPDIR as valid directory with types File, String and Path.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithValidDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\");\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().toPath(), is(tmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to a non existent directory.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithNonExistentDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\").resolve(\"foo_test_tmp\");\n+        Files.deleteIfExists(tmpDir);\n+        assertFalse(Files.exists(tmpDir));\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        Path webappTmpDir = webAppContext.getTempDirectory().toPath();\n+        assertThat(webappTmpDir, is(tmpDir));\n+        assertTrue(Files.exists(webappTmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value (wrong permission to write into it)\n+     * IllegalStateException\n+     */\n+    @Disabled(\"Jenkins will run as root so we do have permission to write to this directory.\")\n+    public void attributeWithInvalidPermissions() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"/var/foo_jetty\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void testDefaultTempDirectory(boolean persistTempDir) throws Exception\n+    {\n+        setupServer();\n+        webapp.setPersistTempDirectory(persistTempDir);\n+\n+        // Temp Directory Initially isn't set until started.\n+        File tempDirectory = webapp.getTempDirectory();\n+        assertNull(tempDirectory);\n+\n+        // Once server is started the WebApp temp directory exists and is valid directory.\n+        server.start();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertNotNull(tempDirectory);\n+        assertTrue(tempDirectory.exists());\n+        assertTrue(tempDirectory.isDirectory());\n+\n+        // Once server is stopped the WebApp temp should be deleted if persistTempDir is false.\n+        server.stop();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertThat(tempDirectory != null && tempDirectory.exists(), is(persistTempDir));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void testPreDefinedTempDirectory(boolean persistTempDir) throws Exception\n+    {\n+        setupServer();\n+        webapp.setPersistTempDirectory(persistTempDir);\n+\n+        // The temp directory is defined but has not been created.\n+        File webappTempDir = MavenTestingUtils.getTargetTestingPath(\"webappTempDir\").toFile();\n+        IO.delete(webappTempDir);\n+        webapp.setTempDirectory(webappTempDir);\n+        assertThat(webapp.getTempDirectory(), is(webappTempDir));\n+        assertFalse(webappTempDir.exists());\n+\n+        // Once server is started the WebApp temp directory exists and is valid directory.\n+        server.start();\n+        File tempDirectory = webapp.getTempDirectory();\n+        assertNotNull(tempDirectory);\n+        assertTrue(tempDirectory.exists());\n+        assertTrue(tempDirectory.isDirectory());\n+\n+        // Once server is stopped the WebApp temp should be deleted if persistTempDir is false.\n+        server.stop();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertThat(tempDirectory != null && tempDirectory.exists(), is(persistTempDir));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void testPreExistingTempDirectory(boolean persistTempDir) throws Exception\n+    {\n+        setupServer();\n+        webapp.setPersistTempDirectory(persistTempDir);\n+\n+        // The temp directory is defined and has already been created.\n+        File webappTempDir = MavenTestingUtils.getTargetTestingPath(\"webappTempDir\").toFile();\n+        IO.delete(webappTempDir);\n+        if (!webappTempDir.exists())\n+            assertTrue(webappTempDir.mkdir());\n+        webapp.setTempDirectory(webappTempDir);\n+        assertThat(webapp.getTempDirectory(), is(webappTempDir));\n+        assertTrue(webappTempDir.exists());\n+\n+        // Once server is started the WebApp temp directory exists and is valid directory.\n+        server.start();\n+        File tempDirectory = webapp.getTempDirectory();\n+        assertNotNull(tempDirectory);\n+        assertTrue(tempDirectory.exists());\n+        assertTrue(tempDirectory.isDirectory());\n+\n+        // Once server is stopped the WebApp temp should be deleted if persistTempDir is false.\n+        server.stop();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertThat(tempDirectory != null && tempDirectory.exists(), is(persistTempDir));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ1MDExMw==", "bodyText": "Does default INFO level output too much logging?", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r598450113", "createdAt": "2021-03-22T06:22:00Z", "author": {"login": "janbartel"}, "path": "jetty-deploy/src/test/resources/jetty-logging.properties", "diffHunk": "@@ -1,3 +1,4 @@\n org.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.StdErrLog\n-org.eclipse.jetty.deploy.LEVEL=WARN\n-org.eclipse.jetty.util.Scanner=WARN\n+#org.eclipse.jetty.deploy.DeploymentTempDirTest.LEVEL=DEBUG\n+#org.eclipse.jetty.deploy.LEVEL=DEBUG\n+#org.eclipse.jetty.util.Scanner=DEBUG", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ1MTQ5MA==", "bodyText": "The name of the war file and the name of the context xml file must be the same, otherwise the deployer thinks they are 2 different deployables.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r598451490", "createdAt": "2021-03-22T06:25:58Z", "author": {"login": "janbartel"}, "path": "jetty-deploy/src/test/java/org/eclipse/jetty/deploy/DeploymentTempDirTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.deploy;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jetty.deploy.providers.WebAppProvider;\n+import org.eclipse.jetty.server.Handler;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.handler.ContextHandlerCollection;\n+import org.eclipse.jetty.server.handler.DefaultHandler;\n+import org.eclipse.jetty.server.handler.HandlerCollection;\n+import org.eclipse.jetty.toolchain.test.FS;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.eclipse.jetty.util.Scanner;\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DeploymentTempDirTest\n+{\n+    private static final Logger LOG = Log.getLogger(DeploymentTempDirTest.class);\n+\n+    private final WebAppProvider webAppProvider = new WebAppProvider();\n+    private final ContextHandlerCollection contexts = new ContextHandlerCollection();\n+    private final Path testDir = MavenTestingUtils.getTargetTestingPath(DeploymentTempDirTest.class.getSimpleName());\n+    private final Path tmpDir = testDir.resolve(\"tmpDir\");\n+    private final Path webapps = testDir.resolve(\"webapps\");\n+    private final Server server = new Server();\n+\n+    @BeforeEach\n+    public void setup() throws Exception\n+    {\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        FS.ensureEmpty(testDir);\n+        FS.ensureEmpty(tmpDir);\n+        FS.ensureEmpty(webapps);\n+\n+        webAppProvider.setMonitoredDirName(webapps.toString());\n+        DeploymentManager deploymentManager = new DeploymentManager();\n+        deploymentManager.addAppProvider(webAppProvider);\n+        server.addBean(deploymentManager);\n+\n+        HandlerCollection handlerCollection = new HandlerCollection();\n+        handlerCollection.addHandler(contexts);\n+        handlerCollection.addHandler(new DefaultHandler());\n+        deploymentManager.setContexts(contexts);\n+        server.setHandler(handlerCollection);\n+    }\n+\n+    @AfterEach\n+    public void stop() throws Exception\n+    {\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testTmpDirectory() throws Exception\n+    {\n+        Path warPath = MavenTestingUtils.getTestResourcePath(\"webapps/foo-webapp-1.war\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ1NTE5OA==", "bodyText": "Why are there explicit calls to scan()? The DeploymentManager was added to the server, and the WebAppProvider added to it, so both will start when the server starts and start scanning at the default interval of 10. You should either set the interval to 0 and do your own calls to scan() or remove them and change the scan interval to what you want.\nAlso, I don't  think you should rely on the order of the scanner listeners: it could be the case that your listener gets called back before the WebAppProvider's listener - I don't think the scanner makes any promises as to the ordering of the calls (although from code inspection you can see what is implemented, but I think that's a fragile way to do it).", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r598455198", "createdAt": "2021-03-22T06:36:44Z", "author": {"login": "janbartel"}, "path": "jetty-deploy/src/test/java/org/eclipse/jetty/deploy/DeploymentTempDirTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.deploy;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jetty.deploy.providers.WebAppProvider;\n+import org.eclipse.jetty.server.Handler;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.handler.ContextHandlerCollection;\n+import org.eclipse.jetty.server.handler.DefaultHandler;\n+import org.eclipse.jetty.server.handler.HandlerCollection;\n+import org.eclipse.jetty.toolchain.test.FS;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.eclipse.jetty.util.Scanner;\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DeploymentTempDirTest\n+{\n+    private static final Logger LOG = Log.getLogger(DeploymentTempDirTest.class);\n+\n+    private final WebAppProvider webAppProvider = new WebAppProvider();\n+    private final ContextHandlerCollection contexts = new ContextHandlerCollection();\n+    private final Path testDir = MavenTestingUtils.getTargetTestingPath(DeploymentTempDirTest.class.getSimpleName());\n+    private final Path tmpDir = testDir.resolve(\"tmpDir\");\n+    private final Path webapps = testDir.resolve(\"webapps\");\n+    private final Server server = new Server();\n+\n+    @BeforeEach\n+    public void setup() throws Exception\n+    {\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        FS.ensureEmpty(testDir);\n+        FS.ensureEmpty(tmpDir);\n+        FS.ensureEmpty(webapps);\n+\n+        webAppProvider.setMonitoredDirName(webapps.toString());\n+        DeploymentManager deploymentManager = new DeploymentManager();\n+        deploymentManager.addAppProvider(webAppProvider);\n+        server.addBean(deploymentManager);\n+\n+        HandlerCollection handlerCollection = new HandlerCollection();\n+        handlerCollection.addHandler(contexts);\n+        handlerCollection.addHandler(new DefaultHandler());\n+        deploymentManager.setContexts(contexts);\n+        server.setHandler(handlerCollection);\n+    }\n+\n+    @AfterEach\n+    public void stop() throws Exception\n+    {\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testTmpDirectory() throws Exception\n+    {\n+        Path warPath = MavenTestingUtils.getTestResourcePath(\"webapps/foo-webapp-1.war\");\n+        String deploymentXml = \"<Configure class=\\\"org.eclipse.jetty.webapp.WebAppContext\\\">\\n\" +\n+            \"<Set name=\\\"war\\\">\" + warPath + \"</Set>\\n\" +\n+            \"<Set name=\\\"tempDirectory\\\">\" + tmpDir + \"</Set>\\n\" +\n+            \"<Set name=\\\"persistTempDirectory\\\">false</Set>\\n\" +\n+            \"</Configure>\";\n+\n+        server.start();\n+        WaitScannerListener listener = new WaitScannerListener();\n+        webAppProvider.addScannerListener(listener);\n+\n+        // Add the webapp xml which will will be detected after scan.\n+        listener.reset();\n+        createNewFile(webapps, \"foo-webapp.xml\", deploymentXml);\n+        webAppProvider.scan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ1ODM4Mw==", "bodyText": "Put a comment in here that we expect that on a redeploy, as persist == false, we expect the tmp directory to be deleted and re-created, so therefore this marker file should disappear.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r598458383", "createdAt": "2021-03-22T06:45:33Z", "author": {"login": "janbartel"}, "path": "jetty-deploy/src/test/java/org/eclipse/jetty/deploy/DeploymentTempDirTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.deploy;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jetty.deploy.providers.WebAppProvider;\n+import org.eclipse.jetty.server.Handler;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.handler.ContextHandlerCollection;\n+import org.eclipse.jetty.server.handler.DefaultHandler;\n+import org.eclipse.jetty.server.handler.HandlerCollection;\n+import org.eclipse.jetty.toolchain.test.FS;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.eclipse.jetty.util.Scanner;\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DeploymentTempDirTest\n+{\n+    private static final Logger LOG = Log.getLogger(DeploymentTempDirTest.class);\n+\n+    private final WebAppProvider webAppProvider = new WebAppProvider();\n+    private final ContextHandlerCollection contexts = new ContextHandlerCollection();\n+    private final Path testDir = MavenTestingUtils.getTargetTestingPath(DeploymentTempDirTest.class.getSimpleName());\n+    private final Path tmpDir = testDir.resolve(\"tmpDir\");\n+    private final Path webapps = testDir.resolve(\"webapps\");\n+    private final Server server = new Server();\n+\n+    @BeforeEach\n+    public void setup() throws Exception\n+    {\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        FS.ensureEmpty(testDir);\n+        FS.ensureEmpty(tmpDir);\n+        FS.ensureEmpty(webapps);\n+\n+        webAppProvider.setMonitoredDirName(webapps.toString());\n+        DeploymentManager deploymentManager = new DeploymentManager();\n+        deploymentManager.addAppProvider(webAppProvider);\n+        server.addBean(deploymentManager);\n+\n+        HandlerCollection handlerCollection = new HandlerCollection();\n+        handlerCollection.addHandler(contexts);\n+        handlerCollection.addHandler(new DefaultHandler());\n+        deploymentManager.setContexts(contexts);\n+        server.setHandler(handlerCollection);\n+    }\n+\n+    @AfterEach\n+    public void stop() throws Exception\n+    {\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testTmpDirectory() throws Exception\n+    {\n+        Path warPath = MavenTestingUtils.getTestResourcePath(\"webapps/foo-webapp-1.war\");\n+        String deploymentXml = \"<Configure class=\\\"org.eclipse.jetty.webapp.WebAppContext\\\">\\n\" +\n+            \"<Set name=\\\"war\\\">\" + warPath + \"</Set>\\n\" +\n+            \"<Set name=\\\"tempDirectory\\\">\" + tmpDir + \"</Set>\\n\" +\n+            \"<Set name=\\\"persistTempDirectory\\\">false</Set>\\n\" +\n+            \"</Configure>\";\n+\n+        server.start();\n+        WaitScannerListener listener = new WaitScannerListener();\n+        webAppProvider.addScannerListener(listener);\n+\n+        // Add the webapp xml which will will be detected after scan.\n+        listener.reset();\n+        createNewFile(webapps, \"foo-webapp.xml\", deploymentXml);\n+        webAppProvider.scan();\n+        webAppProvider.scan();\n+        listener.future.get(5, TimeUnit.SECONDS);\n+        WebAppContext webAppContext = getWebAppContext();\n+        assertThat(webAppContext.getTempDirectory(), is(tmpDir.toFile()));\n+\n+        // Add a known file to the temp directory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 117}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6baa159aa73f0b55441e4697970cce93bd77a72a", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/6baa159aa73f0b55441e4697970cce93bd77a72a", "committedDate": "2021-03-24T05:01:24Z", "message": "Changes from review.\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5b9ff8ce23f0ad19aa4a01ea56bdf6f581bafec", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/c5b9ff8ce23f0ad19aa4a01ea56bdf6f581bafec", "committedDate": "2021-03-24T06:01:53Z", "message": "add tests for WebAppContext base tempDir\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI0NzkwMTAx", "url": "https://github.com/eclipse/jetty.project/pull/5483#pullrequestreview-624790101", "createdAt": "2021-03-30T23:52:19Z", "commit": {"oid": "c5b9ff8ce23f0ad19aa4a01ea56bdf6f581bafec"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0zMFQyMzo1MjoyMFrOJAf_Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0zMFQyMzo1MjoyMFrOJAf_Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDUwMzkwNw==", "bodyText": "Did you add tests for these 2 cases yet?", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r604503907", "createdAt": "2021-03-30T23:52:20Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/TempDirTest.java", "diffHunk": "@@ -0,0 +1,265 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.servlet.ServletContext;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TempDirTest\n+{\n+    private Server server;\n+    private WebAppContext webapp;\n+\n+    public void setupServer()\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        File testWebAppDir = MavenTestingUtils.getProjectDir(\"src/test/webapp\");\n+        webapp = new WebAppContext();\n+        webapp.setContextPath(\"/\");\n+        webapp.setWar(testWebAppDir.getAbsolutePath());\n+        server.setHandler(webapp);\n+    }\n+\n+    @AfterEach\n+    public void stopServer() throws Exception\n+    {\n+        if (server != null)\n+            server.stop();\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().getParent(), is(System.getProperty(\"java.io.tmpdir\")));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has value which is not a known type.\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithInvalidValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, new Object());\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * Test ServletContext.TEMPDIR as valid directory with types File, String and Path.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithValidDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\");\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().toPath(), is(tmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to a non existent directory.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithNonExistentDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\").resolve(\"foo_test_tmp\");\n+        Files.deleteIfExists(tmpDir);\n+        assertFalse(Files.exists(tmpDir));\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        Path webappTmpDir = webAppContext.getTempDirectory().toPath();\n+        assertThat(webappTmpDir, is(tmpDir));\n+        assertTrue(Files.exists(webappTmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value (wrong permission to write into it)\n+     * IllegalStateException\n+     */\n+    @Disabled(\"Jenkins will run as root so we do have permission to write to this directory.\")\n+    public void attributeWithInvalidPermissions() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"/var/foo_jetty\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void testDefaultTempDirectory(boolean persistTempDir) throws Exception\n+    {\n+        setupServer();\n+        webapp.setPersistTempDirectory(persistTempDir);\n+\n+        // Temp Directory Initially isn't set until started.\n+        File tempDirectory = webapp.getTempDirectory();\n+        assertNull(tempDirectory);\n+\n+        // Once server is started the WebApp temp directory exists and is valid directory.\n+        server.start();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertNotNull(tempDirectory);\n+        assertTrue(tempDirectory.exists());\n+        assertTrue(tempDirectory.isDirectory());\n+\n+        // Once server is stopped the WebApp temp should be deleted if persistTempDir is false.\n+        server.stop();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertThat(tempDirectory != null && tempDirectory.exists(), is(persistTempDir));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void testPreDefinedTempDirectory(boolean persistTempDir) throws Exception\n+    {\n+        setupServer();\n+        webapp.setPersistTempDirectory(persistTempDir);\n+\n+        // The temp directory is defined but has not been created.\n+        File webappTempDir = MavenTestingUtils.getTargetTestingPath(\"webappTempDir\").toFile();\n+        IO.delete(webappTempDir);\n+        webapp.setTempDirectory(webappTempDir);\n+        assertThat(webapp.getTempDirectory(), is(webappTempDir));\n+        assertFalse(webappTempDir.exists());\n+\n+        // Once server is started the WebApp temp directory exists and is valid directory.\n+        server.start();\n+        File tempDirectory = webapp.getTempDirectory();\n+        assertNotNull(tempDirectory);\n+        assertTrue(tempDirectory.exists());\n+        assertTrue(tempDirectory.isDirectory());\n+\n+        // Once server is stopped the WebApp temp should be deleted if persistTempDir is false.\n+        server.stop();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertThat(tempDirectory != null && tempDirectory.exists(), is(persistTempDir));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void testPreExistingTempDirectory(boolean persistTempDir) throws Exception\n+    {\n+        setupServer();\n+        webapp.setPersistTempDirectory(persistTempDir);\n+\n+        // The temp directory is defined and has already been created.\n+        File webappTempDir = MavenTestingUtils.getTargetTestingPath(\"webappTempDir\").toFile();\n+        IO.delete(webappTempDir);\n+        if (!webappTempDir.exists())\n+            assertTrue(webappTempDir.mkdir());\n+        webapp.setTempDirectory(webappTempDir);\n+        assertThat(webapp.getTempDirectory(), is(webappTempDir));\n+        assertTrue(webappTempDir.exists());\n+\n+        // Once server is started the WebApp temp directory exists and is valid directory.\n+        server.start();\n+        File tempDirectory = webapp.getTempDirectory();\n+        assertNotNull(tempDirectory);\n+        assertTrue(tempDirectory.exists());\n+        assertTrue(tempDirectory.isDirectory());\n+\n+        // Once server is stopped the WebApp temp should be deleted if persistTempDir is false.\n+        server.stop();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertThat(tempDirectory != null && tempDirectory.exists(), is(persistTempDir));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ0OTg2OQ=="}, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 264}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a01da052e518afcc785864ec1f9e8a7404e9f3a5", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/a01da052e518afcc785864ec1f9e8a7404e9f3a5", "committedDate": "2021-03-31T03:35:03Z", "message": "Remove validation of correct object type for temp directories.\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ea65d486ea4a9f89d953cce7368e2d54a5bb127", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/7ea65d486ea4a9f89d953cce7368e2d54a5bb127", "committedDate": "2021-03-31T03:35:45Z", "message": "Add tests for jetty.base/work directory as temp directory.\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI2NzEzMTUy", "url": "https://github.com/eclipse/jetty.project/pull/5483#pullrequestreview-626713152", "createdAt": "2021-04-01T23:38:39Z", "commit": {"oid": "7ea65d486ea4a9f89d953cce7368e2d54a5bb127"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4981, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}