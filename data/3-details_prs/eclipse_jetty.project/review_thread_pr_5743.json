{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMTU2OTE1", "number": 5743, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTozMjo1NlrOE_Co-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTozMjo1NlrOE_Co-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NTM5MDAyOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTozMjo1NlrOH8hXJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDoxNTowMlrOH8kkPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIyMzIwNQ==", "bodyText": "Would it not be better to do all the removals whilst the lock is held and only do the closing after releasing the lock:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<Entry> copy;\n          \n          \n            \n                    try (Locker.Lock l = locker.lock())\n          \n          \n            \n                    {\n          \n          \n            \n                        copy = new ArrayList<>(entries);\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    // Iterate the copy and close overused entries.\n          \n          \n            \n                    for (Entry entry : copy)\n          \n          \n            \n                    {\n          \n          \n            \n                        if (entry.isIdleAndOverUsed() && remove(entry) && entry.pooled instanceof Closeable)\n          \n          \n            \n                            IO.close((Closeable)entry.pooled);\n          \n          \n            \n                    }\n          \n          \n            \n                    List<Entry> overused = new ArrayList();\n          \n          \n            \n                    try (Locker.Lock l = locker.lock())\n          \n          \n            \n                    {\n          \n          \n            \n                        // look for overused here and if found remove from entries and add to overused\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    // Iterate the copy and close overused entries.\n          \n          \n            \n                    for (Entry entry : overused)\n          \n          \n            \n                    {\n          \n          \n            \n                        if (entry.pooled instanceof Closeable)\n          \n          \n            \n                            IO.close((Closeable)entry.pooled);\n          \n          \n            \n                    }", "url": "https://github.com/eclipse/jetty.project/pull/5743#discussion_r533223205", "createdAt": "2020-12-01T09:32:56Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -166,16 +166,42 @@ public final void setMaxMultiplex(int maxMultiplex)\n         this.maxMultiplex = maxMultiplex;\n     }\n \n+    /**\n+     * Get the maximum number of times the entries of the pool\n+     * can be acquired.\n+     * @return the max usage count.\n+     */\n     public int getMaxUsageCount()\n     {\n         return maxUsageCount;\n     }\n \n+    /**\n+     * Change the max usage count of the pool's entries. All existing\n+     * idle entries over this new max usage are removed and closed.\n+     * @param maxUsageCount the max usage count.\n+     */\n     public final void setMaxUsageCount(int maxUsageCount)\n     {\n         if (maxUsageCount == 0)\n             throw new IllegalArgumentException(\"Max usage count must be != 0\");\n         this.maxUsageCount = maxUsageCount;\n+\n+        if (closed)\n+            return;\n+\n+        List<Entry> copy;\n+        try (Locker.Lock l = locker.lock())\n+        {\n+            copy = new ArrayList<>(entries);\n+        }\n+\n+        // Iterate the copy and close overused entries.\n+        for (Entry entry : copy)\n+        {\n+            if (entry.isIdleAndOverUsed() && remove(entry) && entry.pooled instanceof Closeable)\n+                IO.close((Closeable)entry.pooled);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2c480124fa71cd1abc019e390fdde7cc547186f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI3NTcxMA==", "bodyText": "Good idea, that can even be improved a bit further. Let me get back to this.", "url": "https://github.com/eclipse/jetty.project/pull/5743#discussion_r533275710", "createdAt": "2020-12-01T10:15:02Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -166,16 +166,42 @@ public final void setMaxMultiplex(int maxMultiplex)\n         this.maxMultiplex = maxMultiplex;\n     }\n \n+    /**\n+     * Get the maximum number of times the entries of the pool\n+     * can be acquired.\n+     * @return the max usage count.\n+     */\n     public int getMaxUsageCount()\n     {\n         return maxUsageCount;\n     }\n \n+    /**\n+     * Change the max usage count of the pool's entries. All existing\n+     * idle entries over this new max usage are removed and closed.\n+     * @param maxUsageCount the max usage count.\n+     */\n     public final void setMaxUsageCount(int maxUsageCount)\n     {\n         if (maxUsageCount == 0)\n             throw new IllegalArgumentException(\"Max usage count must be != 0\");\n         this.maxUsageCount = maxUsageCount;\n+\n+        if (closed)\n+            return;\n+\n+        List<Entry> copy;\n+        try (Locker.Lock l = locker.lock())\n+        {\n+            copy = new ArrayList<>(entries);\n+        }\n+\n+        // Iterate the copy and close overused entries.\n+        for (Entry entry : copy)\n+        {\n+            if (entry.isIdleAndOverUsed() && remove(entry) && entry.pooled instanceof Closeable)\n+                IO.close((Closeable)entry.pooled);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIyMzIwNQ=="}, "originalCommit": {"oid": "e2c480124fa71cd1abc019e390fdde7cc547186f"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2066, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}