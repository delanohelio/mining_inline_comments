{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzOTYyNjkx", "number": 5125, "title": "Issue #5122 - Improve connection statistics for WebSocket", "bodyText": "Issue #5122\nAdd a WebSocketConnectionStatistics class which can be used to record only stats about WebSocket connections and not include stats from HTTP connections such as the upgrade requests.\nAlso put a managedAttribute on the SessionTracker to get information about the number of active WebSocket Sessions which works without having to configure the Connector statistics mechanism.", "createdAt": "2020-08-06T11:19:41Z", "url": "https://github.com/eclipse/jetty.project/pull/5125", "merged": true, "mergeCommit": {"oid": "cfd31b2cf52d22f77d2955cd1788800b0f75e0fa"}, "closed": true, "closedAt": "2020-08-18T22:04:48Z", "author": {"login": "lachlan-roberts"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8NZYxAH2gAyNDYzOTYyNjkxOmJlNDI5ZjA5MTAzODViMWMzYjc1MzU0OTAyN2QxMDEzNzdmYTFhZmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdABjQbgFqTQ2OTA0NDY4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "be429f0910385b1c3b753549027d101377fa1afd", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/be429f0910385b1c3b753549027d101377fa1afd", "committedDate": "2020-08-06T10:38:02Z", "message": "Issue #5122 - add specialized Connection.Listener for WebSocket ConnectionStatistics\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a3ff775d5bc285e066e5638623970496f32022d", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/8a3ff775d5bc285e066e5638623970496f32022d", "committedDate": "2020-08-06T10:45:06Z", "message": "Issue #5122 - make number of active WS Sessions a managed attribute on SessionTracker\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0OTEzMTY0", "url": "https://github.com/eclipse/jetty.project/pull/5125#pullrequestreview-464913164", "createdAt": "2020-08-11T09:48:06Z", "commit": {"oid": "8a3ff775d5bc285e066e5638623970496f32022d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOTo0ODowNlrOG-wgJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOTo0ODowNlrOG-wgJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ1OTU1Ng==", "bodyText": "I think this could be generalised as we now probably need the same thing for HTTP stats maybe HTTP2 stats etc.\nSo perhaps put a protected method into ConnectionStatistics that asks if a connection should be included.... perhaps with the default implementation checking in IncludeExcludeSet of classes?", "url": "https://github.com/eclipse/jetty.project/pull/5125#discussion_r468459556", "createdAt": "2020-08-11T09:48:06Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/util/WebSocketConnectionStatistics.java", "diffHunk": "@@ -0,0 +1,40 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.common.util;\n+\n+import org.eclipse.jetty.io.Connection;\n+import org.eclipse.jetty.io.ConnectionStatistics;\n+import org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection;\n+\n+public class WebSocketConnectionStatistics extends ConnectionStatistics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a3ff775d5bc285e066e5638623970496f32022d"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1663a6d7af9d85390fef6deb6d15cd7bce30263e", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/1663a6d7af9d85390fef6deb6d15cd7bce30263e", "committedDate": "2020-08-14T05:19:06Z", "message": "Issue #5125 - Generalise WebSocketConnectionStatistics into IncludeExcludeConnectionStatistics\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4Mjc5OTI0", "url": "https://github.com/eclipse/jetty.project/pull/5125#pullrequestreview-468279924", "createdAt": "2020-08-17T08:48:44Z", "commit": {"oid": "1663a6d7af9d85390fef6deb6d15cd7bce30263e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo0ODo0NFrOHBf6Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo1ODoxMVrOHBgPcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzMzQzOQ==", "bodyText": "You don't need tristate logic here, just use:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (Boolean.TRUE.equals(_set.isIncludedAndNotExcluded(connection)))\n          \n          \n            \n                    if (_set.test(connection))", "url": "https://github.com/eclipse/jetty.project/pull/5125#discussion_r471333439", "createdAt": "2020-08-17T08:48:44Z", "author": {"login": "gregw"}, "path": "jetty-io/src/main/java/org/eclipse/jetty/io/IncludeExcludeConnectionStatistics.java", "diffHunk": "@@ -0,0 +1,114 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.io;\n+\n+import java.util.AbstractSet;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import org.eclipse.jetty.util.IncludeExcludeSet;\n+\n+public class IncludeExcludeConnectionStatistics extends ConnectionStatistics\n+{\n+    private final IncludeExcludeSet<Class<? extends Connection>, Connection> _set = new IncludeExcludeSet<>(ConnectionSet.class);\n+\n+    public void include(String className) throws ClassNotFoundException\n+    {\n+        _set.include(connectionForName(className));\n+    }\n+\n+    public void include(Class<? extends Connection> clazz)\n+    {\n+        _set.include(clazz);\n+    }\n+\n+    public void exclude(String className) throws ClassNotFoundException\n+    {\n+        _set.exclude(connectionForName(className));\n+    }\n+\n+    public void exclude(Class<? extends Connection> clazz)\n+    {\n+        _set.exclude(clazz);\n+    }\n+\n+    private Class<? extends Connection> connectionForName(String className) throws ClassNotFoundException\n+    {\n+        Class<?> aClass = Class.forName(className);\n+        if (!Connection.class.isAssignableFrom(aClass))\n+            throw new IllegalArgumentException(\"Class is not a Connection\");\n+\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Connection> connectionClass = (Class<? extends Connection>)aClass;\n+        return connectionClass;\n+    }\n+\n+    @Override\n+    public void onOpened(Connection connection)\n+    {\n+        if (Boolean.TRUE.equals(_set.isIncludedAndNotExcluded(connection)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1663a6d7af9d85390fef6deb6d15cd7bce30263e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzMzYyMw==", "bodyText": "ditto", "url": "https://github.com/eclipse/jetty.project/pull/5125#discussion_r471333623", "createdAt": "2020-08-17T08:49:04Z", "author": {"login": "gregw"}, "path": "jetty-io/src/main/java/org/eclipse/jetty/io/IncludeExcludeConnectionStatistics.java", "diffHunk": "@@ -0,0 +1,114 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.io;\n+\n+import java.util.AbstractSet;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import org.eclipse.jetty.util.IncludeExcludeSet;\n+\n+public class IncludeExcludeConnectionStatistics extends ConnectionStatistics\n+{\n+    private final IncludeExcludeSet<Class<? extends Connection>, Connection> _set = new IncludeExcludeSet<>(ConnectionSet.class);\n+\n+    public void include(String className) throws ClassNotFoundException\n+    {\n+        _set.include(connectionForName(className));\n+    }\n+\n+    public void include(Class<? extends Connection> clazz)\n+    {\n+        _set.include(clazz);\n+    }\n+\n+    public void exclude(String className) throws ClassNotFoundException\n+    {\n+        _set.exclude(connectionForName(className));\n+    }\n+\n+    public void exclude(Class<? extends Connection> clazz)\n+    {\n+        _set.exclude(clazz);\n+    }\n+\n+    private Class<? extends Connection> connectionForName(String className) throws ClassNotFoundException\n+    {\n+        Class<?> aClass = Class.forName(className);\n+        if (!Connection.class.isAssignableFrom(aClass))\n+            throw new IllegalArgumentException(\"Class is not a Connection\");\n+\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Connection> connectionClass = (Class<? extends Connection>)aClass;\n+        return connectionClass;\n+    }\n+\n+    @Override\n+    public void onOpened(Connection connection)\n+    {\n+        if (Boolean.TRUE.equals(_set.isIncludedAndNotExcluded(connection)))\n+            super.onOpened(connection);\n+    }\n+\n+    @Override\n+    public void onClosed(Connection connection)\n+    {\n+        if (Boolean.TRUE.equals(_set.isIncludedAndNotExcluded(connection)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1663a6d7af9d85390fef6deb6d15cd7bce30263e"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzODg2NQ==", "bodyText": "rather than create your own set type just to provide a predicate is is probably simpler to use:\nnew IncludeExcludeSet<>(new HashSet<>(), Connection.class::isAssignableFrom, new HashSet<>(), Connection.class::isAssignableFrom);", "url": "https://github.com/eclipse/jetty.project/pull/5125#discussion_r471338865", "createdAt": "2020-08-17T08:58:11Z", "author": {"login": "gregw"}, "path": "jetty-io/src/main/java/org/eclipse/jetty/io/IncludeExcludeConnectionStatistics.java", "diffHunk": "@@ -0,0 +1,114 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.io;\n+\n+import java.util.AbstractSet;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import org.eclipse.jetty.util.IncludeExcludeSet;\n+\n+public class IncludeExcludeConnectionStatistics extends ConnectionStatistics\n+{\n+    private final IncludeExcludeSet<Class<? extends Connection>, Connection> _set = new IncludeExcludeSet<>(ConnectionSet.class);\n+\n+    public void include(String className) throws ClassNotFoundException\n+    {\n+        _set.include(connectionForName(className));\n+    }\n+\n+    public void include(Class<? extends Connection> clazz)\n+    {\n+        _set.include(clazz);\n+    }\n+\n+    public void exclude(String className) throws ClassNotFoundException\n+    {\n+        _set.exclude(connectionForName(className));\n+    }\n+\n+    public void exclude(Class<? extends Connection> clazz)\n+    {\n+        _set.exclude(clazz);\n+    }\n+\n+    private Class<? extends Connection> connectionForName(String className) throws ClassNotFoundException\n+    {\n+        Class<?> aClass = Class.forName(className);\n+        if (!Connection.class.isAssignableFrom(aClass))\n+            throw new IllegalArgumentException(\"Class is not a Connection\");\n+\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Connection> connectionClass = (Class<? extends Connection>)aClass;\n+        return connectionClass;\n+    }\n+\n+    @Override\n+    public void onOpened(Connection connection)\n+    {\n+        if (Boolean.TRUE.equals(_set.isIncludedAndNotExcluded(connection)))\n+            super.onOpened(connection);\n+    }\n+\n+    @Override\n+    public void onClosed(Connection connection)\n+    {\n+        if (Boolean.TRUE.equals(_set.isIncludedAndNotExcluded(connection)))\n+            super.onClosed(connection);\n+    }\n+\n+    public static class ConnectionSet extends AbstractSet<Class<? extends Connection>> implements Predicate<Connection>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1663a6d7af9d85390fef6deb6d15cd7bce30263e"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c37d902ef7fe9b0095ff775b1885abec3e4a4999", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/c37d902ef7fe9b0095ff775b1885abec3e4a4999", "committedDate": "2020-08-18T00:18:44Z", "message": "remove tri-state logic from IncludeExcludeConnectionStatistics\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MDQ0Njgy", "url": "https://github.com/eclipse/jetty.project/pull/5125#pullrequestreview-469044682", "createdAt": "2020-08-18T07:05:39Z", "commit": {"oid": "c37d902ef7fe9b0095ff775b1885abec3e4a4999"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 277, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}