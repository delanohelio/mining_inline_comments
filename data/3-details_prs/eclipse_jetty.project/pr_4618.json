{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMzk3MTEy", "number": 4618, "title": "Issue #4400 - Review HttpClient's ContentProvider.", "bodyText": "Introduced Request.Content with a reactive model to provide\nrequest content.\nIntroduced RequestContentAdapter to wrap ContentProviders\ninto Request.Content.\nUpdated implementation to use the reactive model rather than\nthe old pull model.\nReimplemented all ContentProviders in terms of Request.Content.\nConverted most of the tests from ContentProvider to Request.Content.\nUpdated proxy servlets and documentation.\nSigned-off-by: Simone Bordet simone.bordet@gmail.com\nCloses #4400.", "createdAt": "2020-02-28T13:43:35Z", "url": "https://github.com/eclipse/jetty.project/pull/4618", "merged": true, "mergeCommit": {"oid": "fa54c749466a1a2b032ae284c73ab559493c07d6"}, "closed": true, "closedAt": "2020-03-30T13:54:43Z", "author": {"login": "sbordet"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIwHNwAH2gAyMzgxMzk3MTEyOjEzOTNjMGU5MmJjMTZlZmI4NTI2MjRiZDNkZTNhNTc1Y2FmZGRmYTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcStwIQgFqTM4MzgwNzYwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1393c0e92bc16efb852624bd3de3a575cafddfa7", "author": {"user": {"login": "sbordet", "name": "Simone Bordet"}}, "url": "https://github.com/eclipse/jetty.project/commit/1393c0e92bc16efb852624bd3de3a575cafddfa7", "committedDate": "2020-02-28T13:40:48Z", "message": "Issue #4400 - Review HttpClient's ContentProvider.\n\nIntroduced Request.Content with a reactive model to provide\nrequest content.\nIntroduced RequestContentAdapter to wrap ContentProviders\ninto Request.Content.\nUpdated implementation to use the reactive model rather than\nthe old pull model.\nReimplemented all ContentProviders in terms of Request.Content.\nConverted most of the tests from ContentProvider to Request.Content.\nUpdated proxy servlets and documentation.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8d9f82eff80e698f77103ee0add8bcfe762fcb5", "author": {"user": {"login": "sbordet", "name": "Simone Bordet"}}, "url": "https://github.com/eclipse/jetty.project/commit/f8d9f82eff80e698f77103ee0add8bcfe762fcb5", "committedDate": "2020-03-18T10:40:11Z", "message": "Merged branch 'jetty-10.0.x' into 'jetty-10.0.x-4400-review_httpclient_content'."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e215d071c8604705ad1d56607ab28449201afb55", "author": {"user": {"login": "sbordet", "name": "Simone Bordet"}}, "url": "https://github.com/eclipse/jetty.project/commit/e215d071c8604705ad1d56607ab28449201afb55", "committedDate": "2020-03-23T15:24:04Z", "message": "Merged branch 'jetty-10.0.x' into 'jetty-10.0.x-4400-review_httpclient_content'."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NTc1Mzkx", "url": "https://github.com/eclipse/jetty.project/pull/4618#pullrequestreview-379575391", "createdAt": "2020-03-23T16:02:32Z", "commit": {"oid": "e215d071c8604705ad1d56607ab28449201afb55"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjowMjozM1rOF6MYtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjowMjozM1rOF6MYtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2NDY2Mg==", "bodyText": "Why don't we use the Flow.Publisher API as a base for this rather than create our own near identical version of it?", "url": "https://github.com/eclipse/jetty.project/pull/4618#discussion_r396564662", "createdAt": "2020-03-23T16:02:33Z", "author": {"login": "gregw"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/api/Request.java", "diffHunk": "@@ -615,4 +634,136 @@ public default void onFailure(Request request, Throwable failure)\n         {\n         }\n     }\n+\n+    /**\n+     * <p>A reactive model to produce request content, similar to {@link java.util.concurrent.Flow.Publisher}.</p>\n+     * <p>Implementations receive the content consumer via {@link #subscribe(Consumer, boolean)},\n+     * and return a {@link Subscription} as the link between producer and consumer.</p>\n+     * <p>Content producers must notify content to the consumer only if there is demand.</p>\n+     * <p>Content consumers can generate demand for content by invoking {@link Subscription#demand()}.</p>\n+     */\n+    public interface Content", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e215d071c8604705ad1d56607ab28449201afb55"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMjAyNjA2", "url": "https://github.com/eclipse/jetty.project/pull/4618#pullrequestreview-380202606", "createdAt": "2020-03-24T11:03:36Z", "commit": {"oid": "e215d071c8604705ad1d56607ab28449201afb55"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTowMzozNlrOF6rH0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMToyMDo1OFrOF6rs3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2ODI0Mg==", "bodyText": "why is this assuming that a content can't ber in simultaneous subscriptions?\nCan't a reproducible content be sent to two different requests at the same time?\nI don't think the abstract content should hold onto a subscription reference at all. it just needs logic like:\n    boolean oneTimeused;\n    ...\n    if (!isReproducible|())\n    {\n      if (oneTimeUsed)\n          throw ISE(...);\n      oneTimeUsed = true;\n    }\n    ...", "url": "https://github.com/eclipse/jetty.project/pull/4618#discussion_r397068242", "createdAt": "2020-03-24T11:03:36Z", "author": {"login": "gregw"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/util/AbstractRequestContent.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.client.util;\n+\n+import java.io.EOFException;\n+import java.nio.ByteBuffer;\n+\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.util.BufferUtil;\n+import org.eclipse.jetty.util.Callback;\n+import org.eclipse.jetty.util.thread.AutoLock;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractRequestContent implements Request.Content\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(AbstractRequestContent.class);\n+\n+    private final AutoLock lock = new AutoLock();\n+    private final String contentType;\n+    private Subscription subscription;\n+    private Throwable failure;\n+\n+    protected AbstractRequestContent(String contentType)\n+    {\n+        this.contentType = contentType;\n+    }\n+\n+    @Override\n+    public String getContentType()\n+    {\n+        return contentType;\n+    }\n+\n+    @Override\n+    public Subscription subscribe(Consumer consumer, boolean emitInitialContent)\n+    {\n+        Subscription oldSubscription;\n+        Subscription newSubscription;\n+        try (AutoLock ignored = lock.lock())\n+        {\n+            if (subscription != null && !isReproducible())\n+                throw new IllegalStateException(\"Multiple subscriptions not supported on \" + this);\n+            oldSubscription = subscription;\n+            newSubscription = subscription = newSubscription(consumer, emitInitialContent, failure);\n+        }\n+        if (oldSubscription != null)\n+            oldSubscription.fail(new EOFException(\"Content replay\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e215d071c8604705ad1d56607ab28449201afb55"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3MDk1Mg==", "bodyText": "why is failure delivered to the content and not directly to the subscription?\nIf a specific request fails, that should only affect that requests subscription and not subsequent or concurrent subscriptions for the same content.", "url": "https://github.com/eclipse/jetty.project/pull/4618#discussion_r397070952", "createdAt": "2020-03-24T11:08:43Z", "author": {"login": "gregw"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/util/AbstractRequestContent.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.client.util;\n+\n+import java.io.EOFException;\n+import java.nio.ByteBuffer;\n+\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.util.BufferUtil;\n+import org.eclipse.jetty.util.Callback;\n+import org.eclipse.jetty.util.thread.AutoLock;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractRequestContent implements Request.Content\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(AbstractRequestContent.class);\n+\n+    private final AutoLock lock = new AutoLock();\n+    private final String contentType;\n+    private Subscription subscription;\n+    private Throwable failure;\n+\n+    protected AbstractRequestContent(String contentType)\n+    {\n+        this.contentType = contentType;\n+    }\n+\n+    @Override\n+    public String getContentType()\n+    {\n+        return contentType;\n+    }\n+\n+    @Override\n+    public Subscription subscribe(Consumer consumer, boolean emitInitialContent)\n+    {\n+        Subscription oldSubscription;\n+        Subscription newSubscription;\n+        try (AutoLock ignored = lock.lock())\n+        {\n+            if (subscription != null && !isReproducible())\n+                throw new IllegalStateException(\"Multiple subscriptions not supported on \" + this);\n+            oldSubscription = subscription;\n+            newSubscription = subscription = newSubscription(consumer, emitInitialContent, failure);\n+        }\n+        if (oldSubscription != null)\n+            oldSubscription.fail(new EOFException(\"Content replay\"));\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"Content subscription for {}: {}\", this, consumer);\n+        return newSubscription;\n+    }\n+\n+    protected abstract Subscription newSubscription(Consumer consumer, boolean emitInitialContent, Throwable failure);\n+\n+    @Override\n+    public void fail(Throwable failure)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e215d071c8604705ad1d56607ab28449201afb55"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3NTM1Mw==", "bodyText": "needs javadoc (and perhaps a better names?) for what fields mean, specially emitInitialContent and committed.  A state diagram or table might help!", "url": "https://github.com/eclipse/jetty.project/pull/4618#discussion_r397075353", "createdAt": "2020-03-24T11:16:38Z", "author": {"login": "gregw"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/util/AbstractRequestContent.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.client.util;\n+\n+import java.io.EOFException;\n+import java.nio.ByteBuffer;\n+\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.util.BufferUtil;\n+import org.eclipse.jetty.util.Callback;\n+import org.eclipse.jetty.util.thread.AutoLock;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractRequestContent implements Request.Content\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(AbstractRequestContent.class);\n+\n+    private final AutoLock lock = new AutoLock();\n+    private final String contentType;\n+    private Subscription subscription;\n+    private Throwable failure;\n+\n+    protected AbstractRequestContent(String contentType)\n+    {\n+        this.contentType = contentType;\n+    }\n+\n+    @Override\n+    public String getContentType()\n+    {\n+        return contentType;\n+    }\n+\n+    @Override\n+    public Subscription subscribe(Consumer consumer, boolean emitInitialContent)\n+    {\n+        Subscription oldSubscription;\n+        Subscription newSubscription;\n+        try (AutoLock ignored = lock.lock())\n+        {\n+            if (subscription != null && !isReproducible())\n+                throw new IllegalStateException(\"Multiple subscriptions not supported on \" + this);\n+            oldSubscription = subscription;\n+            newSubscription = subscription = newSubscription(consumer, emitInitialContent, failure);\n+        }\n+        if (oldSubscription != null)\n+            oldSubscription.fail(new EOFException(\"Content replay\"));\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"Content subscription for {}: {}\", this, consumer);\n+        return newSubscription;\n+    }\n+\n+    protected abstract Subscription newSubscription(Consumer consumer, boolean emitInitialContent, Throwable failure);\n+\n+    @Override\n+    public void fail(Throwable failure)\n+    {\n+        Subscription subscription = null;\n+        try (AutoLock ignored = lock.lock())\n+        {\n+            if (this.failure == null)\n+            {\n+                this.failure = failure;\n+                subscription = this.subscription;\n+            }\n+        }\n+        if (subscription != null)\n+            subscription.fail(failure);\n+    }\n+\n+    public abstract class AbstractSubscription implements Subscription\n+    {\n+        private final Consumer consumer;\n+        private final boolean emitInitialContent;\n+        private Throwable failure;\n+        private int demand;\n+        private boolean stalled;\n+        private boolean committed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e215d071c8604705ad1d56607ab28449201afb55"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3NjU5OA==", "bodyText": "you are missing committed and submitInitialContent", "url": "https://github.com/eclipse/jetty.project/pull/4618#discussion_r397076598", "createdAt": "2020-03-24T11:18:54Z", "author": {"login": "gregw"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/util/AbstractRequestContent.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.client.util;\n+\n+import java.io.EOFException;\n+import java.nio.ByteBuffer;\n+\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.util.BufferUtil;\n+import org.eclipse.jetty.util.Callback;\n+import org.eclipse.jetty.util.thread.AutoLock;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractRequestContent implements Request.Content\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(AbstractRequestContent.class);\n+\n+    private final AutoLock lock = new AutoLock();\n+    private final String contentType;\n+    private Subscription subscription;\n+    private Throwable failure;\n+\n+    protected AbstractRequestContent(String contentType)\n+    {\n+        this.contentType = contentType;\n+    }\n+\n+    @Override\n+    public String getContentType()\n+    {\n+        return contentType;\n+    }\n+\n+    @Override\n+    public Subscription subscribe(Consumer consumer, boolean emitInitialContent)\n+    {\n+        Subscription oldSubscription;\n+        Subscription newSubscription;\n+        try (AutoLock ignored = lock.lock())\n+        {\n+            if (subscription != null && !isReproducible())\n+                throw new IllegalStateException(\"Multiple subscriptions not supported on \" + this);\n+            oldSubscription = subscription;\n+            newSubscription = subscription = newSubscription(consumer, emitInitialContent, failure);\n+        }\n+        if (oldSubscription != null)\n+            oldSubscription.fail(new EOFException(\"Content replay\"));\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"Content subscription for {}: {}\", this, consumer);\n+        return newSubscription;\n+    }\n+\n+    protected abstract Subscription newSubscription(Consumer consumer, boolean emitInitialContent, Throwable failure);\n+\n+    @Override\n+    public void fail(Throwable failure)\n+    {\n+        Subscription subscription = null;\n+        try (AutoLock ignored = lock.lock())\n+        {\n+            if (this.failure == null)\n+            {\n+                this.failure = failure;\n+                subscription = this.subscription;\n+            }\n+        }\n+        if (subscription != null)\n+            subscription.fail(failure);\n+    }\n+\n+    public abstract class AbstractSubscription implements Subscription\n+    {\n+        private final Consumer consumer;\n+        private final boolean emitInitialContent;\n+        private Throwable failure;\n+        private int demand;\n+        private boolean stalled;\n+        private boolean committed;\n+\n+        public AbstractSubscription(Consumer consumer, boolean emitInitialContent, Throwable failure)\n+        {\n+            this.consumer = consumer;\n+            this.emitInitialContent = emitInitialContent;\n+            this.failure = failure;\n+            this.stalled = true;\n+        }\n+\n+        @Override\n+        public void demand()\n+        {\n+            boolean produce;\n+            try (AutoLock ignored = lock.lock())\n+            {\n+                ++demand;\n+                produce = stalled;\n+                if (stalled)\n+                    stalled = false;\n+            }\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"Content demand, producing {} for {}\", produce, this);\n+            if (produce)\n+                produce();\n+        }\n+\n+        private void produce()\n+        {\n+            while (true)\n+            {\n+                Throwable failure;\n+                boolean committed;\n+                try (AutoLock ignored = lock.lock())\n+                {\n+                    failure = this.failure;\n+                    committed = this.committed;\n+                }\n+                if (failure != null)\n+                {\n+                    notifyFailure(failure);\n+                    return;\n+                }\n+\n+                if (committed || emitInitialContent)\n+                {\n+                    try\n+                    {\n+                        if (!produceContent(this::processContent))\n+                            return;\n+                    }\n+                    catch (Throwable x)\n+                    {\n+                        // Fail and loop around to notify the failure.\n+                        fail(x);\n+                    }\n+                }\n+                else\n+                {\n+                    if (!processContent(BufferUtil.EMPTY_BUFFER, false, Callback.NOOP))\n+                        return;\n+                }\n+            }\n+        }\n+\n+        protected abstract boolean produceContent(Producer producer) throws Exception;\n+\n+        @Override\n+        public void fail(Throwable failure)\n+        {\n+            try (AutoLock ignored = lock.lock())\n+            {\n+                if (this.failure == null)\n+                    this.failure = failure;\n+            }\n+        }\n+\n+        private boolean processContent(ByteBuffer content, boolean last, Callback callback)\n+        {\n+            try (AutoLock ignored = lock.lock())\n+            {\n+                committed = true;\n+                --demand;\n+            }\n+\n+            if (content != null)\n+                notifyContent(content, last, callback);\n+            else\n+                callback.succeeded();\n+\n+            boolean noDemand;\n+            try (AutoLock ignored = lock.lock())\n+            {\n+                noDemand = demand == 0;\n+                if (noDemand)\n+                    stalled = true;\n+            }\n+            if (noDemand)\n+            {\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"No demand, processing stalled for {}\", this);\n+                return false;\n+            }\n+            return true;\n+        }\n+\n+        protected void notifyContent(ByteBuffer buffer, boolean last, Callback callback)\n+        {\n+            try\n+            {\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Notifying content last={} {} for {}\", last, BufferUtil.toDetailString(buffer), this);\n+                consumer.onContent(buffer, last, callback);\n+            }\n+            catch (Throwable x)\n+            {\n+                callback.failed(x);\n+                fail(x);\n+            }\n+        }\n+\n+        private void notifyFailure(Throwable failure)\n+        {\n+            try\n+            {\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Notifying failure for {}\", this, failure);\n+                consumer.onFailure(failure);\n+            }\n+            catch (Exception x)\n+            {\n+                LOG.trace(\"Failure while notifying content failure {}\", failure, x);\n+            }\n+        }\n+\n+        @Override\n+        public String toString()\n+        {\n+            int demand;\n+            boolean stalled;\n+            try (AutoLock ignored = lock.lock())\n+            {\n+                demand = this.demand;\n+                stalled = this.stalled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e215d071c8604705ad1d56607ab28449201afb55"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3NzcyNQ==", "bodyText": "what is the implementation mean to do?  call notifyContent?", "url": "https://github.com/eclipse/jetty.project/pull/4618#discussion_r397077725", "createdAt": "2020-03-24T11:20:58Z", "author": {"login": "gregw"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/util/AbstractRequestContent.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.client.util;\n+\n+import java.io.EOFException;\n+import java.nio.ByteBuffer;\n+\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.util.BufferUtil;\n+import org.eclipse.jetty.util.Callback;\n+import org.eclipse.jetty.util.thread.AutoLock;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractRequestContent implements Request.Content\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(AbstractRequestContent.class);\n+\n+    private final AutoLock lock = new AutoLock();\n+    private final String contentType;\n+    private Subscription subscription;\n+    private Throwable failure;\n+\n+    protected AbstractRequestContent(String contentType)\n+    {\n+        this.contentType = contentType;\n+    }\n+\n+    @Override\n+    public String getContentType()\n+    {\n+        return contentType;\n+    }\n+\n+    @Override\n+    public Subscription subscribe(Consumer consumer, boolean emitInitialContent)\n+    {\n+        Subscription oldSubscription;\n+        Subscription newSubscription;\n+        try (AutoLock ignored = lock.lock())\n+        {\n+            if (subscription != null && !isReproducible())\n+                throw new IllegalStateException(\"Multiple subscriptions not supported on \" + this);\n+            oldSubscription = subscription;\n+            newSubscription = subscription = newSubscription(consumer, emitInitialContent, failure);\n+        }\n+        if (oldSubscription != null)\n+            oldSubscription.fail(new EOFException(\"Content replay\"));\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"Content subscription for {}: {}\", this, consumer);\n+        return newSubscription;\n+    }\n+\n+    protected abstract Subscription newSubscription(Consumer consumer, boolean emitInitialContent, Throwable failure);\n+\n+    @Override\n+    public void fail(Throwable failure)\n+    {\n+        Subscription subscription = null;\n+        try (AutoLock ignored = lock.lock())\n+        {\n+            if (this.failure == null)\n+            {\n+                this.failure = failure;\n+                subscription = this.subscription;\n+            }\n+        }\n+        if (subscription != null)\n+            subscription.fail(failure);\n+    }\n+\n+    public abstract class AbstractSubscription implements Subscription\n+    {\n+        private final Consumer consumer;\n+        private final boolean emitInitialContent;\n+        private Throwable failure;\n+        private int demand;\n+        private boolean stalled;\n+        private boolean committed;\n+\n+        public AbstractSubscription(Consumer consumer, boolean emitInitialContent, Throwable failure)\n+        {\n+            this.consumer = consumer;\n+            this.emitInitialContent = emitInitialContent;\n+            this.failure = failure;\n+            this.stalled = true;\n+        }\n+\n+        @Override\n+        public void demand()\n+        {\n+            boolean produce;\n+            try (AutoLock ignored = lock.lock())\n+            {\n+                ++demand;\n+                produce = stalled;\n+                if (stalled)\n+                    stalled = false;\n+            }\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"Content demand, producing {} for {}\", produce, this);\n+            if (produce)\n+                produce();\n+        }\n+\n+        private void produce()\n+        {\n+            while (true)\n+            {\n+                Throwable failure;\n+                boolean committed;\n+                try (AutoLock ignored = lock.lock())\n+                {\n+                    failure = this.failure;\n+                    committed = this.committed;\n+                }\n+                if (failure != null)\n+                {\n+                    notifyFailure(failure);\n+                    return;\n+                }\n+\n+                if (committed || emitInitialContent)\n+                {\n+                    try\n+                    {\n+                        if (!produceContent(this::processContent))\n+                            return;\n+                    }\n+                    catch (Throwable x)\n+                    {\n+                        // Fail and loop around to notify the failure.\n+                        fail(x);\n+                    }\n+                }\n+                else\n+                {\n+                    if (!processContent(BufferUtil.EMPTY_BUFFER, false, Callback.NOOP))\n+                        return;\n+                }\n+            }\n+        }\n+\n+        protected abstract boolean produceContent(Producer producer) throws Exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e215d071c8604705ad1d56607ab28449201afb55"}, "originalPosition": 160}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fec1f43e07692f9cb80ae9390ff457e0421d91d", "author": {"user": {"login": "sbordet", "name": "Simone Bordet"}}, "url": "https://github.com/eclipse/jetty.project/commit/9fec1f43e07692f9cb80ae9390ff457e0421d91d", "committedDate": "2020-03-24T15:42:53Z", "message": "Issue #4400 - Review HttpClient's ContentProvider.\n\nImproved javadocs and comment as per initial review.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f2ddc8c9f1ab0e677e3b6999992b2d88a0bc838", "author": {"user": {"login": "sbordet", "name": "Simone Bordet"}}, "url": "https://github.com/eclipse/jetty.project/commit/0f2ddc8c9f1ab0e677e3b6999992b2d88a0bc838", "committedDate": "2020-03-26T16:46:59Z", "message": "Issue #4400 - Review HttpClient's ContentProvider.\n\nReview updates.\n* Now AbstractRequestContent supports multiple subscriptions.\n* Reviewed abort() path to fail the content and the subscription\n  and notify FailureListener sequentially with other listeners.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMjk0Njk4", "url": "https://github.com/eclipse/jetty.project/pull/4618#pullrequestreview-382294698", "createdAt": "2020-03-26T18:26:36Z", "commit": {"oid": "0f2ddc8c9f1ab0e677e3b6999992b2d88a0bc838"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODoyNjozNlrOF8UsDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODoyNjozNlrOF8UsDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NzgzNg==", "bodyText": "This is still not stateless.\nConsider a ByteBufferContent that is shared between many requests to many servers... if just one of those request fails in the queue before a connection is made (perhaps it is an unknown host), then this failure will be set on the shared content here and will fail all the requests that share this content.\nA reusable content must be stateless.  A non-reusable one can have state like failure if really needed.", "url": "https://github.com/eclipse/jetty.project/pull/4618#discussion_r398797836", "createdAt": "2020-03-26T18:26:36Z", "author": {"login": "gregw"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/util/AbstractRequestContent.java", "diffHunk": "@@ -0,0 +1,275 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.client.util;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.util.BufferUtil;\n+import org.eclipse.jetty.util.Callback;\n+import org.eclipse.jetty.util.thread.AutoLock;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <p>Partial implementation of {@link Request.Content}.</p>\n+ * <p>Manages a single subscription at a time (multiple simultaneous subscriptions are not allowed).</p>\n+ */\n+public abstract class AbstractRequestContent implements Request.Content\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(AbstractRequestContent.class);\n+\n+    private final AutoLock lock = new AutoLock();\n+    private final String contentType;\n+    private Throwable failure;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2ddc8c9f1ab0e677e3b6999992b2d88a0bc838"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "708115f6095bd65052dbf5ff93fddcf9b1a16053", "author": {"user": {"login": "sbordet", "name": "Simone Bordet"}}, "url": "https://github.com/eclipse/jetty.project/commit/708115f6095bd65052dbf5ff93fddcf9b1a16053", "committedDate": "2020-03-27T14:33:21Z", "message": "Issue #4400 - Review HttpClient's ContentProvider.\n\nReview updates.\n* Updated AbstractRequestContent (and subclasses) failure handling.\n* Updated MultiPartRequestContent failure handling.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjI5NDA5", "url": "https://github.com/eclipse/jetty.project/pull/4618#pullrequestreview-383629409", "createdAt": "2020-03-30T08:24:23Z", "commit": {"oid": "708115f6095bd65052dbf5ff93fddcf9b1a16053"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoyNDoyM1rOF9eq1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoyNDoyM1rOF9eq1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwOTk0MA==", "bodyText": "@sbordet I would still like to see javadoc on the what/why/how of emitInitialContent\nMaybe a state diagram/table wouldn't hurt either.", "url": "https://github.com/eclipse/jetty.project/pull/4618#discussion_r400009940", "createdAt": "2020-03-30T08:24:23Z", "author": {"login": "gregw"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/util/AbstractRequestContent.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.client.util;\n+\n+import java.io.EOFException;\n+import java.nio.ByteBuffer;\n+\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.util.BufferUtil;\n+import org.eclipse.jetty.util.Callback;\n+import org.eclipse.jetty.util.thread.AutoLock;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractRequestContent implements Request.Content\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(AbstractRequestContent.class);\n+\n+    private final AutoLock lock = new AutoLock();\n+    private final String contentType;\n+    private Subscription subscription;\n+    private Throwable failure;\n+\n+    protected AbstractRequestContent(String contentType)\n+    {\n+        this.contentType = contentType;\n+    }\n+\n+    @Override\n+    public String getContentType()\n+    {\n+        return contentType;\n+    }\n+\n+    @Override\n+    public Subscription subscribe(Consumer consumer, boolean emitInitialContent)\n+    {\n+        Subscription oldSubscription;\n+        Subscription newSubscription;\n+        try (AutoLock ignored = lock.lock())\n+        {\n+            if (subscription != null && !isReproducible())\n+                throw new IllegalStateException(\"Multiple subscriptions not supported on \" + this);\n+            oldSubscription = subscription;\n+            newSubscription = subscription = newSubscription(consumer, emitInitialContent, failure);\n+        }\n+        if (oldSubscription != null)\n+            oldSubscription.fail(new EOFException(\"Content replay\"));\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"Content subscription for {}: {}\", this, consumer);\n+        return newSubscription;\n+    }\n+\n+    protected abstract Subscription newSubscription(Consumer consumer, boolean emitInitialContent, Throwable failure);\n+\n+    @Override\n+    public void fail(Throwable failure)\n+    {\n+        Subscription subscription = null;\n+        try (AutoLock ignored = lock.lock())\n+        {\n+            if (this.failure == null)\n+            {\n+                this.failure = failure;\n+                subscription = this.subscription;\n+            }\n+        }\n+        if (subscription != null)\n+            subscription.fail(failure);\n+    }\n+\n+    public abstract class AbstractSubscription implements Subscription\n+    {\n+        private final Consumer consumer;\n+        private final boolean emitInitialContent;\n+        private Throwable failure;\n+        private int demand;\n+        private boolean stalled;\n+        private boolean committed;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3NTM1Mw=="}, "originalCommit": {"oid": "e215d071c8604705ad1d56607ab28449201afb55"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjg0MjQz", "url": "https://github.com/eclipse/jetty.project/pull/4618#pullrequestreview-383684243", "createdAt": "2020-03-30T09:36:13Z", "commit": {"oid": "708115f6095bd65052dbf5ff93fddcf9b1a16053"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e224be650b0a31a248dac3902ec31bce9e1862fa", "author": {"user": {"login": "sbordet", "name": "Simone Bordet"}}, "url": "https://github.com/eclipse/jetty.project/commit/e224be650b0a31a248dac3902ec31bce9e1862fa", "committedDate": "2020-03-30T10:34:21Z", "message": "Issue #4400 - Review HttpClient's ContentProvider.\n\nReview updates.\nClosing MultiPartRequestContent before sending it.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ed952a9c02983016d91ed36eb56e1904aaa7695", "author": {"user": {"login": "sbordet", "name": "Simone Bordet"}}, "url": "https://github.com/eclipse/jetty.project/commit/6ed952a9c02983016d91ed36eb56e1904aaa7695", "committedDate": "2020-03-30T10:49:39Z", "message": "Merges 'jetty-10.0.x' into 'jetty-10.0.x-4400-review_httpclient_content'."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzODA3NjA2", "url": "https://github.com/eclipse/jetty.project/pull/4618#pullrequestreview-383807606", "createdAt": "2020-03-30T12:35:01Z", "commit": {"oid": "6ed952a9c02983016d91ed36eb56e1904aaa7695"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 477, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}