{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NzczMDE2", "number": 5131, "title": "Issue #5129 - WebAppContext.setExtraClasspath(String) cleanup", "bodyText": "More tests for both relative and absolute path references\nMore testing that will trigger quirks on Windows builds\nso that we can catch regressions faster\nReworked WebInfConfiguration to be glob aware in a way\nsimilar to how WebAppClassLoader behaves.\nReworked Resource.newResource(String) to delegate\ncanonical path resolution to PathResource\nGuarded PathResource's usage of Path.toAbsolutePath()\nto ignore valid conditions where the Path cannot be\nresolved to an absolute path (yet)", "createdAt": "2020-08-07T19:05:42Z", "url": "https://github.com/eclipse/jetty.project/pull/5131", "merged": true, "mergeCommit": {"oid": "e632d2454b682b87e6fd431ee2c9b85c387c4503"}, "closed": true, "closedAt": "2020-08-12T15:08:54Z", "author": {"login": "joakime"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9eiC2AFqTQ2NDA2NTAxMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-MVgIAFqTQ2NTk3NTQxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MDY1MDEx", "url": "https://github.com/eclipse/jetty.project/pull/5131#pullrequestreview-464065011", "createdAt": "2020-08-10T09:07:40Z", "commit": {"oid": "0c6530c3fd345d2ee8379bb31168dc56dab4241a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOTowNzo0MFrOG-GvwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOTowNzo0MFrOG-GvwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3NTQyNA==", "bodyText": "I think the problem is that we are parsing this extraClassPath String in 2 places: once in WebAppLoader, but then again in WebInfConfiguration. It should only be parsed once. So I think the better solution - as it is WebInfConfiguration's job to set up the WebAppLoader - that it converts the extraClassPath into Resources, and then sets those resources onto WebAppLoader  in the configure() method, where it pushes the WEB-INF/lib jars and WEB-INF/classes resources into the WebAppLoader.", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r467775424", "createdAt": "2020-08-10T09:07:40Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java", "diffHunk": "@@ -947,13 +947,47 @@ protected static String getResourceBaseName(Resource resource)\n         StringTokenizer tokenizer = new StringTokenizer(context.getExtraClasspath(), \",;\");\n         while (tokenizer.hasMoreTokens())\n         {\n-            Resource resource = context.newResource(tokenizer.nextToken().trim());\n-            String fnlc = resource.getName().toLowerCase(Locale.ENGLISH);\n-            int dot = fnlc.lastIndexOf('.');\n-            String extension = (dot < 0 ? null : fnlc.substring(dot));\n-            if (extension != null && (extension.equals(\".jar\") || extension.equals(\".zip\")))\n+            String token = tokenizer.nextToken().trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6530c3fd345d2ee8379bb31168dc56dab4241a"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MjEyMzE3", "url": "https://github.com/eclipse/jetty.project/pull/5131#pullrequestreview-464212317", "createdAt": "2020-08-10T13:10:16Z", "commit": {"oid": "0c6530c3fd345d2ee8379bb31168dc56dab4241a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzoxMDoxNlrOG-Nz1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzoxMDoxNlrOG-Nz1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5MTE1Nw==", "bodyText": "I think all these tests are good, but can they be added to an existing test, like for WebAppClassLoader, or WebAppContext?", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r467891157", "createdAt": "2020-08-10T13:10:16Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/WebAppContextExtraClasspathTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.eclipse.jetty.util.resource.PathResource;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class WebAppContextExtraClasspathTest\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6530c3fd345d2ee8379bb31168dc56dab4241a"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55f4e4fa6377d4b72ceafec3906266568ac26123", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/55f4e4fa6377d4b72ceafec3906266568ac26123", "committedDate": "2020-08-10T15:42:38Z", "message": "Issue #5129 - WebAppContext.setExtraClasspath(String) cleanup\n\n+ More tests for both relative and absolute path references\n+ More testing that will trigger quirks on Windows builds\n  so that we can catch regressions faster\n+ Reworked WebInfConfiguration to be glob aware in a way\n  similar to how WebAppClassLoader behaves.\n+ Reworked Resource.newResource(String) to delegate\n  canonical path resolution to PathResource\n+ Guarded PathResource's usage of Path.toAbsolutePath()\n  to ignore valid conditions where the Path cannot be\n  resolved to an absolute path (yet)\n+ Normalize resolved paths in PathResource\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "54f888c8184970cd46819afe8aa27f52ff51be4b", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/54f888c8184970cd46819afe8aa27f52ff51be4b", "committedDate": "2020-08-10T15:40:02Z", "message": "Issue #5129 - testExtraClasspathGlob to use source reference\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}, "afterCommit": {"oid": "55f4e4fa6377d4b72ceafec3906266568ac26123", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/55f4e4fa6377d4b72ceafec3906266568ac26123", "committedDate": "2020-08-10T15:42:38Z", "message": "Issue #5129 - WebAppContext.setExtraClasspath(String) cleanup\n\n+ More tests for both relative and absolute path references\n+ More testing that will trigger quirks on Windows builds\n  so that we can catch regressions faster\n+ Reworked WebInfConfiguration to be glob aware in a way\n  similar to how WebAppClassLoader behaves.\n+ Reworked Resource.newResource(String) to delegate\n  canonical path resolution to PathResource\n+ Guarded PathResource's usage of Path.toAbsolutePath()\n  to ignore valid conditions where the Path cannot be\n  resolved to an absolute path (yet)\n+ Normalize resolved paths in PathResource\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8098986e65cbf8b326d669a9db55421383fd06b", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/e8098986e65cbf8b326d669a9db55421383fd06b", "committedDate": "2020-08-10T16:30:39Z", "message": "Issue #5129 - Simplify Resource reference list behavior\n\n+ Introduce new Resource.fromReferences to help with\n  parsing delimited resource reference lists.\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52f5218900b04d1e7e33cf2c6458183f57b709ad", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/52f5218900b04d1e7e33cf2c6458183f57b709ad", "committedDate": "2020-08-10T19:42:02Z", "message": "Issue #5129 - Resource.fromReferences no longer needs DefaultFactory\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b8c343a2b4476a122c1b744451a5390a0ccf8b0", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/5b8c343a2b4476a122c1b744451a5390a0ccf8b0", "committedDate": "2020-08-10T19:46:32Z", "message": "Issue #5129 - Fleshing out glob testcase a bit more\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0ODQwMDA4", "url": "https://github.com/eclipse/jetty.project/pull/5131#pullrequestreview-464840008", "createdAt": "2020-08-11T08:08:11Z", "commit": {"oid": "5b8c343a2b4476a122c1b744451a5390a0ccf8b0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0ODQzNzM2", "url": "https://github.com/eclipse/jetty.project/pull/5131#pullrequestreview-464843736", "createdAt": "2020-08-11T08:13:32Z", "commit": {"oid": "5b8c343a2b4476a122c1b744451a5390a0ccf8b0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0ODQxOTMy", "url": "https://github.com/eclipse/jetty.project/pull/5131#pullrequestreview-464841932", "createdAt": "2020-08-11T08:10:59Z", "commit": {"oid": "5b8c343a2b4476a122c1b744451a5390a0ccf8b0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODoxMDo1OVrOG-tCJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODoyMDoyNVrOG-tXYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwMjcyNQ==", "bodyText": "This might be a better assumption, but for 9.4 I think we really don't want to change how we work out what type a resource is as we really don't want to change behaviour... even if it is slightly wrong.  We should only fix real bugs.", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468402725", "createdAt": "2020-08-11T08:10:59Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "diffHunk": "@@ -174,19 +177,8 @@ public static Resource newResource(String resource, boolean useCaches)\n                 !resource.startsWith(\"file:\") &&\n                 !resource.startsWith(\"jar:\"))\n             {\n-                try\n-                {\n-                    // It's a file.\n-                    if (resource.startsWith(\"./\"))\n-                        resource = resource.substring(2);\n-                    File file = new File(resource).getCanonicalFile();\n-                    return new PathResource(file);\n-                }\n-                catch (IOException e2)\n-                {\n-                    e2.addSuppressed(e);\n-                    throw e2;\n-                }\n+                // It's likely a file/path reference.\n+                return new PathResource(Paths.get(resource));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8c343a2b4476a122c1b744451a5390a0ccf8b0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwNjM5Mw==", "bodyText": "fromList or fromCSV would be a better name, as References doesn't mean anything to me.", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468406393", "createdAt": "2020-08-11T08:17:22Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "diffHunk": "@@ -1005,4 +996,107 @@ public static URL toURL(File file) throws MalformedURLException\n     {\n         return file.toURI().toURL();\n     }\n+\n+    /**\n+     * Factory to create new Resource instance from a reference.\n+     */\n+    public interface Factory\n+    {\n+        /**\n+         * Create a new Resource from the factory's point of view.\n+         * <p>\n+         * This is different then {@link ResourceFactory} in that\n+         * it must return a {@link Resource} or throw an IOException,\n+         * never null.\n+         * </p>\n+         *\n+         * @param reference the string reference.\n+         * @return the Resource instance\n+         * @throws IOException if unable to create a Resource reference\n+         */\n+        Resource newResource(String reference) throws IOException;\n+    }\n+\n+    /**\n+     * Parse a delimited String of resource references and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @return the list of resources parsed from input string.\n+     */\n+    public static List<Resource> fromReferences(String delimitedReferences) throws IOException\n+    {\n+        return fromReferences(delimitedReferences, Resource::newResource);\n+    }\n+\n+    /**\n+     * Parse a delimited String of resource references and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param resourceFactory the Resource.Factory used to create new Resource references\n+     * @return the list of resources parsed from input string.\n+     */\n+    public static List<Resource> fromReferences(String delimitedReferences, Resource.Factory resourceFactory) throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8c343a2b4476a122c1b744451a5390a0ccf8b0"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwODE2MA==", "bodyText": "Do we really need a new public interface just because ResourceFactory can return null?    It's only called in a few spots in the methods below and null checking there would be better than introducing a nearly identical interface..... or just use Function<String, Resource>\nWe could perhaps change ResourceFactory in 10 to throw, but that is a lot more expensive for 404s", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468408160", "createdAt": "2020-08-11T08:20:25Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "diffHunk": "@@ -1005,4 +996,107 @@ public static URL toURL(File file) throws MalformedURLException\n     {\n         return file.toURI().toURL();\n     }\n+\n+    /**\n+     * Factory to create new Resource instance from a reference.\n+     */\n+    public interface Factory\n+    {\n+        /**\n+         * Create a new Resource from the factory's point of view.\n+         * <p>\n+         * This is different then {@link ResourceFactory} in that\n+         * it must return a {@link Resource} or throw an IOException,\n+         * never null.\n+         * </p>\n+         *\n+         * @param reference the string reference.\n+         * @return the Resource instance\n+         * @throws IOException if unable to create a Resource reference\n+         */\n+        Resource newResource(String reference) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8c343a2b4476a122c1b744451a5390a0ccf8b0"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "150dc22f0a58d1047df7bbc52a2e95da12a1d263", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/150dc22f0a58d1047df7bbc52a2e95da12a1d263", "committedDate": "2020-08-11T13:15:27Z", "message": "Issue #5129 - Reverting Resource.fromReferences()\n\n+ Will migrate to jetty-10.0.x\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a19ef4bb2d978f222f0dfaf260349955407ba33", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/4a19ef4bb2d978f222f0dfaf260349955407ba33", "committedDate": "2020-08-11T13:51:04Z", "message": "Issue #5129 - disabling ResourceTest.testGlobPath on WINDOWS for stability"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MTM4ODYw", "url": "https://github.com/eclipse/jetty.project/pull/5131#pullrequestreview-465138860", "createdAt": "2020-08-11T14:43:47Z", "commit": {"oid": "4a19ef4bb2d978f222f0dfaf260349955407ba33"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDo0Mzo0N1rOG-7TXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDo0ODozMVrOG-7haA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzNjUxMQ==", "bodyText": "Wwe've ever supported an extraClasspath directory hierarchy that is a mix of classes dirs and jar files. The arg to addJars() has always been interpreted as a dir that contains jar/zip files, and only the jar/zip files were added to the classpath. It looks like line 334 is going to add the subdirs of the lib to the classpath, but that's never been the accepted behaviour.", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468636511", "createdAt": "2020-08-11T14:43:47Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebAppClassLoader.java", "diffHunk": "@@ -319,29 +319,37 @@ public void addJars(Resource lib)\n     {\n         if (lib.exists() && lib.isDirectory())\n         {\n-            String[] files = lib.list();\n-            if (files != null)\n+            String[] entries = lib.list();\n+            if (entries != null)\n             {\n-                Arrays.sort(files);\n-            }\n-            for (int f = 0; files != null && f < files.length; f++)\n-            {\n-                try\n+                Arrays.sort(entries);\n+\n+                for (String entry : entries)\n                 {\n-                    Resource fn = lib.addPath(files[f]);\n-                    if (LOG.isDebugEnabled())\n-                        LOG.debug(\"addJar - {}\", fn);\n-                    String fnlc = fn.getName().toLowerCase(Locale.ENGLISH);\n-                    // don't check if this is a directory (prevents use of symlinks), see Bug 353165\n-                    if (isFileSupported(fnlc))\n+                    try\n                     {\n-                        String jar = URIUtil.encodeSpecific(fn.toString(), \",;\");\n-                        addClassPath(jar);\n+                        Resource resource = lib.addPath(entry);\n+                        if (LOG.isDebugEnabled())\n+                            LOG.debug(\"addJar - {}\", resource);\n+                        if (resource.isDirectory())\n+                        {\n+                            addURL(resource.getURI().toURL());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a19ef4bb2d978f222f0dfaf260349955407ba33"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzOTAzMw==", "bodyText": "If the entry has a trailing *, then it is a directory of jar files and we can ignore it, we should not look deeply into its subdirs.", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468639033", "createdAt": "2020-08-11T14:47:07Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java", "diffHunk": "@@ -1003,11 +1037,53 @@ protected Resource findWebInfClassesDir(WebAppContext context)\n         StringTokenizer tokenizer = new StringTokenizer(context.getExtraClasspath(), \",;\");\n         while (tokenizer.hasMoreTokens())\n         {\n-            Resource resource = context.newResource(tokenizer.nextToken().trim());\n-            if (resource.exists() && resource.isDirectory())\n-                dirResources.add(resource);\n+            String token = tokenizer.nextToken().trim();\n+            if (isGlobReference(token))\n+            {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a19ef4bb2d978f222f0dfaf260349955407ba33"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0MDEwNA==", "bodyText": "This test needs a better place, it is not testing the extraClasspath.", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468640104", "createdAt": "2020-08-11T14:48:31Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/WebAppContextExtraClasspathTest.java", "diffHunk": "@@ -0,0 +1,220 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.eclipse.jetty.util.resource.PathResource;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class WebAppContextExtraClasspathTest\n+{\n+    private Server server;\n+\n+    private Server newServer()\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        connector.setPort(0);\n+        server.addConnector(connector);\n+        return server;\n+    }\n+\n+    @AfterEach\n+    public void tearDown()\n+    {\n+        LifeCycle.stop(server);\n+    }\n+\n+    @Test\n+    public void testBaseResourceAbsolutePath() throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a19ef4bb2d978f222f0dfaf260349955407ba33"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d91cab035445cf86ccd309cab9dc769e51f5fafd", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/d91cab035445cf86ccd309cab9dc769e51f5fafd", "committedDate": "2020-08-11T15:44:05Z", "message": "Issue #5129 - Directories discovered via classpath glob are not valid\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODM5NDE1", "url": "https://github.com/eclipse/jetty.project/pull/5131#pullrequestreview-465839415", "createdAt": "2020-08-12T11:56:15Z", "commit": {"oid": "d91cab035445cf86ccd309cab9dc769e51f5fafd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1OTc1NDEw", "url": "https://github.com/eclipse/jetty.project/pull/5131#pullrequestreview-465975410", "createdAt": "2020-08-12T14:31:44Z", "commit": {"oid": "d91cab035445cf86ccd309cab9dc769e51f5fafd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 280, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}