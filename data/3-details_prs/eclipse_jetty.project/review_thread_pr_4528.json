{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4OTg2MzUy", "number": 4528, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTowNzoxOFrODcLDrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDoxNTowOVrODcMLjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODY3ODg3OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/session/AbstractSessionCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTowNzoxOFrOFkFHig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTowNzoxOFrOFkFHig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3NjkwNg==", "bodyText": "Since now you are rethrowing the exception, you don't want to log it at warn level at 370 - otherwise it will be printed out twice.", "url": "https://github.com/eclipse/jetty.project/pull/4528#discussion_r373376906", "createdAt": "2020-01-31T09:07:18Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/session/AbstractSessionCache.java", "diffHunk": "@@ -366,10 +368,15 @@ protected Session getAndEnter(String id, boolean enter) throws Exception\n             catch (Exception e)\n             {\n                 LOG.warn(\"Error loading session {}\", id, e);\n+                exception.set(e);\n                 return null;\n             }\n         });\n \n+        Exception ex = exception.get();\n+        if (ex != null)\n+            throw ex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c19898de71286bc0ca6070018128f8371146d052"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODY4NjgzOnYy", "diffSide": "RIGHT", "path": "tests/test-sessions/test-sessions-common/src/test/java/org/eclipse/jetty/server/session/AbstractSessionCacheTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToxMDozMFrOFkFMhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToxMDozMFrOFkFMhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3ODE4MA==", "bodyText": "Remove System.err.", "url": "https://github.com/eclipse/jetty.project/pull/4528#discussion_r373378180", "createdAt": "2020-01-31T09:10:30Z", "author": {"login": "sbordet"}, "path": "tests/test-sessions/test-sessions-common/src/test/java/org/eclipse/jetty/server/session/AbstractSessionCacheTest.java", "diffHunk": "@@ -43,6 +48,62 @@\n  */\n public abstract class AbstractSessionCacheTest\n {\n+    public static class UnreadableSessionDataStore extends AbstractSessionDataStore\n+    {\n+        public Set<String> _deletedIds = ConcurrentHashMap.newKeySet();\n+        int _count;\n+        int _calls;\n+        SessionData _data;\n+\n+        public UnreadableSessionDataStore(int count, SessionData data)\n+        {\n+            _count = count;\n+            _data = data;\n+        }\n+\n+        @Override\n+        public boolean isPassivating()\n+        {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean exists(String id) throws Exception\n+        {\n+            if (!_deletedIds.contains(id))\n+                return true;\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean delete(String id) throws Exception\n+        {\n+            _deletedIds.add(id);\n+            return true;\n+        }\n+\n+        @Override\n+        public void doStore(String id, SessionData data, long lastSaveTime) throws Exception\n+        {\n+            System.err.println(\"DOSTORE: \" + id + \" lastsave=\" + lastSaveTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c19898de71286bc0ca6070018128f8371146d052"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODY5NjUxOnYy", "diffSide": "RIGHT", "path": "tests/test-sessions/test-sessions-common/src/test/java/org/eclipse/jetty/server/session/AbstractSessionCacheTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToxNDoxMlrOFkFSbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDoxODowNFrOFkG87g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3OTY5Mg==", "bodyText": "Replace with assertNotEquals().", "url": "https://github.com/eclipse/jetty.project/pull/4528#discussion_r373379692", "createdAt": "2020-01-31T09:14:12Z", "author": {"login": "sbordet"}, "path": "tests/test-sessions/test-sessions-common/src/test/java/org/eclipse/jetty/server/session/AbstractSessionCacheTest.java", "diffHunk": "@@ -65,7 +126,56 @@ public void sessionDidActivate(HttpSessionEvent se)\n     public abstract AbstractSessionCacheFactory newSessionCacheFactory(int evictionPolicy, boolean saveOnCreate, \n                                                                        boolean saveOnInactiveEvict, boolean removeUnloadableSessions,\n                                                                        boolean flushOnResponseCommit);\n-    \n+\n+    /**\n+     * Test that a session that exists in the datastore, but that cannot be\n+     * read will be invalidated and deleted, and thus a request to re-use that\n+     * same id will not succeed.\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void testUnreadableSession() throws Exception\n+    {\n+        Server server = new Server();\n+        server.setSessionIdManager(new DefaultSessionIdManager(server));\n+\n+        ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);\n+        context.setContextPath(\"/test\");\n+        context.setServer(server);\n+        server.setHandler(context);\n+\n+        AbstractSessionCacheFactory cacheFactory = newSessionCacheFactory(SessionCache.NEVER_EVICT, false, false, false, false);\n+        SessionCache cache = cacheFactory.getSessionCache(context.getSessionHandler());\n+\n+        //prefill the datastore with a session that will be treated as unreadable\n+        UnreadableSessionDataStore store = new UnreadableSessionDataStore(1, new SessionData(\"1234\", \"/test\", \"0.0.0.0\", System.currentTimeMillis(), 0,0, -1));\n+        cache.setSessionDataStore(store);\n+        context.getSessionHandler().setSessionCache(cache);\n+        server.start();\n+\n+        try (StacklessLogging stackless = new StacklessLogging(Log.getLogger(\"org.eclipse.jetty.server.session\")))\n+        {\n+            //check that session 1234 cannot be read, ie returns null AND\n+            //that it is deleted in the datastore\n+            Session session = context.getSessionHandler().getSession(\"1234\");\n+            assertNull(session);\n+            assertTrue(store._deletedIds.contains(\"1234\"));\n+\n+            //now try to make a session with the same id as if from a request with\n+            //a SESSION_ID cookie set\n+            Request request = new Request(null, null);\n+            request.setRequestedSessionId(\"1234\");\n+            HttpSession newSession = context.getSessionHandler().newHttpSession(request);\n+            assertFalse(\"1234\".equals(newSession.getId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c19898de71286bc0ca6070018128f8371146d052"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwNjk1OA==", "bodyText": "Please add a comment here about the fact that since the session has been deleted, its id cannot be reused, and delete the javadoc of the method (which basically says the same, but in the wrong spot - and who reads test javadocs anyway?!? \ud83d\ude04)", "url": "https://github.com/eclipse/jetty.project/pull/4528#discussion_r373406958", "createdAt": "2020-01-31T10:18:04Z", "author": {"login": "sbordet"}, "path": "tests/test-sessions/test-sessions-common/src/test/java/org/eclipse/jetty/server/session/AbstractSessionCacheTest.java", "diffHunk": "@@ -65,7 +126,56 @@ public void sessionDidActivate(HttpSessionEvent se)\n     public abstract AbstractSessionCacheFactory newSessionCacheFactory(int evictionPolicy, boolean saveOnCreate, \n                                                                        boolean saveOnInactiveEvict, boolean removeUnloadableSessions,\n                                                                        boolean flushOnResponseCommit);\n-    \n+\n+    /**\n+     * Test that a session that exists in the datastore, but that cannot be\n+     * read will be invalidated and deleted, and thus a request to re-use that\n+     * same id will not succeed.\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void testUnreadableSession() throws Exception\n+    {\n+        Server server = new Server();\n+        server.setSessionIdManager(new DefaultSessionIdManager(server));\n+\n+        ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);\n+        context.setContextPath(\"/test\");\n+        context.setServer(server);\n+        server.setHandler(context);\n+\n+        AbstractSessionCacheFactory cacheFactory = newSessionCacheFactory(SessionCache.NEVER_EVICT, false, false, false, false);\n+        SessionCache cache = cacheFactory.getSessionCache(context.getSessionHandler());\n+\n+        //prefill the datastore with a session that will be treated as unreadable\n+        UnreadableSessionDataStore store = new UnreadableSessionDataStore(1, new SessionData(\"1234\", \"/test\", \"0.0.0.0\", System.currentTimeMillis(), 0,0, -1));\n+        cache.setSessionDataStore(store);\n+        context.getSessionHandler().setSessionCache(cache);\n+        server.start();\n+\n+        try (StacklessLogging stackless = new StacklessLogging(Log.getLogger(\"org.eclipse.jetty.server.session\")))\n+        {\n+            //check that session 1234 cannot be read, ie returns null AND\n+            //that it is deleted in the datastore\n+            Session session = context.getSessionHandler().getSession(\"1234\");\n+            assertNull(session);\n+            assertTrue(store._deletedIds.contains(\"1234\"));\n+\n+            //now try to make a session with the same id as if from a request with\n+            //a SESSION_ID cookie set\n+            Request request = new Request(null, null);\n+            request.setRequestedSessionId(\"1234\");\n+            HttpSession newSession = context.getSessionHandler().newHttpSession(request);\n+            assertFalse(\"1234\".equals(newSession.getId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3OTY5Mg=="}, "originalCommit": {"oid": "c19898de71286bc0ca6070018128f8371146d052"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODcwMDY2OnYy", "diffSide": "RIGHT", "path": "tests/test-sessions/test-sessions-common/src/test/java/org/eclipse/jetty/server/session/AbstractSessionCacheTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToxNTo0NFrOFkFU7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToxNTo0NFrOFkFU7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MDMzNA==", "bodyText": "Simplify into return !....", "url": "https://github.com/eclipse/jetty.project/pull/4528#discussion_r373380334", "createdAt": "2020-01-31T09:15:44Z", "author": {"login": "sbordet"}, "path": "tests/test-sessions/test-sessions-common/src/test/java/org/eclipse/jetty/server/session/AbstractSessionCacheTest.java", "diffHunk": "@@ -43,6 +48,62 @@\n  */\n public abstract class AbstractSessionCacheTest\n {\n+    public static class UnreadableSessionDataStore extends AbstractSessionDataStore\n+    {\n+        public Set<String> _deletedIds = ConcurrentHashMap.newKeySet();\n+        int _count;\n+        int _calls;\n+        SessionData _data;\n+\n+        public UnreadableSessionDataStore(int count, SessionData data)\n+        {\n+            _count = count;\n+            _data = data;\n+        }\n+\n+        @Override\n+        public boolean isPassivating()\n+        {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean exists(String id) throws Exception\n+        {\n+            if (!_deletedIds.contains(id))\n+                return true;\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c19898de71286bc0ca6070018128f8371146d052"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODcyNzEzOnYy", "diffSide": "RIGHT", "path": "tests/test-sessions/test-sessions-common/src/test/java/org/eclipse/jetty/server/session/AbstractSessionCacheTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToyNTo1MVrOFkFlZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToyNTo1MVrOFkFlZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4NDU0OA==", "bodyText": "Unnecessary empty line.", "url": "https://github.com/eclipse/jetty.project/pull/4528#discussion_r373384548", "createdAt": "2020-01-31T09:25:51Z", "author": {"login": "sbordet"}, "path": "tests/test-sessions/test-sessions-common/src/test/java/org/eclipse/jetty/server/session/AbstractSessionCacheTest.java", "diffHunk": "@@ -65,7 +126,56 @@ public void sessionDidActivate(HttpSessionEvent se)\n     public abstract AbstractSessionCacheFactory newSessionCacheFactory(int evictionPolicy, boolean saveOnCreate, \n                                                                        boolean saveOnInactiveEvict, boolean removeUnloadableSessions,\n                                                                        boolean flushOnResponseCommit);\n-    \n+\n+    /**\n+     * Test that a session that exists in the datastore, but that cannot be\n+     * read will be invalidated and deleted, and thus a request to re-use that\n+     * same id will not succeed.\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void testUnreadableSession() throws Exception\n+    {\n+        Server server = new Server();\n+        server.setSessionIdManager(new DefaultSessionIdManager(server));\n+\n+        ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);\n+        context.setContextPath(\"/test\");\n+        context.setServer(server);\n+        server.setHandler(context);\n+\n+        AbstractSessionCacheFactory cacheFactory = newSessionCacheFactory(SessionCache.NEVER_EVICT, false, false, false, false);\n+        SessionCache cache = cacheFactory.getSessionCache(context.getSessionHandler());\n+\n+        //prefill the datastore with a session that will be treated as unreadable\n+        UnreadableSessionDataStore store = new UnreadableSessionDataStore(1, new SessionData(\"1234\", \"/test\", \"0.0.0.0\", System.currentTimeMillis(), 0,0, -1));\n+        cache.setSessionDataStore(store);\n+        context.getSessionHandler().setSessionCache(cache);\n+        server.start();\n+\n+        try (StacklessLogging stackless = new StacklessLogging(Log.getLogger(\"org.eclipse.jetty.server.session\")))\n+        {\n+            //check that session 1234 cannot be read, ie returns null AND\n+            //that it is deleted in the datastore\n+            Session session = context.getSessionHandler().getSession(\"1234\");\n+            assertNull(session);\n+            assertTrue(store._deletedIds.contains(\"1234\"));\n+\n+            //now try to make a session with the same id as if from a request with\n+            //a SESSION_ID cookie set\n+            Request request = new Request(null, null);\n+            request.setRequestedSessionId(\"1234\");\n+            HttpSession newSession = context.getSessionHandler().newHttpSession(request);\n+            assertFalse(\"1234\".equals(newSession.getId()));\n+        }\n+        finally\n+        {\n+            server.stop();\n+        }\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c19898de71286bc0ca6070018128f8371146d052"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODcyOTIyOnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/session/AbstractSessionCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToyNjozMFrOFkFmnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToyNjozMFrOFkFmnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4NDg2MA==", "bodyText": "No need for final here.", "url": "https://github.com/eclipse/jetty.project/pull/4528#discussion_r373384860", "createdAt": "2020-01-31T09:26:30Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/session/AbstractSessionCache.java", "diffHunk": "@@ -334,12 +335,13 @@ public Session get(String id) throws Exception\n      * \n      * @param id The session to retrieve\n      * @param enter if true, the usage count of the session will be incremented\n-     * @return\n-     * @throws Exception\n+     * @return the session if it exists, null otherwise\n+     * @throws Exception if the session cannot be loaded\n      */\n     protected Session getAndEnter(String id, boolean enter) throws Exception\n     {\n         Session session = null;\n+        final AtomicReference<Exception> exception = new AtomicReference<Exception>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c19898de71286bc0ca6070018128f8371146d052"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODg2Mjg0OnYy", "diffSide": "RIGHT", "path": "tests/test-sessions/test-sessions-common/src/test/java/org/eclipse/jetty/server/session/AbstractSessionCacheTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDoxNTowOVrOFkG39g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDoxNTowOVrOFkG39g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwNTY4Ng==", "bodyText": "Perhaps you can just use _data in the implementation, so you won't need to remember deleted ids.", "url": "https://github.com/eclipse/jetty.project/pull/4528#discussion_r373405686", "createdAt": "2020-01-31T10:15:09Z", "author": {"login": "sbordet"}, "path": "tests/test-sessions/test-sessions-common/src/test/java/org/eclipse/jetty/server/session/AbstractSessionCacheTest.java", "diffHunk": "@@ -43,6 +48,62 @@\n  */\n public abstract class AbstractSessionCacheTest\n {\n+    public static class UnreadableSessionDataStore extends AbstractSessionDataStore\n+    {\n+        public Set<String> _deletedIds = ConcurrentHashMap.newKeySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c19898de71286bc0ca6070018128f8371146d052"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2781, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}