{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MTY3MjUx", "number": 4935, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjozNjoxM1rOECIjxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjozNjoxM1rOECIjxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjcyODM5OnYy", "diffSide": "RIGHT", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/RegexPathSpec.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjozNjoxM1rOGeZy2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjo0NTo0N1rOGeaI_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzMzA4MQ==", "bodyText": "This code is duplicated 3 times, why don't we have a simple base class like AbstractPathSpec, which could implement this and also maybe compareTo and toString, and then we could reduce the code duplication.\nI made some similar changes like this in my branch at jetty-9.4.x-4877-PathSpecEquals if you want to take a look\n\n  \n    \n      jetty.project/jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/AbstractPathSpec.java\n    \n    \n        Lines 23 to 60\n      in\n      c6a4078\n    \n    \n    \n    \n\n        \n          \n           public abstract class AbstractPathSpec implements PathSpec \n        \n\n        \n          \n           { \n        \n\n        \n          \n               @Override \n        \n\n        \n          \n               public int compareTo(PathSpec other) \n        \n\n        \n          \n               { \n        \n\n        \n          \n                   // Grouping (increasing) \n        \n\n        \n          \n                   int diff = getGroup().ordinal() - other.getGroup().ordinal(); \n        \n\n        \n          \n                   if (diff != 0) \n        \n\n        \n          \n                       return diff; \n        \n\n        \n          \n            \n        \n\n        \n          \n                   // Spec Length (decreasing) \n        \n\n        \n          \n                   diff = other.getSpecLength() - getSpecLength(); \n        \n\n        \n          \n                   if (diff != 0) \n        \n\n        \n          \n                       return diff; \n        \n\n        \n          \n            \n        \n\n        \n          \n                   // Path Spec Name (alphabetical) \n        \n\n        \n          \n                   return getDeclaration().compareTo(other.getDeclaration()); \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               @Override \n        \n\n        \n          \n               public boolean equals(Object obj) \n        \n\n        \n          \n               { \n        \n\n        \n          \n                   if (this == obj) \n        \n\n        \n          \n                       return true; \n        \n\n        \n          \n                   if (obj == null) \n        \n\n        \n          \n                       return false; \n        \n\n        \n          \n                   if (getClass() != obj.getClass()) \n        \n\n        \n          \n                       return false; \n        \n\n        \n          \n            \n        \n\n        \n          \n                   return Objects.equals(getDeclaration(), ((PathSpec)obj).getDeclaration()); \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               @Override \n        \n\n        \n          \n               public String toString() \n        \n\n        \n          \n               { \n        \n\n        \n          \n                   return String.format(\"%s@%s{%s}\", getClass().getSimpleName(), Integer.toHexString(hashCode()), getDeclaration()); \n        \n\n        \n          \n               } \n        \n\n        \n          \n           }", "url": "https://github.com/eclipse/jetty.project/pull/4935#discussion_r434533081", "createdAt": "2020-06-03T12:36:13Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/RegexPathSpec.java", "diffHunk": "@@ -193,4 +194,21 @@ public boolean matches(final String path)\n             return getMatcher(path).matches();\n         }\n     }\n+\n+    @Override\n+    public boolean equals(Object o)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0179dfd57f204c27639958e60b07e1ba788e727"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzNDQyNg==", "bodyText": "@lachlan-roberts because I asked him to make all the fields final. Hard to do the abstract and the final fields without more complication.", "url": "https://github.com/eclipse/jetty.project/pull/4935#discussion_r434534426", "createdAt": "2020-06-03T12:38:32Z", "author": {"login": "gregw"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/RegexPathSpec.java", "diffHunk": "@@ -193,4 +194,21 @@ public boolean matches(final String path)\n             return getMatcher(path).matches();\n         }\n     }\n+\n+    @Override\n+    public boolean equals(Object o)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzMzA4MQ=="}, "originalCommit": {"oid": "a0179dfd57f204c27639958e60b07e1ba788e727"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzNTY1Ng==", "bodyText": "@gregw Take a look at the file I linked, it doesn't prevent having any final fields in the implementations of the abstract class.", "url": "https://github.com/eclipse/jetty.project/pull/4935#discussion_r434535656", "createdAt": "2020-06-03T12:40:36Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/RegexPathSpec.java", "diffHunk": "@@ -193,4 +194,21 @@ public boolean matches(final String path)\n             return getMatcher(path).matches();\n         }\n     }\n+\n+    @Override\n+    public boolean equals(Object o)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzMzA4MQ=="}, "originalCommit": {"oid": "a0179dfd57f204c27639958e60b07e1ba788e727"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzODc1MA==", "bodyText": "I like the idea of this abstract class that provides implementations for toString, equals, hashcode and compareTo, especially if I can get rid of the  PathSpec.compareTo default implementation. But I'd make equals and hashcode final then to make sure compareTo and equals always agree. See my comment for context.", "url": "https://github.com/eclipse/jetty.project/pull/4935#discussion_r434538750", "createdAt": "2020-06-03T12:45:47Z", "author": {"login": "lorban"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/RegexPathSpec.java", "diffHunk": "@@ -193,4 +194,21 @@ public boolean matches(final String path)\n             return getMatcher(path).matches();\n         }\n     }\n+\n+    @Override\n+    public boolean equals(Object o)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzMzA4MQ=="}, "originalCommit": {"oid": "a0179dfd57f204c27639958e60b07e1ba788e727"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2588, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}