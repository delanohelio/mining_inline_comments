{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNTAyMzQ4", "number": 4911, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo0MjozMFrOEBRhxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTozNDoyOFrOEBTZSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzcxMjA1OnYy", "diffSide": "RIGHT", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo0MjozMFrOGdBkcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToyNjozNFrOGdOr3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4NzYwMw==", "bodyText": "IF this can now only be a HttpDestination, why not change the signature of the constructor?", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433087603", "createdAt": "2020-06-01T07:42:30Z", "author": {"login": "gregw"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "diffHunk": "@@ -44,13 +44,13 @@\n      * The bottom 32 bits represent the total connections and the top 32 bits represent the pending connections.\n      */\n     private final AtomicBiInteger connections = new AtomicBiInteger();\n-    private final Destination destination;\n+    private final HttpDestination destination;\n     private final int maxConnections;\n     private final Callback requester;\n \n     protected AbstractConnectionPool(Destination destination, int maxConnections, Callback requester)\n     {\n-        this.destination = destination;\n+        this.destination = (HttpDestination)destination;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ffaa6ffbb0841b4e48e193b85227b8dbbecb98"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5NzAxMQ==", "bodyText": "Because people may have created their own subclasses and it would break them.\nWill do the change in 10 though.", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433097011", "createdAt": "2020-06-01T08:06:26Z", "author": {"login": "sbordet"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "diffHunk": "@@ -44,13 +44,13 @@\n      * The bottom 32 bits represent the total connections and the top 32 bits represent the pending connections.\n      */\n     private final AtomicBiInteger connections = new AtomicBiInteger();\n-    private final Destination destination;\n+    private final HttpDestination destination;\n     private final int maxConnections;\n     private final Callback requester;\n \n     protected AbstractConnectionPool(Destination destination, int maxConnections, Callback requester)\n     {\n-        this.destination = destination;\n+        this.destination = (HttpDestination)destination;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4NzYwMw=="}, "originalCommit": {"oid": "b0ffaa6ffbb0841b4e48e193b85227b8dbbecb98"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3Mzk0Ng==", "bodyText": "You could create a second constructor that does the right thing and deprecate the old one (preparing people for the Jetty 10 change).", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433273946", "createdAt": "2020-06-01T14:39:12Z", "author": {"login": "joakime"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "diffHunk": "@@ -44,13 +44,13 @@\n      * The bottom 32 bits represent the total connections and the top 32 bits represent the pending connections.\n      */\n     private final AtomicBiInteger connections = new AtomicBiInteger();\n-    private final Destination destination;\n+    private final HttpDestination destination;\n     private final int maxConnections;\n     private final Callback requester;\n \n     protected AbstractConnectionPool(Destination destination, int maxConnections, Callback requester)\n     {\n-        this.destination = destination;\n+        this.destination = (HttpDestination)destination;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4NzYwMw=="}, "originalCommit": {"oid": "b0ffaa6ffbb0841b4e48e193b85227b8dbbecb98"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMwMjQ5Mg==", "bodyText": "@joakime good point, done.", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433302492", "createdAt": "2020-06-01T15:26:34Z", "author": {"login": "sbordet"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "diffHunk": "@@ -44,13 +44,13 @@\n      * The bottom 32 bits represent the total connections and the top 32 bits represent the pending connections.\n      */\n     private final AtomicBiInteger connections = new AtomicBiInteger();\n-    private final Destination destination;\n+    private final HttpDestination destination;\n     private final int maxConnections;\n     private final Callback requester;\n \n     protected AbstractConnectionPool(Destination destination, int maxConnections, Callback requester)\n     {\n-        this.destination = destination;\n+        this.destination = (HttpDestination)destination;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4NzYwMw=="}, "originalCommit": {"oid": "b0ffaa6ffbb0841b4e48e193b85227b8dbbecb98"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzcxNTQ4OnYy", "diffSide": "RIGHT", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo0MzozM1rOGdBmZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo0MzozM1rOGdBmZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4ODEwMw==", "bodyText": "javadoc needed to explain the behaviour of this method...  well perhaps tryCreate needs more javadoc too...", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433088103", "createdAt": "2020-06-01T07:43:33Z", "author": {"login": "gregw"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "diffHunk": "@@ -98,11 +98,17 @@ public boolean isClosed()\n \n     @Override\n     public Connection acquire()\n+    {\n+        return acquire(true);\n+    }\n+\n+    protected Connection acquire(boolean create)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ffaa6ffbb0841b4e48e193b85227b8dbbecb98"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzcxODg2OnYy", "diffSide": "RIGHT", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo0NDo0OVrOGdBoZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo0NDo0OVrOGdBoZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4ODYxNQ==", "bodyText": "comment on the strategy here.", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433088615", "createdAt": "2020-06-01T07:44:49Z", "author": {"login": "gregw"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "diffHunk": "@@ -98,11 +98,17 @@ public boolean isClosed()\n \n     @Override\n     public Connection acquire()\n+    {\n+        return acquire(true);\n+    }\n+\n+    protected Connection acquire(boolean create)\n     {\n         Connection connection = activate();\n         if (connection == null)\n         {\n-            tryCreate(-1);\n+            if (create)\n+                tryCreate(destination.getQueuedRequestCount());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ffaa6ffbb0841b4e48e193b85227b8dbbecb98"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzcyMDA2OnYy", "diffSide": "RIGHT", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpConnection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo0NToyMFrOGdBpJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo0NToyMFrOGdBpJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4ODgwNQ==", "bodyText": "comma after fail", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433088805", "createdAt": "2020-06-01T07:45:20Z", "author": {"login": "gregw"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpConnection.java", "diffHunk": "@@ -228,6 +228,8 @@ protected SendFailure send(HttpChannel channel, HttpExchange exchange)\n             }\n             else\n             {\n+                // Association may fail for example if the application", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ffaa6ffbb0841b4e48e193b85227b8dbbecb98"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzcyNjEyOnYy", "diffSide": "RIGHT", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpDestination.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo0Nzo0NVrOGdBs6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTozMzo0NFrOGdEdIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4OTc3MA==", "bodyText": "should this check that the queue is not 0?  Why acquire a connection if there are no waiting exchanges?", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433089770", "createdAt": "2020-06-01T07:47:45Z", "author": {"login": "gregw"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpDestination.java", "diffHunk": "@@ -439,25 +459,27 @@ public void release(Connection connection)\n \n     public boolean remove(Connection connection)\n     {\n-        return connectionPool.remove(connection);\n-    }\n-\n-    public void close(Connection connection)\n-    {\n-        boolean removed = remove(connection);\n+        boolean removed = connectionPool.remove(connection);\n \n         if (getHttpExchanges().isEmpty())\n         {\n             tryRemoveIdleDestination();\n         }\n         else\n         {\n-            // We need to execute queued requests even if this connection failed.\n-            // We may create a connection that is not needed, but it will eventually\n-            // idle timeout, so no worries.\n+            // We need to execute queued requests\n+            // even if this connection was removed.\n+            // We may create a connection that is not\n+            // needed, but it will eventually idle timeout.\n             if (removed)\n-                process();\n+                process(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ffaa6ffbb0841b4e48e193b85227b8dbbecb98"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEwNDM4Nw==", "bodyText": "The check for the queue is done few lines above. Do you want to do it again here?", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433104387", "createdAt": "2020-06-01T08:24:09Z", "author": {"login": "sbordet"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpDestination.java", "diffHunk": "@@ -439,25 +459,27 @@ public void release(Connection connection)\n \n     public boolean remove(Connection connection)\n     {\n-        return connectionPool.remove(connection);\n-    }\n-\n-    public void close(Connection connection)\n-    {\n-        boolean removed = remove(connection);\n+        boolean removed = connectionPool.remove(connection);\n \n         if (getHttpExchanges().isEmpty())\n         {\n             tryRemoveIdleDestination();\n         }\n         else\n         {\n-            // We need to execute queued requests even if this connection failed.\n-            // We may create a connection that is not needed, but it will eventually\n-            // idle timeout, so no worries.\n+            // We need to execute queued requests\n+            // even if this connection was removed.\n+            // We may create a connection that is not\n+            // needed, but it will eventually idle timeout.\n             if (removed)\n-                process();\n+                process(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4OTc3MA=="}, "originalCommit": {"oid": "b0ffaa6ffbb0841b4e48e193b85227b8dbbecb98"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMzY2Ng==", "bodyText": "Opps didn't see that.\nAn else if (removed) would be clearer that there is a condition above.", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433113666", "createdAt": "2020-06-01T08:45:25Z", "author": {"login": "gregw"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpDestination.java", "diffHunk": "@@ -439,25 +459,27 @@ public void release(Connection connection)\n \n     public boolean remove(Connection connection)\n     {\n-        return connectionPool.remove(connection);\n-    }\n-\n-    public void close(Connection connection)\n-    {\n-        boolean removed = remove(connection);\n+        boolean removed = connectionPool.remove(connection);\n \n         if (getHttpExchanges().isEmpty())\n         {\n             tryRemoveIdleDestination();\n         }\n         else\n         {\n-            // We need to execute queued requests even if this connection failed.\n-            // We may create a connection that is not needed, but it will eventually\n-            // idle timeout, so no worries.\n+            // We need to execute queued requests\n+            // even if this connection was removed.\n+            // We may create a connection that is not\n+            // needed, but it will eventually idle timeout.\n             if (removed)\n-                process();\n+                process(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4OTc3MA=="}, "originalCommit": {"oid": "b0ffaa6ffbb0841b4e48e193b85227b8dbbecb98"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzMjIxNQ==", "bodyText": "I think an else if would then require the code comment to be moved to a less ideal place so I'm inclined to leave as is.", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433132215", "createdAt": "2020-06-01T09:27:15Z", "author": {"login": "sbordet"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpDestination.java", "diffHunk": "@@ -439,25 +459,27 @@ public void release(Connection connection)\n \n     public boolean remove(Connection connection)\n     {\n-        return connectionPool.remove(connection);\n-    }\n-\n-    public void close(Connection connection)\n-    {\n-        boolean removed = remove(connection);\n+        boolean removed = connectionPool.remove(connection);\n \n         if (getHttpExchanges().isEmpty())\n         {\n             tryRemoveIdleDestination();\n         }\n         else\n         {\n-            // We need to execute queued requests even if this connection failed.\n-            // We may create a connection that is not needed, but it will eventually\n-            // idle timeout, so no worries.\n+            // We need to execute queued requests\n+            // even if this connection was removed.\n+            // We may create a connection that is not\n+            // needed, but it will eventually idle timeout.\n             if (removed)\n-                process();\n+                process(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4OTc3MA=="}, "originalCommit": {"oid": "b0ffaa6ffbb0841b4e48e193b85227b8dbbecb98"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzNDg4MA==", "bodyText": "The comment would be better in the body of the else if, as it would not need to repeat the \"if removed\":\nif (getHttpExchanges().isEmpty())\n{\n    tryRemoveIdleDestination();\n}\nelse if (removed)\n{\n   // Process queued exchanges because waiting exchanges may now be able to progress. \n   process(true);\n}", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433134880", "createdAt": "2020-06-01T09:33:44Z", "author": {"login": "gregw"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpDestination.java", "diffHunk": "@@ -439,25 +459,27 @@ public void release(Connection connection)\n \n     public boolean remove(Connection connection)\n     {\n-        return connectionPool.remove(connection);\n-    }\n-\n-    public void close(Connection connection)\n-    {\n-        boolean removed = remove(connection);\n+        boolean removed = connectionPool.remove(connection);\n \n         if (getHttpExchanges().isEmpty())\n         {\n             tryRemoveIdleDestination();\n         }\n         else\n         {\n-            // We need to execute queued requests even if this connection failed.\n-            // We may create a connection that is not needed, but it will eventually\n-            // idle timeout, so no worries.\n+            // We need to execute queued requests\n+            // even if this connection was removed.\n+            // We may create a connection that is not\n+            // needed, but it will eventually idle timeout.\n             if (removed)\n-                process();\n+                process(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4OTc3MA=="}, "originalCommit": {"oid": "b0ffaa6ffbb0841b4e48e193b85227b8dbbecb98"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Nzg3MjM5OnYy", "diffSide": "RIGHT", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODo0MjozN1rOGdDFMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODo0MjozN1rOGdDFMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMjM2OQ==", "bodyText": "Does it always create a new connection?    This should say if possible or may schedule.... . At the very least refer to tryCreate for the actual strategy applied.", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433112369", "createdAt": "2020-06-01T08:42:37Z", "author": {"login": "gregw"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "diffHunk": "@@ -98,16 +97,41 @@ public boolean isClosed()\n \n     @Override\n     public Connection acquire()\n+    {\n+        return acquire(true);\n+    }\n+\n+    /**\n+     * <p>Returns an idle connection, if available;\n+     * if an idle connection is not available, and the given {@code create} parameter is {@code true},\n+     * then schedules the opening of a new connection;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ac799afa7c2e07ef8ce5b0441c7a07bedc661bd"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Nzk0MTA3OnYy", "diffSide": "LEFT", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/MultiplexConnectionPool.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTowNjoxNVrOGdDu7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjozNDowMFrOGdI4RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyMzA1Mw==", "bodyText": "How about this one-liner instead?\nint maxPending = (destination.getQueuedRequestCount() + getMaxMultiplex() - 1) / getMaxMultiplex();", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433123053", "createdAt": "2020-06-01T09:06:15Z", "author": {"login": "lorban"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/MultiplexConnectionPool.java", "diffHunk": "@@ -64,7 +64,11 @@ public Connection acquire()\n         Connection connection = activate();\n         if (connection == null)\n         {\n-            int maxPending = 1 + destination.getQueuedRequestCount() / getMaxMultiplex();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ac799afa7c2e07ef8ce5b0441c7a07bedc661bd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0MzczOQ==", "bodyText": "That is obfuscated... Does it do ceiling(a/b)?", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433143739", "createdAt": "2020-06-01T09:54:52Z", "author": {"login": "sbordet"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/MultiplexConnectionPool.java", "diffHunk": "@@ -64,7 +64,11 @@ public Connection acquire()\n         Connection connection = activate();\n         if (connection == null)\n         {\n-            int maxPending = 1 + destination.getQueuedRequestCount() / getMaxMultiplex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyMzA1Mw=="}, "originalCommit": {"oid": "4ac799afa7c2e07ef8ce5b0441c7a07bedc661bd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwNzM2NA==", "bodyText": "Yes, it's the integer version of the following:\nMath.ceil((double) destination.getQueuedRequestCount() / getMaxMultiplex())", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433207364", "createdAt": "2020-06-01T12:34:00Z", "author": {"login": "lorban"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/MultiplexConnectionPool.java", "diffHunk": "@@ -64,7 +64,11 @@ public Connection acquire()\n         Connection connection = activate();\n         if (connection == null)\n         {\n-            int maxPending = 1 + destination.getQueuedRequestCount() / getMaxMultiplex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyMzA1Mw=="}, "originalCommit": {"oid": "4ac799afa7c2e07ef8ce5b0441c7a07bedc661bd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Nzk1NTIyOnYy", "diffSide": "RIGHT", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOToxMToxM1rOGdD3gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDowMToxNFrOGdFKPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyNTI0OQ==", "bodyText": "The documented contract is not respected by the RoundRobinConnectionPool subclass. That should probably be documented too.", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433125249", "createdAt": "2020-06-01T09:11:13Z", "author": {"login": "lorban"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "diffHunk": "@@ -98,16 +97,41 @@ public boolean isClosed()\n \n     @Override\n     public Connection acquire()\n+    {\n+        return acquire(true);\n+    }\n+\n+    /**\n+     * <p>Returns an idle connection, if available;\n+     * if an idle connection is not available, and the given {@code create} parameter is {@code true},\n+     * then schedules the opening of a new connection;\n+     * otherwise returns {@code null}.</p>\n+     *\n+     * @param create whether to schedule the opening of a connection if no idle connections are available\n+     * @return an idle connection or {@code null} if no idle connections are available\n+     */\n+    protected Connection acquire(boolean create)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ac799afa7c2e07ef8ce5b0441c7a07bedc661bd"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0NjQzMQ==", "bodyText": "Documented.", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433146431", "createdAt": "2020-06-01T10:01:14Z", "author": {"login": "sbordet"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "diffHunk": "@@ -98,16 +97,41 @@ public boolean isClosed()\n \n     @Override\n     public Connection acquire()\n+    {\n+        return acquire(true);\n+    }\n+\n+    /**\n+     * <p>Returns an idle connection, if available;\n+     * if an idle connection is not available, and the given {@code create} parameter is {@code true},\n+     * then schedules the opening of a new connection;\n+     * otherwise returns {@code null}.</p>\n+     *\n+     * @param create whether to schedule the opening of a connection if no idle connections are available\n+     * @return an idle connection or {@code null} if no idle connections are available\n+     */\n+    protected Connection acquire(boolean create)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyNTI0OQ=="}, "originalCommit": {"oid": "4ac799afa7c2e07ef8ce5b0441c7a07bedc661bd"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODAxNjQyOnYy", "diffSide": "RIGHT", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpDestination.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTozMzo1MFrOGdEdRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDowNDowMFrOGdFOhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzNDkxNw==", "bodyText": "Since close(Connection) and remove(Connection) are now identical, shouldn't one of them be removed?", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433134917", "createdAt": "2020-06-01T09:33:50Z", "author": {"login": "lorban"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpDestination.java", "diffHunk": "@@ -439,25 +459,27 @@ public void release(Connection connection)\n \n     public boolean remove(Connection connection)\n     {\n-        return connectionPool.remove(connection);\n-    }\n-\n-    public void close(Connection connection)\n-    {\n-        boolean removed = remove(connection);\n+        boolean removed = connectionPool.remove(connection);\n \n         if (getHttpExchanges().isEmpty())\n         {\n             tryRemoveIdleDestination();\n         }\n         else\n         {\n-            // We need to execute queued requests even if this connection failed.\n-            // We may create a connection that is not needed, but it will eventually\n-            // idle timeout, so no worries.\n+            // We need to execute queued requests\n+            // even if this connection was removed.\n+            // We may create a connection that is not\n+            // needed, but it will eventually idle timeout.\n             if (removed)\n-                process();\n+                process(true);\n         }\n+        return connectionPool.remove(connection);\n+    }\n+\n+    public void close(Connection connection)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ac799afa7c2e07ef8ce5b0441c7a07bedc661bd"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0NzUyNA==", "bodyText": "I deprecated close(Connection) to be removed in 10.", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433147524", "createdAt": "2020-06-01T10:04:00Z", "author": {"login": "sbordet"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpDestination.java", "diffHunk": "@@ -439,25 +459,27 @@ public void release(Connection connection)\n \n     public boolean remove(Connection connection)\n     {\n-        return connectionPool.remove(connection);\n-    }\n-\n-    public void close(Connection connection)\n-    {\n-        boolean removed = remove(connection);\n+        boolean removed = connectionPool.remove(connection);\n \n         if (getHttpExchanges().isEmpty())\n         {\n             tryRemoveIdleDestination();\n         }\n         else\n         {\n-            // We need to execute queued requests even if this connection failed.\n-            // We may create a connection that is not needed, but it will eventually\n-            // idle timeout, so no worries.\n+            // We need to execute queued requests\n+            // even if this connection was removed.\n+            // We may create a connection that is not\n+            // needed, but it will eventually idle timeout.\n             if (removed)\n-                process();\n+                process(true);\n         }\n+        return connectionPool.remove(connection);\n+    }\n+\n+    public void close(Connection connection)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzNDkxNw=="}, "originalCommit": {"oid": "4ac799afa7c2e07ef8ce5b0441c7a07bedc661bd"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODAxODAwOnYy", "diffSide": "RIGHT", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/RoundRobinConnectionPool.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTozNDoyOFrOGdEeRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTozNDoyOFrOGdEeRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzNTE3NA==", "bodyText": "As mentioned earlier, this implementation breaks the javadoc's contract.", "url": "https://github.com/eclipse/jetty.project/pull/4911#discussion_r433135174", "createdAt": "2020-06-01T09:34:28Z", "author": {"login": "lorban"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/RoundRobinConnectionPool.java", "diffHunk": "@@ -69,6 +69,14 @@ public void setMaxMultiplex(int maxMultiplex)\n         }\n     }\n \n+    @Override\n+    protected Connection acquire(boolean create)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ac799afa7c2e07ef8ce5b0441c7a07bedc661bd"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2567, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}