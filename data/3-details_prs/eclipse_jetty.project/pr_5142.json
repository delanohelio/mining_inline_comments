{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2OTI2ODA3", "number": 5142, "title": "Issue #5133 - Improve ResourceFactory and Resource list handling", "bodyText": "Now parsed by WebAppContext into List<Resource>\nReintroduced Resource.fromList() from old PR.\nRefactored ResourceFactory to never return null and always throw an exception if unable to get/create/resolve the Resource\nResourceHandler.getResource(String) cleaned up in light of Exception handling requirement\nResource.addPath(String) implementations can\nnever return null now", "createdAt": "2020-08-12T18:08:42Z", "url": "https://github.com/eclipse/jetty.project/pull/5142", "merged": true, "mergeCommit": {"oid": "33286db44bdfc8a50a74ba25d2f70414bb85fd35"}, "closed": true, "closedAt": "2020-09-22T17:24:56Z", "author": {"login": "joakime"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-PLDRAH2gAyNDY2OTI2ODA3OjBiMGQ3ZDMyODIyMzU3N2IyYWNkYTBmZDlhYjIyMzE5MzA3NjJiYjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLajTvAFqTQ5MzY0MTc1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0b0d7d328223577b2acda0fd9ab2231930762bb8", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/0b0d7d328223577b2acda0fd9ab2231930762bb8", "committedDate": "2020-08-12T17:50:02Z", "message": "Issue #5133 - Reworking WebAppContext.extraClasspath\n\n+ Now parsed by WebAppContext into List<Resource>\n+ Reintroduced Resource.fromList\n+ Refactored ResourceFactory to never return null\n  and always throw an exception if unable to\n  get/create/resolve the Resource\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6848403d3480f07fb41048108d9946fab542db35", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/6848403d3480f07fb41048108d9946fab542db35", "committedDate": "2020-08-12T18:06:09Z", "message": "Issue #5133 - Reworking WebAppContext.extraClasspath\n\n+ Reverting name ResourceFactory.newResource(String)\n  to .getResource(String)\n+ Reintroducing Resource.getResource(String)\n+ ResourceHandler.getResource(String) cleaned up\n  in light of Exception handling requirement\n+ Resource.addPath(String) implementations can\n  never return null now\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d3711c3c04aea3b8c22515526dbd9189deb9735", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/5d3711c3c04aea3b8c22515526dbd9189deb9735", "committedDate": "2020-08-13T16:12:20Z", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-5133-webappcontext-extraclasspath-cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f881a1a2fe904938bd741d38269eba374922f1bb", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/f881a1a2fe904938bd741d38269eba374922f1bb", "committedDate": "2020-08-20T18:32:47Z", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-5133-webappcontext-extraclasspath-cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/b35c4332b2ceda2ee7fd9a80027424175405fad2", "committedDate": "2020-08-20T18:35:48Z", "message": "Issue #5133 - Fixing ResourceCollection(String) when no entries provided.\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDQwMzI2", "url": "https://github.com/eclipse/jetty.project/pull/5142#pullrequestreview-474440326", "createdAt": "2020-08-25T12:42:24Z", "commit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0MzoxOVrOHGWPkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzoxOTozMVrOHGXsiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxNzkzOQ==", "bodyText": "Why has this method been deleted?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476417939", "createdAt": "2020-08-25T12:43:19Z", "author": {"login": "janbartel"}, "path": "jetty-osgi/jetty-osgi-boot/src/main/java/org/eclipse/jetty/osgi/boot/internal/webapp/OSGiWebappClassLoader.java", "diffHunk": "@@ -274,35 +266,4 @@ private boolean isAcceptableLibrary(File file, Set<String> pathToClassFiles)\n     }\n \n     private static Field _contextField;\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxODMzNA==", "bodyText": "This seems part of some kind of general code cleanup, and not directly related to the extraClasspath", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476418334", "createdAt": "2020-08-25T12:44:03Z", "author": {"login": "janbartel"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/CachedContentFactory.java", "diffHunk": "@@ -188,8 +188,7 @@ public HttpContent getContent(String pathInContext, int maxBufferSize) throws IO\n         if (_parent != null)\n         {\n             HttpContent httpContent = _parent.getContent(pathInContext, maxBufferSize);\n-            if (httpContent != null)\n-                return httpContent;\n+            return httpContent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyMDY0MA==", "bodyText": "So where previously we had a declared IOException, this method now throws it wrapped inside an InvalidPathException instead?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476420640", "createdAt": "2020-08-25T12:47:51Z", "author": {"login": "janbartel"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/ResourceContentFactory.java", "diffHunk": "@@ -51,14 +51,12 @@ public ResourceContentFactory(ResourceFactory factory, MimeTypes mimeTypes, Comp\n \n     @Override\n     public HttpContent getContent(String pathInContext, int maxBufferSize)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyMTIzNg==", "bodyText": "Again, no problem with the substance of this, it's just the inclusion of this unrelated cleanup into this PR.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476421236", "createdAt": "2020-08-25T12:48:50Z", "author": {"login": "janbartel"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "diffHunk": "@@ -74,7 +74,7 @@ protected void notFound(HttpServletRequest request, HttpServletResponse response\n             {\n             }\n         });\n-        _resourceService.setGzipEquivalentFileExtensions(new ArrayList<>(Arrays.asList(new String[]{\".svgz\"})));\n+        _resourceService.setGzipEquivalentFileExtensions(new ArrayList<>(Collections.singletonList(\".svgz\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyOTIyMw==", "bodyText": "Maybe it would be better to change _resources from an array to a List?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476429223", "createdAt": "2020-08-25T13:00:10Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -147,6 +148,22 @@ public ResourceCollection(String csvResources)\n         return _resources;\n     }\n \n+    /**\n+     * Sets the resource collection's resources.\n+     *\n+     * @param res the resources to set\n+     */\n+    public void setResources(List<Resource> res)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMjE2MA==", "bodyText": "Isn't this the opposite of the foregoing comment: \"Glob references will only iterate through the level specified and will not traverse found directories within the glob reference\"?  The intention is that when the wildcard char * is used, deep directory traversal is not supported.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476432160", "createdAt": "2020-08-25T13:04:51Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "diffHunk": "@@ -921,4 +913,97 @@ public static URL toURL(File file) throws MalformedURLException\n     {\n         return file.toURI().toURL();\n     }\n+\n+    /**\n+     * Parse a list of String delimited resources and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param globDirs true if glob references return directories within the glob as well\n+     * @return the list of resources parsed from input string.\n+     */\n+    public static List<Resource> fromList(String delimitedReferences, boolean globDirs) throws IOException\n+    {\n+        return fromList(delimitedReferences, globDirs, Resource::newResource);\n+    }\n+\n+    /**\n+     * Parse a delimited String of resource references and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param globDirs true if glob references return directories within the glob as well", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMjUwNQ==", "bodyText": "Isn't this the opposite of the foregoing comment: \"Glob references will only iterate through the level specified and will not traverse found directories within the glob reference\"? The intention is that when the wildcard char * is used, deep directory traversal is not supported.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476432505", "createdAt": "2020-08-25T13:05:21Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "diffHunk": "@@ -921,4 +913,97 @@ public static URL toURL(File file) throws MalformedURLException\n     {\n         return file.toURI().toURL();\n     }\n+\n+    /**\n+     * Parse a list of String delimited resources and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param globDirs true if glob references return directories within the glob as well", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MTczNw==", "bodyText": "I don't like WebAppClassLoader setting itself up from the extraClasspath:  the WebAppClassLoader is configured by the WebInfConfiguration, so I don't see why the extraClassPath shouldn't be too.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476441737", "createdAt": "2020-08-25T13:19:31Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebAppClassLoader.java", "diffHunk": "@@ -185,15 +185,20 @@ public WebAppClassLoader(ClassLoader parent, Context context)\n         String extensions = System.getProperty(WebAppClassLoader.class.getName() + \".extensions\");\n         if (extensions != null)\n         {\n-            StringTokenizer tokenizer = new StringTokenizer(extensions, \",;\");\n+            StringTokenizer tokenizer = new StringTokenizer(extensions, StringUtil.DEFAULT_DELIMS);\n             while (tokenizer.hasMoreTokens())\n             {\n                 _extensions.add(tokenizer.nextToken().trim());\n             }\n         }\n \n         if (context.getExtraClasspath() != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDg4MDYy", "url": "https://github.com/eclipse/jetty.project/pull/5142#pullrequestreview-474488062", "createdAt": "2020-08-25T13:36:47Z", "commit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzozNjo0N1rOHGYb9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzozNjo0N1rOHGYb9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ1Mzg3Nw==", "bodyText": "The jetty maven plugin has a use-case for turning a ResourceCollection back into a csv list - any chance you could add that onto ResourceCollection?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476453877", "createdAt": "2020-08-25T13:36:47Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -293,11 +275,13 @@ public Resource addPath(String path) throws IOException\n         {\n             return resource;\n         }\n+\n         if (resources != null)\n         {\n             return new ResourceCollection(resources.toArray(new Resource[0]));\n         }\n-        return null;\n+\n+        throw new MalformedURLException(\"path does not result in Resource: \" + path);\n     }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 150}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NjQ2ODEx", "url": "https://github.com/eclipse/jetty.project/pull/5142#pullrequestreview-474646811", "createdAt": "2020-08-25T16:22:22Z", "commit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyMjoyM1rOHGf3Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjozNjowMlrOHGgaBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NTU3OQ==", "bodyText": "What would happen if we didn't catch here?    A 500 response probably, but that might be more appropriate that a null response?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476575579", "createdAt": "2020-08-25T16:22:23Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/CachedContentFactory.java", "diffHunk": "@@ -234,18 +233,26 @@ private HttpContent load(String pathInContext, Resource resource, int maxBufferS\n                     if (compressedContent == null || compressedContent.isValid())\n                     {\n                         compressedContent = null;\n-                        Resource compressedResource = _factory.getResource(compressedPathInContext);\n-                        if (compressedResource.exists() && compressedResource.lastModified() >= resource.lastModified() &&\n-                            compressedResource.length() < resource.length())\n+                        try\n                         {\n-                            compressedContent = new CachedHttpContent(compressedPathInContext, compressedResource, null);\n-                            CachedHttpContent added = _cache.putIfAbsent(compressedPathInContext, compressedContent);\n-                            if (added != null)\n+                            Resource compressedResource = _factory.getResource(compressedPathInContext);\n+                            if (compressedResource.exists() && compressedResource.lastModified() >= resource.lastModified() &&\n+                                compressedResource.length() < resource.length())\n                             {\n-                                compressedContent.invalidate();\n-                                compressedContent = added;\n+                                compressedContent = new CachedHttpContent(compressedPathInContext, compressedResource, null);\n+                                CachedHttpContent added = _cache.putIfAbsent(compressedPathInContext, compressedContent);\n+                                if (added != null)\n+                                {\n+                                    compressedContent.invalidate();\n+                                    compressedContent = added;\n+                                }\n                             }\n                         }\n+                        catch (IOException e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NTk2Mg==", "bodyText": "again I think we should consider not catching here.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476575962", "createdAt": "2020-08-25T16:22:58Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/CachedContentFactory.java", "diffHunk": "@@ -279,12 +286,20 @@ private HttpContent load(String pathInContext, Resource resource, int maxBufferS\n                 if (compressedContent != null && compressedContent.isValid() && compressedContent.getResource().lastModified() >= resource.lastModified())\n                     compressedContents.put(format, compressedContent);\n \n-                // Is there a precompressed resource?\n-                Resource compressedResource = _factory.getResource(compressedPathInContext);\n-                if (compressedResource.exists() && compressedResource.lastModified() >= resource.lastModified() &&\n-                    compressedResource.length() < resource.length())\n-                    compressedContents.put(format,\n-                        new ResourceHttpContent(compressedResource, _mimeTypes.getMimeByExtension(compressedPathInContext), maxBufferSize));\n+                try\n+                {\n+                    // Is there a precompressed resource?\n+                    Resource compressedResource = _factory.getResource(compressedPathInContext);\n+                    if (compressedResource.exists() && compressedResource.lastModified() >= resource.lastModified() &&\n+                        compressedResource.length() < resource.length())\n+                        compressedContents.put(format,\n+                            new ResourceHttpContent(compressedResource, _mimeTypes.getMimeByExtension(compressedPathInContext), maxBufferSize));\n+                }\n+                catch (IOException e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NzMyMA==", "bodyText": "again let's analyse what happens without a catch here", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476577320", "createdAt": "2020-08-25T16:25:06Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "diffHunk": "@@ -86,9 +86,18 @@ public String getWelcomeFile(String pathInContext)\n         for (int i = 0; i < _welcomes.length; i++)\n         {\n             String welcomeInContext = URIUtil.addPaths(pathInContext, _welcomes[i]);\n-            Resource welcome = getResource(welcomeInContext);\n-            if (welcome != null && welcome.exists())\n-                return welcomeInContext;\n+            try\n+            {\n+                Resource welcome = getResource(welcomeInContext);\n+                if (welcome.exists())\n+                    return welcomeInContext;\n+            }\n+            catch (IOException e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3OTA5MQ==", "bodyText": "I don't think the message is right.\nThis method should still return a resource EVEN IF not found, as the request might be a PUT about to create the resource.\nThis method should only throw if something has gone horribly wrong.\nPerhaps this should be an IllegalArguementException ?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476579091", "createdAt": "2020-08-25T16:27:43Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "diffHunk": "@@ -157,27 +163,28 @@ public Resource getResource(String path)\n                 path = URIUtil.canonicalPath(path);\n                 r = _baseResource.addPath(path);\n \n-                if (r != null && r.isAlias() && (_context == null || !_context.checkAlias(path, r)))\n+                if (r.isAlias() && (_context == null || !_context.checkAlias(path, r)))\n                 {\n                     if (LOG.isDebugEnabled())\n-                        LOG.debug(\"resource={} alias={}\", r, r.getAlias());\n-                    return null;\n+                        LOG.debug(\"Rejected alias resource={} alias={}\", r, r.getAlias());\n+                    throw new IOException(\"Rejected (see debug logs)\");\n                 }\n             }\n             else if (_context != null)\n+            {\n                 r = _context.getResource(path);\n+                if (r != null)\n+                    return r;\n+            }\n \n             if ((r == null || !r.exists()) && path.endsWith(\"/jetty-dir.css\"))\n                 r = getStylesheet();\n \n-            return r;\n-        }\n-        catch (Exception e)\n-        {\n-            LOG.debug(\"Unable to get Resource for {}\", path, e);\n+            if (r != null)\n+                return r;\n         }\n \n-        return null;\n+        throw new IOException(\"Unable to find Resource for \" + path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MjY5Nw==", "bodyText": "can't say I love delimitedReferences.\nHow about resourceList", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476582697", "createdAt": "2020-08-25T16:33:11Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "diffHunk": "@@ -921,4 +913,97 @@ public static URL toURL(File file) throws MalformedURLException\n     {\n         return file.toURI().toURL();\n     }\n+\n+    /**\n+     * Parse a list of String delimited resources and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param globDirs true if glob references return directories within the glob as well\n+     * @return the list of resources parsed from input string.\n+     */\n+    public static List<Resource> fromList(String delimitedReferences, boolean globDirs) throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MzY3Mg==", "bodyText": "I've no probs with that, but it has to be pass by value semantics and not pass by reference, so the list will be copied no matter what.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476583672", "createdAt": "2020-08-25T16:34:43Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -147,6 +148,22 @@ public ResourceCollection(String csvResources)\n         return _resources;\n     }\n \n+    /**\n+     * Sets the resource collection's resources.\n+     *\n+     * @param res the resources to set\n+     */\n+    public void setResources(List<Resource> res)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyOTIyMw=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NDA1OQ==", "bodyText": "perhaps stress that a Resource might not exist.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476584059", "createdAt": "2020-08-25T16:35:22Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceFactory.java", "diffHunk": "@@ -18,17 +18,26 @@\n \n package org.eclipse.jetty.util.resource;\n \n+import java.io.IOException;\n+\n /**\n  * ResourceFactory.\n  */\n public interface ResourceFactory\n {\n-\n     /**\n-     * Get a resource for a path.\n+     * Get a Resource from a provided String.\n+     * <p>\n+     * The behavior here is dependent on the\n+     * implementation of ResourceFactory.\n+     * The provided path can be resolved\n+     * against a known Resource, or can\n+     * be a from-scratch Resource.\n+     * </p>\n      *\n      * @param path The path to the resource\n-     * @return The resource or null\n+     * @return The resource\n+     * @throws IOException if unable to create Resource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NDQ1NQ==", "bodyText": "IllegalArgException", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476584455", "createdAt": "2020-08-25T16:36:02Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/URLResource.java", "diffHunk": "@@ -290,7 +290,9 @@ public Resource addPath(String path)\n         throws IOException, MalformedURLException\n     {\n         if (path == null)\n-            return null;\n+        {\n+            throw new MalformedURLException(\"null path\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NTQ0Njkx", "url": "https://github.com/eclipse/jetty.project/pull/5142#pullrequestreview-475544691", "createdAt": "2020-08-26T14:26:20Z", "commit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDoyNjoyMFrOHHOwBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDoyNjoyMFrOHHOwBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0Mzc1MA==", "bodyText": "This method name is wrong.\nThis javadoc is wrong.\nThis message is wrong.\nWe are not doing CSV, we are doing simple delimited strings (which is not CSV).", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r477343750", "createdAt": "2020-08-26T14:26:20Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -182,56 +193,27 @@ public void setResources(Resource[] resources)\n      *\n      * @param csvResources the comma-separated string containing\n      * one or more resource strings.\n+     * @throws IOException if unable resource declared is not valid\n      */\n-    public void setResourcesAsCSV(String csvResources)\n+    public void setResourcesAsCSV(String csvResources) throws IOException\n     {\n-        if (csvResources == null)\n-        {\n-            throw new IllegalArgumentException(\"CSV String is null\");\n-        }\n-\n-        StringTokenizer tokenizer = new StringTokenizer(csvResources, \",;\");\n-        int len = tokenizer.countTokens();\n-        if (len == 0)\n+        if (StringUtil.isBlank(csvResources))\n         {\n-            throw new IllegalArgumentException(\"ResourceCollection@setResourcesAsCSV(String) \" +\n-                \" argument must be a string containing one or more comma-separated resource strings.\");\n+            throw new IllegalArgumentException(\"CSV String is blank\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccc863726b60c9d5bf6e068f639b8786aa5c83ec", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/ccc863726b60c9d5bf6e068f639b8786aa5c83ec", "committedDate": "2020-08-26T17:19:22Z", "message": "Issue #5133 - Updates based on review\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNTIyODcz", "url": "https://github.com/eclipse/jetty.project/pull/5142#pullrequestreview-492522873", "createdAt": "2020-09-21T11:56:42Z", "commit": {"oid": "ccc863726b60c9d5bf6e068f639b8786aa5c83ec"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMTo1Njo0MlrOHVMeyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMTo1Njo0MlrOHVMeyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk4NjYzNA==", "bodyText": "This is still the wrong exception.\nThe situation where r==nul does not represent file not found.  I not found file will return a resource that does not exist.\nr==null (if it can happen???) represents something illegal or wrong!", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r491986634", "createdAt": "2020-09-21T11:56:42Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "diffHunk": "@@ -140,44 +142,51 @@ public MimeTypes getMimeTypes()\n     }\n \n     @Override\n-    public Resource getResource(String path)\n+    public Resource getResource(String path) throws IOException\n     {\n         if (LOG.isDebugEnabled())\n-            LOG.debug(\"{} getResource({})\", _context == null ? _baseResource : _context, _baseResource, path);\n+            LOG.debug(\"{} getResource({}): baseResource:{}\", _context == null ? _baseResource : _context, path, _baseResource);\n \n-        if (path == null || !path.startsWith(\"/\"))\n-            return null;\n+        if (StringUtil.isBlank(path))\n+        {\n+            throw new IllegalArgumentException(\"Path is blank\");\n+        }\n \n-        try\n+        if (!path.startsWith(\"/\"))\n+        {\n+            throw new IllegalArgumentException(\"Path reference invalid: \" + path);\n+        }\n+\n+        Resource r = null;\n+\n+        if (_baseResource != null)\n         {\n-            Resource r = null;\n+            path = URIUtil.canonicalPath(path);\n+            r = _baseResource.addPath(path);\n \n-            if (_baseResource != null)\n+            if (r.isAlias() && (_context == null || !_context.checkAlias(path, r)))\n             {\n-                path = URIUtil.canonicalPath(path);\n-                r = _baseResource.addPath(path);\n-\n-                if (r != null && r.isAlias() && (_context == null || !_context.checkAlias(path, r)))\n-                {\n-                    if (LOG.isDebugEnabled())\n-                        LOG.debug(\"resource={} alias={}\", r, r.getAlias());\n-                    return null;\n-                }\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Rejected alias resource={} alias={}\", r, r.getAlias());\n+                throw new IllegalStateException(\"Rejected alias reference: \" + path);\n             }\n-            else if (_context != null)\n-                r = _context.getResource(path);\n+        }\n+        else if (_context != null)\n+        {\n+            r = _context.getResource(path);\n+            if (r != null)\n+                return r;\n+        }\n \n-            if ((r == null || !r.exists()) && path.endsWith(\"/jetty-dir.css\"))\n-                r = getStylesheet();\n+        if ((r == null || !r.exists()) && path.endsWith(\"/jetty-dir.css\"))\n+            r = getStylesheet();\n \n-            return r;\n-        }\n-        catch (Exception e)\n+        if (r == null)\n         {\n-            LOG.debug(\"Unable to get Resource for {}\", path, e);\n+            throw new FileNotFoundException(\"Resource: \" + path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccc863726b60c9d5bf6e068f639b8786aa5c83ec"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNTQzMTY4", "url": "https://github.com/eclipse/jetty.project/pull/5142#pullrequestreview-492543168", "createdAt": "2020-09-21T12:25:44Z", "commit": {"oid": "ccc863726b60c9d5bf6e068f639b8786aa5c83ec"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjoyNTo0NFrOHVNbZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjozNzoyOFrOHVN5AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwMjE1MQ==", "bodyText": "How about \"true to return directories in addition to files at the level of the glob\"?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r492002151", "createdAt": "2020-09-21T12:25:44Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "diffHunk": "@@ -921,4 +913,97 @@ public static URL toURL(File file) throws MalformedURLException\n     {\n         return file.toURI().toURL();\n     }\n+\n+    /**\n+     * Parse a list of String delimited resources and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param globDirs true if glob references return directories within the glob as well\n+     * @return the list of resources parsed from input string.\n+     */\n+    public static List<Resource> fromList(String delimitedReferences, boolean globDirs) throws IOException\n+    {\n+        return fromList(delimitedReferences, globDirs, Resource::newResource);\n+    }\n+\n+    /**\n+     * Parse a delimited String of resource references and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param globDirs true if glob references return directories within the glob as well", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMjE2MA=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwMzEzOQ==", "bodyText": "I don't think this is a big deal ... it's been this way for years without problems, so in the interests of getting 10 out, I'm fine with it as it is.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r492003139", "createdAt": "2020-09-21T12:27:31Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -182,56 +193,27 @@ public void setResources(Resource[] resources)\n      *\n      * @param csvResources the comma-separated string containing\n      * one or more resource strings.\n+     * @throws IOException if unable resource declared is not valid\n      */\n-    public void setResourcesAsCSV(String csvResources)\n+    public void setResourcesAsCSV(String csvResources) throws IOException\n     {\n-        if (csvResources == null)\n-        {\n-            throw new IllegalArgumentException(\"CSV String is null\");\n-        }\n-\n-        StringTokenizer tokenizer = new StringTokenizer(csvResources, \",;\");\n-        int len = tokenizer.countTokens();\n-        if (len == 0)\n+        if (StringUtil.isBlank(csvResources))\n         {\n-            throw new IllegalArgumentException(\"ResourceCollection@setResourcesAsCSV(String) \" +\n-                \" argument must be a string containing one or more comma-separated resource strings.\");\n+            throw new IllegalArgumentException(\"CSV String is blank\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0Mzc1MA=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwNTQwOA==", "bodyText": "How can it be empty? It is only allocated if you're going to add an entry.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r492005408", "createdAt": "2020-09-21T12:30:25Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -245,59 +233,54 @@ public Resource addPath(String path) throws IOException\n \n         if (path == null)\n         {\n-            throw new MalformedURLException();\n+            throw new MalformedURLException(\"null path\");\n         }\n \n         if (path.length() == 0 || URIUtil.SLASH.equals(path))\n         {\n             return this;\n         }\n \n-        Resource resource = null;\n-        ArrayList<Resource> resources = null;\n-        int i = 0;\n-        for (; i < _resources.length; i++)\n+        // Attempt a simple (single) Resource lookup that exists\n+        for (Resource res : _resources)\n         {\n-            resource = _resources[i].addPath(path);\n-            if (resource.exists())\n+            Resource fileResource = res.addPath(path);\n+            if (fileResource.exists())\n             {\n-                if (resource.isDirectory())\n+                if (!fileResource.isDirectory())\n                 {\n-                    break;\n+                    return fileResource;\n                 }\n-                return resource;\n             }\n         }\n \n-        for (i++; i < _resources.length; i++)\n+        // Create a list of potential resource for directories of this collection\n+        ArrayList<Resource> potentialResources = null;\n+        for (Resource res : _resources)\n         {\n-            Resource r = _resources[i].addPath(path);\n+            Resource r = res.addPath(path);\n             if (r.exists() && r.isDirectory())\n             {\n-                if (resources == null)\n+                if (potentialResources == null)\n                 {\n-                    resources = new ArrayList<>();\n+                    potentialResources = new ArrayList<>();\n                 }\n \n-                if (resource != null)\n-                {\n-                    resources.add(resource);\n-                    resource = null;\n-                }\n-\n-                resources.add(r);\n+                potentialResources.add(r);\n             }\n         }\n \n-        if (resource != null)\n+        if (potentialResources == null || potentialResources.isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccc863726b60c9d5bf6e068f639b8786aa5c83ec"}, "originalPosition": 298}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwNzA4Mw==", "bodyText": "This substantially changes the semantic:  before we only ever returned null, or  the first matching resource; now, you throw instead of null (fine) but only return the first resource if there is only one, otherwise you return the whole lot. Pretty sure there's code that's not going to deal with that. Can't we leave the semantic as it was before, ie only return the first?\nAlso, I don't love the var name \"potentialResources\", what was wrong with \"resources\"?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r492007083", "createdAt": "2020-09-21T12:33:16Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -245,59 +233,54 @@ public Resource addPath(String path) throws IOException\n \n         if (path == null)\n         {\n-            throw new MalformedURLException();\n+            throw new MalformedURLException(\"null path\");\n         }\n \n         if (path.length() == 0 || URIUtil.SLASH.equals(path))\n         {\n             return this;\n         }\n \n-        Resource resource = null;\n-        ArrayList<Resource> resources = null;\n-        int i = 0;\n-        for (; i < _resources.length; i++)\n+        // Attempt a simple (single) Resource lookup that exists\n+        for (Resource res : _resources)\n         {\n-            resource = _resources[i].addPath(path);\n-            if (resource.exists())\n+            Resource fileResource = res.addPath(path);\n+            if (fileResource.exists())\n             {\n-                if (resource.isDirectory())\n+                if (!fileResource.isDirectory())\n                 {\n-                    break;\n+                    return fileResource;\n                 }\n-                return resource;\n             }\n         }\n \n-        for (i++; i < _resources.length; i++)\n+        // Create a list of potential resource for directories of this collection\n+        ArrayList<Resource> potentialResources = null;\n+        for (Resource res : _resources)\n         {\n-            Resource r = _resources[i].addPath(path);\n+            Resource r = res.addPath(path);\n             if (r.exists() && r.isDirectory())\n             {\n-                if (resources == null)\n+                if (potentialResources == null)\n                 {\n-                    resources = new ArrayList<>();\n+                    potentialResources = new ArrayList<>();\n                 }\n \n-                if (resource != null)\n-                {\n-                    resources.add(resource);\n-                    resource = null;\n-                }\n-\n-                resources.add(r);\n+                potentialResources.add(r);\n             }\n         }\n \n-        if (resource != null)\n+        if (potentialResources == null || potentialResources.isEmpty())\n         {\n-            return resource;\n+            throw new MalformedURLException(\"path does not result in Resource: \" + path);\n         }\n-        if (resources != null)\n+\n+        if (potentialResources.size() == 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccc863726b60c9d5bf6e068f639b8786aa5c83ec"}, "originalPosition": 305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwOTcyOQ==", "bodyText": "In the interests of getting the rest of this applied to jetty-10, I'll drop my objection.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r492009729", "createdAt": "2020-09-21T12:37:28Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebAppClassLoader.java", "diffHunk": "@@ -185,15 +185,20 @@ public WebAppClassLoader(ClassLoader parent, Context context)\n         String extensions = System.getProperty(WebAppClassLoader.class.getName() + \".extensions\");\n         if (extensions != null)\n         {\n-            StringTokenizer tokenizer = new StringTokenizer(extensions, \",;\");\n+            StringTokenizer tokenizer = new StringTokenizer(extensions, StringUtil.DEFAULT_DELIMS);\n             while (tokenizer.hasMoreTokens())\n             {\n                 _extensions.add(tokenizer.nextToken().trim());\n             }\n         }\n \n         if (context.getExtraClasspath() != null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MTczNw=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6bcbda689607e140cdd0db93d4ff724a51ecb52", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/f6bcbda689607e140cdd0db93d4ff724a51ecb52", "committedDate": "2020-09-21T14:42:26Z", "message": "Issue #5133 - Changes from Review with jan & greg\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNjc4MTUx", "url": "https://github.com/eclipse/jetty.project/pull/5142#pullrequestreview-492678151", "createdAt": "2020-09-21T14:42:52Z", "commit": {"oid": "f6bcbda689607e140cdd0db93d4ff724a51ecb52"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNjQxNzU3", "url": "https://github.com/eclipse/jetty.project/pull/5142#pullrequestreview-493641757", "createdAt": "2020-09-22T16:26:30Z", "commit": {"oid": "f6bcbda689607e140cdd0db93d4ff724a51ecb52"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 285, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}