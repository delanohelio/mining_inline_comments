{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NTU1MDY5", "number": 5563, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo0MzoyM1rOE1H3xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzo0MDo1NVrOE3zp4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTM4OTQ5OnYy", "diffSide": "RIGHT", "path": "jetty-home/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo0MzoyM1rOHtODGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOToxMDozNFrOHtPB9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3ODEzOQ==", "bodyText": "Why is this added to jetty-home?\nI think we always want websocket-jetty-client to be in webapps.", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r517178139", "createdAt": "2020-11-04T08:43:23Z", "author": {"login": "sbordet"}, "path": "jetty-home/pom.xml", "diffHunk": "@@ -655,6 +655,11 @@\n       <artifactId>websocket-jetty-server</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.eclipse.jetty.websocket</groupId>\n+      <artifactId>websocket-jetty-client</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d21bb7b6359e3519003cfa188c2aa59109f9229"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE5MTI4OQ==", "bodyText": "Do we?  Isn't the point of the module for the server to provide it?\nSure we want to support it in webapps as well, but always?", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r517191289", "createdAt": "2020-11-04T09:05:34Z", "author": {"login": "gregw"}, "path": "jetty-home/pom.xml", "diffHunk": "@@ -655,6 +655,11 @@\n       <artifactId>websocket-jetty-server</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.eclipse.jetty.websocket</groupId>\n+      <artifactId>websocket-jetty-client</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3ODEzOQ=="}, "originalCommit": {"oid": "8d21bb7b6359e3519003cfa188c2aa59109f9229"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE5NDIyOA==", "bodyText": "Yes, I think we always want the Jetty specific WebSocket client to be in webapps.\nNo classloader issues, no issues when deploying (e.g. for testing) in other containers, etc.\nThere is no point adding it to jetty-home, but then cannot be seen by webapps and the server does not use it.", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r517194228", "createdAt": "2020-11-04T09:10:34Z", "author": {"login": "sbordet"}, "path": "jetty-home/pom.xml", "diffHunk": "@@ -655,6 +655,11 @@\n       <artifactId>websocket-jetty-server</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.eclipse.jetty.websocket</groupId>\n+      <artifactId>websocket-jetty-client</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3ODEzOQ=="}, "originalCommit": {"oid": "8d21bb7b6359e3519003cfa188c2aa59109f9229"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTM5NzE0OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-jetty-server/src/main/config/modules/websocket-jetty.mod", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo0NToyMlrOHtOHuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo0NToyMlrOHtOHuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3OTMyMA==", "bodyText": "Don't think this is necessary?", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r517179320", "createdAt": "2020-11-04T08:45:22Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-jetty-server/src/main/config/modules/websocket-jetty.mod", "diffHunk": "@@ -18,6 +18,7 @@ lib/websocket/websocket-util-${jetty.version}.jar\n lib/websocket/websocket-util-server-${jetty.version}.jar\n lib/websocket/websocket-jetty-api-${jetty.version}.jar\n lib/websocket/websocket-jetty-common-${jetty.version}.jar\n+lib/websocket/websocket-jetty-client-${jetty.version}.jar", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d21bb7b6359e3519003cfa188c2aa59109f9229"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTQwMDI0OnYy", "diffSide": "RIGHT", "path": "tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/DistributionTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo0NjoxNFrOHtOJrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo0NjoxNFrOHtOJrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3OTgyMg==", "bodyText": "Fix indentation.", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r517179822", "createdAt": "2020-11-04T08:46:14Z", "author": {"login": "sbordet"}, "path": "tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/DistributionTests.java", "diffHunk": "@@ -389,11 +387,12 @@ public void testWebsocketClientInWebappProvidedByServer(String scheme) throws Ex\n             .mavenLocalRepository(System.getProperty(\"mavenRepoPath\"))\n             .build();\n \n+        String module = \"https\".equals(scheme) ? \"test-keystore,\" + scheme : scheme;\n         String[] args1 = {\n             \"--create-startd\",\n             \"--approve-all-licenses\",\n-            \"--add-to-start=resources,server,webapp,deploy,jsp,jmx,servlet,servlets,websocket,test-keystore,\" + scheme\n-        };\n+            \"--add-to-start=resources,server,webapp,deploy,jsp,jmx,servlet,servlets,websocket,\" + module,\n+            };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d21bb7b6359e3519003cfa188c2aa59109f9229"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTQ4MTgxOnYy", "diffSide": "RIGHT", "path": "tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/DistributionTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOTowNzozM1rOHtO7Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOToxMzowNlrOHtPH5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE5MjQ1NQ==", "bodyText": "If the server is to provide this, then any exposing should be done in a Configuration... off by default, but that is added to a webapp if we want it to see the client.", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r517192455", "createdAt": "2020-11-04T09:07:33Z", "author": {"login": "gregw"}, "path": "tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/DistributionTests.java", "diffHunk": "@@ -406,6 +405,9 @@ public void testWebsocketClientInWebappProvidedByServer(String scheme) throws Ex\n             String[] args2 = {\n                 \"jetty.http.port=\" + port,\n                 \"jetty.ssl.port=\" + port,\n+                // We need to expose the websocket client classes to the webapp for this to work.\n+                \"jetty.webapp.addServerClasses+=,-org.eclipse.jetty.websocket.client.\",\n+                \"jetty.webapp.addSystemClasses+=,+org.eclipse.jetty.websocket.client.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d21bb7b6359e3519003cfa188c2aa59109f9229"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE5NTc0OA==", "bodyText": "Do I need to write a class?\nI thought a Jetty module should be enough, and the test mimics what should be in the *.mod file if I want the Jetty WebSocket client classes be provided by the server.", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r517195748", "createdAt": "2020-11-04T09:13:06Z", "author": {"login": "sbordet"}, "path": "tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/DistributionTests.java", "diffHunk": "@@ -406,6 +405,9 @@ public void testWebsocketClientInWebappProvidedByServer(String scheme) throws Ex\n             String[] args2 = {\n                 \"jetty.http.port=\" + port,\n                 \"jetty.ssl.port=\" + port,\n+                // We need to expose the websocket client classes to the webapp for this to work.\n+                \"jetty.webapp.addServerClasses+=,-org.eclipse.jetty.websocket.client.\",\n+                \"jetty.webapp.addSystemClasses+=,+org.eclipse.jetty.websocket.client.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE5MjQ1NQ=="}, "originalCommit": {"oid": "8d21bb7b6359e3519003cfa188c2aa59109f9229"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTk1NjQ4OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-jetty-client/src/main/config/modules/websocket-jetty-client.mod", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODo1ODozN1rOHt5X-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODowMzoxNVrOHujrpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4Nzk5Mg==", "bodyText": "Remove these 2 lines, the link is now obsolete with the new Jetty 10 docs.", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r517887992", "createdAt": "2020-11-05T08:58:37Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-jetty-client/src/main/config/modules/websocket-jetty-client.mod", "diffHunk": "@@ -0,0 +1,24 @@\n+# DO NOT EDIT - See: https://www.eclipse.org/jetty/documentation/current/startup-modules.html\n+\n+[description]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "416579a690e1b2d2ce5e3cd446957127ff58fcd5"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU4MTE1OQ==", "bodyText": "These lines are present on every single .mod file I can find. Maybe the change to fix all these should all be done in a separate PR?", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r518581159", "createdAt": "2020-11-06T08:03:15Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-websocket/websocket-jetty-client/src/main/config/modules/websocket-jetty-client.mod", "diffHunk": "@@ -0,0 +1,24 @@\n+# DO NOT EDIT - See: https://www.eclipse.org/jetty/documentation/current/startup-modules.html\n+\n+[description]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4Nzk5Mg=="}, "originalCommit": {"oid": "416579a690e1b2d2ce5e3cd446957127ff58fcd5"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTk3MDE4OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOTowMjowN1rOHt5grQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOTowMjowN1rOHt5grQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5MDIyMQ==", "bodyText": "Use javadoc's {@code ...} to wrap package names, and fix the package names because we expose *.api and *.client only, not *.websocket.", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r517890221", "createdAt": "2020-11-05T09:02:07Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "diffHunk": "@@ -0,0 +1,83 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.client.config;\n+\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.util.Loader;\n+import org.eclipse.jetty.webapp.AbstractConfiguration;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.FragmentConfiguration;\n+import org.eclipse.jetty.webapp.MetaInfConfiguration;\n+import org.eclipse.jetty.webapp.WebAppConfiguration;\n+import org.eclipse.jetty.webapp.WebInfConfiguration;\n+import org.eclipse.jetty.webapp.WebXmlConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <p>Websocket Configuration</p>\n+ * <p>This configuration configures the WebAppContext server/system classes to\n+ * be able to see the org.eclipse.jetty.websocket package.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "416579a690e1b2d2ce5e3cd446957127ff58fcd5"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjAwNjk2OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOToxMTo0MlrOHt53nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOToxMTo0MlrOHt53nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5NjA5NQ==", "bodyText": "I'm not sure this is right.\nIt will try the context classloader, which is the webapp classloader, so if there is WebSocketClient in WEB-INF/lib (e.g. by mistake), it will return true, but we don't want that.\nI think you want to test if the server has this class available, so perhaps JettyWebSocketClientConfiguration.class.getClassLoader().loadClass(...) should be used instead.", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r517896095", "createdAt": "2020-11-05T09:11:42Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "diffHunk": "@@ -0,0 +1,83 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.client.config;\n+\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.util.Loader;\n+import org.eclipse.jetty.webapp.AbstractConfiguration;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.FragmentConfiguration;\n+import org.eclipse.jetty.webapp.MetaInfConfiguration;\n+import org.eclipse.jetty.webapp.WebAppConfiguration;\n+import org.eclipse.jetty.webapp.WebInfConfiguration;\n+import org.eclipse.jetty.webapp.WebXmlConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <p>Websocket Configuration</p>\n+ * <p>This configuration configures the WebAppContext server/system classes to\n+ * be able to see the org.eclipse.jetty.websocket package.\n+ * This class is defined in the webapp package, as it implements the {@link Configuration} interface,\n+ * which is unknown to the websocket package.  However, the corresponding {@link ServiceLoader}\n+ * resource is defined in the websocket package, so that this configuration only be\n+ * loaded if the jetty-websocket jars are on the classpath.\n+ * </p>\n+ */\n+public class JettyWebSocketClientConfiguration extends AbstractConfiguration\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(JettyWebSocketClientConfiguration.class);\n+\n+    public JettyWebSocketClientConfiguration()\n+    {\n+        addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n+\n+        if (isAvailable(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\"))\n+            addDependents(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n+        else if (isAvailable(\"org.eclipse.jetty.annotations.AnnotationConfiguration\"))\n+            addDependents(\"org.eclipse.jetty.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n+        else\n+            throw new RuntimeException(\"Unable to add AnnotationConfiguration dependent (not present in classpath)\");\n+\n+        protectAndExpose(\"org.eclipse.jetty.websocket.api.\");\n+        protectAndExpose(\"org.eclipse.jetty.websocket.client.\");\n+        hide(\"org.eclipse.jetty.client.impl.\");\n+        hide(\"org.eclipse.jetty.client.config.\");\n+    }\n+\n+    @Override\n+    public boolean isAvailable()\n+    {\n+        return isAvailable(\"org.eclipse.jetty.websocket.client.WebSocketClient\");\n+    }\n+\n+    private boolean isAvailable(String classname)\n+    {\n+        try\n+        {\n+            return Loader.loadClass(classname) != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "416579a690e1b2d2ce5e3cd446957127ff58fcd5"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjAxMTA2OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOToxMjo0M1rOHt56Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOToxMjo0M1rOHt56Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5Njc3MA==", "bodyText": "See comment about using Loader.loadClass().", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r517896770", "createdAt": "2020-11-05T09:12:43Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java", "diffHunk": "@@ -68,7 +68,7 @@ else if (isAvailable(\"org.eclipse.jetty.annotations.AnnotationConfiguration\"))\n     @Override\n     public boolean isAvailable()\n     {\n-        return isAvailable(\"org.eclipse.jetty.websocket.common.JettyWebSocketFrame\");\n+        return isAvailable(\"org.eclipse.jetty.websocket.server.JettyWebSocketServerContainer\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "416579a690e1b2d2ce5e3cd446957127ff58fcd5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Nzg1NTM5OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-jetty-client/src/main/config/modules/websocket-jetty-client.mod", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDoxMzo0MFrOHvnlHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMTo0ODo1OVrOHvrANw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5MzU5OA==", "bodyText": "Should this module depend on the jetty server websocket impl?    Once we expose the API aren't we committed to supplying the server side?", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519693598", "createdAt": "2020-11-09T10:13:40Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-jetty-client/src/main/config/modules/websocket-jetty-client.mod", "diffHunk": "@@ -0,0 +1,24 @@\n+# DO NOT EDIT - See: https://www.eclipse.org/jetty/documentation/current/startup-modules.html\n+\n+[description]\n+Expose the Jetty WebSocket Client classes to deployed web applications.\n+\n+[tags]\n+websocket\n+\n+[depend]\n+client\n+annotations\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32433b10ad9944bcf8e7224e16a9026655d219ba"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc0OTY4Nw==", "bodyText": "We're not committed to supplying the server side by having the client. The websocket client can be used without any server dependencies.", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519749687", "createdAt": "2020-11-09T11:48:59Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-websocket/websocket-jetty-client/src/main/config/modules/websocket-jetty-client.mod", "diffHunk": "@@ -0,0 +1,24 @@\n+# DO NOT EDIT - See: https://www.eclipse.org/jetty/documentation/current/startup-modules.html\n+\n+[description]\n+Expose the Jetty WebSocket Client classes to deployed web applications.\n+\n+[tags]\n+websocket\n+\n+[depend]\n+client\n+annotations\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5MzU5OA=="}, "originalCommit": {"oid": "32433b10ad9944bcf8e7224e16a9026655d219ba"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Nzg4OTEwOnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDoyMToyOFrOHvn56A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMzo1ODoxN1rOHvwFyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5ODkyMA==", "bodyText": "I don't think you need to do this availability check. Just add the dependency as a string and it will be ordered if it is there and ignored if it is not.", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519698920", "createdAt": "2020-11-09T10:21:28Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "diffHunk": "@@ -0,0 +1,83 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.client.config;\n+\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.util.Loader;\n+import org.eclipse.jetty.webapp.AbstractConfiguration;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.FragmentConfiguration;\n+import org.eclipse.jetty.webapp.MetaInfConfiguration;\n+import org.eclipse.jetty.webapp.WebAppConfiguration;\n+import org.eclipse.jetty.webapp.WebInfConfiguration;\n+import org.eclipse.jetty.webapp.WebXmlConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <p>Websocket Configuration</p>\n+ * <p>This configuration configures the WebAppContext server/system classes to\n+ * be able to see the {@code org.eclipse.jetty.websocket.client} package.\n+ * This class is defined in the webapp package, as it implements the {@link Configuration} interface,\n+ * which is unknown to the websocket package.  However, the corresponding {@link ServiceLoader}\n+ * resource is defined in the websocket package, so that this configuration only be\n+ * loaded if the jetty-websocket jars are on the classpath.\n+ * </p>\n+ */\n+public class JettyWebSocketClientConfiguration extends AbstractConfiguration\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(JettyWebSocketClientConfiguration.class);\n+\n+    public JettyWebSocketClientConfiguration()\n+    {\n+        addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n+\n+        if (isAvailable(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32433b10ad9944bcf8e7224e16a9026655d219ba"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc0OTY3Mg==", "bodyText": "But the logic is only adding the osgi one if it is available, otherwise only adding the standard one. Wouldn't it have a different behaviour if we add both.", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519749672", "createdAt": "2020-11-09T11:48:58Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "diffHunk": "@@ -0,0 +1,83 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.client.config;\n+\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.util.Loader;\n+import org.eclipse.jetty.webapp.AbstractConfiguration;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.FragmentConfiguration;\n+import org.eclipse.jetty.webapp.MetaInfConfiguration;\n+import org.eclipse.jetty.webapp.WebAppConfiguration;\n+import org.eclipse.jetty.webapp.WebInfConfiguration;\n+import org.eclipse.jetty.webapp.WebXmlConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <p>Websocket Configuration</p>\n+ * <p>This configuration configures the WebAppContext server/system classes to\n+ * be able to see the {@code org.eclipse.jetty.websocket.client} package.\n+ * This class is defined in the webapp package, as it implements the {@link Configuration} interface,\n+ * which is unknown to the websocket package.  However, the corresponding {@link ServiceLoader}\n+ * resource is defined in the websocket package, so that this configuration only be\n+ * loaded if the jetty-websocket jars are on the classpath.\n+ * </p>\n+ */\n+public class JettyWebSocketClientConfiguration extends AbstractConfiguration\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(JettyWebSocketClientConfiguration.class);\n+\n+    public JettyWebSocketClientConfiguration()\n+    {\n+        addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n+\n+        if (isAvailable(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5ODkyMA=="}, "originalCommit": {"oid": "32433b10ad9944bcf8e7224e16a9026655d219ba"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc1NDk2MA==", "bodyText": "But I don't think you need to do that even.  The OSGi configuration replaces the non OSGI configuration, so it should inherit all of it's dependencies and orderings.  You can't list out all the infinite possible extensions of org.eclipse.jetty.annotations.AnnotationConfiguration here, so don't try.", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519754960", "createdAt": "2020-11-09T11:58:21Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "diffHunk": "@@ -0,0 +1,83 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.client.config;\n+\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.util.Loader;\n+import org.eclipse.jetty.webapp.AbstractConfiguration;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.FragmentConfiguration;\n+import org.eclipse.jetty.webapp.MetaInfConfiguration;\n+import org.eclipse.jetty.webapp.WebAppConfiguration;\n+import org.eclipse.jetty.webapp.WebInfConfiguration;\n+import org.eclipse.jetty.webapp.WebXmlConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <p>Websocket Configuration</p>\n+ * <p>This configuration configures the WebAppContext server/system classes to\n+ * be able to see the {@code org.eclipse.jetty.websocket.client} package.\n+ * This class is defined in the webapp package, as it implements the {@link Configuration} interface,\n+ * which is unknown to the websocket package.  However, the corresponding {@link ServiceLoader}\n+ * resource is defined in the websocket package, so that this configuration only be\n+ * loaded if the jetty-websocket jars are on the classpath.\n+ * </p>\n+ */\n+public class JettyWebSocketClientConfiguration extends AbstractConfiguration\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(JettyWebSocketClientConfiguration.class);\n+\n+    public JettyWebSocketClientConfiguration()\n+    {\n+        addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n+\n+        if (isAvailable(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5ODkyMA=="}, "originalCommit": {"oid": "32433b10ad9944bcf8e7224e16a9026655d219ba"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc1OTI1Ng==", "bodyText": "hmmm for some reason the OSGi AnnotationConfiguration does not \"replace\" the normal AnnotationConfiguration???\nMight have to check with @janbartel why?\nBut ultimately here you should just depend on org.eclipse.jetty.annotations.AnnotationConfiguration and the replacement mechanism should make the sorting work correctly", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519759256", "createdAt": "2020-11-09T12:06:35Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "diffHunk": "@@ -0,0 +1,83 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.client.config;\n+\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.util.Loader;\n+import org.eclipse.jetty.webapp.AbstractConfiguration;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.FragmentConfiguration;\n+import org.eclipse.jetty.webapp.MetaInfConfiguration;\n+import org.eclipse.jetty.webapp.WebAppConfiguration;\n+import org.eclipse.jetty.webapp.WebInfConfiguration;\n+import org.eclipse.jetty.webapp.WebXmlConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <p>Websocket Configuration</p>\n+ * <p>This configuration configures the WebAppContext server/system classes to\n+ * be able to see the {@code org.eclipse.jetty.websocket.client} package.\n+ * This class is defined in the webapp package, as it implements the {@link Configuration} interface,\n+ * which is unknown to the websocket package.  However, the corresponding {@link ServiceLoader}\n+ * resource is defined in the websocket package, so that this configuration only be\n+ * loaded if the jetty-websocket jars are on the classpath.\n+ * </p>\n+ */\n+public class JettyWebSocketClientConfiguration extends AbstractConfiguration\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(JettyWebSocketClientConfiguration.class);\n+\n+    public JettyWebSocketClientConfiguration()\n+    {\n+        addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n+\n+        if (isAvailable(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5ODkyMA=="}, "originalCommit": {"oid": "32433b10ad9944bcf8e7224e16a9026655d219ba"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2MDUwOA==", "bodyText": "Perhaps I just forgot to add it when I did the conversion.   Can you try adding to the OSGi AnnotationConfiguration:\n    @Override\n    public Class<? extends Configuration> replaces()\n    {\n        return org.eclipse.jetty.annotations.AnnotationConfiguration.class;\n    }", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519760508", "createdAt": "2020-11-09T12:08:58Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "diffHunk": "@@ -0,0 +1,83 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.client.config;\n+\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.util.Loader;\n+import org.eclipse.jetty.webapp.AbstractConfiguration;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.FragmentConfiguration;\n+import org.eclipse.jetty.webapp.MetaInfConfiguration;\n+import org.eclipse.jetty.webapp.WebAppConfiguration;\n+import org.eclipse.jetty.webapp.WebInfConfiguration;\n+import org.eclipse.jetty.webapp.WebXmlConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <p>Websocket Configuration</p>\n+ * <p>This configuration configures the WebAppContext server/system classes to\n+ * be able to see the {@code org.eclipse.jetty.websocket.client} package.\n+ * This class is defined in the webapp package, as it implements the {@link Configuration} interface,\n+ * which is unknown to the websocket package.  However, the corresponding {@link ServiceLoader}\n+ * resource is defined in the websocket package, so that this configuration only be\n+ * loaded if the jetty-websocket jars are on the classpath.\n+ * </p>\n+ */\n+public class JettyWebSocketClientConfiguration extends AbstractConfiguration\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(JettyWebSocketClientConfiguration.class);\n+\n+    public JettyWebSocketClientConfiguration()\n+    {\n+        addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n+\n+        if (isAvailable(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5ODkyMA=="}, "originalCommit": {"oid": "32433b10ad9944bcf8e7224e16a9026655d219ba"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzMzAzNQ==", "bodyText": "I overrided the replaces() method in the osgi AnnotationConfiguration now. It passed the tests even without that, even after I made the changes you asked for removing the isAvailable checks.", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519833035", "createdAt": "2020-11-09T13:58:17Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "diffHunk": "@@ -0,0 +1,83 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.client.config;\n+\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.util.Loader;\n+import org.eclipse.jetty.webapp.AbstractConfiguration;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.FragmentConfiguration;\n+import org.eclipse.jetty.webapp.MetaInfConfiguration;\n+import org.eclipse.jetty.webapp.WebAppConfiguration;\n+import org.eclipse.jetty.webapp.WebInfConfiguration;\n+import org.eclipse.jetty.webapp.WebXmlConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <p>Websocket Configuration</p>\n+ * <p>This configuration configures the WebAppContext server/system classes to\n+ * be able to see the {@code org.eclipse.jetty.websocket.client} package.\n+ * This class is defined in the webapp package, as it implements the {@link Configuration} interface,\n+ * which is unknown to the websocket package.  However, the corresponding {@link ServiceLoader}\n+ * resource is defined in the websocket package, so that this configuration only be\n+ * loaded if the jetty-websocket jars are on the classpath.\n+ * </p>\n+ */\n+public class JettyWebSocketClientConfiguration extends AbstractConfiguration\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(JettyWebSocketClientConfiguration.class);\n+\n+    public JettyWebSocketClientConfiguration()\n+    {\n+        addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n+\n+        if (isAvailable(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5ODkyMA=="}, "originalCommit": {"oid": "32433b10ad9944bcf8e7224e16a9026655d219ba"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODgwNTk1OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoxMTo1N1rOHvwpFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoxMTo1N1rOHvwpFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MjA3MA==", "bodyText": "You don't need this line, only the next one!   Look at how replaces works.", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519842070", "createdAt": "2020-11-09T14:11:57Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "diffHunk": "@@ -0,0 +1,74 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.client.config;\n+\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.webapp.AbstractConfiguration;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.FragmentConfiguration;\n+import org.eclipse.jetty.webapp.MetaInfConfiguration;\n+import org.eclipse.jetty.webapp.WebAppConfiguration;\n+import org.eclipse.jetty.webapp.WebInfConfiguration;\n+import org.eclipse.jetty.webapp.WebXmlConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <p>Websocket Configuration</p>\n+ * <p>This configuration configures the WebAppContext server/system classes to\n+ * be able to see the {@code org.eclipse.jetty.websocket.client} package.\n+ * This class is defined in the webapp package, as it implements the {@link Configuration} interface,\n+ * which is unknown to the websocket package.  However, the corresponding {@link ServiceLoader}\n+ * resource is defined in the websocket package, so that this configuration only be\n+ * loaded if the jetty-websocket jars are on the classpath.\n+ * </p>\n+ */\n+public class JettyWebSocketClientConfiguration extends AbstractConfiguration\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(JettyWebSocketClientConfiguration.class);\n+\n+    public JettyWebSocketClientConfiguration()\n+    {\n+        addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n+        addDependents(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e842c16bb44837b0664e6e34a4460364c2eb03ac"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODgxMTY3OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoxMzoxOFrOHvwssQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoxMzoxOFrOHvwssQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0Mjk5Mw==", "bodyText": "Are these two classes in the same jar?  If so, you kind of can just return true in this method (or not override).\nThis method is more for things like CDI and JSP, where we need to check for third party jars being available", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519842993", "createdAt": "2020-11-09T14:13:18Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "diffHunk": "@@ -0,0 +1,74 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.client.config;\n+\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.webapp.AbstractConfiguration;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.FragmentConfiguration;\n+import org.eclipse.jetty.webapp.MetaInfConfiguration;\n+import org.eclipse.jetty.webapp.WebAppConfiguration;\n+import org.eclipse.jetty.webapp.WebInfConfiguration;\n+import org.eclipse.jetty.webapp.WebXmlConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <p>Websocket Configuration</p>\n+ * <p>This configuration configures the WebAppContext server/system classes to\n+ * be able to see the {@code org.eclipse.jetty.websocket.client} package.\n+ * This class is defined in the webapp package, as it implements the {@link Configuration} interface,\n+ * which is unknown to the websocket package.  However, the corresponding {@link ServiceLoader}\n+ * resource is defined in the websocket package, so that this configuration only be\n+ * loaded if the jetty-websocket jars are on the classpath.\n+ * </p>\n+ */\n+public class JettyWebSocketClientConfiguration extends AbstractConfiguration\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(JettyWebSocketClientConfiguration.class);\n+\n+    public JettyWebSocketClientConfiguration()\n+    {\n+        addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n+        addDependents(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n+        addDependents(\"org.eclipse.jetty.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n+\n+        protectAndExpose(\"org.eclipse.jetty.websocket.api.\");\n+        protectAndExpose(\"org.eclipse.jetty.websocket.client.\");\n+        hide(\"org.eclipse.jetty.client.impl.\");\n+        hide(\"org.eclipse.jetty.client.config.\");\n+    }\n+\n+    @Override\n+    public boolean isAvailable()\n+    {\n+        try\n+        {\n+            ClassLoader classLoader = JettyWebSocketClientConfiguration.class.getClassLoader();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e842c16bb44837b0664e6e34a4460364c2eb03ac"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODgxMzU0OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoxMzo0NFrOHvwt1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoxMzo0NFrOHvwt1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MzI4Nw==", "bodyText": "Don't need this line.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    addDependents(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519843287", "createdAt": "2020-11-09T14:13:44Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java", "diffHunk": "@@ -48,39 +48,29 @@\n     public JettyWebSocketConfiguration()\n     {\n         addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n+        addDependents(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e842c16bb44837b0664e6e34a4460364c2eb03ac"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODgxOTExOnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoxNDo0NlrOHvww9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoxNDo0NlrOHvww9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0NDA4NA==", "bodyText": "Ditto - maybe just return true here.\nFeel free to improve javadoc on isAvailable if you think it wasn't made clear", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519844084", "createdAt": "2020-11-09T14:14:46Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java", "diffHunk": "@@ -48,39 +48,29 @@\n     public JettyWebSocketConfiguration()\n     {\n         addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n+        addDependents(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n+        addDependents(\"org.eclipse.jetty.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n \n-        if (isAvailable(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\"))\n-            addDependents(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n-        else if (isAvailable(\"org.eclipse.jetty.annotations.AnnotationConfiguration\"))\n-            addDependents(\"org.eclipse.jetty.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n-        else\n-            throw new RuntimeException(\"Unable to add AnnotationConfiguration dependent (not present in classpath)\");\n-\n-        protectAndExpose(\n-            \"org.eclipse.jetty.websocket.api.\",\n-            \"org.eclipse.jetty.websocket.server.\",\n-            \"org.eclipse.jetty.websocket.util.server.\"); // For WebSocketUpgradeFilter\n-\n-        hide(\"org.eclipse.jetty.server.internal.\",\n-            \"org.eclipse.jetty.server.config.\");\n+        protectAndExpose(\"org.eclipse.jetty.websocket.api.\");\n+        protectAndExpose(\"org.eclipse.jetty.websocket.server.\");\n+        protectAndExpose(\"org.eclipse.jetty.websocket.util.server.\"); // For WebSocketUpgradeFilter\n+        hide(\"org.eclipse.jetty.server.internal.\");\n+        hide(\"org.eclipse.jetty.server.config.\");\n     }\n \n     @Override\n     public boolean isAvailable()\n-    {\n-        return isAvailable(\"org.eclipse.jetty.websocket.common.JettyWebSocketFrame\");\n-    }\n-\n-    private boolean isAvailable(String classname)\n     {\n         try\n         {\n-            return Loader.loadClass(classname) != null;\n+            ClassLoader classLoader = JettyWebSocketConfiguration.class.getClassLoader();\n+            return classLoader.loadClass(\"org.eclipse.jetty.websocket.server.JettyWebSocketServerContainer\") != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e842c16bb44837b0664e6e34a4460364c2eb03ac"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTUzNDQxOnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzo0MDo1NVrOHxXj6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzo0MDo1NVrOHxXj6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUyODI5Ng==", "bodyText": "I think the javadoc needs to be fixed as this class is not defined anymore in the \"webapp package\".", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r521528296", "createdAt": "2020-11-11T17:40:55Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "diffHunk": "@@ -0,0 +1,57 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.client.config;\n+\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.webapp.AbstractConfiguration;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.FragmentConfiguration;\n+import org.eclipse.jetty.webapp.MetaInfConfiguration;\n+import org.eclipse.jetty.webapp.WebAppConfiguration;\n+import org.eclipse.jetty.webapp.WebInfConfiguration;\n+import org.eclipse.jetty.webapp.WebXmlConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <p>Websocket Configuration</p>\n+ * <p>This configuration configures the WebAppContext server/system classes to\n+ * be able to see the {@code org.eclipse.jetty.websocket.client} package.\n+ * This class is defined in the webapp package, as it implements the {@link Configuration} interface,\n+ * which is unknown to the websocket package.  However, the corresponding {@link ServiceLoader}\n+ * resource is defined in the websocket package, so that this configuration only be\n+ * loaded if the jetty-websocket jars are on the classpath.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42ebdc1bc386fbb68a65d179a8b8d24816c376ef"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2208, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}