{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4Nzc4ODE1", "number": 5637, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjoxNzo1MFrOE3xigQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjo1MDowM1rOE6AFcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTE4Nzg1OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjoxNzo1MFrOHxUIjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzo1MToyNFrOHxX9Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3MjE0MA==", "bodyText": "Isn't this a duplication of what happens in COMPLETE?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521472140", "createdAt": "2020-11-11T16:17:50Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -406,7 +410,13 @@ public boolean handle()\n                             // the following is needed as you cannot trust the response code and reason\n                             // as those could have been modified after calling sendError\n                             Integer code = (Integer)_request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);\n-                            _response.setStatus(code != null ? code : HttpStatus.INTERNAL_SERVER_ERROR_500);\n+                            if (code == null)\n+                                code = HttpStatus.INTERNAL_SERVER_ERROR_500;\n+                            _response.setStatus(code);\n+\n+                            // Add Connection:close if we can't consume the input\n+                            if (!_request.getHttpInput().consumeAll())\n+                                ensureConnectionClose();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ4ODIxOQ==", "bodyText": "It is similar logic, but happens at a different time - ie between returning from a dispatch after a sendError and before an ERROR dispatch... which may do lots and lots of stuff before we ever get to COMPLETE.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521488219", "createdAt": "2020-11-11T16:39:06Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -406,7 +410,13 @@ public boolean handle()\n                             // the following is needed as you cannot trust the response code and reason\n                             // as those could have been modified after calling sendError\n                             Integer code = (Integer)_request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);\n-                            _response.setStatus(code != null ? code : HttpStatus.INTERNAL_SERVER_ERROR_500);\n+                            if (code == null)\n+                                code = HttpStatus.INTERNAL_SERVER_ERROR_500;\n+                            _response.setStatus(code);\n+\n+                            // Add Connection:close if we can't consume the input\n+                            if (!_request.getHttpInput().consumeAll())\n+                                ensureConnectionClose();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3MjE0MA=="}, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUyMTk5OA==", "bodyText": "@gregw and so, if we may dispatch to an error handler that then reads the request content, we should not do it ourselves here, no?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521521998", "createdAt": "2020-11-11T17:31:32Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -406,7 +410,13 @@ public boolean handle()\n                             // the following is needed as you cannot trust the response code and reason\n                             // as those could have been modified after calling sendError\n                             Integer code = (Integer)_request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);\n-                            _response.setStatus(code != null ? code : HttpStatus.INTERNAL_SERVER_ERROR_500);\n+                            if (code == null)\n+                                code = HttpStatus.INTERNAL_SERVER_ERROR_500;\n+                            _response.setStatus(code);\n+\n+                            // Add Connection:close if we can't consume the input\n+                            if (!_request.getHttpInput().consumeAll())\n+                                ensureConnectionClose();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3MjE0MA=="}, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUyNzMxMA==", "bodyText": "I don't think that is a valid use case for an error handler to do.   I think it is far better we consume the input from the failed request and then do the ERROR dispatch.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521527310", "createdAt": "2020-11-11T17:39:11Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -406,7 +410,13 @@ public boolean handle()\n                             // the following is needed as you cannot trust the response code and reason\n                             // as those could have been modified after calling sendError\n                             Integer code = (Integer)_request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);\n-                            _response.setStatus(code != null ? code : HttpStatus.INTERNAL_SERVER_ERROR_500);\n+                            if (code == null)\n+                                code = HttpStatus.INTERNAL_SERVER_ERROR_500;\n+                            _response.setStatus(code);\n+\n+                            // Add Connection:close if we can't consume the input\n+                            if (!_request.getHttpInput().consumeAll())\n+                                ensureConnectionClose();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3MjE0MA=="}, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUzNDcyNg==", "bodyText": "All righty.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521534726", "createdAt": "2020-11-11T17:51:24Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -406,7 +410,13 @@ public boolean handle()\n                             // the following is needed as you cannot trust the response code and reason\n                             // as those could have been modified after calling sendError\n                             Integer code = (Integer)_request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);\n-                            _response.setStatus(code != null ? code : HttpStatus.INTERNAL_SERVER_ERROR_500);\n+                            if (code == null)\n+                                code = HttpStatus.INTERNAL_SERVER_ERROR_500;\n+                            _response.setStatus(code);\n+\n+                            // Add Connection:close if we can't consume the input\n+                            if (!_request.getHttpInput().consumeAll())\n+                                ensureConnectionClose();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3MjE0MA=="}, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTE4OTc3OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjoxODoxOFrOHxUJvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjoxODoxOFrOHxUJvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3MjQ0NQ==", "bodyText": "Remove \"then\" at end of line, it duplicates the one on the next line.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521472445", "createdAt": "2020-11-11T16:18:18Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -492,10 +502,18 @@ public boolean handle()\n \n                     case COMPLETE:\n                     {\n-                        if (!_response.isCommitted() && !_request.isHandled() && !_response.getHttpOutput().isClosed())\n+                        if (!_response.isCommitted())\n                         {\n-                            _response.sendError(HttpStatus.NOT_FOUND_404);\n-                            break;\n+                            if (!_request.isHandled() && !_response.getHttpOutput().isClosed())\n+                            {\n+                                // The request was not actually handled\n+                                _response.sendError(HttpStatus.NOT_FOUND_404);\n+                                break;\n+                            }\n+                            // If content has not been consumed and we can't consume it now without blocking, then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTIwNDU4OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjoyMTo0M1rOHxUSzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzozMjowNlrOHxXMkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NDc2NA==", "bodyText": "Shouldn't duplicates be discarded?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521474764", "createdAt": "2020-11-11T16:21:43Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -545,6 +558,29 @@ public boolean handle()\n         return !suspended;\n     }\n \n+    private void ensureConnectionClose()\n+    {\n+        _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+        {\n+            if (fields == null || fields.isEmpty())\n+                return HttpConnection.CONNECTION_CLOSE;\n+\n+            if (fields.stream().anyMatch(f -> f.contains(HttpHeaderValue.CLOSE.asString())))\n+            {\n+                if (fields.size() == 1)\n+                    return fields.get(0);\n+\n+                return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                    .flatMap(field -> Stream.of(field.getValues()))\n+                    .collect(Collectors.joining(\", \")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ4OTg4Mg==", "bodyText": "Perhaps... but I'm just really leaving the other values exactly as they are, other than amalgamating on to the same header.  If somebody else put a duplicate in there, then that's there problem and I don't want to waste cycles here fixing it.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521489882", "createdAt": "2020-11-11T16:41:35Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -545,6 +558,29 @@ public boolean handle()\n         return !suspended;\n     }\n \n+    private void ensureConnectionClose()\n+    {\n+        _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+        {\n+            if (fields == null || fields.isEmpty())\n+                return HttpConnection.CONNECTION_CLOSE;\n+\n+            if (fields.stream().anyMatch(f -> f.contains(HttpHeaderValue.CLOSE.asString())))\n+            {\n+                if (fields.size() == 1)\n+                    return fields.get(0);\n+\n+                return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                    .flatMap(field -> Stream.of(field.getValues()))\n+                    .collect(Collectors.joining(\", \")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NDc2NA=="}, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUyMjMyMQ==", "bodyText": "Okay.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521522321", "createdAt": "2020-11-11T17:32:06Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -545,6 +558,29 @@ public boolean handle()\n         return !suspended;\n     }\n \n+    private void ensureConnectionClose()\n+    {\n+        _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+        {\n+            if (fields == null || fields.isEmpty())\n+                return HttpConnection.CONNECTION_CLOSE;\n+\n+            if (fields.stream().anyMatch(f -> f.contains(HttpHeaderValue.CLOSE.asString())))\n+            {\n+                if (fields.size() == 1)\n+                    return fields.get(0);\n+\n+                return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                    .flatMap(field -> Stream.of(field.getValues()))\n+                    .collect(Collectors.joining(\", \")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NDc2NA=="}, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTIxMDYzOnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjoyMzowOFrOHxUWgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjoyMzowOFrOHxUWgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NTcxNA==", "bodyText": "You are using \", \" (comma+space) to delimit value, so add a space before \"close\" when you add it.\nSame as above, should duplicates be discarded?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521475714", "createdAt": "2020-11-11T16:23:08Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -545,6 +558,29 @@ public boolean handle()\n         return !suspended;\n     }\n \n+    private void ensureConnectionClose()\n+    {\n+        _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+        {\n+            if (fields == null || fields.isEmpty())\n+                return HttpConnection.CONNECTION_CLOSE;\n+\n+            if (fields.stream().anyMatch(f -> f.contains(HttpHeaderValue.CLOSE.asString())))\n+            {\n+                if (fields.size() == 1)\n+                    return fields.get(0);\n+\n+                return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                    .flatMap(field -> Stream.of(field.getValues()))\n+                    .collect(Collectors.joining(\", \")));\n+            }\n+\n+            return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                .flatMap(field -> Stream.of(field.getValues()))\n+                .collect(Collectors.joining(\", \")) + \",close\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTIxMjkzOnYy", "diffSide": "LEFT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannelState.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjoyMzo0MFrOHxUYAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjo0NjoxMlrOHxVZmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NjA5OA==", "bodyText": "Why was this removed?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521476098", "createdAt": "2020-11-11T16:23:40Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannelState.java", "diffHunk": "@@ -904,8 +904,6 @@ public void sendError(int code, String message)\n                 default:\n                     throw new IllegalStateException(getStatusStringLocked());\n             }\n-            if (_outputState != OutputState.OPEN)\n-                throw new IllegalStateException(\"Response is \" + _outputState);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ4OTE2NQ==", "bodyText": "I would also prefer a better error message ...\n            if (_outputState != OutputState.OPEN)\n                throw new IllegalStateException(\"Response is not open (was \" + _outputState + \"));", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521489165", "createdAt": "2020-11-11T16:40:29Z", "author": {"login": "joakime"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannelState.java", "diffHunk": "@@ -904,8 +904,6 @@ public void sendError(int code, String message)\n                 default:\n                     throw new IllegalStateException(getStatusStringLocked());\n             }\n-            if (_outputState != OutputState.OPEN)\n-                throw new IllegalStateException(\"Response is \" + _outputState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NjA5OA=="}, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ5Mjg5MA==", "bodyText": "See lines 895 and 896 above.... it was duplicated.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521492890", "createdAt": "2020-11-11T16:46:12Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannelState.java", "diffHunk": "@@ -904,8 +904,6 @@ public void sendError(int code, String message)\n                 default:\n                     throw new IllegalStateException(getStatusStringLocked());\n             }\n-            if (_outputState != OutputState.OPEN)\n-                throw new IllegalStateException(\"Response is \" + _outputState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NjA5OA=="}, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTIyNDY0OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/test/java/org/eclipse/jetty/server/AsyncRequestReadTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjoyNjoxOVrOHxUfKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjo0NDo1NFrOHxVWcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NzkzMA==", "bodyText": "Gah! This test will break as soon as we change the order of the headers, or if a JDK decides to change how things are stored in a Map. Not a biggie for this PR, but...", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521477930", "createdAt": "2020-11-11T16:26:19Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/AsyncRequestReadTest.java", "diffHunk": "@@ -328,6 +328,7 @@ public void testPartialReadThenClose() throws Exception\n \n             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n             assertThat(in.readLine(), containsString(\"HTTP/1.1 200 OK\"));\n+            assertThat(in.readLine(), containsString(\"Connection: close\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ4ODMzNA==", "bodyText": "Use our HttpTester here.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521488334", "createdAt": "2020-11-11T16:39:16Z", "author": {"login": "joakime"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/AsyncRequestReadTest.java", "diffHunk": "@@ -328,6 +328,7 @@ public void testPartialReadThenClose() throws Exception\n \n             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n             assertThat(in.readLine(), containsString(\"HTTP/1.1 200 OK\"));\n+            assertThat(in.readLine(), containsString(\"Connection: close\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NzkzMA=="}, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ5MDcyMQ==", "bodyText": "yeah well it broke as soon as I changed our strategy for closing, so yes fragile.... but at least it made me look.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521490721", "createdAt": "2020-11-11T16:42:49Z", "author": {"login": "gregw"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/AsyncRequestReadTest.java", "diffHunk": "@@ -328,6 +328,7 @@ public void testPartialReadThenClose() throws Exception\n \n             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n             assertThat(in.readLine(), containsString(\"HTTP/1.1 200 OK\"));\n+            assertThat(in.readLine(), containsString(\"Connection: close\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NzkzMA=="}, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ5MjA4MA==", "bodyText": "Not keen on major rewrite of this test - there are lot of such tests.   We can fix them in another PR.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521492080", "createdAt": "2020-11-11T16:44:54Z", "author": {"login": "gregw"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/AsyncRequestReadTest.java", "diffHunk": "@@ -328,6 +328,7 @@ public void testPartialReadThenClose() throws Exception\n \n             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n             assertThat(in.readLine(), containsString(\"HTTP/1.1 200 OK\"));\n+            assertThat(in.readLine(), containsString(\"Connection: close\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NzkzMA=="}, "originalCommit": {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjMzMDIzOnYy", "diffSide": "RIGHT", "path": "jetty-jaspi/src/main/java/org/eclipse/jetty/security/jaspi/modules/FormAuthModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMTowNjowNlrOHz2XMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMTo1OTozMVrOHz56TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzMDA5OQ==", "bodyText": "I would put this code inside sendRedirect() to: A) avoid duplicating it all over the places and B) avoid Request.getBaseRequest(request) since I'm already inside the Jetty Response where I can easily access the HttpChannel.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524130099", "createdAt": "2020-11-16T11:06:06Z", "author": {"login": "sbordet"}, "path": "jetty-jaspi/src/main/java/org/eclipse/jetty/security/jaspi/modules/FormAuthModule.java", "diffHunk": "@@ -173,6 +173,7 @@ public AuthStatus validateRequest(MessageInfo messageInfo, Subject clientSubject\n                     }\n \n                     response.setContentLength(0);\n+                    Request.getBaseRequest(request).getHttpChannel().ensureContentConsumedOrConnectionClose();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901e6dcdd6676ed745ee3853d787b90f5abe1020"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4ODIzNw==", "bodyText": "It can't go inside of sendRedirect() as it is perfectly OK for an application to send a redirect and then consume the content.\nWe can only do it on our own sendRedirect calls.  We could have our own method for consumeAllAndSendRedirect?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524188237", "createdAt": "2020-11-16T11:59:31Z", "author": {"login": "gregw"}, "path": "jetty-jaspi/src/main/java/org/eclipse/jetty/security/jaspi/modules/FormAuthModule.java", "diffHunk": "@@ -173,6 +173,7 @@ public AuthStatus validateRequest(MessageInfo messageInfo, Subject clientSubject\n                     }\n \n                     response.setContentLength(0);\n+                    Request.getBaseRequest(request).getHttpChannel().ensureContentConsumedOrConnectionClose();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzMDA5OQ=="}, "originalCommit": {"oid": "901e6dcdd6676ed745ee3853d787b90f5abe1020"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjQ5MDI2OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMTozMDoxMlrOHz3-Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjo0NDozNVrOHz8z1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE1NjQ4Mg==", "bodyText": "I wonder whether this could be more lax... take into account 201 Created, 204 No Content, 206 Partial Content, etc.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524156482", "createdAt": "2020-11-16T11:30:12Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -492,10 +501,18 @@ public boolean handle()\n \n                     case COMPLETE:\n                     {\n-                        if (!_response.isCommitted() && !_request.isHandled() && !_response.getHttpOutput().isClosed())\n+                        if (!_response.isCommitted())\n                         {\n-                            _response.sendError(HttpStatus.NOT_FOUND_404);\n-                            break;\n+                            if (!_request.isHandled() && !_response.getHttpOutput().isClosed())\n+                            {\n+                                // The request was not actually handled\n+                                _response.sendError(HttpStatus.NOT_FOUND_404);\n+                                break;\n+                            }\n+\n+                            // Indicate Connection:close if we can't consume all.\n+                            if (_response.getStatus() >= 200)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901e6dcdd6676ed745ee3853d787b90f5abe1020"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE5ODU0NQ==", "bodyText": "Why would 201, 204 and 206 not what this behaviour?   All we are doing is consumeAll a little earlier than we would have otherwise, so we get a chance to send a Connection: close if we can't consume all.     We just want to exclude partial responses (ie 100, 101 etc.) which handle content differently.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524198545", "createdAt": "2020-11-16T12:09:33Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -492,10 +501,18 @@ public boolean handle()\n \n                     case COMPLETE:\n                     {\n-                        if (!_response.isCommitted() && !_request.isHandled() && !_response.getHttpOutput().isClosed())\n+                        if (!_response.isCommitted())\n                         {\n-                            _response.sendError(HttpStatus.NOT_FOUND_404);\n-                            break;\n+                            if (!_request.isHandled() && !_response.getHttpOutput().isClosed())\n+                            {\n+                                // The request was not actually handled\n+                                _response.sendError(HttpStatus.NOT_FOUND_404);\n+                                break;\n+                            }\n+\n+                            // Indicate Connection:close if we can't consume all.\n+                            if (_response.getStatus() >= 200)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE1NjQ4Mg=="}, "originalCommit": {"oid": "901e6dcdd6676ed745ee3853d787b90f5abe1020"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzNTczMw==", "bodyText": "Doh, wrong comment on my side.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524235733", "createdAt": "2020-11-16T12:44:35Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -492,10 +501,18 @@ public boolean handle()\n \n                     case COMPLETE:\n                     {\n-                        if (!_response.isCommitted() && !_request.isHandled() && !_response.getHttpOutput().isClosed())\n+                        if (!_response.isCommitted())\n                         {\n-                            _response.sendError(HttpStatus.NOT_FOUND_404);\n-                            break;\n+                            if (!_request.isHandled() && !_response.getHttpOutput().isClosed())\n+                            {\n+                                // The request was not actually handled\n+                                _response.sendError(HttpStatus.NOT_FOUND_404);\n+                                break;\n+                            }\n+\n+                            // Indicate Connection:close if we can't consume all.\n+                            if (_response.getStatus() >= 200)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE1NjQ4Mg=="}, "originalCommit": {"oid": "901e6dcdd6676ed745ee3853d787b90f5abe1020"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjUxNTU5OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMTozNDowMVrOHz4O4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjo0NToxMVrOHz82cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE2MDczOQ==", "bodyText": "The block above has a call to abort(), which then falls through, which I don't think it's right, we should break.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524160739", "createdAt": "2020-11-16T11:34:01Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -511,12 +528,7 @@ public boolean handle()\n                                 break;\n                             }\n                         }\n-\n-                        // TODO Currently a blocking/aborting consumeAll is done in the handling of the TERMINATED\n-                        // TODO Action triggered by the completed callback below.  It would be possible to modify the\n-                        // TODO callback to do a non-blocking consumeAll at this point and only call completed when\n-                        // TODO that is done.\n-\n+                        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901e6dcdd6676ed745ee3853d787b90f5abe1020"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE5NjU1OA==", "bodyText": "Why is that not correct?   It still sets up the final call to completed.\nBesides, that is existing behaviour and not really related to this PR.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524196558", "createdAt": "2020-11-16T12:07:38Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -511,12 +528,7 @@ public boolean handle()\n                                 break;\n                             }\n                         }\n-\n-                        // TODO Currently a blocking/aborting consumeAll is done in the handling of the TERMINATED\n-                        // TODO Action triggered by the completed callback below.  It would be possible to modify the\n-                        // TODO callback to do a non-blocking consumeAll at this point and only call completed when\n-                        // TODO that is done.\n-\n+                        ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE2MDczOQ=="}, "originalCommit": {"oid": "901e6dcdd6676ed745ee3853d787b90f5abe1020"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzNjQwMg==", "bodyText": "Okay.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524236402", "createdAt": "2020-11-16T12:45:11Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -511,12 +528,7 @@ public boolean handle()\n                                 break;\n                             }\n                         }\n-\n-                        // TODO Currently a blocking/aborting consumeAll is done in the handling of the TERMINATED\n-                        // TODO Action triggered by the completed callback below.  It would be possible to modify the\n-                        // TODO callback to do a non-blocking consumeAll at this point and only call completed when\n-                        // TODO that is done.\n-\n+                        ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE2MDczOQ=="}, "originalCommit": {"oid": "901e6dcdd6676ed745ee3853d787b90f5abe1020"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjUzMDc3OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMTozNjoyN1rOHz4YoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMTozNjoyN1rOHz4YoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE2MzIzMg==", "bodyText": "I think this needs a comment on why it is done here, because otherwise it should be done only in COMPLETE.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524163232", "createdAt": "2020-11-16T11:36:27Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -406,7 +410,12 @@ public boolean handle()\n                             // the following is needed as you cannot trust the response code and reason\n                             // as those could have been modified after calling sendError\n                             Integer code = (Integer)_request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);\n-                            _response.setStatus(code != null ? code : HttpStatus.INTERNAL_SERVER_ERROR_500);\n+                            if (code == null)\n+                                code = HttpStatus.INTERNAL_SERVER_ERROR_500;\n+                            _response.setStatus(code);\n+\n+                            // Add Connection:close if we can't consume the input\n+                            ensureContentConsumedOrConnectionClose();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901e6dcdd6676ed745ee3853d787b90f5abe1020"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjU1MDY5OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpConnection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMTozOTozOFrOHz4lnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMTozOTozOFrOHz4lnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE2NjU1Ng==", "bodyText": "Perhaps simplify the log -- do we really need the \"chunking\" difference? Perhaps just log the _parser object.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524166556", "createdAt": "2020-11-16T11:39:38Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpConnection.java", "diffHunk": "@@ -408,28 +408,12 @@ public void onCompleted()\n             // close to seek EOF\n             _parser.close();\n         }\n-        else if (_parser.inContentState() && _generator.isPersistent())\n+        // else abort if we can't consume all\n+        else if (_generator.isPersistent() && !_input.consumeAll())\n         {\n-            // Try to progress without filling.\n-            parseRequestBuffer();\n-            if (_parser.inContentState())\n-            {\n-                // If we are async, then we have problems to complete neatly\n-                if (_input.isAsync())\n-                {\n-                    if (LOG.isDebugEnabled())\n-                        LOG.debug(\"{}unconsumed input while async {}\", _parser.isChunking() ? \"Possible \" : \"\", this);\n-                    _channel.abort(new IOException(\"unconsumed input\"));\n-                }\n-                else\n-                {\n-                    if (LOG.isDebugEnabled())\n-                        LOG.debug(\"{}unconsumed input {}\", _parser.isChunking() ? \"Possible \" : \"\", this);\n-                    // Complete reading the request\n-                    if (!_input.consumeAll())\n-                        _channel.abort(new IOException(\"unconsumed input\"));\n-                }\n-            }\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"{}unconsumed input {}\", _parser.isChunking() ? \"Possible \" : \"\", this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901e6dcdd6676ed745ee3853d787b90f5abe1020"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODIzMTQ0OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Response.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoxMTozMVrOH0I5Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoxMTozMVrOH0I5Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzMzc0Nw==", "bodyText": "Fix javadocs: \"Sends a response with the given redirection status code\".", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524433747", "createdAt": "2020-11-16T17:11:31Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Response.java", "diffHunk": "@@ -497,6 +497,36 @@ public void sendProcessing() throws IOException\n      */\n     public void sendRedirect(int code, String location) throws IOException\n     {\n+        sendRedirect(code, location, false);\n+    }\n+\n+    /**\n+     * Sends a response with one of the 300 series redirection codes.\n+     *\n+     * @param location the location to send in {@code Location} headers\n+     * @param consumeAll if True, consume any HTTP/1 request input before doing the redirection. If the input cannot\n+     * be consumed without blocking, then add a `Connection: close` header to the response.\n+     * @throws IOException if unable to send the redirect\n+     */\n+    public void sendRedirect(String location, boolean consumeAll) throws IOException\n+    {\n+        sendRedirect(getHttpChannel().getRequest().getHttpVersion().getVersion() < HttpVersion.HTTP_1_1.getVersion()\n+            ? HttpServletResponse.SC_MOVED_TEMPORARILY : HttpServletResponse.SC_SEE_OTHER, location, consumeAll);\n+    }\n+\n+    /**\n+     * Sends a response with one of the 300 series redirection codes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c6d60d6932ff266404930661ae09d9eb1881b93"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODI3ODA0OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoyMjowN1rOH0JVpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToxMTo1MFrOH0rIMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0MDk5OA==", "bodyText": "Since many clients also add Connection: keep-alive is it worth to remove it even if the protocol is HTTP/1.1?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524440998", "createdAt": "2020-11-16T17:22:07Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -545,6 +562,60 @@ public boolean handle()\n         return !suspended;\n     }\n \n+    public void ensureConsumeAllOrNotPersistent()\n+    {\n+        switch (_request.getHttpVersion())\n+        {\n+            case HTTP_1_0:\n+                if (_request.getHttpInput().consumeAll())\n+                    return;\n+\n+                // Remove any keep-alive value in Connection headers\n+                _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+                {\n+                    if (fields == null || fields.isEmpty())\n+                        return null;\n+                    String v = fields.stream()\n+                        .flatMap(field -> Stream.of(field.getValues()).filter(s -> !HttpHeaderValue.KEEP_ALIVE.is(s)))\n+                        .collect(Collectors.joining(\", \"));\n+                    if (StringUtil.isEmpty(v))\n+                        return null;\n+\n+                    return new HttpField(HttpHeader.CONNECTION, v);\n+                });\n+                break;\n+\n+            case HTTP_1_1:\n+                if (_request.getHttpInput().consumeAll())\n+                    return;\n+\n+                // Add close value to Connection headers\n+                _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+                {\n+                    if (fields == null || fields.isEmpty())\n+                        return HttpConnection.CONNECTION_CLOSE;\n+\n+                    if (fields.stream().anyMatch(f -> f.contains(HttpHeaderValue.CLOSE.asString())))\n+                    {\n+                        if (fields.size() == 1)\n+                            return fields.get(0);\n+\n+                        return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                            .flatMap(field -> Stream.of(field.getValues()))\n+                            .collect(Collectors.joining(\", \")));\n+                    }\n+\n+                    return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                        .flatMap(field -> Stream.of(field.getValues()))\n+                        .collect(Collectors.joining(\", \")) + \", \" + HttpHeaderValue.CLOSE.asString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c6d60d6932ff266404930661ae09d9eb1881b93"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4NzA3Nw==", "bodyText": "There's also Connection: upgrade?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524487077", "createdAt": "2020-11-16T18:34:27Z", "author": {"login": "joakime"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -545,6 +562,60 @@ public boolean handle()\n         return !suspended;\n     }\n \n+    public void ensureConsumeAllOrNotPersistent()\n+    {\n+        switch (_request.getHttpVersion())\n+        {\n+            case HTTP_1_0:\n+                if (_request.getHttpInput().consumeAll())\n+                    return;\n+\n+                // Remove any keep-alive value in Connection headers\n+                _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+                {\n+                    if (fields == null || fields.isEmpty())\n+                        return null;\n+                    String v = fields.stream()\n+                        .flatMap(field -> Stream.of(field.getValues()).filter(s -> !HttpHeaderValue.KEEP_ALIVE.is(s)))\n+                        .collect(Collectors.joining(\", \"));\n+                    if (StringUtil.isEmpty(v))\n+                        return null;\n+\n+                    return new HttpField(HttpHeader.CONNECTION, v);\n+                });\n+                break;\n+\n+            case HTTP_1_1:\n+                if (_request.getHttpInput().consumeAll())\n+                    return;\n+\n+                // Add close value to Connection headers\n+                _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+                {\n+                    if (fields == null || fields.isEmpty())\n+                        return HttpConnection.CONNECTION_CLOSE;\n+\n+                    if (fields.stream().anyMatch(f -> f.contains(HttpHeaderValue.CLOSE.asString())))\n+                    {\n+                        if (fields.size() == 1)\n+                            return fields.get(0);\n+\n+                        return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                            .flatMap(field -> Stream.of(field.getValues()))\n+                            .collect(Collectors.joining(\", \")));\n+                    }\n+\n+                    return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                        .flatMap(field -> Stream.of(field.getValues()))\n+                        .collect(Collectors.joining(\", \")) + \", \" + HttpHeaderValue.CLOSE.asString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0MDk5OA=="}, "originalCommit": {"oid": "9c6d60d6932ff266404930661ae09d9eb1881b93"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3NTUzNA==", "bodyText": "removing keep-alive as well makes the code rather complex.  Close should always override keep-alive.... not so in our generator for HTTP/1.0, I will change that.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524975534", "createdAt": "2020-11-17T08:41:52Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -545,6 +562,60 @@ public boolean handle()\n         return !suspended;\n     }\n \n+    public void ensureConsumeAllOrNotPersistent()\n+    {\n+        switch (_request.getHttpVersion())\n+        {\n+            case HTTP_1_0:\n+                if (_request.getHttpInput().consumeAll())\n+                    return;\n+\n+                // Remove any keep-alive value in Connection headers\n+                _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+                {\n+                    if (fields == null || fields.isEmpty())\n+                        return null;\n+                    String v = fields.stream()\n+                        .flatMap(field -> Stream.of(field.getValues()).filter(s -> !HttpHeaderValue.KEEP_ALIVE.is(s)))\n+                        .collect(Collectors.joining(\", \"));\n+                    if (StringUtil.isEmpty(v))\n+                        return null;\n+\n+                    return new HttpField(HttpHeader.CONNECTION, v);\n+                });\n+                break;\n+\n+            case HTTP_1_1:\n+                if (_request.getHttpInput().consumeAll())\n+                    return;\n+\n+                // Add close value to Connection headers\n+                _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+                {\n+                    if (fields == null || fields.isEmpty())\n+                        return HttpConnection.CONNECTION_CLOSE;\n+\n+                    if (fields.stream().anyMatch(f -> f.contains(HttpHeaderValue.CLOSE.asString())))\n+                    {\n+                        if (fields.size() == 1)\n+                            return fields.get(0);\n+\n+                        return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                            .flatMap(field -> Stream.of(field.getValues()))\n+                            .collect(Collectors.joining(\", \")));\n+                    }\n+\n+                    return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                        .flatMap(field -> Stream.of(field.getValues()))\n+                        .collect(Collectors.joining(\", \")) + \", \" + HttpHeaderValue.CLOSE.asString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0MDk5OA=="}, "originalCommit": {"oid": "9c6d60d6932ff266404930661ae09d9eb1881b93"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5NDYxMA==", "bodyText": "OK I removed the keep-alive as well and added unit tests for all the variations... good thing too as I was adding an extra ',' in some circumstances.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524994610", "createdAt": "2020-11-17T09:11:50Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -545,6 +562,60 @@ public boolean handle()\n         return !suspended;\n     }\n \n+    public void ensureConsumeAllOrNotPersistent()\n+    {\n+        switch (_request.getHttpVersion())\n+        {\n+            case HTTP_1_0:\n+                if (_request.getHttpInput().consumeAll())\n+                    return;\n+\n+                // Remove any keep-alive value in Connection headers\n+                _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+                {\n+                    if (fields == null || fields.isEmpty())\n+                        return null;\n+                    String v = fields.stream()\n+                        .flatMap(field -> Stream.of(field.getValues()).filter(s -> !HttpHeaderValue.KEEP_ALIVE.is(s)))\n+                        .collect(Collectors.joining(\", \"));\n+                    if (StringUtil.isEmpty(v))\n+                        return null;\n+\n+                    return new HttpField(HttpHeader.CONNECTION, v);\n+                });\n+                break;\n+\n+            case HTTP_1_1:\n+                if (_request.getHttpInput().consumeAll())\n+                    return;\n+\n+                // Add close value to Connection headers\n+                _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+                {\n+                    if (fields == null || fields.isEmpty())\n+                        return HttpConnection.CONNECTION_CLOSE;\n+\n+                    if (fields.stream().anyMatch(f -> f.contains(HttpHeaderValue.CLOSE.asString())))\n+                    {\n+                        if (fields.size() == 1)\n+                            return fields.get(0);\n+\n+                        return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                            .flatMap(field -> Stream.of(field.getValues()))\n+                            .collect(Collectors.joining(\", \")));\n+                    }\n+\n+                    return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                        .flatMap(field -> Stream.of(field.getValues()))\n+                        .collect(Collectors.joining(\", \")) + \", \" + HttpHeaderValue.CLOSE.asString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0MDk5OA=="}, "originalCommit": {"oid": "9c6d60d6932ff266404930661ae09d9eb1881b93"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODM0OTA1OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpInput.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzozODozMFrOH0KCJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzozODozMFrOH0KCJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1MjM4OQ==", "bodyText": "Add javadocs with the precise semantic about the return value.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524452389", "createdAt": "2020-11-16T17:38:30Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpInput.java", "diffHunk": "@@ -672,29 +672,44 @@ public boolean eof()\n \n     public boolean consumeAll()\n     {\n-        synchronized (_inputQ)\n+        while (true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c6d60d6932ff266404930661ae09d9eb1881b93"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODM2OTQzOnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ContextHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzo0MzoyMFrOH0KOvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzo0MzoyMFrOH0KOvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1NTYxNA==", "bodyText": "Maybe use a local variable for the query?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524455614", "createdAt": "2020-11-16T17:43:20Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ContextHandler.java", "diffHunk": "@@ -1240,10 +1240,10 @@ public boolean checkContext(final String target, final Request baseRequest, fina\n         {\n             // context request must end with /\n             baseRequest.setHandled(true);\n-            if (baseRequest.getQueryString() != null)\n-                response.sendRedirect(baseRequest.getRequestURI() + \"/?\" + baseRequest.getQueryString());\n-            else\n-                response.sendRedirect(baseRequest.getRequestURI() + \"/\");\n+            baseRequest.getResponse().sendRedirect(\n+                HttpServletResponse.SC_MOVED_TEMPORARILY,\n+                baseRequest.getRequestURI() + (baseRequest.getQueryString() == null ? \"/\" : (\"/?\" + baseRequest.getQueryString())),\n+                true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c6d60d6932ff266404930661ae09d9eb1881b93"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODM3ODg2OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/test/java/org/eclipse/jetty/server/ErrorHandlerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzo0NToyOFrOH0KUOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODo0NzowNVrOH0qKJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1NzAxOA==", "bodyText": "One more test with HTTP/1.1 with Connection: keep-alive?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524457018", "createdAt": "2020-11-16T17:45:28Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/ErrorHandlerTest.java", "diffHunk": "@@ -233,6 +233,88 @@ public void test404HtmlAccept() throws Exception\n         assertContent(response);\n     }\n \n+    @Test\n+    public void test404PostHttp10() throws Exception\n+    {\n+        String rawResponse = connector.getResponse(\n+            \"POST / HTTP/1.0\\r\\n\" +\n+                \"Host: Localhost\\r\\n\" +\n+                \"Accept: text/html\\r\\n\" +\n+                \"Content-Length: 10\\r\\n\" +\n+                \"Connection: keep-alive\\r\\n\" +\n+                \"\\r\\n\" +\n+                \"0123456789\");\n+\n+        HttpTester.Response response = HttpTester.parseResponse(rawResponse);\n+\n+        assertThat(response.getStatus(), is(404));\n+        assertThat(response.getField(HttpHeader.CONTENT_LENGTH).getIntValue(), greaterThan(0));\n+        assertThat(response.get(HttpHeader.CONTENT_TYPE), containsString(\"text/html;charset=ISO-8859-1\"));\n+        assertThat(response.get(HttpHeader.CONNECTION), is(\"keep-alive\"));\n+        assertContent(response);\n+    }\n+\n+    @Test\n+    public void test404PostHttp11() throws Exception\n+    {\n+        String rawResponse = connector.getResponse(\n+            \"POST / HTTP/1.1\\r\\n\" +\n+                \"Host: Localhost\\r\\n\" +\n+                \"Accept: text/html\\r\\n\" +\n+                \"Content-Length: 10\\r\\n\" +\n+                \"\\r\\n\" +\n+                \"0123456789\");\n+\n+        HttpTester.Response response = HttpTester.parseResponse(rawResponse);\n+\n+        assertThat(response.getStatus(), is(404));\n+        assertThat(response.getField(HttpHeader.CONTENT_LENGTH).getIntValue(), greaterThan(0));\n+        assertThat(response.get(HttpHeader.CONTENT_TYPE), containsString(\"text/html;charset=ISO-8859-1\"));\n+        assertThat(response.getField(HttpHeader.CONNECTION), nullValue());\n+        assertContent(response);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c6d60d6932ff266404930661ae09d9eb1881b93"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1ODM5Mw==", "bodyText": "Can we also add a test with gzip content? Can we assert that we did not ungzip it?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524458393", "createdAt": "2020-11-16T17:47:43Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/ErrorHandlerTest.java", "diffHunk": "@@ -233,6 +233,88 @@ public void test404HtmlAccept() throws Exception\n         assertContent(response);\n     }\n \n+    @Test\n+    public void test404PostHttp10() throws Exception\n+    {\n+        String rawResponse = connector.getResponse(\n+            \"POST / HTTP/1.0\\r\\n\" +\n+                \"Host: Localhost\\r\\n\" +\n+                \"Accept: text/html\\r\\n\" +\n+                \"Content-Length: 10\\r\\n\" +\n+                \"Connection: keep-alive\\r\\n\" +\n+                \"\\r\\n\" +\n+                \"0123456789\");\n+\n+        HttpTester.Response response = HttpTester.parseResponse(rawResponse);\n+\n+        assertThat(response.getStatus(), is(404));\n+        assertThat(response.getField(HttpHeader.CONTENT_LENGTH).getIntValue(), greaterThan(0));\n+        assertThat(response.get(HttpHeader.CONTENT_TYPE), containsString(\"text/html;charset=ISO-8859-1\"));\n+        assertThat(response.get(HttpHeader.CONNECTION), is(\"keep-alive\"));\n+        assertContent(response);\n+    }\n+\n+    @Test\n+    public void test404PostHttp11() throws Exception\n+    {\n+        String rawResponse = connector.getResponse(\n+            \"POST / HTTP/1.1\\r\\n\" +\n+                \"Host: Localhost\\r\\n\" +\n+                \"Accept: text/html\\r\\n\" +\n+                \"Content-Length: 10\\r\\n\" +\n+                \"\\r\\n\" +\n+                \"0123456789\");\n+\n+        HttpTester.Response response = HttpTester.parseResponse(rawResponse);\n+\n+        assertThat(response.getStatus(), is(404));\n+        assertThat(response.getField(HttpHeader.CONTENT_LENGTH).getIntValue(), greaterThan(0));\n+        assertThat(response.get(HttpHeader.CONTENT_TYPE), containsString(\"text/html;charset=ISO-8859-1\"));\n+        assertThat(response.getField(HttpHeader.CONNECTION), nullValue());\n+        assertContent(response);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1NzAxOA=="}, "originalCommit": {"oid": "9c6d60d6932ff266404930661ae09d9eb1881b93"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3ODcyNA==", "bodyText": "@sbordet I've added keep-alive to the existing 1.1 test as it doesn't change behaviour, but shows that it is correctly ignored.\n@joakime can I get you to do that gzip test?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524978724", "createdAt": "2020-11-17T08:47:05Z", "author": {"login": "gregw"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/ErrorHandlerTest.java", "diffHunk": "@@ -233,6 +233,88 @@ public void test404HtmlAccept() throws Exception\n         assertContent(response);\n     }\n \n+    @Test\n+    public void test404PostHttp10() throws Exception\n+    {\n+        String rawResponse = connector.getResponse(\n+            \"POST / HTTP/1.0\\r\\n\" +\n+                \"Host: Localhost\\r\\n\" +\n+                \"Accept: text/html\\r\\n\" +\n+                \"Content-Length: 10\\r\\n\" +\n+                \"Connection: keep-alive\\r\\n\" +\n+                \"\\r\\n\" +\n+                \"0123456789\");\n+\n+        HttpTester.Response response = HttpTester.parseResponse(rawResponse);\n+\n+        assertThat(response.getStatus(), is(404));\n+        assertThat(response.getField(HttpHeader.CONTENT_LENGTH).getIntValue(), greaterThan(0));\n+        assertThat(response.get(HttpHeader.CONTENT_TYPE), containsString(\"text/html;charset=ISO-8859-1\"));\n+        assertThat(response.get(HttpHeader.CONNECTION), is(\"keep-alive\"));\n+        assertContent(response);\n+    }\n+\n+    @Test\n+    public void test404PostHttp11() throws Exception\n+    {\n+        String rawResponse = connector.getResponse(\n+            \"POST / HTTP/1.1\\r\\n\" +\n+                \"Host: Localhost\\r\\n\" +\n+                \"Accept: text/html\\r\\n\" +\n+                \"Content-Length: 10\\r\\n\" +\n+                \"\\r\\n\" +\n+                \"0123456789\");\n+\n+        HttpTester.Response response = HttpTester.parseResponse(rawResponse);\n+\n+        assertThat(response.getStatus(), is(404));\n+        assertThat(response.getField(HttpHeader.CONTENT_LENGTH).getIntValue(), greaterThan(0));\n+        assertThat(response.get(HttpHeader.CONTENT_TYPE), containsString(\"text/html;charset=ISO-8859-1\"));\n+        assertThat(response.getField(HttpHeader.CONNECTION), nullValue());\n+        assertContent(response);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1NzAxOA=="}, "originalCommit": {"oid": "9c6d60d6932ff266404930661ae09d9eb1881b93"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjUyOTA0OnYy", "diffSide": "RIGHT", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjo0NjowOVrOH0zMCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjo0NjowOVrOH0zMCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyNjY2Nw==", "bodyText": "Now you first check for keep-alive, but then if close is there, shouldn't you remove keep-alive?", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r525126667", "createdAt": "2020-11-17T12:46:09Z", "author": {"login": "sbordet"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpGenerator.java", "diffHunk": "@@ -659,16 +659,15 @@ else if (contentLength != field.getLongValue())\n                         case CONNECTION:\n                         {\n                             putTo(field, header);\n+                            if (info.getHttpVersion() == HttpVersion.HTTP_1_0 && _persistent == null && field.contains(HttpHeaderValue.KEEP_ALIVE.asString()))\n+                            {\n+                                _persistent = true;\n+                            }\n                             if (field.contains(HttpHeaderValue.CLOSE.asString()))\n                             {\n                                 close = true;\n                                 _persistent = false;\n                             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a5f987418f4bf4eb39535f24e0a9819569a000f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjU0MjU3OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Response.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjo1MDowM1rOH0zUYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjo1MDowM1rOH0zUYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyODgwMw==", "bodyText": "I think there is a HttpStatus.isRedirection(int) that you can use here.", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r525128803", "createdAt": "2020-11-17T12:50:03Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Response.java", "diffHunk": "@@ -497,6 +497,36 @@ public void sendProcessing() throws IOException\n      */\n     public void sendRedirect(int code, String location) throws IOException\n     {\n+        sendRedirect(code, location, false);\n+    }\n+\n+    /**\n+     * Sends a response with a HTTP version appropriate 30x redirection.\n+     *\n+     * @param location the location to send in {@code Location} headers\n+     * @param consumeAll if True, consume any HTTP/1 request input before doing the redirection. If the input cannot\n+     * be consumed without blocking, then add a `Connection: close` header to the response.\n+     * @throws IOException if unable to send the redirect\n+     */\n+    public void sendRedirect(String location, boolean consumeAll) throws IOException\n+    {\n+        sendRedirect(getHttpChannel().getRequest().getHttpVersion().getVersion() < HttpVersion.HTTP_1_1.getVersion()\n+            ? HttpServletResponse.SC_MOVED_TEMPORARILY : HttpServletResponse.SC_SEE_OTHER, location, consumeAll);\n+    }\n+\n+    /**\n+     * Sends a response with a given redirection code.\n+     *\n+     * @param code the redirect status code\n+     * @param location the location to send in {@code Location} headers\n+     * @param consumeAll if True, consume any HTTP/1 request input before doing the redirection. If the input cannot\n+     * be consumed without blocking, then add a `Connection: close` header to the response.\n+     * @throws IOException if unable to send the redirect\n+     */\n+    public void sendRedirect(int code, String location, boolean consumeAll) throws IOException\n+    {\n+        if (consumeAll)\n+            getHttpChannel().ensureConsumeAllOrNotPersistent();\n         if ((code < HttpServletResponse.SC_MULTIPLE_CHOICES) || (code >= HttpServletResponse.SC_BAD_REQUEST))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a5f987418f4bf4eb39535f24e0a9819569a000f"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2129, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}