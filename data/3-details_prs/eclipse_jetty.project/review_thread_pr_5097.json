{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MjkxNjQw", "number": 5097, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDowNjowNFrOETL5MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjo1NzowOVrOEbqP2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTUzMjY1OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/session/AbstractSessionDataStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDowNjowNFrOG4xqYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDowNjowNFrOG4xqYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4NzEwNw==", "bodyText": "use a lamba instead of new Runnable() like elsewhere in this class", "url": "https://github.com/eclipse/jetty.project/pull/5097#discussion_r462187107", "createdAt": "2020-07-29T10:06:04Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/session/AbstractSessionDataStore.java", "diffHunk": "@@ -159,20 +228,101 @@ public void run()\n             throw exception.get();\n     }\n \n+    @Override\n+    public boolean exists(String id) throws Exception\n+    {\n+        final AtomicReference<Exception> exception = new AtomicReference<>();\n+        final AtomicReference<Boolean> result = new AtomicReference<>();\n+        Runnable r = new Runnable()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfedf204eb2fd4772ffa9043ee4f22c337554456"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTU0NDE3OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/session/AbstractSessionDataStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDowOTowNlrOG4xxHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDowOTowNlrOG4xxHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4ODgzMA==", "bodyText": "Since the behaviour of  doGetExpired has changed a bit, is there a better name for it?", "url": "https://github.com/eclipse/jetty.project/pull/5097#discussion_r462188830", "createdAt": "2020-07-29T10:09:06Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/session/AbstractSessionDataStore.java", "diffHunk": "@@ -159,20 +228,101 @@ public void run()\n             throw exception.get();\n     }\n \n+    @Override\n+    public boolean exists(String id) throws Exception\n+    {\n+        final AtomicReference<Exception> exception = new AtomicReference<>();\n+        final AtomicReference<Boolean> result = new AtomicReference<>();\n+        Runnable r = new Runnable()\n+        {\n+            @Override\n+            public void run()\n+            {\n+                try\n+                {\n+                    result.set(doExists(id));\n+                }\n+                catch (Exception e)\n+                {\n+                    exception.set(e);\n+                }\n+            }\n+        };\n+\n+        _context.run(r);\n+        if (exception.get() != null)\n+            throw exception.get();\n+        \n+        return result.get();\n+    }\n+\n     @Override\n     public Set<String> getExpired(Set<String> candidates)\n     {\n         if (!isStarted())\n             throw new IllegalStateException(\"Not started\");\n+        long now = System.currentTimeMillis();\n         \n+        // 1. always verify the set of candidates we've been given\n+        //by the sessioncache\n+        Set<String> expired = new HashSet<>();\n+        Set<String> expiredCandidates = doGetExpired(candidates, now);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfedf204eb2fd4772ffa9043ee4f22c337554456"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTYwMjAwOnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/session/AbstractSessionDataStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDoyNjoyN1rOG4yUWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDoyNjoyN1rOG4yUWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE5Nzg1MA==", "bodyText": "Maybe use a single AtomicReference here and use instanceof check for the exception?  Still ugly, but in a different way.", "url": "https://github.com/eclipse/jetty.project/pull/5097#discussion_r462197850", "createdAt": "2020-07-29T10:26:27Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/session/AbstractSessionDataStore.java", "diffHunk": "@@ -159,20 +228,101 @@ public void run()\n             throw exception.get();\n     }\n \n+    @Override\n+    public boolean exists(String id) throws Exception\n+    {\n+        final AtomicReference<Exception> exception = new AtomicReference<>();\n+        final AtomicReference<Boolean> result = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfedf204eb2fd4772ffa9043ee4f22c337554456"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjQwODkzOnYy", "diffSide": "RIGHT", "path": "jetty-documentation/src/main/asciidoc/distribution-guide/sessions/session-configuration-hazelcast.adoc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDozNjo0NVrOG_kRtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjowNDozOFrOG_oPqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNzgzMQ==", "bodyText": "killZombies would have been a much better name... or maybe slayZombies.\nuseQueries is a little meaningless... how about scavengeWithQueries or queryForExpired ?", "url": "https://github.com/eclipse/jetty.project/pull/5097#discussion_r469307831", "createdAt": "2020-08-12T14:36:45Z", "author": {"login": "gregw"}, "path": "jetty-documentation/src/main/asciidoc/distribution-guide/sessions/session-configuration-hazelcast.adoc", "diffHunk": "@@ -95,8 +95,8 @@ jetty.session.hazelcast.onlyClient::\n Hazelcast instance will be configured in client mode\n jetty.session.hazelcast.configurationLocation::\n Path to an an Hazelcast xml configuration file\n-jetty.session.hazelcast.scavengeZombies::\n-True/False. `False` by default. If `true`, jetty will use hazelcast queries to find sessions that are no longer being used on any jetty node and whose expiry time has passed. If you enable this option, and your session stores attributes that reference classes from inside your webapp, or jetty classes, you will need to ensure that these classes are available on each of your hazelcast instances.\n+jetty.session.hazelcast.useQueries::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a6d9f4ea847d134a3425ae2e3728f4ea792be"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxMTUwNQ==", "bodyText": "or queryForOrphans?", "url": "https://github.com/eclipse/jetty.project/pull/5097#discussion_r469311505", "createdAt": "2020-08-12T14:41:52Z", "author": {"login": "gregw"}, "path": "jetty-documentation/src/main/asciidoc/distribution-guide/sessions/session-configuration-hazelcast.adoc", "diffHunk": "@@ -95,8 +95,8 @@ jetty.session.hazelcast.onlyClient::\n Hazelcast instance will be configured in client mode\n jetty.session.hazelcast.configurationLocation::\n Path to an an Hazelcast xml configuration file\n-jetty.session.hazelcast.scavengeZombies::\n-True/False. `False` by default. If `true`, jetty will use hazelcast queries to find sessions that are no longer being used on any jetty node and whose expiry time has passed. If you enable this option, and your session stores attributes that reference classes from inside your webapp, or jetty classes, you will need to ensure that these classes are available on each of your hazelcast instances.\n+jetty.session.hazelcast.useQueries::", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNzgzMQ=="}, "originalCommit": {"oid": "175a6d9f4ea847d134a3425ae2e3728f4ea792be"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM3Mjg0Mw==", "bodyText": "Maybe ... I like useQueries because it makes it clear you need to have Hazelcast configured for queries.", "url": "https://github.com/eclipse/jetty.project/pull/5097#discussion_r469372843", "createdAt": "2020-08-12T16:04:38Z", "author": {"login": "janbartel"}, "path": "jetty-documentation/src/main/asciidoc/distribution-guide/sessions/session-configuration-hazelcast.adoc", "diffHunk": "@@ -95,8 +95,8 @@ jetty.session.hazelcast.onlyClient::\n Hazelcast instance will be configured in client mode\n jetty.session.hazelcast.configurationLocation::\n Path to an an Hazelcast xml configuration file\n-jetty.session.hazelcast.scavengeZombies::\n-True/False. `False` by default. If `true`, jetty will use hazelcast queries to find sessions that are no longer being used on any jetty node and whose expiry time has passed. If you enable this option, and your session stores attributes that reference classes from inside your webapp, or jetty classes, you will need to ensure that these classes are available on each of your hazelcast instances.\n+jetty.session.hazelcast.useQueries::", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNzgzMQ=="}, "originalCommit": {"oid": "175a6d9f4ea847d134a3425ae2e3728f4ea792be"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjQxOTEyOnYy", "diffSide": "RIGHT", "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/InfinispanKeyBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDozOTowM1rOG_kYGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjowOToyN1rOG_obsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwOTQ2NA==", "bodyText": "IS this really only for Infinispan? Look generally useful.", "url": "https://github.com/eclipse/jetty.project/pull/5097#discussion_r469309464", "createdAt": "2020-08-12T14:39:03Z", "author": {"login": "gregw"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/InfinispanKeyBuilder.java", "diffHunk": "@@ -0,0 +1,31 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.session.infinispan;\n+\n+/**\n+ *\n+ *\n+ */\n+public class InfinispanKeyBuilder\n+{\n+    public static String build(String contextPath, String vhost, String id)\n+    {\n+        return contextPath + \"_\" + vhost + \"_\" + id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a6d9f4ea847d134a3425ae2e3728f4ea792be"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM3NTkyMQ==", "bodyText": "The SessionContext.toString() does something similar, but I didn't want to rely on as generic a method as toString() to generate the key for infinispan - if toString() ever changed, then infinispan would be broken.", "url": "https://github.com/eclipse/jetty.project/pull/5097#discussion_r469375921", "createdAt": "2020-08-12T16:09:27Z", "author": {"login": "janbartel"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/InfinispanKeyBuilder.java", "diffHunk": "@@ -0,0 +1,31 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.session.infinispan;\n+\n+/**\n+ *\n+ *\n+ */\n+public class InfinispanKeyBuilder\n+{\n+    public static String build(String contextPath, String vhost, String id)\n+    {\n+        return contextPath + \"_\" + vhost + \"_\" + id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwOTQ2NA=="}, "originalCommit": {"oid": "175a6d9f4ea847d134a3425ae2e3728f4ea792be"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjQyNzM0OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/session/AbstractSessionDataStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDo0MDo1N1rOG_kdag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjowOTozNlrOG_ocHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxMDgyNg==", "bodyText": "Result is a better name, as it has nothing to do with a Runnable", "url": "https://github.com/eclipse/jetty.project/pull/5097#discussion_r469310826", "createdAt": "2020-08-12T14:40:57Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/session/AbstractSessionDataStore.java", "diffHunk": "@@ -39,8 +39,52 @@\n     protected SessionContext _context; //context associated with this session data store\n     protected int _gracePeriodSec = 60 * 60; //default of 1hr \n     protected long _lastExpiryCheckTime = 0; //last time in ms that getExpired was called\n+    protected long _lastOrphanSweepTime = 0; //last time in ms that we deleted orphaned sessions\n     protected int _savePeriodSec = 0; //time in sec between saves\n-\n+    \n+    /**\n+     * Small utility class to allow us to\n+     * return a result and an Exception\n+     * from invocation of Runnables.\n+     *\n+     * @param <V> the type of the result.\n+     */\n+    private class RunnableResult<V>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a6d9f4ea847d134a3425ae2e3728f4ea792be"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM3NjAzMA==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/5097#discussion_r469376030", "createdAt": "2020-08-12T16:09:36Z", "author": {"login": "janbartel"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/session/AbstractSessionDataStore.java", "diffHunk": "@@ -39,8 +39,52 @@\n     protected SessionContext _context; //context associated with this session data store\n     protected int _gracePeriodSec = 60 * 60; //default of 1hr \n     protected long _lastExpiryCheckTime = 0; //last time in ms that getExpired was called\n+    protected long _lastOrphanSweepTime = 0; //last time in ms that we deleted orphaned sessions\n     protected int _savePeriodSec = 0; //time in sec between saves\n-\n+    \n+    /**\n+     * Small utility class to allow us to\n+     * return a result and an Exception\n+     * from invocation of Runnables.\n+     *\n+     * @param <V> the type of the result.\n+     */\n+    private class RunnableResult<V>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxMDgyNg=="}, "originalCommit": {"oid": "175a6d9f4ea847d134a3425ae2e3728f4ea792be"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjQ3NzAyOnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/session/AbstractSessionDataStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDo1MTozMlrOG_k8Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjoxMDowOFrOG_odjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxODY4Ng==", "bodyText": "This is much better, but the lambda is a little on the big size.  Perhaps move the body to an inner class like:\n    private class RunStore extends RunnableResult<Object> implements Runnable\n    {\n        String _id;\n        SessionData data;\n        ... etc.\n        public void run()\n        {\n            // do everything from lambda and save in self as a result\n        }\n    }\nThen this method becomes:\n        final RunStore runStore = new RunStore(id, data);\n        _context.run(runStore);\n        runStore.throwIfException();", "url": "https://github.com/eclipse/jetty.project/pull/5097#discussion_r469318686", "createdAt": "2020-08-12T14:51:32Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/session/AbstractSessionDataStore.java", "diffHunk": "@@ -114,49 +200,63 @@ public void store(String id, SessionData data) throws Exception\n         if (data == null)\n             return;\n \n-        final AtomicReference<Exception> exception = new AtomicReference<Exception>();\n+        final RunnableResult<Object> result = new RunnableResult<>();\n \n-        Runnable r = new Runnable()\n+        Runnable r = () ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a6d9f4ea847d134a3425ae2e3728f4ea792be"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM3NjM5Nw==", "bodyText": "I've greatly reduced the scope of the Runnable - it really only needs to surround the call to the subclass' doStore() method.", "url": "https://github.com/eclipse/jetty.project/pull/5097#discussion_r469376397", "createdAt": "2020-08-12T16:10:08Z", "author": {"login": "janbartel"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/session/AbstractSessionDataStore.java", "diffHunk": "@@ -114,49 +200,63 @@ public void store(String id, SessionData data) throws Exception\n         if (data == null)\n             return;\n \n-        final AtomicReference<Exception> exception = new AtomicReference<Exception>();\n+        final RunnableResult<Object> result = new RunnableResult<>();\n \n-        Runnable r = new Runnable()\n+        Runnable r = () ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxODY4Ng=="}, "originalCommit": {"oid": "175a6d9f4ea847d134a3425ae2e3728f4ea792be"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDM5MTkyOnYy", "diffSide": "RIGHT", "path": "jetty-nosql/src/main/java/org/eclipse/jetty/nosql/mongodb/MongoSessionDataStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjo1NzowOVrOHFuCAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODoyNDoyOFrOHGNJYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc1OTEwNQ==", "bodyText": "That has mismatched parameters now.", "url": "https://github.com/eclipse/jetty.project/pull/5097#discussion_r475759105", "createdAt": "2020-08-24T16:57:09Z", "author": {"login": "joakime"}, "path": "jetty-nosql/src/main/java/org/eclipse/jetty/nosql/mongodb/MongoSessionDataStore.java", "diffHunk": "@@ -269,7 +269,7 @@ public SessionData doLoad(String id) throws Exception\n     public boolean delete(String id) throws Exception\n     {\n         if (LOG.isDebugEnabled())\n-            LOG.debug(\"Remove:session {} for context {}\", id, _context);\n+            LOG.debug(\"Remove:session {} for context \", id, _context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1419266f4522a5528c87287825bd86afa64df499"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI2ODg5OQ==", "bodyText": "I don't know what's happening here, but it's certainly correct in jetty -10.0.x repo.", "url": "https://github.com/eclipse/jetty.project/pull/5097#discussion_r476268899", "createdAt": "2020-08-25T08:24:28Z", "author": {"login": "janbartel"}, "path": "jetty-nosql/src/main/java/org/eclipse/jetty/nosql/mongodb/MongoSessionDataStore.java", "diffHunk": "@@ -269,7 +269,7 @@ public SessionData doLoad(String id) throws Exception\n     public boolean delete(String id) throws Exception\n     {\n         if (LOG.isDebugEnabled())\n-            LOG.debug(\"Remove:session {} for context {}\", id, _context);\n+            LOG.debug(\"Remove:session {} for context \", id, _context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc1OTEwNQ=="}, "originalCommit": {"oid": "1419266f4522a5528c87287825bd86afa64df499"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2452, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}