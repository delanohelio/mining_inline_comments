{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MTg0Mjc1", "number": 5222, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTowODowOFrOEfZ4Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTozNjo1NlrOEf6LJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzY1MzQ2OnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTowODowOFrOHLqI1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTozOToyOVrOHMeozw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4Njc3Mg==", "bodyText": "why  a class rather than just some utility methods to build List<StreamFrame> ?  They could equally check that all frames are the same streamId, but ultimately why check at creation when you must have to check when sent.  If a single DataFrame is sent with the wrong streamId, it is the same problem", "url": "https://github.com/eclipse/jetty.project/pull/5222#discussion_r481986772", "createdAt": "2020-09-02T11:08:08Z", "author": {"login": "gregw"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "diffHunk": "@@ -298,4 +316,62 @@ public boolean onIdleTimeout(Stream stream, Throwable x)\n             }\n         }\n     }\n+\n+    /**\n+     * <p>An ordered list of frames belonging to the same stream.</p>\n+     */\n+    public static class FrameList", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7822cc55cb093ed40acb8b1c92271eddd83308dc"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg0NjkyNw==", "bodyText": "I find using a dedicated class more elegant as it is a clear API indicator that a method accepting a FrameList is won't modify the collection of StreamFrames. I'd just explicitly state in the javadoc of this class that immutable.", "url": "https://github.com/eclipse/jetty.project/pull/5222#discussion_r482846927", "createdAt": "2020-09-03T09:39:29Z", "author": {"login": "lorban"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "diffHunk": "@@ -298,4 +316,62 @@ public boolean onIdleTimeout(Stream stream, Throwable x)\n             }\n         }\n     }\n+\n+    /**\n+     * <p>An ordered list of frames belonging to the same stream.</p>\n+     */\n+    public static class FrameList", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4Njc3Mg=="}, "originalCommit": {"oid": "7822cc55cb093ed40acb8b1c92271eddd83308dc"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzY1NTg5OnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTowODo1NlrOHLqKTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTowODo1NlrOHLqKTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4NzE0OQ==", "bodyText": "this is mutable.  Is it intended to be?", "url": "https://github.com/eclipse/jetty.project/pull/5222#discussion_r481987149", "createdAt": "2020-09-02T11:08:56Z", "author": {"login": "gregw"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "diffHunk": "@@ -298,4 +316,62 @@ public boolean onIdleTimeout(Stream stream, Throwable x)\n             }\n         }\n     }\n+\n+    /**\n+     * <p>An ordered list of frames belonging to the same stream.</p>\n+     */\n+    public static class FrameList\n+    {\n+        private final List<StreamFrame> frames;\n+\n+        /**\n+         * <p>Creates a frame list of just the given HEADERS frame.</p>\n+         *\n+         * @param headers the HEADERS frame\n+         */\n+        public FrameList(HeadersFrame headers)\n+        {\n+            Objects.requireNonNull(headers);\n+            this.frames = Collections.singletonList(headers);\n+        }\n+\n+        /**\n+         * <p>Creates a frame list of the given frames.</p>\n+         *\n+         * @param headers the HEADERS frame for the headers\n+         * @param data the DATA frame for the content, or null if there is no content\n+         * @param trailers the HEADERS frame for the trailers, or null if there are no trailers\n+         */\n+        public FrameList(HeadersFrame headers, DataFrame data, HeadersFrame trailers)\n+        {\n+            Objects.requireNonNull(headers);\n+            this.frames = new ArrayList<>(3);\n+            int streamId = headers.getStreamId();\n+            if (data != null && data.getStreamId() != streamId)\n+                throw new IllegalArgumentException(\"Invalid stream ID for DATA frame \" + data);\n+            if (trailers != null && trailers.getStreamId() != streamId)\n+                throw new IllegalArgumentException(\"Invalid stream ID for HEADERS frame \" + trailers);\n+            this.frames.add(headers);\n+            if (data != null)\n+                this.frames.add(data);\n+            if (trailers != null)\n+                this.frames.add(trailers);\n+        }\n+\n+        /**\n+         * @return the stream ID of the frames in this list\n+         */\n+        public int getStreamId()\n+        {\n+            return frames.get(0).getStreamId();\n+        }\n+\n+        /**\n+         * @return a List of non-null frames\n+         */\n+        public List<StreamFrame> getFrames()\n+        {\n+            return frames;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7822cc55cb093ed40acb8b1c92271eddd83308dc"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzY3NzIxOnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/frames/StreamFrame.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxNToxOVrOHLqWtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToxNToxOVrOHLqWtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MDMyNQ==", "bodyText": "javadoc please.\nMaybe make it an inner class of Frame?\nIs there a ConnectionFrame class to match?", "url": "https://github.com/eclipse/jetty.project/pull/5222#discussion_r481990325", "createdAt": "2020-09-02T11:15:19Z", "author": {"login": "gregw"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/frames/StreamFrame.java", "diffHunk": "@@ -0,0 +1,37 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.http2.frames;\n+\n+public abstract class StreamFrame extends Frame", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7822cc55cb093ed40acb8b1c92271eddd83308dc"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzcwNzIxOnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToyNDowM1rOHLqozA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToyNDowM1rOHLqozA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5NDk1Ng==", "bodyText": "what about sending request with no body?", "url": "https://github.com/eclipse/jetty.project/pull/5222#discussion_r481994956", "createdAt": "2020-09-02T11:24:03Z", "author": {"login": "gregw"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "diffHunk": "@@ -51,10 +57,22 @@\n     Session getSession();\n \n     /**\n-     * <p>Sends the given HEADERS {@code frame} representing an HTTP response.</p>\n+     * <p>Sends the given list of frames.</p>\n+     * <p>Typically used to send an HTTP response along with content and possibly trailers.</p>\n+     *\n+     * @param frameList the list of frames to send\n+     * @param callback the callback that gets notified when the frames have been sent\n+     */\n+    void send(Stream.FrameList frameList, Callback callback);\n+\n+    /**\n+     * <p>Sends the given HEADERS {@code frame}.</p>\n+     * <p>Typically used to send an HTTP response with no content and no trailers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7822cc55cb093ed40acb8b1c92271eddd83308dc"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODkyMTU3OnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTozMTo1NFrOHMeUwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTozMTo1NFrOHMeUwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg0MTc5Mw==", "bodyText": "I would store a unmodifiableList in this.frames.", "url": "https://github.com/eclipse/jetty.project/pull/5222#discussion_r482841793", "createdAt": "2020-09-03T09:31:54Z", "author": {"login": "lorban"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "diffHunk": "@@ -298,4 +316,62 @@ public boolean onIdleTimeout(Stream stream, Throwable x)\n             }\n         }\n     }\n+\n+    /**\n+     * <p>An ordered list of frames belonging to the same stream.</p>\n+     */\n+    public static class FrameList\n+    {\n+        private final List<StreamFrame> frames;\n+\n+        /**\n+         * <p>Creates a frame list of just the given HEADERS frame.</p>\n+         *\n+         * @param headers the HEADERS frame\n+         */\n+        public FrameList(HeadersFrame headers)\n+        {\n+            Objects.requireNonNull(headers);\n+            this.frames = Collections.singletonList(headers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7822cc55cb093ed40acb8b1c92271eddd83308dc"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODkyMjI1OnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTozMjowNlrOHMeVMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTozMjowNlrOHMeVMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg0MTkwNg==", "bodyText": "I would store a unmodifiableList in this.frames.", "url": "https://github.com/eclipse/jetty.project/pull/5222#discussion_r482841906", "createdAt": "2020-09-03T09:32:06Z", "author": {"login": "lorban"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "diffHunk": "@@ -298,4 +316,62 @@ public boolean onIdleTimeout(Stream stream, Throwable x)\n             }\n         }\n     }\n+\n+    /**\n+     * <p>An ordered list of frames belonging to the same stream.</p>\n+     */\n+    public static class FrameList\n+    {\n+        private final List<StreamFrame> frames;\n+\n+        /**\n+         * <p>Creates a frame list of just the given HEADERS frame.</p>\n+         *\n+         * @param headers the HEADERS frame\n+         */\n+        public FrameList(HeadersFrame headers)\n+        {\n+            Objects.requireNonNull(headers);\n+            this.frames = Collections.singletonList(headers);\n+        }\n+\n+        /**\n+         * <p>Creates a frame list of the given frames.</p>\n+         *\n+         * @param headers the HEADERS frame for the headers\n+         * @param data the DATA frame for the content, or null if there is no content\n+         * @param trailers the HEADERS frame for the trailers, or null if there are no trailers\n+         */\n+        public FrameList(HeadersFrame headers, DataFrame data, HeadersFrame trailers)\n+        {\n+            Objects.requireNonNull(headers);\n+            this.frames = new ArrayList<>(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7822cc55cb093ed40acb8b1c92271eddd83308dc"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODk0NDM4OnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTozNjo1NlrOHMeiTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTozNjo1NlrOHMeiTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg0NTI2Mw==", "bodyText": "The public static modifiers are not needed.", "url": "https://github.com/eclipse/jetty.project/pull/5222#discussion_r482845263", "createdAt": "2020-09-03T09:36:56Z", "author": {"login": "lorban"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "diffHunk": "@@ -298,4 +316,62 @@ public boolean onIdleTimeout(Stream stream, Throwable x)\n             }\n         }\n     }\n+\n+    /**\n+     * <p>An ordered list of frames belonging to the same stream.</p>\n+     */\n+    public static class FrameList", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7822cc55cb093ed40acb8b1c92271eddd83308dc"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2364, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}