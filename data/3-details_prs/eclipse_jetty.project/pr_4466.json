{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNzM3NjU0", "number": 4466, "title": "Fix #4461 HttpOutput Aggregation", "bodyText": "This is an alternative to #4465 that fixes #4461 and the discovered issue of not aggregating due to an empty at capacity buffer.\n\nAdded tests to check that aggregation continues after first flush of an aggregated buffer (this triggers both #4461 and the discovered bug of not aggregating because of empty at capacity aggregate buffer).\nAdded getAggregateSize method that does a compact to avoid empty at capacity aggregate buffer\nCall onWriteComplete if residue of an overflow aggregation can itself be aggregated.\n\nSigned-off-by: Greg Wilkins gregw@webtide.com\nCloses #4461", "createdAt": "2020-01-09T02:16:55Z", "url": "https://github.com/eclipse/jetty.project/pull/4466", "merged": true, "mergeCommit": {"oid": "96f6f2bb8d70e0018483c1bb35d6c04879f39b80"}, "closed": true, "closedAt": "2020-01-09T20:20:55Z", "author": {"login": "gregw"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4gU80AH2gAyMzYwNzM3NjU0OmUzMjU5ZDZhNjk1YTU5YTViM2RiYTdmMDdjNDIyYTdiYTU4NTZiNGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4tanKgFqTM0MDY5MTg0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e3259d6a695a59a5b3dba7f07c422a7ba5856b4f", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/e3259d6a695a59a5b3dba7f07c422a7ba5856b4f", "committedDate": "2020-01-09T02:14:32Z", "message": "Issue #4461 HttpOutput Aggregation\n\nAdded tests to check that aggregation continues after first flush of an aggregated buffer (this triggers both #4461 and the discovered bug of not aggregating because of empty at capacity aggregate buffer).\n\nAdded getAggregateSize method that does a compact to avoid empty at capacity aggregate buffer\n\nCall onWriteComplete if residue of an overflow aggregation can itself be aggregated.\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a361008ce5af7eab2377c1cc814a62f96b54df9", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/5a361008ce5af7eab2377c1cc814a62f96b54df9", "committedDate": "2020-01-09T04:58:16Z", "message": "Issue #4461 HttpOutput Aggregation\n\nRemoved implicit compact from GzipHandler\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "356b1c7b7c140018e3461039a335b1591336e4e5", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/356b1c7b7c140018e3461039a335b1591336e4e5", "committedDate": "2020-01-09T05:58:33Z", "message": "Issue #4461 HttpOutput Aggregation\n\nImprove test coverage\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/bda1db7322ed39a09c8f03f7054b92e64d212552", "committedDate": "2020-01-09T07:10:07Z", "message": "Issue #4461 HttpOutput Aggregation\n\nRemove case that can never happen.\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNDAzMDAw", "url": "https://github.com/eclipse/jetty.project/pull/4466#pullrequestreview-340403000", "createdAt": "2020-01-09T09:56:10Z", "commit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwOTo1NjoxMFrOFbwWZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMDoxNjoyOVrOFbw8kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0ODAzOA==", "bodyText": "This is, in general, wrong.\nIf an application sets bufferSize=512, when we get _aggregate from the buffer pool, we get back a buffer with capacity 1024 (or different, depending on the buffer pool configuration).\nWe must either not rely on the capacity of the buffer to return the aggregate space, or slice() the buffer returned by the buffer pool to the desired capacity.", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364648038", "createdAt": "2020-01-09T09:56:10Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "diffHunk": "@@ -378,6 +378,19 @@ private boolean updateApiState(Throwable failure)\n         return wake;\n     }\n \n+    private int getAggregateSpace()\n+    {\n+        // If no aggregate, we can allocate one of bufferSize\n+        if (_aggregate == null)\n+            return getBufferSize();\n+\n+        // if the position is not zero, compact to avoid empty at capacity\n+        if (_aggregate.position() != 0)\n+            BufferUtil.compact(_aggregate);\n+\n+        return BufferUtil.space(_aggregate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0OTU2OQ==", "bodyText": "This would be a getter with side effects, it will just bite us back. Must not compact here!", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364649569", "createdAt": "2020-01-09T09:59:12Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "diffHunk": "@@ -378,6 +378,19 @@ private boolean updateApiState(Throwable failure)\n         return wake;\n     }\n \n+    private int getAggregateSpace()\n+    {\n+        // If no aggregate, we can allocate one of bufferSize\n+        if (_aggregate == null)\n+            return getBufferSize();\n+\n+        // if the position is not zero, compact to avoid empty at capacity\n+        if (_aggregate.position() != 0)\n+            BufferUtil.compact(_aggregate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1MjQ3OA==", "bodyText": "This code block should really be removed, so that aggregation will happen only in 1 place, and only due to computing whether it should happen or not only once.\nThe conditions at line 829 (new code) are slightly different from the conditions at line 757 (new code), so it's difficult to follow the code, trying to understand why in the world there is a call to onWriteComplete() inside a block that does aggregation.\nActually, turns out that we do (again) a similar aggregation logic in AsyncWrite.process(), so we need to clean this up even more.", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364652478", "createdAt": "2020-01-09T10:05:22Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "diffHunk": "@@ -801,9 +826,10 @@ public void write(byte[] b, int off, int len) throws IOException\n                 channelWrite(_aggregate, last && len == 0);\n \n                 // should we fill aggregate again from the buffer?\n-                if (len > 0 && !last && len <= _commitSize && len <= BufferUtil.space(_aggregate))\n+                if (len > 0 && !last && len <= _commitSize && len <= getAggregateSpace())\n                 {\n                     BufferUtil.append(_aggregate, b, off, len);\n+                    onWriteComplete(false, null);\n                     return;\n                 }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1NjM5OQ==", "bodyText": "Why was this removed?", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364656399", "createdAt": "2020-01-09T10:13:29Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpOutput.java", "diffHunk": "@@ -1670,15 +1696,6 @@ protected Action process() throws Exception\n                 return Action.SCHEDULED;\n             }\n \n-            // all content written, but if we have not yet signal completion, we\n-            // need to do so\n-            if (_last && !_completed)\n-            {\n-                _completed = true;\n-                channelWrite(BufferUtil.EMPTY_BUFFER, true, this);\n-                return Action.SCHEDULED;\n-            }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1NzAzNA==", "bodyText": "The test should parametrize on these values, something like [512, 512], [512, 1024], [1024, 1024], [1024, 4096].", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364657034", "createdAt": "2020-01-09T10:14:58Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/HttpOutputTest.java", "diffHunk": "@@ -54,6 +58,8 @@\n  */\n public class HttpOutputTest\n {\n+    public static final int OUTPUT_AGGREGATION_SIZE = 1024;\n+    public static final int OUTPUT_BUFFER_SIZE = 4096;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1NzgxMQ==", "bodyText": "With this, this test is testing conditions that will never be the ones with the normal Jetty code, rendering this test useless.", "url": "https://github.com/eclipse/jetty.project/pull/4466#discussion_r364657811", "createdAt": "2020-01-09T10:16:29Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/HttpOutputTest.java", "diffHunk": "@@ -64,10 +70,25 @@ public void init() throws Exception\n     {\n         _server = new Server();\n \n+        _server.addBean(new ByteBufferPool()\n+        {\n+            @Override\n+            public ByteBuffer acquire(int size, boolean direct)\n+            {\n+                return direct ? BufferUtil.allocateDirect(size) : BufferUtil.allocate(size);\n+            }\n+\n+            @Override\n+            public void release(ByteBuffer buffer)\n+            {\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda1db7322ed39a09c8f03f7054b92e64d212552"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cbcfbdd2249fc48d37738e7a40f0f27e4eaca54", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/5cbcfbdd2249fc48d37738e7a40f0f27e4eaca54", "committedDate": "2020-01-09T12:06:03Z", "message": "Issue #4461 HttpOutput Aggregation\n\nupdates from review\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNjc0MTQz", "url": "https://github.com/eclipse/jetty.project/pull/4466#pullrequestreview-340674143", "createdAt": "2020-01-09T17:00:41Z", "commit": {"oid": "5cbcfbdd2249fc48d37738e7a40f0f27e4eaca54"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNjkxODQ0", "url": "https://github.com/eclipse/jetty.project/pull/4466#pullrequestreview-340691844", "createdAt": "2020-01-09T17:29:29Z", "commit": {"oid": "5cbcfbdd2249fc48d37738e7a40f0f27e4eaca54"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 543, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}