{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NDkxOTEz", "number": 5736, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwOToxMDozOVrOE-jq0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoxNTo0OVrOFK1aDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDMxNTY4OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ArrayTrie.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwOToxMDozOVrOH7xt2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjoxNTowNlrOICRn6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0MjU4Nw==", "bodyText": "It's certainly worth measuring the space & time difference between row sizes of 32 and 48.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r532442587", "createdAt": "2020-11-30T09:10:39Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ArrayTrie.java", "diffHunk": "@@ -56,7 +56,8 @@\n      * 32 to cover case insensitive alphabet and a few other common\n      * characters.\n      */\n-    private static final int ROW_SIZE = 32;\n+    private static final int ROW_SIZE = 48;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ca6e5aae5ad73bbf0015b68008c0171fd09e6eb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI1NjgxMA==", "bodyText": "My gut feeling is that the extra space for digits means that we can now more often just allocate the normal table and avoid the secondary larger table more often.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r539256810", "createdAt": "2020-12-09T12:15:06Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ArrayTrie.java", "diffHunk": "@@ -56,7 +56,8 @@\n      * 32 to cover case insensitive alphabet and a few other common\n      * characters.\n      */\n-    private static final int ROW_SIZE = 32;\n+    private static final int ROW_SIZE = 48;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0MjU4Nw=="}, "originalCommit": {"oid": "4ca6e5aae5ad73bbf0015b68008c0171fd09e6eb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODM4NTk5OnYy", "diffSide": "LEFT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODoyMzowNlrOIBM1Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDozNzo1NlrOIB1Dxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEyOTcxMQ==", "bodyText": "Why did you get rid of this check? IMHO building an index both pre-loaded with some contents and a max capacity of zero looks like a programming mistake we want to catch.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r538129711", "createdAt": "2020-12-08T08:23:06Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -193,42 +226,55 @@\n                 return this;\n             }\n \n+            public Builder<V> alphabet(String alphabetString)\n+            {\n+                alphabet = new HashSet<>();\n+                alphabetString.chars().forEach(c -> alphabet.add((char)c));\n+                return this;\n+            }\n+\n+            public Builder<V> alphabet(Set<Character> alphabet)\n+            {\n+                this.alphabet = alphabet;\n+                return this;\n+            }\n+\n             /**\n              * Build a {@link Mutable} instance.\n              * @return a {@link Mutable} instance.\n              */\n             public Mutable<V> build()\n             {\n-                if (contents != null && maxCapacity == 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f61c8a6d9ee6d14c3a6174fbe22f8ec48632838f"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4ODgwNg==", "bodyText": "Then we need another check as returning an empty Trie wont catch programming errors", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r538788806", "createdAt": "2020-12-08T20:37:56Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -193,42 +226,55 @@\n                 return this;\n             }\n \n+            public Builder<V> alphabet(String alphabetString)\n+            {\n+                alphabet = new HashSet<>();\n+                alphabetString.chars().forEach(c -> alphabet.add((char)c));\n+                return this;\n+            }\n+\n+            public Builder<V> alphabet(Set<Character> alphabet)\n+            {\n+                this.alphabet = alphabet;\n+                return this;\n+            }\n+\n             /**\n              * Build a {@link Mutable} instance.\n              * @return a {@link Mutable} instance.\n              */\n             public Mutable<V> build()\n             {\n-                if (contents != null && maxCapacity == 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEyOTcxMQ=="}, "originalCommit": {"oid": "f61c8a6d9ee6d14c3a6174fbe22f8ec48632838f"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODM4OTE3OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODoyMzo1MVrOIBM3GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODoyMzo1MVrOIBM3GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEzMDIwMQ==", "bodyText": "Should we define a default alphabet instead of throwing here?", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r538130201", "createdAt": "2020-12-08T08:23:51Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -193,42 +226,55 @@\n                 return this;\n             }\n \n+            public Builder<V> alphabet(String alphabetString)\n+            {\n+                alphabet = new HashSet<>();\n+                alphabetString.chars().forEach(c -> alphabet.add((char)c));\n+                return this;\n+            }\n+\n+            public Builder<V> alphabet(Set<Character> alphabet)\n+            {\n+                this.alphabet = alphabet;\n+                return this;\n+            }\n+\n             /**\n              * Build a {@link Mutable} instance.\n              * @return a {@link Mutable} instance.\n              */\n             public Mutable<V> build()\n             {\n-                if (contents != null && maxCapacity == 0)\n-                    throw new IllegalStateException(\"Cannot create a mutable index with maxCapacity=0 and some contents\");\n+                if (maxCapacity == 0)\n+                    return EmptyTrie.instance(caseSensitive);\n \n-                // TODO we need to consider large size and alphabet when picking a trie impl\n-                Mutable<V> result;\n-                if (maxCapacity > 0)\n+                if (alphabet == null)\n                 {\n-                    result = new ArrayTernaryTrie<>(!caseSensitive, maxCapacity);\n-                }\n-                else if (maxCapacity < 0)\n-                {\n-                    if (caseSensitive)\n-                        result = new ArrayTernaryTrie.Growing<>(false, 512, 512);\n-                    else\n-                        result = new TreeTrie<>();\n-                }\n-                else\n-                {\n-                    result = EmptyTrie.instance(caseSensitive);\n+                    if (contents != null)\n+                        throw new IllegalStateException(\"Cannot create a mutable index without alphabet or some contents\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f61c8a6d9ee6d14c3a6174fbe22f8ec48632838f"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODQxNTA0OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODoyODo0MFrOIBNF5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODoyODo0MFrOIBNF5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEzMzk5MQ==", "bodyText": "I do not like this constant very much, I would prefer an extra helper method on the builder:\n public Builder<V> withVisibleAsciiAlphabet()\n {\n  alphabet = Collections.unmodifiableSet(...);\n  return this;\n }", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r538133991", "createdAt": "2020-12-08T08:28:40Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -19,18 +19,26 @@\n package org.eclipse.jetty.util;\n \n import java.nio.ByteBuffer;\n+import java.util.Collections;\n+import java.util.HashSet;\n import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Set;\n import java.util.function.Function;\n import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n \n /**\n  * An immutable String lookup data structure.\n  * @param <V> the entry type\n  */\n public interface Index<V>\n {\n+    Set<Character> VISIBLE_ASCII_ALPHABET = Collections.unmodifiableSet(IntStream.range(0x20, 0x7f)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f61c8a6d9ee6d14c3a6174fbe22f8ec48632838f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODQzNDgwOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODozMzowN1rOIBNRLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODozMzowN1rOIBNRLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEzNjg3OQ==", "bodyText": "You should throw IllegalStateException here, like the mutable builder does.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r538136879", "createdAt": "2020-12-08T08:33:07Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -354,11 +401,26 @@ public Builder()\n             if (contents == null)\n                 return EmptyTrie.instance(caseSensitive);\n \n-            // TODO we need to consider large size and alphabet when picking a trie impl\n-            if (caseSensitive)\n-                return new ArrayTernaryTrie<>(false, contents);\n-            else\n-                return new ArrayTrie<>(contents);\n+            Set<Character> alphabet = new HashSet<>();\n+            int capacity = AbstractTrie.requiredCapacity(contents.keySet(), caseSensitive, alphabet);\n+\n+            AbstractTrie<V> trie = ArrayTrie.from(capacity, capacity, caseSensitive, alphabet, contents);\n+            if (trie != null)\n+                return trie;\n+            trie = ArrayTernaryTrie.from(capacity, capacity, caseSensitive, alphabet, contents);\n+            if (trie != null)\n+                return trie;\n+            trie = TreeTrie.from(capacity, capacity, caseSensitive, alphabet, contents);\n+            if (trie != null)\n+                return trie;\n+\n+            throw new UnsupportedOperationException(\"No suitable Trie implementation : \" + this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f61c8a6d9ee6d14c3a6174fbe22f8ec48632838f"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTY2MTQ0OnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Cipher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo0Njo0NlrOICQkGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo0Njo0NlrOICQkGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIzOTQ0OQ==", "bodyText": "This String::toUpperCase uses system default locale.\nThis will produce undesired side effects on on some, non-US, systems.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r539239449", "createdAt": "2020-12-09T11:46:46Z", "author": {"login": "joakime"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Cipher.java", "diffHunk": "@@ -19,311 +19,310 @@\n package org.eclipse.jetty.http2;\n \n import java.util.Comparator;\n-\n-import org.eclipse.jetty.util.Index;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n public class HTTP2Cipher\n {\n     public static final Comparator<String> COMPARATOR = new CipherComparator();\n \n-    private static final Index<Boolean> __blackProtocols = new Index.Builder<Boolean>()\n-        .caseSensitive(false)\n-        .with(\"TLSv1.2\", Boolean.TRUE)\n-        .with(\"TLSv1.1\", Boolean.TRUE)\n-        .with(\"TLSv1\", Boolean.TRUE)\n-        .with(\"SSL\", Boolean.TRUE)\n-        .with(\"SSLv2\", Boolean.TRUE)\n-        .with(\"SSLv3\", Boolean.TRUE)\n-        .build();\n+    private static final Set<String> __blackProtocols = Stream.of(\n+        \"TLSv1.2\",\n+        \"TLSv1.1\",\n+        \"TLSv1\",\n+        \"SSL\",\n+        \"SSLv2\",\n+        \"SSLv3\"\n+    ).map(String::toUpperCase).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b149d640eca7600ca7e878cbd5171ca6f7cb54db"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTY2MjIxOnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Cipher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo0Njo1NlrOICQkhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo0Njo1NlrOICQkhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIzOTU1OQ==", "bodyText": "This String::toUpperCase uses system default locale.\nThis will produce undesired side effects on on some, non-US, systems.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r539239559", "createdAt": "2020-12-09T11:46:56Z", "author": {"login": "joakime"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Cipher.java", "diffHunk": "@@ -19,311 +19,310 @@\n package org.eclipse.jetty.http2;\n \n import java.util.Comparator;\n-\n-import org.eclipse.jetty.util.Index;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n public class HTTP2Cipher\n {\n     public static final Comparator<String> COMPARATOR = new CipherComparator();\n \n-    private static final Index<Boolean> __blackProtocols = new Index.Builder<Boolean>()\n-        .caseSensitive(false)\n-        .with(\"TLSv1.2\", Boolean.TRUE)\n-        .with(\"TLSv1.1\", Boolean.TRUE)\n-        .with(\"TLSv1\", Boolean.TRUE)\n-        .with(\"SSL\", Boolean.TRUE)\n-        .with(\"SSLv2\", Boolean.TRUE)\n-        .with(\"SSLv3\", Boolean.TRUE)\n-        .build();\n+    private static final Set<String> __blackProtocols = Stream.of(\n+        \"TLSv1.2\",\n+        \"TLSv1.1\",\n+        \"TLSv1\",\n+        \"SSL\",\n+        \"SSLv2\",\n+        \"SSLv3\"\n+    ).map(String::toUpperCase).collect(Collectors.toSet());\n \n-    private static final Index<Boolean> __blackCiphers = new Index.Builder<Boolean>()\n-        .caseSensitive(false)\n-        .with(\"TLS_NULL_WITH_NULL_NULL\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_NULL_MD5\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_EXPORT_WITH_RC4_40_MD5\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_RC4_128_MD5\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_IDEA_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_EXPORT_WITH_DES40_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_EXPORT_WITH_RC4_40_MD5\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_RC4_128_MD5\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_IDEA_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_DES_CBC_MD5\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_3DES_EDE_CBC_MD5\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_RC4_128_MD5\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_IDEA_CBC_MD5\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_EXPORT_WITH_RC4_40_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_EXPORT_WITH_RC4_40_MD5\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_NULL_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_AES_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_AES_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_AES_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_SEED_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_SEED_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_SEED_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_SEED_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_SEED_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_SEED_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_NULL_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_NULL_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_NULL_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_NULL_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_NULL_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_NULL_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_EMPTY_RENEGOTIATION_INFO_SCSV\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_anon_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_anon_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_anon_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_anon_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_NULL_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_NULL_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_128_CCM\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_256_CCM\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_128_CCM_8\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_256_CCM_8\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_128_CCM\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_256_CCM\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_128_CCM_8\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_256_CCM_8\", Boolean.TRUE)\n-        .build();\n+    private static final Set<String> __blackCiphers = Stream.of(\n+        \"TLS_NULL_WITH_NULL_NULL\",\n+        \"TLS_RSA_WITH_NULL_MD5\",\n+        \"TLS_RSA_WITH_NULL_SHA\",\n+        \"TLS_RSA_EXPORT_WITH_RC4_40_MD5\",\n+        \"TLS_RSA_WITH_RC4_128_MD5\",\n+        \"TLS_RSA_WITH_RC4_128_SHA\",\n+        \"TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5\",\n+        \"TLS_RSA_WITH_IDEA_CBC_SHA\",\n+        \"TLS_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n+        \"TLS_RSA_WITH_DES_CBC_SHA\",\n+        \"TLS_RSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_DES_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_DES_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_DES_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_DES_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_DH_anon_EXPORT_WITH_RC4_40_MD5\",\n+        \"TLS_DH_anon_WITH_RC4_128_MD5\",\n+        \"TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_DES_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_KRB5_WITH_DES_CBC_SHA\",\n+        \"TLS_KRB5_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_KRB5_WITH_RC4_128_SHA\",\n+        \"TLS_KRB5_WITH_IDEA_CBC_SHA\",\n+        \"TLS_KRB5_WITH_DES_CBC_MD5\",\n+        \"TLS_KRB5_WITH_3DES_EDE_CBC_MD5\",\n+        \"TLS_KRB5_WITH_RC4_128_MD5\",\n+        \"TLS_KRB5_WITH_IDEA_CBC_MD5\",\n+        \"TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA\",\n+        \"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA\",\n+        \"TLS_KRB5_EXPORT_WITH_RC4_40_SHA\",\n+        \"TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5\",\n+        \"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5\",\n+        \"TLS_KRB5_EXPORT_WITH_RC4_40_MD5\",\n+        \"TLS_PSK_WITH_NULL_SHA\",\n+        \"TLS_DHE_PSK_WITH_NULL_SHA\",\n+        \"TLS_RSA_PSK_WITH_NULL_SHA\",\n+        \"TLS_RSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_AES_128_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_AES_128_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_AES_128_CBC_SHA\",\n+        \"TLS_RSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_AES_256_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_AES_256_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_AES_256_CBC_SHA\",\n+        \"TLS_RSA_WITH_NULL_SHA256\",\n+        \"TLS_RSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_RSA_WITH_AES_256_CBC_SHA256\",\n+        \"TLS_DH_DSS_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_DH_RSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_DH_DSS_WITH_AES_256_CBC_SHA256\",\n+        \"TLS_DH_RSA_WITH_AES_256_CBC_SHA256\",\n+        \"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256\",\n+        \"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256\",\n+        \"TLS_DH_anon_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_DH_anon_WITH_AES_256_CBC_SHA256\",\n+        \"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA\",\n+        \"TLS_PSK_WITH_RC4_128_SHA\",\n+        \"TLS_PSK_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_PSK_WITH_AES_128_CBC_SHA\",\n+        \"TLS_PSK_WITH_AES_256_CBC_SHA\",\n+        \"TLS_DHE_PSK_WITH_RC4_128_SHA\",\n+        \"TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_DHE_PSK_WITH_AES_128_CBC_SHA\",\n+        \"TLS_DHE_PSK_WITH_AES_256_CBC_SHA\",\n+        \"TLS_RSA_PSK_WITH_RC4_128_SHA\",\n+        \"TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_RSA_PSK_WITH_AES_128_CBC_SHA\",\n+        \"TLS_RSA_PSK_WITH_AES_256_CBC_SHA\",\n+        \"TLS_RSA_WITH_SEED_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_SEED_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_SEED_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_SEED_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_SEED_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_SEED_CBC_SHA\",\n+        \"TLS_RSA_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_DH_RSA_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_DH_RSA_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_DH_DSS_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_DH_DSS_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_DH_anon_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_DH_anon_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_PSK_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_PSK_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_RSA_PSK_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_RSA_PSK_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_PSK_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_PSK_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_PSK_WITH_NULL_SHA256\",\n+        \"TLS_PSK_WITH_NULL_SHA384\",\n+        \"TLS_DHE_PSK_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_DHE_PSK_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_DHE_PSK_WITH_NULL_SHA256\",\n+        \"TLS_DHE_PSK_WITH_NULL_SHA384\",\n+        \"TLS_RSA_PSK_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_RSA_PSK_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_RSA_PSK_WITH_NULL_SHA256\",\n+        \"TLS_RSA_PSK_WITH_NULL_SHA384\",\n+        \"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256\",\n+        \"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256\",\n+        \"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256\",\n+        \"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256\",\n+        \"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256\",\n+        \"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256\",\n+        \"TLS_EMPTY_RENEGOTIATION_INFO_SCSV\",\n+        \"TLS_ECDH_ECDSA_WITH_NULL_SHA\",\n+        \"TLS_ECDH_ECDSA_WITH_RC4_128_SHA\",\n+        \"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_ECDHE_ECDSA_WITH_NULL_SHA\",\n+        \"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\",\n+        \"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_ECDH_RSA_WITH_NULL_SHA\",\n+        \"TLS_ECDH_RSA_WITH_RC4_128_SHA\",\n+        \"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_ECDHE_RSA_WITH_NULL_SHA\",\n+        \"TLS_ECDHE_RSA_WITH_RC4_128_SHA\",\n+        \"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_ECDH_anon_WITH_NULL_SHA\",\n+        \"TLS_ECDH_anon_WITH_RC4_128_SHA\",\n+        \"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_ECDH_anon_WITH_AES_128_CBC_SHA\",\n+        \"TLS_ECDH_anon_WITH_AES_256_CBC_SHA\",\n+        \"TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_SRP_SHA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA\",\n+        \"TLS_SRP_SHA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA\",\n+        \"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_ECDHE_PSK_WITH_RC4_128_SHA\",\n+        \"TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA\",\n+        \"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA\",\n+        \"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_ECDHE_PSK_WITH_NULL_SHA\",\n+        \"TLS_ECDHE_PSK_WITH_NULL_SHA256\",\n+        \"TLS_ECDHE_PSK_WITH_NULL_SHA384\",\n+        \"TLS_RSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_RSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_DH_anon_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_DH_anon_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_RSA_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_RSA_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_DH_anon_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_DH_anon_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_PSK_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_PSK_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_PSK_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_PSK_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_RSA_WITH_AES_128_CCM\",\n+        \"TLS_RSA_WITH_AES_256_CCM\",\n+        \"TLS_RSA_WITH_AES_128_CCM_8\",\n+        \"TLS_RSA_WITH_AES_256_CCM_8\",\n+        \"TLS_PSK_WITH_AES_128_CCM\",\n+        \"TLS_PSK_WITH_AES_256_CCM\",\n+        \"TLS_PSK_WITH_AES_128_CCM_8\",\n+        \"TLS_PSK_WITH_AES_256_CCM_8\"\n+    ).map(String::toUpperCase).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b149d640eca7600ca7e878cbd5171ca6f7cb54db"}, "originalPosition": 588}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTY2NjYzOnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Cipher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo0Nzo1OFrOICQnFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo0Nzo1OFrOICQnFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MDIxMg==", "bodyText": "This uses system default locale.\nChange to tlsProtocol.toUpperCase(Locale.US).\nThis will produce undesired side effects on on some, non-US, systems.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r539240212", "createdAt": "2020-12-09T11:47:58Z", "author": {"login": "joakime"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Cipher.java", "diffHunk": "@@ -19,311 +19,310 @@\n package org.eclipse.jetty.http2;\n \n import java.util.Comparator;\n-\n-import org.eclipse.jetty.util.Index;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n public class HTTP2Cipher\n {\n     public static final Comparator<String> COMPARATOR = new CipherComparator();\n \n-    private static final Index<Boolean> __blackProtocols = new Index.Builder<Boolean>()\n-        .caseSensitive(false)\n-        .with(\"TLSv1.2\", Boolean.TRUE)\n-        .with(\"TLSv1.1\", Boolean.TRUE)\n-        .with(\"TLSv1\", Boolean.TRUE)\n-        .with(\"SSL\", Boolean.TRUE)\n-        .with(\"SSLv2\", Boolean.TRUE)\n-        .with(\"SSLv3\", Boolean.TRUE)\n-        .build();\n+    private static final Set<String> __blackProtocols = Stream.of(\n+        \"TLSv1.2\",\n+        \"TLSv1.1\",\n+        \"TLSv1\",\n+        \"SSL\",\n+        \"SSLv2\",\n+        \"SSLv3\"\n+    ).map(String::toUpperCase).collect(Collectors.toSet());\n \n-    private static final Index<Boolean> __blackCiphers = new Index.Builder<Boolean>()\n-        .caseSensitive(false)\n-        .with(\"TLS_NULL_WITH_NULL_NULL\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_NULL_MD5\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_EXPORT_WITH_RC4_40_MD5\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_RC4_128_MD5\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_IDEA_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_EXPORT_WITH_DES40_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_EXPORT_WITH_RC4_40_MD5\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_RC4_128_MD5\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_IDEA_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_DES_CBC_MD5\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_3DES_EDE_CBC_MD5\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_RC4_128_MD5\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_IDEA_CBC_MD5\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_EXPORT_WITH_RC4_40_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_EXPORT_WITH_RC4_40_MD5\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_NULL_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_AES_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_AES_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_AES_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_SEED_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_SEED_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_SEED_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_SEED_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_SEED_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_SEED_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_NULL_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_NULL_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_NULL_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_NULL_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_NULL_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_NULL_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_EMPTY_RENEGOTIATION_INFO_SCSV\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_anon_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_anon_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_anon_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_anon_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_NULL_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_NULL_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_128_CCM\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_256_CCM\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_128_CCM_8\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_256_CCM_8\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_128_CCM\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_256_CCM\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_128_CCM_8\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_256_CCM_8\", Boolean.TRUE)\n-        .build();\n+    private static final Set<String> __blackCiphers = Stream.of(\n+        \"TLS_NULL_WITH_NULL_NULL\",\n+        \"TLS_RSA_WITH_NULL_MD5\",\n+        \"TLS_RSA_WITH_NULL_SHA\",\n+        \"TLS_RSA_EXPORT_WITH_RC4_40_MD5\",\n+        \"TLS_RSA_WITH_RC4_128_MD5\",\n+        \"TLS_RSA_WITH_RC4_128_SHA\",\n+        \"TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5\",\n+        \"TLS_RSA_WITH_IDEA_CBC_SHA\",\n+        \"TLS_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n+        \"TLS_RSA_WITH_DES_CBC_SHA\",\n+        \"TLS_RSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_DES_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_DES_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_DES_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_DES_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_DH_anon_EXPORT_WITH_RC4_40_MD5\",\n+        \"TLS_DH_anon_WITH_RC4_128_MD5\",\n+        \"TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_DES_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_KRB5_WITH_DES_CBC_SHA\",\n+        \"TLS_KRB5_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_KRB5_WITH_RC4_128_SHA\",\n+        \"TLS_KRB5_WITH_IDEA_CBC_SHA\",\n+        \"TLS_KRB5_WITH_DES_CBC_MD5\",\n+        \"TLS_KRB5_WITH_3DES_EDE_CBC_MD5\",\n+        \"TLS_KRB5_WITH_RC4_128_MD5\",\n+        \"TLS_KRB5_WITH_IDEA_CBC_MD5\",\n+        \"TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA\",\n+        \"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA\",\n+        \"TLS_KRB5_EXPORT_WITH_RC4_40_SHA\",\n+        \"TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5\",\n+        \"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5\",\n+        \"TLS_KRB5_EXPORT_WITH_RC4_40_MD5\",\n+        \"TLS_PSK_WITH_NULL_SHA\",\n+        \"TLS_DHE_PSK_WITH_NULL_SHA\",\n+        \"TLS_RSA_PSK_WITH_NULL_SHA\",\n+        \"TLS_RSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_AES_128_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_AES_128_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_AES_128_CBC_SHA\",\n+        \"TLS_RSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_AES_256_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_AES_256_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_AES_256_CBC_SHA\",\n+        \"TLS_RSA_WITH_NULL_SHA256\",\n+        \"TLS_RSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_RSA_WITH_AES_256_CBC_SHA256\",\n+        \"TLS_DH_DSS_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_DH_RSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_DH_DSS_WITH_AES_256_CBC_SHA256\",\n+        \"TLS_DH_RSA_WITH_AES_256_CBC_SHA256\",\n+        \"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256\",\n+        \"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256\",\n+        \"TLS_DH_anon_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_DH_anon_WITH_AES_256_CBC_SHA256\",\n+        \"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA\",\n+        \"TLS_PSK_WITH_RC4_128_SHA\",\n+        \"TLS_PSK_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_PSK_WITH_AES_128_CBC_SHA\",\n+        \"TLS_PSK_WITH_AES_256_CBC_SHA\",\n+        \"TLS_DHE_PSK_WITH_RC4_128_SHA\",\n+        \"TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_DHE_PSK_WITH_AES_128_CBC_SHA\",\n+        \"TLS_DHE_PSK_WITH_AES_256_CBC_SHA\",\n+        \"TLS_RSA_PSK_WITH_RC4_128_SHA\",\n+        \"TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_RSA_PSK_WITH_AES_128_CBC_SHA\",\n+        \"TLS_RSA_PSK_WITH_AES_256_CBC_SHA\",\n+        \"TLS_RSA_WITH_SEED_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_SEED_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_SEED_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_SEED_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_SEED_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_SEED_CBC_SHA\",\n+        \"TLS_RSA_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_DH_RSA_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_DH_RSA_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_DH_DSS_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_DH_DSS_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_DH_anon_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_DH_anon_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_PSK_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_PSK_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_RSA_PSK_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_RSA_PSK_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_PSK_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_PSK_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_PSK_WITH_NULL_SHA256\",\n+        \"TLS_PSK_WITH_NULL_SHA384\",\n+        \"TLS_DHE_PSK_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_DHE_PSK_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_DHE_PSK_WITH_NULL_SHA256\",\n+        \"TLS_DHE_PSK_WITH_NULL_SHA384\",\n+        \"TLS_RSA_PSK_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_RSA_PSK_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_RSA_PSK_WITH_NULL_SHA256\",\n+        \"TLS_RSA_PSK_WITH_NULL_SHA384\",\n+        \"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256\",\n+        \"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256\",\n+        \"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256\",\n+        \"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256\",\n+        \"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256\",\n+        \"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256\",\n+        \"TLS_EMPTY_RENEGOTIATION_INFO_SCSV\",\n+        \"TLS_ECDH_ECDSA_WITH_NULL_SHA\",\n+        \"TLS_ECDH_ECDSA_WITH_RC4_128_SHA\",\n+        \"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_ECDHE_ECDSA_WITH_NULL_SHA\",\n+        \"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\",\n+        \"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_ECDH_RSA_WITH_NULL_SHA\",\n+        \"TLS_ECDH_RSA_WITH_RC4_128_SHA\",\n+        \"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_ECDHE_RSA_WITH_NULL_SHA\",\n+        \"TLS_ECDHE_RSA_WITH_RC4_128_SHA\",\n+        \"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_ECDH_anon_WITH_NULL_SHA\",\n+        \"TLS_ECDH_anon_WITH_RC4_128_SHA\",\n+        \"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_ECDH_anon_WITH_AES_128_CBC_SHA\",\n+        \"TLS_ECDH_anon_WITH_AES_256_CBC_SHA\",\n+        \"TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_SRP_SHA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA\",\n+        \"TLS_SRP_SHA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA\",\n+        \"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_ECDHE_PSK_WITH_RC4_128_SHA\",\n+        \"TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA\",\n+        \"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA\",\n+        \"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_ECDHE_PSK_WITH_NULL_SHA\",\n+        \"TLS_ECDHE_PSK_WITH_NULL_SHA256\",\n+        \"TLS_ECDHE_PSK_WITH_NULL_SHA384\",\n+        \"TLS_RSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_RSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_DH_anon_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_DH_anon_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_RSA_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_RSA_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_DH_anon_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_DH_anon_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_PSK_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_PSK_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_PSK_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_PSK_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_RSA_WITH_AES_128_CCM\",\n+        \"TLS_RSA_WITH_AES_256_CCM\",\n+        \"TLS_RSA_WITH_AES_128_CCM_8\",\n+        \"TLS_RSA_WITH_AES_256_CCM_8\",\n+        \"TLS_PSK_WITH_AES_128_CCM\",\n+        \"TLS_PSK_WITH_AES_256_CCM\",\n+        \"TLS_PSK_WITH_AES_128_CCM_8\",\n+        \"TLS_PSK_WITH_AES_256_CCM_8\"\n+    ).map(String::toUpperCase).collect(Collectors.toSet());\n \n     public static boolean isBlackListProtocol(String tlsProtocol)\n     {\n-        return __blackProtocols.get(tlsProtocol) != null;\n+        return __blackProtocols.contains(tlsProtocol.toUpperCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b149d640eca7600ca7e878cbd5171ca6f7cb54db"}, "originalPosition": 593}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTY2NzA1OnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Cipher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo0ODowM1rOICQnWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo0ODowM1rOICQnWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MDI4MA==", "bodyText": "This uses system default locale.\nChange to tlsProtocol.toUpperCase(Locale.US).\nThis will produce undesired side effects on on some, non-US, systems.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r539240280", "createdAt": "2020-12-09T11:48:03Z", "author": {"login": "joakime"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Cipher.java", "diffHunk": "@@ -19,311 +19,310 @@\n package org.eclipse.jetty.http2;\n \n import java.util.Comparator;\n-\n-import org.eclipse.jetty.util.Index;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n public class HTTP2Cipher\n {\n     public static final Comparator<String> COMPARATOR = new CipherComparator();\n \n-    private static final Index<Boolean> __blackProtocols = new Index.Builder<Boolean>()\n-        .caseSensitive(false)\n-        .with(\"TLSv1.2\", Boolean.TRUE)\n-        .with(\"TLSv1.1\", Boolean.TRUE)\n-        .with(\"TLSv1\", Boolean.TRUE)\n-        .with(\"SSL\", Boolean.TRUE)\n-        .with(\"SSLv2\", Boolean.TRUE)\n-        .with(\"SSLv3\", Boolean.TRUE)\n-        .build();\n+    private static final Set<String> __blackProtocols = Stream.of(\n+        \"TLSv1.2\",\n+        \"TLSv1.1\",\n+        \"TLSv1\",\n+        \"SSL\",\n+        \"SSLv2\",\n+        \"SSLv3\"\n+    ).map(String::toUpperCase).collect(Collectors.toSet());\n \n-    private static final Index<Boolean> __blackCiphers = new Index.Builder<Boolean>()\n-        .caseSensitive(false)\n-        .with(\"TLS_NULL_WITH_NULL_NULL\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_NULL_MD5\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_EXPORT_WITH_RC4_40_MD5\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_RC4_128_MD5\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_IDEA_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_EXPORT_WITH_DES40_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_EXPORT_WITH_RC4_40_MD5\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_RC4_128_MD5\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_DES_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_IDEA_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_DES_CBC_MD5\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_3DES_EDE_CBC_MD5\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_RC4_128_MD5\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_WITH_IDEA_CBC_MD5\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_EXPORT_WITH_RC4_40_SHA\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5\", Boolean.TRUE)\n-        .with(\"TLS_KRB5_EXPORT_WITH_RC4_40_MD5\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_NULL_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_AES_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_AES_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_AES_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_SEED_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_SEED_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_SEED_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_SEED_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_SEED_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_SEED_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_NULL_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_NULL_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_NULL_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_NULL_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_NULL_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_NULL_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_EMPTY_RENEGOTIATION_INFO_SCSV\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_anon_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_anon_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_anon_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_anon_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_RC4_128_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_NULL_SHA\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_NULL_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_NULL_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\", Boolean.TRUE)\n-        .with(\"TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_128_CCM\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_256_CCM\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_128_CCM_8\", Boolean.TRUE)\n-        .with(\"TLS_RSA_WITH_AES_256_CCM_8\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_128_CCM\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_256_CCM\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_128_CCM_8\", Boolean.TRUE)\n-        .with(\"TLS_PSK_WITH_AES_256_CCM_8\", Boolean.TRUE)\n-        .build();\n+    private static final Set<String> __blackCiphers = Stream.of(\n+        \"TLS_NULL_WITH_NULL_NULL\",\n+        \"TLS_RSA_WITH_NULL_MD5\",\n+        \"TLS_RSA_WITH_NULL_SHA\",\n+        \"TLS_RSA_EXPORT_WITH_RC4_40_MD5\",\n+        \"TLS_RSA_WITH_RC4_128_MD5\",\n+        \"TLS_RSA_WITH_RC4_128_SHA\",\n+        \"TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5\",\n+        \"TLS_RSA_WITH_IDEA_CBC_SHA\",\n+        \"TLS_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n+        \"TLS_RSA_WITH_DES_CBC_SHA\",\n+        \"TLS_RSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_DES_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_DES_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_DES_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_DES_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_DH_anon_EXPORT_WITH_RC4_40_MD5\",\n+        \"TLS_DH_anon_WITH_RC4_128_MD5\",\n+        \"TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_DES_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_KRB5_WITH_DES_CBC_SHA\",\n+        \"TLS_KRB5_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_KRB5_WITH_RC4_128_SHA\",\n+        \"TLS_KRB5_WITH_IDEA_CBC_SHA\",\n+        \"TLS_KRB5_WITH_DES_CBC_MD5\",\n+        \"TLS_KRB5_WITH_3DES_EDE_CBC_MD5\",\n+        \"TLS_KRB5_WITH_RC4_128_MD5\",\n+        \"TLS_KRB5_WITH_IDEA_CBC_MD5\",\n+        \"TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA\",\n+        \"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA\",\n+        \"TLS_KRB5_EXPORT_WITH_RC4_40_SHA\",\n+        \"TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5\",\n+        \"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5\",\n+        \"TLS_KRB5_EXPORT_WITH_RC4_40_MD5\",\n+        \"TLS_PSK_WITH_NULL_SHA\",\n+        \"TLS_DHE_PSK_WITH_NULL_SHA\",\n+        \"TLS_RSA_PSK_WITH_NULL_SHA\",\n+        \"TLS_RSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_AES_128_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_AES_128_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_AES_128_CBC_SHA\",\n+        \"TLS_RSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_AES_256_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_AES_256_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_AES_256_CBC_SHA\",\n+        \"TLS_RSA_WITH_NULL_SHA256\",\n+        \"TLS_RSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_RSA_WITH_AES_256_CBC_SHA256\",\n+        \"TLS_DH_DSS_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_DH_RSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_DH_DSS_WITH_AES_256_CBC_SHA256\",\n+        \"TLS_DH_RSA_WITH_AES_256_CBC_SHA256\",\n+        \"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256\",\n+        \"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256\",\n+        \"TLS_DH_anon_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_DH_anon_WITH_AES_256_CBC_SHA256\",\n+        \"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA\",\n+        \"TLS_PSK_WITH_RC4_128_SHA\",\n+        \"TLS_PSK_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_PSK_WITH_AES_128_CBC_SHA\",\n+        \"TLS_PSK_WITH_AES_256_CBC_SHA\",\n+        \"TLS_DHE_PSK_WITH_RC4_128_SHA\",\n+        \"TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_DHE_PSK_WITH_AES_128_CBC_SHA\",\n+        \"TLS_DHE_PSK_WITH_AES_256_CBC_SHA\",\n+        \"TLS_RSA_PSK_WITH_RC4_128_SHA\",\n+        \"TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_RSA_PSK_WITH_AES_128_CBC_SHA\",\n+        \"TLS_RSA_PSK_WITH_AES_256_CBC_SHA\",\n+        \"TLS_RSA_WITH_SEED_CBC_SHA\",\n+        \"TLS_DH_DSS_WITH_SEED_CBC_SHA\",\n+        \"TLS_DH_RSA_WITH_SEED_CBC_SHA\",\n+        \"TLS_DHE_DSS_WITH_SEED_CBC_SHA\",\n+        \"TLS_DHE_RSA_WITH_SEED_CBC_SHA\",\n+        \"TLS_DH_anon_WITH_SEED_CBC_SHA\",\n+        \"TLS_RSA_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_DH_RSA_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_DH_RSA_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_DH_DSS_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_DH_DSS_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_DH_anon_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_DH_anon_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_PSK_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_PSK_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_RSA_PSK_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_RSA_PSK_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_PSK_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_PSK_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_PSK_WITH_NULL_SHA256\",\n+        \"TLS_PSK_WITH_NULL_SHA384\",\n+        \"TLS_DHE_PSK_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_DHE_PSK_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_DHE_PSK_WITH_NULL_SHA256\",\n+        \"TLS_DHE_PSK_WITH_NULL_SHA384\",\n+        \"TLS_RSA_PSK_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_RSA_PSK_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_RSA_PSK_WITH_NULL_SHA256\",\n+        \"TLS_RSA_PSK_WITH_NULL_SHA384\",\n+        \"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256\",\n+        \"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256\",\n+        \"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256\",\n+        \"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256\",\n+        \"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256\",\n+        \"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256\",\n+        \"TLS_EMPTY_RENEGOTIATION_INFO_SCSV\",\n+        \"TLS_ECDH_ECDSA_WITH_NULL_SHA\",\n+        \"TLS_ECDH_ECDSA_WITH_RC4_128_SHA\",\n+        \"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_ECDHE_ECDSA_WITH_NULL_SHA\",\n+        \"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\",\n+        \"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_ECDH_RSA_WITH_NULL_SHA\",\n+        \"TLS_ECDH_RSA_WITH_RC4_128_SHA\",\n+        \"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_ECDHE_RSA_WITH_NULL_SHA\",\n+        \"TLS_ECDHE_RSA_WITH_RC4_128_SHA\",\n+        \"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_ECDH_anon_WITH_NULL_SHA\",\n+        \"TLS_ECDH_anon_WITH_RC4_128_SHA\",\n+        \"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_ECDH_anon_WITH_AES_128_CBC_SHA\",\n+        \"TLS_ECDH_anon_WITH_AES_256_CBC_SHA\",\n+        \"TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_SRP_SHA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA\",\n+        \"TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA\",\n+        \"TLS_SRP_SHA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA\",\n+        \"TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA\",\n+        \"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256\",\n+        \"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384\",\n+        \"TLS_ECDHE_PSK_WITH_RC4_128_SHA\",\n+        \"TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA\",\n+        \"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA\",\n+        \"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA\",\n+        \"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256\",\n+        \"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384\",\n+        \"TLS_ECDHE_PSK_WITH_NULL_SHA\",\n+        \"TLS_ECDHE_PSK_WITH_NULL_SHA256\",\n+        \"TLS_ECDHE_PSK_WITH_NULL_SHA384\",\n+        \"TLS_RSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_RSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_DH_anon_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_DH_anon_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_RSA_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_RSA_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_DH_anon_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_DH_anon_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_PSK_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_PSK_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_PSK_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_PSK_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256\",\n+        \"TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384\",\n+        \"TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256\",\n+        \"TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384\",\n+        \"TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256\",\n+        \"TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384\",\n+        \"TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\",\n+        \"TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\",\n+        \"TLS_RSA_WITH_AES_128_CCM\",\n+        \"TLS_RSA_WITH_AES_256_CCM\",\n+        \"TLS_RSA_WITH_AES_128_CCM_8\",\n+        \"TLS_RSA_WITH_AES_256_CCM_8\",\n+        \"TLS_PSK_WITH_AES_128_CCM\",\n+        \"TLS_PSK_WITH_AES_256_CCM\",\n+        \"TLS_PSK_WITH_AES_128_CCM_8\",\n+        \"TLS_PSK_WITH_AES_256_CCM_8\"\n+    ).map(String::toUpperCase).collect(Collectors.toSet());\n \n     public static boolean isBlackListProtocol(String tlsProtocol)\n     {\n-        return __blackProtocols.get(tlsProtocol) != null;\n+        return __blackProtocols.contains(tlsProtocol.toUpperCase());\n     }\n \n     public static boolean isBlackListCipher(String tlsCipher)\n     {\n-        return __blackCiphers.get(tlsCipher) != null;\n+        return __blackCiphers.contains(tlsCipher.toUpperCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b149d640eca7600ca7e878cbd5171ca6f7cb54db"}, "originalPosition": 599}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NjM5NDMwOnYy", "diffSide": "RIGHT", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDoyNjowNVrOICXRpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjoxMTowN1rOIDGNkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM0OTQxNQ==", "bodyText": "This call isn't needed anymore.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r539349415", "createdAt": "2020-12-09T14:26:05Z", "author": {"login": "lorban"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java", "diffHunk": "@@ -1064,18 +1063,20 @@ else if (_endOfContent == EndOfContent.CHUNKED_CONTENT)\n                 {\n                     if (_fieldCache == null)\n                     {\n+                        // TODO should we bypass the builder in this case?\n                         _fieldCache = (getHeaderCacheSize() > 0 && (_version != null && _version == HttpVersion.HTTP_1_1))\n-                            ? new Index.Builder<HttpField>()\n+                            ? new Index.Mutable.Builder<HttpField>()\n                             .caseSensitive(false)\n                             .mutable()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9efafddb4a8c1ad1f14814e116584ca99b33ec4a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwNTEyNQ==", "bodyText": "Unfortunately it is because caseInsensitvie(false) returns the wrong type of Builder.  I guess I could reorder to make that last.... or just not do the alternative constructor....", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r539405125", "createdAt": "2020-12-09T15:30:57Z", "author": {"login": "gregw"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java", "diffHunk": "@@ -1064,18 +1063,20 @@ else if (_endOfContent == EndOfContent.CHUNKED_CONTENT)\n                 {\n                     if (_fieldCache == null)\n                     {\n+                        // TODO should we bypass the builder in this case?\n                         _fieldCache = (getHeaderCacheSize() > 0 && (_version != null && _version == HttpVersion.HTTP_1_1))\n-                            ? new Index.Builder<HttpField>()\n+                            ? new Index.Mutable.Builder<HttpField>()\n                             .caseSensitive(false)\n                             .mutable()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM0OTQxNQ=="}, "originalCommit": {"oid": "9efafddb4a8c1ad1f14814e116584ca99b33ec4a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk2NTc2NA==", "bodyText": "Right... by exposing this builder's constructor you've opened a whole new range of potential maintenance problems. We have to seriously ponder if it's worth it.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r539965764", "createdAt": "2020-12-10T08:23:21Z", "author": {"login": "lorban"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java", "diffHunk": "@@ -1064,18 +1063,20 @@ else if (_endOfContent == EndOfContent.CHUNKED_CONTENT)\n                 {\n                     if (_fieldCache == null)\n                     {\n+                        // TODO should we bypass the builder in this case?\n                         _fieldCache = (getHeaderCacheSize() > 0 && (_version != null && _version == HttpVersion.HTTP_1_1))\n-                            ? new Index.Builder<HttpField>()\n+                            ? new Index.Mutable.Builder<HttpField>()\n                             .caseSensitive(false)\n                             .mutable()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM0OTQxNQ=="}, "originalCommit": {"oid": "9efafddb4a8c1ad1f14814e116584ca99b33ec4a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExODQxNw==", "bodyText": "yep - I don't like it... it is a halfway house.  If the builder is not efficient enough, we should go directly to the impl, or have a very special purpose static method builder.... let me try those approaches....", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r540118417", "createdAt": "2020-12-10T12:11:07Z", "author": {"login": "gregw"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java", "diffHunk": "@@ -1064,18 +1063,20 @@ else if (_endOfContent == EndOfContent.CHUNKED_CONTENT)\n                 {\n                     if (_fieldCache == null)\n                     {\n+                        // TODO should we bypass the builder in this case?\n                         _fieldCache = (getHeaderCacheSize() > 0 && (_version != null && _version == HttpVersion.HTTP_1_1))\n-                            ? new Index.Builder<HttpField>()\n+                            ? new Index.Mutable.Builder<HttpField>()\n                             .caseSensitive(false)\n                             .mutable()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM0OTQxNQ=="}, "originalCommit": {"oid": "9efafddb4a8c1ad1f14814e116584ca99b33ec4a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDU2MDIyOnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Cipher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODoyNzowM1rOIC9B_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTowMDoxMVrOIFGKpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk2Nzk5OA==", "bodyText": "Looking at the changes made to this class, two things pop into my mind:\n\nDo those maps need to be case-insensitive?\nAren't there other classes that make use of Index that should instead use a Map?", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r539967998", "createdAt": "2020-12-10T08:27:03Z", "author": {"login": "lorban"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Cipher.java", "diffHunk": "@@ -19,311 +19,312 @@\n package org.eclipse.jetty.http2;\n \n import java.util.Comparator;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n-import org.eclipse.jetty.util.Index;\n+import org.eclipse.jetty.util.StringUtil;\n \n public class HTTP2Cipher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9efafddb4a8c1ad1f14814e116584ca99b33ec4a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExOTQyNA==", "bodyText": "I think yes, unless we can find something that specifies that protocol and ciphernames are specific cases.\nThere are probably other uses of Index that could be a map... I will look...", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r540119424", "createdAt": "2020-12-10T12:12:48Z", "author": {"login": "gregw"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Cipher.java", "diffHunk": "@@ -19,311 +19,312 @@\n package org.eclipse.jetty.http2;\n \n import java.util.Comparator;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n-import org.eclipse.jetty.util.Index;\n+import org.eclipse.jetty.util.StringUtil;\n \n public class HTTP2Cipher", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk2Nzk5OA=="}, "originalCommit": {"oid": "9efafddb4a8c1ad1f14814e116584ca99b33ec4a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxNDgyMg==", "bodyText": "There are a couple of maybe could be changed... but nothing that shouts YES CHANGE ME NOW!.  So I'm happy as is.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r542214822", "createdAt": "2020-12-14T09:00:11Z", "author": {"login": "gregw"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Cipher.java", "diffHunk": "@@ -19,311 +19,312 @@\n package org.eclipse.jetty.http2;\n \n import java.util.Comparator;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n-import org.eclipse.jetty.util.Index;\n+import org.eclipse.jetty.util.StringUtil;\n \n public class HTTP2Cipher", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk2Nzk5OA=="}, "originalCommit": {"oid": "9efafddb4a8c1ad1f14814e116584ca99b33ec4a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTAwMDc0OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ArrayTernaryTrie.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDowMTowN1rOINrrXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzozMToyNVrOINxw3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxODAxNQ==", "bodyText": "That increment should be documented.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r551218015", "createdAt": "2021-01-04T10:01:07Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ArrayTernaryTrie.java", "diffHunk": "@@ -96,10 +97,28 @@\n      */\n     private char _rows;\n \n+    public static <V> AbstractTrie<V> from(int capacity, int maxCapacity, boolean caseSensitive, Set<Character> alphabet, Map<String, V> contents)\n+    {\n+        // Can't grow\n+        if (maxCapacity < 0)\n+            return null;\n+        if (capacity < maxCapacity)\n+            capacity = maxCapacity;\n+        capacity++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0803e81b6cce3971d7dcc7e7942895b0620a8cbc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwMjg2Mw==", "bodyText": "It's no longer needed.  Removing", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r551302863", "createdAt": "2021-01-04T12:59:45Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ArrayTernaryTrie.java", "diffHunk": "@@ -96,10 +97,28 @@\n      */\n     private char _rows;\n \n+    public static <V> AbstractTrie<V> from(int capacity, int maxCapacity, boolean caseSensitive, Set<Character> alphabet, Map<String, V> contents)\n+    {\n+        // Can't grow\n+        if (maxCapacity < 0)\n+            return null;\n+        if (capacity < maxCapacity)\n+            capacity = maxCapacity;\n+        capacity++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxODAxNQ=="}, "originalCommit": {"oid": "0803e81b6cce3971d7dcc7e7942895b0620a8cbc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMxNzcyNQ==", "bodyText": "It looks like some tests checking the exact capacity calculation might be needed...", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r551317725", "createdAt": "2021-01-04T13:31:25Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ArrayTernaryTrie.java", "diffHunk": "@@ -96,10 +97,28 @@\n      */\n     private char _rows;\n \n+    public static <V> AbstractTrie<V> from(int capacity, int maxCapacity, boolean caseSensitive, Set<Character> alphabet, Map<String, V> contents)\n+    {\n+        // Can't grow\n+        if (maxCapacity < 0)\n+            return null;\n+        if (capacity < maxCapacity)\n+            capacity = maxCapacity;\n+        capacity++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxODAxNQ=="}, "originalCommit": {"oid": "0803e81b6cce3971d7dcc7e7942895b0620a8cbc"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTAyNzI0OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDowOTowMVrOINr63A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTo0NDoxNFrOIN2ejg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyMTk4MA==", "bodyText": "Is AbstractTrie.requiredCapacity reporting the exact amount of required bytes for each and every trie implementation? Otherwise we have a problem.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r551221980", "createdAt": "2021-01-04T10:09:01Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -188,42 +269,42 @@\n                 return this;\n             }\n \n+            /**\n+             * Configure the index to be mutable.\n+             *\n+             * @return a {@link Mutable.Builder} configured like this builder.\n+             */\n+            public Mutable.Builder<V> mutable()\n+            {\n+                return this;\n+            }\n+\n             /**\n              * Build a {@link Mutable} instance.\n              * @return a {@link Mutable} instance.\n              */\n             public Mutable<V> build()\n             {\n-                if (contents != null && maxCapacity == 0)\n-                    throw new IllegalStateException(\"Cannot create a mutable index with maxCapacity=0 and some contents\");\n-\n-                // TODO we need to consider large size and alphabet when picking a trie impl\n-                Mutable<V> result;\n-                if (maxCapacity > 0)\n-                {\n-                    result = new ArrayTernaryTrie<>(!caseSensitive, maxCapacity);\n-                }\n-                else if (maxCapacity < 0)\n-                {\n-                    if (caseSensitive)\n-                        result = new ArrayTernaryTrie.Growing<>(false, 512, 512);\n-                    else\n-                        result = new TreeTrie<>();\n-                }\n-                else\n-                {\n-                    result = EmptyTrie.instance(caseSensitive);\n-                }\n-\n-                if (contents != null)\n-                {\n-                    for (Map.Entry<String, V> entry : contents.entrySet())\n-                    {\n-                        if (!result.put(entry.getKey(), entry.getValue()))\n-                            throw new AssertionError(\"Index capacity exceeded at \" + entry.getKey());\n-                    }\n-                }\n-                return result;\n+                if (maxCapacity == 0)\n+                    return EmptyTrie.instance(caseSensitive);\n+\n+                // Work out needed capacity\n+                int capacity = (contents == null) ? 0 : AbstractTrie.requiredCapacity(contents.keySet(), caseSensitive);\n+\n+                // check capacities\n+                if (maxCapacity >= 0 && capacity > maxCapacity)\n+                    throw new IllegalStateException(\"Insufficient maxCapacity for contents\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0803e81b6cce3971d7dcc7e7942895b0620a8cbc"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI5MjQ4NA==", "bodyText": "It is if we assume all our Trie implementations can handle a key of \"\".\nThe other thing to do is to just not handle a \"\" and get rid of the whole +1 logic.... but then the nature of these beasts is that they have a root and the root can store a value, so hmmmm  keeping the +1 is probably simpler.    I'll document.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r551292484", "createdAt": "2021-01-04T12:37:18Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -188,42 +269,42 @@\n                 return this;\n             }\n \n+            /**\n+             * Configure the index to be mutable.\n+             *\n+             * @return a {@link Mutable.Builder} configured like this builder.\n+             */\n+            public Mutable.Builder<V> mutable()\n+            {\n+                return this;\n+            }\n+\n             /**\n              * Build a {@link Mutable} instance.\n              * @return a {@link Mutable} instance.\n              */\n             public Mutable<V> build()\n             {\n-                if (contents != null && maxCapacity == 0)\n-                    throw new IllegalStateException(\"Cannot create a mutable index with maxCapacity=0 and some contents\");\n-\n-                // TODO we need to consider large size and alphabet when picking a trie impl\n-                Mutable<V> result;\n-                if (maxCapacity > 0)\n-                {\n-                    result = new ArrayTernaryTrie<>(!caseSensitive, maxCapacity);\n-                }\n-                else if (maxCapacity < 0)\n-                {\n-                    if (caseSensitive)\n-                        result = new ArrayTernaryTrie.Growing<>(false, 512, 512);\n-                    else\n-                        result = new TreeTrie<>();\n-                }\n-                else\n-                {\n-                    result = EmptyTrie.instance(caseSensitive);\n-                }\n-\n-                if (contents != null)\n-                {\n-                    for (Map.Entry<String, V> entry : contents.entrySet())\n-                    {\n-                        if (!result.put(entry.getKey(), entry.getValue()))\n-                            throw new AssertionError(\"Index capacity exceeded at \" + entry.getKey());\n-                    }\n-                }\n-                return result;\n+                if (maxCapacity == 0)\n+                    return EmptyTrie.instance(caseSensitive);\n+\n+                // Work out needed capacity\n+                int capacity = (contents == null) ? 0 : AbstractTrie.requiredCapacity(contents.keySet(), caseSensitive);\n+\n+                // check capacities\n+                if (maxCapacity >= 0 && capacity > maxCapacity)\n+                    throw new IllegalStateException(\"Insufficient maxCapacity for contents\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyMTk4MA=="}, "originalCommit": {"oid": "0803e81b6cce3971d7dcc7e7942895b0620a8cbc"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMxNjk2OQ==", "bodyText": "ArrayTernaryTrie needs more than just +1, see \n  \n    \n      jetty.project/jetty-util/src/main/java/org/eclipse/jetty/util/ArrayTernaryTrie.java\n    \n    \n        Lines 125 to 128\n      in\n      2662be0\n    \n    \n    \n    \n\n        \n          \n           // The calculated requiredCapacity does not take into account the \n        \n\n        \n          \n           // extra reserved slot for the empty string key, nor the slots \n        \n\n        \n          \n           // required for 'terminating' the entry (1 slot per key) so we \n        \n\n        \n          \n           // have to add those.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r551316969", "createdAt": "2021-01-04T13:30:00Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -188,42 +269,42 @@\n                 return this;\n             }\n \n+            /**\n+             * Configure the index to be mutable.\n+             *\n+             * @return a {@link Mutable.Builder} configured like this builder.\n+             */\n+            public Mutable.Builder<V> mutable()\n+            {\n+                return this;\n+            }\n+\n             /**\n              * Build a {@link Mutable} instance.\n              * @return a {@link Mutable} instance.\n              */\n             public Mutable<V> build()\n             {\n-                if (contents != null && maxCapacity == 0)\n-                    throw new IllegalStateException(\"Cannot create a mutable index with maxCapacity=0 and some contents\");\n-\n-                // TODO we need to consider large size and alphabet when picking a trie impl\n-                Mutable<V> result;\n-                if (maxCapacity > 0)\n-                {\n-                    result = new ArrayTernaryTrie<>(!caseSensitive, maxCapacity);\n-                }\n-                else if (maxCapacity < 0)\n-                {\n-                    if (caseSensitive)\n-                        result = new ArrayTernaryTrie.Growing<>(false, 512, 512);\n-                    else\n-                        result = new TreeTrie<>();\n-                }\n-                else\n-                {\n-                    result = EmptyTrie.instance(caseSensitive);\n-                }\n-\n-                if (contents != null)\n-                {\n-                    for (Map.Entry<String, V> entry : contents.entrySet())\n-                    {\n-                        if (!result.put(entry.getKey(), entry.getValue()))\n-                            throw new AssertionError(\"Index capacity exceeded at \" + entry.getKey());\n-                    }\n-                }\n-                return result;\n+                if (maxCapacity == 0)\n+                    return EmptyTrie.instance(caseSensitive);\n+\n+                // Work out needed capacity\n+                int capacity = (contents == null) ? 0 : AbstractTrie.requiredCapacity(contents.keySet(), caseSensitive);\n+\n+                // check capacities\n+                if (maxCapacity >= 0 && capacity > maxCapacity)\n+                    throw new IllegalStateException(\"Insufficient maxCapacity for contents\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyMTk4MA=="}, "originalCommit": {"oid": "0803e81b6cce3971d7dcc7e7942895b0620a8cbc"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0NzA5Mg==", "bodyText": "That comment is wrong, the +1 is enough.  Anyway, that class is deprecated and never directly called from the Index factory now.  I'll fix the comment.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r551347092", "createdAt": "2021-01-04T14:26:09Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -188,42 +269,42 @@\n                 return this;\n             }\n \n+            /**\n+             * Configure the index to be mutable.\n+             *\n+             * @return a {@link Mutable.Builder} configured like this builder.\n+             */\n+            public Mutable.Builder<V> mutable()\n+            {\n+                return this;\n+            }\n+\n             /**\n              * Build a {@link Mutable} instance.\n              * @return a {@link Mutable} instance.\n              */\n             public Mutable<V> build()\n             {\n-                if (contents != null && maxCapacity == 0)\n-                    throw new IllegalStateException(\"Cannot create a mutable index with maxCapacity=0 and some contents\");\n-\n-                // TODO we need to consider large size and alphabet when picking a trie impl\n-                Mutable<V> result;\n-                if (maxCapacity > 0)\n-                {\n-                    result = new ArrayTernaryTrie<>(!caseSensitive, maxCapacity);\n-                }\n-                else if (maxCapacity < 0)\n-                {\n-                    if (caseSensitive)\n-                        result = new ArrayTernaryTrie.Growing<>(false, 512, 512);\n-                    else\n-                        result = new TreeTrie<>();\n-                }\n-                else\n-                {\n-                    result = EmptyTrie.instance(caseSensitive);\n-                }\n-\n-                if (contents != null)\n-                {\n-                    for (Map.Entry<String, V> entry : contents.entrySet())\n-                    {\n-                        if (!result.put(entry.getKey(), entry.getValue()))\n-                            throw new AssertionError(\"Index capacity exceeded at \" + entry.getKey());\n-                    }\n-                }\n-                return result;\n+                if (maxCapacity == 0)\n+                    return EmptyTrie.instance(caseSensitive);\n+\n+                // Work out needed capacity\n+                int capacity = (contents == null) ? 0 : AbstractTrie.requiredCapacity(contents.keySet(), caseSensitive);\n+\n+                // check capacities\n+                if (maxCapacity >= 0 && capacity > maxCapacity)\n+                    throw new IllegalStateException(\"Insufficient maxCapacity for contents\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyMTk4MA=="}, "originalCommit": {"oid": "0803e81b6cce3971d7dcc7e7942895b0620a8cbc"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1MjA2OA==", "bodyText": "more javadoc improvements", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r551352068", "createdAt": "2021-01-04T14:34:33Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -188,42 +269,42 @@\n                 return this;\n             }\n \n+            /**\n+             * Configure the index to be mutable.\n+             *\n+             * @return a {@link Mutable.Builder} configured like this builder.\n+             */\n+            public Mutable.Builder<V> mutable()\n+            {\n+                return this;\n+            }\n+\n             /**\n              * Build a {@link Mutable} instance.\n              * @return a {@link Mutable} instance.\n              */\n             public Mutable<V> build()\n             {\n-                if (contents != null && maxCapacity == 0)\n-                    throw new IllegalStateException(\"Cannot create a mutable index with maxCapacity=0 and some contents\");\n-\n-                // TODO we need to consider large size and alphabet when picking a trie impl\n-                Mutable<V> result;\n-                if (maxCapacity > 0)\n-                {\n-                    result = new ArrayTernaryTrie<>(!caseSensitive, maxCapacity);\n-                }\n-                else if (maxCapacity < 0)\n-                {\n-                    if (caseSensitive)\n-                        result = new ArrayTernaryTrie.Growing<>(false, 512, 512);\n-                    else\n-                        result = new TreeTrie<>();\n-                }\n-                else\n-                {\n-                    result = EmptyTrie.instance(caseSensitive);\n-                }\n-\n-                if (contents != null)\n-                {\n-                    for (Map.Entry<String, V> entry : contents.entrySet())\n-                    {\n-                        if (!result.put(entry.getKey(), entry.getValue()))\n-                            throw new AssertionError(\"Index capacity exceeded at \" + entry.getKey());\n-                    }\n-                }\n-                return result;\n+                if (maxCapacity == 0)\n+                    return EmptyTrie.instance(caseSensitive);\n+\n+                // Work out needed capacity\n+                int capacity = (contents == null) ? 0 : AbstractTrie.requiredCapacity(contents.keySet(), caseSensitive);\n+\n+                // check capacities\n+                if (maxCapacity >= 0 && capacity > maxCapacity)\n+                    throw new IllegalStateException(\"Insufficient maxCapacity for contents\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyMTk4MA=="}, "originalCommit": {"oid": "0803e81b6cce3971d7dcc7e7942895b0620a8cbc"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM5NDk1OA==", "bodyText": "The ArrayTernaryTrie capacity calculation is really a pain, but since that implementation isn't used by the Index builders anymore, this looks good enough.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r551394958", "createdAt": "2021-01-04T15:44:14Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -188,42 +269,42 @@\n                 return this;\n             }\n \n+            /**\n+             * Configure the index to be mutable.\n+             *\n+             * @return a {@link Mutable.Builder} configured like this builder.\n+             */\n+            public Mutable.Builder<V> mutable()\n+            {\n+                return this;\n+            }\n+\n             /**\n              * Build a {@link Mutable} instance.\n              * @return a {@link Mutable} instance.\n              */\n             public Mutable<V> build()\n             {\n-                if (contents != null && maxCapacity == 0)\n-                    throw new IllegalStateException(\"Cannot create a mutable index with maxCapacity=0 and some contents\");\n-\n-                // TODO we need to consider large size and alphabet when picking a trie impl\n-                Mutable<V> result;\n-                if (maxCapacity > 0)\n-                {\n-                    result = new ArrayTernaryTrie<>(!caseSensitive, maxCapacity);\n-                }\n-                else if (maxCapacity < 0)\n-                {\n-                    if (caseSensitive)\n-                        result = new ArrayTernaryTrie.Growing<>(false, 512, 512);\n-                    else\n-                        result = new TreeTrie<>();\n-                }\n-                else\n-                {\n-                    result = EmptyTrie.instance(caseSensitive);\n-                }\n-\n-                if (contents != null)\n-                {\n-                    for (Map.Entry<String, V> entry : contents.entrySet())\n-                    {\n-                        if (!result.put(entry.getKey(), entry.getValue()))\n-                            throw new AssertionError(\"Index capacity exceeded at \" + entry.getKey());\n-                    }\n-                }\n-                return result;\n+                if (maxCapacity == 0)\n+                    return EmptyTrie.instance(caseSensitive);\n+\n+                // Work out needed capacity\n+                int capacity = (contents == null) ? 0 : AbstractTrie.requiredCapacity(contents.keySet(), caseSensitive);\n+\n+                // check capacities\n+                if (maxCapacity >= 0 && capacity > maxCapacity)\n+                    throw new IllegalStateException(\"Insufficient maxCapacity for contents\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyMTk4MA=="}, "originalCommit": {"oid": "0803e81b6cce3971d7dcc7e7942895b0620a8cbc"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTAzNDA3OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoxMTowNFrOINr-9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTozNDozNlrOIN2G8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyMzAzMQ==", "bodyText": "If maxCapacity is greater than ArrayTrie.MAX_CAPACITY you're going to return an empty trie. This breaks the principle of least surprise IMHO.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r551223031", "createdAt": "2021-01-04T10:11:04Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -251,6 +333,21 @@ public Builder()\n             this.contents = contents;\n         }\n \n+        /**\n+         * A special purpose static builder for fast creation of specific Index type\n+         * @param maxCapacity The max capacity of the index\n+         * @param <V> The type of the index\n+         * @return A case sensitive mutable Index tacking visible ASCII alphabet to a max capacity.\n+         */\n+        public static <V> Mutable<V> buildCaseSensitiveMutableVisibleAsciiAlphabet(int maxCapacity)\n+        {\n+            if (maxCapacity <= 0)\n+                return EmptyTrie.instance(true);\n+            if (maxCapacity <= ArrayTrie.MAX_CAPACITY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0803e81b6cce3971d7dcc7e7942895b0620a8cbc"}, "originalPosition": 263}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI5MzI0MA==", "bodyText": "ah yes... a TreeTrie it is then", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r551293240", "createdAt": "2021-01-04T12:38:57Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -251,6 +333,21 @@ public Builder()\n             this.contents = contents;\n         }\n \n+        /**\n+         * A special purpose static builder for fast creation of specific Index type\n+         * @param maxCapacity The max capacity of the index\n+         * @param <V> The type of the index\n+         * @return A case sensitive mutable Index tacking visible ASCII alphabet to a max capacity.\n+         */\n+        public static <V> Mutable<V> buildCaseSensitiveMutableVisibleAsciiAlphabet(int maxCapacity)\n+        {\n+            if (maxCapacity <= 0)\n+                return EmptyTrie.instance(true);\n+            if (maxCapacity <= ArrayTrie.MAX_CAPACITY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyMzAzMQ=="}, "originalCommit": {"oid": "0803e81b6cce3971d7dcc7e7942895b0620a8cbc"}, "originalPosition": 263}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMxNDczNQ==", "bodyText": "Oh, and I just remembered that a negative maxCapacity means unlimited. I think the whole method might need to be revisited.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r551314735", "createdAt": "2021-01-04T13:25:39Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -251,6 +333,21 @@ public Builder()\n             this.contents = contents;\n         }\n \n+        /**\n+         * A special purpose static builder for fast creation of specific Index type\n+         * @param maxCapacity The max capacity of the index\n+         * @param <V> The type of the index\n+         * @return A case sensitive mutable Index tacking visible ASCII alphabet to a max capacity.\n+         */\n+        public static <V> Mutable<V> buildCaseSensitiveMutableVisibleAsciiAlphabet(int maxCapacity)\n+        {\n+            if (maxCapacity <= 0)\n+                return EmptyTrie.instance(true);\n+            if (maxCapacity <= ArrayTrie.MAX_CAPACITY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyMzAzMQ=="}, "originalCommit": {"oid": "0803e81b6cce3971d7dcc7e7942895b0620a8cbc"}, "originalPosition": 263}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0NTc5MQ==", "bodyText": "revisited", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r551345791", "createdAt": "2021-01-04T14:24:00Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -251,6 +333,21 @@ public Builder()\n             this.contents = contents;\n         }\n \n+        /**\n+         * A special purpose static builder for fast creation of specific Index type\n+         * @param maxCapacity The max capacity of the index\n+         * @param <V> The type of the index\n+         * @return A case sensitive mutable Index tacking visible ASCII alphabet to a max capacity.\n+         */\n+        public static <V> Mutable<V> buildCaseSensitiveMutableVisibleAsciiAlphabet(int maxCapacity)\n+        {\n+            if (maxCapacity <= 0)\n+                return EmptyTrie.instance(true);\n+            if (maxCapacity <= ArrayTrie.MAX_CAPACITY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyMzAzMQ=="}, "originalCommit": {"oid": "0803e81b6cce3971d7dcc7e7942895b0620a8cbc"}, "originalPosition": 263}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM4ODkxNQ==", "bodyText": "Looks good now.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r551388915", "createdAt": "2021-01-04T15:34:36Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -251,6 +333,21 @@ public Builder()\n             this.contents = contents;\n         }\n \n+        /**\n+         * A special purpose static builder for fast creation of specific Index type\n+         * @param maxCapacity The max capacity of the index\n+         * @param <V> The type of the index\n+         * @return A case sensitive mutable Index tacking visible ASCII alphabet to a max capacity.\n+         */\n+        public static <V> Mutable<V> buildCaseSensitiveMutableVisibleAsciiAlphabet(int maxCapacity)\n+        {\n+            if (maxCapacity <= 0)\n+                return EmptyTrie.instance(true);\n+            if (maxCapacity <= ArrayTrie.MAX_CAPACITY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyMzAzMQ=="}, "originalCommit": {"oid": "0803e81b6cce3971d7dcc7e7942895b0620a8cbc"}, "originalPosition": 263}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTA0NDUzOnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannelOverHttp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoxNDowNlrOINsFHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDoyNDozOVrOINzf6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyNDYwNg==", "bodyText": "The parseCsvIndex method looks very specific to the HttpChannelOverHttp. It feels like it should be moved into this class.", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r551224606", "createdAt": "2021-01-04T10:14:06Z", "author": {"login": "lorban"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannelOverHttp.java", "diffHunk": "@@ -500,31 +501,24 @@ public void parsedHeader(HttpField field)\n \n                 case EXPECT:\n                 {\n-                    if (HttpVersion.HTTP_1_1.equals(_requestBuilder.version()))\n+                    if (!Index.parseCsvIndex(HttpHeaderValue.CACHE, value, t ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0803e81b6cce3971d7dcc7e7942895b0620a8cbc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0NjE1Mg==", "bodyText": "Moved and fixed multiple bugs.\nThere are some other possible usages of the method, but will do those in another PR", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r551346152", "createdAt": "2021-01-04T14:24:39Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannelOverHttp.java", "diffHunk": "@@ -500,31 +501,24 @@ public void parsedHeader(HttpField field)\n \n                 case EXPECT:\n                 {\n-                    if (HttpVersion.HTTP_1_1.equals(_requestBuilder.version()))\n+                    if (!Index.parseCsvIndex(HttpHeaderValue.CACHE, value, t ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyNDYwNg=="}, "originalCommit": {"oid": "0803e81b6cce3971d7dcc7e7942895b0620a8cbc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTA1MTAzOnYy", "diffSide": "RIGHT", "path": "tests/jetty-jmh/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoxNTo0OVrOINsIwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDoyNDo0OVrOINzgcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyNTUzOA==", "bodyText": "The version should be moved up in the root pom's dependencyManagement. But it also looks like you're not sizing objects in the benchmark you added - is that an overlook or something you don't care about?", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r551225538", "createdAt": "2021-01-04T10:15:49Z", "author": {"login": "lorban"}, "path": "tests/jetty-jmh/pom.xml", "diffHunk": "@@ -72,6 +72,11 @@\n   </build>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>org.openjdk.jol</groupId>\n+      <artifactId>jol-core</artifactId>\n+      <version>0.14</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0803e81b6cce3971d7dcc7e7942895b0620a8cbc"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0NjI4OA==", "bodyText": "it wasn't even needed", "url": "https://github.com/eclipse/jetty.project/pull/5736#discussion_r551346288", "createdAt": "2021-01-04T14:24:49Z", "author": {"login": "gregw"}, "path": "tests/jetty-jmh/pom.xml", "diffHunk": "@@ -72,6 +72,11 @@\n   </build>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>org.openjdk.jol</groupId>\n+      <artifactId>jol-core</artifactId>\n+      <version>0.14</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyNTUzOA=="}, "originalCommit": {"oid": "0803e81b6cce3971d7dcc7e7942895b0620a8cbc"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2171, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}