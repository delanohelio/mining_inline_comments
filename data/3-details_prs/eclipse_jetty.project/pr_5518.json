{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwODk5NjYy", "number": 5518, "title": "Issue #5486 PropertyFileLoginModule retains PropertyUserStores", "bodyText": "Closes #5486\nIn pursuing the original problem, which was that the PropertyFileLoginModule ignored the hotReload setting option for PropertyUserStores, I've realized there was a bigger problem, which is that the PropertyFileLoginModule was retaining instances of the PropertyUserStore in a static map and never removing them. Thus, the map would remain populated across restarts, possibly even pinning a classloader.\nThis fix ensures the the map of PropertyUserStores is retained on an instance of the JAASLoginService instead, and is cleared whenever the login service is stopped.\nA few other code cleanups along the way, and added extra tests.", "createdAt": "2020-10-27T16:48:23Z", "url": "https://github.com/eclipse/jetty.project/pull/5518", "merged": true, "mergeCommit": {"oid": "3a99c89350947fc99b97741f1a53c09f9c8a7e01"}, "closed": true, "closedAt": "2020-11-11T17:21:06Z", "author": {"login": "janbartel"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWrvAlAH2gAyNTEwODk5NjYyOmRkYTk5MWM3MTZjNjYxM2NmOWUxODcyZjg5YjdhZmMyNTlkYWQ0NzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdax8RjgFqTUyNjEwMDcwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dda991c716c6613cf9e1872f89b7afc259dad474", "author": {"user": {"login": "janbartel", "name": "Jan Bartel"}}, "url": "https://github.com/eclipse/jetty.project/commit/dda991c716c6613cf9e1872f89b7afc259dad474", "committedDate": "2020-10-27T16:40:50Z", "message": "Issue #5486 PropertyFileLoginModule retains PropertyUserStores\n\nSigned-off-by: Jan Bartel <janb@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NDA4MTcw", "url": "https://github.com/eclipse/jetty.project/pull/5518#pullrequestreview-518408170", "createdAt": "2020-10-28T08:12:57Z", "commit": {"oid": "dda991c716c6613cf9e1872f89b7afc259dad474"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoxMjo1N1rOHpePww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDoxNToyOFrOHrzZCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0OTIxOQ==", "bodyText": "There is an extra blank line here.", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r513249219", "createdAt": "2020-10-28T08:12:57Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-jaas/src/test/java/org/eclipse/jetty/jaas/spi/PropertyFileLoginModuleTest.java", "diffHunk": "@@ -19,34 +19,73 @@\n package org.eclipse.jetty.jaas.spi;\n \n import java.io.File;\n-import java.util.HashMap;\n-import javax.security.auth.Subject;\n+import java.util.Collections;\n+import javax.security.auth.login.AppConfigurationEntry;\n+import javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag;\n+import javax.security.auth.login.Configuration;\n \n-import org.eclipse.jetty.jaas.callback.DefaultCallbackHandler;\n+import org.eclipse.jetty.jaas.JAASLoginService;\n+import org.eclipse.jetty.jaas.PropertyUserStoreManager;\n+import org.eclipse.jetty.security.DefaultIdentityService;\n+import org.eclipse.jetty.security.PropertyUserStore;\n+import org.eclipse.jetty.server.Request;\n+import org.eclipse.jetty.server.UserIdentity;\n import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n import org.junit.jupiter.api.Test;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.contains;\n-import static org.hamcrest.Matchers.containsInAnyOrder;\n-import static org.hamcrest.Matchers.not;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n \n public class PropertyFileLoginModuleTest\n {\n     @Test\n-    public void testRoles()\n-        throws Exception\n+    public void testPropertyFileLoginModule() throws Exception\n     {\n-        File file = MavenTestingUtils.getTestResourceFile(\"login.properties\");\n-        PropertyFileLoginModule module = new PropertyFileLoginModule();\n-        Subject subject = new Subject();\n-        HashMap<String, String> options = new HashMap<>();\n-        options.put(\"file\", file.getCanonicalPath());\n-        module.initialize(subject, new DefaultCallbackHandler(), new HashMap<String, String>(), options);\n-        UserInfo fred = module.getUserInfo(\"fred\");\n-        assertEquals(\"fred\", fred.getUserName());\n-        assertThat(fred.getRoleNames(), containsInAnyOrder(\"role1\", \"role2\", \"role3\"));\n-        assertThat(fred.getRoleNames(), not(contains(\"fred\")));\n+        //configure for PropertyFileLoginModule\n+        File loginProperties = MavenTestingUtils.getTestResourceFile(\"login.properties\");\n+\n+        Configuration testConfig = new Configuration()\n+        {\n+            @Override\n+            public AppConfigurationEntry[] getAppConfigurationEntry(String name)\n+            { \n+                return new AppConfigurationEntry[]{new AppConfigurationEntry(PropertyFileLoginModule.class.getName(), \n+                                                                             LoginModuleControlFlag.REQUIRED,\n+                                                                             Collections.singletonMap(\"file\", loginProperties.getAbsolutePath()))};\n+            }\n+        };\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda991c716c6613cf9e1872f89b7afc259dad474"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4OTU5MA==", "bodyText": "You could use lambdas above like .map(Class::getName).forEach(classnames::add).\nAlso I think the distinct() is unnecessary, probably better off doing something like roleClassNames.stream().anyMatch(classnames::contains).", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515689590", "createdAt": "2020-11-01T23:45:55Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java", "diffHunk": "@@ -305,53 +277,47 @@ public void logout(UserIdentity user)\n      */\n     protected String[] getGroups(Subject subject)\n     {\n+        List<String> roleNameList = Arrays.asList(getRoleClassNames());\n+        \n         Collection<String> groups = new LinkedHashSet<>();\n         Set<Principal> principals = subject.getPrincipals();\n         for (Principal principal : principals)\n         {\n             Class<?> c = principal.getClass();\n-            while (c != null)\n+            boolean added = false;\n+            //check whether the type of this Principle is a role\n+            while (c != null && !added)\n             {\n-                if (roleClassNameMatches(c.getName()))\n+                if (roleClassNameMatches(c, roleNameList))\n                 {\n                     groups.add(principal.getName());\n-                    break;\n-                }\n-\n-                boolean added = false;\n-                for (Class<?> ci : c.getInterfaces())\n-                {\n-                    if (roleClassNameMatches(ci.getName()))\n-                    {\n-                        groups.add(principal.getName());\n-                        added = true;\n-                        break;\n-                    }\n-                }\n-\n-                if (!added)\n-                {\n-                    c = c.getSuperclass();\n+                    added = true;\n                 }\n                 else\n-                    break;\n+                    c = c.getSuperclass();\n             }\n         }\n \n         return groups.toArray(new String[groups.size()]);\n     }\n-\n-    private boolean roleClassNameMatches(String classname)\n+    \n+    /**\n+     * Check if a given class, or any of the interfaces that it implements is one of the role classes.\n+     * We do this comparison by classnames, without loading the role classes.\n+     * @param clazz the class and its interfaces to check\n+     * @param roleClassNames class names of the role classes\n+     * @return true if the class or one of its interfaces is one of the configured role classes\n+     */\n+    private static boolean roleClassNameMatches(Class<?> clazz, List<String> roleClassNames)\n     {\n-        boolean result = false;\n-        for (String roleClassName : getRoleClassNames())\n-        {\n-            if (roleClassName.equals(classname))\n-            {\n-                result = true;\n-                break;\n-            }\n-        }\n-        return result;\n+        if (clazz == null || roleClassNames == null)\n+            return false;\n+        //collect the names of the class and any interfaces it implements\n+        List<String> classnames = new ArrayList<>();\n+        classnames.add(clazz.getName());\n+        Arrays.stream(clazz.getInterfaces()).map(i -> i.getName()).forEach(i -> classnames.add(i));\n+        \n+        return roleClassNames.stream().filter(classnames::contains).distinct().count() > 0;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda991c716c6613cf9e1872f89b7afc259dad474"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MTM5OA==", "bodyText": "Maybe this logic of testing the class then moving to the super class should be put inside roleClassNameMatches.", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515691398", "createdAt": "2020-11-02T00:02:48Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java", "diffHunk": "@@ -305,53 +277,47 @@ public void logout(UserIdentity user)\n      */\n     protected String[] getGroups(Subject subject)\n     {\n+        List<String> roleNameList = Arrays.asList(getRoleClassNames());\n+        \n         Collection<String> groups = new LinkedHashSet<>();\n         Set<Principal> principals = subject.getPrincipals();\n         for (Principal principal : principals)\n         {\n             Class<?> c = principal.getClass();\n-            while (c != null)\n+            boolean added = false;\n+            //check whether the type of this Principle is a role\n+            while (c != null && !added)\n             {\n-                if (roleClassNameMatches(c.getName()))\n+                if (roleClassNameMatches(c, roleNameList))\n                 {\n                     groups.add(principal.getName());\n-                    break;\n-                }\n-\n-                boolean added = false;\n-                for (Class<?> ci : c.getInterfaces())\n-                {\n-                    if (roleClassNameMatches(ci.getName()))\n-                    {\n-                        groups.add(principal.getName());\n-                        added = true;\n-                        break;\n-                    }\n-                }\n-\n-                if (!added)\n-                {\n-                    c = c.getSuperclass();\n+                    added = true;\n                 }\n                 else\n-                    break;\n+                    c = c.getSuperclass();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda991c716c6613cf9e1872f89b7afc259dad474"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MjgxMA==", "bodyText": "This seems like an unusual way to share the LoginService with the LoginModule.\nWould it be better to do this with a Callback instead? similar how we would use ServletRequestCallback.", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515692810", "createdAt": "2020-11-02T00:15:28Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java", "diffHunk": "@@ -58,13 +56,14 @@\n  * Implementation of jetty's LoginService that works with JAAS for\n  * authorization and authentication.\n  */\n-public class JAASLoginService extends AbstractLifeCycle implements LoginService\n+public class JAASLoginService extends ContainerLifeCycle implements LoginService\n {\n     private static final Logger LOG = Log.getLogger(JAASLoginService.class);\n \n     public static final String DEFAULT_ROLE_CLASS_NAME = \"org.eclipse.jetty.jaas.JAASRole\";\n     public static final String[] DEFAULT_ROLE_CLASS_NAMES = {DEFAULT_ROLE_CLASS_NAME};\n-\n+    public static final ThreadLocal<JAASLoginService> INSTANCE = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda991c716c6613cf9e1872f89b7afc259dad474"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fe3390096d095c8eee3cd6e2ff1c1f12763d3e9", "author": {"user": {"login": "janbartel", "name": "Jan Bartel"}}, "url": "https://github.com/eclipse/jetty.project/commit/9fe3390096d095c8eee3cd6e2ff1c1f12763d3e9", "committedDate": "2020-11-02T09:33:16Z", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5486-propertyfileloginmodule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ad27fdec73f1ee1b23ab9bf15a31397ad39b2fe", "author": {"user": {"login": "janbartel", "name": "Jan Bartel"}}, "url": "https://github.com/eclipse/jetty.project/commit/2ad27fdec73f1ee1b23ab9bf15a31397ad39b2fe", "committedDate": "2020-11-02T10:11:13Z", "message": "Issue #5486 Changes post review\n\nSigned-off-by: Jan Bartel <janb@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNjE5ODcy", "url": "https://github.com/eclipse/jetty.project/pull/5518#pullrequestreview-521619872", "createdAt": "2020-11-02T13:19:41Z", "commit": {"oid": "2ad27fdec73f1ee1b23ab9bf15a31397ad39b2fe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MTAwNzAy", "url": "https://github.com/eclipse/jetty.project/pull/5518#pullrequestreview-526100702", "createdAt": "2020-11-09T10:10:27Z", "commit": {"oid": "2ad27fdec73f1ee1b23ab9bf15a31397ad39b2fe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4985, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}