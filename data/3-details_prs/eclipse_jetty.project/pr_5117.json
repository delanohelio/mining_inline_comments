{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyODcyOTc0", "number": 5117, "title": "Pool class refinements", "bodyText": "Some updates to the new Pool class:\n\nfixed a race with pending reservations\nuse a pending counter\nReservation API to simplify Entry API\nremoved public methods on Entry API\n\nThe pending counter is a little irksome as I didn't want to grab the lock on every enable.... see comments.", "createdAt": "2020-08-04T16:25:39Z", "url": "https://github.com/eclipse/jetty.project/pull/5117", "merged": true, "mergeCommit": {"oid": "25e3f1c1e0dd50276d12c8789f37dd916b7c2c5e"}, "closed": true, "closedAt": "2020-08-12T09:27:25Z", "author": {"login": "gregw"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7pI_4gH2gAyNDYyODcyOTc0OjE0MzZiMGMzZTJkYTQyMGNlYzlkMzg2NTA3MmQ3ZWQyNmE2MmYxODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-Gj-tgFqTQ2NTY2OTc4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1436b0c3e2da420cec9d3865072d7ed26a62f186", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/1436b0c3e2da420cec9d3865072d7ed26a62f186", "committedDate": "2020-08-04T16:23:33Z", "message": "Some updates to the new Pool class:\n\n + fixed a race with pending reservations\n + use a pending counter\n + Reservation API to simplify Entry API\n + removed public methods on Entry API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/f5a35a2eac4ce20b64ba71edcc1800a926cadde4", "committedDate": "2020-08-05T09:22:49Z", "message": "Some updates to the new Pool class:\n\n + fixed a race with pending reservations\n + use a pending counter\n + Reservation API to simplify Entry API\n + removed public methods on Entry API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNjM1NTgz", "url": "https://github.com/eclipse/jetty.project/pull/5117#pullrequestreview-461635583", "createdAt": "2020-08-05T12:56:09Z", "commit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo1NjowOVrOG8IbvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzo1NTo0N1rOG8Kysg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwNTkxNw==", "bodyText": "Nit: \"AtomicInt\" -> \"AtomicInteger\" or it would seem like we have created our own class AtomicInt.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465705917", "createdAt": "2020-08-05T12:56:09Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -128,35 +130,42 @@ public final void setMaxUsageCount(int maxUsageCount)\n     }\n \n     /**\n-     * Create a new disabled slot into the pool. The returned entry\n-     * won't be acquirable as long as {@link Entry#enable(Object)}\n-     * has not been called.\n+     * Create a new disabled slot into the pool.\n+     * The returned Reservation holds an entry that will not\n+     * be acquirable until {@link Reservation#enable(Object)} is called.\n+     * Alternately {@link Reservation#acquire(Object)} can be called to\n+     * atomically enable and acquire the entry.\n+     * If a value cannot be created for the slot, then {@link Reservation#remove()}\n+     * must be called to free the slot.\n      *\n      * @param maxReservations the max desired number of reserved entries,\n      * or a negative number to always trigger the reservation of a new entry.\n      * @return a disabled entry that is contained in the pool,\n      * or null if the pool is closed or if the pool already contains\n      * {@link #getMaxEntries()} entries.\n      */\n-    public Entry reserve(int maxReservations)\n+    public Reservation reserve(int maxReservations)\n     {\n-        if (maxReservations >= 0 && getPendingConnectionCount() >= maxReservations)\n-            return null;\n-\n-        lock.lock();\n-        try\n-        {\n-            if (!closed && sharedList.size() < maxEntries)\n-            {\n-                Entry entry = new Entry();\n-                sharedList.add(entry);\n-                return entry;\n-            }\n-            return null;\n-        }\n-        finally\n+        try (Locker.Lock l = locker.lock())\n         {\n-            lock.unlock();\n+            if (closed)\n+                return null;\n+\n+            int space = maxEntries - sharedList.size();\n+            if (space <= 0)\n+                return null;\n+\n+            // The pending count is an AtomicInt that is only ever incremented here with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxNjc1OA==", "bodyText": "This method is never used, so remove it.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465716758", "createdAt": "2020-08-05T13:13:57Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -332,29 +372,105 @@ public String toString()\n         return getClass().getSimpleName() + \" size=\" + sharedList.size() + \" closed=\" + closed + \" entries=\" + sharedList;\n     }\n \n+    /**\n+     * A Reservation of a slot in the Pool\n+     */\n+    public class Reservation\n+    {\n+        private final Entry entry = new Entry();\n+\n+        /**\n+         * @return The reserved {@link Entry}, which will be closed until enabled.\n+         */\n+        public Pool<T>.Entry getEntry()\n+        {\n+            return entry;\n+        }\n+\n+        /** Enable the reserved {@link Entry}.\n+         * Once enabled, the entry is immediately available to be acquired, potentially by\n+         * another thread.  If the caller wishes to acquire the associated entry, they should\n+         * use {@link #acquire(Object)} to atomically enable and acquire.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public void enable(T pooled)\n+        {\n+            enable(pooled, false);\n+        }\n+\n+        /** Enable and acquire the reserved {@link Entry}.\n+         * The associated entry is atomically enabled and acquired, so that no other thread can acquire it and\n+         * the {@link #getEntry()} value may be used by the caller.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public Pool<T>.Entry acquire(T pooled)\n+        {\n+            enable(pooled, true);\n+            return entry;\n+        }\n+\n+        private void enable(T pooled, boolean acquire)\n+        {\n+            Objects.requireNonNull(pooled);\n+            if (entry.state.getHi() != Integer.MIN_VALUE)\n+                throw new IllegalStateException(\"Open entries cannot be enabled : \" + this);\n+            entry.pooled = pooled;\n+            int usage = acquire ? 1 : 0;\n+            if (!entry.state.compareAndSet(Integer.MIN_VALUE, usage, 0, usage))\n+            {\n+                entry.pooled = null;\n+                throw new IllegalStateException(\"Entry cannot be enabled : \" + this);\n+            }\n+            pending.decrementAndGet();\n+        }\n+\n+        /**\n+         * Remove the reservation without enabling.\n+         */\n+        public void remove()\n+        {\n+            Pool.this.remove(entry);\n+        }\n+\n+        @Override\n+        public String toString()\n+        {\n+            return String.format(\"%s@%x{%s}\",\n+                getClass().getName(),\n+                hashCode(),\n+                entry);\n+        }\n+    }\n+\n     public class Entry\n     {\n-        // hi: positive=open/maxUsage counter,negative=closed lo: multiplexing counter\n+        // hi: positive=open/maxUsage counter; negative=closed; MIN_VALUE pending\n+        // lo: multiplexing counter\n         private final AtomicBiInteger state;\n-        private volatile T pooled;\n \n-        public Entry()\n+        // The pooled item.  This is not volatile as it is set once and then never changed.\n+        // Other threads accessing must check the state field above first, so a good before/after\n+        // relationship exists to make a memory barrier.\n+        private T pooled;\n+\n+        Entry()\n         {\n-            this.state = new AtomicBiInteger(-1, 0);\n+            this.state = new AtomicBiInteger(Integer.MIN_VALUE, 0);\n         }\n \n         public T getPooled()\n         {\n             return pooled;\n         }\n \n-        public void enable(T pooled)\n+        /**\n+         * Release the entry.\n+         * This is equivalent to calling {@link Pool#release(Pool.Entry)} passing this entry.\n+         * @return true if released.\n+         */\n+        public boolean release()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyMTU2MA==", "bodyText": "A Reservation may be concurrently removed while it's being enabled.\nThis code should be converted to the classic while (true) loop and retry in case of failures.\nFurthermore, it needs to account for the closed state (hi==-1) and not enable if it's already closed.\nWhich means enable() should return a boolean that tells whether the enabling could be done.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465721560", "createdAt": "2020-08-05T13:21:29Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -332,29 +372,105 @@ public String toString()\n         return getClass().getSimpleName() + \" size=\" + sharedList.size() + \" closed=\" + closed + \" entries=\" + sharedList;\n     }\n \n+    /**\n+     * A Reservation of a slot in the Pool\n+     */\n+    public class Reservation\n+    {\n+        private final Entry entry = new Entry();\n+\n+        /**\n+         * @return The reserved {@link Entry}, which will be closed until enabled.\n+         */\n+        public Pool<T>.Entry getEntry()\n+        {\n+            return entry;\n+        }\n+\n+        /** Enable the reserved {@link Entry}.\n+         * Once enabled, the entry is immediately available to be acquired, potentially by\n+         * another thread.  If the caller wishes to acquire the associated entry, they should\n+         * use {@link #acquire(Object)} to atomically enable and acquire.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public void enable(T pooled)\n+        {\n+            enable(pooled, false);\n+        }\n+\n+        /** Enable and acquire the reserved {@link Entry}.\n+         * The associated entry is atomically enabled and acquired, so that no other thread can acquire it and\n+         * the {@link #getEntry()} value may be used by the caller.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public Pool<T>.Entry acquire(T pooled)\n+        {\n+            enable(pooled, true);\n+            return entry;\n+        }\n+\n+        private void enable(T pooled, boolean acquire)\n+        {\n+            Objects.requireNonNull(pooled);\n+            if (entry.state.getHi() != Integer.MIN_VALUE)\n+                throw new IllegalStateException(\"Open entries cannot be enabled : \" + this);\n+            entry.pooled = pooled;\n+            int usage = acquire ? 1 : 0;\n+            if (!entry.state.compareAndSet(Integer.MIN_VALUE, usage, 0, usage))\n+            {\n+                entry.pooled = null;\n+                throw new IllegalStateException(\"Entry cannot be enabled : \" + this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNjcwOA==", "bodyText": "Use getClass().getSimpleName() here.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465726708", "createdAt": "2020-08-05T13:29:12Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -332,29 +372,105 @@ public String toString()\n         return getClass().getSimpleName() + \" size=\" + sharedList.size() + \" closed=\" + closed + \" entries=\" + sharedList;\n     }\n \n+    /**\n+     * A Reservation of a slot in the Pool\n+     */\n+    public class Reservation\n+    {\n+        private final Entry entry = new Entry();\n+\n+        /**\n+         * @return The reserved {@link Entry}, which will be closed until enabled.\n+         */\n+        public Pool<T>.Entry getEntry()\n+        {\n+            return entry;\n+        }\n+\n+        /** Enable the reserved {@link Entry}.\n+         * Once enabled, the entry is immediately available to be acquired, potentially by\n+         * another thread.  If the caller wishes to acquire the associated entry, they should\n+         * use {@link #acquire(Object)} to atomically enable and acquire.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public void enable(T pooled)\n+        {\n+            enable(pooled, false);\n+        }\n+\n+        /** Enable and acquire the reserved {@link Entry}.\n+         * The associated entry is atomically enabled and acquired, so that no other thread can acquire it and\n+         * the {@link #getEntry()} value may be used by the caller.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public Pool<T>.Entry acquire(T pooled)\n+        {\n+            enable(pooled, true);\n+            return entry;\n+        }\n+\n+        private void enable(T pooled, boolean acquire)\n+        {\n+            Objects.requireNonNull(pooled);\n+            if (entry.state.getHi() != Integer.MIN_VALUE)\n+                throw new IllegalStateException(\"Open entries cannot be enabled : \" + this);\n+            entry.pooled = pooled;\n+            int usage = acquire ? 1 : 0;\n+            if (!entry.state.compareAndSet(Integer.MIN_VALUE, usage, 0, usage))\n+            {\n+                entry.pooled = null;\n+                throw new IllegalStateException(\"Entry cannot be enabled : \" + this);\n+            }\n+            pending.decrementAndGet();\n+        }\n+\n+        /**\n+         * Remove the reservation without enabling.\n+         */\n+        public void remove()\n+        {\n+            Pool.this.remove(entry);\n+        }\n+\n+        @Override\n+        public String toString()\n+        {\n+            return String.format(\"%s@%x{%s}\",\n+                getClass().getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMzAxNw==", "bodyText": "Remove the TODO, as ConnectionPool does not work in this way: by the time we notify the future, the Connection could already be stolen by another thread.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465733017", "createdAt": "2020-08-05T13:38:55Z", "author": {"login": "sbordet"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "diffHunk": "@@ -223,8 +223,8 @@ public void succeeded(Connection connection)\n             {\n                 if (LOG.isDebugEnabled())\n                     LOG.debug(\"Connection {}/{} creation succeeded {}\", pool.size(), pool.getMaxEntries(), connection);\n-                adopt(entry, connection);\n-                future.complete(null);\n+                adopt(reservation, connection);\n+                future.complete(null);  // TODO could this now be a future that passes back the connection?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMzQ0MA==", "bodyText": "I would log the reservation here, not reservation.getEntry().", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465733440", "createdAt": "2020-08-05T13:39:34Z", "author": {"login": "sbordet"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "diffHunk": "@@ -246,16 +246,16 @@ protected void proceed()\n         requester.succeeded();\n     }\n \n-    private void adopt(Pool<Connection>.Entry entry, Connection connection)\n+    private void adopt(Pool<Connection>.Reservation reservation, Connection connection)\n     {\n         if (!(connection instanceof Attachable))\n             throw new IllegalArgumentException(\"Invalid connection object: \" + connection);\n         Attachable attachable = (Attachable)connection;\n-        attachable.setAttachment(entry);\n+        attachable.setAttachment(reservation.getEntry());\n         if (LOG.isDebugEnabled())\n-            LOG.debug(\"onCreating {}\", entry);\n+            LOG.debug(\"adopt {} {}\", reservation.getEntry(), connection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNzAyNw==", "bodyText": "There are no tests for this new method.\nFurthermore, why does it take an Entry as parameter? I think it should just be a Supplier<T> to create the object as the creator is called within the acquisition process, so the implementation does all the plumbing with the Entry.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465737027", "createdAt": "2020-08-05T13:44:45Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +224,42 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Entry, T> creator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczODIxOA==", "bodyText": "Can we use IO.close() in the loop? I think a warn() here is too much.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465738218", "createdAt": "2020-08-05T13:46:27Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -281,17 +326,12 @@ public boolean isClosed()\n     public void close()\n     {\n         List<Entry> copy;\n-        lock.lock();\n-        try\n+        try (Locker.Lock l = locker.lock())\n         {\n             closed = true;\n             copy = new ArrayList<>(sharedList);\n             sharedList.clear();\n         }\n-        finally\n-        {\n-            lock.unlock();\n-        }\n \n         // iterate the copy and close its entries\n         for (Entry entry : copy)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc0MjEzOA==", "bodyText": "I think we should call reservation.remove() and rethrow here - same semantic of Map.computeIfAbsent().", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465742138", "createdAt": "2020-08-05T13:52:18Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +224,42 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Entry, T> creator)\n+    {\n+        Entry entry = acquire();\n+        if (entry != null)\n+            return entry;\n+\n+        Reservation reservation = reserve(getMaxEntries());\n+        if (reservation == null)\n+            return null;\n+\n+        T value = null;\n+        try\n+        {\n+            value = creator.apply(reservation.getEntry());\n+        }\n+        catch (Throwable th)\n+        {\n+            LOGGER.warn(th);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc0NDU2Mg==", "bodyText": "It may be possible that the pool is closed just before the call to this method, so we should return null, which means reservation.acquire() should return a boolean.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465744562", "createdAt": "2020-08-05T13:55:47Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +224,42 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Entry, T> creator)\n+    {\n+        Entry entry = acquire();\n+        if (entry != null)\n+            return entry;\n+\n+        Reservation reservation = reserve(getMaxEntries());\n+        if (reservation == null)\n+            return null;\n+\n+        T value = null;\n+        try\n+        {\n+            value = creator.apply(reservation.getEntry());\n+        }\n+        catch (Throwable th)\n+        {\n+            LOGGER.warn(th);\n+        }\n+\n+        if (value == null)\n+        {\n+            reservation.remove();\n+            return null;\n+        }\n+\n+        return reservation.acquire(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 137}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37a9f88fb7f8104364db7856f285460b02781db8", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/37a9f88fb7f8104364db7856f285460b02781db8", "committedDate": "2020-08-05T15:17:09Z", "message": "Updates from review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be7bb00a2633de913b7014b7b511fee0094c9a15", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/be7bb00a2633de913b7014b7b511fee0094c9a15", "committedDate": "2020-08-05T16:44:54Z", "message": "Updates from review\nTests for cache size and acquire with creator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMzg3MTM0", "url": "https://github.com/eclipse/jetty.project/pull/5117#pullrequestreview-462387134", "createdAt": "2020-08-06T10:12:54Z", "commit": {"oid": "be7bb00a2633de913b7014b7b511fee0094c9a15"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMDoxMjo1NFrOG8tT3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzo0MzozNFrOG80IjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxMDExMA==", "bodyText": "I think the two way association with Attachable should be done in this method, and not be a burden of the implementer of the creator lambda.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r466310110", "createdAt": "2020-08-06T10:12:54Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +224,42 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Entry, T> creator)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNzAyNw=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxOTQ2Mw==", "bodyText": "No, this last return statement should be:\nif (reservation.acquire(value))\n  return reservation.getEntry();\nelse\n  return null;", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r466319463", "createdAt": "2020-08-06T10:31:46Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +224,42 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Entry, T> creator)\n+    {\n+        Entry entry = acquire();\n+        if (entry != null)\n+            return entry;\n+\n+        Reservation reservation = reserve(getMaxEntries());\n+        if (reservation == null)\n+            return null;\n+\n+        T value = null;\n+        try\n+        {\n+            value = creator.apply(reservation.getEntry());\n+        }\n+        catch (Throwable th)\n+        {\n+            LOGGER.warn(th);\n+        }\n+\n+        if (value == null)\n+        {\n+            reservation.remove();\n+            return null;\n+        }\n+\n+        return reservation.acquire(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc0NDU2Mg=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxOTU2OA==", "bodyText": "The problem is that if we allow multiple threads to call enable on the reservation\n\nBut we never supported that and I think it's ok - enable() has a natural race with remove() but not with itself.\nIt is possible to write the classic while (true) loop, not care about races with itself, but do care about races with remove() that are natural and should not throw.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r466419568", "createdAt": "2020-08-06T13:40:07Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -332,29 +372,105 @@ public String toString()\n         return getClass().getSimpleName() + \" size=\" + sharedList.size() + \" closed=\" + closed + \" entries=\" + sharedList;\n     }\n \n+    /**\n+     * A Reservation of a slot in the Pool\n+     */\n+    public class Reservation\n+    {\n+        private final Entry entry = new Entry();\n+\n+        /**\n+         * @return The reserved {@link Entry}, which will be closed until enabled.\n+         */\n+        public Pool<T>.Entry getEntry()\n+        {\n+            return entry;\n+        }\n+\n+        /** Enable the reserved {@link Entry}.\n+         * Once enabled, the entry is immediately available to be acquired, potentially by\n+         * another thread.  If the caller wishes to acquire the associated entry, they should\n+         * use {@link #acquire(Object)} to atomically enable and acquire.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public void enable(T pooled)\n+        {\n+            enable(pooled, false);\n+        }\n+\n+        /** Enable and acquire the reserved {@link Entry}.\n+         * The associated entry is atomically enabled and acquired, so that no other thread can acquire it and\n+         * the {@link #getEntry()} value may be used by the caller.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public Pool<T>.Entry acquire(T pooled)\n+        {\n+            enable(pooled, true);\n+            return entry;\n+        }\n+\n+        private void enable(T pooled, boolean acquire)\n+        {\n+            Objects.requireNonNull(pooled);\n+            if (entry.state.getHi() != Integer.MIN_VALUE)\n+                throw new IllegalStateException(\"Open entries cannot be enabled : \" + this);\n+            entry.pooled = pooled;\n+            int usage = acquire ? 1 : 0;\n+            if (!entry.state.compareAndSet(Integer.MIN_VALUE, usage, 0, usage))\n+            {\n+                entry.pooled = null;\n+                throw new IllegalStateException(\"Entry cannot be enabled : \" + this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyMTU2MA=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQyMTkwMQ==", "bodyText": "I'm not sure. Entry is not really an API class now that you have introduced Reservation.\nIt's an opaque mechanism that needs to be exposed, but I think it's more correct to force people to use Pool and Reservationand Attachable rather than Entry.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r466421901", "createdAt": "2020-08-06T13:43:34Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -332,29 +372,105 @@ public String toString()\n         return getClass().getSimpleName() + \" size=\" + sharedList.size() + \" closed=\" + closed + \" entries=\" + sharedList;\n     }\n \n+    /**\n+     * A Reservation of a slot in the Pool\n+     */\n+    public class Reservation\n+    {\n+        private final Entry entry = new Entry();\n+\n+        /**\n+         * @return The reserved {@link Entry}, which will be closed until enabled.\n+         */\n+        public Pool<T>.Entry getEntry()\n+        {\n+            return entry;\n+        }\n+\n+        /** Enable the reserved {@link Entry}.\n+         * Once enabled, the entry is immediately available to be acquired, potentially by\n+         * another thread.  If the caller wishes to acquire the associated entry, they should\n+         * use {@link #acquire(Object)} to atomically enable and acquire.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public void enable(T pooled)\n+        {\n+            enable(pooled, false);\n+        }\n+\n+        /** Enable and acquire the reserved {@link Entry}.\n+         * The associated entry is atomically enabled and acquired, so that no other thread can acquire it and\n+         * the {@link #getEntry()} value may be used by the caller.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public Pool<T>.Entry acquire(T pooled)\n+        {\n+            enable(pooled, true);\n+            return entry;\n+        }\n+\n+        private void enable(T pooled, boolean acquire)\n+        {\n+            Objects.requireNonNull(pooled);\n+            if (entry.state.getHi() != Integer.MIN_VALUE)\n+                throw new IllegalStateException(\"Open entries cannot be enabled : \" + this);\n+            entry.pooled = pooled;\n+            int usage = acquire ? 1 : 0;\n+            if (!entry.state.compareAndSet(Integer.MIN_VALUE, usage, 0, usage))\n+            {\n+                entry.pooled = null;\n+                throw new IllegalStateException(\"Entry cannot be enabled : \" + this);\n+            }\n+            pending.decrementAndGet();\n+        }\n+\n+        /**\n+         * Remove the reservation without enabling.\n+         */\n+        public void remove()\n+        {\n+            Pool.this.remove(entry);\n+        }\n+\n+        @Override\n+        public String toString()\n+        {\n+            return String.format(\"%s@%x{%s}\",\n+                getClass().getName(),\n+                hashCode(),\n+                entry);\n+        }\n+    }\n+\n     public class Entry\n     {\n-        // hi: positive=open/maxUsage counter,negative=closed lo: multiplexing counter\n+        // hi: positive=open/maxUsage counter; negative=closed; MIN_VALUE pending\n+        // lo: multiplexing counter\n         private final AtomicBiInteger state;\n-        private volatile T pooled;\n \n-        public Entry()\n+        // The pooled item.  This is not volatile as it is set once and then never changed.\n+        // Other threads accessing must check the state field above first, so a good before/after\n+        // relationship exists to make a memory barrier.\n+        private T pooled;\n+\n+        Entry()\n         {\n-            this.state = new AtomicBiInteger(-1, 0);\n+            this.state = new AtomicBiInteger(Integer.MIN_VALUE, 0);\n         }\n \n         public T getPooled()\n         {\n             return pooled;\n         }\n \n-        public void enable(T pooled)\n+        /**\n+         * Release the entry.\n+         * This is equivalent to calling {@link Pool#release(Pool.Entry)} passing this entry.\n+         * @return true if released.\n+         */\n+        public boolean release()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxNjc1OA=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 267}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMTA5MTM5", "url": "https://github.com/eclipse/jetty.project/pull/5117#pullrequestreview-463109139", "createdAt": "2020-08-07T07:56:09Z", "commit": {"oid": "be7bb00a2633de913b7014b7b511fee0094c9a15"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2eb669757f63098c41bdcfa34438c9afc9af22cc", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/2eb669757f63098c41bdcfa34438c9afc9af22cc", "committedDate": "2020-08-10T07:56:01Z", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-PoolCleaning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ac922b3f4b0a1fe1df0e8606ec70b22805bb5a3", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/1ac922b3f4b0a1fe1df0e8606ec70b22805bb5a3", "committedDate": "2020-08-10T08:05:27Z", "message": "Method no longer required with Reservation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/d8b28e435ac41438cb18c307f6f5257934e99c00", "committedDate": "2020-08-10T13:31:31Z", "message": "update from the feedback on the feedback of the feedback from the review.\n\nMoved enable to Entry, removed Reservation class and clarified usage in javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f32c2b8b1a96237f6f5a7cd82e569813af9ee6f", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/2f32c2b8b1a96237f6f5a7cd82e569813af9ee6f", "committedDate": "2020-08-10T15:56:14Z", "message": "Issue #5095 XmlConfiguration locking  Use pool instead of static shared instance\n\nfixed javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MzU0ODUy", "url": "https://github.com/eclipse/jetty.project/pull/5117#pullrequestreview-464354852", "createdAt": "2020-08-10T15:46:41Z", "commit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo0Njo0MlrOG-UraQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1NjoxMVrOG-VDgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwMzY4OQ==", "bodyText": "Minor nit: you probably should call reserve(-1) to make it more obvious that you do not want to be limited by the pending/disabled entries count.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r468003689", "createdAt": "2020-08-10T15:46:42Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +225,43 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Pool<T>.Entry, T> creator)\n+    {\n+        Entry entry = acquire();\n+        if (entry != null)\n+            return entry;\n+\n+        entry = reserve(getMaxEntries());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwNTgyMA==", "bodyText": "This test is useless.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r468005820", "createdAt": "2020-08-10T15:50:09Z", "author": {"login": "lorban"}, "path": "jetty-util/src/test/java/org/eclipse/jetty/util/PoolTest.java", "diffHunk": "@@ -31,16 +35,33 @@\n import static org.hamcrest.Matchers.notNullValue;\n import static org.hamcrest.Matchers.nullValue;\n import static org.hamcrest.Matchers.sameInstance;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n public class PoolTest\n {\n+    public static Stream<Object[]> cacheSize()\n+    {\n+        List<Object[]> data = new ArrayList<>();\n+        data.add(new Object[]{0});\n+        data.add(new Object[]{1});\n+        data.add(new Object[]{2});\n+        return data.stream();\n+    }\n \n-    @Test\n-    public void testAcquireRelease()\n+    @ParameterizedTest\n+    @MethodSource(value = \"cacheSize\")\n+    public void testCache(int cacheSize)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwODM0MA==", "bodyText": "Why did you remove this test?", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r468008340", "createdAt": "2020-08-10T15:53:58Z", "author": {"login": "lorban"}, "path": "jetty-util/src/test/java/org/eclipse/jetty/util/PoolTest.java", "diffHunk": "@@ -350,35 +419,14 @@ public void testMultiplexRemoveAfterAcquire()\n         assertThat(pool.size(), is(0));\n     }\n \n-    @Test\n-    public void testReleaseThenRemoveNonEnabledEntry()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00"}, "originalPosition": 433}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwODQxMg==", "bodyText": "Why did you remove this test?", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r468008412", "createdAt": "2020-08-10T15:54:04Z", "author": {"login": "lorban"}, "path": "jetty-util/src/test/java/org/eclipse/jetty/util/PoolTest.java", "diffHunk": "@@ -350,35 +419,14 @@ public void testMultiplexRemoveAfterAcquire()\n         assertThat(pool.size(), is(0));\n     }\n \n-    @Test\n-    public void testReleaseThenRemoveNonEnabledEntry()\n-    {\n-        Pool<String> pool = new Pool<>(1, 0);\n-        Pool<String>.Entry e = pool.reserve(-1);\n-        assertThat(pool.size(), is(1));\n-        assertThat(pool.release(e), is(false));\n-        assertThat(pool.size(), is(1));\n-        assertThat(pool.remove(e), is(true));\n-        assertThat(pool.size(), is(0));\n-    }\n-\n-    @Test\n-    public void testRemoveNonEnabledEntry()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00"}, "originalPosition": 445}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwOTc5MQ==", "bodyText": "I don't think the Pool.this. prefix is needed.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r468009791", "createdAt": "2020-08-10T15:56:06Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +225,43 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Pool<T>.Entry, T> creator)\n+    {\n+        Entry entry = acquire();\n+        if (entry != null)\n+            return entry;\n+\n+        entry = reserve(getMaxEntries());\n+        if (entry == null)\n+            return null;\n+\n+        T value = null;\n+        try\n+        {\n+            value = creator.apply(entry);\n+        }\n+        catch (Throwable th)\n+        {\n+            Pool.this.remove(entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwOTg1OA==", "bodyText": "I don't think the Pool.this. prefix is needed.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r468009858", "createdAt": "2020-08-10T15:56:11Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +225,43 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Pool<T>.Entry, T> creator)\n+    {\n+        Entry entry = acquire();\n+        if (entry != null)\n+            return entry;\n+\n+        entry = reserve(getMaxEntries());\n+        if (entry == null)\n+            return null;\n+\n+        T value = null;\n+        try\n+        {\n+            value = creator.apply(entry);\n+        }\n+        catch (Throwable th)\n+        {\n+            Pool.this.remove(entry);\n+            throw th;\n+        }\n+\n+        if (value == null)\n+        {\n+            Pool.this.remove(entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00"}, "originalPosition": 161}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NDA5OTUx", "url": "https://github.com/eclipse/jetty.project/pull/5117#pullrequestreview-464409951", "createdAt": "2020-08-10T16:58:12Z", "commit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNjo1ODoxMlrOG-XU2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzowMzowNFrOG-XfhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0NzA2Nw==", "bodyText": "No, you can't throw from a Callback - good that adopt() was inlined because I missed it.\nCall failed(new IllegalArgumentException()), as we need to remove the Entry, notify the CF and the requester.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r468047067", "createdAt": "2020-08-10T16:58:12Z", "author": {"login": "sbordet"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "diffHunk": "@@ -201,29 +201,30 @@ protected void tryCreate(int maxPending)\n \n     private CompletableFuture<Void> tryCreateReturningFuture(int maxPending)\n     {\n-        CompletableFuture<Void> future = new CompletableFuture<>();\n-\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"tryCreate {}/{} connections {}/{} pending\", pool.size(), pool.getMaxEntries(), getPendingConnectionCount(), maxPending);\n \n-        Pool<Connection>.Reservation reservation = pool.reserve(maxPending);\n-        if (reservation == null)\n-        {\n-            future.complete(null);\n-            return future;\n-        }\n+        Pool<Connection>.Entry entry = pool.reserve(maxPending);\n+        if (entry == null)\n+            return CompletableFuture.completedFuture(null);\n \n         if (LOG.isDebugEnabled())\n             LOG.debug(\"newConnection {}/{} connections {}/{} pending\", pool.size(), pool.getMaxEntries(), getPendingConnectionCount(), maxPending);\n \n+        CompletableFuture<Void> future = new CompletableFuture<>();\n         destination.newConnection(new Promise<Connection>()\n         {\n             @Override\n             public void succeeded(Connection connection)\n             {\n                 if (LOG.isDebugEnabled())\n                     LOG.debug(\"Connection {}/{} creation succeeded {}\", pool.size(), pool.getMaxEntries(), connection);\n-                adopt(reservation, connection);\n+                if (!(connection instanceof Attachable))\n+                    throw new IllegalArgumentException(\"Invalid connection object: \" + connection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0OTc5Ng==", "bodyText": "Typo: acquired -> acquire.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r468049796", "createdAt": "2020-08-10T17:03:04Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -417,6 +381,40 @@ public String toString()\n             this.state = new AtomicBiInteger(Integer.MIN_VALUE, 0);\n         }\n \n+        /** Enable a reserved entry {@link Entry}.\n+         * An entry returned from the {@link #reserve(int)} method must be enabled with this method,\n+         * once and only once, before it is usable by the pool.\n+         * The entry may be enabled and not acquired, in which case it is immediately available to be\n+         * acquired, potentially by another thread; or it can be enabled and acquired atomically so that\n+         * no other thread can acquired it, although the acquire may still fail if the pool has been closed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00"}, "originalPosition": 202}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1cf28639c1f32323213da348de348e11f448294", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/f1cf28639c1f32323213da348de348e11f448294", "committedDate": "2020-08-11T09:21:21Z", "message": "Issue #5095 XmlConfiguration locking  Use pool instead of static shared instance\n\nfixed javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a699783e27e767d8130b10ac8cc9e6cc536e3b7", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/0a699783e27e767d8130b10ac8cc9e6cc536e3b7", "committedDate": "2020-08-11T09:25:00Z", "message": "Issue #5095 XmlConfiguration locking  Use pool instead of static shared instance\n\nfixed javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66e988a25f470115a621ea00c544bfa5dd542492", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/66e988a25f470115a621ea00c544bfa5dd542492", "committedDate": "2020-08-11T10:23:07Z", "message": "Issue #5095 XmlConfiguration locking  Use pool instead of static shared instance\n\nupdates from review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0OTUxODU3", "url": "https://github.com/eclipse/jetty.project/pull/5117#pullrequestreview-464951857", "createdAt": "2020-08-11T10:46:56Z", "commit": {"oid": "66e988a25f470115a621ea00c544bfa5dd542492"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjY5Nzgx", "url": "https://github.com/eclipse/jetty.project/pull/5117#pullrequestreview-465669781", "createdAt": "2020-08-12T07:48:07Z", "commit": {"oid": "66e988a25f470115a621ea00c544bfa5dd542492"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4999, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}