{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5Mjk5NDYz", "number": 4997, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDowMDo1MlrOEIseOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDowMToyOFrOEIse9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTUyNjk5OnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDowMDo1MlrOGoz7kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDowMDo1MlrOGoz7kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0NzA1Ng==", "bodyText": "Much better name!  I thought TAG_PAD was some known name as it was in a TODO", "url": "https://github.com/eclipse/jetty.project/pull/4997#discussion_r445447056", "createdAt": "2020-06-25T10:00:52Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -32,7 +32,7 @@\n      * Configuration keys specific to the StdErrAppender\n      */\n     static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n-    static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    static final String MESSAGE_ALIGN_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ALIGN\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e929d0c5d13ccc04e6a596e1b1dbaa6dc626ddd0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTUyODg3OnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDowMToyOFrOGoz8wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjoyNToyMFrOHBv2XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0NzM2MQ==", "bodyText": "I'm just a little cautious that repeat might be less efficient than taking a substring of a longer string.", "url": "https://github.com/eclipse/jetty.project/pull/4997#discussion_r445447361", "createdAt": "2020-06-25T10:01:28Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -154,11 +154,15 @@ private void format(StringBuilder builder, JettyLogger logger, Level level, long\n \n         // Thread Name\n         builder.append(':');\n-        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(threadName);\n         builder.append(':');\n \n         // Message\n-        builder.append(' ');\n+        int padAmount = messageAlignColumn - builder.length();\n+        if (padAmount > 0)\n+            builder.append(\" \".repeat(padAmount));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e929d0c5d13ccc04e6a596e1b1dbaa6dc626ddd0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUxMTM3OQ==", "bodyText": "Fair enough, i'll see what the numbers show.\nI did look at the implementation of both in java.lang.String.\n\nString.substring() results in a new String object, based on \"this.value\" byte[] array, with an array copy to a new array for the new String object.\nString.repeat() results in a new String object, based on \"this.value\" byte[] array, with an array copy to a new array for the new String object.", "url": "https://github.com/eclipse/jetty.project/pull/4997#discussion_r445511379", "createdAt": "2020-06-25T12:12:42Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -154,11 +154,15 @@ private void format(StringBuilder builder, JettyLogger logger, Level level, long\n \n         // Thread Name\n         builder.append(':');\n-        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(threadName);\n         builder.append(':');\n \n         // Message\n-        builder.append(' ');\n+        int padAmount = messageAlignColumn - builder.length();\n+        if (padAmount > 0)\n+            builder.append(\" \".repeat(padAmount));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0NzM2MQ=="}, "originalCommit": {"oid": "e929d0c5d13ccc04e6a596e1b1dbaa6dc626ddd0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5MDgyNA==", "bodyText": "@gregw here's the results of the IndentBenchmark (jmh) test.\nhttps://github.com/eclipse/jetty.project/blob/jetty-10.0.x-4572-message-indent/tests/jetty-jmh/src/main/java/org/eclipse/jetty/logging/jmh/IndentBenchmark.java\nBenchmark                                                               Mode  Cnt          Score           Error   Units\nIndentBenchmark.testStringRepeatLarge                                  thrpt    7  186589212.883 \u00b1  14318698.518   ops/s\nIndentBenchmark.testStringRepeatLarge:\u00b7gc.alloc.rate                   thrpt    7       7822.988 \u00b1       601.504  MB/sec\nIndentBenchmark.testStringRepeatLarge:\u00b7gc.alloc.rate.norm              thrpt    7         88.000 \u00b1         0.001    B/op\nIndentBenchmark.testStringRepeatLarge:\u00b7gc.churn.G1_Eden_Space          thrpt    7       7854.853 \u00b1      3677.899  MB/sec\nIndentBenchmark.testStringRepeatLarge:\u00b7gc.churn.G1_Eden_Space.norm     thrpt    7         88.310 \u00b1        40.367    B/op\nIndentBenchmark.testStringRepeatLarge:\u00b7gc.count                        thrpt    7         18.000                  counts\nIndentBenchmark.testStringRepeatLarge:\u00b7gc.time                         thrpt    7         64.000                      ms\nIndentBenchmark.testStringRepeatSmall                                  thrpt    7  343002605.870 \u00b1  25715711.800   ops/s\nIndentBenchmark.testStringRepeatSmall:\u00b7gc.alloc.rate                   thrpt    7       9150.062 \u00b1       688.673  MB/sec\nIndentBenchmark.testStringRepeatSmall:\u00b7gc.alloc.rate.norm              thrpt    7         56.000 \u00b1         0.001    B/op\nIndentBenchmark.testStringRepeatSmall:\u00b7gc.churn.G1_Eden_Space          thrpt    7       9078.653 \u00b1      4249.875  MB/sec\nIndentBenchmark.testStringRepeatSmall:\u00b7gc.churn.G1_Eden_Space.norm     thrpt    7         55.546 \u00b1        25.642    B/op\nIndentBenchmark.testStringRepeatSmall:\u00b7gc.count                        thrpt    7         18.000                  counts\nIndentBenchmark.testStringRepeatSmall:\u00b7gc.time                         thrpt    7         73.000                      ms\nIndentBenchmark.testStringSubStringLarge                               thrpt    7  179315393.232 \u00b1 109455137.398   ops/s\nIndentBenchmark.testStringSubStringLarge:\u00b7gc.alloc.rate                thrpt    7       7518.461 \u00b1      4593.109  MB/sec\nIndentBenchmark.testStringSubStringLarge:\u00b7gc.alloc.rate.norm           thrpt    7         88.000 \u00b1         0.001    B/op\nIndentBenchmark.testStringSubStringLarge:\u00b7gc.churn.G1_Eden_Space       thrpt    7       7535.104 \u00b1      6436.079  MB/sec\nIndentBenchmark.testStringSubStringLarge:\u00b7gc.churn.G1_Eden_Space.norm  thrpt    7         87.144 \u00b1        46.695    B/op\nIndentBenchmark.testStringSubStringLarge:\u00b7gc.count                     thrpt    7         18.000                  counts\nIndentBenchmark.testStringSubStringLarge:\u00b7gc.time                      thrpt    7         51.000                      ms\nIndentBenchmark.testStringSubStringSmall                               thrpt    7  303492551.318 \u00b1  41265934.036   ops/s\nIndentBenchmark.testStringSubStringSmall:\u00b7gc.alloc.rate                thrpt    7       8096.412 \u00b1      1102.379  MB/sec\nIndentBenchmark.testStringSubStringSmall:\u00b7gc.alloc.rate.norm           thrpt    7         56.000 \u00b1         0.001    B/op\nIndentBenchmark.testStringSubStringSmall:\u00b7gc.churn.G1_Eden_Space       thrpt    7       8215.101 \u00b1      3847.187  MB/sec\nIndentBenchmark.testStringSubStringSmall:\u00b7gc.churn.G1_Eden_Space.norm  thrpt    7         56.618 \u00b1        22.595    B/op\nIndentBenchmark.testStringSubStringSmall:\u00b7gc.count                     thrpt    7         18.000                  counts\nIndentBenchmark.testStringSubStringSmall:\u00b7gc.time                      thrpt    7         43.000                      ms", "url": "https://github.com/eclipse/jetty.project/pull/4997#discussion_r455990824", "createdAt": "2020-07-16T18:32:50Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -154,11 +154,15 @@ private void format(StringBuilder builder, JettyLogger logger, Level level, long\n \n         // Thread Name\n         builder.append(':');\n-        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(threadName);\n         builder.append(':');\n \n         // Message\n-        builder.append(' ');\n+        int padAmount = messageAlignColumn - builder.length();\n+        if (padAmount > 0)\n+            builder.append(\" \".repeat(padAmount));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0NzM2MQ=="}, "originalCommit": {"oid": "e929d0c5d13ccc04e6a596e1b1dbaa6dc626ddd0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5NTI4Mg==", "bodyText": "When I look at the results, I see that String.repeat() is slightly faster (in terms of ops/s.  4% faster in large cases, 12% faster in the small cases).\nAnd the GC is about the same.\nBut with a higher error-bars on the substring version.", "url": "https://github.com/eclipse/jetty.project/pull/4997#discussion_r455995282", "createdAt": "2020-07-16T18:40:48Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -154,11 +154,15 @@ private void format(StringBuilder builder, JettyLogger logger, Level level, long\n \n         // Thread Name\n         builder.append(':');\n-        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(threadName);\n         builder.append(':');\n \n         // Message\n-        builder.append(' ');\n+        int padAmount = messageAlignColumn - builder.length();\n+        if (padAmount > 0)\n+            builder.append(\" \".repeat(padAmount));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0NzM2MQ=="}, "originalCommit": {"oid": "e929d0c5d13ccc04e6a596e1b1dbaa6dc626ddd0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY1MTMyOQ==", "bodyText": "@gregw bump. could use a review of the benchmark results here.", "url": "https://github.com/eclipse/jetty.project/pull/4997#discussion_r470651329", "createdAt": "2020-08-14T14:17:27Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -154,11 +154,15 @@ private void format(StringBuilder builder, JettyLogger logger, Level level, long\n \n         // Thread Name\n         builder.append(':');\n-        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(threadName);\n         builder.append(':');\n \n         // Message\n-        builder.append(' ');\n+        int padAmount = messageAlignColumn - builder.length();\n+        if (padAmount > 0)\n+            builder.append(\" \".repeat(padAmount));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0NzM2MQ=="}, "originalCommit": {"oid": "e929d0c5d13ccc04e6a596e1b1dbaa6dc626ddd0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5NDU4OQ==", "bodyText": "repeat LGTM.    I think there may be other places we can do the same.... but another PR.", "url": "https://github.com/eclipse/jetty.project/pull/4997#discussion_r471594589", "createdAt": "2020-08-17T16:25:20Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -154,11 +154,15 @@ private void format(StringBuilder builder, JettyLogger logger, Level level, long\n \n         // Thread Name\n         builder.append(':');\n-        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(threadName);\n         builder.append(':');\n \n         // Message\n-        builder.append(' ');\n+        int padAmount = messageAlignColumn - builder.length();\n+        if (padAmount > 0)\n+            builder.append(\" \".repeat(padAmount));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0NzM2MQ=="}, "originalCommit": {"oid": "e929d0c5d13ccc04e6a596e1b1dbaa6dc626ddd0"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2397, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}