{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxODkyMDU2", "number": 4553, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoxOTo1MFrODd8XMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwODo1MDo1NVrODhcChA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI0Mjc1OnYy", "diffSide": "RIGHT", "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoxOTo1MFrOFm1Rsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoxOTo1MFrOFm1Rsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2MzA5MQ==", "bodyText": "Unused label?", "url": "https://github.com/eclipse/jetty.project/pull/4553#discussion_r376263091", "createdAt": "2020-02-07T08:19:50Z", "author": {"login": "sbordet"}, "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "diffHunk": "@@ -1061,80 +991,19 @@ private Object newObj(Object obj, XmlParser.Node node) throws Exception\n             return nobj;\n         }\n \n-        private Object construct(Class<?> klass, Object[] arguments, Map<String, Object> namedArgMap) throws InvocationTargetException, NoSuchMethodException\n+        private Object construct(Class<?> klass, NamedArgs args) throws InvocationTargetException, NoSuchMethodException\n         {\n             Objects.requireNonNull(klass, \"Class cannot be null\");\n-            Objects.requireNonNull(namedArgMap, \"Named Argument Map cannot be null\");\n+            Objects.requireNonNull(args, \"Named list cannot be null\");\n \n+            constructors:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8d405b83f0b690e4a703c5c1ffefc9ce062026"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI0MzY1OnYy", "diffSide": "RIGHT", "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyMDoxOFrOFm1SUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyMDoxOFrOFm1SUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2MzI0OQ==", "bodyText": "Unnecessary cast.", "url": "https://github.com/eclipse/jetty.project/pull/4553#discussion_r376263249", "createdAt": "2020-02-07T08:20:18Z", "author": {"login": "sbordet"}, "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "diffHunk": "@@ -1777,40 +1646,168 @@ public Object get(String elementName, boolean mandatory) throws Exception\n \n             public List<XmlParser.Node> getNodes(String elementName)\n             {\n-                String attrName = StringUtil.asciiToLowerCase(elementName);\n-                final List<XmlParser.Node> values = new ArrayList<>();\n+                return XmlConfiguration.getNodes(_node, elementName);\n+            }\n+        }\n \n-                String attr = _node.getAttribute(attrName);\n-                if (attr != null)\n+        private class NamedArgs\n+        {\n+            final Class<?> _class;\n+            final List<Object> _arguments;\n+            final List<String> _names;\n+\n+            NamedArgs(Object obj, Class<?> oClass, List<XmlParser.Node> args) throws Exception\n+            {\n+                _class = oClass;\n+                _arguments = new ArrayList<>();\n+                _names = new ArrayList<>();\n+                for (XmlParser.Node child : args)\n+                {\n+                    _arguments.add(value(obj, child));\n+                    _names.add(child.getAttribute(\"name\"));\n+                }\n+            }\n+\n+            private NamedArgs(List<Object> arguments, List<String> names)\n+            {\n+                _class = null;\n+                _arguments = arguments;\n+                _names = names;\n+            }\n+\n+            Object[] applyTo(Executable executable)\n+            {\n+                Object[] args = matchArgsToParameters(executable);\n+                if (args == null && _class != null)\n                 {\n-                    for (String a : StringUtil.csvSplit(null, attr, 0, attr.length()))\n+                    // Could this be an empty varargs match?\n+                    int count = executable.getParameterCount();\n+                    if (count > 0 && executable.getParameterTypes()[count - 1].isArray())\n                     {\n-                        // create a fake node\n-                        XmlParser.Node n = new XmlParser.Node(null, elementName, null);\n-                        n.add(a);\n-                        values.add(n);\n+                        try\n+                        {\n+                            // Does a non varargs method exist?\n+                            Class<?>[] types = Arrays.copyOf(executable.getParameterTypes(), count - 1);\n+                            if (executable instanceof Constructor)\n+                                _class.getConstructor(types);\n+                            else\n+                                _class.getMethod(((Method)executable).getName(), types);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8d405b83f0b690e4a703c5c1ffefc9ce062026"}, "originalPosition": 323}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI0NzEwOnYy", "diffSide": "RIGHT", "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyMTozMlrOFm1UMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyMTozMlrOFm1UMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2MzcyOQ==", "bodyText": "This branch does not appear to be covered by tests, needs a varargs constructor.", "url": "https://github.com/eclipse/jetty.project/pull/4553#discussion_r376263729", "createdAt": "2020-02-07T08:21:32Z", "author": {"login": "sbordet"}, "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "diffHunk": "@@ -1777,40 +1646,168 @@ public Object get(String elementName, boolean mandatory) throws Exception\n \n             public List<XmlParser.Node> getNodes(String elementName)\n             {\n-                String attrName = StringUtil.asciiToLowerCase(elementName);\n-                final List<XmlParser.Node> values = new ArrayList<>();\n+                return XmlConfiguration.getNodes(_node, elementName);\n+            }\n+        }\n \n-                String attr = _node.getAttribute(attrName);\n-                if (attr != null)\n+        private class NamedArgs\n+        {\n+            final Class<?> _class;\n+            final List<Object> _arguments;\n+            final List<String> _names;\n+\n+            NamedArgs(Object obj, Class<?> oClass, List<XmlParser.Node> args) throws Exception\n+            {\n+                _class = oClass;\n+                _arguments = new ArrayList<>();\n+                _names = new ArrayList<>();\n+                for (XmlParser.Node child : args)\n+                {\n+                    _arguments.add(value(obj, child));\n+                    _names.add(child.getAttribute(\"name\"));\n+                }\n+            }\n+\n+            private NamedArgs(List<Object> arguments, List<String> names)\n+            {\n+                _class = null;\n+                _arguments = arguments;\n+                _names = names;\n+            }\n+\n+            Object[] applyTo(Executable executable)\n+            {\n+                Object[] args = matchArgsToParameters(executable);\n+                if (args == null && _class != null)\n                 {\n-                    for (String a : StringUtil.csvSplit(null, attr, 0, attr.length()))\n+                    // Could this be an empty varargs match?\n+                    int count = executable.getParameterCount();\n+                    if (count > 0 && executable.getParameterTypes()[count - 1].isArray())\n                     {\n-                        // create a fake node\n-                        XmlParser.Node n = new XmlParser.Node(null, elementName, null);\n-                        n.add(a);\n-                        values.add(n);\n+                        try\n+                        {\n+                            // Does a non varargs method exist?\n+                            Class<?>[] types = Arrays.copyOf(executable.getParameterTypes(), count - 1);\n+                            if (executable instanceof Constructor)\n+                                _class.getConstructor(types);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8d405b83f0b690e4a703c5c1ffefc9ce062026"}, "originalPosition": 321}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI3NzkwOnYy", "diffSide": "RIGHT", "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODozNDo1OVrOFm1nPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxODozNDo1NFrOFry0Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2ODYwNQ==", "bodyText": "IIUC, the logic of this try block is that if a varargs member is probed before a non-varargs member, we want to skip the varargs one to match the non-varargs one.\nI think it's way better to sort the members putting varargs methods last, and among varargs those with less parameters last.\nIn this way, we are guaranteed that precise match always comes before varargs match and we don't need this block. Thoughts?", "url": "https://github.com/eclipse/jetty.project/pull/4553#discussion_r376268605", "createdAt": "2020-02-07T08:34:59Z", "author": {"login": "sbordet"}, "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "diffHunk": "@@ -1777,40 +1646,168 @@ public Object get(String elementName, boolean mandatory) throws Exception\n \n             public List<XmlParser.Node> getNodes(String elementName)\n             {\n-                String attrName = StringUtil.asciiToLowerCase(elementName);\n-                final List<XmlParser.Node> values = new ArrayList<>();\n+                return XmlConfiguration.getNodes(_node, elementName);\n+            }\n+        }\n \n-                String attr = _node.getAttribute(attrName);\n-                if (attr != null)\n+        private class NamedArgs\n+        {\n+            final Class<?> _class;\n+            final List<Object> _arguments;\n+            final List<String> _names;\n+\n+            NamedArgs(Object obj, Class<?> oClass, List<XmlParser.Node> args) throws Exception\n+            {\n+                _class = oClass;\n+                _arguments = new ArrayList<>();\n+                _names = new ArrayList<>();\n+                for (XmlParser.Node child : args)\n+                {\n+                    _arguments.add(value(obj, child));\n+                    _names.add(child.getAttribute(\"name\"));\n+                }\n+            }\n+\n+            private NamedArgs(List<Object> arguments, List<String> names)\n+            {\n+                _class = null;\n+                _arguments = arguments;\n+                _names = names;\n+            }\n+\n+            Object[] applyTo(Executable executable)\n+            {\n+                Object[] args = matchArgsToParameters(executable);\n+                if (args == null && _class != null)\n                 {\n-                    for (String a : StringUtil.csvSplit(null, attr, 0, attr.length()))\n+                    // Could this be an empty varargs match?\n+                    int count = executable.getParameterCount();\n+                    if (count > 0 && executable.getParameterTypes()[count - 1].isArray())\n                     {\n-                        // create a fake node\n-                        XmlParser.Node n = new XmlParser.Node(null, elementName, null);\n-                        n.add(a);\n-                        values.add(n);\n+                        try\n+                        {\n+                            // Does a non varargs method exist?\n+                            Class<?>[] types = Arrays.copyOf(executable.getParameterTypes(), count - 1);\n+                            if (executable instanceof Constructor)\n+                                _class.getConstructor(types);\n+                            else\n+                                _class.getMethod(((Method)executable).getName(), types);\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8d405b83f0b690e4a703c5c1ffefc9ce062026"}, "originalPosition": 324}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ2NTY3NQ==", "bodyText": "I think I have implemented it... feels a little fragile that applyTo depends on it's calling order, but OK", "url": "https://github.com/eclipse/jetty.project/pull/4553#discussion_r381465675", "createdAt": "2020-02-19T18:34:54Z", "author": {"login": "gregw"}, "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "diffHunk": "@@ -1777,40 +1646,168 @@ public Object get(String elementName, boolean mandatory) throws Exception\n \n             public List<XmlParser.Node> getNodes(String elementName)\n             {\n-                String attrName = StringUtil.asciiToLowerCase(elementName);\n-                final List<XmlParser.Node> values = new ArrayList<>();\n+                return XmlConfiguration.getNodes(_node, elementName);\n+            }\n+        }\n \n-                String attr = _node.getAttribute(attrName);\n-                if (attr != null)\n+        private class NamedArgs\n+        {\n+            final Class<?> _class;\n+            final List<Object> _arguments;\n+            final List<String> _names;\n+\n+            NamedArgs(Object obj, Class<?> oClass, List<XmlParser.Node> args) throws Exception\n+            {\n+                _class = oClass;\n+                _arguments = new ArrayList<>();\n+                _names = new ArrayList<>();\n+                for (XmlParser.Node child : args)\n+                {\n+                    _arguments.add(value(obj, child));\n+                    _names.add(child.getAttribute(\"name\"));\n+                }\n+            }\n+\n+            private NamedArgs(List<Object> arguments, List<String> names)\n+            {\n+                _class = null;\n+                _arguments = arguments;\n+                _names = names;\n+            }\n+\n+            Object[] applyTo(Executable executable)\n+            {\n+                Object[] args = matchArgsToParameters(executable);\n+                if (args == null && _class != null)\n                 {\n-                    for (String a : StringUtil.csvSplit(null, attr, 0, attr.length()))\n+                    // Could this be an empty varargs match?\n+                    int count = executable.getParameterCount();\n+                    if (count > 0 && executable.getParameterTypes()[count - 1].isArray())\n                     {\n-                        // create a fake node\n-                        XmlParser.Node n = new XmlParser.Node(null, elementName, null);\n-                        n.add(a);\n-                        values.add(n);\n+                        try\n+                        {\n+                            // Does a non varargs method exist?\n+                            Class<?>[] types = Arrays.copyOf(executable.getParameterTypes(), count - 1);\n+                            if (executable instanceof Constructor)\n+                                _class.getConstructor(types);\n+                            else\n+                                _class.getMethod(((Method)executable).getName(), types);\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2ODYwNQ=="}, "originalCommit": {"oid": "2c8d405b83f0b690e4a703c5c1ffefc9ce062026"}, "originalPosition": 324}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI4MjczOnYy", "diffSide": "RIGHT", "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODozNzoxMFrOFm1qYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODozNzoxMFrOFm1qYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2OTQxMA==", "bodyText": "The comment is slightly confusing, since it's not a null varArgs match, it's an empty varArgs match. Indeed the method asEmptyVarArgs() is named correctly and does correctly return an empty array.", "url": "https://github.com/eclipse/jetty.project/pull/4553#discussion_r376269410", "createdAt": "2020-02-07T08:37:10Z", "author": {"login": "sbordet"}, "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "diffHunk": "@@ -1777,40 +1646,168 @@ public Object get(String elementName, boolean mandatory) throws Exception\n \n             public List<XmlParser.Node> getNodes(String elementName)\n             {\n-                String attrName = StringUtil.asciiToLowerCase(elementName);\n-                final List<XmlParser.Node> values = new ArrayList<>();\n+                return XmlConfiguration.getNodes(_node, elementName);\n+            }\n+        }\n \n-                String attr = _node.getAttribute(attrName);\n-                if (attr != null)\n+        private class NamedArgs\n+        {\n+            final Class<?> _class;\n+            final List<Object> _arguments;\n+            final List<String> _names;\n+\n+            NamedArgs(Object obj, Class<?> oClass, List<XmlParser.Node> args) throws Exception\n+            {\n+                _class = oClass;\n+                _arguments = new ArrayList<>();\n+                _names = new ArrayList<>();\n+                for (XmlParser.Node child : args)\n+                {\n+                    _arguments.add(value(obj, child));\n+                    _names.add(child.getAttribute(\"name\"));\n+                }\n+            }\n+\n+            private NamedArgs(List<Object> arguments, List<String> names)\n+            {\n+                _class = null;\n+                _arguments = arguments;\n+                _names = names;\n+            }\n+\n+            Object[] applyTo(Executable executable)\n+            {\n+                Object[] args = matchArgsToParameters(executable);\n+                if (args == null && _class != null)\n                 {\n-                    for (String a : StringUtil.csvSplit(null, attr, 0, attr.length()))\n+                    // Could this be an empty varargs match?\n+                    int count = executable.getParameterCount();\n+                    if (count > 0 && executable.getParameterTypes()[count - 1].isArray())\n                     {\n-                        // create a fake node\n-                        XmlParser.Node n = new XmlParser.Node(null, elementName, null);\n-                        n.add(a);\n-                        values.add(n);\n+                        try\n+                        {\n+                            // Does a non varargs method exist?\n+                            Class<?>[] types = Arrays.copyOf(executable.getParameterTypes(), count - 1);\n+                            if (executable instanceof Constructor)\n+                                _class.getConstructor(types);\n+                            else\n+                                _class.getMethod(((Method)executable).getName(), types);\n+                        }\n+                        catch (NoSuchMethodException e)\n+                        {\n+                            // There is not a no varArgs alternative so let's try a null varArgs match", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8d405b83f0b690e4a703c5c1ffefc9ce062026"}, "originalPosition": 327}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzMyMTM3OnYy", "diffSide": "RIGHT", "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODo1MToxMlrOFm2BVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxODowNDo1OFrOFrxzrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3NTI4Ng==", "bodyText": "Make fields private.", "url": "https://github.com/eclipse/jetty.project/pull/4553#discussion_r376275286", "createdAt": "2020-02-07T08:51:12Z", "author": {"login": "sbordet"}, "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "diffHunk": "@@ -1777,40 +1646,168 @@ public Object get(String elementName, boolean mandatory) throws Exception\n \n             public List<XmlParser.Node> getNodes(String elementName)\n             {\n-                String attrName = StringUtil.asciiToLowerCase(elementName);\n-                final List<XmlParser.Node> values = new ArrayList<>();\n+                return XmlConfiguration.getNodes(_node, elementName);\n+            }\n+        }\n \n-                String attr = _node.getAttribute(attrName);\n-                if (attr != null)\n+        private class NamedArgs\n+        {\n+            final Class<?> _class;\n+            final List<Object> _arguments;\n+            final List<String> _names;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8d405b83f0b690e4a703c5c1ffefc9ce062026"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ0OTEzNA==", "bodyText": "sure... but you do know that package scope fields of a private inner class are already really private :)", "url": "https://github.com/eclipse/jetty.project/pull/4553#discussion_r381449134", "createdAt": "2020-02-19T18:04:58Z", "author": {"login": "gregw"}, "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "diffHunk": "@@ -1777,40 +1646,168 @@ public Object get(String elementName, boolean mandatory) throws Exception\n \n             public List<XmlParser.Node> getNodes(String elementName)\n             {\n-                String attrName = StringUtil.asciiToLowerCase(elementName);\n-                final List<XmlParser.Node> values = new ArrayList<>();\n+                return XmlConfiguration.getNodes(_node, elementName);\n+            }\n+        }\n \n-                String attr = _node.getAttribute(attrName);\n-                if (attr != null)\n+        private class NamedArgs\n+        {\n+            final Class<?> _class;\n+            final List<Object> _arguments;\n+            final List<String> _names;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3NTI4Ng=="}, "originalCommit": {"oid": "2c8d405b83f0b690e4a703c5c1ffefc9ce062026"}, "originalPosition": 281}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzMyMzQ0OnYy", "diffSide": "RIGHT", "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODo1MjowM1rOFm2Clw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODo1MjowM1rOFm2Clw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3NTYwNw==", "bodyText": "Since all other constructors/methods are package private, either make them all private, or all package private.", "url": "https://github.com/eclipse/jetty.project/pull/4553#discussion_r376275607", "createdAt": "2020-02-07T08:52:03Z", "author": {"login": "sbordet"}, "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "diffHunk": "@@ -1777,40 +1646,168 @@ public Object get(String elementName, boolean mandatory) throws Exception\n \n             public List<XmlParser.Node> getNodes(String elementName)\n             {\n-                String attrName = StringUtil.asciiToLowerCase(elementName);\n-                final List<XmlParser.Node> values = new ArrayList<>();\n+                return XmlConfiguration.getNodes(_node, elementName);\n+            }\n+        }\n \n-                String attr = _node.getAttribute(attrName);\n-                if (attr != null)\n+        private class NamedArgs\n+        {\n+            final Class<?> _class;\n+            final List<Object> _arguments;\n+            final List<String> _names;\n+\n+            NamedArgs(Object obj, Class<?> oClass, List<XmlParser.Node> args) throws Exception\n+            {\n+                _class = oClass;\n+                _arguments = new ArrayList<>();\n+                _names = new ArrayList<>();\n+                for (XmlParser.Node child : args)\n+                {\n+                    _arguments.add(value(obj, child));\n+                    _names.add(child.getAttribute(\"name\"));\n+                }\n+            }\n+\n+            private NamedArgs(List<Object> arguments, List<String> names)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8d405b83f0b690e4a703c5c1ffefc9ce062026"}, "originalPosition": 295}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzM4NTU3OnYy", "diffSide": "RIGHT", "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOToxNDoxNFrOFm2ovg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxODoxMTo0NFrOFryBug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4NTM3NA==", "bodyText": "This does not cover the case of executable(String first, String... others) with args=[\"one\", \"two\", \"three\"], where count==2 but _arguments.size()==3.\nNot sure it was covered before, but while we are at it...", "url": "https://github.com/eclipse/jetty.project/pull/4553#discussion_r376285374", "createdAt": "2020-02-07T09:14:14Z", "author": {"login": "sbordet"}, "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "diffHunk": "@@ -1777,40 +1646,168 @@ public Object get(String elementName, boolean mandatory) throws Exception\n \n             public List<XmlParser.Node> getNodes(String elementName)\n             {\n-                String attrName = StringUtil.asciiToLowerCase(elementName);\n-                final List<XmlParser.Node> values = new ArrayList<>();\n+                return XmlConfiguration.getNodes(_node, elementName);\n+            }\n+        }\n \n-                String attr = _node.getAttribute(attrName);\n-                if (attr != null)\n+        private class NamedArgs\n+        {\n+            final Class<?> _class;\n+            final List<Object> _arguments;\n+            final List<String> _names;\n+\n+            NamedArgs(Object obj, Class<?> oClass, List<XmlParser.Node> args) throws Exception\n+            {\n+                _class = oClass;\n+                _arguments = new ArrayList<>();\n+                _names = new ArrayList<>();\n+                for (XmlParser.Node child : args)\n+                {\n+                    _arguments.add(value(obj, child));\n+                    _names.add(child.getAttribute(\"name\"));\n+                }\n+            }\n+\n+            private NamedArgs(List<Object> arguments, List<String> names)\n+            {\n+                _class = null;\n+                _arguments = arguments;\n+                _names = names;\n+            }\n+\n+            Object[] applyTo(Executable executable)\n+            {\n+                Object[] args = matchArgsToParameters(executable);\n+                if (args == null && _class != null)\n                 {\n-                    for (String a : StringUtil.csvSplit(null, attr, 0, attr.length()))\n+                    // Could this be an empty varargs match?\n+                    int count = executable.getParameterCount();\n+                    if (count > 0 && executable.getParameterTypes()[count - 1].isArray())\n                     {\n-                        // create a fake node\n-                        XmlParser.Node n = new XmlParser.Node(null, elementName, null);\n-                        n.add(a);\n-                        values.add(n);\n+                        try\n+                        {\n+                            // Does a non varargs method exist?\n+                            Class<?>[] types = Arrays.copyOf(executable.getParameterTypes(), count - 1);\n+                            if (executable instanceof Constructor)\n+                                _class.getConstructor(types);\n+                            else\n+                                _class.getMethod(((Method)executable).getName(), types);\n+                        }\n+                        catch (NoSuchMethodException e)\n+                        {\n+                            // There is not a no varArgs alternative so let's try a null varArgs match\n+                            args = asEmptyVarArgs(executable.getParameterTypes()[count - 1]).matchArgsToParameters(executable);\n+                        }\n+                        catch (Exception e)\n+                        {\n+                            LOG.ignore(e);\n+                        }\n                     }\n                 }\n+                return args;\n+            }\n \n-                for (int i = 0; i < _next; i++)\n+            NamedArgs asEmptyVarArgs(Class<?> varArgType)\n+            {\n+                List<Object> arguments = new ArrayList<>(_arguments);\n+                arguments.add(Array.newInstance(varArgType.getComponentType(), 0));\n+                List<String> names = new ArrayList<>(_names);\n+                names.add(null);\n+                return new NamedArgs(arguments, names);\n+            }\n+\n+            Object[] matchArgsToParameters(Executable executable)\n+            {\n+                int count = executable.getParameterCount();\n+\n+                // No match of wrong number of parameters\n+                if (count != _arguments.size())\n+                    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8d405b83f0b690e4a703c5c1ffefc9ce062026"}, "originalPosition": 355}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1MjczMA==", "bodyText": "I don't think we can support that, at least not easily.  To call executable(String first, String... others) with args=[\"one\", \"two\", \"three\"] you will need to do:\n   <Call name=executable>\n     <Arg>one</Arg>\n     <Arg>\n       <Array type=String>\n         <Item>two</Item>\n         <Item>three</Item>\n       </Array>\n     </Arg>\n   </Call>", "url": "https://github.com/eclipse/jetty.project/pull/4553#discussion_r381452730", "createdAt": "2020-02-19T18:11:44Z", "author": {"login": "gregw"}, "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "diffHunk": "@@ -1777,40 +1646,168 @@ public Object get(String elementName, boolean mandatory) throws Exception\n \n             public List<XmlParser.Node> getNodes(String elementName)\n             {\n-                String attrName = StringUtil.asciiToLowerCase(elementName);\n-                final List<XmlParser.Node> values = new ArrayList<>();\n+                return XmlConfiguration.getNodes(_node, elementName);\n+            }\n+        }\n \n-                String attr = _node.getAttribute(attrName);\n-                if (attr != null)\n+        private class NamedArgs\n+        {\n+            final Class<?> _class;\n+            final List<Object> _arguments;\n+            final List<String> _names;\n+\n+            NamedArgs(Object obj, Class<?> oClass, List<XmlParser.Node> args) throws Exception\n+            {\n+                _class = oClass;\n+                _arguments = new ArrayList<>();\n+                _names = new ArrayList<>();\n+                for (XmlParser.Node child : args)\n+                {\n+                    _arguments.add(value(obj, child));\n+                    _names.add(child.getAttribute(\"name\"));\n+                }\n+            }\n+\n+            private NamedArgs(List<Object> arguments, List<String> names)\n+            {\n+                _class = null;\n+                _arguments = arguments;\n+                _names = names;\n+            }\n+\n+            Object[] applyTo(Executable executable)\n+            {\n+                Object[] args = matchArgsToParameters(executable);\n+                if (args == null && _class != null)\n                 {\n-                    for (String a : StringUtil.csvSplit(null, attr, 0, attr.length()))\n+                    // Could this be an empty varargs match?\n+                    int count = executable.getParameterCount();\n+                    if (count > 0 && executable.getParameterTypes()[count - 1].isArray())\n                     {\n-                        // create a fake node\n-                        XmlParser.Node n = new XmlParser.Node(null, elementName, null);\n-                        n.add(a);\n-                        values.add(n);\n+                        try\n+                        {\n+                            // Does a non varargs method exist?\n+                            Class<?>[] types = Arrays.copyOf(executable.getParameterTypes(), count - 1);\n+                            if (executable instanceof Constructor)\n+                                _class.getConstructor(types);\n+                            else\n+                                _class.getMethod(((Method)executable).getName(), types);\n+                        }\n+                        catch (NoSuchMethodException e)\n+                        {\n+                            // There is not a no varArgs alternative so let's try a null varArgs match\n+                            args = asEmptyVarArgs(executable.getParameterTypes()[count - 1]).matchArgsToParameters(executable);\n+                        }\n+                        catch (Exception e)\n+                        {\n+                            LOG.ignore(e);\n+                        }\n                     }\n                 }\n+                return args;\n+            }\n \n-                for (int i = 0; i < _next; i++)\n+            NamedArgs asEmptyVarArgs(Class<?> varArgType)\n+            {\n+                List<Object> arguments = new ArrayList<>(_arguments);\n+                arguments.add(Array.newInstance(varArgType.getComponentType(), 0));\n+                List<String> names = new ArrayList<>(_names);\n+                names.add(null);\n+                return new NamedArgs(arguments, names);\n+            }\n+\n+            Object[] matchArgsToParameters(Executable executable)\n+            {\n+                int count = executable.getParameterCount();\n+\n+                // No match of wrong number of parameters\n+                if (count != _arguments.size())\n+                    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4NTM3NA=="}, "originalCommit": {"oid": "2c8d405b83f0b690e4a703c5c1ffefc9ce062026"}, "originalPosition": 355}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzM4OTcxOnYy", "diffSide": "RIGHT", "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOToxNToxMlrOFm2rBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOToxNToxMlrOFm2rBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4NTk1OA==", "bodyText": "Rename to just Args since it does both named and non-named arguments?", "url": "https://github.com/eclipse/jetty.project/pull/4553#discussion_r376285958", "createdAt": "2020-02-07T09:15:12Z", "author": {"login": "sbordet"}, "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "diffHunk": "@@ -1777,40 +1646,168 @@ public Object get(String elementName, boolean mandatory) throws Exception\n \n             public List<XmlParser.Node> getNodes(String elementName)\n             {\n-                String attrName = StringUtil.asciiToLowerCase(elementName);\n-                final List<XmlParser.Node> values = new ArrayList<>();\n+                return XmlConfiguration.getNodes(_node, elementName);\n+            }\n+        }\n \n-                String attr = _node.getAttribute(attrName);\n-                if (attr != null)\n+        private class NamedArgs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8d405b83f0b690e4a703c5c1ffefc9ce062026"}, "originalPosition": 277}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzgzOTExOnYy", "diffSide": "RIGHT", "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwODozNToxNFrOFsKQww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwODozNToxNFrOFsKQww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg0OTc5NQ==", "bodyText": "Fix typo \"maatching\".", "url": "https://github.com/eclipse/jetty.project/pull/4553#discussion_r381849795", "createdAt": "2020-02-20T08:35:14Z", "author": {"login": "sbordet"}, "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "diffHunk": "@@ -412,39 +429,13 @@ public Object configure() throws Exception\n             int index = 0;\n             if (obj == null && oClass != null)\n             {\n-                index = _root.size();\n-                Map<String, Object> namedArgMap = new HashMap<>();\n-\n-                List<Object> arguments = new LinkedList<>();\n-                for (int i = 0; i < _root.size(); i++)\n-                {\n-                    Object o = _root.get(i);\n-                    if (o instanceof String)\n-                        continue;\n-\n-                    XmlParser.Node node = (XmlParser.Node)o;\n-                    if (node.getTag().equals(\"Arg\"))\n-                    {\n-                        String namedAttribute = node.getAttribute(\"name\");\n-                        Object value = value(null, (XmlParser.Node)o);\n-                        if (namedAttribute != null)\n-                            namedArgMap.put(namedAttribute, value);\n-                        arguments.add(value);\n-                    }\n-                    else\n-                    {\n-                        index = i;\n-                        break;\n-                    }\n-                }\n-\n                 try\n                 {\n-                    obj = construct(oClass, arguments.toArray(), namedArgMap);\n+                    obj = construct(oClass, new Args(null, oClass, XmlConfiguration.getNodes(_root, \"Arg\")));\n                 }\n                 catch (NoSuchMethodException x)\n                 {\n-                    throw new IllegalStateException(String.format(\"No constructor %s(%s,%s) in %s\", oClass, arguments, namedArgMap, _configuration));\n+                    throw new IllegalStateException(String.format(\"No maatching constructor %s in %s\", oClass, _configuration));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8860f1313804916fa6e21dd619e38b3865ca59"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Mzg4OTk2OnYy", "diffSide": "RIGHT", "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwODo1MDo1NVrOFsKvNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOTozNTozMFrOFsMPpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg1NzU4OA==", "bodyText": "This can be for (Object o : node)", "url": "https://github.com/eclipse/jetty.project/pull/4553#discussion_r381857588", "createdAt": "2020-02-20T08:50:55Z", "author": {"login": "sbordet"}, "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "diffHunk": "@@ -1777,40 +1667,152 @@ public Object get(String elementName, boolean mandatory) throws Exception\n \n             public List<XmlParser.Node> getNodes(String elementName)\n             {\n-                String attrName = StringUtil.asciiToLowerCase(elementName);\n-                final List<XmlParser.Node> values = new ArrayList<>();\n+                return XmlConfiguration.getNodes(_node, elementName);\n+            }\n+        }\n \n-                String attr = _node.getAttribute(attrName);\n-                if (attr != null)\n+        private class Args\n+        {\n+            private final Class<?> _class;\n+            private final List<Object> _arguments;\n+            private final List<String> _names;\n+\n+            private Args(Object obj, Class<?> oClass, List<XmlParser.Node> args) throws Exception\n+            {\n+                _class = oClass;\n+                _arguments = new ArrayList<>();\n+                _names = new ArrayList<>();\n+                for (XmlParser.Node child : args)\n                 {\n-                    for (String a : StringUtil.csvSplit(null, attr, 0, attr.length()))\n+                    _arguments.add(value(obj, child));\n+                    _names.add(child.getAttribute(\"name\"));\n+                }\n+            }\n+\n+            private Args(List<Object> arguments, List<String> names)\n+            {\n+                _class = null;\n+                _arguments = arguments;\n+                _names = names;\n+            }\n+\n+            Object[] applyTo(Executable executable)\n+            {\n+                Object[] args = matchArgsToParameters(executable);\n+                if (args == null && _class != null)\n+                {\n+                    // Could this be an empty varargs match?\n+                    int count = executable.getParameterCount();\n+                    if (count > 0 && executable.getParameterTypes()[count - 1].isArray())\n                     {\n-                        // create a fake node\n-                        XmlParser.Node n = new XmlParser.Node(null, elementName, null);\n-                        n.add(a);\n-                        values.add(n);\n+                        // There is not a no varArgs alternative so let's try a an empty varArgs match\n+                        args = asEmptyVarArgs(executable.getParameterTypes()[count - 1]).matchArgsToParameters(executable);\n                     }\n                 }\n+                return args;\n+            }\n \n-                for (int i = 0; i < _next; i++)\n+            Args asEmptyVarArgs(Class<?> varArgType)\n+            {\n+                List<Object> arguments = new ArrayList<>(_arguments);\n+                arguments.add(Array.newInstance(varArgType.getComponentType(), 0));\n+                List<String> names = new ArrayList<>(_names);\n+                names.add(null);\n+                return new Args(arguments, names);\n+            }\n+\n+            Object[] matchArgsToParameters(Executable executable)\n+            {\n+                int count = executable.getParameterCount();\n+\n+                // No match of wrong number of parameters\n+                if (count != _arguments.size())\n+                    return null;\n+\n+                // Handle no parameter case\n+                if (count == 0)\n+                    return new Object[0];\n+\n+                // If no arg names are specified, keep the arg order\n+                if (_names.stream().noneMatch(Objects::nonNull))\n+                    return _arguments.toArray(new Object[0]);\n+\n+                // If we don't have any parameters with names, then no match\n+                Annotation[][] parameterAnnotations = executable.getParameterAnnotations();\n+                if (parameterAnnotations == null || parameterAnnotations.length == 0)\n+                    return null;\n+\n+                // Find the position of all named parameters from the executable\n+                Map<String, Integer> position = new HashMap<>();\n+                int p = 0;\n+                for (Annotation[] paramAnnotation : parameterAnnotations)\n                 {\n-                    Object o = _node.get(i);\n-                    if (!(o instanceof XmlParser.Node))\n-                        continue;\n-                    XmlParser.Node n = (XmlParser.Node)o;\n+                    Integer pos = p++;\n+                    Arrays.stream(paramAnnotation)\n+                        .filter(Name.class::isInstance)\n+                        .map(Name.class::cast)\n+                        .findFirst().ifPresent(n -> position.put(n.value(), pos));\n+                }\n \n-                    if (elementName.equals(n.getTag()))\n+                List<Object> arguments = new ArrayList<>(_arguments);\n+                List<String> names = new ArrayList<>(_names);\n+                // Map the actual arguments to the names\n+                for (p = 0; p < count; p++)\n+                {\n+                    String name = names.get(p);\n+                    if (name != null)\n                     {\n-                        if (attr != null)\n-                            throw new IllegalStateException(\"Cannot have attr '\" + attrName + \"' and element '\" + elementName + \"'\");\n-\n-                        values.add(n);\n+                        Integer pos = position.get(name);\n+                        if (pos == null)\n+                            return null;\n+                        if (pos != p)\n+                        {\n+                            // adjust position of parameter\n+                            arguments.add(pos, arguments.remove(p));\n+                            names.add(pos, names.remove(p));\n+                            p = Math.min(p, pos);\n+                        }\n                     }\n                 }\n+                return arguments.toArray(new Object[0]);\n+            }\n+        }\n+    }\n \n-                return values;\n+    private static List<XmlParser.Node> getNodes(XmlParser.Node node, String elementName)\n+    {\n+        String attrName = StringUtil.asciiToLowerCase(elementName);\n+        final List<XmlParser.Node> values = new ArrayList<>();\n+\n+        String attr = node.getAttribute(attrName);\n+        if (attr != null)\n+        {\n+            for (String a : StringUtil.csvSplit(null, attr, 0, attr.length()))\n+            {\n+                // create a fake node\n+                XmlParser.Node n = new XmlParser.Node(null, elementName, null);\n+                n.add(a);\n+                values.add(n);\n             }\n         }\n+\n+        for (int i = 0; i < node.size(); i++)\n+        {\n+            Object o = node.get(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8860f1313804916fa6e21dd619e38b3865ca59"}, "originalPosition": 453}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg4MjI3Ng==", "bodyText": "There are many such for loops in the class, so I tried to convert all.... but broke something... obviously my virus infected mind is not up to such complex programming :)   Let's leave as is for now!", "url": "https://github.com/eclipse/jetty.project/pull/4553#discussion_r381882276", "createdAt": "2020-02-20T09:35:30Z", "author": {"login": "gregw"}, "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "diffHunk": "@@ -1777,40 +1667,152 @@ public Object get(String elementName, boolean mandatory) throws Exception\n \n             public List<XmlParser.Node> getNodes(String elementName)\n             {\n-                String attrName = StringUtil.asciiToLowerCase(elementName);\n-                final List<XmlParser.Node> values = new ArrayList<>();\n+                return XmlConfiguration.getNodes(_node, elementName);\n+            }\n+        }\n \n-                String attr = _node.getAttribute(attrName);\n-                if (attr != null)\n+        private class Args\n+        {\n+            private final Class<?> _class;\n+            private final List<Object> _arguments;\n+            private final List<String> _names;\n+\n+            private Args(Object obj, Class<?> oClass, List<XmlParser.Node> args) throws Exception\n+            {\n+                _class = oClass;\n+                _arguments = new ArrayList<>();\n+                _names = new ArrayList<>();\n+                for (XmlParser.Node child : args)\n                 {\n-                    for (String a : StringUtil.csvSplit(null, attr, 0, attr.length()))\n+                    _arguments.add(value(obj, child));\n+                    _names.add(child.getAttribute(\"name\"));\n+                }\n+            }\n+\n+            private Args(List<Object> arguments, List<String> names)\n+            {\n+                _class = null;\n+                _arguments = arguments;\n+                _names = names;\n+            }\n+\n+            Object[] applyTo(Executable executable)\n+            {\n+                Object[] args = matchArgsToParameters(executable);\n+                if (args == null && _class != null)\n+                {\n+                    // Could this be an empty varargs match?\n+                    int count = executable.getParameterCount();\n+                    if (count > 0 && executable.getParameterTypes()[count - 1].isArray())\n                     {\n-                        // create a fake node\n-                        XmlParser.Node n = new XmlParser.Node(null, elementName, null);\n-                        n.add(a);\n-                        values.add(n);\n+                        // There is not a no varArgs alternative so let's try a an empty varArgs match\n+                        args = asEmptyVarArgs(executable.getParameterTypes()[count - 1]).matchArgsToParameters(executable);\n                     }\n                 }\n+                return args;\n+            }\n \n-                for (int i = 0; i < _next; i++)\n+            Args asEmptyVarArgs(Class<?> varArgType)\n+            {\n+                List<Object> arguments = new ArrayList<>(_arguments);\n+                arguments.add(Array.newInstance(varArgType.getComponentType(), 0));\n+                List<String> names = new ArrayList<>(_names);\n+                names.add(null);\n+                return new Args(arguments, names);\n+            }\n+\n+            Object[] matchArgsToParameters(Executable executable)\n+            {\n+                int count = executable.getParameterCount();\n+\n+                // No match of wrong number of parameters\n+                if (count != _arguments.size())\n+                    return null;\n+\n+                // Handle no parameter case\n+                if (count == 0)\n+                    return new Object[0];\n+\n+                // If no arg names are specified, keep the arg order\n+                if (_names.stream().noneMatch(Objects::nonNull))\n+                    return _arguments.toArray(new Object[0]);\n+\n+                // If we don't have any parameters with names, then no match\n+                Annotation[][] parameterAnnotations = executable.getParameterAnnotations();\n+                if (parameterAnnotations == null || parameterAnnotations.length == 0)\n+                    return null;\n+\n+                // Find the position of all named parameters from the executable\n+                Map<String, Integer> position = new HashMap<>();\n+                int p = 0;\n+                for (Annotation[] paramAnnotation : parameterAnnotations)\n                 {\n-                    Object o = _node.get(i);\n-                    if (!(o instanceof XmlParser.Node))\n-                        continue;\n-                    XmlParser.Node n = (XmlParser.Node)o;\n+                    Integer pos = p++;\n+                    Arrays.stream(paramAnnotation)\n+                        .filter(Name.class::isInstance)\n+                        .map(Name.class::cast)\n+                        .findFirst().ifPresent(n -> position.put(n.value(), pos));\n+                }\n \n-                    if (elementName.equals(n.getTag()))\n+                List<Object> arguments = new ArrayList<>(_arguments);\n+                List<String> names = new ArrayList<>(_names);\n+                // Map the actual arguments to the names\n+                for (p = 0; p < count; p++)\n+                {\n+                    String name = names.get(p);\n+                    if (name != null)\n                     {\n-                        if (attr != null)\n-                            throw new IllegalStateException(\"Cannot have attr '\" + attrName + \"' and element '\" + elementName + \"'\");\n-\n-                        values.add(n);\n+                        Integer pos = position.get(name);\n+                        if (pos == null)\n+                            return null;\n+                        if (pos != p)\n+                        {\n+                            // adjust position of parameter\n+                            arguments.add(pos, arguments.remove(p));\n+                            names.add(pos, names.remove(p));\n+                            p = Math.min(p, pos);\n+                        }\n                     }\n                 }\n+                return arguments.toArray(new Object[0]);\n+            }\n+        }\n+    }\n \n-                return values;\n+    private static List<XmlParser.Node> getNodes(XmlParser.Node node, String elementName)\n+    {\n+        String attrName = StringUtil.asciiToLowerCase(elementName);\n+        final List<XmlParser.Node> values = new ArrayList<>();\n+\n+        String attr = node.getAttribute(attrName);\n+        if (attr != null)\n+        {\n+            for (String a : StringUtil.csvSplit(null, attr, 0, attr.length()))\n+            {\n+                // create a fake node\n+                XmlParser.Node n = new XmlParser.Node(null, elementName, null);\n+                n.add(a);\n+                values.add(n);\n             }\n         }\n+\n+        for (int i = 0; i < node.size(); i++)\n+        {\n+            Object o = node.get(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg1NzU4OA=="}, "originalCommit": {"oid": "0c8860f1313804916fa6e21dd619e38b3865ca59"}, "originalPosition": 453}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2800, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}