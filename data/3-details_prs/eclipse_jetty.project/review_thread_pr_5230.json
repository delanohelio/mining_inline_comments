{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4MjY4ODIy", "number": 5230, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo0ODowMVrOEf3e-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo0OTozMlrOEf3hVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODUwMzYzOnYy", "diffSide": "RIGHT", "path": "jetty-documentation/src/main/asciidoc/administration/logging/jetty-server-dump.adoc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo0ODowMVrOHMaVhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTowOTowOFrOHMrLyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NjQ1Mw==", "bodyText": "I would not mind to have a different logging of this, namely: name, state, tid, prio, like this:\nqtp731260860-13 RUNNABLE SELECTING tid=13 prio=5\nso that the important information (name and state) are at the beginning.", "url": "https://github.com/eclipse/jetty.project/pull/5230#discussion_r482776453", "createdAt": "2020-09-03T07:48:01Z", "author": {"login": "sbordet"}, "path": "jetty-documentation/src/main/asciidoc/administration/logging/jetty-server-dump.adoc", "diffHunk": "@@ -80,26 +80,26 @@ The Server MBean has a `dump()` method, which dumps everything, plus a `dumpStdE\n This is a dump of the OneServletContext embedded example with extra threadpool information:\n \n ....\n-Server@59906517{STARTED}[9.4.32-SNAPSHOT] - STARTED\n-+= QueuedThreadPool[qtp1740189450]@67b92f0a{STARTED,8<=8<=200,i=5,r=4,q=0}[ReservedThreadExecutor@77e4c80f{s=0/4,p=0}] - STARTED\n-|  += ReservedThreadExecutor@77e4c80f{s=0/4,p=0} - STARTED\n+Server@5ed828d{STARTED}[9.4.32-SNAPSHOT] - STARTED\n++= QueuedThreadPool[qtp731260860]@2b9627bc{STARTED,8<=8<=10,i=5,r=1,q=0}[ReservedThreadExecutor@77e4c80f{s=0/1,p=0}] - STARTED\n+|  += ReservedThreadExecutor@77e4c80f{s=0/1,p=0} - STARTED\n |  +> threads size=8\n-|  |  +> 12 qtp1740189450-12 SELECTING  RUNNABLE 5\n-|  |  +> 14 qtp1740189450-14-acceptor-0@4c78251c-ServerConnector@76707e36{HTTP/1.1, (http/1.1)}{0.0.0.0:8080} ACCEPTING  RUNNABLE 3\n-|  |  +> 16 qtp1740189450-16 IDLE  TIMED_WAITING 5\n-|  |  +> 18 qtp1740189450-18 IDLE  TIMED_WAITING 5\n-|  |  +> 15 qtp1740189450-15 SELECTING  RUNNABLE 5\n-|  |  +> 19 qtp1740189450-19 IDLE  TIMED_WAITING 5\n-|  |  +> 17 qtp1740189450-17 IDLE  TIMED_WAITING 5\n-|  |  +> 13 qtp1740189450-13 IDLE  TIMED_WAITING 5\n+|  |  +> 13 qtp731260860-13 RUNNABLE 5 SELECTING", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "516432b9cbd47f3a9987d6dbcdfb690b1cc6baeb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAxMjYyOQ==", "bodyText": "This change would make the dump would not have a consistent ordering between threads in known methods and those not.\nThe SELECTING is really just a reduction of the stacktrace, we have a stackframe in the method SelectorProducer.select() so we abbreviate this to SELECTING. So it makes sense to me that we would want to have this in the same position as we would have the stacktrace (the last position).\nSo I think this would be a better format\nqtp731260860-13 RUNNABLE tid=13 prio=5 SELECTING\nthis would be a format of\nname state id priority {KNOWN / stackTraceFirstLine / fullStackTrace}", "url": "https://github.com/eclipse/jetty.project/pull/5230#discussion_r483012629", "createdAt": "2020-09-03T14:17:00Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-documentation/src/main/asciidoc/administration/logging/jetty-server-dump.adoc", "diffHunk": "@@ -80,26 +80,26 @@ The Server MBean has a `dump()` method, which dumps everything, plus a `dumpStdE\n This is a dump of the OneServletContext embedded example with extra threadpool information:\n \n ....\n-Server@59906517{STARTED}[9.4.32-SNAPSHOT] - STARTED\n-+= QueuedThreadPool[qtp1740189450]@67b92f0a{STARTED,8<=8<=200,i=5,r=4,q=0}[ReservedThreadExecutor@77e4c80f{s=0/4,p=0}] - STARTED\n-|  += ReservedThreadExecutor@77e4c80f{s=0/4,p=0} - STARTED\n+Server@5ed828d{STARTED}[9.4.32-SNAPSHOT] - STARTED\n++= QueuedThreadPool[qtp731260860]@2b9627bc{STARTED,8<=8<=10,i=5,r=1,q=0}[ReservedThreadExecutor@77e4c80f{s=0/1,p=0}] - STARTED\n+|  += ReservedThreadExecutor@77e4c80f{s=0/1,p=0} - STARTED\n |  +> threads size=8\n-|  |  +> 12 qtp1740189450-12 SELECTING  RUNNABLE 5\n-|  |  +> 14 qtp1740189450-14-acceptor-0@4c78251c-ServerConnector@76707e36{HTTP/1.1, (http/1.1)}{0.0.0.0:8080} ACCEPTING  RUNNABLE 3\n-|  |  +> 16 qtp1740189450-16 IDLE  TIMED_WAITING 5\n-|  |  +> 18 qtp1740189450-18 IDLE  TIMED_WAITING 5\n-|  |  +> 15 qtp1740189450-15 SELECTING  RUNNABLE 5\n-|  |  +> 19 qtp1740189450-19 IDLE  TIMED_WAITING 5\n-|  |  +> 17 qtp1740189450-17 IDLE  TIMED_WAITING 5\n-|  |  +> 13 qtp1740189450-13 IDLE  TIMED_WAITING 5\n+|  |  +> 13 qtp731260860-13 RUNNABLE 5 SELECTING", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NjQ1Mw=="}, "originalCommit": {"oid": "516432b9cbd47f3a9987d6dbcdfb690b1cc6baeb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MjQ5MQ==", "bodyText": "@lachlan-roberts agreed with your latest proposal.", "url": "https://github.com/eclipse/jetty.project/pull/5230#discussion_r483052491", "createdAt": "2020-09-03T15:09:08Z", "author": {"login": "sbordet"}, "path": "jetty-documentation/src/main/asciidoc/administration/logging/jetty-server-dump.adoc", "diffHunk": "@@ -80,26 +80,26 @@ The Server MBean has a `dump()` method, which dumps everything, plus a `dumpStdE\n This is a dump of the OneServletContext embedded example with extra threadpool information:\n \n ....\n-Server@59906517{STARTED}[9.4.32-SNAPSHOT] - STARTED\n-+= QueuedThreadPool[qtp1740189450]@67b92f0a{STARTED,8<=8<=200,i=5,r=4,q=0}[ReservedThreadExecutor@77e4c80f{s=0/4,p=0}] - STARTED\n-|  += ReservedThreadExecutor@77e4c80f{s=0/4,p=0} - STARTED\n+Server@5ed828d{STARTED}[9.4.32-SNAPSHOT] - STARTED\n++= QueuedThreadPool[qtp731260860]@2b9627bc{STARTED,8<=8<=10,i=5,r=1,q=0}[ReservedThreadExecutor@77e4c80f{s=0/1,p=0}] - STARTED\n+|  += ReservedThreadExecutor@77e4c80f{s=0/1,p=0} - STARTED\n |  +> threads size=8\n-|  |  +> 12 qtp1740189450-12 SELECTING  RUNNABLE 5\n-|  |  +> 14 qtp1740189450-14-acceptor-0@4c78251c-ServerConnector@76707e36{HTTP/1.1, (http/1.1)}{0.0.0.0:8080} ACCEPTING  RUNNABLE 3\n-|  |  +> 16 qtp1740189450-16 IDLE  TIMED_WAITING 5\n-|  |  +> 18 qtp1740189450-18 IDLE  TIMED_WAITING 5\n-|  |  +> 15 qtp1740189450-15 SELECTING  RUNNABLE 5\n-|  |  +> 19 qtp1740189450-19 IDLE  TIMED_WAITING 5\n-|  |  +> 17 qtp1740189450-17 IDLE  TIMED_WAITING 5\n-|  |  +> 13 qtp1740189450-13 IDLE  TIMED_WAITING 5\n+|  |  +> 13 qtp731260860-13 RUNNABLE 5 SELECTING", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NjQ1Mw=="}, "originalCommit": {"oid": "516432b9cbd47f3a9987d6dbcdfb690b1cc6baeb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODUwOTY1OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/QueuedThreadPool.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo0OTozMlrOHMaZBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo0NDozOFrOHMsulg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NzM1MA==", "bodyText": "Should not this be getKnownState() as it returns the state of the thread?", "url": "https://github.com/eclipse/jetty.project/pull/5230#discussion_r482777350", "createdAt": "2020-09-03T07:49:32Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/QueuedThreadPool.java", "diffHunk": "@@ -701,74 +701,41 @@ protected void removeThread(Thread thread)\n     public void dump(Appendable out, String indent) throws IOException\n     {\n         List<Object> threads = new ArrayList<>(getMaxThreads());\n-        for (final Thread thread : _threads)\n+        for (Thread thread : _threads)\n         {\n-            final StackTraceElement[] trace = thread.getStackTrace();\n-            String knownMethod = \"\";\n-            for (StackTraceElement t : trace)\n-            {\n-                if (\"idleJobPoll\".equals(t.getMethodName()) && t.getClassName().equals(Runner.class.getName()))\n-                {\n-                    knownMethod = \"IDLE \";\n-                    break;\n-                }\n-\n-                if (\"reservedWait\".equals(t.getMethodName()) && t.getClassName().endsWith(\"ReservedThread\"))\n-                {\n-                    knownMethod = \"RESERVED \";\n-                    break;\n-                }\n-\n-                if (\"select\".equals(t.getMethodName()) && t.getClassName().endsWith(\"SelectorProducer\"))\n-                {\n-                    knownMethod = \"SELECTING \";\n-                    break;\n-                }\n-\n-                if (\"accept\".equals(t.getMethodName()) && t.getClassName().contains(\"ServerConnector\"))\n-                {\n-                    knownMethod = \"ACCEPTING \";\n-                    break;\n-                }\n-            }\n-            final String known = knownMethod;\n-\n-            if (isDetailedDump())\n-            {\n-                threads.add(new Dumpable()\n-                {\n-                    @Override\n-                    public void dump(Appendable out, String indent) throws IOException\n-                    {\n-                        if (StringUtil.isBlank(known))\n-                            Dumpable.dumpObjects(out, indent, String.format(\"%s %s %s %d\", thread.getId(), thread.getName(), thread.getState(), thread.getPriority()), (Object[])trace);\n-                        else\n-                            Dumpable.dumpObjects(out, indent, String.format(\"%s %s %s %s %d\", thread.getId(), thread.getName(), known, thread.getState(), thread.getPriority()));\n-                    }\n-\n-                    @Override\n-                    public String dump()\n-                    {\n-                        return null;\n-                    }\n-                });\n-            }\n+            StackTraceElement[] trace = thread.getStackTrace();\n+            String known = getKnownMethod(trace);\n+            String baseThreadInfo = String.format(\"%s %s %s %d\", thread.getId(), thread.getName(), thread.getState(), thread.getPriority());\n+\n+            if (!StringUtil.isBlank(known))\n+                threads.add(baseThreadInfo + \" \" + known);\n+            else if (isDetailedDump())\n+                threads.add((Dumpable)(o, i) -> Dumpable.dumpObjects(o, i, baseThreadInfo, (Object[])trace));\n             else\n-            {\n-                int p = thread.getPriority();\n-                threads.add(thread.getId() + \" \" + thread.getName() + \" \" + known + thread.getState() + \" @ \" + (trace.length > 0 ? trace[0] : \"???\") + (p == Thread.NORM_PRIORITY ? \"\" : (\" prio=\" + p)));\n-            }\n+                threads.add(baseThreadInfo + \" @ \" + (trace.length > 0 ? trace[0].toString() : \"???\"));\n         }\n \n+        DumpableCollection threadsDump = new DumpableCollection(\"threads\", threads);\n         if (isDetailedDump())\n-        {\n-            List<Runnable> jobs = new ArrayList<>(getQueue());\n-            dumpObjects(out, indent, new DumpableCollection(\"threads\", threads), new DumpableCollection(\"jobs\", jobs));\n-        }\n+            dumpObjects(out, indent, threadsDump, new DumpableCollection(\"jobs\", new ArrayList<>(getQueue())));\n         else\n+            dumpObjects(out, indent, threadsDump);\n+    }\n+\n+    private String getKnownMethod(StackTraceElement[] trace)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "516432b9cbd47f3a9987d6dbcdfb690b1cc6baeb"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk3MDcxNw==", "bodyText": "I kinda like the getKnownMethod name.\nIt's not returning the java.lang.Thread.State.\nIt's intuiting the jetty specific behavior that the stack is in based on the method found in the stacktrace.", "url": "https://github.com/eclipse/jetty.project/pull/5230#discussion_r482970717", "createdAt": "2020-09-03T13:19:05Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/QueuedThreadPool.java", "diffHunk": "@@ -701,74 +701,41 @@ protected void removeThread(Thread thread)\n     public void dump(Appendable out, String indent) throws IOException\n     {\n         List<Object> threads = new ArrayList<>(getMaxThreads());\n-        for (final Thread thread : _threads)\n+        for (Thread thread : _threads)\n         {\n-            final StackTraceElement[] trace = thread.getStackTrace();\n-            String knownMethod = \"\";\n-            for (StackTraceElement t : trace)\n-            {\n-                if (\"idleJobPoll\".equals(t.getMethodName()) && t.getClassName().equals(Runner.class.getName()))\n-                {\n-                    knownMethod = \"IDLE \";\n-                    break;\n-                }\n-\n-                if (\"reservedWait\".equals(t.getMethodName()) && t.getClassName().endsWith(\"ReservedThread\"))\n-                {\n-                    knownMethod = \"RESERVED \";\n-                    break;\n-                }\n-\n-                if (\"select\".equals(t.getMethodName()) && t.getClassName().endsWith(\"SelectorProducer\"))\n-                {\n-                    knownMethod = \"SELECTING \";\n-                    break;\n-                }\n-\n-                if (\"accept\".equals(t.getMethodName()) && t.getClassName().contains(\"ServerConnector\"))\n-                {\n-                    knownMethod = \"ACCEPTING \";\n-                    break;\n-                }\n-            }\n-            final String known = knownMethod;\n-\n-            if (isDetailedDump())\n-            {\n-                threads.add(new Dumpable()\n-                {\n-                    @Override\n-                    public void dump(Appendable out, String indent) throws IOException\n-                    {\n-                        if (StringUtil.isBlank(known))\n-                            Dumpable.dumpObjects(out, indent, String.format(\"%s %s %s %d\", thread.getId(), thread.getName(), thread.getState(), thread.getPriority()), (Object[])trace);\n-                        else\n-                            Dumpable.dumpObjects(out, indent, String.format(\"%s %s %s %s %d\", thread.getId(), thread.getName(), known, thread.getState(), thread.getPriority()));\n-                    }\n-\n-                    @Override\n-                    public String dump()\n-                    {\n-                        return null;\n-                    }\n-                });\n-            }\n+            StackTraceElement[] trace = thread.getStackTrace();\n+            String known = getKnownMethod(trace);\n+            String baseThreadInfo = String.format(\"%s %s %s %d\", thread.getId(), thread.getName(), thread.getState(), thread.getPriority());\n+\n+            if (!StringUtil.isBlank(known))\n+                threads.add(baseThreadInfo + \" \" + known);\n+            else if (isDetailedDump())\n+                threads.add((Dumpable)(o, i) -> Dumpable.dumpObjects(o, i, baseThreadInfo, (Object[])trace));\n             else\n-            {\n-                int p = thread.getPriority();\n-                threads.add(thread.getId() + \" \" + thread.getName() + \" \" + known + thread.getState() + \" @ \" + (trace.length > 0 ? trace[0] : \"???\") + (p == Thread.NORM_PRIORITY ? \"\" : (\" prio=\" + p)));\n-            }\n+                threads.add(baseThreadInfo + \" @ \" + (trace.length > 0 ? trace[0].toString() : \"???\"));\n         }\n \n+        DumpableCollection threadsDump = new DumpableCollection(\"threads\", threads);\n         if (isDetailedDump())\n-        {\n-            List<Runnable> jobs = new ArrayList<>(getQueue());\n-            dumpObjects(out, indent, new DumpableCollection(\"threads\", threads), new DumpableCollection(\"jobs\", jobs));\n-        }\n+            dumpObjects(out, indent, threadsDump, new DumpableCollection(\"jobs\", new ArrayList<>(getQueue())));\n         else\n+            dumpObjects(out, indent, threadsDump);\n+    }\n+\n+    private String getKnownMethod(StackTraceElement[] trace)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NzM1MA=="}, "originalCommit": {"oid": "516432b9cbd47f3a9987d6dbcdfb690b1cc6baeb"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MTQ4NQ==", "bodyText": "Ok so it's a string tag that indicates the Jetty thread stack state.\nHow about getStateTag() or getCompressedStackTag() or getReducedStackTag()?", "url": "https://github.com/eclipse/jetty.project/pull/5230#discussion_r483051485", "createdAt": "2020-09-03T15:07:40Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/QueuedThreadPool.java", "diffHunk": "@@ -701,74 +701,41 @@ protected void removeThread(Thread thread)\n     public void dump(Appendable out, String indent) throws IOException\n     {\n         List<Object> threads = new ArrayList<>(getMaxThreads());\n-        for (final Thread thread : _threads)\n+        for (Thread thread : _threads)\n         {\n-            final StackTraceElement[] trace = thread.getStackTrace();\n-            String knownMethod = \"\";\n-            for (StackTraceElement t : trace)\n-            {\n-                if (\"idleJobPoll\".equals(t.getMethodName()) && t.getClassName().equals(Runner.class.getName()))\n-                {\n-                    knownMethod = \"IDLE \";\n-                    break;\n-                }\n-\n-                if (\"reservedWait\".equals(t.getMethodName()) && t.getClassName().endsWith(\"ReservedThread\"))\n-                {\n-                    knownMethod = \"RESERVED \";\n-                    break;\n-                }\n-\n-                if (\"select\".equals(t.getMethodName()) && t.getClassName().endsWith(\"SelectorProducer\"))\n-                {\n-                    knownMethod = \"SELECTING \";\n-                    break;\n-                }\n-\n-                if (\"accept\".equals(t.getMethodName()) && t.getClassName().contains(\"ServerConnector\"))\n-                {\n-                    knownMethod = \"ACCEPTING \";\n-                    break;\n-                }\n-            }\n-            final String known = knownMethod;\n-\n-            if (isDetailedDump())\n-            {\n-                threads.add(new Dumpable()\n-                {\n-                    @Override\n-                    public void dump(Appendable out, String indent) throws IOException\n-                    {\n-                        if (StringUtil.isBlank(known))\n-                            Dumpable.dumpObjects(out, indent, String.format(\"%s %s %s %d\", thread.getId(), thread.getName(), thread.getState(), thread.getPriority()), (Object[])trace);\n-                        else\n-                            Dumpable.dumpObjects(out, indent, String.format(\"%s %s %s %s %d\", thread.getId(), thread.getName(), known, thread.getState(), thread.getPriority()));\n-                    }\n-\n-                    @Override\n-                    public String dump()\n-                    {\n-                        return null;\n-                    }\n-                });\n-            }\n+            StackTraceElement[] trace = thread.getStackTrace();\n+            String known = getKnownMethod(trace);\n+            String baseThreadInfo = String.format(\"%s %s %s %d\", thread.getId(), thread.getName(), thread.getState(), thread.getPriority());\n+\n+            if (!StringUtil.isBlank(known))\n+                threads.add(baseThreadInfo + \" \" + known);\n+            else if (isDetailedDump())\n+                threads.add((Dumpable)(o, i) -> Dumpable.dumpObjects(o, i, baseThreadInfo, (Object[])trace));\n             else\n-            {\n-                int p = thread.getPriority();\n-                threads.add(thread.getId() + \" \" + thread.getName() + \" \" + known + thread.getState() + \" @ \" + (trace.length > 0 ? trace[0] : \"???\") + (p == Thread.NORM_PRIORITY ? \"\" : (\" prio=\" + p)));\n-            }\n+                threads.add(baseThreadInfo + \" @ \" + (trace.length > 0 ? trace[0].toString() : \"???\"));\n         }\n \n+        DumpableCollection threadsDump = new DumpableCollection(\"threads\", threads);\n         if (isDetailedDump())\n-        {\n-            List<Runnable> jobs = new ArrayList<>(getQueue());\n-            dumpObjects(out, indent, new DumpableCollection(\"threads\", threads), new DumpableCollection(\"jobs\", jobs));\n-        }\n+            dumpObjects(out, indent, threadsDump, new DumpableCollection(\"jobs\", new ArrayList<>(getQueue())));\n         else\n+            dumpObjects(out, indent, threadsDump);\n+    }\n+\n+    private String getKnownMethod(StackTraceElement[] trace)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NzM1MA=="}, "originalCommit": {"oid": "516432b9cbd47f3a9987d6dbcdfb690b1cc6baeb"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3Nzc4Mg==", "bodyText": "Or getStackBehavior() ?", "url": "https://github.com/eclipse/jetty.project/pull/5230#discussion_r483077782", "createdAt": "2020-09-03T15:44:38Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/QueuedThreadPool.java", "diffHunk": "@@ -701,74 +701,41 @@ protected void removeThread(Thread thread)\n     public void dump(Appendable out, String indent) throws IOException\n     {\n         List<Object> threads = new ArrayList<>(getMaxThreads());\n-        for (final Thread thread : _threads)\n+        for (Thread thread : _threads)\n         {\n-            final StackTraceElement[] trace = thread.getStackTrace();\n-            String knownMethod = \"\";\n-            for (StackTraceElement t : trace)\n-            {\n-                if (\"idleJobPoll\".equals(t.getMethodName()) && t.getClassName().equals(Runner.class.getName()))\n-                {\n-                    knownMethod = \"IDLE \";\n-                    break;\n-                }\n-\n-                if (\"reservedWait\".equals(t.getMethodName()) && t.getClassName().endsWith(\"ReservedThread\"))\n-                {\n-                    knownMethod = \"RESERVED \";\n-                    break;\n-                }\n-\n-                if (\"select\".equals(t.getMethodName()) && t.getClassName().endsWith(\"SelectorProducer\"))\n-                {\n-                    knownMethod = \"SELECTING \";\n-                    break;\n-                }\n-\n-                if (\"accept\".equals(t.getMethodName()) && t.getClassName().contains(\"ServerConnector\"))\n-                {\n-                    knownMethod = \"ACCEPTING \";\n-                    break;\n-                }\n-            }\n-            final String known = knownMethod;\n-\n-            if (isDetailedDump())\n-            {\n-                threads.add(new Dumpable()\n-                {\n-                    @Override\n-                    public void dump(Appendable out, String indent) throws IOException\n-                    {\n-                        if (StringUtil.isBlank(known))\n-                            Dumpable.dumpObjects(out, indent, String.format(\"%s %s %s %d\", thread.getId(), thread.getName(), thread.getState(), thread.getPriority()), (Object[])trace);\n-                        else\n-                            Dumpable.dumpObjects(out, indent, String.format(\"%s %s %s %s %d\", thread.getId(), thread.getName(), known, thread.getState(), thread.getPriority()));\n-                    }\n-\n-                    @Override\n-                    public String dump()\n-                    {\n-                        return null;\n-                    }\n-                });\n-            }\n+            StackTraceElement[] trace = thread.getStackTrace();\n+            String known = getKnownMethod(trace);\n+            String baseThreadInfo = String.format(\"%s %s %s %d\", thread.getId(), thread.getName(), thread.getState(), thread.getPriority());\n+\n+            if (!StringUtil.isBlank(known))\n+                threads.add(baseThreadInfo + \" \" + known);\n+            else if (isDetailedDump())\n+                threads.add((Dumpable)(o, i) -> Dumpable.dumpObjects(o, i, baseThreadInfo, (Object[])trace));\n             else\n-            {\n-                int p = thread.getPriority();\n-                threads.add(thread.getId() + \" \" + thread.getName() + \" \" + known + thread.getState() + \" @ \" + (trace.length > 0 ? trace[0] : \"???\") + (p == Thread.NORM_PRIORITY ? \"\" : (\" prio=\" + p)));\n-            }\n+                threads.add(baseThreadInfo + \" @ \" + (trace.length > 0 ? trace[0].toString() : \"???\"));\n         }\n \n+        DumpableCollection threadsDump = new DumpableCollection(\"threads\", threads);\n         if (isDetailedDump())\n-        {\n-            List<Runnable> jobs = new ArrayList<>(getQueue());\n-            dumpObjects(out, indent, new DumpableCollection(\"threads\", threads), new DumpableCollection(\"jobs\", jobs));\n-        }\n+            dumpObjects(out, indent, threadsDump, new DumpableCollection(\"jobs\", new ArrayList<>(getQueue())));\n         else\n+            dumpObjects(out, indent, threadsDump);\n+    }\n+\n+    private String getKnownMethod(StackTraceElement[] trace)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NzM1MA=="}, "originalCommit": {"oid": "516432b9cbd47f3a9987d6dbcdfb690b1cc6baeb"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2370, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}