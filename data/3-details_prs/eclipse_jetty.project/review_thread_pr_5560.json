{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MTUxOTU2", "number": 5560, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTo1Njo1OVrOE0cFww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDozNDo1NlrOE5g_zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDIxNjM1OnYy", "diffSide": "RIGHT", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTo1Njo1OVrOHsKiNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzowMDoyOVrOHsNWEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3MTk5MQ==", "bodyText": "This is probably a mistake, we shouldn't be second guessing the User-Agent Accept header.", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r516071991", "createdAt": "2020-11-02T15:56:59Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "diffHunk": "@@ -80,47 +88,150 @@ public void init() throws ServletException\n     }\n \n     @Override\n-    public void doPost(HttpServletRequest sreq, HttpServletResponse sres) throws ServletException, IOException\n+    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n-        doGet(sreq, sres);\n+        doGet(request, response);\n     }\n \n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n         if (_statsHandler == null)\n         {\n             LOG.warn(\"Statistics Handler not installed!\");\n-            resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n             return;\n         }\n         if (_restrictToLocalhost)\n         {\n-            if (!isLoopbackAddress(req.getRemoteAddr()))\n+            if (!isLoopbackAddress(request.getRemoteAddr()))\n             {\n-                resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n                 return;\n             }\n         }\n \n-        if (Boolean.parseBoolean(req.getParameter(\"statsReset\")))\n+        if (Boolean.parseBoolean(request.getParameter(\"statsReset\")))\n         {\n+            response.setStatus(HttpServletResponse.SC_OK);\n             _statsHandler.statsReset();\n             return;\n         }\n \n-        String wantXml = req.getParameter(\"xml\");\n-        if (wantXml == null)\n-            wantXml = req.getParameter(\"XML\");\n+        List<String> acceptable = getOrderedAcceptableMimeTypes(request);\n+\n+        for (String mimeType : acceptable)\n+        {\n+            switch (mimeType)\n+            {\n+                case \"application/json\":\n+                    writeJsonResponse(response);\n+                    return;\n+                case \"text/xml\":\n+                    writeXmlResponse(response);\n+                    return;\n+                case \"text/html\":\n+                    writeHtmlResponse(response);\n+                    return;\n+                case \"text/plain\":\n+                    writeTextResponse(response);\n+                    return;\n+                case \"*/*\":\n+                    String wantXml = request.getParameter(\"xml\");\n+                    if (wantXml == null)\n+                        wantXml = request.getParameter(\"XML\");\n+\n+                    if (Boolean.parseBoolean(wantXml))\n+                    {\n+                        writeXmlResponse(response);\n+                    }\n+                    else\n+                    {\n+                        writeTextResponse(response);\n+                    }\n+                    return;\n+                default:\n+                    if (LOG.isDebugEnabled())\n+                    {\n+                        LOG.debug(\"Ignoring unrecognized mime-type {}\", mimeType);\n+                    }\n+                    break;\n+            }\n+        }\n+        // None of the listed `Accept` mime-types were found.\n+        response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE);\n+    }\n+\n+    private void writeTextResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/plain\");\n+        CharSequence text = generateResponse(new TextProducer());\n+        response.getWriter().print(text.toString());\n+    }\n+\n+    private void writeHtmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/html\");\n+        Writer htmlWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        htmlWriter.append(\"<html><head><title>\");\n+        htmlWriter.append(this.getClass().getSimpleName());\n+        htmlWriter.append(\"</title></head><body>\\n\");\n+        CharSequence html = generateResponse(new HtmlProducer());\n+        htmlWriter.append(html.toString());\n+        htmlWriter.append(\"\\n</body></html>\\n\");\n+        htmlWriter.flush();\n+    }\n+\n+    private void writeXmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/xml\");\n+        CharSequence xml = generateResponse(new XmlProducer());\n+        response.getWriter().print(xml.toString());\n+    }\n \n-        if (Boolean.parseBoolean(wantXml))\n+    private void writeJsonResponse(HttpServletResponse response) throws IOException\n+    {\n+        // We intentionally don't put \"UTF-8\" into the response headers\n+        // as the rules for application/json state that it should never be\n+        // present on the HTTP Content-Type header.\n+        // It is also true that the application/json mime-type is always UTF-8.\n+        response.setContentType(\"application/json\");\n+        CharSequence json = generateResponse(new JsonProducer());\n+        Writer jsonWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        jsonWriter.append(json);\n+        jsonWriter.flush();\n+    }\n+\n+    private List<String> getOrderedAcceptableMimeTypes(HttpServletRequest request)\n+    {\n+        QuotedQualityCSV values = null;\n+        Enumeration<String> enumAccept = request.getHeaders(\"Accept\");\n+        if (enumAccept != null)\n         {\n-            sendXmlResponse(resp);\n+            while (enumAccept.hasMoreElements())\n+            {\n+                String value = enumAccept.nextElement();\n+                if (StringUtil.isNotBlank(value))\n+                {\n+                    if (values == null)\n+                    {\n+                        values = new QuotedQualityCSV(QuotedQualityCSV.MOST_SPECIFIC_MIME_ORDERING);\n+                    }\n+                    values.addValue(value);\n+                }\n+            }\n         }\n-        else\n+\n+        if (values != null)\n         {\n-            sendTextResponse(resp);\n+            return values.getValues();\n         }\n+\n+        // No accept specified, return that we allow ALL mime types\n+        return Collections.singletonList(\"*/*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "178924b8a94b0b9df3aa1423104c4bdca529e6d0"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjExODAzNA==", "bodyText": "On second though, if the Accept header is missing, this is used in it's place.", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r516118034", "createdAt": "2020-11-02T17:00:29Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "diffHunk": "@@ -80,47 +88,150 @@ public void init() throws ServletException\n     }\n \n     @Override\n-    public void doPost(HttpServletRequest sreq, HttpServletResponse sres) throws ServletException, IOException\n+    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n-        doGet(sreq, sres);\n+        doGet(request, response);\n     }\n \n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n         if (_statsHandler == null)\n         {\n             LOG.warn(\"Statistics Handler not installed!\");\n-            resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n             return;\n         }\n         if (_restrictToLocalhost)\n         {\n-            if (!isLoopbackAddress(req.getRemoteAddr()))\n+            if (!isLoopbackAddress(request.getRemoteAddr()))\n             {\n-                resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n                 return;\n             }\n         }\n \n-        if (Boolean.parseBoolean(req.getParameter(\"statsReset\")))\n+        if (Boolean.parseBoolean(request.getParameter(\"statsReset\")))\n         {\n+            response.setStatus(HttpServletResponse.SC_OK);\n             _statsHandler.statsReset();\n             return;\n         }\n \n-        String wantXml = req.getParameter(\"xml\");\n-        if (wantXml == null)\n-            wantXml = req.getParameter(\"XML\");\n+        List<String> acceptable = getOrderedAcceptableMimeTypes(request);\n+\n+        for (String mimeType : acceptable)\n+        {\n+            switch (mimeType)\n+            {\n+                case \"application/json\":\n+                    writeJsonResponse(response);\n+                    return;\n+                case \"text/xml\":\n+                    writeXmlResponse(response);\n+                    return;\n+                case \"text/html\":\n+                    writeHtmlResponse(response);\n+                    return;\n+                case \"text/plain\":\n+                    writeTextResponse(response);\n+                    return;\n+                case \"*/*\":\n+                    String wantXml = request.getParameter(\"xml\");\n+                    if (wantXml == null)\n+                        wantXml = request.getParameter(\"XML\");\n+\n+                    if (Boolean.parseBoolean(wantXml))\n+                    {\n+                        writeXmlResponse(response);\n+                    }\n+                    else\n+                    {\n+                        writeTextResponse(response);\n+                    }\n+                    return;\n+                default:\n+                    if (LOG.isDebugEnabled())\n+                    {\n+                        LOG.debug(\"Ignoring unrecognized mime-type {}\", mimeType);\n+                    }\n+                    break;\n+            }\n+        }\n+        // None of the listed `Accept` mime-types were found.\n+        response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE);\n+    }\n+\n+    private void writeTextResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/plain\");\n+        CharSequence text = generateResponse(new TextProducer());\n+        response.getWriter().print(text.toString());\n+    }\n+\n+    private void writeHtmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/html\");\n+        Writer htmlWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        htmlWriter.append(\"<html><head><title>\");\n+        htmlWriter.append(this.getClass().getSimpleName());\n+        htmlWriter.append(\"</title></head><body>\\n\");\n+        CharSequence html = generateResponse(new HtmlProducer());\n+        htmlWriter.append(html.toString());\n+        htmlWriter.append(\"\\n</body></html>\\n\");\n+        htmlWriter.flush();\n+    }\n+\n+    private void writeXmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/xml\");\n+        CharSequence xml = generateResponse(new XmlProducer());\n+        response.getWriter().print(xml.toString());\n+    }\n \n-        if (Boolean.parseBoolean(wantXml))\n+    private void writeJsonResponse(HttpServletResponse response) throws IOException\n+    {\n+        // We intentionally don't put \"UTF-8\" into the response headers\n+        // as the rules for application/json state that it should never be\n+        // present on the HTTP Content-Type header.\n+        // It is also true that the application/json mime-type is always UTF-8.\n+        response.setContentType(\"application/json\");\n+        CharSequence json = generateResponse(new JsonProducer());\n+        Writer jsonWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        jsonWriter.append(json);\n+        jsonWriter.flush();\n+    }\n+\n+    private List<String> getOrderedAcceptableMimeTypes(HttpServletRequest request)\n+    {\n+        QuotedQualityCSV values = null;\n+        Enumeration<String> enumAccept = request.getHeaders(\"Accept\");\n+        if (enumAccept != null)\n         {\n-            sendXmlResponse(resp);\n+            while (enumAccept.hasMoreElements())\n+            {\n+                String value = enumAccept.nextElement();\n+                if (StringUtil.isNotBlank(value))\n+                {\n+                    if (values == null)\n+                    {\n+                        values = new QuotedQualityCSV(QuotedQualityCSV.MOST_SPECIFIC_MIME_ORDERING);\n+                    }\n+                    values.addValue(value);\n+                }\n+            }\n         }\n-        else\n+\n+        if (values != null)\n         {\n-            sendTextResponse(resp);\n+            return values.getValues();\n         }\n+\n+        // No accept specified, return that we allow ALL mime types\n+        return Collections.singletonList(\"*/*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3MTk5MQ=="}, "originalCommit": {"oid": "178924b8a94b0b9df3aa1423104c4bdca529e6d0"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDUwMTA2OnYy", "diffSide": "RIGHT", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjo1ODo1MlrOHsNRrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDoyNjoxNlrOH0BFEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjExNjkwOQ==", "bodyText": "I think this mechanism is now insufficient.\nInstead I think we need type parameter that can be json,xml, html or plain.\nOnly if their is no type parameter should we look at accepted types\nand finally if there is no preference from the accepted types, we should just send plain.... maybe deprecated support for xml parameter", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r516116909", "createdAt": "2020-11-02T16:58:52Z", "author": {"login": "gregw"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "diffHunk": "@@ -80,47 +88,150 @@ public void init() throws ServletException\n     }\n \n     @Override\n-    public void doPost(HttpServletRequest sreq, HttpServletResponse sres) throws ServletException, IOException\n+    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n-        doGet(sreq, sres);\n+        doGet(request, response);\n     }\n \n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n         if (_statsHandler == null)\n         {\n             LOG.warn(\"Statistics Handler not installed!\");\n-            resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n             return;\n         }\n         if (_restrictToLocalhost)\n         {\n-            if (!isLoopbackAddress(req.getRemoteAddr()))\n+            if (!isLoopbackAddress(request.getRemoteAddr()))\n             {\n-                resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n                 return;\n             }\n         }\n \n-        if (Boolean.parseBoolean(req.getParameter(\"statsReset\")))\n+        if (Boolean.parseBoolean(request.getParameter(\"statsReset\")))\n         {\n+            response.setStatus(HttpServletResponse.SC_OK);\n             _statsHandler.statsReset();\n             return;\n         }\n \n-        String wantXml = req.getParameter(\"xml\");\n-        if (wantXml == null)\n-            wantXml = req.getParameter(\"XML\");\n+        List<String> acceptable = getOrderedAcceptableMimeTypes(request);\n+\n+        for (String mimeType : acceptable)\n+        {\n+            switch (mimeType)\n+            {\n+                case \"application/json\":\n+                    writeJsonResponse(response);\n+                    return;\n+                case \"text/xml\":\n+                    writeXmlResponse(response);\n+                    return;\n+                case \"text/html\":\n+                    writeHtmlResponse(response);\n+                    return;\n+                case \"text/plain\":\n+                    writeTextResponse(response);\n+                    return;\n+                case \"*/*\":\n+                    String wantXml = request.getParameter(\"xml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "178924b8a94b0b9df3aa1423104c4bdca529e6d0"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyMzAyOQ==", "bodyText": "Pushed a change, is this what you are asking for?", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r516123029", "createdAt": "2020-11-02T17:07:53Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "diffHunk": "@@ -80,47 +88,150 @@ public void init() throws ServletException\n     }\n \n     @Override\n-    public void doPost(HttpServletRequest sreq, HttpServletResponse sres) throws ServletException, IOException\n+    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n-        doGet(sreq, sres);\n+        doGet(request, response);\n     }\n \n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n         if (_statsHandler == null)\n         {\n             LOG.warn(\"Statistics Handler not installed!\");\n-            resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n             return;\n         }\n         if (_restrictToLocalhost)\n         {\n-            if (!isLoopbackAddress(req.getRemoteAddr()))\n+            if (!isLoopbackAddress(request.getRemoteAddr()))\n             {\n-                resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n                 return;\n             }\n         }\n \n-        if (Boolean.parseBoolean(req.getParameter(\"statsReset\")))\n+        if (Boolean.parseBoolean(request.getParameter(\"statsReset\")))\n         {\n+            response.setStatus(HttpServletResponse.SC_OK);\n             _statsHandler.statsReset();\n             return;\n         }\n \n-        String wantXml = req.getParameter(\"xml\");\n-        if (wantXml == null)\n-            wantXml = req.getParameter(\"XML\");\n+        List<String> acceptable = getOrderedAcceptableMimeTypes(request);\n+\n+        for (String mimeType : acceptable)\n+        {\n+            switch (mimeType)\n+            {\n+                case \"application/json\":\n+                    writeJsonResponse(response);\n+                    return;\n+                case \"text/xml\":\n+                    writeXmlResponse(response);\n+                    return;\n+                case \"text/html\":\n+                    writeHtmlResponse(response);\n+                    return;\n+                case \"text/plain\":\n+                    writeTextResponse(response);\n+                    return;\n+                case \"*/*\":\n+                    String wantXml = request.getParameter(\"xml\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjExNjkwOQ=="}, "originalCommit": {"oid": "178924b8a94b0b9df3aa1423104c4bdca529e6d0"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyNjE4Ng==", "bodyText": "I still think there is a need for a parameter as it can be difficult to set the accept header in some clients.", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r516126186", "createdAt": "2020-11-02T17:12:44Z", "author": {"login": "gregw"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "diffHunk": "@@ -80,47 +88,150 @@ public void init() throws ServletException\n     }\n \n     @Override\n-    public void doPost(HttpServletRequest sreq, HttpServletResponse sres) throws ServletException, IOException\n+    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n-        doGet(sreq, sres);\n+        doGet(request, response);\n     }\n \n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n         if (_statsHandler == null)\n         {\n             LOG.warn(\"Statistics Handler not installed!\");\n-            resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n             return;\n         }\n         if (_restrictToLocalhost)\n         {\n-            if (!isLoopbackAddress(req.getRemoteAddr()))\n+            if (!isLoopbackAddress(request.getRemoteAddr()))\n             {\n-                resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n                 return;\n             }\n         }\n \n-        if (Boolean.parseBoolean(req.getParameter(\"statsReset\")))\n+        if (Boolean.parseBoolean(request.getParameter(\"statsReset\")))\n         {\n+            response.setStatus(HttpServletResponse.SC_OK);\n             _statsHandler.statsReset();\n             return;\n         }\n \n-        String wantXml = req.getParameter(\"xml\");\n-        if (wantXml == null)\n-            wantXml = req.getParameter(\"XML\");\n+        List<String> acceptable = getOrderedAcceptableMimeTypes(request);\n+\n+        for (String mimeType : acceptable)\n+        {\n+            switch (mimeType)\n+            {\n+                case \"application/json\":\n+                    writeJsonResponse(response);\n+                    return;\n+                case \"text/xml\":\n+                    writeXmlResponse(response);\n+                    return;\n+                case \"text/html\":\n+                    writeHtmlResponse(response);\n+                    return;\n+                case \"text/plain\":\n+                    writeTextResponse(response);\n+                    return;\n+                case \"*/*\":\n+                    String wantXml = request.getParameter(\"xml\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjExNjkwOQ=="}, "originalCommit": {"oid": "178924b8a94b0b9df3aa1423104c4bdca529e6d0"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEzMDM0Nw==", "bodyText": "I still think there is a need for a parameter as it can be difficult to set the accept header in some clients.\n\nIf that were true, REST wouldn't exist like it does today.\nYou can even set the Accept header on a browser when for asking for content in various ways.", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r516130347", "createdAt": "2020-11-02T17:17:29Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "diffHunk": "@@ -80,47 +88,150 @@ public void init() throws ServletException\n     }\n \n     @Override\n-    public void doPost(HttpServletRequest sreq, HttpServletResponse sres) throws ServletException, IOException\n+    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n-        doGet(sreq, sres);\n+        doGet(request, response);\n     }\n \n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n         if (_statsHandler == null)\n         {\n             LOG.warn(\"Statistics Handler not installed!\");\n-            resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n             return;\n         }\n         if (_restrictToLocalhost)\n         {\n-            if (!isLoopbackAddress(req.getRemoteAddr()))\n+            if (!isLoopbackAddress(request.getRemoteAddr()))\n             {\n-                resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n                 return;\n             }\n         }\n \n-        if (Boolean.parseBoolean(req.getParameter(\"statsReset\")))\n+        if (Boolean.parseBoolean(request.getParameter(\"statsReset\")))\n         {\n+            response.setStatus(HttpServletResponse.SC_OK);\n             _statsHandler.statsReset();\n             return;\n         }\n \n-        String wantXml = req.getParameter(\"xml\");\n-        if (wantXml == null)\n-            wantXml = req.getParameter(\"XML\");\n+        List<String> acceptable = getOrderedAcceptableMimeTypes(request);\n+\n+        for (String mimeType : acceptable)\n+        {\n+            switch (mimeType)\n+            {\n+                case \"application/json\":\n+                    writeJsonResponse(response);\n+                    return;\n+                case \"text/xml\":\n+                    writeXmlResponse(response);\n+                    return;\n+                case \"text/html\":\n+                    writeHtmlResponse(response);\n+                    return;\n+                case \"text/plain\":\n+                    writeTextResponse(response);\n+                    return;\n+                case \"*/*\":\n+                    String wantXml = request.getParameter(\"xml\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjExNjkwOQ=="}, "originalCommit": {"oid": "178924b8a94b0b9df3aa1423104c4bdca529e6d0"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0NDExOA==", "bodyText": "Variation using query parameters incoming ...", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r516144118", "createdAt": "2020-11-02T17:35:55Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "diffHunk": "@@ -80,47 +88,150 @@ public void init() throws ServletException\n     }\n \n     @Override\n-    public void doPost(HttpServletRequest sreq, HttpServletResponse sres) throws ServletException, IOException\n+    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n-        doGet(sreq, sres);\n+        doGet(request, response);\n     }\n \n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n         if (_statsHandler == null)\n         {\n             LOG.warn(\"Statistics Handler not installed!\");\n-            resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n             return;\n         }\n         if (_restrictToLocalhost)\n         {\n-            if (!isLoopbackAddress(req.getRemoteAddr()))\n+            if (!isLoopbackAddress(request.getRemoteAddr()))\n             {\n-                resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n                 return;\n             }\n         }\n \n-        if (Boolean.parseBoolean(req.getParameter(\"statsReset\")))\n+        if (Boolean.parseBoolean(request.getParameter(\"statsReset\")))\n         {\n+            response.setStatus(HttpServletResponse.SC_OK);\n             _statsHandler.statsReset();\n             return;\n         }\n \n-        String wantXml = req.getParameter(\"xml\");\n-        if (wantXml == null)\n-            wantXml = req.getParameter(\"XML\");\n+        List<String> acceptable = getOrderedAcceptableMimeTypes(request);\n+\n+        for (String mimeType : acceptable)\n+        {\n+            switch (mimeType)\n+            {\n+                case \"application/json\":\n+                    writeJsonResponse(response);\n+                    return;\n+                case \"text/xml\":\n+                    writeXmlResponse(response);\n+                    return;\n+                case \"text/html\":\n+                    writeHtmlResponse(response);\n+                    return;\n+                case \"text/plain\":\n+                    writeTextResponse(response);\n+                    return;\n+                case \"*/*\":\n+                    String wantXml = request.getParameter(\"xml\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjExNjkwOQ=="}, "originalCommit": {"oid": "178924b8a94b0b9df3aa1423104c4bdca529e6d0"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE1MTUyOA==", "bodyText": "Updated for variation on accept query parameter.", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r516151528", "createdAt": "2020-11-02T17:48:11Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "diffHunk": "@@ -80,47 +88,150 @@ public void init() throws ServletException\n     }\n \n     @Override\n-    public void doPost(HttpServletRequest sreq, HttpServletResponse sres) throws ServletException, IOException\n+    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n-        doGet(sreq, sres);\n+        doGet(request, response);\n     }\n \n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n         if (_statsHandler == null)\n         {\n             LOG.warn(\"Statistics Handler not installed!\");\n-            resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n             return;\n         }\n         if (_restrictToLocalhost)\n         {\n-            if (!isLoopbackAddress(req.getRemoteAddr()))\n+            if (!isLoopbackAddress(request.getRemoteAddr()))\n             {\n-                resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n                 return;\n             }\n         }\n \n-        if (Boolean.parseBoolean(req.getParameter(\"statsReset\")))\n+        if (Boolean.parseBoolean(request.getParameter(\"statsReset\")))\n         {\n+            response.setStatus(HttpServletResponse.SC_OK);\n             _statsHandler.statsReset();\n             return;\n         }\n \n-        String wantXml = req.getParameter(\"xml\");\n-        if (wantXml == null)\n-            wantXml = req.getParameter(\"XML\");\n+        List<String> acceptable = getOrderedAcceptableMimeTypes(request);\n+\n+        for (String mimeType : acceptable)\n+        {\n+            switch (mimeType)\n+            {\n+                case \"application/json\":\n+                    writeJsonResponse(response);\n+                    return;\n+                case \"text/xml\":\n+                    writeXmlResponse(response);\n+                    return;\n+                case \"text/html\":\n+                    writeHtmlResponse(response);\n+                    return;\n+                case \"text/plain\":\n+                    writeTextResponse(response);\n+                    return;\n+                case \"*/*\":\n+                    String wantXml = request.getParameter(\"xml\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjExNjkwOQ=="}, "originalCommit": {"oid": "178924b8a94b0b9df3aa1423104c4bdca529e6d0"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMwNTY4Mg==", "bodyText": "@gregw bump, is the new accept query parameter ... uhm ... acceptable to you?", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r524305682", "createdAt": "2020-11-16T14:26:16Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "diffHunk": "@@ -80,47 +88,150 @@ public void init() throws ServletException\n     }\n \n     @Override\n-    public void doPost(HttpServletRequest sreq, HttpServletResponse sres) throws ServletException, IOException\n+    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n-        doGet(sreq, sres);\n+        doGet(request, response);\n     }\n \n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n         if (_statsHandler == null)\n         {\n             LOG.warn(\"Statistics Handler not installed!\");\n-            resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n             return;\n         }\n         if (_restrictToLocalhost)\n         {\n-            if (!isLoopbackAddress(req.getRemoteAddr()))\n+            if (!isLoopbackAddress(request.getRemoteAddr()))\n             {\n-                resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n                 return;\n             }\n         }\n \n-        if (Boolean.parseBoolean(req.getParameter(\"statsReset\")))\n+        if (Boolean.parseBoolean(request.getParameter(\"statsReset\")))\n         {\n+            response.setStatus(HttpServletResponse.SC_OK);\n             _statsHandler.statsReset();\n             return;\n         }\n \n-        String wantXml = req.getParameter(\"xml\");\n-        if (wantXml == null)\n-            wantXml = req.getParameter(\"XML\");\n+        List<String> acceptable = getOrderedAcceptableMimeTypes(request);\n+\n+        for (String mimeType : acceptable)\n+        {\n+            switch (mimeType)\n+            {\n+                case \"application/json\":\n+                    writeJsonResponse(response);\n+                    return;\n+                case \"text/xml\":\n+                    writeXmlResponse(response);\n+                    return;\n+                case \"text/html\":\n+                    writeHtmlResponse(response);\n+                    return;\n+                case \"text/plain\":\n+                    writeTextResponse(response);\n+                    return;\n+                case \"*/*\":\n+                    String wantXml = request.getParameter(\"xml\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjExNjkwOQ=="}, "originalCommit": {"oid": "178924b8a94b0b9df3aa1423104c4bdca529e6d0"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDcyOTcxOnYy", "diffSide": "RIGHT", "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/WebInfConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzo0OTowOFrOHsPbGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTowMToyM1rOHsR11g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE1MjA4OQ==", "bodyText": "I added these to troubleshoot the CI build/test failure on these.\nCI is reporting more resources than expected.", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r516152089", "createdAt": "2020-11-02T17:49:08Z", "author": {"login": "joakime"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/WebInfConfigurationTest.java", "diffHunk": "@@ -72,7 +73,7 @@ public void testFindAndFilterContainerPaths()\n         context.setClassLoader(loader);\n         config.findAndFilterContainerPaths(context);\n         List<Resource> containerResources = context.getMetaData().getContainerResources();\n-        assertEquals(1, containerResources.size());\n+        assertEquals(1, containerResources.size(), () -> containerResources.stream().map(Resource::toString).collect(Collectors.joining(\",\", \"[\", \"]\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99dfdaceea30eb8d9a196dfa6bd6279f7b69f71d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5MTcwMg==", "bodyText": "Fixed.\nLooks like the container include jar pattern ...\ncontext.setAttribute(WebInfConfiguration.CONTAINER_JAR_PATTERN, \".*/jetty-util-[^/]*\\\\.jar$|.*/jetty-util/target/classes/\");\n... occasionally finds jetty-util-ajax-9.4.34-SNAPSHOT.jar as well.", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r516191702", "createdAt": "2020-11-02T19:01:23Z", "author": {"login": "joakime"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/WebInfConfigurationTest.java", "diffHunk": "@@ -72,7 +73,7 @@ public void testFindAndFilterContainerPaths()\n         context.setClassLoader(loader);\n         config.findAndFilterContainerPaths(context);\n         List<Resource> containerResources = context.getMetaData().getContainerResources();\n-        assertEquals(1, containerResources.size());\n+        assertEquals(1, containerResources.size(), () -> containerResources.stream().map(Resource::toString).collect(Collectors.joining(\",\", \"[\", \"]\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE1MjA4OQ=="}, "originalCommit": {"oid": "99dfdaceea30eb8d9a196dfa6bd6279f7b69f71d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzQyOTkwOnYy", "diffSide": "RIGHT", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDozMTowNlrOH0BTTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDo1MDo1MFrOH0COVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMwOTMyNQ==", "bodyText": "Use HttpHeader.ACCEPT", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r524309325", "createdAt": "2020-11-16T14:31:06Z", "author": {"login": "gregw"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "diffHunk": "@@ -80,47 +101,151 @@ public void init() throws ServletException\n     }\n \n     @Override\n-    public void doPost(HttpServletRequest sreq, HttpServletResponse sres) throws ServletException, IOException\n+    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n-        doGet(sreq, sres);\n+        doGet(request, response);\n     }\n \n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n         if (_statsHandler == null)\n         {\n             LOG.warn(\"Statistics Handler not installed!\");\n-            resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n             return;\n         }\n         if (_restrictToLocalhost)\n         {\n-            if (!isLoopbackAddress(req.getRemoteAddr()))\n+            if (!isLoopbackAddress(request.getRemoteAddr()))\n             {\n-                resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n                 return;\n             }\n         }\n \n-        if (Boolean.parseBoolean(req.getParameter(\"statsReset\")))\n+        if (Boolean.parseBoolean(request.getParameter(\"statsReset\")))\n         {\n+            response.setStatus(HttpServletResponse.SC_OK);\n             _statsHandler.statsReset();\n             return;\n         }\n \n-        String wantXml = req.getParameter(\"xml\");\n-        if (wantXml == null)\n-            wantXml = req.getParameter(\"XML\");\n+        if (request.getParameter(\"xml\") != null)\n+        {\n+            LOG.warn(\"'xml' parameter is deprecated, use 'Accept' request header instead\");\n+        }\n+\n+        List<String> acceptable = getOrderedAcceptableMimeTypes(request);\n \n-        if (Boolean.parseBoolean(wantXml))\n+        for (String mimeType : acceptable)\n         {\n-            sendXmlResponse(resp);\n+            switch (mimeType)\n+            {\n+                case \"application/json\":\n+                    writeJsonResponse(response);\n+                    return;\n+                case \"text/xml\":\n+                    writeXmlResponse(response);\n+                    return;\n+                case \"text/html\":\n+                    writeHtmlResponse(response);\n+                    return;\n+                case \"text/plain\":\n+                case \"*/*\":\n+                    writeTextResponse(response);\n+                    return;\n+                default:\n+                    if (LOG.isDebugEnabled())\n+                    {\n+                        LOG.debug(\"Ignoring unrecognized mime-type {}\", mimeType);\n+                    }\n+                    break;\n+            }\n         }\n-        else\n+        // None of the listed `Accept` mime-types were found.\n+        response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE);\n+    }\n+\n+    private void writeTextResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/plain\");\n+        CharSequence text = generateResponse(new TextProducer());\n+        response.getWriter().print(text.toString());\n+    }\n+\n+    private void writeHtmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/html\");\n+        Writer htmlWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        htmlWriter.append(\"<html><head><title>\");\n+        htmlWriter.append(this.getClass().getSimpleName());\n+        htmlWriter.append(\"</title></head><body>\\n\");\n+        CharSequence html = generateResponse(new HtmlProducer());\n+        htmlWriter.append(html.toString());\n+        htmlWriter.append(\"\\n</body></html>\\n\");\n+        htmlWriter.flush();\n+    }\n+\n+    private void writeXmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/xml\");\n+        CharSequence xml = generateResponse(new XmlProducer());\n+        response.getWriter().print(xml.toString());\n+    }\n+\n+    private void writeJsonResponse(HttpServletResponse response) throws IOException\n+    {\n+        // We intentionally don't put \"UTF-8\" into the response headers\n+        // as the rules for application/json state that it should never be\n+        // present on the HTTP Content-Type header.\n+        // It is also true that the application/json mime-type is always UTF-8.\n+        response.setContentType(\"application/json\");\n+        CharSequence json = generateResponse(new JsonProducer());\n+        Writer jsonWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        jsonWriter.append(json);\n+        jsonWriter.flush();\n+    }\n+\n+    private List<String> getOrderedAcceptableMimeTypes(HttpServletRequest request)\n+    {\n+        QuotedQualityCSV values = null;\n+        Enumeration<String> enumAccept = request.getHeaders(\"Accept\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4ce84bbe1f2f11651c94db5176db6ef9bab07bc"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMxNjA3OA==", "bodyText": "Not from a Servlet.", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r524316078", "createdAt": "2020-11-16T14:39:56Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "diffHunk": "@@ -80,47 +101,151 @@ public void init() throws ServletException\n     }\n \n     @Override\n-    public void doPost(HttpServletRequest sreq, HttpServletResponse sres) throws ServletException, IOException\n+    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n-        doGet(sreq, sres);\n+        doGet(request, response);\n     }\n \n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n         if (_statsHandler == null)\n         {\n             LOG.warn(\"Statistics Handler not installed!\");\n-            resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n             return;\n         }\n         if (_restrictToLocalhost)\n         {\n-            if (!isLoopbackAddress(req.getRemoteAddr()))\n+            if (!isLoopbackAddress(request.getRemoteAddr()))\n             {\n-                resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n                 return;\n             }\n         }\n \n-        if (Boolean.parseBoolean(req.getParameter(\"statsReset\")))\n+        if (Boolean.parseBoolean(request.getParameter(\"statsReset\")))\n         {\n+            response.setStatus(HttpServletResponse.SC_OK);\n             _statsHandler.statsReset();\n             return;\n         }\n \n-        String wantXml = req.getParameter(\"xml\");\n-        if (wantXml == null)\n-            wantXml = req.getParameter(\"XML\");\n+        if (request.getParameter(\"xml\") != null)\n+        {\n+            LOG.warn(\"'xml' parameter is deprecated, use 'Accept' request header instead\");\n+        }\n+\n+        List<String> acceptable = getOrderedAcceptableMimeTypes(request);\n \n-        if (Boolean.parseBoolean(wantXml))\n+        for (String mimeType : acceptable)\n         {\n-            sendXmlResponse(resp);\n+            switch (mimeType)\n+            {\n+                case \"application/json\":\n+                    writeJsonResponse(response);\n+                    return;\n+                case \"text/xml\":\n+                    writeXmlResponse(response);\n+                    return;\n+                case \"text/html\":\n+                    writeHtmlResponse(response);\n+                    return;\n+                case \"text/plain\":\n+                case \"*/*\":\n+                    writeTextResponse(response);\n+                    return;\n+                default:\n+                    if (LOG.isDebugEnabled())\n+                    {\n+                        LOG.debug(\"Ignoring unrecognized mime-type {}\", mimeType);\n+                    }\n+                    break;\n+            }\n         }\n-        else\n+        // None of the listed `Accept` mime-types were found.\n+        response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE);\n+    }\n+\n+    private void writeTextResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/plain\");\n+        CharSequence text = generateResponse(new TextProducer());\n+        response.getWriter().print(text.toString());\n+    }\n+\n+    private void writeHtmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/html\");\n+        Writer htmlWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        htmlWriter.append(\"<html><head><title>\");\n+        htmlWriter.append(this.getClass().getSimpleName());\n+        htmlWriter.append(\"</title></head><body>\\n\");\n+        CharSequence html = generateResponse(new HtmlProducer());\n+        htmlWriter.append(html.toString());\n+        htmlWriter.append(\"\\n</body></html>\\n\");\n+        htmlWriter.flush();\n+    }\n+\n+    private void writeXmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/xml\");\n+        CharSequence xml = generateResponse(new XmlProducer());\n+        response.getWriter().print(xml.toString());\n+    }\n+\n+    private void writeJsonResponse(HttpServletResponse response) throws IOException\n+    {\n+        // We intentionally don't put \"UTF-8\" into the response headers\n+        // as the rules for application/json state that it should never be\n+        // present on the HTTP Content-Type header.\n+        // It is also true that the application/json mime-type is always UTF-8.\n+        response.setContentType(\"application/json\");\n+        CharSequence json = generateResponse(new JsonProducer());\n+        Writer jsonWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        jsonWriter.append(json);\n+        jsonWriter.flush();\n+    }\n+\n+    private List<String> getOrderedAcceptableMimeTypes(HttpServletRequest request)\n+    {\n+        QuotedQualityCSV values = null;\n+        Enumeration<String> enumAccept = request.getHeaders(\"Accept\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMwOTMyNQ=="}, "originalCommit": {"oid": "c4ce84bbe1f2f11651c94db5176db6ef9bab07bc"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMyNDQzNw==", "bodyText": "Never mind. I can from this particular servlet.\nBut not against the jetty field apis.", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r524324437", "createdAt": "2020-11-16T14:50:50Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "diffHunk": "@@ -80,47 +101,151 @@ public void init() throws ServletException\n     }\n \n     @Override\n-    public void doPost(HttpServletRequest sreq, HttpServletResponse sres) throws ServletException, IOException\n+    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n-        doGet(sreq, sres);\n+        doGet(request, response);\n     }\n \n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n         if (_statsHandler == null)\n         {\n             LOG.warn(\"Statistics Handler not installed!\");\n-            resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n             return;\n         }\n         if (_restrictToLocalhost)\n         {\n-            if (!isLoopbackAddress(req.getRemoteAddr()))\n+            if (!isLoopbackAddress(request.getRemoteAddr()))\n             {\n-                resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n                 return;\n             }\n         }\n \n-        if (Boolean.parseBoolean(req.getParameter(\"statsReset\")))\n+        if (Boolean.parseBoolean(request.getParameter(\"statsReset\")))\n         {\n+            response.setStatus(HttpServletResponse.SC_OK);\n             _statsHandler.statsReset();\n             return;\n         }\n \n-        String wantXml = req.getParameter(\"xml\");\n-        if (wantXml == null)\n-            wantXml = req.getParameter(\"XML\");\n+        if (request.getParameter(\"xml\") != null)\n+        {\n+            LOG.warn(\"'xml' parameter is deprecated, use 'Accept' request header instead\");\n+        }\n+\n+        List<String> acceptable = getOrderedAcceptableMimeTypes(request);\n \n-        if (Boolean.parseBoolean(wantXml))\n+        for (String mimeType : acceptable)\n         {\n-            sendXmlResponse(resp);\n+            switch (mimeType)\n+            {\n+                case \"application/json\":\n+                    writeJsonResponse(response);\n+                    return;\n+                case \"text/xml\":\n+                    writeXmlResponse(response);\n+                    return;\n+                case \"text/html\":\n+                    writeHtmlResponse(response);\n+                    return;\n+                case \"text/plain\":\n+                case \"*/*\":\n+                    writeTextResponse(response);\n+                    return;\n+                default:\n+                    if (LOG.isDebugEnabled())\n+                    {\n+                        LOG.debug(\"Ignoring unrecognized mime-type {}\", mimeType);\n+                    }\n+                    break;\n+            }\n         }\n-        else\n+        // None of the listed `Accept` mime-types were found.\n+        response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE);\n+    }\n+\n+    private void writeTextResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/plain\");\n+        CharSequence text = generateResponse(new TextProducer());\n+        response.getWriter().print(text.toString());\n+    }\n+\n+    private void writeHtmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/html\");\n+        Writer htmlWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        htmlWriter.append(\"<html><head><title>\");\n+        htmlWriter.append(this.getClass().getSimpleName());\n+        htmlWriter.append(\"</title></head><body>\\n\");\n+        CharSequence html = generateResponse(new HtmlProducer());\n+        htmlWriter.append(html.toString());\n+        htmlWriter.append(\"\\n</body></html>\\n\");\n+        htmlWriter.flush();\n+    }\n+\n+    private void writeXmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/xml\");\n+        CharSequence xml = generateResponse(new XmlProducer());\n+        response.getWriter().print(xml.toString());\n+    }\n+\n+    private void writeJsonResponse(HttpServletResponse response) throws IOException\n+    {\n+        // We intentionally don't put \"UTF-8\" into the response headers\n+        // as the rules for application/json state that it should never be\n+        // present on the HTTP Content-Type header.\n+        // It is also true that the application/json mime-type is always UTF-8.\n+        response.setContentType(\"application/json\");\n+        CharSequence json = generateResponse(new JsonProducer());\n+        Writer jsonWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        jsonWriter.append(json);\n+        jsonWriter.flush();\n+    }\n+\n+    private List<String> getOrderedAcceptableMimeTypes(HttpServletRequest request)\n+    {\n+        QuotedQualityCSV values = null;\n+        Enumeration<String> enumAccept = request.getHeaders(\"Accept\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMwOTMyNQ=="}, "originalCommit": {"oid": "c4ce84bbe1f2f11651c94db5176db6ef9bab07bc"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzQ0OTEwOnYy", "diffSide": "RIGHT", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDozNDo1NlrOH0BeyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNToxMDo1NVrOH0DIqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMxMjI2NA==", "bodyText": "I think it should be the other way around.  Ie the URI specifies the acceptable type, then it should have precedence, otherwise use the Accept header.\nAlternately allow the accept parameter to be a quoted quality string and just do something like:\n\ufffc        values = new QuotedQualityCSV(QuotedQualityCSV.MOST_SPECIFIC_MIME_ORDERING);\n        values.addValue(request.getParameter(\"accept\"));\n        calues.addValue(all the Accept headers)\nand then let the quality mechanism work out the order.", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r524312264", "createdAt": "2020-11-16T14:34:56Z", "author": {"login": "gregw"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "diffHunk": "@@ -80,47 +101,151 @@ public void init() throws ServletException\n     }\n \n     @Override\n-    public void doPost(HttpServletRequest sreq, HttpServletResponse sres) throws ServletException, IOException\n+    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n-        doGet(sreq, sres);\n+        doGet(request, response);\n     }\n \n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n         if (_statsHandler == null)\n         {\n             LOG.warn(\"Statistics Handler not installed!\");\n-            resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n             return;\n         }\n         if (_restrictToLocalhost)\n         {\n-            if (!isLoopbackAddress(req.getRemoteAddr()))\n+            if (!isLoopbackAddress(request.getRemoteAddr()))\n             {\n-                resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n                 return;\n             }\n         }\n \n-        if (Boolean.parseBoolean(req.getParameter(\"statsReset\")))\n+        if (Boolean.parseBoolean(request.getParameter(\"statsReset\")))\n         {\n+            response.setStatus(HttpServletResponse.SC_OK);\n             _statsHandler.statsReset();\n             return;\n         }\n \n-        String wantXml = req.getParameter(\"xml\");\n-        if (wantXml == null)\n-            wantXml = req.getParameter(\"XML\");\n+        if (request.getParameter(\"xml\") != null)\n+        {\n+            LOG.warn(\"'xml' parameter is deprecated, use 'Accept' request header instead\");\n+        }\n+\n+        List<String> acceptable = getOrderedAcceptableMimeTypes(request);\n \n-        if (Boolean.parseBoolean(wantXml))\n+        for (String mimeType : acceptable)\n         {\n-            sendXmlResponse(resp);\n+            switch (mimeType)\n+            {\n+                case \"application/json\":\n+                    writeJsonResponse(response);\n+                    return;\n+                case \"text/xml\":\n+                    writeXmlResponse(response);\n+                    return;\n+                case \"text/html\":\n+                    writeHtmlResponse(response);\n+                    return;\n+                case \"text/plain\":\n+                case \"*/*\":\n+                    writeTextResponse(response);\n+                    return;\n+                default:\n+                    if (LOG.isDebugEnabled())\n+                    {\n+                        LOG.debug(\"Ignoring unrecognized mime-type {}\", mimeType);\n+                    }\n+                    break;\n+            }\n         }\n-        else\n+        // None of the listed `Accept` mime-types were found.\n+        response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE);\n+    }\n+\n+    private void writeTextResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/plain\");\n+        CharSequence text = generateResponse(new TextProducer());\n+        response.getWriter().print(text.toString());\n+    }\n+\n+    private void writeHtmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/html\");\n+        Writer htmlWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        htmlWriter.append(\"<html><head><title>\");\n+        htmlWriter.append(this.getClass().getSimpleName());\n+        htmlWriter.append(\"</title></head><body>\\n\");\n+        CharSequence html = generateResponse(new HtmlProducer());\n+        htmlWriter.append(html.toString());\n+        htmlWriter.append(\"\\n</body></html>\\n\");\n+        htmlWriter.flush();\n+    }\n+\n+    private void writeXmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/xml\");\n+        CharSequence xml = generateResponse(new XmlProducer());\n+        response.getWriter().print(xml.toString());\n+    }\n+\n+    private void writeJsonResponse(HttpServletResponse response) throws IOException\n+    {\n+        // We intentionally don't put \"UTF-8\" into the response headers\n+        // as the rules for application/json state that it should never be\n+        // present on the HTTP Content-Type header.\n+        // It is also true that the application/json mime-type is always UTF-8.\n+        response.setContentType(\"application/json\");\n+        CharSequence json = generateResponse(new JsonProducer());\n+        Writer jsonWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        jsonWriter.append(json);\n+        jsonWriter.flush();\n+    }\n+\n+    private List<String> getOrderedAcceptableMimeTypes(HttpServletRequest request)\n+    {\n+        QuotedQualityCSV values = null;\n+        Enumeration<String> enumAccept = request.getHeaders(\"Accept\");\n+        if (enumAccept != null)\n+        {\n+            while (enumAccept.hasMoreElements())\n+            {\n+                String value = enumAccept.nextElement();\n+                if (StringUtil.isNotBlank(value))\n+                {\n+                    if (values == null)\n+                    {\n+                        values = new QuotedQualityCSV(QuotedQualityCSV.MOST_SPECIFIC_MIME_ORDERING);\n+                    }\n+                    values.addValue(value);\n+                }\n+            }\n+        }\n+\n+        if (values != null)\n         {\n-            sendTextResponse(resp);\n+            return values.getValues();\n         }\n+\n+        // No accept header specified, try 'accept' parameter (for those clients that are\n+        // so ancient that they cannot set the standard HTTP `Accept` header)\n+        String acceptParameter = request.getParameter(\"accept\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4ce84bbe1f2f11651c94db5176db6ef9bab07bc"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMzOTM3MA==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r524339370", "createdAt": "2020-11-16T15:10:55Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "diffHunk": "@@ -80,47 +101,151 @@ public void init() throws ServletException\n     }\n \n     @Override\n-    public void doPost(HttpServletRequest sreq, HttpServletResponse sres) throws ServletException, IOException\n+    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n-        doGet(sreq, sres);\n+        doGet(request, response);\n     }\n \n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n         if (_statsHandler == null)\n         {\n             LOG.warn(\"Statistics Handler not installed!\");\n-            resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n             return;\n         }\n         if (_restrictToLocalhost)\n         {\n-            if (!isLoopbackAddress(req.getRemoteAddr()))\n+            if (!isLoopbackAddress(request.getRemoteAddr()))\n             {\n-                resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n                 return;\n             }\n         }\n \n-        if (Boolean.parseBoolean(req.getParameter(\"statsReset\")))\n+        if (Boolean.parseBoolean(request.getParameter(\"statsReset\")))\n         {\n+            response.setStatus(HttpServletResponse.SC_OK);\n             _statsHandler.statsReset();\n             return;\n         }\n \n-        String wantXml = req.getParameter(\"xml\");\n-        if (wantXml == null)\n-            wantXml = req.getParameter(\"XML\");\n+        if (request.getParameter(\"xml\") != null)\n+        {\n+            LOG.warn(\"'xml' parameter is deprecated, use 'Accept' request header instead\");\n+        }\n+\n+        List<String> acceptable = getOrderedAcceptableMimeTypes(request);\n \n-        if (Boolean.parseBoolean(wantXml))\n+        for (String mimeType : acceptable)\n         {\n-            sendXmlResponse(resp);\n+            switch (mimeType)\n+            {\n+                case \"application/json\":\n+                    writeJsonResponse(response);\n+                    return;\n+                case \"text/xml\":\n+                    writeXmlResponse(response);\n+                    return;\n+                case \"text/html\":\n+                    writeHtmlResponse(response);\n+                    return;\n+                case \"text/plain\":\n+                case \"*/*\":\n+                    writeTextResponse(response);\n+                    return;\n+                default:\n+                    if (LOG.isDebugEnabled())\n+                    {\n+                        LOG.debug(\"Ignoring unrecognized mime-type {}\", mimeType);\n+                    }\n+                    break;\n+            }\n         }\n-        else\n+        // None of the listed `Accept` mime-types were found.\n+        response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE);\n+    }\n+\n+    private void writeTextResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/plain\");\n+        CharSequence text = generateResponse(new TextProducer());\n+        response.getWriter().print(text.toString());\n+    }\n+\n+    private void writeHtmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/html\");\n+        Writer htmlWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        htmlWriter.append(\"<html><head><title>\");\n+        htmlWriter.append(this.getClass().getSimpleName());\n+        htmlWriter.append(\"</title></head><body>\\n\");\n+        CharSequence html = generateResponse(new HtmlProducer());\n+        htmlWriter.append(html.toString());\n+        htmlWriter.append(\"\\n</body></html>\\n\");\n+        htmlWriter.flush();\n+    }\n+\n+    private void writeXmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/xml\");\n+        CharSequence xml = generateResponse(new XmlProducer());\n+        response.getWriter().print(xml.toString());\n+    }\n+\n+    private void writeJsonResponse(HttpServletResponse response) throws IOException\n+    {\n+        // We intentionally don't put \"UTF-8\" into the response headers\n+        // as the rules for application/json state that it should never be\n+        // present on the HTTP Content-Type header.\n+        // It is also true that the application/json mime-type is always UTF-8.\n+        response.setContentType(\"application/json\");\n+        CharSequence json = generateResponse(new JsonProducer());\n+        Writer jsonWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        jsonWriter.append(json);\n+        jsonWriter.flush();\n+    }\n+\n+    private List<String> getOrderedAcceptableMimeTypes(HttpServletRequest request)\n+    {\n+        QuotedQualityCSV values = null;\n+        Enumeration<String> enumAccept = request.getHeaders(\"Accept\");\n+        if (enumAccept != null)\n+        {\n+            while (enumAccept.hasMoreElements())\n+            {\n+                String value = enumAccept.nextElement();\n+                if (StringUtil.isNotBlank(value))\n+                {\n+                    if (values == null)\n+                    {\n+                        values = new QuotedQualityCSV(QuotedQualityCSV.MOST_SPECIFIC_MIME_ORDERING);\n+                    }\n+                    values.addValue(value);\n+                }\n+            }\n+        }\n+\n+        if (values != null)\n         {\n-            sendTextResponse(resp);\n+            return values.getValues();\n         }\n+\n+        // No accept header specified, try 'accept' parameter (for those clients that are\n+        // so ancient that they cannot set the standard HTTP `Accept` header)\n+        String acceptParameter = request.getParameter(\"accept\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMxMjI2NA=="}, "originalCommit": {"oid": "c4ce84bbe1f2f11651c94db5176db6ef9bab07bc"}, "originalPosition": 245}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2205, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}