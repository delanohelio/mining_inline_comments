{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMjcyNjM5", "number": 4838, "title": "Issue #4835 - Addressing flush/commit with GzipHttpOutputInterceptor", "bodyText": "Signed-off-by: Joakim Erdfelt joakim.erdfelt@gmail.com\nCloses #4835", "createdAt": "2020-05-01T19:44:07Z", "url": "https://github.com/eclipse/jetty.project/pull/4838", "merged": true, "mergeCommit": {"oid": "e4fd49dc36eb08ff28b19f1efde92dc9cb08fdfd"}, "closed": true, "closedAt": "2020-05-05T14:54:42Z", "author": {"login": "joakime"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdHCqoAH2gAyNDEyMjcyNjM5OmM2NDVkMGY3YzRhYmYzMWE4Y2ExZTU2Zjc5ODJkZTMzZWZlZjhlODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceUhGeAFqTQwNTgxNDUwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c645d0f7c4abf31a8ca1e56f7982de33efef8e88", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/c645d0f7c4abf31a8ca1e56f7982de33efef8e88", "committedDate": "2020-05-01T19:42:08Z", "message": "Issue #4835 - Addressing flush/commit with GzipHttpOutputInterceptor\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTkyODM0", "url": "https://github.com/eclipse/jetty.project/pull/4838#pullrequestreview-404592834", "createdAt": "2020-05-03T08:11:40Z", "commit": {"oid": "c645d0f7c4abf31a8ca1e56f7982de33efef8e88"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwODoxMTo0MFrOGPpyqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwODoyMDoxNFrOGPp2qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NjUzOQ==", "bodyText": "Don't use static for these fields.", "url": "https://github.com/eclipse/jetty.project/pull/4838#discussion_r419066539", "createdAt": "2020-05-03T08:11:40Z", "author": {"login": "sbordet"}, "path": "jetty-servlet/src/test/java/org/eclipse/jetty/servlet/GzipHandlerCommitTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.servlet;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.handler.gzip.GzipHandler;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.lessThan;\n+\n+public class GzipHandlerCommitTest\n+{\n+    private static Server server;\n+    private static HttpClient client;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c645d0f7c4abf31a8ca1e56f7982de33efef8e88"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NzU2MQ==", "bodyText": "These tests could be rewritten easily so that each test passes its own Servlet implementation to the Server startup.\nThen, it would be easy to use a latch to coordinate with the client, so that the test does not need to wait 2000 ms but it will be immediate.\nPseudo code:\n@Test\npublic void test() {\n  CountDownLatch latch = new CountDownLatch(1);\n  start(new HttpServlet() {\n    service(request, response) {\n      response.flushBuffer();\n      latch.await();\n    }\n  });\n\n  client.newRequest(...)\n    .onResponseHeaders(response -> latch.countDown())\n    ...\n    .send();\n}", "url": "https://github.com/eclipse/jetty.project/pull/4838#discussion_r419067561", "createdAt": "2020-05-03T08:20:14Z", "author": {"login": "sbordet"}, "path": "jetty-servlet/src/test/java/org/eclipse/jetty/servlet/GzipHandlerCommitTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.servlet;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.handler.gzip.GzipHandler;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.lessThan;\n+\n+public class GzipHandlerCommitTest\n+{\n+    private static Server server;\n+    private static HttpClient client;\n+\n+    @BeforeEach\n+    public void startUp() throws Exception\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        connector.setPort(0);\n+        server.addConnector(connector);\n+\n+        ServletContextHandler contextHandler = new ServletContextHandler();\n+        contextHandler.setContextPath(\"/\");\n+        contextHandler.addServlet(FlushBufferServlet.class, \"/flush-buffer/*\");\n+\n+        GzipHandler gzipHandler = new GzipHandler();\n+        gzipHandler.setHandler(contextHandler);\n+\n+        server.setHandler(gzipHandler);\n+        server.start();\n+\n+        client = new HttpClient();\n+        client.start();\n+    }\n+\n+    @AfterEach\n+    public void tearDown()\n+    {\n+        LifeCycle.stop(client);\n+        LifeCycle.stop(server);\n+    }\n+\n+    /**\n+     * A servlet should be able to flush and then produce no content.\n+     */\n+    @Test\n+    public void testFlushNoContent() throws Exception\n+    {\n+        long delay = 2000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c645d0f7c4abf31a8ca1e56f7982de33efef8e88"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTk3ODQ0", "url": "https://github.com/eclipse/jetty.project/pull/4838#pullrequestreview-404597844", "createdAt": "2020-05-03T09:14:23Z", "commit": {"oid": "c645d0f7c4abf31a8ca1e56f7982de33efef8e88"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwOToxNDoyM1rOGPqOxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwOToxNDoyM1rOGPqOxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA3MzczMw==", "bodyText": "Let's be very explicit that we are just writing the headers:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (content.remaining() == 0)\n          \n          \n            \n                        {\n          \n          \n            \n                            // We are committing, and we have no content to compress.\n          \n          \n            \n                            _interceptor.write(content, complete, callback);\n          \n          \n            \n                        }\n          \n          \n            \n                        if (BufferUtil.isEmpty(content))\n          \n          \n            \n                        {\n          \n          \n            \n                            // We are committing, but have no content to compress, so flush empty buffer to write headers.\n          \n          \n            \n                            _interceptor.write(BufferUtil.EMPTY_BUFFER, complete, callback);\n          \n          \n            \n                        }\n          \n      \n    \n    \n  \n\nI've also used BufferUtil to protect against a null content... probably would not happen, but there is only one other place in this method that assumes a non null content, so may as well protect.  So also change the content.remaining on 208 to BufferUtil.remaining(content)", "url": "https://github.com/eclipse/jetty.project/pull/4838#discussion_r419073733", "createdAt": "2020-05-03T09:14:23Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/gzip/GzipHttpOutputInterceptor.java", "diffHunk": "@@ -229,7 +229,15 @@ protected void commit(ByteBuffer content, boolean complete, Callback callback)\n             LOG.debug(\"{} compressing {}\", this, _deflater);\n             _state.set(GZState.COMPRESSING);\n \n-            gzip(content, complete, callback);\n+            if (content.remaining() == 0)\n+            {\n+                // We are committing, and we have no content to compress.\n+                _interceptor.write(content, complete, callback);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c645d0f7c4abf31a8ca1e56f7982de33efef8e88"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d58da0f7d2e30c732f52a38feaba2974e299bf70", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/d58da0f7d2e30c732f52a38feaba2974e299bf70", "committedDate": "2020-05-04T14:22:08Z", "message": "Issue #4824 - Addressing flush/commit with GzipHttpOutputInterceptor\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1ODE0NTA5", "url": "https://github.com/eclipse/jetty.project/pull/4838#pullrequestreview-405814509", "createdAt": "2020-05-05T13:58:04Z", "commit": {"oid": "d58da0f7d2e30c732f52a38feaba2974e299bf70"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 369, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}