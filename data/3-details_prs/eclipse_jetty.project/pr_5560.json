{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MTUxOTU2", "number": 5560, "title": "Issue #5539 - Proper StatisticsServlet output format via content negotiation", "bodyText": "StatisticsServer can now present it's information in (text, html, json, and xml).\nSelected via normal HTTP content negotiation.\nExample output (expand to see details)\n\n$ curl -H \"Accept: text/xml\" http://localhost:9090/stats\n<statistics>\n  <connections>\n    <connection>\n      <name>org.eclipse.jetty.server.ServerConnector@4A87761D</name>\n      <protocols>\n        <protocol>http/1.1</protocol>\n      </protocols>\n      <statsOn>false</statsOn>\n    </connection>\n  </connections>\n  <memory>\n    <heapMemoryUsage>359372240</heapMemoryUsage>\n    <nonHeapMemoryUsage>22923928</nonHeapMemoryUsage>\n  </memory>\n  <requests>\n    <asyncRequests>0</asyncRequests>\n    <dispatched>8</dispatched>\n    <dispatchedActive>1</dispatchedActive>\n    <dispatchedActiveMax>1</dispatchedActiveMax>\n    <dispatchedTimeMax>12</dispatchedTimeMax>\n    <dispatchedTimeMean>3.857142857142857</dispatchedTimeMean>\n    <dispatchedTimeStdDev>3.0613177990314346</dispatchedTimeStdDev>\n    <dispatchedTimeTotal>27</dispatchedTimeTotal>\n    <errors>0</errors>\n    <requests>8</requests>\n    <requestsActive>1</requestsActive>\n    <requestsActiveMax>1</requestsActiveMax>\n    <requestsExpired>0</requestsExpired>\n    <requestsResumed>0</requestsResumed>\n    <requestsSuspended>0</requestsSuspended>\n    <requestsSuspendedMax>0</requestsSuspendedMax>\n    <requestsTimeMax>12</requestsTimeMax>\n    <requestsTimeMean>3.857142857142857</requestsTimeMean>\n    <requestsTimeStdDev>3.0613177990314346</requestsTimeStdDev>\n    <requestsTimeTotal>27</requestsTimeTotal>\n    <statsOnMs>132823</statsOnMs>\n  </requests>\n  <responses>\n    <responses1xx>0</responses1xx>\n    <responses2xx>6</responses2xx>\n    <responses3xx>0</responses3xx>\n    <responses4xx>1</responses4xx>\n    <responses5xx>0</responses5xx>\n    <responsesBytesTotal>6996</responsesBytesTotal>\n  </responses>\n</statistics>\n\n\n$ curl -H \"Accept: application/json\" http://localhost:9090/stats | json_pp \n{\n   \"requests\" : {\n      \"dispatchedActive\" : 1,\n      \"requestsActiveMax\" : 1,\n      \"requestsTimeStdDev\" : 3.11094840844396,\n      \"statsOnMs\" : 97118,\n      \"errors\" : 0,\n      \"requestsActive\" : 1,\n      \"requestsExpired\" : 0,\n      \"dispatchedTimeTotal\" : 26,\n      \"asyncRequests\" : 0,\n      \"dispatchedTimeMax\" : 12,\n      \"requestsSuspendedMax\" : 0,\n      \"requestsTimeTotal\" : 26,\n      \"requestsTimeMax\" : 12,\n      \"requestsSuspended\" : 0,\n      \"requestsTimeMean\" : 4.33333333333333,\n      \"dispatchedTimeStdDev\" : 3.11094840844396,\n      \"dispatchedTimeMean\" : 4.33333333333333,\n      \"dispatched\" : 7,\n      \"requests\" : 7,\n      \"dispatchedActiveMax\" : 1,\n      \"requestsResumed\" : 0\n   },\n   \"memory\" : {\n      \"heapMemoryUsage\" : 359372240,\n      \"nonHeapMemoryUsage\" : 22911656\n   },\n   \"responses\" : {\n      \"responses3xx\" : 0,\n      \"responses4xx\" : 1,\n      \"responses2xx\" : 5,\n      \"responses1xx\" : 0,\n      \"responsesBytesTotal\" : 6171,\n      \"responses5xx\" : 0\n   },\n   \"connections\" : [\n      {\n         \"protocols\" : [\n            \"http/1.1\"\n         ],\n         \"statsOn\" : false,\n         \"name\" : \"org.eclipse.jetty.server.ServerConnector@4A87761D\"\n      }\n   ]\n}\n\n\n$ curl -H \"Accept: text/plain\" http://localhost:9090/stats\nstatistics: \n  connections: \n    connection: \n      name: org.eclipse.jetty.server.ServerConnector@4A87761D\n      protocols: \n        protocol: http/1.1\n      statsOn: false\n  memory: \n    heapMemoryUsage: 369941880\n    nonHeapMemoryUsage: 22951424\n  requests: \n    asyncRequests: 0\n    dispatched: 9\n    dispatchedActive: 1\n    dispatchedActiveMax: 1\n    dispatchedTimeMax: 12\n    dispatchedTimeMean: 3.625\n    dispatchedTimeStdDev: 2.8980288867731163\n    dispatchedTimeTotal: 29\n    errors: 0\n    requests: 9\n    requestsActive: 1\n    requestsActiveMax: 1\n    requestsExpired: 0\n    requestsResumed: 0\n    requestsSuspended: 0\n    requestsSuspendedMax: 0\n    requestsTimeMax: 12\n    requestsTimeMean: 3.625\n    requestsTimeStdDev: 2.8980288867731163\n    requestsTimeTotal: 29\n    statsOnMs: 147503\n  responses: \n    responses1xx: 0\n    responses2xx: 7\n    responses3xx: 0\n    responses4xx: 1\n    responses5xx: 0\n    responsesBytesTotal: 8618\n\n\n\n$ curl -H \"Accept: text/html\" http://localhost:9090/stats\n<html><head><title>StatisticsServlet</title></head><body>\n<ul>\n<li><em>statistics</em>: \n  <ul>\n    <li><em>connections</em>: \n      <ul>\n        <li><em>connection</em>: \n          <ul>\n            <li><em>name</em>: org.eclipse.jetty.server.ServerConnector@4A87761D</li>\n            <li><em>protocols</em>: \n              <ul>\n                <li><em>protocol</em>: http/1.1</li>\n              </ul>\n              </li>\n            <li><em>statsOn</em>: false</li>\n          </ul>\n          </li>\n      </ul>\n      </li>\n    <li><em>memory</em>: \n      <ul>\n        <li><em>heapMemoryUsage</em>: 369941880</li>\n        <li><em>nonHeapMemoryUsage</em>: 22965800</li>\n      </ul>\n      </li>\n    <li><em>requests</em>: \n      <ul>\n        <li><em>asyncRequests</em>: 0</li>\n        <li><em>dispatched</em>: 10</li>\n        <li><em>dispatchedActive</em>: 1</li>\n        <li><em>dispatchedActiveMax</em>: 1</li>\n        <li><em>dispatchedTimeMax</em>: 12</li>\n        <li><em>dispatchedTimeMean</em>: 3.4444444444444446</li>\n        <li><em>dispatchedTimeStdDev</em>: 2.7556759606310752</li>\n        <li><em>dispatchedTimeTotal</em>: 31</li>\n        <li><em>errors</em>: 0</li>\n        <li><em>requests</em>: 10</li>\n        <li><em>requestsActive</em>: 1</li>\n        <li><em>requestsActiveMax</em>: 1</li>\n        <li><em>requestsExpired</em>: 0</li>\n        <li><em>requestsResumed</em>: 0</li>\n        <li><em>requestsSuspended</em>: 0</li>\n        <li><em>requestsSuspendedMax</em>: 0</li>\n        <li><em>requestsTimeMax</em>: 12</li>\n        <li><em>requestsTimeMean</em>: 3.4444444444444446</li>\n        <li><em>requestsTimeStdDev</em>: 2.7556759606310752</li>\n        <li><em>requestsTimeTotal</em>: 31</li>\n        <li><em>statsOnMs</em>: 163911</li>\n      </ul>\n      </li>\n    <li><em>responses</em>: \n      <ul>\n        <li><em>responses1xx</em>: 0</li>\n        <li><em>responses2xx</em>: 8</li>\n        <li><em>responses3xx</em>: 0</li>\n        <li><em>responses4xx</em>: 1</li>\n        <li><em>responses5xx</em>: 0</li>\n        <li><em>responsesBytesTotal</em>: 9562</li>\n      </ul>\n      </li>\n  </ul>\n  </li>\n</ul>\n\n</body></html>\n\nSigned-off-by: Joakim Erdfelt joakim.erdfelt@gmail.com", "createdAt": "2020-11-02T15:52:42Z", "url": "https://github.com/eclipse/jetty.project/pull/5560", "merged": true, "mergeCommit": {"oid": "1448444c657e4aa49cdafd372e943679e945a581"}, "closed": true, "closedAt": "2020-11-17T14:52:35Z", "author": {"login": "joakime"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYmtBPgFqTUyMTc2MTExMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABddU9fJAFqTUzMjEwNjgzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNzYxMTEz", "url": "https://github.com/eclipse/jetty.project/pull/5560#pullrequestreview-521761113", "createdAt": "2020-11-02T15:56:59Z", "commit": {"oid": "178924b8a94b0b9df3aa1423104c4bdca529e6d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTo1Njo1OVrOHsKiNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTo1Njo1OVrOHsKiNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3MTk5MQ==", "bodyText": "This is probably a mistake, we shouldn't be second guessing the User-Agent Accept header.", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r516071991", "createdAt": "2020-11-02T15:56:59Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "diffHunk": "@@ -80,47 +88,150 @@ public void init() throws ServletException\n     }\n \n     @Override\n-    public void doPost(HttpServletRequest sreq, HttpServletResponse sres) throws ServletException, IOException\n+    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n-        doGet(sreq, sres);\n+        doGet(request, response);\n     }\n \n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n         if (_statsHandler == null)\n         {\n             LOG.warn(\"Statistics Handler not installed!\");\n-            resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n             return;\n         }\n         if (_restrictToLocalhost)\n         {\n-            if (!isLoopbackAddress(req.getRemoteAddr()))\n+            if (!isLoopbackAddress(request.getRemoteAddr()))\n             {\n-                resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n                 return;\n             }\n         }\n \n-        if (Boolean.parseBoolean(req.getParameter(\"statsReset\")))\n+        if (Boolean.parseBoolean(request.getParameter(\"statsReset\")))\n         {\n+            response.setStatus(HttpServletResponse.SC_OK);\n             _statsHandler.statsReset();\n             return;\n         }\n \n-        String wantXml = req.getParameter(\"xml\");\n-        if (wantXml == null)\n-            wantXml = req.getParameter(\"XML\");\n+        List<String> acceptable = getOrderedAcceptableMimeTypes(request);\n+\n+        for (String mimeType : acceptable)\n+        {\n+            switch (mimeType)\n+            {\n+                case \"application/json\":\n+                    writeJsonResponse(response);\n+                    return;\n+                case \"text/xml\":\n+                    writeXmlResponse(response);\n+                    return;\n+                case \"text/html\":\n+                    writeHtmlResponse(response);\n+                    return;\n+                case \"text/plain\":\n+                    writeTextResponse(response);\n+                    return;\n+                case \"*/*\":\n+                    String wantXml = request.getParameter(\"xml\");\n+                    if (wantXml == null)\n+                        wantXml = request.getParameter(\"XML\");\n+\n+                    if (Boolean.parseBoolean(wantXml))\n+                    {\n+                        writeXmlResponse(response);\n+                    }\n+                    else\n+                    {\n+                        writeTextResponse(response);\n+                    }\n+                    return;\n+                default:\n+                    if (LOG.isDebugEnabled())\n+                    {\n+                        LOG.debug(\"Ignoring unrecognized mime-type {}\", mimeType);\n+                    }\n+                    break;\n+            }\n+        }\n+        // None of the listed `Accept` mime-types were found.\n+        response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE);\n+    }\n+\n+    private void writeTextResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/plain\");\n+        CharSequence text = generateResponse(new TextProducer());\n+        response.getWriter().print(text.toString());\n+    }\n+\n+    private void writeHtmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/html\");\n+        Writer htmlWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        htmlWriter.append(\"<html><head><title>\");\n+        htmlWriter.append(this.getClass().getSimpleName());\n+        htmlWriter.append(\"</title></head><body>\\n\");\n+        CharSequence html = generateResponse(new HtmlProducer());\n+        htmlWriter.append(html.toString());\n+        htmlWriter.append(\"\\n</body></html>\\n\");\n+        htmlWriter.flush();\n+    }\n+\n+    private void writeXmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/xml\");\n+        CharSequence xml = generateResponse(new XmlProducer());\n+        response.getWriter().print(xml.toString());\n+    }\n \n-        if (Boolean.parseBoolean(wantXml))\n+    private void writeJsonResponse(HttpServletResponse response) throws IOException\n+    {\n+        // We intentionally don't put \"UTF-8\" into the response headers\n+        // as the rules for application/json state that it should never be\n+        // present on the HTTP Content-Type header.\n+        // It is also true that the application/json mime-type is always UTF-8.\n+        response.setContentType(\"application/json\");\n+        CharSequence json = generateResponse(new JsonProducer());\n+        Writer jsonWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        jsonWriter.append(json);\n+        jsonWriter.flush();\n+    }\n+\n+    private List<String> getOrderedAcceptableMimeTypes(HttpServletRequest request)\n+    {\n+        QuotedQualityCSV values = null;\n+        Enumeration<String> enumAccept = request.getHeaders(\"Accept\");\n+        if (enumAccept != null)\n         {\n-            sendXmlResponse(resp);\n+            while (enumAccept.hasMoreElements())\n+            {\n+                String value = enumAccept.nextElement();\n+                if (StringUtil.isNotBlank(value))\n+                {\n+                    if (values == null)\n+                    {\n+                        values = new QuotedQualityCSV(QuotedQualityCSV.MOST_SPECIFIC_MIME_ORDERING);\n+                    }\n+                    values.addValue(value);\n+                }\n+            }\n         }\n-        else\n+\n+        if (values != null)\n         {\n-            sendTextResponse(resp);\n+            return values.getValues();\n         }\n+\n+        // No accept specified, return that we allow ALL mime types\n+        return Collections.singletonList(\"*/*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "178924b8a94b0b9df3aa1423104c4bdca529e6d0"}, "originalPosition": 239}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxODIwNTQy", "url": "https://github.com/eclipse/jetty.project/pull/5560#pullrequestreview-521820542", "createdAt": "2020-11-02T16:58:52Z", "commit": {"oid": "178924b8a94b0b9df3aa1423104c4bdca529e6d0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjo1ODo1MlrOHsNRrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjo1ODo1MlrOHsNRrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjExNjkwOQ==", "bodyText": "I think this mechanism is now insufficient.\nInstead I think we need type parameter that can be json,xml, html or plain.\nOnly if their is no type parameter should we look at accepted types\nand finally if there is no preference from the accepted types, we should just send plain.... maybe deprecated support for xml parameter", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r516116909", "createdAt": "2020-11-02T16:58:52Z", "author": {"login": "gregw"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "diffHunk": "@@ -80,47 +88,150 @@ public void init() throws ServletException\n     }\n \n     @Override\n-    public void doPost(HttpServletRequest sreq, HttpServletResponse sres) throws ServletException, IOException\n+    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n-        doGet(sreq, sres);\n+        doGet(request, response);\n     }\n \n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n         if (_statsHandler == null)\n         {\n             LOG.warn(\"Statistics Handler not installed!\");\n-            resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n             return;\n         }\n         if (_restrictToLocalhost)\n         {\n-            if (!isLoopbackAddress(req.getRemoteAddr()))\n+            if (!isLoopbackAddress(request.getRemoteAddr()))\n             {\n-                resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n                 return;\n             }\n         }\n \n-        if (Boolean.parseBoolean(req.getParameter(\"statsReset\")))\n+        if (Boolean.parseBoolean(request.getParameter(\"statsReset\")))\n         {\n+            response.setStatus(HttpServletResponse.SC_OK);\n             _statsHandler.statsReset();\n             return;\n         }\n \n-        String wantXml = req.getParameter(\"xml\");\n-        if (wantXml == null)\n-            wantXml = req.getParameter(\"XML\");\n+        List<String> acceptable = getOrderedAcceptableMimeTypes(request);\n+\n+        for (String mimeType : acceptable)\n+        {\n+            switch (mimeType)\n+            {\n+                case \"application/json\":\n+                    writeJsonResponse(response);\n+                    return;\n+                case \"text/xml\":\n+                    writeXmlResponse(response);\n+                    return;\n+                case \"text/html\":\n+                    writeHtmlResponse(response);\n+                    return;\n+                case \"text/plain\":\n+                    writeTextResponse(response);\n+                    return;\n+                case \"*/*\":\n+                    String wantXml = request.getParameter(\"xml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "178924b8a94b0b9df3aa1423104c4bdca529e6d0"}, "originalPosition": 141}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "178924b8a94b0b9df3aa1423104c4bdca529e6d0", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/178924b8a94b0b9df3aa1423104c4bdca529e6d0", "committedDate": "2020-11-02T15:44:53Z", "message": "Issue #5539 - Proper StatisticsServlet output format via content negotiation\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}, "afterCommit": {"oid": "b02c6b1c804cb3dccc93c4450ec109ead09fe86e", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/b02c6b1c804cb3dccc93c4450ec109ead09fe86e", "committedDate": "2020-11-02T17:01:20Z", "message": "Issue #5539 - Proper StatisticsServlet output format via content negotiation\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxODYzNTc0", "url": "https://github.com/eclipse/jetty.project/pull/5560#pullrequestreview-521863574", "createdAt": "2020-11-02T17:49:08Z", "commit": {"oid": "99dfdaceea30eb8d9a196dfa6bd6279f7b69f71d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzo0OTowOFrOHsPbGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzo0OTowOFrOHsPbGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE1MjA4OQ==", "bodyText": "I added these to troubleshoot the CI build/test failure on these.\nCI is reporting more resources than expected.", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r516152089", "createdAt": "2020-11-02T17:49:08Z", "author": {"login": "joakime"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/WebInfConfigurationTest.java", "diffHunk": "@@ -72,7 +73,7 @@ public void testFindAndFilterContainerPaths()\n         context.setClassLoader(loader);\n         config.findAndFilterContainerPaths(context);\n         List<Resource> containerResources = context.getMetaData().getContainerResources();\n-        assertEquals(1, containerResources.size());\n+        assertEquals(1, containerResources.size(), () -> containerResources.stream().map(Resource::toString).collect(Collectors.joining(\",\", \"[\", \"]\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99dfdaceea30eb8d9a196dfa6bd6279f7b69f71d"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMzcyNTY0", "url": "https://github.com/eclipse/jetty.project/pull/5560#pullrequestreview-531372564", "createdAt": "2020-11-16T14:31:06Z", "commit": {"oid": "c4ce84bbe1f2f11651c94db5176db6ef9bab07bc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDozMTowNlrOH0BTTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDozNDo1NlrOH0BeyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMwOTMyNQ==", "bodyText": "Use HttpHeader.ACCEPT", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r524309325", "createdAt": "2020-11-16T14:31:06Z", "author": {"login": "gregw"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "diffHunk": "@@ -80,47 +101,151 @@ public void init() throws ServletException\n     }\n \n     @Override\n-    public void doPost(HttpServletRequest sreq, HttpServletResponse sres) throws ServletException, IOException\n+    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n-        doGet(sreq, sres);\n+        doGet(request, response);\n     }\n \n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n         if (_statsHandler == null)\n         {\n             LOG.warn(\"Statistics Handler not installed!\");\n-            resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n             return;\n         }\n         if (_restrictToLocalhost)\n         {\n-            if (!isLoopbackAddress(req.getRemoteAddr()))\n+            if (!isLoopbackAddress(request.getRemoteAddr()))\n             {\n-                resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n                 return;\n             }\n         }\n \n-        if (Boolean.parseBoolean(req.getParameter(\"statsReset\")))\n+        if (Boolean.parseBoolean(request.getParameter(\"statsReset\")))\n         {\n+            response.setStatus(HttpServletResponse.SC_OK);\n             _statsHandler.statsReset();\n             return;\n         }\n \n-        String wantXml = req.getParameter(\"xml\");\n-        if (wantXml == null)\n-            wantXml = req.getParameter(\"XML\");\n+        if (request.getParameter(\"xml\") != null)\n+        {\n+            LOG.warn(\"'xml' parameter is deprecated, use 'Accept' request header instead\");\n+        }\n+\n+        List<String> acceptable = getOrderedAcceptableMimeTypes(request);\n \n-        if (Boolean.parseBoolean(wantXml))\n+        for (String mimeType : acceptable)\n         {\n-            sendXmlResponse(resp);\n+            switch (mimeType)\n+            {\n+                case \"application/json\":\n+                    writeJsonResponse(response);\n+                    return;\n+                case \"text/xml\":\n+                    writeXmlResponse(response);\n+                    return;\n+                case \"text/html\":\n+                    writeHtmlResponse(response);\n+                    return;\n+                case \"text/plain\":\n+                case \"*/*\":\n+                    writeTextResponse(response);\n+                    return;\n+                default:\n+                    if (LOG.isDebugEnabled())\n+                    {\n+                        LOG.debug(\"Ignoring unrecognized mime-type {}\", mimeType);\n+                    }\n+                    break;\n+            }\n         }\n-        else\n+        // None of the listed `Accept` mime-types were found.\n+        response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE);\n+    }\n+\n+    private void writeTextResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/plain\");\n+        CharSequence text = generateResponse(new TextProducer());\n+        response.getWriter().print(text.toString());\n+    }\n+\n+    private void writeHtmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/html\");\n+        Writer htmlWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        htmlWriter.append(\"<html><head><title>\");\n+        htmlWriter.append(this.getClass().getSimpleName());\n+        htmlWriter.append(\"</title></head><body>\\n\");\n+        CharSequence html = generateResponse(new HtmlProducer());\n+        htmlWriter.append(html.toString());\n+        htmlWriter.append(\"\\n</body></html>\\n\");\n+        htmlWriter.flush();\n+    }\n+\n+    private void writeXmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/xml\");\n+        CharSequence xml = generateResponse(new XmlProducer());\n+        response.getWriter().print(xml.toString());\n+    }\n+\n+    private void writeJsonResponse(HttpServletResponse response) throws IOException\n+    {\n+        // We intentionally don't put \"UTF-8\" into the response headers\n+        // as the rules for application/json state that it should never be\n+        // present on the HTTP Content-Type header.\n+        // It is also true that the application/json mime-type is always UTF-8.\n+        response.setContentType(\"application/json\");\n+        CharSequence json = generateResponse(new JsonProducer());\n+        Writer jsonWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        jsonWriter.append(json);\n+        jsonWriter.flush();\n+    }\n+\n+    private List<String> getOrderedAcceptableMimeTypes(HttpServletRequest request)\n+    {\n+        QuotedQualityCSV values = null;\n+        Enumeration<String> enumAccept = request.getHeaders(\"Accept\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4ce84bbe1f2f11651c94db5176db6ef9bab07bc"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMxMjI2NA==", "bodyText": "I think it should be the other way around.  Ie the URI specifies the acceptable type, then it should have precedence, otherwise use the Accept header.\nAlternately allow the accept parameter to be a quoted quality string and just do something like:\n\ufffc        values = new QuotedQualityCSV(QuotedQualityCSV.MOST_SPECIFIC_MIME_ORDERING);\n        values.addValue(request.getParameter(\"accept\"));\n        calues.addValue(all the Accept headers)\nand then let the quality mechanism work out the order.", "url": "https://github.com/eclipse/jetty.project/pull/5560#discussion_r524312264", "createdAt": "2020-11-16T14:34:56Z", "author": {"login": "gregw"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/StatisticsServlet.java", "diffHunk": "@@ -80,47 +101,151 @@ public void init() throws ServletException\n     }\n \n     @Override\n-    public void doPost(HttpServletRequest sreq, HttpServletResponse sres) throws ServletException, IOException\n+    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n-        doGet(sreq, sres);\n+        doGet(request, response);\n     }\n \n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n     {\n         if (_statsHandler == null)\n         {\n             LOG.warn(\"Statistics Handler not installed!\");\n-            resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n             return;\n         }\n         if (_restrictToLocalhost)\n         {\n-            if (!isLoopbackAddress(req.getRemoteAddr()))\n+            if (!isLoopbackAddress(request.getRemoteAddr()))\n             {\n-                resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n                 return;\n             }\n         }\n \n-        if (Boolean.parseBoolean(req.getParameter(\"statsReset\")))\n+        if (Boolean.parseBoolean(request.getParameter(\"statsReset\")))\n         {\n+            response.setStatus(HttpServletResponse.SC_OK);\n             _statsHandler.statsReset();\n             return;\n         }\n \n-        String wantXml = req.getParameter(\"xml\");\n-        if (wantXml == null)\n-            wantXml = req.getParameter(\"XML\");\n+        if (request.getParameter(\"xml\") != null)\n+        {\n+            LOG.warn(\"'xml' parameter is deprecated, use 'Accept' request header instead\");\n+        }\n+\n+        List<String> acceptable = getOrderedAcceptableMimeTypes(request);\n \n-        if (Boolean.parseBoolean(wantXml))\n+        for (String mimeType : acceptable)\n         {\n-            sendXmlResponse(resp);\n+            switch (mimeType)\n+            {\n+                case \"application/json\":\n+                    writeJsonResponse(response);\n+                    return;\n+                case \"text/xml\":\n+                    writeXmlResponse(response);\n+                    return;\n+                case \"text/html\":\n+                    writeHtmlResponse(response);\n+                    return;\n+                case \"text/plain\":\n+                case \"*/*\":\n+                    writeTextResponse(response);\n+                    return;\n+                default:\n+                    if (LOG.isDebugEnabled())\n+                    {\n+                        LOG.debug(\"Ignoring unrecognized mime-type {}\", mimeType);\n+                    }\n+                    break;\n+            }\n         }\n-        else\n+        // None of the listed `Accept` mime-types were found.\n+        response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE);\n+    }\n+\n+    private void writeTextResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/plain\");\n+        CharSequence text = generateResponse(new TextProducer());\n+        response.getWriter().print(text.toString());\n+    }\n+\n+    private void writeHtmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/html\");\n+        Writer htmlWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        htmlWriter.append(\"<html><head><title>\");\n+        htmlWriter.append(this.getClass().getSimpleName());\n+        htmlWriter.append(\"</title></head><body>\\n\");\n+        CharSequence html = generateResponse(new HtmlProducer());\n+        htmlWriter.append(html.toString());\n+        htmlWriter.append(\"\\n</body></html>\\n\");\n+        htmlWriter.flush();\n+    }\n+\n+    private void writeXmlResponse(HttpServletResponse response) throws IOException\n+    {\n+        response.setCharacterEncoding(\"utf-8\");\n+        response.setContentType(\"text/xml\");\n+        CharSequence xml = generateResponse(new XmlProducer());\n+        response.getWriter().print(xml.toString());\n+    }\n+\n+    private void writeJsonResponse(HttpServletResponse response) throws IOException\n+    {\n+        // We intentionally don't put \"UTF-8\" into the response headers\n+        // as the rules for application/json state that it should never be\n+        // present on the HTTP Content-Type header.\n+        // It is also true that the application/json mime-type is always UTF-8.\n+        response.setContentType(\"application/json\");\n+        CharSequence json = generateResponse(new JsonProducer());\n+        Writer jsonWriter = new OutputStreamWriter(response.getOutputStream(), UTF_8);\n+        jsonWriter.append(json);\n+        jsonWriter.flush();\n+    }\n+\n+    private List<String> getOrderedAcceptableMimeTypes(HttpServletRequest request)\n+    {\n+        QuotedQualityCSV values = null;\n+        Enumeration<String> enumAccept = request.getHeaders(\"Accept\");\n+        if (enumAccept != null)\n+        {\n+            while (enumAccept.hasMoreElements())\n+            {\n+                String value = enumAccept.nextElement();\n+                if (StringUtil.isNotBlank(value))\n+                {\n+                    if (values == null)\n+                    {\n+                        values = new QuotedQualityCSV(QuotedQualityCSV.MOST_SPECIFIC_MIME_ORDERING);\n+                    }\n+                    values.addValue(value);\n+                }\n+            }\n+        }\n+\n+        if (values != null)\n         {\n-            sendTextResponse(resp);\n+            return values.getValues();\n         }\n+\n+        // No accept header specified, try 'accept' parameter (for those clients that are\n+        // so ancient that they cannot set the standard HTTP `Accept` header)\n+        String acceptParameter = request.getParameter(\"accept\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4ce84bbe1f2f11651c94db5176db6ef9bab07bc"}, "originalPosition": 245}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5362467e6798815ddf566ae42abea44f383b96bd", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/5362467e6798815ddf566ae42abea44f383b96bd", "committedDate": "2020-11-16T15:10:21Z", "message": "Issue #5539 - Proper StatisticsServlet output format via content negotiation\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02f35deeaac1ed056e5c69aedbed73eef582e0d0", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/02f35deeaac1ed056e5c69aedbed73eef582e0d0", "committedDate": "2020-11-16T15:10:21Z", "message": "Issue #5539 - Deprecating 'xml' request parameter in StatisticsServlet\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b419db90c5c2186f4f244db47c74cf330d1e1367", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/b419db90c5c2186f4f244db47c74cf330d1e1367", "committedDate": "2020-11-16T15:10:21Z", "message": "Issue #5539 - Cleanup, adding javadoc, etc.\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc952f3a3ac4db08e2e5996ea7b08ed01a854133", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/cc952f3a3ac4db08e2e5996ea7b08ed01a854133", "committedDate": "2020-11-16T15:10:22Z", "message": "Issue #5539 - Adding query parameter accept variation\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c51127558038f1c6b39e4a7f75bfdec9ac3d9fba", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/c51127558038f1c6b39e4a7f75bfdec9ac3d9fba", "committedDate": "2020-11-16T15:10:22Z", "message": "Provide more detail in test failure on CI\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9440357a732fd465fa8a765827a312e644330e0", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/c9440357a732fd465fa8a765827a312e644330e0", "committedDate": "2020-11-16T15:10:23Z", "message": "Issue #5539 - Fixing javadoc\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd974c474c1175b420e0d187771b3f2eefb15ffe", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/fd974c474c1175b420e0d187771b3f2eefb15ffe", "committedDate": "2020-11-16T15:10:23Z", "message": "Fixing bad Container Include Jar pattern.\n\n+ It was matching on jetty-util-ajax-#.jar as well.\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "770be2dbc3a2fe4430310a2404baed8653a92519", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/770be2dbc3a2fe4430310a2404baed8653a92519", "committedDate": "2020-11-16T15:10:23Z", "message": "Issue #5539 - Adding jetty-util-ajax missing dep to osgi tests\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "683d9a93497f816e4153a47aec7664cc9f385823", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/683d9a93497f816e4153a47aec7664cc9f385823", "committedDate": "2020-11-16T15:10:24Z", "message": "Issue #5539 - Updating StatisticsServlet accept processing per review\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d415d691ef7bb4e4b96462eea9098e9963c5f01", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/4d415d691ef7bb4e4b96462eea9098e9963c5f01", "committedDate": "2020-11-16T15:09:20Z", "message": "Issue #5539 - Updating StatisticsServlet accept processing per review\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}, "afterCommit": {"oid": "683d9a93497f816e4153a47aec7664cc9f385823", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/683d9a93497f816e4153a47aec7664cc9f385823", "committedDate": "2020-11-16T15:10:24Z", "message": "Issue #5539 - Updating StatisticsServlet accept processing per review\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "314c65fb1481eaa578a065ed3b5098d3be013a7a", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/314c65fb1481eaa578a065ed3b5098d3be013a7a", "committedDate": "2020-11-16T18:31:28Z", "message": "Issue #5539 - Adding StatisticsServlet tests in test-distribution\n\n+ Updating module definition for JSON\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTA2ODM5", "url": "https://github.com/eclipse/jetty.project/pull/5560#pullrequestreview-532106839", "createdAt": "2020-11-17T08:06:18Z", "commit": {"oid": "314c65fb1481eaa578a065ed3b5098d3be013a7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4991, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}