{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNjAyMDMy", "number": 5527, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToxNToyMFrOEy3M4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToxNToyMFrOEy3M4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzY4NjczOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToxNToyMFrOHpvQ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzo1MDoxOVrOHsvlrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyODA0NA==", "bodyText": "Is it possible to get here if there are no resources in the RC?\nI thought we prevented that in the constructors.", "url": "https://github.com/eclipse/jetty.project/pull/5527#discussion_r513528044", "createdAt": "2020-10-28T15:15:20Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -247,27 +247,28 @@ public Resource addPath(String path) throws IOException\n         ArrayList<Resource> resources = null;\n \n         // Attempt a simple (single) Resource lookup that exists\n+        Resource addedResource = null;\n         for (Resource res : _resources)\n         {\n-            Resource r = res.addPath(path);\n-            if (!r.isDirectory() && r.exists())\n-            {\n-                // Return simple (non-directory) Resource\n-                return r;\n-            }\n-\n+            addedResource = res.addPath(path);\n+            if (!addedResource.exists())\n+                continue;\n+            if (!addedResource.isDirectory())\n+                return addedResource; // Return simple (non-directory) Resource\n             if (resources == null)\n-            {\n                 resources = new ArrayList<>();\n-            }\n+            resources.add(addedResource);\n+        }\n \n-            resources.add(r);\n+        if (resources == null)\n+        {\n+            if (addedResource != null)\n+                return addedResource; // This will not exist", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e837530eecaee9e3abe1f780eca72721df6d14"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzMzE0Mg==", "bodyText": "perhaps not... but I think the EmptyResource is a good safety net in case anything changes.\nAlthough I'm now thinking more fondly of allowing a RC to have directories that don't exist... as we can't prevent them from being deleted anyway.", "url": "https://github.com/eclipse/jetty.project/pull/5527#discussion_r513533142", "createdAt": "2020-10-28T15:21:41Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -247,27 +247,28 @@ public Resource addPath(String path) throws IOException\n         ArrayList<Resource> resources = null;\n \n         // Attempt a simple (single) Resource lookup that exists\n+        Resource addedResource = null;\n         for (Resource res : _resources)\n         {\n-            Resource r = res.addPath(path);\n-            if (!r.isDirectory() && r.exists())\n-            {\n-                // Return simple (non-directory) Resource\n-                return r;\n-            }\n-\n+            addedResource = res.addPath(path);\n+            if (!addedResource.exists())\n+                continue;\n+            if (!addedResource.isDirectory())\n+                return addedResource; // Return simple (non-directory) Resource\n             if (resources == null)\n-            {\n                 resources = new ArrayList<>();\n-            }\n+            resources.add(addedResource);\n+        }\n \n-            resources.add(r);\n+        if (resources == null)\n+        {\n+            if (addedResource != null)\n+                return addedResource; // This will not exist", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyODA0NA=="}, "originalCommit": {"oid": "a1e837530eecaee9e3abe1f780eca72721df6d14"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU3NDkyOA==", "bodyText": "The addPath method IMHO is problematic:\n\nthe javadoc is wrong, it does NOT only return the first contained resource, it can return a ResourceCollection of directories\nwhat is returned is inconsistent: you either get back a single directory that does not exist, or a ResourceCollection of directories that do\nyou get different results depending on the implementation of addPath by the various Resource subclasses: for example, PathResource  will throw MalformedURLException if you give it a path that tries to escape above the root, but URLResource will just return you the original path", "url": "https://github.com/eclipse/jetty.project/pull/5527#discussion_r516574928", "createdAt": "2020-11-03T10:46:26Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -247,27 +247,28 @@ public Resource addPath(String path) throws IOException\n         ArrayList<Resource> resources = null;\n \n         // Attempt a simple (single) Resource lookup that exists\n+        Resource addedResource = null;\n         for (Resource res : _resources)\n         {\n-            Resource r = res.addPath(path);\n-            if (!r.isDirectory() && r.exists())\n-            {\n-                // Return simple (non-directory) Resource\n-                return r;\n-            }\n-\n+            addedResource = res.addPath(path);\n+            if (!addedResource.exists())\n+                continue;\n+            if (!addedResource.isDirectory())\n+                return addedResource; // Return simple (non-directory) Resource\n             if (resources == null)\n-            {\n                 resources = new ArrayList<>();\n-            }\n+            resources.add(addedResource);\n+        }\n \n-            resources.add(r);\n+        if (resources == null)\n+        {\n+            if (addedResource != null)\n+                return addedResource; // This will not exist", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyODA0NA=="}, "originalCommit": {"oid": "a1e837530eecaee9e3abe1f780eca72721df6d14"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYzOTA4Nw==", "bodyText": "I agree the javadoc could be improved, but I don't see the problem with the variable return, as that is just what all the different scenarioes that do exist. Specifically if the result is\n\na file that exists in at least one of the collection, then the first one found is returned.\na subdirectory that exists in at exactly one of the collection, then that directory is returned\na subdirectory that exists in at more than one of the collection, then a resource collection is returned\na resource that doesn't exist in any of the collection, then the non existent resource of the first collection is returned.\nif any of the collection is asked to form a resource that it cannot handle, then MalformedURLException is thrown\n\nIf I updated the javadoc to say that, then would that be OK?", "url": "https://github.com/eclipse/jetty.project/pull/5527#discussion_r516639087", "createdAt": "2020-11-03T12:44:50Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -247,27 +247,28 @@ public Resource addPath(String path) throws IOException\n         ArrayList<Resource> resources = null;\n \n         // Attempt a simple (single) Resource lookup that exists\n+        Resource addedResource = null;\n         for (Resource res : _resources)\n         {\n-            Resource r = res.addPath(path);\n-            if (!r.isDirectory() && r.exists())\n-            {\n-                // Return simple (non-directory) Resource\n-                return r;\n-            }\n-\n+            addedResource = res.addPath(path);\n+            if (!addedResource.exists())\n+                continue;\n+            if (!addedResource.isDirectory())\n+                return addedResource; // Return simple (non-directory) Resource\n             if (resources == null)\n-            {\n                 resources = new ArrayList<>();\n-            }\n+            resources.add(addedResource);\n+        }\n \n-            resources.add(r);\n+        if (resources == null)\n+        {\n+            if (addedResource != null)\n+                return addedResource; // This will not exist", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyODA0NA=="}, "originalCommit": {"oid": "a1e837530eecaee9e3abe1f780eca72721df6d14"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY2NzY4Mw==", "bodyText": "a file that exists in at least one of the collection, then the first one found is returned.\n\n\nMakes sense\n\n\na subdirectory that exists in at exactly one of the collection, then that directory is returned\n\n\nYup, agreed.\n\n\na subdirectory that exists in at more than one of the collection, then a resource collection is returned\n\n\nThis makes sense to me, a sub-collection.\nBut what if the asked for path has hits for both for files and directories (of the same addPath) across the RC?\nWhat does that mean?\nExample:\nThe file /tmp/foo/zed exists\nThe directory /tmp/bar/zed/ exists\nRC of [/tmp/foo, /tmp/bar] is created.\nRC.addPath(\"zed\") means what?\nIs this case 1?\n\n\na resource that doesn't exist in any of the collection, then the non existent resource of the first collection is returned.\n\n\nThis is a tough one.\nI could argue that the return on this should be another ResourceCollection (of the same size) with each entry being the original RC with the non-existent path tacked on.\nBut what is the value on either approach?\nIn both approaches, a user of the Resource would test for exists() on the result and then move on.\nBut in the second approach, we allow for \"potential\" resources.\nBut that only works for directories IMO.\nHaving potential files across multiple hits would just be extra confusing.\nYeah, I'm not sure there is a perfect solution here.\n\n\nif any of the collection is asked to form a resource that it cannot handle, then MalformedURLException is thrown\n\n\nYup, this one makes sense too.", "url": "https://github.com/eclipse/jetty.project/pull/5527#discussion_r516667683", "createdAt": "2020-11-03T13:32:50Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -247,27 +247,28 @@ public Resource addPath(String path) throws IOException\n         ArrayList<Resource> resources = null;\n \n         // Attempt a simple (single) Resource lookup that exists\n+        Resource addedResource = null;\n         for (Resource res : _resources)\n         {\n-            Resource r = res.addPath(path);\n-            if (!r.isDirectory() && r.exists())\n-            {\n-                // Return simple (non-directory) Resource\n-                return r;\n-            }\n-\n+            addedResource = res.addPath(path);\n+            if (!addedResource.exists())\n+                continue;\n+            if (!addedResource.isDirectory())\n+                return addedResource; // Return simple (non-directory) Resource\n             if (resources == null)\n-            {\n                 resources = new ArrayList<>();\n-            }\n+            resources.add(addedResource);\n+        }\n \n-            resources.add(r);\n+        if (resources == null)\n+        {\n+            if (addedResource != null)\n+                return addedResource; // This will not exist", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyODA0NA=="}, "originalCommit": {"oid": "a1e837530eecaee9e3abe1f780eca72721df6d14"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY3MDM1NQ==", "bodyText": "@joakime and @janbartel we can only merge directories, we cannot merge files, nor can we merge files with directories nor directories with errors or files with errors.\nResourceCollection is implementing defacto standard directory overlays as done by things like docker and fancy file systems.    If you mount layer A on top of layer B, then files in A replace files in B; if you list files then you see the union of files in A & B; if you create a new file it is created in A.\nI believe the semantics we have implemented does that.\n... and also we are just fixing NPE here, not re-inventing this class :)", "url": "https://github.com/eclipse/jetty.project/pull/5527#discussion_r516670355", "createdAt": "2020-11-03T13:37:10Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -247,27 +247,28 @@ public Resource addPath(String path) throws IOException\n         ArrayList<Resource> resources = null;\n \n         // Attempt a simple (single) Resource lookup that exists\n+        Resource addedResource = null;\n         for (Resource res : _resources)\n         {\n-            Resource r = res.addPath(path);\n-            if (!r.isDirectory() && r.exists())\n-            {\n-                // Return simple (non-directory) Resource\n-                return r;\n-            }\n-\n+            addedResource = res.addPath(path);\n+            if (!addedResource.exists())\n+                continue;\n+            if (!addedResource.isDirectory())\n+                return addedResource; // Return simple (non-directory) Resource\n             if (resources == null)\n-            {\n                 resources = new ArrayList<>();\n-            }\n+            resources.add(addedResource);\n+        }\n \n-            resources.add(r);\n+        if (resources == null)\n+        {\n+            if (addedResource != null)\n+                return addedResource; // This will not exist", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyODA0NA=="}, "originalCommit": {"oid": "a1e837530eecaee9e3abe1f780eca72721df6d14"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY3NDE1Ng==", "bodyText": "The questions still stand.\nEven if they are not relevant for this PR, they could lead to filing a new issue and PR.\nIf you are going to fix the javadoc here, then the javadoc needs to be clear.\nSo far, your first proposal for the javadoc changes has vague parts (hence the questions).\nIMO, If there are known warts, then the javadoc should point out those warts.", "url": "https://github.com/eclipse/jetty.project/pull/5527#discussion_r516674156", "createdAt": "2020-11-03T13:43:01Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -247,27 +247,28 @@ public Resource addPath(String path) throws IOException\n         ArrayList<Resource> resources = null;\n \n         // Attempt a simple (single) Resource lookup that exists\n+        Resource addedResource = null;\n         for (Resource res : _resources)\n         {\n-            Resource r = res.addPath(path);\n-            if (!r.isDirectory() && r.exists())\n-            {\n-                // Return simple (non-directory) Resource\n-                return r;\n-            }\n-\n+            addedResource = res.addPath(path);\n+            if (!addedResource.exists())\n+                continue;\n+            if (!addedResource.isDirectory())\n+                return addedResource; // Return simple (non-directory) Resource\n             if (resources == null)\n-            {\n                 resources = new ArrayList<>();\n-            }\n+            resources.add(addedResource);\n+        }\n \n-            resources.add(r);\n+        if (resources == null)\n+        {\n+            if (addedResource != null)\n+                return addedResource; // This will not exist", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyODA0NA=="}, "originalCommit": {"oid": "a1e837530eecaee9e3abe1f780eca72721df6d14"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY3NjY4OQ==", "bodyText": "a file that exists in at least one of the collection, then the first one found is returned.\n\n\nOK.\n\n\na subdirectory that exists in at exactly one of the collection, then that directory is returned\n\n\nOK.\n\n\na subdirectory that exists in at more than one of the collection, then a resource collection is returned\n\n\nOK (so long as it is javadoc'ed).\n\n\na resource that doesn't exist in any of the collection, then the non existent resource of the first collection is returned.\n\n\n? What do you mean \"the non-existent resource of the first collection\"???  I'm not in favour of returning something that is known not to exist. The caller should be able to expect consistency: either this method returns something that exists, or it throws an exception.\n\n\nif any of the collection is asked to form a resource that it cannot handle, then MalformedURLException is thrown\n\n\nOK.", "url": "https://github.com/eclipse/jetty.project/pull/5527#discussion_r516676689", "createdAt": "2020-11-03T13:46:42Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -247,27 +247,28 @@ public Resource addPath(String path) throws IOException\n         ArrayList<Resource> resources = null;\n \n         // Attempt a simple (single) Resource lookup that exists\n+        Resource addedResource = null;\n         for (Resource res : _resources)\n         {\n-            Resource r = res.addPath(path);\n-            if (!r.isDirectory() && r.exists())\n-            {\n-                // Return simple (non-directory) Resource\n-                return r;\n-            }\n-\n+            addedResource = res.addPath(path);\n+            if (!addedResource.exists())\n+                continue;\n+            if (!addedResource.isDirectory())\n+                return addedResource; // Return simple (non-directory) Resource\n             if (resources == null)\n-            {\n                 resources = new ArrayList<>();\n-            }\n+            resources.add(addedResource);\n+        }\n \n-            resources.add(r);\n+        if (resources == null)\n+        {\n+            if (addedResource != null)\n+                return addedResource; // This will not exist", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyODA0NA=="}, "originalCommit": {"oid": "a1e837530eecaee9e3abe1f780eca72721df6d14"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY3OTA4NA==", "bodyText": "@janbartel We have always been able to get resources that do not exist.  In fact that is how we can create new resources eg when implementing PUT methods.\nI'll update the javadoc.... but remember we have a real NPE here that we need to fix for a 10.0.0 before we go redesigning the entire resource contract.", "url": "https://github.com/eclipse/jetty.project/pull/5527#discussion_r516679084", "createdAt": "2020-11-03T13:50:19Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -247,27 +247,28 @@ public Resource addPath(String path) throws IOException\n         ArrayList<Resource> resources = null;\n \n         // Attempt a simple (single) Resource lookup that exists\n+        Resource addedResource = null;\n         for (Resource res : _resources)\n         {\n-            Resource r = res.addPath(path);\n-            if (!r.isDirectory() && r.exists())\n-            {\n-                // Return simple (non-directory) Resource\n-                return r;\n-            }\n-\n+            addedResource = res.addPath(path);\n+            if (!addedResource.exists())\n+                continue;\n+            if (!addedResource.isDirectory())\n+                return addedResource; // Return simple (non-directory) Resource\n             if (resources == null)\n-            {\n                 resources = new ArrayList<>();\n-            }\n+            resources.add(addedResource);\n+        }\n \n-            resources.add(r);\n+        if (resources == null)\n+        {\n+            if (addedResource != null)\n+                return addedResource; // This will not exist", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyODA0NA=="}, "originalCommit": {"oid": "a1e837530eecaee9e3abe1f780eca72721df6d14"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2197, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}