{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNTcwNzAw", "number": 5200, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToxNjoyMVrOEeRANA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToyMDoxOFrOEeRExg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTcxMzE2OnYy", "diffSide": "RIGHT", "path": "jetty-documentation/src/main/asciidoc/administration/logging/jetty-server-dump.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToxNjoyMVrOHJ0vkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToxNjoyMVrOHJ0vkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2MzM3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The dump feature in Jetty provides a good snapshot of the status of the threadpool, select sets, classloaders, and so forth. \n          \n          \n            \n            The dump feature in Jetty provides a snapshot of the bean containment tree of the main Jetty components together with a summary of their configuration. This includes threadpool, connectors,  contexts, webapplications, servlets and so forth.", "url": "https://github.com/eclipse/jetty.project/pull/5200#discussion_r480063379", "createdAt": "2020-08-31T11:16:21Z", "author": {"login": "gregw"}, "path": "jetty-documentation/src/main/asciidoc/administration/logging/jetty-server-dump.adoc", "diffHunk": "@@ -0,0 +1,189 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ========================================================================\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+[[jetty-server-dump]]\n+=== Jetty Server Dump\n+\n+The dump feature in Jetty provides a good snapshot of the status of the threadpool, select sets, classloaders, and so forth. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff6121c45d0994cb5018411f8a8d72db1fd65c3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTcxNTc5OnYy", "diffSide": "RIGHT", "path": "jetty-documentation/src/main/asciidoc/administration/logging/jetty-server-dump.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToxNzoyNVrOHJ0xKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToxNzoyNVrOHJ0xKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2Mzc4Nw==", "bodyText": "This is a bit too detailed to be in the introduction.   It should be in the section below.  Perhaps say what extra detail is provided and why you might want it turned off (verbosity)", "url": "https://github.com/eclipse/jetty.project/pull/5200#discussion_r480063787", "createdAt": "2020-08-31T11:17:25Z", "author": {"login": "gregw"}, "path": "jetty-documentation/src/main/asciidoc/administration/logging/jetty-server-dump.adoc", "diffHunk": "@@ -0,0 +1,189 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ========================================================================\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+[[jetty-server-dump]]\n+=== Jetty Server Dump\n+\n+The dump feature in Jetty provides a good snapshot of the status of the threadpool, select sets, classloaders, and so forth. \n+To get maximum detail from the dump, you need to `setDetailDump(true)` on any `QueuedThreadPools` you are using. \n+You can do this by a direct call if you are embedding Jetty, or by using properties for standalone Jetty.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff6121c45d0994cb5018411f8a8d72db1fd65c3"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTcyMjAzOnYy", "diffSide": "RIGHT", "path": "jetty-documentation/src/main/asciidoc/administration/logging/jetty-server-dump.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToxOToxOFrOHJ00lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjo1NjozMVrOHLfB8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2NDY2MA==", "bodyText": "Does this list render OK. Should the key entries be quoted?", "url": "https://github.com/eclipse/jetty.project/pull/5200#discussion_r480064660", "createdAt": "2020-08-31T11:19:18Z", "author": {"login": "gregw"}, "path": "jetty-documentation/src/main/asciidoc/administration/logging/jetty-server-dump.adoc", "diffHunk": "@@ -0,0 +1,189 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ========================================================================\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+[[jetty-server-dump]]\n+=== Jetty Server Dump\n+\n+The dump feature in Jetty provides a good snapshot of the status of the threadpool, select sets, classloaders, and so forth. \n+To get maximum detail from the dump, you need to `setDetailDump(true)` on any `QueuedThreadPools` you are using. \n+You can do this by a direct call if you are embedding Jetty, or by using properties for standalone Jetty.\n+\n+[[configuring-dump-feature]]\n+==== Configuring the Jetty Server Dump\n+\n+You can request that Jetty do a dump immediately after starting and just before stopping by calling the appropriate setters on the `Server` instance.\n+For embedded usage this can be used by calling the setters directly.\n+```java\n+server.setDumpAfterStart(true);\n+server.setDumpBeforeStop(true);\n+```\n+\n+Standalone Jetty uses two properties to control this behaviour which are referenced in `jetty.xml` to call these setters.\n+These properties are `jetty.server.dumpAfterStart` and `jetty.server.dumpBeforeStop`.\n+\n+These can be temporarily enabled by supplying these properties as command line arguments,\n+or they can be enabled via the `server.ini` file (see xref:quick-start-configure[]).\n+```\n+java -jar $JETTY_HOME/start.jar jetty.server.dumpAfterStart=true jetty.server.dumpBeforeStop=true\n+```\n+\n+[[extra-threadpool-info]]\n+==== Extra ThreadPool Information\n+\n+You can get additional detail from the `QueuedThreadPool` if `setDetailedDump(true)` is called on the thread pool instance.\n+For embedded usage this can be used by calling the setters directly.\n+```java\n+threadPool.setDetailedDump(true);\n+```\n+\n+For standalone jetty you can enable the `threadpool` module and configure the `jetty.threadPool.detailedDump` property.\n+See xref:startup-modules[] for information on how to enable a module.\n+This same property can also be set via the command line the same as the server dump property.\n+\n+[[dump-tool-via-jmx]]\n+==== Using the Dump Feature via JMX\n+\n+The `dump` method is on the Server instance and many of its nested components (Handlers, Connectors, and so forth). \n+Dumps may be obtained by calling these methods either in code or via JMX (see xref:using-jmx[]).\n+\n+The Server MBean has a `dump()` method, which dumps everything, plus a `dumpStdErr()` operation that dumps to StdErr rather than replying to JConsole.\n+\n+[[examing-jetty-distro-dump]]\n+==== Explanation of the Dump Key\n+\n+- +- bean is a java POJO that is contained by the parent object as a bean added with the addBean method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff6121c45d0994cb5018411f8a8d72db1fd65c3"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgwNDc4NA==", "bodyText": "The list renders fine, I have backquoted the titles to make them clearer.", "url": "https://github.com/eclipse/jetty.project/pull/5200#discussion_r481804784", "createdAt": "2020-09-02T06:56:31Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-documentation/src/main/asciidoc/administration/logging/jetty-server-dump.adoc", "diffHunk": "@@ -0,0 +1,189 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ========================================================================\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+[[jetty-server-dump]]\n+=== Jetty Server Dump\n+\n+The dump feature in Jetty provides a good snapshot of the status of the threadpool, select sets, classloaders, and so forth. \n+To get maximum detail from the dump, you need to `setDetailDump(true)` on any `QueuedThreadPools` you are using. \n+You can do this by a direct call if you are embedding Jetty, or by using properties for standalone Jetty.\n+\n+[[configuring-dump-feature]]\n+==== Configuring the Jetty Server Dump\n+\n+You can request that Jetty do a dump immediately after starting and just before stopping by calling the appropriate setters on the `Server` instance.\n+For embedded usage this can be used by calling the setters directly.\n+```java\n+server.setDumpAfterStart(true);\n+server.setDumpBeforeStop(true);\n+```\n+\n+Standalone Jetty uses two properties to control this behaviour which are referenced in `jetty.xml` to call these setters.\n+These properties are `jetty.server.dumpAfterStart` and `jetty.server.dumpBeforeStop`.\n+\n+These can be temporarily enabled by supplying these properties as command line arguments,\n+or they can be enabled via the `server.ini` file (see xref:quick-start-configure[]).\n+```\n+java -jar $JETTY_HOME/start.jar jetty.server.dumpAfterStart=true jetty.server.dumpBeforeStop=true\n+```\n+\n+[[extra-threadpool-info]]\n+==== Extra ThreadPool Information\n+\n+You can get additional detail from the `QueuedThreadPool` if `setDetailedDump(true)` is called on the thread pool instance.\n+For embedded usage this can be used by calling the setters directly.\n+```java\n+threadPool.setDetailedDump(true);\n+```\n+\n+For standalone jetty you can enable the `threadpool` module and configure the `jetty.threadPool.detailedDump` property.\n+See xref:startup-modules[] for information on how to enable a module.\n+This same property can also be set via the command line the same as the server dump property.\n+\n+[[dump-tool-via-jmx]]\n+==== Using the Dump Feature via JMX\n+\n+The `dump` method is on the Server instance and many of its nested components (Handlers, Connectors, and so forth). \n+Dumps may be obtained by calling these methods either in code or via JMX (see xref:using-jmx[]).\n+\n+The Server MBean has a `dump()` method, which dumps everything, plus a `dumpStdErr()` operation that dumps to StdErr rather than replying to JConsole.\n+\n+[[examing-jetty-distro-dump]]\n+==== Explanation of the Dump Key\n+\n+- +- bean is a java POJO that is contained by the parent object as a bean added with the addBean method.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2NDY2MA=="}, "originalCommit": {"oid": "cff6121c45d0994cb5018411f8a8d72db1fd65c3"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTcyNDg2OnYy", "diffSide": "RIGHT", "path": "jetty-documentation/src/main/asciidoc/administration/logging/jetty-server-dump.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToyMDoxOFrOHJ02Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToyMDoxOFrOHJ02Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2NTA2Ng==", "bodyText": "Examining?   I think 'An Example' would be better", "url": "https://github.com/eclipse/jetty.project/pull/5200#discussion_r480065066", "createdAt": "2020-08-31T11:20:18Z", "author": {"login": "gregw"}, "path": "jetty-documentation/src/main/asciidoc/administration/logging/jetty-server-dump.adoc", "diffHunk": "@@ -0,0 +1,189 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ========================================================================\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+[[jetty-server-dump]]\n+=== Jetty Server Dump\n+\n+The dump feature in Jetty provides a good snapshot of the status of the threadpool, select sets, classloaders, and so forth. \n+To get maximum detail from the dump, you need to `setDetailDump(true)` on any `QueuedThreadPools` you are using. \n+You can do this by a direct call if you are embedding Jetty, or by using properties for standalone Jetty.\n+\n+[[configuring-dump-feature]]\n+==== Configuring the Jetty Server Dump\n+\n+You can request that Jetty do a dump immediately after starting and just before stopping by calling the appropriate setters on the `Server` instance.\n+For embedded usage this can be used by calling the setters directly.\n+```java\n+server.setDumpAfterStart(true);\n+server.setDumpBeforeStop(true);\n+```\n+\n+Standalone Jetty uses two properties to control this behaviour which are referenced in `jetty.xml` to call these setters.\n+These properties are `jetty.server.dumpAfterStart` and `jetty.server.dumpBeforeStop`.\n+\n+These can be temporarily enabled by supplying these properties as command line arguments,\n+or they can be enabled via the `server.ini` file (see xref:quick-start-configure[]).\n+```\n+java -jar $JETTY_HOME/start.jar jetty.server.dumpAfterStart=true jetty.server.dumpBeforeStop=true\n+```\n+\n+[[extra-threadpool-info]]\n+==== Extra ThreadPool Information\n+\n+You can get additional detail from the `QueuedThreadPool` if `setDetailedDump(true)` is called on the thread pool instance.\n+For embedded usage this can be used by calling the setters directly.\n+```java\n+threadPool.setDetailedDump(true);\n+```\n+\n+For standalone jetty you can enable the `threadpool` module and configure the `jetty.threadPool.detailedDump` property.\n+See xref:startup-modules[] for information on how to enable a module.\n+This same property can also be set via the command line the same as the server dump property.\n+\n+[[dump-tool-via-jmx]]\n+==== Using the Dump Feature via JMX\n+\n+The `dump` method is on the Server instance and many of its nested components (Handlers, Connectors, and so forth). \n+Dumps may be obtained by calling these methods either in code or via JMX (see xref:using-jmx[]).\n+\n+The Server MBean has a `dump()` method, which dumps everything, plus a `dumpStdErr()` operation that dumps to StdErr rather than replying to JConsole.\n+\n+[[examing-jetty-distro-dump]]\n+==== Explanation of the Dump Key\n+\n+- +- bean is a java POJO that is contained by the parent object as a bean added with the addBean method.\n+- += managed is a bean that is also a LifeCycle that is started and stopped with the parent object.\n+- +~ unmanaged is a bean that is also a LifeCycle that is started and stopped with the parent object. It is typically shared with other objects (hence its children are not dumped)\n+- +? auto is a bean that has been added to an unstarted parent. If it is a LifeCycle that is not started when the parent is started, then it is started and becomes a managed bean, otherwise it becomes either unmanaged or just a bean\n+- +: iterable is an object that is contained within an iterable field of the parent (eg a list, set etc.)\n+- +] array is an object that is contained within an array field of the parent\n+- +@ map' is an object that is contained within an map field of the parent +> undefined` is an object that is contained within the parent by an undefined relationship\n+\n+\n+==== Examining a Jetty Distribution Dump", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff6121c45d0994cb5018411f8a8d72db1fd65c3"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2345, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}