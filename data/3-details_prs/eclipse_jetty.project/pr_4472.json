{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMjc4ODQw", "number": 4472, "title": "Issue #4462 - Prevent jetty 10 WebSocket close deadlocks", "bodyText": "Closes #4462", "createdAt": "2020-01-10T05:11:29Z", "url": "https://github.com/eclipse/jetty.project/pull/4472", "merged": true, "mergeCommit": {"oid": "f6fd3c41a5991f7062c379a90b7182af97484b39"}, "closed": true, "closedAt": "2020-01-28T22:15:41Z", "author": {"login": "lachlan-roberts"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb41Z50gH2gAyMzYxMjc4ODQwOjE4ODUwZDI1NzJlNGM1OGQyZTA2MWM0OGQwMzI1NmJiZjJlMGIzOWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-tZ6gAFqTM0OTIwNjkxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "18850d2572e4c58d2e061c48d03256bbf2e0b39e", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/18850d2572e4c58d2e061c48d03256bbf2e0b39e", "committedDate": "2020-01-10T02:47:57Z", "message": "Issue #4462 - Replicate problems from WS close deadlock with testcases\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4349ec383f5452cff204a4d4f83b0f3d9dbd931c", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/4349ec383f5452cff204a4d4f83b0f3d9dbd931c", "committedDate": "2020-01-10T04:49:54Z", "message": "Issue #4462 - do not use SharedBlockingCallback for jetty WS close\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de903ec1db15c43787613f58010339700bb2ecb9", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/de903ec1db15c43787613f58010339700bb2ecb9", "committedDate": "2020-01-10T05:13:03Z", "message": "add missing licence header\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "151fa256589c2f6f57fc9f95142fe44a9bbd5a7b", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/151fa256589c2f6f57fc9f95142fe44a9bbd5a7b", "committedDate": "2020-01-12T23:50:33Z", "message": "Ignore any  closes after the initial websocket close.\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9fd77c31e2416610ebe76d881b90bcff76c2059", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/c9fd77c31e2416610ebe76d881b90bcff76c2059", "committedDate": "2020-01-12T23:54:51Z", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-4462-WSCloseWithLockHeld"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNjA5NTIw", "url": "https://github.com/eclipse/jetty.project/pull/4472#pullrequestreview-341609520", "createdAt": "2020-01-12T23:57:14Z", "commit": {"oid": "c9fd77c31e2416610ebe76d881b90bcff76c2059"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQyMzo1NzoxNVrOFcrx4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQyMzo1NzoxNVrOFcrx4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYyMTczMQ==", "bodyText": "@gregw using this AtomicBoolean to make sure any subsequent closes are just a NOOP.", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r365621731", "createdAt": "2020-01-12T23:57:15Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-websocket/websocket-jetty-common/src/main/java/org/eclipse/jetty/websocket/common/JettyWebSocketRemoteEndpoint.java", "diffHunk": "@@ -74,13 +75,18 @@ public void close()\n      */\n     public void close(int statusCode, String reason)\n     {\n-        try (SharedBlockingCallback.Blocker b = blocker.acquire())\n+        if (!closed.compareAndSet(false, true))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9fd77c31e2416610ebe76d881b90bcff76c2059"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "755cdce92b4b88ab314373ea5a1faa052e82945c", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/755cdce92b4b88ab314373ea5a1faa052e82945c", "committedDate": "2020-01-13T03:12:39Z", "message": "subsequent closes are prevented now with WSCoreSession close\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7aba5467336f2e8f9f516b299a03f3963a6bddef", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/7aba5467336f2e8f9f516b299a03f3963a6bddef", "committedDate": "2020-01-13T03:47:58Z", "message": "Use new class BlockingCallback instead of SharedBlockingCallback\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f07bba960e973b5dd140a8df1caf160e8d8c6432", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/f07bba960e973b5dd140a8df1caf160e8d8c6432", "committedDate": "2020-01-13T04:30:06Z", "message": "add licence header\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "979b2888d86873146337d026aac40f60fcea847b", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/979b2888d86873146337d026aac40f60fcea847b", "committedDate": "2020-01-13T21:45:34Z", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-4462-WSCloseWithLockHeld"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61a316f9446c86c23b3f252e46188519db1de749", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/61a316f9446c86c23b3f252e46188519db1de749", "committedDate": "2020-01-13T23:49:47Z", "message": "Move prevention of duplicate closes back to the jetty and javax APIs\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "451415848b808096747c77e954b9eb1ef9a73e04", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/451415848b808096747c77e954b9eb1ef9a73e04", "committedDate": "2020-01-14T06:25:41Z", "message": "attempt to fix long build time and fix test cases\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMDg2NjIy", "url": "https://github.com/eclipse/jetty.project/pull/4472#pullrequestreview-343086622", "createdAt": "2020-01-15T09:34:03Z", "commit": {"oid": "451415848b808096747c77e954b9eb1ef9a73e04"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTozNDowM1rOFdyEFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTo0MjoxN1rOFdyTpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3MzI3MQ==", "bodyText": "Just a nitpick, but I'd call this just closed.", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r366773271", "createdAt": "2020-01-15T09:34:03Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketSession.java", "diffHunk": "@@ -54,14 +55,14 @@\n {\n     private static final Logger LOG = Log.getLogger(JavaxWebSocketSession.class);\n \n-    protected final SharedBlockingCallback blocking = new SharedBlockingCallback();\n     private final JavaxWebSocketContainer container;\n     private final FrameHandler.CoreSession coreSession;\n     private final JavaxWebSocketFrameHandler frameHandler;\n     private final EndpointConfig config;\n     private final AvailableDecoders availableDecoders;\n     private final AvailableEncoders availableEncoders;\n     private final Map<String, String> pathParameters;\n+    private final AtomicBoolean closeInitiated = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451415848b808096747c77e954b9eb1ef9a73e04"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3MzYyNA==", "bodyText": "I don't think we want to log and swallow the exception here. I would remove the catch - it's a RuntimeException and if it happens let it flow out.", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r366773624", "createdAt": "2020-01-15T09:34:47Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketSession.java", "diffHunk": "@@ -194,9 +192,18 @@ public void close() throws IOException\n     @Override\n     public void close(CloseReason closeReason) throws IOException\n     {\n-        try (SharedBlockingCallback.Blocker blocker = blocking.acquire())\n+        if (!closeInitiated.compareAndSet(false, true))\n+            return;\n+\n+        try\n+        {\n+            BlockingCallback b = new BlockingCallback();\n+            coreSession.close(closeReason.getCloseCode().getCode(), closeReason.getReasonPhrase(), b);\n+            b.block();\n+        }\n+        catch (RuntimeException e)\n         {\n-            coreSession.close(closeReason.getCloseCode().getCode(), closeReason.getReasonPhrase(), blocker);\n+            LOG.warn(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451415848b808096747c77e954b9eb1ef9a73e04"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3NDcyMw==", "bodyText": "See above, just closed.", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r366774723", "createdAt": "2020-01-15T09:37:01Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-jetty-common/src/main/java/org/eclipse/jetty/websocket/common/JettyWebSocketRemoteEndpoint.java", "diffHunk": "@@ -37,9 +41,11 @@\n \n public class JettyWebSocketRemoteEndpoint implements org.eclipse.jetty.websocket.api.RemoteEndpoint\n {\n+    private static final Logger LOG = Log.getLogger(JettyWebSocketRemoteEndpoint.class);\n+\n     private final FrameHandler.CoreSession coreSession;\n+    private final AtomicBoolean closeInitiated = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451415848b808096747c77e954b9eb1ef9a73e04"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3NDgyMQ==", "bodyText": "Ditto above.", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r366774821", "createdAt": "2020-01-15T09:37:13Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-jetty-common/src/main/java/org/eclipse/jetty/websocket/common/JettyWebSocketRemoteEndpoint.java", "diffHunk": "@@ -74,13 +73,18 @@ public void close()\n      */\n     public void close(int statusCode, String reason)\n     {\n-        try (SharedBlockingCallback.Blocker b = blocker.acquire())\n+        if (!closeInitiated.compareAndSet(false, true))\n+            return;\n+\n+        try\n         {\n-            coreSession.close(statusCode, reason, b);\n+            BlockingCallback blockingCallback = new BlockingCallback();\n+            coreSession.close(statusCode, reason, blockingCallback);\n+            blockingCallback.block();\n         }\n-        catch (IOException e)\n+        catch (Throwable t)\n         {\n-            coreSession.close(Callback.NOOP);\n+            LOG.warn(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451415848b808096747c77e954b9eb1ef9a73e04"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3NTE3NQ==", "bodyText": "This seems a very specialized version that is only useful to WebSocket?", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r366775175", "createdAt": "2020-01-15T09:37:56Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/BlockingCallback.java", "diffHunk": "@@ -0,0 +1,62 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.util.concurrent.ExecutionException;\n+\n+public class BlockingCallback implements Callback", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451415848b808096747c77e954b9eb1ef9a73e04"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3NzI1NQ==", "bodyText": "Please add a test where 2 closes are performed from 2 different threads. The path I would like to be tested is:\nThread T1 calls close() triggering abnormal close so that onWebSocketClose() gets called.\nIn onWebSocketClose() spawn a new thread T2 that calls close() and wait for T2 to finish.\nExpect T1 to finish (was deadlocking before).", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r366777255", "createdAt": "2020-01-15T09:42:17Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-jetty-tests/src/test/java/org/eclipse/jetty/websocket/tests/server/ServerCloseTest.java", "diffHunk": "@@ -275,4 +276,27 @@ public void testOpenSessionCleanup() throws Exception\n             close(session);\n         }\n     }\n+\n+    @Test\n+    public void testHardClose() throws Exception\n+    {\n+        // Testing WebSocketSession.close() in onClosed() does not cause deadlock.\n+        ClientUpgradeRequest request = new ClientUpgradeRequest();\n+        request.setSubProtocols(\"closeInOnClose\");\n+        CloseTrackingEndpoint clientEndpoint = new CloseTrackingEndpoint();\n+\n+        URI wsUri = WSURI.toWebsocket(server.getURI().resolve(\"/ws\"));\n+        client.connect(clientEndpoint, wsUri, request).get(5, SECONDS);\n+\n+        // Hard close from the server. Server onClosed() will try to close again which should be a NOOP.\n+        AbstractCloseEndpoint serverEndpoint = serverEndpointCreator.pollLastCreated();\n+        serverEndpoint.getSession().close(StatusCode.SHUTDOWN, \"SHUTDOWN hard close\");\n+\n+        // Verify that client got close\n+        clientEndpoint.assertReceivedCloseEvent(5000, is(StatusCode.SHUTDOWN), containsString(\"SHUTDOWN hard close\"));\n+\n+        // Verify that server socket got close event\n+        assertTrue(serverEndpoint.closeLatch.await(5, SECONDS));\n+        assertThat(serverEndpoint.closeStatusCode, is(StatusCode.SHUTDOWN));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451415848b808096747c77e954b9eb1ef9a73e04"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMTE5NDM1", "url": "https://github.com/eclipse/jetty.project/pull/4472#pullrequestreview-343119435", "createdAt": "2020-01-15T10:26:03Z", "commit": {"oid": "451415848b808096747c77e954b9eb1ef9a73e04"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMDoyNjowM1rOFdzo5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMDoyNjowM1rOFdzo5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc5OTA3OA==", "bodyText": "The use of the SharedBlockingCallback provided both mutual exclusion (waiting for a previously allocated blocker) as well as the BlockingCallback itself.\nIt turns out that the mutual exclusion is vulnerable to reentrancy, so that if the blocking operation calls another operation that needs the same SharedBlockingCallback, then we get deadlock.\nWe have seen that close can have that reentrant behaviour, as it calls user code, but I'm not sure that means we should give up on the mutual exclusion elsewhere.  For example are we sure we can allow two threads to simultaneously enter sendBinary?\nThus I'm not sure we should swap out all the SharedBlockingCallbacks, specially as we don't really know where else this reentrancy might be a problem.  So I think we need to at least modify SharedBlockingCallback to detect such reentrancy and to either do an ISE or perhaps optionally provide a non shared instance.   Perhaps in the methods we know that might be reentrant, we can pass in an extra arg to say that renentrancy is supported:\n        try (SharedBlockingCallback.Blocker b = session.getBlocking().acquire(true))\t\n\nIn this case, if the Blocker is already allocated, then we simply return a new instance that is never shared.", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r366799078", "createdAt": "2020-01-15T10:26:03Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketBasicRemote.java", "diffHunk": "@@ -65,10 +65,10 @@ public void sendBinary(ByteBuffer data) throws IOException\n         {\n             LOG.debug(\"sendBinary({})\", BufferUtil.toDetailString(data));\n         }\n-        try (SharedBlockingCallback.Blocker b = session.getBlocking().acquire())\n-        {\n-            sendFrame(new Frame(OpCode.BINARY).setPayload(data), b, false);\n-        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451415848b808096747c77e954b9eb1ef9a73e04"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMTQ3MDEy", "url": "https://github.com/eclipse/jetty.project/pull/4472#pullrequestreview-343147012", "createdAt": "2020-01-15T11:14:08Z", "commit": {"oid": "451415848b808096747c77e954b9eb1ef9a73e04"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMToxNDowOFrOFd0-Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMToxNDowOFrOFd0-Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgyMDg4Mg==", "bodyText": "SharedBlockingCallback has an idle timeout so we avoid waiting forever.", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r366820882", "createdAt": "2020-01-15T11:14:08Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/BlockingCallback.java", "diffHunk": "@@ -0,0 +1,62 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.util.concurrent.ExecutionException;\n+\n+public class BlockingCallback implements Callback\n+{\n+    private FutureCallback callback = new FutureCallback();\n+\n+    @Override\n+    public void succeeded()\n+    {\n+        callback.succeeded();\n+    }\n+\n+    @Override\n+    public void failed(Throwable x)\n+    {\n+        callback.failed(x);\n+    }\n+\n+    public void block() throws IOException\n+    {\n+        try\n+        {\n+            callback.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451415848b808096747c77e954b9eb1ef9a73e04"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b0a03a57c240fb2c35dcee560c2b529b8a8111d", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/0b0a03a57c240fb2c35dcee560c2b529b8a8111d", "committedDate": "2020-01-15T23:18:25Z", "message": "add timeout to BlockingCallback for WS use this is idleTimeout + 1000ms\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "103d6eab017d6f2880d79a5910a50f7557cd726b", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/103d6eab017d6f2880d79a5910a50f7557cd726b", "committedDate": "2020-01-16T00:00:42Z", "message": "Core throws ClosedChannelException instead of ISE if send after closed\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "645f0eb3788c5cbfca63480223015022274780ff", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/645f0eb3788c5cbfca63480223015022274780ff", "committedDate": "2020-01-16T00:25:51Z", "message": "update testing to test close from separate thread after hard close\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58f61de64f5250a10ee14b3840acd399d47893e0", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/58f61de64f5250a10ee14b3840acd399d47893e0", "committedDate": "2020-01-16T04:11:47Z", "message": "fix tests\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNjk4MTg3", "url": "https://github.com/eclipse/jetty.project/pull/4472#pullrequestreview-343698187", "createdAt": "2020-01-16T06:37:34Z", "commit": {"oid": "58f61de64f5250a10ee14b3840acd399d47893e0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjozNzozNVrOFePTNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjozNzozNVrOFePTNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI1MjI3OQ==", "bodyText": "if the idle timeout is 0, this is wrong.  You should only +1000 to timeouts >0", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r367252279", "createdAt": "2020-01-16T06:37:35Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketBasicRemote.java", "diffHunk": "@@ -134,27 +134,32 @@ public void sendText(String partialMessage, boolean isLast) throws IOException\n         {\n             LOG.debug(\"sendText({},{})\", TextUtil.hint(partialMessage), isLast);\n         }\n-        try (SharedBlockingCallback.Blocker b = session.getBlocking().acquire())\n+\n+        Frame frame;\n+        switch (messageType)\n         {\n-            Frame frame;\n-            switch (messageType)\n-            {\n-                case -1:\n-                    // New message!\n-                    frame = new Frame(OpCode.TEXT);\n-                    break;\n-                case OpCode.TEXT:\n-                    frame = new Frame(OpCode.CONTINUATION);\n-                    break;\n-                case OpCode.BINARY:\n-                    throw new IllegalStateException(\"Cannot send a partial TEXT message: BINARY message in progress\");\n-                default:\n-                    throw new IllegalStateException(\"Cannot send a partial TEXT message: unrecognized active message type \" + OpCode.name(messageType));\n-            }\n-\n-            frame.setPayload(BufferUtil.toBuffer(partialMessage, UTF_8));\n-            frame.setFin(isLast);\n-            sendFrame(frame, b, false);\n+            case -1:\n+                // New message!\n+                frame = new Frame(OpCode.TEXT);\n+                break;\n+            case OpCode.TEXT:\n+                frame = new Frame(OpCode.CONTINUATION);\n+                break;\n+            case OpCode.BINARY:\n+                throw new IllegalStateException(\"Cannot send a partial TEXT message: BINARY message in progress\");\n+            default:\n+                throw new IllegalStateException(\"Cannot send a partial TEXT message: unrecognized active message type \" + OpCode.name(messageType));\n         }\n+\n+        frame.setPayload(BufferUtil.toBuffer(partialMessage, UTF_8));\n+        frame.setFin(isLast);\n+        BlockingCallback b = newBlockingCallback();\n+        sendFrame(frame, b, false);\n+        b.block();\n+    }\n+\n+    private BlockingCallback newBlockingCallback()\n+    {\n+        return new BlockingCallback(getIdleTimeout() + 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58f61de64f5250a10ee14b3840acd399d47893e0"}, "originalPosition": 152}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffee8bfce63dce83ad0b3ceb77ad85416985138f", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/ffee8bfce63dce83ad0b3ceb77ad85416985138f", "committedDate": "2020-01-16T08:01:44Z", "message": "do not add 1000ms to idleTimeout if it is not greater than 0\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3c214df198d15f08e00f2b9874c312008ac87ff", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/b3c214df198d15f08e00f2b9874c312008ac87ff", "committedDate": "2020-01-16T08:23:01Z", "message": "javax SessionTracker guards for thrown IOExceptions from close\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzODE5MTI4", "url": "https://github.com/eclipse/jetty.project/pull/4472#pullrequestreview-343819128", "createdAt": "2020-01-16T10:40:15Z", "commit": {"oid": "b3c214df198d15f08e00f2b9874c312008ac87ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDo0MDoxNlrOFeVFIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDo0MDoxNlrOFeVFIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM0Njk3Nw==", "bodyText": "Just because I'm paranoid, I think this constructor should be eliminated.\nAnd any setting for \"infinite\" or \"no-timeout\" should also be eliminated.", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r367346977", "createdAt": "2020-01-16T10:40:16Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/BlockingCallback.java", "diffHunk": "@@ -0,0 +1,84 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class BlockingCallback implements Callback\n+{\n+    private FutureCallback callback = new FutureCallback();\n+    private final long timeout;\n+\n+    public BlockingCallback()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c214df198d15f08e00f2b9874c312008ac87ff"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzODE5Nzk0", "url": "https://github.com/eclipse/jetty.project/pull/4472#pullrequestreview-343819794", "createdAt": "2020-01-16T10:41:21Z", "commit": {"oid": "b3c214df198d15f08e00f2b9874c312008ac87ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDo0MToyMVrOFeVHPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDo0MToyMVrOFeVHPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM0NzUxNg==", "bodyText": "This infinite timeout bothers me.\nI have flashbacks to #3279 and #2061", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r367347516", "createdAt": "2020-01-16T10:41:21Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/BlockingCallback.java", "diffHunk": "@@ -0,0 +1,84 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class BlockingCallback implements Callback\n+{\n+    private FutureCallback callback = new FutureCallback();\n+    private final long timeout;\n+\n+    public BlockingCallback()\n+    {\n+        this(-1);\n+    }\n+\n+    public BlockingCallback(long timeout)\n+    {\n+        this.timeout = timeout;\n+    }\n+\n+    @Override\n+    public void succeeded()\n+    {\n+        callback.succeeded();\n+    }\n+\n+    @Override\n+    public void failed(Throwable x)\n+    {\n+        callback.failed(x);\n+    }\n+\n+    public void block() throws IOException\n+    {\n+        try\n+        {\n+            if (timeout > 0)\n+                callback.get(timeout, TimeUnit.MILLISECONDS);\n+            else\n+                callback.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c214df198d15f08e00f2b9874c312008ac87ff"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NTUzNTYw", "url": "https://github.com/eclipse/jetty.project/pull/4472#pullrequestreview-344553560", "createdAt": "2020-01-17T12:43:29Z", "commit": {"oid": "b3c214df198d15f08e00f2b9874c312008ac87ff"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMjo0MzozMFrOFe35dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMjo0OTowNlrOFe4A-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNzQyOQ==", "bodyText": "Brace at end of line?", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r367917429", "createdAt": "2020-01-17T12:43:30Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketBasicRemote.java", "diffHunk": "@@ -134,27 +134,32 @@ public void sendText(String partialMessage, boolean isLast) throws IOException\n         {\n             LOG.debug(\"sendText({},{})\", TextUtil.hint(partialMessage), isLast);\n         }\n-        try (SharedBlockingCallback.Blocker b = session.getBlocking().acquire())\n+\n+        Frame frame;\n+        switch (messageType)\n         {\n-            Frame frame;\n-            switch (messageType)\n-            {\n-                case -1:\n-                    // New message!\n-                    frame = new Frame(OpCode.TEXT);\n-                    break;\n-                case OpCode.TEXT:\n-                    frame = new Frame(OpCode.CONTINUATION);\n-                    break;\n-                case OpCode.BINARY:\n-                    throw new IllegalStateException(\"Cannot send a partial TEXT message: BINARY message in progress\");\n-                default:\n-                    throw new IllegalStateException(\"Cannot send a partial TEXT message: unrecognized active message type \" + OpCode.name(messageType));\n-            }\n-\n-            frame.setPayload(BufferUtil.toBuffer(partialMessage, UTF_8));\n-            frame.setFin(isLast);\n-            sendFrame(frame, b, false);\n+            case -1:\n+                // New message!\n+                frame = new Frame(OpCode.TEXT);\n+                break;\n+            case OpCode.TEXT:\n+                frame = new Frame(OpCode.CONTINUATION);\n+                break;\n+            case OpCode.BINARY:\n+                throw new IllegalStateException(\"Cannot send a partial TEXT message: BINARY message in progress\");\n+            default:\n+                throw new IllegalStateException(\"Cannot send a partial TEXT message: unrecognized active message type \" + OpCode.name(messageType));\n         }\n+\n+        frame.setPayload(BufferUtil.toBuffer(partialMessage, UTF_8));\n+        frame.setFin(isLast);\n+        BlockingCallback b = newBlockingCallback();\n+        sendFrame(frame, b, false);\n+        b.block();\n     }\n+\n+    private BlockingCallback newBlockingCallback()\n+    {\n+        long idleTimeout = getIdleTimeout();\n+        return new BlockingCallback((idleTimeout > 0) ? idleTimeout + 1000 : idleTimeout);    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c214df198d15f08e00f2b9874c312008ac87ff"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNzk5NA==", "bodyText": "I don't understand this change? try-with-resources seems the right thing to do here.\nWhy did you keep the blocks if you are not using try-with-resources?", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r367917994", "createdAt": "2020-01-17T12:45:18Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-tests/src/test/java/org/eclipse/jetty/websocket/javax/tests/server/SessionTrackingTest.java", "diffHunk": "@@ -104,22 +104,22 @@ public void testAddRemoveSessions() throws Exception\n         EventSocket clientSocket2 = new EventSocket();\n         EventSocket clientSocket3 = new EventSocket();\n \n-        try (Session session1 = client.connectToServer(clientSocket1, server.getWsUri().resolve(\"/session-info/1\")))\n+        Session session1 = client.connectToServer(clientSocket1, server.getWsUri().resolve(\"/session-info/1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c214df198d15f08e00f2b9874c312008ac87ff"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxOTM1NA==", "bodyText": "This test should block and wait for the thread (and therefore the close()) to finish, and then return from onWebSocketClose(). In this way we guarantee that we don't deadlock.", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r367919354", "createdAt": "2020-01-17T12:49:06Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-jetty-tests/src/test/java/org/eclipse/jetty/websocket/tests/server/CloseInOnCloseEndpointNewThread.java", "diffHunk": "@@ -0,0 +1,31 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.tests.server;\n+\n+import org.eclipse.jetty.websocket.api.StatusCode;\n+\n+public class CloseInOnCloseEndpointNewThread extends AbstractCloseEndpoint\n+{\n+    @Override\n+    public void onWebSocketClose(int statusCode, String reason)\n+    {\n+        new Thread(() -> getSession().close(StatusCode.SERVER_ERROR, \"this should be a noop\")).start();\n+        super.onWebSocketClose(statusCode, reason);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c214df198d15f08e00f2b9874c312008ac87ff"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b72768d4a869507844466a4d958cbb532063941", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/4b72768d4a869507844466a4d958cbb532063941", "committedDate": "2020-01-20T07:07:52Z", "message": "improve testing\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "702edbed74f253a33444bb581c1f24c7afd4f986", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/702edbed74f253a33444bb581c1f24c7afd4f986", "committedDate": "2020-01-20T07:22:34Z", "message": "changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NDQ5NjA1", "url": "https://github.com/eclipse/jetty.project/pull/4472#pullrequestreview-345449605", "createdAt": "2020-01-20T17:18:19Z", "commit": {"oid": "702edbed74f253a33444bb581c1f24c7afd4f986"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNzoxODoyMFrOFflGLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNzoyMzowM1rOFflMhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY1Nzk2Nw==", "bodyText": "But in a double close() the second should be a no-op, no? Only in core it throws, but this is javax.", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r368657967", "createdAt": "2020-01-20T17:18:20Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-tests/src/test/java/org/eclipse/jetty/websocket/javax/tests/server/SessionTrackingTest.java", "diffHunk": "@@ -104,22 +104,22 @@ public void testAddRemoveSessions() throws Exception\n         EventSocket clientSocket2 = new EventSocket();\n         EventSocket clientSocket3 = new EventSocket();\n \n-        try (Session session1 = client.connectToServer(clientSocket1, server.getWsUri().resolve(\"/session-info/1\")))\n+        Session session1 = client.connectToServer(clientSocket1, server.getWsUri().resolve(\"/session-info/1\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNzk5NA=="}, "originalCommit": {"oid": "b3c214df198d15f08e00f2b9874c312008ac87ff"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY1OTU5MA==", "bodyText": "Because you are stating in the test what is the behavior that must happen.\nIf you revert the code to use SharedBlockingCallback or a Lock, this test will fail because it waits indefinitely.\nYour comments assumes how the code works and so you ask \"why writing a test since I know how the code works\".\nThat is exactly why you write tests.", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r368659590", "createdAt": "2020-01-20T17:23:03Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-jetty-tests/src/test/java/org/eclipse/jetty/websocket/tests/server/CloseInOnCloseEndpointNewThread.java", "diffHunk": "@@ -0,0 +1,31 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.tests.server;\n+\n+import org.eclipse.jetty.websocket.api.StatusCode;\n+\n+public class CloseInOnCloseEndpointNewThread extends AbstractCloseEndpoint\n+{\n+    @Override\n+    public void onWebSocketClose(int statusCode, String reason)\n+    {\n+        new Thread(() -> getSession().close(StatusCode.SERVER_ERROR, \"this should be a noop\")).start();\n+        super.onWebSocketClose(statusCode, reason);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxOTM1NA=="}, "originalCommit": {"oid": "b3c214df198d15f08e00f2b9874c312008ac87ff"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d70e51b6f2ab875baec7e69b6af0bb88c2dc7773", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/d70e51b6f2ab875baec7e69b6af0bb88c2dc7773", "committedDate": "2020-01-21T01:58:56Z", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-4462-WSCloseWithLockHeld"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfe1fc08a406cff1e8fbc6b6222161ee32540344", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/bfe1fc08a406cff1e8fbc6b6222161ee32540344", "committedDate": "2020-01-21T02:08:58Z", "message": "fix checkstyle violation in WebSocketCloseTest\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c595144341fc7d4bfa63a511383d8b18ca1cdd7e", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/c595144341fc7d4bfa63a511383d8b18ca1cdd7e", "committedDate": "2020-01-21T03:09:00Z", "message": "remove test in WebSocketCloseTest now in FlushTest\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3Nzk0OTgz", "url": "https://github.com/eclipse/jetty.project/pull/4472#pullrequestreview-347794983", "createdAt": "2020-01-24T08:05:30Z", "commit": {"oid": "c595144341fc7d4bfa63a511383d8b18ca1cdd7e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwODowNTozMFrOFhWKkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwODoyMDozNVrOFhWbgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxMDQ4MA==", "bodyText": "The only thing this class does is to have a block() throws IOException method.\nCan't we just add the method to FutureCallback instead of proliferating these Callback implementations?", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r370510480", "createdAt": "2020-01-24T08:05:30Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/BlockingCallback.java", "diffHunk": "@@ -0,0 +1,84 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class BlockingCallback implements Callback", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c595144341fc7d4bfa63a511383d8b18ca1cdd7e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxMDYxNg==", "bodyText": "This field should be final, but I'd like to see this class go away better.", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r370510616", "createdAt": "2020-01-24T08:06:01Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/BlockingCallback.java", "diffHunk": "@@ -0,0 +1,84 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class BlockingCallback implements Callback\n+{\n+    private FutureCallback callback = new FutureCallback();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c595144341fc7d4bfa63a511383d8b18ca1cdd7e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxMDk1MA==", "bodyText": "Why shutdown() calls start()?", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r370510950", "createdAt": "2020-01-24T08:07:25Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-core/src/test/java/org/eclipse/jetty/websocket/core/FlushTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.core;\n+\n+import java.nio.channels.ClosedChannelException;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jetty.util.Callback;\n+import org.eclipse.jetty.websocket.core.client.WebSocketCoreClient;\n+import org.eclipse.jetty.websocket.core.server.WebSocketNegotiator;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class FlushTest\n+{\n+    private WebSocketServer server;\n+    private TestFrameHandler serverHandler = new TestFrameHandler();\n+    private WebSocketCoreClient client;\n+    private WebSocketComponents components = new WebSocketComponents();\n+\n+    @BeforeEach\n+    public void startup() throws Exception\n+    {\n+        WebSocketNegotiator negotiator = WebSocketNegotiator.from((negotiation) -> serverHandler);\n+        server = new WebSocketServer(negotiator);\n+        client = new WebSocketCoreClient(null, components);\n+\n+        server.start();\n+        client.start();\n+    }\n+\n+    @AfterEach\n+    public void shutdown() throws Exception\n+    {\n+        server.start();\n+        client.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c595144341fc7d4bfa63a511383d8b18ca1cdd7e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxMjYxOQ==", "bodyText": "There is a Callback.Completable class that you can use, rather than manually do this.", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r370512619", "createdAt": "2020-01-24T08:13:18Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-core/src/test/java/org/eclipse/jetty/websocket/core/FlushTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.core;\n+\n+import java.nio.channels.ClosedChannelException;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jetty.util.Callback;\n+import org.eclipse.jetty.websocket.core.client.WebSocketCoreClient;\n+import org.eclipse.jetty.websocket.core.server.WebSocketNegotiator;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class FlushTest\n+{\n+    private WebSocketServer server;\n+    private TestFrameHandler serverHandler = new TestFrameHandler();\n+    private WebSocketCoreClient client;\n+    private WebSocketComponents components = new WebSocketComponents();\n+\n+    @BeforeEach\n+    public void startup() throws Exception\n+    {\n+        WebSocketNegotiator negotiator = WebSocketNegotiator.from((negotiation) -> serverHandler);\n+        server = new WebSocketServer(negotiator);\n+        client = new WebSocketCoreClient(null, components);\n+\n+        server.start();\n+        client.start();\n+    }\n+\n+    @AfterEach\n+    public void shutdown() throws Exception\n+    {\n+        server.start();\n+        client.start();\n+    }\n+\n+    @Test\n+    public void testStandardFlush() throws Exception\n+    {\n+        TestFrameHandler clientHandler = new TestFrameHandler();\n+        CompletableFuture<FrameHandler.CoreSession> connect = client.connect(clientHandler, server.getUri());\n+        connect.get(5, TimeUnit.SECONDS);\n+\n+        // Send a batched frame.\n+        clientHandler.sendFrame(new Frame(OpCode.TEXT, \"text payload\"), Callback.NOOP, true);\n+\n+        // We have batched the frame and not sent it.\n+        assertNull(serverHandler.receivedFrames.poll(1, TimeUnit.SECONDS));\n+\n+        // Once we flush the frame is received.\n+        clientHandler.getCoreSession().flush(Callback.NOOP);\n+        Frame frame = Objects.requireNonNull(serverHandler.receivedFrames.poll(5, TimeUnit.SECONDS));\n+        assertThat(frame.getOpCode(), is(OpCode.TEXT));\n+        assertThat(frame.getPayloadAsUTF8(), is(\"text payload\"));\n+\n+        clientHandler.sendClose();\n+        frame = Objects.requireNonNull(serverHandler.receivedFrames.poll(5, TimeUnit.SECONDS));\n+        assertThat(CloseStatus.getCloseStatus(frame).getCode(), is(CloseStatus.NO_CODE));\n+        assertTrue(clientHandler.closed.await(5, TimeUnit.SECONDS));\n+        assertNull(clientHandler.getError());\n+        assertThat(clientHandler.closeStatus.getCode(), is(CloseStatus.NO_CODE));\n+    }\n+\n+    @Test\n+    public void testFlushOnCloseFrame() throws Exception\n+    {\n+        TestFrameHandler clientHandler = new TestFrameHandler();\n+        CompletableFuture<FrameHandler.CoreSession> connect = client.connect(clientHandler, server.getUri());\n+        connect.get(5, TimeUnit.SECONDS);\n+\n+        // Send a batched frame.\n+        clientHandler.sendFrame(new Frame(OpCode.TEXT, \"text payload\"), Callback.NOOP, true);\n+\n+        // We have batched the frame and not sent it.\n+        assertNull(serverHandler.receivedFrames.poll(1, TimeUnit.SECONDS));\n+\n+        // Sending the close initiates the flush and the frame is received.\n+        clientHandler.sendClose();\n+        Frame frame = Objects.requireNonNull(serverHandler.receivedFrames.poll(5, TimeUnit.SECONDS));\n+        assertThat(frame.getOpCode(), is(OpCode.TEXT));\n+        assertThat(frame.getPayloadAsUTF8(), is(\"text payload\"));\n+\n+        frame = Objects.requireNonNull(serverHandler.receivedFrames.poll(5, TimeUnit.SECONDS));\n+        assertThat(CloseStatus.getCloseStatus(frame).getCode(), is(CloseStatus.NO_CODE));\n+        assertTrue(clientHandler.closed.await(5, TimeUnit.SECONDS));\n+        assertNull(clientHandler.getError());\n+        assertThat(clientHandler.closeStatus.getCode(), is(CloseStatus.NO_CODE));\n+    }\n+\n+    @Test\n+    public void testFlushAfterClose() throws Exception\n+    {\n+        TestFrameHandler clientHandler = new TestFrameHandler();\n+        CompletableFuture<FrameHandler.CoreSession> connect = client.connect(clientHandler, server.getUri());\n+        connect.get(5, TimeUnit.SECONDS);\n+\n+        clientHandler.sendClose();\n+        assertTrue(clientHandler.closed.await(5, TimeUnit.SECONDS));\n+        assertNull(clientHandler.getError());\n+\n+        CompletableFuture<Throwable> failed = new CompletableFuture<>();\n+        Callback flushCallback = new Callback()\n+        {\n+            @Override\n+            public void failed(Throwable x)\n+            {\n+                failed.complete(x);\n+            }\n+        };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c595144341fc7d4bfa63a511383d8b18ca1cdd7e"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxNDI4NA==", "bodyText": "This test seems to test an implementation behavior that is IMHO wrong.\nIf I close NORMAL, and the callback succeeds, then any close after that will fail with a ClosedChannelException and it must not overtake a previous successful close.\nFrom the point of view of the behavior, it breaks the least surprise because I would think that the first successful close is retained, as the second close has failed.", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r370514284", "createdAt": "2020-01-24T08:18:44Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-core/src/test/java/org/eclipse/jetty/websocket/core/WebSocketCloseTest.java", "diffHunk": "@@ -425,6 +428,50 @@ public void testAbnormalCloseStatusIsHardClose(String scheme) throws Exception\n         assertThat(CloseStatus.getCloseStatus(frame).getCode(), is(CloseStatus.SERVER_ERROR));\n     }\n \n+    @ParameterizedTest\n+    @ValueSource(strings = {WS_SCHEME, WSS_SCHEME})\n+    public void doubleClose(String scheme) throws Exception\n+    {\n+        setup(State.OPEN, scheme);\n+\n+        CountDownLatchCallback callback1 = new CountDownLatchCallback();\n+        server.handler.getCoreSession().close(CloseStatus.SERVER_ERROR, \"server error should succeed\", callback1);\n+        CountDownLatchCallback callback2 = new CountDownLatchCallback();\n+        server.handler.getCoreSession().close(CloseStatus.PROTOCOL, \"protocol error should fail\", callback2);\n+\n+        assertTrue(callback1.succeeded.await(5, TimeUnit.SECONDS));\n+        assertThat(callback2.failed.get(5, TimeUnit.SECONDS), instanceOf(ClosedChannelException.class));\n+\n+        assertTrue(server.handler.closed.await(5, TimeUnit.SECONDS));\n+        assertThat(server.handler.closeStatus.getCode(), is(CloseStatus.SERVER_ERROR));\n+        assertThat(server.handler.closeStatus.getReason(), containsString(\"server error should succeed\"));\n+\n+        Frame frame = receiveFrame(client.getInputStream());\n+        assertThat(CloseStatus.getCloseStatus(frame).getCode(), is(CloseStatus.SERVER_ERROR));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {WS_SCHEME, WSS_SCHEME})\n+    public void doubleCloseAbnormalOvertakesNormalClose(String scheme) throws Exception\n+    {\n+        setup(State.OPEN, scheme);\n+\n+        CountDownLatchCallback callback1 = new CountDownLatchCallback();\n+        server.handler.getCoreSession().close(CloseStatus.NORMAL, \"normal close (client does not complete close handshake)\", callback1);\n+        CountDownLatchCallback callback2 = new CountDownLatchCallback();\n+        server.handler.getCoreSession().close(CloseStatus.SERVER_ERROR, \"error close should overtake normal close\", callback2);\n+\n+        assertTrue(callback1.succeeded.await(5, TimeUnit.SECONDS));\n+        assertThat(callback2.failed.get(5, TimeUnit.SECONDS), instanceOf(ClosedChannelException.class));\n+\n+        assertTrue(server.handler.closed.await(5, TimeUnit.SECONDS));\n+        assertThat(server.handler.closeStatus.getCode(), is(CloseStatus.SERVER_ERROR));\n+        assertThat(server.handler.closeStatus.getReason(), containsString(\"error close should overtake normal close\"));\n+\n+        Frame frame = receiveFrame(client.getInputStream());\n+        assertThat(CloseStatus.getCloseStatus(frame).getCode(), is(CloseStatus.NORMAL));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c595144341fc7d4bfa63a511383d8b18ca1cdd7e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxNDgxNw==", "bodyText": "I don't think you need this class, use Callback.Completable instead.", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r370514817", "createdAt": "2020-01-24T08:20:35Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-core/src/test/java/org/eclipse/jetty/websocket/core/WebSocketCloseTest.java", "diffHunk": "@@ -587,4 +634,22 @@ public boolean isOpen()\n             return handler.getCoreSession().isOutputOpen();\n         }\n     }\n+\n+    public static class CountDownLatchCallback implements Callback\n+    {\n+        public CountDownLatch succeeded = new CountDownLatch(1);\n+        public CompletableFuture<Throwable> failed = new CompletableFuture<>();\n+\n+        @Override\n+        public void succeeded()\n+        {\n+            succeeded.countDown();\n+        }\n+\n+        @Override\n+        public void failed(Throwable x)\n+        {\n+            failed.complete(x);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c595144341fc7d4bfa63a511383d8b18ca1cdd7e"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4477a17edad08e7c3e1b9677535d8cc1527c98b", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/e4477a17edad08e7c3e1b9677535d8cc1527c98b", "committedDate": "2020-01-28T02:12:49Z", "message": "combine BlockingCallback with FutureCallback\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "968dc4b57a08a109658b51a551c676be302705fe", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/968dc4b57a08a109658b51a551c676be302705fe", "committedDate": "2020-01-28T02:47:59Z", "message": "changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2728ed382915d101602434ae0c8f89568db9b7a", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/c2728ed382915d101602434ae0c8f89568db9b7a", "committedDate": "2020-01-28T03:17:38Z", "message": "add test to cement behavior for double normal close\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MjA2NDAw", "url": "https://github.com/eclipse/jetty.project/pull/4472#pullrequestreview-349206400", "createdAt": "2020-01-28T08:51:24Z", "commit": {"oid": "c2728ed382915d101602434ae0c8f89568db9b7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwODo1MToyNFrOFic_SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwODo1MToyNFrOFic_SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY3MDg1Ng==", "bodyText": "I'm wondering if we should repeat the pattern (mistake?) of HTTP here.  With HTTP we have a separately configurable blocking timeout, that only if not set do we default to idleTimeout.     This way we can handle (if need be) the timeouts for sending a huge frame that might take longer than the idle timeout, even though it is never actually idle.\nHowever, in HTTP, we have deprecated the blocking timeout in favour of the data rate mechanisms....  Which we don't really have here (but are probably good ideas for @ extensions?), but it may still be good to have to turn off the blocking timeout if we have confidence in our callback mechanism.\n@sbordet - thoughts?  I'm only making this a comment as I don't think we should hold this PR up while we ponder this.", "url": "https://github.com/eclipse/jetty.project/pull/4472#discussion_r371670856", "createdAt": "2020-01-28T08:51:24Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-jetty-common/src/main/java/org/eclipse/jetty/websocket/common/JettyWebSocketRemoteEndpoint.java", "diffHunk": "@@ -265,10 +254,14 @@ public SocketAddress getRemoteAddress()\n     @Override\n     public void flush() throws IOException\n     {\n-        try (SharedBlockingCallback.Blocker b = blocker.acquire())\n-        {\n-            coreSession.flush(b);\n-            b.block();\n-        }\n+        FutureCallback b = new FutureCallback();\n+        coreSession.flush(b);\n+        b.block(getBlockingTimeout(), TimeUnit.MILLISECONDS);\n+    }\n+\n+    private long getBlockingTimeout()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2728ed382915d101602434ae0c8f89568db9b7a"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MjA2OTE3", "url": "https://github.com/eclipse/jetty.project/pull/4472#pullrequestreview-349206917", "createdAt": "2020-01-28T08:52:16Z", "commit": {"oid": "c2728ed382915d101602434ae0c8f89568db9b7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 545, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}