{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2OTI2ODA3", "number": 5142, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0MzoxOVrOEcDPeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjozMzoxNlrOEloqSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODQ4Njk2OnYy", "diffSide": "LEFT", "path": "jetty-osgi/jetty-osgi-boot/src/main/java/org/eclipse/jetty/osgi/boot/internal/webapp/OSGiWebappClassLoader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0MzoxOVrOHGWPkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozNzozMlrOHHUbJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxNzkzOQ==", "bodyText": "Why has this method been deleted?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476417939", "createdAt": "2020-08-25T12:43:19Z", "author": {"login": "janbartel"}, "path": "jetty-osgi/jetty-osgi-boot/src/main/java/org/eclipse/jetty/osgi/boot/internal/webapp/OSGiWebappClassLoader.java", "diffHunk": "@@ -274,35 +266,4 @@ private boolean isAcceptableLibrary(File file, Set<String> pathToClassFiles)\n     }\n \n     private static Field _contextField;\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4ODY1NQ==", "bodyText": "It's been a while. I don't recall.\nObviously nothing is using it in our code. (no references to it)\nThe setAccessible possibly?  but that can be easily fixed with method/field modifiers.\nBut I bet it's more likely to be related to the addClassPath(webappContext.getExtraClasspath()) which is additive to existing classpath from prior context (not a replacement).", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476588655", "createdAt": "2020-08-25T16:42:52Z", "author": {"login": "joakime"}, "path": "jetty-osgi/jetty-osgi-boot/src/main/java/org/eclipse/jetty/osgi/boot/internal/webapp/OSGiWebappClassLoader.java", "diffHunk": "@@ -274,35 +266,4 @@ private boolean isAcceptableLibrary(File file, Set<String> pathToClassFiles)\n     }\n \n     private static Field _contextField;\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxNzkzOQ=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNjUwOQ==", "bodyText": "The WebAppClassLoader._context is a final field.\nYou cannot reset the value.\nThis method is broken in many different ways.\nNobody is using it, otherwise we would have had many bug reports against it already.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r477436509", "createdAt": "2020-08-26T16:37:12Z", "author": {"login": "joakime"}, "path": "jetty-osgi/jetty-osgi-boot/src/main/java/org/eclipse/jetty/osgi/boot/internal/webapp/OSGiWebappClassLoader.java", "diffHunk": "@@ -274,35 +266,4 @@ private boolean isAcceptableLibrary(File file, Set<String> pathToClassFiles)\n     }\n \n     private static Field _contextField;\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxNzkzOQ=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNjcxMA==", "bodyText": "I had to touch it as webappContext.getExtraClasspath() returns a List<Resource> now.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r477436710", "createdAt": "2020-08-26T16:37:32Z", "author": {"login": "joakime"}, "path": "jetty-osgi/jetty-osgi-boot/src/main/java/org/eclipse/jetty/osgi/boot/internal/webapp/OSGiWebappClassLoader.java", "diffHunk": "@@ -274,35 +266,4 @@ private boolean isAcceptableLibrary(File file, Set<String> pathToClassFiles)\n     }\n \n     private static Field _contextField;\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxNzkzOQ=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODQ4OTQ4OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/CachedContentFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0NDowM1rOHGWRHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozODo0NFrOHHUfvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxODMzNA==", "bodyText": "This seems part of some kind of general code cleanup, and not directly related to the extraClasspath", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476418334", "createdAt": "2020-08-25T12:44:03Z", "author": {"login": "janbartel"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/CachedContentFactory.java", "diffHunk": "@@ -188,8 +188,7 @@ public HttpContent getContent(String pathInContext, int maxBufferSize) throws IO\n         if (_parent != null)\n         {\n             HttpContent httpContent = _parent.getContent(pathInContext, maxBufferSize);\n-            if (httpContent != null)\n-                return httpContent;\n+            return httpContent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNzg4NA==", "bodyText": "I had to touch .getContent() method, so I was checking over other's use of it.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r477437884", "createdAt": "2020-08-26T16:38:44Z", "author": {"login": "joakime"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/CachedContentFactory.java", "diffHunk": "@@ -188,8 +188,7 @@ public HttpContent getContent(String pathInContext, int maxBufferSize) throws IO\n         if (_parent != null)\n         {\n             HttpContent httpContent = _parent.getContent(pathInContext, maxBufferSize);\n-            if (httpContent != null)\n-                return httpContent;\n+            return httpContent;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxODMzNA=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODUwMzkwOnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/ResourceContentFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0Nzo1MVrOHGWaIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0Nzo1MVrOHGWaIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyMDY0MA==", "bodyText": "So where previously we had a declared IOException, this method now throws it wrapped inside an InvalidPathException instead?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476420640", "createdAt": "2020-08-25T12:47:51Z", "author": {"login": "janbartel"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/ResourceContentFactory.java", "diffHunk": "@@ -51,14 +51,12 @@ public ResourceContentFactory(ResourceFactory factory, MimeTypes mimeTypes, Comp\n \n     @Override\n     public HttpContent getContent(String pathInContext, int maxBufferSize)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODUwNzY5OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0ODo1MFrOHGWcdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0ODo1MFrOHGWcdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyMTIzNg==", "bodyText": "Again, no problem with the substance of this, it's just the inclusion of this unrelated cleanup into this PR.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476421236", "createdAt": "2020-08-25T12:48:50Z", "author": {"login": "janbartel"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "diffHunk": "@@ -74,7 +74,7 @@ protected void notFound(HttpServletRequest request, HttpServletResponse response\n             {\n             }\n         });\n-        _resourceService.setGzipEquivalentFileExtensions(new ArrayList<>(Arrays.asList(new String[]{\".svgz\"})));\n+        _resourceService.setGzipEquivalentFileExtensions(new ArrayList<>(Collections.singletonList(\".svgz\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODU1NzYzOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzowMDoxMFrOHGW7pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxNzo0NVrOHVSanQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyOTIyMw==", "bodyText": "Maybe it would be better to change _resources from an array to a List?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476429223", "createdAt": "2020-08-25T13:00:10Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -147,6 +148,22 @@ public ResourceCollection(String csvResources)\n         return _resources;\n     }\n \n+    /**\n+     * Sets the resource collection's resources.\n+     *\n+     * @param res the resources to set\n+     */\n+    public void setResources(List<Resource> res)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MzY3Mg==", "bodyText": "I've no probs with that, but it has to be pass by value semantics and not pass by reference, so the list will be copied no matter what.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476583672", "createdAt": "2020-08-25T16:34:43Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -147,6 +148,22 @@ public ResourceCollection(String csvResources)\n         return _resources;\n     }\n \n+    /**\n+     * Sets the resource collection's resources.\n+     *\n+     * @param res the resources to set\n+     */\n+    public void setResources(List<Resource> res)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyOTIyMw=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4Mzg2OQ==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r492083869", "createdAt": "2020-09-21T14:17:45Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -147,6 +148,22 @@ public ResourceCollection(String csvResources)\n         return _resources;\n     }\n \n+    /**\n+     * Sets the resource collection's resources.\n+     *\n+     * @param res the resources to set\n+     */\n+    public void setResources(List<Resource> res)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyOTIyMw=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODU3NjU1OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzowNDo1MVrOHGXHIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjoyNTo0NFrOHVNbZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMjE2MA==", "bodyText": "Isn't this the opposite of the foregoing comment: \"Glob references will only iterate through the level specified and will not traverse found directories within the glob reference\"?  The intention is that when the wildcard char * is used, deep directory traversal is not supported.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476432160", "createdAt": "2020-08-25T13:04:51Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "diffHunk": "@@ -921,4 +913,97 @@ public static URL toURL(File file) throws MalformedURLException\n     {\n         return file.toURI().toURL();\n     }\n+\n+    /**\n+     * Parse a list of String delimited resources and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param globDirs true if glob references return directories within the glob as well\n+     * @return the list of resources parsed from input string.\n+     */\n+    public static List<Resource> fromList(String delimitedReferences, boolean globDirs) throws IOException\n+    {\n+        return fromList(delimitedReferences, globDirs, Resource::newResource);\n+    }\n+\n+    /**\n+     * Parse a delimited String of resource references and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param globDirs true if glob references return directories within the glob as well", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0Njc4MA==", "bodyText": "No, simple glob is supported, aka only a single asterisk (*) which is only the level of the glob itself.\nThe same as doing a ls -1 /path/to/look/at/* (which return all entries at that path location, including the names of the directories)\nA full glob support for deep directory searching would be a double asterisk (**).\nSupporting things like /opt/** and returning entries like /opt/deep/foo.txt.\nOr things like /code/jetty/**/target/classes which would return all entries (directories or files) that end in /target/classes", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r477346780", "createdAt": "2020-08-26T14:30:12Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "diffHunk": "@@ -921,4 +913,97 @@ public static URL toURL(File file) throws MalformedURLException\n     {\n         return file.toURI().toURL();\n     }\n+\n+    /**\n+     * Parse a list of String delimited resources and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param globDirs true if glob references return directories within the glob as well\n+     * @return the list of resources parsed from input string.\n+     */\n+    public static List<Resource> fromList(String delimitedReferences, boolean globDirs) throws IOException\n+    {\n+        return fromList(delimitedReferences, globDirs, Resource::newResource);\n+    }\n+\n+    /**\n+     * Parse a delimited String of resource references and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param globDirs true if glob references return directories within the glob as well", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMjE2MA=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0NzYyNA==", "bodyText": "This behavior does not \"traverse found directories\" it just returns the directory names found at the glob level.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r477347624", "createdAt": "2020-08-26T14:31:16Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "diffHunk": "@@ -921,4 +913,97 @@ public static URL toURL(File file) throws MalformedURLException\n     {\n         return file.toURI().toURL();\n     }\n+\n+    /**\n+     * Parse a list of String delimited resources and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param globDirs true if glob references return directories within the glob as well\n+     * @return the list of resources parsed from input string.\n+     */\n+    public static List<Resource> fromList(String delimitedReferences, boolean globDirs) throws IOException\n+    {\n+        return fromList(delimitedReferences, globDirs, Resource::newResource);\n+    }\n+\n+    /**\n+     * Parse a delimited String of resource references and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param globDirs true if glob references return directories within the glob as well", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMjE2MA=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwMjE1MQ==", "bodyText": "How about \"true to return directories in addition to files at the level of the glob\"?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r492002151", "createdAt": "2020-09-21T12:25:44Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "diffHunk": "@@ -921,4 +913,97 @@ public static URL toURL(File file) throws MalformedURLException\n     {\n         return file.toURI().toURL();\n     }\n+\n+    /**\n+     * Parse a list of String delimited resources and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param globDirs true if glob references return directories within the glob as well\n+     * @return the list of resources parsed from input string.\n+     */\n+    public static List<Resource> fromList(String delimitedReferences, boolean globDirs) throws IOException\n+    {\n+        return fromList(delimitedReferences, globDirs, Resource::newResource);\n+    }\n+\n+    /**\n+     * Parse a delimited String of resource references and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param globDirs true if glob references return directories within the glob as well", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMjE2MA=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODU3ODg0OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzowNToyMVrOHGXIeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzowNToyMVrOHGXIeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMjUwNQ==", "bodyText": "Isn't this the opposite of the foregoing comment: \"Glob references will only iterate through the level specified and will not traverse found directories within the glob reference\"? The intention is that when the wildcard char * is used, deep directory traversal is not supported.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476432505", "createdAt": "2020-08-25T13:05:21Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "diffHunk": "@@ -921,4 +913,97 @@ public static URL toURL(File file) throws MalformedURLException\n     {\n         return file.toURI().toURL();\n     }\n+\n+    /**\n+     * Parse a list of String delimited resources and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param globDirs true if glob references return directories within the glob as well", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODYzODAyOnYy", "diffSide": "RIGHT", "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebAppClassLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzoxOTozMVrOHGXsiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjozNzoyOFrOHVN5AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MTczNw==", "bodyText": "I don't like WebAppClassLoader setting itself up from the extraClasspath:  the WebAppClassLoader is configured by the WebInfConfiguration, so I don't see why the extraClassPath shouldn't be too.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476441737", "createdAt": "2020-08-25T13:19:31Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebAppClassLoader.java", "diffHunk": "@@ -185,15 +185,20 @@ public WebAppClassLoader(ClassLoader parent, Context context)\n         String extensions = System.getProperty(WebAppClassLoader.class.getName() + \".extensions\");\n         if (extensions != null)\n         {\n-            StringTokenizer tokenizer = new StringTokenizer(extensions, \",;\");\n+            StringTokenizer tokenizer = new StringTokenizer(extensions, StringUtil.DEFAULT_DELIMS);\n             while (tokenizer.hasMoreTokens())\n             {\n                 _extensions.add(tokenizer.nextToken().trim());\n             }\n         }\n \n         if (context.getExtraClasspath() != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0MjMyMQ==", "bodyText": "We have 2 use cases ...\n\nA user of WebAppContext without Configuration.  Yes, this is a thing!  sometimes accidental, most of the time intentional (see spring web, spark, akka, kotlin, etc)\nA user of WebAppContext with Configuration.\n\nIn use case 1 we need WebAppClassLoader to configure itself.\nIt's super odd to have the Class you told \"here, use this config\" not actually be the one that uses that config.\nSince this is a Jetty 10 change, we should probably step back and re-evaluate the whole WebAppContext.extraClasspath role then, as per your comments, it's really a WebInfConfiguration behavior, not a WebAppClassLoader behavior.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r477342321", "createdAt": "2020-08-26T14:24:31Z", "author": {"login": "joakime"}, "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebAppClassLoader.java", "diffHunk": "@@ -185,15 +185,20 @@ public WebAppClassLoader(ClassLoader parent, Context context)\n         String extensions = System.getProperty(WebAppClassLoader.class.getName() + \".extensions\");\n         if (extensions != null)\n         {\n-            StringTokenizer tokenizer = new StringTokenizer(extensions, \",;\");\n+            StringTokenizer tokenizer = new StringTokenizer(extensions, StringUtil.DEFAULT_DELIMS);\n             while (tokenizer.hasMoreTokens())\n             {\n                 _extensions.add(tokenizer.nextToken().trim());\n             }\n         }\n \n         if (context.getExtraClasspath() != null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MTczNw=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwOTcyOQ==", "bodyText": "In the interests of getting the rest of this applied to jetty-10, I'll drop my objection.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r492009729", "createdAt": "2020-09-21T12:37:28Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebAppClassLoader.java", "diffHunk": "@@ -185,15 +185,20 @@ public WebAppClassLoader(ClassLoader parent, Context context)\n         String extensions = System.getProperty(WebAppClassLoader.class.getName() + \".extensions\");\n         if (extensions != null)\n         {\n-            StringTokenizer tokenizer = new StringTokenizer(extensions, \",;\");\n+            StringTokenizer tokenizer = new StringTokenizer(extensions, StringUtil.DEFAULT_DELIMS);\n             while (tokenizer.hasMoreTokens())\n             {\n                 _extensions.add(tokenizer.nextToken().trim());\n             }\n         }\n \n         if (context.getExtraClasspath() != null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MTczNw=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODcxNTIwOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzozNjo0N1rOHGYb9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDoxNzozNVrOHHOWLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ1Mzg3Nw==", "bodyText": "The jetty maven plugin has a use-case for turning a ResourceCollection back into a csv list - any chance you could add that onto ResourceCollection?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476453877", "createdAt": "2020-08-25T13:36:47Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -293,11 +275,13 @@ public Resource addPath(String path) throws IOException\n         {\n             return resource;\n         }\n+\n         if (resources != null)\n         {\n             return new ResourceCollection(resources.toArray(new Resource[0]));\n         }\n-        return null;\n+\n+        throw new MalformedURLException(\"path does not result in Resource: \" + path);\n     }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNjQ3MQ==", "bodyText": "how would you handle a situation where the path itself has a comma?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r477336471", "createdAt": "2020-08-26T14:16:45Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -293,11 +275,13 @@ public Resource addPath(String path) throws IOException\n         {\n             return resource;\n         }\n+\n         if (resources != null)\n         {\n             return new ResourceCollection(resources.toArray(new Resource[0]));\n         }\n-        return null;\n+\n+        throw new MalformedURLException(\"path does not result in Resource: \" + path);\n     }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ1Mzg3Nw=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNzEzMw==", "bodyText": "We need a proper CSV parser / generator in Jetty if this is going to work reliably. (we have the start of several of them sprinkled around the code, perhaps it's time to formalize it?)", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r477337133", "createdAt": "2020-08-26T14:17:35Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -293,11 +275,13 @@ public Resource addPath(String path) throws IOException\n         {\n             return resource;\n         }\n+\n         if (resources != null)\n         {\n             return new ResourceCollection(resources.toArray(new Resource[0]));\n         }\n-        return null;\n+\n+        throw new MalformedURLException(\"path does not result in Resource: \" + path);\n     }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ1Mzg3Nw=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTQ4Mzk5OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/CachedContentFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyMjoyM1rOHGf3Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowMTozMFrOHGhXrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NTU3OQ==", "bodyText": "What would happen if we didn't catch here?    A 500 response probably, but that might be more appropriate that a null response?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476575579", "createdAt": "2020-08-25T16:22:23Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/CachedContentFactory.java", "diffHunk": "@@ -234,18 +233,26 @@ private HttpContent load(String pathInContext, Resource resource, int maxBufferS\n                     if (compressedContent == null || compressedContent.isValid())\n                     {\n                         compressedContent = null;\n-                        Resource compressedResource = _factory.getResource(compressedPathInContext);\n-                        if (compressedResource.exists() && compressedResource.lastModified() >= resource.lastModified() &&\n-                            compressedResource.length() < resource.length())\n+                        try\n                         {\n-                            compressedContent = new CachedHttpContent(compressedPathInContext, compressedResource, null);\n-                            CachedHttpContent added = _cache.putIfAbsent(compressedPathInContext, compressedContent);\n-                            if (added != null)\n+                            Resource compressedResource = _factory.getResource(compressedPathInContext);\n+                            if (compressedResource.exists() && compressedResource.lastModified() >= resource.lastModified() &&\n+                                compressedResource.length() < resource.length())\n                             {\n-                                compressedContent.invalidate();\n-                                compressedContent = added;\n+                                compressedContent = new CachedHttpContent(compressedPathInContext, compressedResource, null);\n+                                CachedHttpContent added = _cache.putIfAbsent(compressedPathInContext, compressedContent);\n+                                if (added != null)\n+                                {\n+                                    compressedContent.invalidate();\n+                                    compressedContent = added;\n+                                }\n                             }\n                         }\n+                        catch (IOException e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5MDQ3NQ==", "bodyText": "The catch exists for the speculative _factory.getResource(compressedPathInContext) and allows the next attempt to load below if not valid.\nThe old _factory.getResource() relied on null returning.\nLet me see if I can find a good testcase for this.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476590475", "createdAt": "2020-08-25T16:45:47Z", "author": {"login": "joakime"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/CachedContentFactory.java", "diffHunk": "@@ -234,18 +233,26 @@ private HttpContent load(String pathInContext, Resource resource, int maxBufferS\n                     if (compressedContent == null || compressedContent.isValid())\n                     {\n                         compressedContent = null;\n-                        Resource compressedResource = _factory.getResource(compressedPathInContext);\n-                        if (compressedResource.exists() && compressedResource.lastModified() >= resource.lastModified() &&\n-                            compressedResource.length() < resource.length())\n+                        try\n                         {\n-                            compressedContent = new CachedHttpContent(compressedPathInContext, compressedResource, null);\n-                            CachedHttpContent added = _cache.putIfAbsent(compressedPathInContext, compressedContent);\n-                            if (added != null)\n+                            Resource compressedResource = _factory.getResource(compressedPathInContext);\n+                            if (compressedResource.exists() && compressedResource.lastModified() >= resource.lastModified() &&\n+                                compressedResource.length() < resource.length())\n                             {\n-                                compressedContent.invalidate();\n-                                compressedContent = added;\n+                                compressedContent = new CachedHttpContent(compressedPathInContext, compressedResource, null);\n+                                CachedHttpContent added = _cache.putIfAbsent(compressedPathInContext, compressedContent);\n+                                if (added != null)\n+                                {\n+                                    compressedContent.invalidate();\n+                                    compressedContent = added;\n+                                }\n                             }\n                         }\n+                        catch (IOException e)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NTU3OQ=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwMDIzOQ==", "bodyText": "But the compressedPathInContext should not throw unless something goes horribly wrong.  It should return a resource that does not exist and we should fall through because of an exists test not because of an exception.  We REALLY don't want exceptions to be in our normal execution path!!!!", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476600239", "createdAt": "2020-08-25T17:01:30Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/CachedContentFactory.java", "diffHunk": "@@ -234,18 +233,26 @@ private HttpContent load(String pathInContext, Resource resource, int maxBufferS\n                     if (compressedContent == null || compressedContent.isValid())\n                     {\n                         compressedContent = null;\n-                        Resource compressedResource = _factory.getResource(compressedPathInContext);\n-                        if (compressedResource.exists() && compressedResource.lastModified() >= resource.lastModified() &&\n-                            compressedResource.length() < resource.length())\n+                        try\n                         {\n-                            compressedContent = new CachedHttpContent(compressedPathInContext, compressedResource, null);\n-                            CachedHttpContent added = _cache.putIfAbsent(compressedPathInContext, compressedContent);\n-                            if (added != null)\n+                            Resource compressedResource = _factory.getResource(compressedPathInContext);\n+                            if (compressedResource.exists() && compressedResource.lastModified() >= resource.lastModified() &&\n+                                compressedResource.length() < resource.length())\n                             {\n-                                compressedContent.invalidate();\n-                                compressedContent = added;\n+                                compressedContent = new CachedHttpContent(compressedPathInContext, compressedResource, null);\n+                                CachedHttpContent added = _cache.putIfAbsent(compressedPathInContext, compressedContent);\n+                                if (added != null)\n+                                {\n+                                    compressedContent.invalidate();\n+                                    compressedContent = added;\n+                                }\n                             }\n                         }\n+                        catch (IOException e)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NTU3OQ=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTQ4NjI1OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/CachedContentFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyMjo1OFrOHGf42g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyMjo1OFrOHGf42g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NTk2Mg==", "bodyText": "again I think we should consider not catching here.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476575962", "createdAt": "2020-08-25T16:22:58Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/CachedContentFactory.java", "diffHunk": "@@ -279,12 +286,20 @@ private HttpContent load(String pathInContext, Resource resource, int maxBufferS\n                 if (compressedContent != null && compressedContent.isValid() && compressedContent.getResource().lastModified() >= resource.lastModified())\n                     compressedContents.put(format, compressedContent);\n \n-                // Is there a precompressed resource?\n-                Resource compressedResource = _factory.getResource(compressedPathInContext);\n-                if (compressedResource.exists() && compressedResource.lastModified() >= resource.lastModified() &&\n-                    compressedResource.length() < resource.length())\n-                    compressedContents.put(format,\n-                        new ResourceHttpContent(compressedResource, _mimeTypes.getMimeByExtension(compressedPathInContext), maxBufferSize));\n+                try\n+                {\n+                    // Is there a precompressed resource?\n+                    Resource compressedResource = _factory.getResource(compressedPathInContext);\n+                    if (compressedResource.exists() && compressedResource.lastModified() >= resource.lastModified() &&\n+                        compressedResource.length() < resource.length())\n+                        compressedContents.put(format,\n+                            new ResourceHttpContent(compressedResource, _mimeTypes.getMimeByExtension(compressedPathInContext), maxBufferSize));\n+                }\n+                catch (IOException e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTQ5NDkxOnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyNTowNlrOHGf-KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjoyNDoyNVrOHHJjzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NzMyMA==", "bodyText": "again let's analyse what happens without a catch here", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476577320", "createdAt": "2020-08-25T16:25:06Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "diffHunk": "@@ -86,9 +86,18 @@ public String getWelcomeFile(String pathInContext)\n         for (int i = 0; i < _welcomes.length; i++)\n         {\n             String welcomeInContext = URIUtil.addPaths(pathInContext, _welcomes[i]);\n-            Resource welcome = getResource(welcomeInContext);\n-            if (welcome != null && welcome.exists())\n-                return welcomeInContext;\n+            try\n+            {\n+                Resource welcome = getResource(welcomeInContext);\n+                if (welcome.exists())\n+                    return welcomeInContext;\n+            }\n+            catch (IOException e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYzMTA4Ng==", "bodyText": "In the past, if welcomeInContext resulted in an invalid resource, it would return null. (logging the various exceptions in the .getResource() call.\nNow, if the Resource can be created, it will be created and then tested if it exists.\nOtherwise if the Resource cannot be created (bad URL syntax, invalid characters on the filesystem, etc) it throws.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476631086", "createdAt": "2020-08-25T17:48:52Z", "author": {"login": "joakime"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "diffHunk": "@@ -86,9 +86,18 @@ public String getWelcomeFile(String pathInContext)\n         for (int i = 0; i < _welcomes.length; i++)\n         {\n             String welcomeInContext = URIUtil.addPaths(pathInContext, _welcomes[i]);\n-            Resource welcome = getResource(welcomeInContext);\n-            if (welcome != null && welcome.exists())\n-                return welcomeInContext;\n+            try\n+            {\n+                Resource welcome = getResource(welcomeInContext);\n+                if (welcome.exists())\n+                    return welcomeInContext;\n+            }\n+            catch (IOException e)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NzMyMA=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI1ODcwMg==", "bodyText": "So in what circumstances would getResource(URIUtil.addPaths(pathInContext, _welcomes[i]) throw?\nOnly if the pathInContext or the welcome file we badly formatted, which I think is a configuration error and should not be caught and ignored.      I think it is fine to not catch here..... unless you can think of a valid configuration of welcome files that would sometimes throw?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r477258702", "createdAt": "2020-08-26T12:24:25Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "diffHunk": "@@ -86,9 +86,18 @@ public String getWelcomeFile(String pathInContext)\n         for (int i = 0; i < _welcomes.length; i++)\n         {\n             String welcomeInContext = URIUtil.addPaths(pathInContext, _welcomes[i]);\n-            Resource welcome = getResource(welcomeInContext);\n-            if (welcome != null && welcome.exists())\n-                return welcomeInContext;\n+            try\n+            {\n+                Resource welcome = getResource(welcomeInContext);\n+                if (welcome.exists())\n+                    return welcomeInContext;\n+            }\n+            catch (IOException e)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NzMyMA=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTUwNjM3OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyNzo0M1rOHGgFEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMTo1ODozNFrOHVMigg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3OTA5MQ==", "bodyText": "I don't think the message is right.\nThis method should still return a resource EVEN IF not found, as the request might be a PUT about to create the resource.\nThis method should only throw if something has gone horribly wrong.\nPerhaps this should be an IllegalArguementException ?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476579091", "createdAt": "2020-08-25T16:27:43Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "diffHunk": "@@ -157,27 +163,28 @@ public Resource getResource(String path)\n                 path = URIUtil.canonicalPath(path);\n                 r = _baseResource.addPath(path);\n \n-                if (r != null && r.isAlias() && (_context == null || !_context.checkAlias(path, r)))\n+                if (r.isAlias() && (_context == null || !_context.checkAlias(path, r)))\n                 {\n                     if (LOG.isDebugEnabled())\n-                        LOG.debug(\"resource={} alias={}\", r, r.getAlias());\n-                    return null;\n+                        LOG.debug(\"Rejected alias resource={} alias={}\", r, r.getAlias());\n+                    throw new IOException(\"Rejected (see debug logs)\");\n                 }\n             }\n             else if (_context != null)\n+            {\n                 r = _context.getResource(path);\n+                if (r != null)\n+                    return r;\n+            }\n \n             if ((r == null || !r.exists()) && path.endsWith(\"/jetty-dir.css\"))\n                 r = getStylesheet();\n \n-            return r;\n-        }\n-        catch (Exception e)\n-        {\n-            LOG.debug(\"Unable to get Resource for {}\", path, e);\n+            if (r != null)\n+                return r;\n         }\n \n-        return null;\n+        throw new IOException(\"Unable to find Resource for \" + path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYzMzQwNA==", "bodyText": "It cannot return a resource if the Resource itself cannot be created.\nSome examples:\nString resultA = getResource(\"foo#file\"); // wont work on URLResource, should probably have been ecnoded.\nString resultB = getResource(\"bar:zed\"); // wont work on windows for PathResource\nString resultC = getResource(\"WEB-INF/lib/foo.jar!/deep/resource\"); // wont work on URLResource (but will work on PathResource)\nIf you insist on returning a Resource, perhaps we should instead of throwing IOException\nwe should return new BadResource() instead?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476633404", "createdAt": "2020-08-25T17:52:42Z", "author": {"login": "joakime"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "diffHunk": "@@ -157,27 +163,28 @@ public Resource getResource(String path)\n                 path = URIUtil.canonicalPath(path);\n                 r = _baseResource.addPath(path);\n \n-                if (r != null && r.isAlias() && (_context == null || !_context.checkAlias(path, r)))\n+                if (r.isAlias() && (_context == null || !_context.checkAlias(path, r)))\n                 {\n                     if (LOG.isDebugEnabled())\n-                        LOG.debug(\"resource={} alias={}\", r, r.getAlias());\n-                    return null;\n+                        LOG.debug(\"Rejected alias resource={} alias={}\", r, r.getAlias());\n+                    throw new IOException(\"Rejected (see debug logs)\");\n                 }\n             }\n             else if (_context != null)\n+            {\n                 r = _context.getResource(path);\n+                if (r != null)\n+                    return r;\n+            }\n \n             if ((r == null || !r.exists()) && path.endsWith(\"/jetty-dir.css\"))\n                 r = getStylesheet();\n \n-            return r;\n-        }\n-        catch (Exception e)\n-        {\n-            LOG.debug(\"Unable to get Resource for {}\", path, e);\n+            if (r != null)\n+                return r;\n         }\n \n-        return null;\n+        throw new IOException(\"Unable to find Resource for \" + path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3OTA5MQ=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI2MjI0Ng==", "bodyText": "You've miss understood.     I'm not saying return a resource if it is bad.\nI'm saying that \"Unable to find Resource\" is the wrong message for a bad resource.\nI think IllegalArgumentException is a possibility..... hmm except that those examples you give are legal, just not for the base resource..... so IOException is probably correct.... just that the message is wrong.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r477262246", "createdAt": "2020-08-26T12:30:28Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "diffHunk": "@@ -157,27 +163,28 @@ public Resource getResource(String path)\n                 path = URIUtil.canonicalPath(path);\n                 r = _baseResource.addPath(path);\n \n-                if (r != null && r.isAlias() && (_context == null || !_context.checkAlias(path, r)))\n+                if (r.isAlias() && (_context == null || !_context.checkAlias(path, r)))\n                 {\n                     if (LOG.isDebugEnabled())\n-                        LOG.debug(\"resource={} alias={}\", r, r.getAlias());\n-                    return null;\n+                        LOG.debug(\"Rejected alias resource={} alias={}\", r, r.getAlias());\n+                    throw new IOException(\"Rejected (see debug logs)\");\n                 }\n             }\n             else if (_context != null)\n+            {\n                 r = _context.getResource(path);\n+                if (r != null)\n+                    return r;\n+            }\n \n             if ((r == null || !r.exists()) && path.endsWith(\"/jetty-dir.css\"))\n                 r = getStylesheet();\n \n-            return r;\n-        }\n-        catch (Exception e)\n-        {\n-            LOG.debug(\"Unable to get Resource for {}\", path, e);\n+            if (r != null)\n+                return r;\n         }\n \n-        return null;\n+        throw new IOException(\"Unable to find Resource for \" + path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3OTA5MQ=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk4NzU4Ng==", "bodyText": "still not right.  See new review.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r491987586", "createdAt": "2020-09-21T11:58:34Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "diffHunk": "@@ -157,27 +163,28 @@ public Resource getResource(String path)\n                 path = URIUtil.canonicalPath(path);\n                 r = _baseResource.addPath(path);\n \n-                if (r != null && r.isAlias() && (_context == null || !_context.checkAlias(path, r)))\n+                if (r.isAlias() && (_context == null || !_context.checkAlias(path, r)))\n                 {\n                     if (LOG.isDebugEnabled())\n-                        LOG.debug(\"resource={} alias={}\", r, r.getAlias());\n-                    return null;\n+                        LOG.debug(\"Rejected alias resource={} alias={}\", r, r.getAlias());\n+                    throw new IOException(\"Rejected (see debug logs)\");\n                 }\n             }\n             else if (_context != null)\n+            {\n                 r = _context.getResource(path);\n+                if (r != null)\n+                    return r;\n+            }\n \n             if ((r == null || !r.exists()) && path.endsWith(\"/jetty-dir.css\"))\n                 r = getStylesheet();\n \n-            return r;\n-        }\n-        catch (Exception e)\n-        {\n-            LOG.debug(\"Unable to get Resource for {}\", path, e);\n+            if (r != null)\n+                return r;\n         }\n \n-        return null;\n+        throw new IOException(\"Unable to find Resource for \" + path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3OTA5MQ=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTUyODg2OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjozMzoxMVrOHGgTKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMTo0MjozNVrOHVLzig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MjY5Nw==", "bodyText": "can't say I love delimitedReferences.\nHow about resourceList", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476582697", "createdAt": "2020-08-25T16:33:11Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "diffHunk": "@@ -921,4 +913,97 @@ public static URL toURL(File file) throws MalformedURLException\n     {\n         return file.toURI().toURL();\n     }\n+\n+    /**\n+     * Parse a list of String delimited resources and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param globDirs true if glob references return directories within the glob as well\n+     * @return the list of resources parsed from input string.\n+     */\n+    public static List<Resource> fromList(String delimitedReferences, boolean globDirs) throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM1MzMxMw==", "bodyText": "I'm not sold.\nTo me, that parameter is not a list, and it is not resources.\nIt's a String.\nIt supports:\n\n1 or more entries. (using simple delimited behaviors with comma or semicolon).\neach entry can be one of the following types:\n\na classpath reference.\nIt can be a relative path (to the working directory).\nIt can be a fully qualified path reference.\nIt can be a Java URI. (no side effects)\nIt can be a Java URL. (with side effects)\nIt can be a path reference with a simple glob suffix.\n\n\nno entry can, itself, have an unencoded comma , or semicolon ; in its name.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r477353313", "createdAt": "2020-08-26T14:38:54Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "diffHunk": "@@ -921,4 +913,97 @@ public static URL toURL(File file) throws MalformedURLException\n     {\n         return file.toURI().toURL();\n     }\n+\n+    /**\n+     * Parse a list of String delimited resources and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param globDirs true if glob references return directories within the glob as well\n+     * @return the list of resources parsed from input string.\n+     */\n+    public static List<Resource> fromList(String delimitedReferences, boolean globDirs) throws IOException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MjY5Nw=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk3NTU2Mg==", "bodyText": "How can that arg not be a list of resources?  The method is  fromList not fromStringWithDelimitersSeparatingThingsThatCanBeVariouslyResolvedToResources?\nHow about:\nList<Resource> fromString(...)", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r491975562", "createdAt": "2020-09-21T11:42:35Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "diffHunk": "@@ -921,4 +913,97 @@ public static URL toURL(File file) throws MalformedURLException\n     {\n         return file.toURI().toURL();\n     }\n+\n+    /**\n+     * Parse a list of String delimited resources and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param globDirs true if glob references return directories within the glob as well\n+     * @return the list of resources parsed from input string.\n+     */\n+    public static List<Resource> fromList(String delimitedReferences, boolean globDirs) throws IOException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MjY5Nw=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTUzNzM0OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjozNToyMlrOHGgYew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjozNToyMlrOHGgYew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NDA1OQ==", "bodyText": "perhaps stress that a Resource might not exist.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476584059", "createdAt": "2020-08-25T16:35:22Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceFactory.java", "diffHunk": "@@ -18,17 +18,26 @@\n \n package org.eclipse.jetty.util.resource;\n \n+import java.io.IOException;\n+\n /**\n  * ResourceFactory.\n  */\n public interface ResourceFactory\n {\n-\n     /**\n-     * Get a resource for a path.\n+     * Get a Resource from a provided String.\n+     * <p>\n+     * The behavior here is dependent on the\n+     * implementation of ResourceFactory.\n+     * The provided path can be resolved\n+     * against a known Resource, or can\n+     * be a from-scratch Resource.\n+     * </p>\n      *\n      * @param path The path to the resource\n-     * @return The resource or null\n+     * @return The resource\n+     * @throws IOException if unable to create Resource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTUzOTg0OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/URLResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjozNjowMlrOHGgaBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMTozNzoxNVrOHVLpzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NDQ1NQ==", "bodyText": "IllegalArgException", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r476584455", "createdAt": "2020-08-25T16:36:02Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/URLResource.java", "diffHunk": "@@ -290,7 +290,9 @@ public Resource addPath(String path)\n         throws IOException, MalformedURLException\n     {\n         if (path == null)\n-            return null;\n+        {\n+            throw new MalformedURLException(\"null path\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNzY5OA==", "bodyText": "How about replacing that entire thing with Objects.requireNotNull(path) ?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r477337698", "createdAt": "2020-08-26T14:18:20Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/URLResource.java", "diffHunk": "@@ -290,7 +290,9 @@ public Resource addPath(String path)\n         throws IOException, MalformedURLException\n     {\n         if (path == null)\n-            return null;\n+        {\n+            throw new MalformedURLException(\"null path\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NDQ1NQ=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk3MzA3MA==", "bodyText": "sure", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r491973070", "createdAt": "2020-09-21T11:37:15Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/URLResource.java", "diffHunk": "@@ -290,7 +290,9 @@ public Resource addPath(String path)\n         throws IOException, MalformedURLException\n     {\n         if (path == null)\n-            return null;\n+        {\n+            throw new MalformedURLException(\"null path\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NDQ1NQ=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDI2MTUxOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDoyNjoyMFrOHHOwBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjoyNzozMVrOHVNfQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0Mzc1MA==", "bodyText": "This method name is wrong.\nThis javadoc is wrong.\nThis message is wrong.\nWe are not doing CSV, we are doing simple delimited strings (which is not CSV).", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r477343750", "createdAt": "2020-08-26T14:26:20Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -182,56 +193,27 @@ public void setResources(Resource[] resources)\n      *\n      * @param csvResources the comma-separated string containing\n      * one or more resource strings.\n+     * @throws IOException if unable resource declared is not valid\n      */\n-    public void setResourcesAsCSV(String csvResources)\n+    public void setResourcesAsCSV(String csvResources) throws IOException\n     {\n-        if (csvResources == null)\n-        {\n-            throw new IllegalArgumentException(\"CSV String is null\");\n-        }\n-\n-        StringTokenizer tokenizer = new StringTokenizer(csvResources, \",;\");\n-        int len = tokenizer.countTokens();\n-        if (len == 0)\n+        if (StringUtil.isBlank(csvResources))\n         {\n-            throw new IllegalArgumentException(\"ResourceCollection@setResourcesAsCSV(String) \" +\n-                \" argument must be a string containing one or more comma-separated resource strings.\");\n+            throw new IllegalArgumentException(\"CSV String is blank\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwMzEzOQ==", "bodyText": "I don't think this is a big deal ... it's been this way for years without problems, so in the interests of getting 10 out, I'm fine with it as it is.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r492003139", "createdAt": "2020-09-21T12:27:31Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -182,56 +193,27 @@ public void setResources(Resource[] resources)\n      *\n      * @param csvResources the comma-separated string containing\n      * one or more resource strings.\n+     * @throws IOException if unable resource declared is not valid\n      */\n-    public void setResourcesAsCSV(String csvResources)\n+    public void setResourcesAsCSV(String csvResources) throws IOException\n     {\n-        if (csvResources == null)\n-        {\n-            throw new IllegalArgumentException(\"CSV String is null\");\n-        }\n-\n-        StringTokenizer tokenizer = new StringTokenizer(csvResources, \",;\");\n-        int len = tokenizer.countTokens();\n-        if (len == 0)\n+        if (StringUtil.isBlank(csvResources))\n         {\n-            throw new IllegalArgumentException(\"ResourceCollection@setResourcesAsCSV(String) \" +\n-                \" argument must be a string containing one or more comma-separated resource strings.\");\n+            throw new IllegalArgumentException(\"CSV String is blank\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0Mzc1MA=="}, "originalCommit": {"oid": "b35c4332b2ceda2ee7fd9a80027424175405fad2"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODg1OTYzOnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMTo1Njo0MlrOHVMeyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxNzo1N1rOHVSblw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk4NjYzNA==", "bodyText": "This is still the wrong exception.\nThe situation where r==nul does not represent file not found.  I not found file will return a resource that does not exist.\nr==null (if it can happen???) represents something illegal or wrong!", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r491986634", "createdAt": "2020-09-21T11:56:42Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "diffHunk": "@@ -140,44 +142,51 @@ public MimeTypes getMimeTypes()\n     }\n \n     @Override\n-    public Resource getResource(String path)\n+    public Resource getResource(String path) throws IOException\n     {\n         if (LOG.isDebugEnabled())\n-            LOG.debug(\"{} getResource({})\", _context == null ? _baseResource : _context, _baseResource, path);\n+            LOG.debug(\"{} getResource({}): baseResource:{}\", _context == null ? _baseResource : _context, path, _baseResource);\n \n-        if (path == null || !path.startsWith(\"/\"))\n-            return null;\n+        if (StringUtil.isBlank(path))\n+        {\n+            throw new IllegalArgumentException(\"Path is blank\");\n+        }\n \n-        try\n+        if (!path.startsWith(\"/\"))\n+        {\n+            throw new IllegalArgumentException(\"Path reference invalid: \" + path);\n+        }\n+\n+        Resource r = null;\n+\n+        if (_baseResource != null)\n         {\n-            Resource r = null;\n+            path = URIUtil.canonicalPath(path);\n+            r = _baseResource.addPath(path);\n \n-            if (_baseResource != null)\n+            if (r.isAlias() && (_context == null || !_context.checkAlias(path, r)))\n             {\n-                path = URIUtil.canonicalPath(path);\n-                r = _baseResource.addPath(path);\n-\n-                if (r != null && r.isAlias() && (_context == null || !_context.checkAlias(path, r)))\n-                {\n-                    if (LOG.isDebugEnabled())\n-                        LOG.debug(\"resource={} alias={}\", r, r.getAlias());\n-                    return null;\n-                }\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Rejected alias resource={} alias={}\", r, r.getAlias());\n+                throw new IllegalStateException(\"Rejected alias reference: \" + path);\n             }\n-            else if (_context != null)\n-                r = _context.getResource(path);\n+        }\n+        else if (_context != null)\n+        {\n+            r = _context.getResource(path);\n+            if (r != null)\n+                return r;\n+        }\n \n-            if ((r == null || !r.exists()) && path.endsWith(\"/jetty-dir.css\"))\n-                r = getStylesheet();\n+        if ((r == null || !r.exists()) && path.endsWith(\"/jetty-dir.css\"))\n+            r = getStylesheet();\n \n-            return r;\n-        }\n-        catch (Exception e)\n+        if (r == null)\n         {\n-            LOG.debug(\"Unable to get Resource for {}\", path, e);\n+            throw new FileNotFoundException(\"Resource: \" + path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccc863726b60c9d5bf6e068f639b8786aa5c83ec"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk4OTIyNg==", "bodyText": "Your description of this PR says:\n\nRefactored ResourceFactory to never return null and always throw an exception if unable to get/create/resolve the Resource\nResource.addPath(String) implementations can never return null now\n\nSo my reading of this is that r cannot be null!   So IllegalStateException would be more appropriate", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r491989226", "createdAt": "2020-09-21T12:01:44Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "diffHunk": "@@ -140,44 +142,51 @@ public MimeTypes getMimeTypes()\n     }\n \n     @Override\n-    public Resource getResource(String path)\n+    public Resource getResource(String path) throws IOException\n     {\n         if (LOG.isDebugEnabled())\n-            LOG.debug(\"{} getResource({})\", _context == null ? _baseResource : _context, _baseResource, path);\n+            LOG.debug(\"{} getResource({}): baseResource:{}\", _context == null ? _baseResource : _context, path, _baseResource);\n \n-        if (path == null || !path.startsWith(\"/\"))\n-            return null;\n+        if (StringUtil.isBlank(path))\n+        {\n+            throw new IllegalArgumentException(\"Path is blank\");\n+        }\n \n-        try\n+        if (!path.startsWith(\"/\"))\n+        {\n+            throw new IllegalArgumentException(\"Path reference invalid: \" + path);\n+        }\n+\n+        Resource r = null;\n+\n+        if (_baseResource != null)\n         {\n-            Resource r = null;\n+            path = URIUtil.canonicalPath(path);\n+            r = _baseResource.addPath(path);\n \n-            if (_baseResource != null)\n+            if (r.isAlias() && (_context == null || !_context.checkAlias(path, r)))\n             {\n-                path = URIUtil.canonicalPath(path);\n-                r = _baseResource.addPath(path);\n-\n-                if (r != null && r.isAlias() && (_context == null || !_context.checkAlias(path, r)))\n-                {\n-                    if (LOG.isDebugEnabled())\n-                        LOG.debug(\"resource={} alias={}\", r, r.getAlias());\n-                    return null;\n-                }\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Rejected alias resource={} alias={}\", r, r.getAlias());\n+                throw new IllegalStateException(\"Rejected alias reference: \" + path);\n             }\n-            else if (_context != null)\n-                r = _context.getResource(path);\n+        }\n+        else if (_context != null)\n+        {\n+            r = _context.getResource(path);\n+            if (r != null)\n+                return r;\n+        }\n \n-            if ((r == null || !r.exists()) && path.endsWith(\"/jetty-dir.css\"))\n-                r = getStylesheet();\n+        if ((r == null || !r.exists()) && path.endsWith(\"/jetty-dir.css\"))\n+            r = getStylesheet();\n \n-            return r;\n-        }\n-        catch (Exception e)\n+        if (r == null)\n         {\n-            LOG.debug(\"Unable to get Resource for {}\", path, e);\n+            throw new FileNotFoundException(\"Resource: \" + path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk4NjYzNA=="}, "originalCommit": {"oid": "ccc863726b60c9d5bf6e068f639b8786aa5c83ec"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4NDExOQ==", "bodyText": "cancel that as Context.getResources can return null;", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r492084119", "createdAt": "2020-09-21T14:17:57Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java", "diffHunk": "@@ -140,44 +142,51 @@ public MimeTypes getMimeTypes()\n     }\n \n     @Override\n-    public Resource getResource(String path)\n+    public Resource getResource(String path) throws IOException\n     {\n         if (LOG.isDebugEnabled())\n-            LOG.debug(\"{} getResource({})\", _context == null ? _baseResource : _context, _baseResource, path);\n+            LOG.debug(\"{} getResource({}): baseResource:{}\", _context == null ? _baseResource : _context, path, _baseResource);\n \n-        if (path == null || !path.startsWith(\"/\"))\n-            return null;\n+        if (StringUtil.isBlank(path))\n+        {\n+            throw new IllegalArgumentException(\"Path is blank\");\n+        }\n \n-        try\n+        if (!path.startsWith(\"/\"))\n+        {\n+            throw new IllegalArgumentException(\"Path reference invalid: \" + path);\n+        }\n+\n+        Resource r = null;\n+\n+        if (_baseResource != null)\n         {\n-            Resource r = null;\n+            path = URIUtil.canonicalPath(path);\n+            r = _baseResource.addPath(path);\n \n-            if (_baseResource != null)\n+            if (r.isAlias() && (_context == null || !_context.checkAlias(path, r)))\n             {\n-                path = URIUtil.canonicalPath(path);\n-                r = _baseResource.addPath(path);\n-\n-                if (r != null && r.isAlias() && (_context == null || !_context.checkAlias(path, r)))\n-                {\n-                    if (LOG.isDebugEnabled())\n-                        LOG.debug(\"resource={} alias={}\", r, r.getAlias());\n-                    return null;\n-                }\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Rejected alias resource={} alias={}\", r, r.getAlias());\n+                throw new IllegalStateException(\"Rejected alias reference: \" + path);\n             }\n-            else if (_context != null)\n-                r = _context.getResource(path);\n+        }\n+        else if (_context != null)\n+        {\n+            r = _context.getResource(path);\n+            if (r != null)\n+                return r;\n+        }\n \n-            if ((r == null || !r.exists()) && path.endsWith(\"/jetty-dir.css\"))\n-                r = getStylesheet();\n+        if ((r == null || !r.exists()) && path.endsWith(\"/jetty-dir.css\"))\n+            r = getStylesheet();\n \n-            return r;\n-        }\n-        catch (Exception e)\n+        if (r == null)\n         {\n-            LOG.debug(\"Unable to get Resource for {}\", path, e);\n+            throw new FileNotFoundException(\"Resource: \" + path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk4NjYzNA=="}, "originalCommit": {"oid": "ccc863726b60c9d5bf6e068f639b8786aa5c83ec"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODk3ODc4OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjozMDoyNVrOHVNoIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjozMDoyNVrOHVNoIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwNTQwOA==", "bodyText": "How can it be empty? It is only allocated if you're going to add an entry.", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r492005408", "createdAt": "2020-09-21T12:30:25Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -245,59 +233,54 @@ public Resource addPath(String path) throws IOException\n \n         if (path == null)\n         {\n-            throw new MalformedURLException();\n+            throw new MalformedURLException(\"null path\");\n         }\n \n         if (path.length() == 0 || URIUtil.SLASH.equals(path))\n         {\n             return this;\n         }\n \n-        Resource resource = null;\n-        ArrayList<Resource> resources = null;\n-        int i = 0;\n-        for (; i < _resources.length; i++)\n+        // Attempt a simple (single) Resource lookup that exists\n+        for (Resource res : _resources)\n         {\n-            resource = _resources[i].addPath(path);\n-            if (resource.exists())\n+            Resource fileResource = res.addPath(path);\n+            if (fileResource.exists())\n             {\n-                if (resource.isDirectory())\n+                if (!fileResource.isDirectory())\n                 {\n-                    break;\n+                    return fileResource;\n                 }\n-                return resource;\n             }\n         }\n \n-        for (i++; i < _resources.length; i++)\n+        // Create a list of potential resource for directories of this collection\n+        ArrayList<Resource> potentialResources = null;\n+        for (Resource res : _resources)\n         {\n-            Resource r = _resources[i].addPath(path);\n+            Resource r = res.addPath(path);\n             if (r.exists() && r.isDirectory())\n             {\n-                if (resources == null)\n+                if (potentialResources == null)\n                 {\n-                    resources = new ArrayList<>();\n+                    potentialResources = new ArrayList<>();\n                 }\n \n-                if (resource != null)\n-                {\n-                    resources.add(resource);\n-                    resource = null;\n-                }\n-\n-                resources.add(r);\n+                potentialResources.add(r);\n             }\n         }\n \n-        if (resource != null)\n+        if (potentialResources == null || potentialResources.isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccc863726b60c9d5bf6e068f639b8786aa5c83ec"}, "originalPosition": 298}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODk4OTUzOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjozMzoxNlrOHVNuqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjozMzoxNlrOHVNuqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwNzA4Mw==", "bodyText": "This substantially changes the semantic:  before we only ever returned null, or  the first matching resource; now, you throw instead of null (fine) but only return the first resource if there is only one, otherwise you return the whole lot. Pretty sure there's code that's not going to deal with that. Can't we leave the semantic as it was before, ie only return the first?\nAlso, I don't love the var name \"potentialResources\", what was wrong with \"resources\"?", "url": "https://github.com/eclipse/jetty.project/pull/5142#discussion_r492007083", "createdAt": "2020-09-21T12:33:16Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollection.java", "diffHunk": "@@ -245,59 +233,54 @@ public Resource addPath(String path) throws IOException\n \n         if (path == null)\n         {\n-            throw new MalformedURLException();\n+            throw new MalformedURLException(\"null path\");\n         }\n \n         if (path.length() == 0 || URIUtil.SLASH.equals(path))\n         {\n             return this;\n         }\n \n-        Resource resource = null;\n-        ArrayList<Resource> resources = null;\n-        int i = 0;\n-        for (; i < _resources.length; i++)\n+        // Attempt a simple (single) Resource lookup that exists\n+        for (Resource res : _resources)\n         {\n-            resource = _resources[i].addPath(path);\n-            if (resource.exists())\n+            Resource fileResource = res.addPath(path);\n+            if (fileResource.exists())\n             {\n-                if (resource.isDirectory())\n+                if (!fileResource.isDirectory())\n                 {\n-                    break;\n+                    return fileResource;\n                 }\n-                return resource;\n             }\n         }\n \n-        for (i++; i < _resources.length; i++)\n+        // Create a list of potential resource for directories of this collection\n+        ArrayList<Resource> potentialResources = null;\n+        for (Resource res : _resources)\n         {\n-            Resource r = _resources[i].addPath(path);\n+            Resource r = res.addPath(path);\n             if (r.exists() && r.isDirectory())\n             {\n-                if (resources == null)\n+                if (potentialResources == null)\n                 {\n-                    resources = new ArrayList<>();\n+                    potentialResources = new ArrayList<>();\n                 }\n \n-                if (resource != null)\n-                {\n-                    resources.add(resource);\n-                    resource = null;\n-                }\n-\n-                resources.add(r);\n+                potentialResources.add(r);\n             }\n         }\n \n-        if (resource != null)\n+        if (potentialResources == null || potentialResources.isEmpty())\n         {\n-            return resource;\n+            throw new MalformedURLException(\"path does not result in Resource: \" + path);\n         }\n-        if (resources != null)\n+\n+        if (potentialResources.size() == 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccc863726b60c9d5bf6e068f639b8786aa5c83ec"}, "originalPosition": 305}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2304, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}