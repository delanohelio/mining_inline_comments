{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMjY4MDQw", "number": 4544, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzo0NToyM1rODdxgIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTo0MzozOFrODd9w7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTQ2MzM5OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpConnection.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzo0NToyM1rOFmkURw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODozMDo0NlrOFmlr6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4NTIyMw==", "bodyText": "Shouldn't we be acquiring based on _header.capacity() or _config.getOutputBufferSize() instead here?\nThe issue that was filed is that we allocate a buffer based on _config.getResponseHeaderSize(), even if it's set to something massive (like 100MB)\nEven though the actual buffer that is required/used is much smaller.", "url": "https://github.com/eclipse/jetty.project/pull/4544#discussion_r375985223", "createdAt": "2020-02-06T17:45:23Z", "author": {"login": "joakime"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpConnection.java", "diffHunk": "@@ -754,8 +757,19 @@ public Action process() throws Exception\n \n                     case NEED_HEADER:\n                     {\n-                        _header = _bufferPool.acquire(_config.getResponseHeaderSize(), HEADER_BUFFER_DIRECT);\n-\n+                        int size;\n+                        if (_header == null)\n+                        {\n+                            size = Math.min(_config.getResponseHeaderSize(), _config.getOutputBufferSize());\n+                        }\n+                        else\n+                        {\n+                            if (_header.capacity() >= _config.getResponseHeaderSize())\n+                                throw new BadMessageException(INTERNAL_SERVER_ERROR_500, \"Response header too large\");\n+                            size = _config.getResponseHeaderSize();\n+                            _bufferPool.release(_header);\n+                        }\n+                        _header = _bufferPool.acquire(size, HEADER_BUFFER_DIRECT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b59e422940edfd194a273fd0c3740b84c78660b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk5MzA0NQ==", "bodyText": "On the first attempt we allocate on the minimum of responseHeaderSize and outputBufferSize, which almost always will be responseHeaderSize, so if we do a second attempt the capacity test will be >= responseHeaderSize and we throw bad message.\nOnly if the responseHeaderSize is larger than the outputBufferSize do we first allocate the outputBufferSize and if we overflow we do a second attempt, which passes the capacity test and reallocates the buffer at responseHeaderSize (unless of course the buffer pool already gave us buffer that was big enough for that).", "url": "https://github.com/eclipse/jetty.project/pull/4544#discussion_r375993045", "createdAt": "2020-02-06T18:00:25Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpConnection.java", "diffHunk": "@@ -754,8 +757,19 @@ public Action process() throws Exception\n \n                     case NEED_HEADER:\n                     {\n-                        _header = _bufferPool.acquire(_config.getResponseHeaderSize(), HEADER_BUFFER_DIRECT);\n-\n+                        int size;\n+                        if (_header == null)\n+                        {\n+                            size = Math.min(_config.getResponseHeaderSize(), _config.getOutputBufferSize());\n+                        }\n+                        else\n+                        {\n+                            if (_header.capacity() >= _config.getResponseHeaderSize())\n+                                throw new BadMessageException(INTERNAL_SERVER_ERROR_500, \"Response header too large\");\n+                            size = _config.getResponseHeaderSize();\n+                            _bufferPool.release(_header);\n+                        }\n+                        _header = _bufferPool.acquire(size, HEADER_BUFFER_DIRECT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4NTIyMw=="}, "originalCommit": {"oid": "1b59e422940edfd194a273fd0c3740b84c78660b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwNzY1OA==", "bodyText": "See my comment above. If we introduce NEED_LARGER_BUFFER, this if/else can be split in 2 case blocks and be clearer.", "url": "https://github.com/eclipse/jetty.project/pull/4544#discussion_r376007658", "createdAt": "2020-02-06T18:30:46Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpConnection.java", "diffHunk": "@@ -754,8 +757,19 @@ public Action process() throws Exception\n \n                     case NEED_HEADER:\n                     {\n-                        _header = _bufferPool.acquire(_config.getResponseHeaderSize(), HEADER_BUFFER_DIRECT);\n-\n+                        int size;\n+                        if (_header == null)\n+                        {\n+                            size = Math.min(_config.getResponseHeaderSize(), _config.getOutputBufferSize());\n+                        }\n+                        else\n+                        {\n+                            if (_header.capacity() >= _config.getResponseHeaderSize())\n+                                throw new BadMessageException(INTERNAL_SERVER_ERROR_500, \"Response header too large\");\n+                            size = _config.getResponseHeaderSize();\n+                            _bufferPool.release(_header);\n+                        }\n+                        _header = _bufferPool.acquire(size, HEADER_BUFFER_DIRECT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4NTIyMw=="}, "originalCommit": {"oid": "1b59e422940edfd194a273fd0c3740b84c78660b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTQ3ODA2OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/test/java/org/eclipse/jetty/server/HttpConnectionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzo0OTo1NFrOFmkdZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODowMjozOFrOFmk29A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4NzU1Ng==", "bodyText": "Do we have a test where we fail when we attempt to write a header that is too large?\nEg:\nconfig.setResponseHeaderSize(16 * 1024);\n... later ...\nresponse.setHeader(\"X-Foo\", a32kbString);", "url": "https://github.com/eclipse/jetty.project/pull/4544#discussion_r375987556", "createdAt": "2020-02-06T17:49:54Z", "author": {"login": "joakime"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/HttpConnectionTest.java", "diffHunk": "@@ -1258,6 +1259,48 @@ public void handle(String target, Request baseRequest, HttpServletRequest reques\n         }\n     }\n \n+    @Test\n+    public void testAllowedLargeResponse() throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b59e422940edfd194a273fd0c3740b84c78660b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk5NDEwMA==", "bodyText": "tes: testOversizedResponse", "url": "https://github.com/eclipse/jetty.project/pull/4544#discussion_r375994100", "createdAt": "2020-02-06T18:02:38Z", "author": {"login": "gregw"}, "path": "jetty-server/src/test/java/org/eclipse/jetty/server/HttpConnectionTest.java", "diffHunk": "@@ -1258,6 +1259,48 @@ public void handle(String target, Request baseRequest, HttpServletRequest reques\n         }\n     }\n \n+    @Test\n+    public void testAllowedLargeResponse() throws Exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4NzU1Ng=="}, "originalCommit": {"oid": "1b59e422940edfd194a273fd0c3740b84c78660b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTU5NDg1OnYy", "diffSide": "RIGHT", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODoyODozNVrOFmlnrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTozMjo0OVrOFmnj9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwNjU3Mg==", "bodyText": "I don't like this. A user of HttpGenerator will call generate(), receive back NEED_HEADER, allocate a small buffer, call generate() again, buffer overflow, receive back NEED_HEADER which break the minimum surprise (I just gave it a header buffer!), and potentially be a spin loop.\nI think we need to make this return value explicit, something like NEED_LARGER_BUFFER, so users of HttpGenerator can understand better what's going on and try again (which may lead again to NEED_LARGER_BUFFER, but eventually it will be enough).", "url": "https://github.com/eclipse/jetty.project/pull/4544#discussion_r376006572", "createdAt": "2020-02-06T18:28:35Z", "author": {"login": "sbordet"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpGenerator.java", "diffHunk": "@@ -445,7 +445,8 @@ else if (status == HttpStatus.NO_CONTENT_204 || status == HttpStatus.NOT_MODIFIE\n                 }\n                 catch (BufferOverflowException e)\n                 {\n-                    throw new BadMessageException(INTERNAL_SERVER_ERROR_500, \"Response header too large\", e);\n+                    LOG.ignore(e);\n+                    return Result.NEED_HEADER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b59e422940edfd194a273fd0c3740b84c78660b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzODM4OA==", "bodyText": "I agree, but I was trying not to change the API.... but I guess I have changed the contract of the API.  I'll add the extra enum...", "url": "https://github.com/eclipse/jetty.project/pull/4544#discussion_r376038388", "createdAt": "2020-02-06T19:32:49Z", "author": {"login": "gregw"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpGenerator.java", "diffHunk": "@@ -445,7 +445,8 @@ else if (status == HttpStatus.NO_CONTENT_204 || status == HttpStatus.NOT_MODIFIE\n                 }\n                 catch (BufferOverflowException e)\n                 {\n-                    throw new BadMessageException(INTERNAL_SERVER_ERROR_500, \"Response header too large\", e);\n+                    LOG.ignore(e);\n+                    return Result.NEED_HEADER;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwNjU3Mg=="}, "originalCommit": {"oid": "1b59e422940edfd194a273fd0c3740b84c78660b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzQ2NDc3OnYy", "diffSide": "RIGHT", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/http/HttpSenderOverHTTP.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTo0MTowMVrOFm3Y-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOTozNjozM1rOFsMR-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI5NzcyMg==", "bodyText": "On the client INTERNAL_SERVER_ERROR_500 won't make much sense, so perhaps replace with IllegalArgumentException?\nAlso, headerBuffer should be released to the pool.", "url": "https://github.com/eclipse/jetty.project/pull/4544#discussion_r376297722", "createdAt": "2020-02-07T09:41:01Z", "author": {"login": "sbordet"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/http/HttpSenderOverHTTP.java", "diffHunk": "@@ -225,6 +228,10 @@ protected Action process() throws Exception\n                         headerBuffer = httpClient.getByteBufferPool().acquire(httpClient.getRequestBufferSize(), false);\n                         break;\n                     }\n+                    case HEADER_OVERFLOW:\n+                    {\n+                        throw new BadMessageException(INTERNAL_SERVER_ERROR_500, \"Request header too large\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f50c2654b91fda2a0dc5f19ab7b0d5f820738c67"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1Nzg1OQ==", "bodyText": "The BadMessageException was thrown previously, even fit generating a request. Do we really want to change this in 9?", "url": "https://github.com/eclipse/jetty.project/pull/4544#discussion_r376357859", "createdAt": "2020-02-07T12:05:56Z", "author": {"login": "gregw"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/http/HttpSenderOverHTTP.java", "diffHunk": "@@ -225,6 +228,10 @@ protected Action process() throws Exception\n                         headerBuffer = httpClient.getByteBufferPool().acquire(httpClient.getRequestBufferSize(), false);\n                         break;\n                     }\n+                    case HEADER_OVERFLOW:\n+                    {\n+                        throw new BadMessageException(INTERNAL_SERVER_ERROR_500, \"Request header too large\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI5NzcyMg=="}, "originalCommit": {"oid": "f50c2654b91fda2a0dc5f19ab7b0d5f820738c67"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg2NDM3MA==", "bodyText": "@gregw the header buffer should be released to the pool.\nI'm ok to not change this in 9, but remember to make the change when merging to 10.", "url": "https://github.com/eclipse/jetty.project/pull/4544#discussion_r381864370", "createdAt": "2020-02-20T09:03:34Z", "author": {"login": "sbordet"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/http/HttpSenderOverHTTP.java", "diffHunk": "@@ -225,6 +228,10 @@ protected Action process() throws Exception\n                         headerBuffer = httpClient.getByteBufferPool().acquire(httpClient.getRequestBufferSize(), false);\n                         break;\n                     }\n+                    case HEADER_OVERFLOW:\n+                    {\n+                        throw new BadMessageException(INTERNAL_SERVER_ERROR_500, \"Request header too large\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI5NzcyMg=="}, "originalCommit": {"oid": "f50c2654b91fda2a0dc5f19ab7b0d5f820738c67"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg4Mjg3NA==", "bodyText": "Ooops missed this one. Fixed now.", "url": "https://github.com/eclipse/jetty.project/pull/4544#discussion_r381882874", "createdAt": "2020-02-20T09:36:33Z", "author": {"login": "gregw"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/http/HttpSenderOverHTTP.java", "diffHunk": "@@ -225,6 +228,10 @@ protected Action process() throws Exception\n                         headerBuffer = httpClient.getByteBufferPool().acquire(httpClient.getRequestBufferSize(), false);\n                         break;\n                     }\n+                    case HEADER_OVERFLOW:\n+                    {\n+                        throw new BadMessageException(INTERNAL_SERVER_ERROR_500, \"Request header too large\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI5NzcyMg=="}, "originalCommit": {"oid": "f50c2654b91fda2a0dc5f19ab7b0d5f820738c67"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzQ3MjQ1OnYy", "diffSide": "RIGHT", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpConnection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTo0MzozOFrOFm3drw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTo0MzozOFrOFm3drw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI5ODkyNw==", "bodyText": "Before throwing, you want to release the _header buffer back to the pool.", "url": "https://github.com/eclipse/jetty.project/pull/4544#discussion_r376298927", "createdAt": "2020-02-07T09:43:38Z", "author": {"login": "sbordet"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpConnection.java", "diffHunk": "@@ -754,8 +757,16 @@ public Action process() throws Exception\n \n                     case NEED_HEADER:\n                     {\n-                        _header = _bufferPool.acquire(_config.getResponseHeaderSize(), HEADER_BUFFER_DIRECT);\n+                        _header = _bufferPool.acquire(Math.min(_config.getResponseHeaderSize(), _config.getOutputBufferSize()), HEADER_BUFFER_DIRECT);\n+                        continue;\n+                    }\n \n+                    case HEADER_OVERFLOW:\n+                    {\n+                        if (_header.capacity() >= _config.getResponseHeaderSize())\n+                            throw new BadMessageException(INTERNAL_SERVER_ERROR_500, \"Response header too large\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f50c2654b91fda2a0dc5f19ab7b0d5f820738c67"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2792, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}