{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NjUxNjg3", "number": 5292, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODowNToxOVrOEmbGPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzoyMTozMlrOEms8XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzI1MzEwOnYy", "diffSide": "RIGHT", "path": "jetty-start/src/test/java/org/eclipse/jetty/start/fileinits/MavenLocalRepoFileInitializerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODowNToxOVrOHWbtsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjowMzoxOVrOHWpSCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI4NDc4NA==", "bodyText": "I don't like much the idea about having test depending on downloading resources from https://oss.sonatype.org.\n@joakime not urgent but I can fix that (next week when back from holidays)", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493284784", "createdAt": "2020-09-23T08:05:19Z", "author": {"login": "olamy"}, "path": "jetty-start/src/test/java/org/eclipse/jetty/start/fileinits/MavenLocalRepoFileInitializerTest.java", "diffHunk": "@@ -172,28 +177,90 @@ public void testGetCoordinateTestMavenBaseUri()\n     }\n \n     @Test\n-    public void testDownloaddefaultrepo()\n+    public void testDownloadDefaultRepo()\n         throws Exception\n     {\n         MavenLocalRepoFileInitializer repo =\n             new MavenLocalRepoFileInitializer(baseHome, null, false);\n-        String ref = \"maven://org.eclipse.jetty/jetty-http/9.4.10.v20180503/jar/tests\";\n+        String ref = \"maven://org.eclipse.jetty/jetty-http/9.4.31.v20200723/jar/tests\";\n         Coordinates coords = repo.getCoordinates(URI.create(ref));\n         assertThat(\"Coordinates\", coords, notNullValue());\n \n         assertThat(\"coords.groupId\", coords.groupId, is(\"org.eclipse.jetty\"));\n         assertThat(\"coords.artifactId\", coords.artifactId, is(\"jetty-http\"));\n-        assertThat(\"coords.version\", coords.version, is(\"9.4.10.v20180503\"));\n+        assertThat(\"coords.version\", coords.version, is(\"9.4.31.v20200723\"));\n         assertThat(\"coords.type\", coords.type, is(\"jar\"));\n         assertThat(\"coords.classifier\", coords.classifier, is(\"tests\"));\n \n         assertThat(\"coords.toCentralURI\", coords.toCentralURI().toASCIIString(),\n-            is(\"https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-http/9.4.10.v20180503/jetty-http-9.4.10.v20180503-tests.jar\"));\n+            is(\"https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-http/9.4.31.v20200723/jetty-http-9.4.31.v20200723-tests.jar\"));\n \n-        Path destination = Paths.get(System.getProperty(\"java.io.tmpdir\"), \"jetty-http-9.4.10.v20180503-tests.jar\");\n+        Path destination = testdir.getEmptyPathDir().resolve(\"jetty-http-9.4.31.v20200723-tests.jar\");\n         Files.deleteIfExists(destination);\n         repo.download(coords.toCentralURI(), destination);\n         assertThat(Files.exists(destination), is(true));\n-        assertThat(destination.toFile().length(), is(962621L));\n+        assertThat(destination.toFile().length(), is(986193L));\n+    }\n+\n+    @Test\n+    public void testDownloadSnapshotRepo()\n+        throws Exception\n+    {\n+        Path snapshotLocalRepoDir = testdir.getPath().resolve(\"snapshot-repo\");\n+        FS.ensureEmpty(snapshotLocalRepoDir);\n+\n+        MavenLocalRepoFileInitializer repo =\n+            new MavenLocalRepoFileInitializer(baseHome, snapshotLocalRepoDir, false, \"https://oss.sonatype.org/content/repositories/jetty-snapshots/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2cd9b3a502c444c818f14941f089bf6dbf877b9"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0MDUxNg==", "bodyText": "We could setup a small remote repo in src/test/resources (a 1 artifact repo) for testing purposes.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493340516", "createdAt": "2020-09-23T09:02:02Z", "author": {"login": "joakime"}, "path": "jetty-start/src/test/java/org/eclipse/jetty/start/fileinits/MavenLocalRepoFileInitializerTest.java", "diffHunk": "@@ -172,28 +177,90 @@ public void testGetCoordinateTestMavenBaseUri()\n     }\n \n     @Test\n-    public void testDownloaddefaultrepo()\n+    public void testDownloadDefaultRepo()\n         throws Exception\n     {\n         MavenLocalRepoFileInitializer repo =\n             new MavenLocalRepoFileInitializer(baseHome, null, false);\n-        String ref = \"maven://org.eclipse.jetty/jetty-http/9.4.10.v20180503/jar/tests\";\n+        String ref = \"maven://org.eclipse.jetty/jetty-http/9.4.31.v20200723/jar/tests\";\n         Coordinates coords = repo.getCoordinates(URI.create(ref));\n         assertThat(\"Coordinates\", coords, notNullValue());\n \n         assertThat(\"coords.groupId\", coords.groupId, is(\"org.eclipse.jetty\"));\n         assertThat(\"coords.artifactId\", coords.artifactId, is(\"jetty-http\"));\n-        assertThat(\"coords.version\", coords.version, is(\"9.4.10.v20180503\"));\n+        assertThat(\"coords.version\", coords.version, is(\"9.4.31.v20200723\"));\n         assertThat(\"coords.type\", coords.type, is(\"jar\"));\n         assertThat(\"coords.classifier\", coords.classifier, is(\"tests\"));\n \n         assertThat(\"coords.toCentralURI\", coords.toCentralURI().toASCIIString(),\n-            is(\"https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-http/9.4.10.v20180503/jetty-http-9.4.10.v20180503-tests.jar\"));\n+            is(\"https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-http/9.4.31.v20200723/jetty-http-9.4.31.v20200723-tests.jar\"));\n \n-        Path destination = Paths.get(System.getProperty(\"java.io.tmpdir\"), \"jetty-http-9.4.10.v20180503-tests.jar\");\n+        Path destination = testdir.getEmptyPathDir().resolve(\"jetty-http-9.4.31.v20200723-tests.jar\");\n         Files.deleteIfExists(destination);\n         repo.download(coords.toCentralURI(), destination);\n         assertThat(Files.exists(destination), is(true));\n-        assertThat(destination.toFile().length(), is(962621L));\n+        assertThat(destination.toFile().length(), is(986193L));\n+    }\n+\n+    @Test\n+    public void testDownloadSnapshotRepo()\n+        throws Exception\n+    {\n+        Path snapshotLocalRepoDir = testdir.getPath().resolve(\"snapshot-repo\");\n+        FS.ensureEmpty(snapshotLocalRepoDir);\n+\n+        MavenLocalRepoFileInitializer repo =\n+            new MavenLocalRepoFileInitializer(baseHome, snapshotLocalRepoDir, false, \"https://oss.sonatype.org/content/repositories/jetty-snapshots/\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI4NDc4NA=="}, "originalCommit": {"oid": "a2cd9b3a502c444c818f14941f089bf6dbf877b9"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUwNzA4Mg==", "bodyText": "I'll work on this today.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493507082", "createdAt": "2020-09-23T12:03:19Z", "author": {"login": "joakime"}, "path": "jetty-start/src/test/java/org/eclipse/jetty/start/fileinits/MavenLocalRepoFileInitializerTest.java", "diffHunk": "@@ -172,28 +177,90 @@ public void testGetCoordinateTestMavenBaseUri()\n     }\n \n     @Test\n-    public void testDownloaddefaultrepo()\n+    public void testDownloadDefaultRepo()\n         throws Exception\n     {\n         MavenLocalRepoFileInitializer repo =\n             new MavenLocalRepoFileInitializer(baseHome, null, false);\n-        String ref = \"maven://org.eclipse.jetty/jetty-http/9.4.10.v20180503/jar/tests\";\n+        String ref = \"maven://org.eclipse.jetty/jetty-http/9.4.31.v20200723/jar/tests\";\n         Coordinates coords = repo.getCoordinates(URI.create(ref));\n         assertThat(\"Coordinates\", coords, notNullValue());\n \n         assertThat(\"coords.groupId\", coords.groupId, is(\"org.eclipse.jetty\"));\n         assertThat(\"coords.artifactId\", coords.artifactId, is(\"jetty-http\"));\n-        assertThat(\"coords.version\", coords.version, is(\"9.4.10.v20180503\"));\n+        assertThat(\"coords.version\", coords.version, is(\"9.4.31.v20200723\"));\n         assertThat(\"coords.type\", coords.type, is(\"jar\"));\n         assertThat(\"coords.classifier\", coords.classifier, is(\"tests\"));\n \n         assertThat(\"coords.toCentralURI\", coords.toCentralURI().toASCIIString(),\n-            is(\"https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-http/9.4.10.v20180503/jetty-http-9.4.10.v20180503-tests.jar\"));\n+            is(\"https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-http/9.4.31.v20200723/jetty-http-9.4.31.v20200723-tests.jar\"));\n \n-        Path destination = Paths.get(System.getProperty(\"java.io.tmpdir\"), \"jetty-http-9.4.10.v20180503-tests.jar\");\n+        Path destination = testdir.getEmptyPathDir().resolve(\"jetty-http-9.4.31.v20200723-tests.jar\");\n         Files.deleteIfExists(destination);\n         repo.download(coords.toCentralURI(), destination);\n         assertThat(Files.exists(destination), is(true));\n-        assertThat(destination.toFile().length(), is(962621L));\n+        assertThat(destination.toFile().length(), is(986193L));\n+    }\n+\n+    @Test\n+    public void testDownloadSnapshotRepo()\n+        throws Exception\n+    {\n+        Path snapshotLocalRepoDir = testdir.getPath().resolve(\"snapshot-repo\");\n+        FS.ensureEmpty(snapshotLocalRepoDir);\n+\n+        MavenLocalRepoFileInitializer repo =\n+            new MavenLocalRepoFileInitializer(baseHome, snapshotLocalRepoDir, false, \"https://oss.sonatype.org/content/repositories/jetty-snapshots/\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI4NDc4NA=="}, "originalCommit": {"oid": "a2cd9b3a502c444c818f14941f089bf6dbf877b9"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzUyOTc5OnYy", "diffSide": "RIGHT", "path": "jetty-start/src/test/java/org/eclipse/jetty/start/fileinits/MavenMetadataTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1MjowMVrOHWegOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1MjowMVrOHWegOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzMDQ4OA==", "bodyText": "variable not used", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493330488", "createdAt": "2020-09-23T08:52:01Z", "author": {"login": "olamy"}, "path": "jetty-start/src/test/java/org/eclipse/jetty/start/fileinits/MavenMetadataTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.start.fileinits;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.TimeZone;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.SAXException;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class MavenMetadataTest\n+{\n+    private static final TimeZone UTC = TimeZone.getTimeZone(\"UTC\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2cd9b3a502c444c818f14941f089bf6dbf877b9"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzUzNDczOnYy", "diffSide": "RIGHT", "path": "jetty-start/src/test/java/org/eclipse/jetty/start/fileinits/MavenMetadataTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1Mjo0NlrOHWejZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTowMjozMlrOHWfI9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzMTMwMA==", "bodyText": "this test will fail is executed before noon :)", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493331300", "createdAt": "2020-09-23T08:52:46Z", "author": {"login": "olamy"}, "path": "jetty-start/src/test/java/org/eclipse/jetty/start/fileinits/MavenMetadataTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.start.fileinits;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.TimeZone;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.SAXException;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class MavenMetadataTest\n+{\n+    private static final TimeZone UTC = TimeZone.getTimeZone(\"UTC\");\n+\n+    @Test\n+    public void testParseExample() throws ParserConfigurationException, SAXException, IOException\n+    {\n+        Path example = MavenTestingUtils.getTestResourcePathFile(\"example-maven-metadata.xml\");\n+        MavenMetadata mavenMetadata = new MavenMetadata(example);\n+\n+        assertThat(\"Metadata.groupId\", mavenMetadata.getGroupId(), is(\"org.eclipse.jetty\"));\n+        assertThat(\"Metadata.artifactId\", mavenMetadata.getArtifactId(), is(\"jetty-rewrite\"));\n+        assertThat(\"Metadata.version\", mavenMetadata.getVersion(), is(\"10.0.0-SNAPSHOT\"));\n+\n+        assertThat(\"Metadata.versioning.lastUpdated\", mavenMetadata.getLastUpdated(), is(\"20200918022411\"));\n+\n+        assertThat(\"Metadata.versioning.snapshot.timestamp\", mavenMetadata.getSnapshotTimestamp(), is(\"20200918.022411\"));\n+        assertThat(\"Metadata.versioning.snapshot.buildNumber\", mavenMetadata.getSnapshotBuildNumber(), is(\"580\"));\n+\n+        assertThat(\"Metadata.snapshots.size\", mavenMetadata.getSnapshots().size(), is(4));\n+\n+        assertThat(\"Metadata.snapshot(null, 'jar').value\",\n+            mavenMetadata.getSnapshot(null, \"jar\").getValue(),\n+            is(\"10.0.0-20200918.022411-580\"));\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampVeryOld()\n+    {\n+        String timestamp = \"20190822223344\";\n+        assertTrue(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampNextWeek()\n+    {\n+        LocalDateTime nextWeek = LocalDateTime.now().plusWeeks(1);\n+        String timestamp = getTimestampFormatter().format(nextWeek);\n+        assertFalse(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should NOT be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampNow()\n+    {\n+        LocalDateTime now = LocalDateTime.now();\n+        String timestamp = getTimestampFormatter().format(now);\n+        assertFalse(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should NOT be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampYesterday()\n+    {\n+        LocalDateTime yesterday = LocalDateTime.now().minusDays(1);\n+        String timestamp = getTimestampFormatter().format(yesterday);\n+        assertTrue(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestamp12HoursOld()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2cd9b3a502c444c818f14941f089bf6dbf877b9"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0MDkxNw==", "bodyText": "Yeah, i caught that 1 failure. :-)\nI'm thinking of just dropping that specific test method.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493340917", "createdAt": "2020-09-23T09:02:32Z", "author": {"login": "joakime"}, "path": "jetty-start/src/test/java/org/eclipse/jetty/start/fileinits/MavenMetadataTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.start.fileinits;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.TimeZone;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.SAXException;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class MavenMetadataTest\n+{\n+    private static final TimeZone UTC = TimeZone.getTimeZone(\"UTC\");\n+\n+    @Test\n+    public void testParseExample() throws ParserConfigurationException, SAXException, IOException\n+    {\n+        Path example = MavenTestingUtils.getTestResourcePathFile(\"example-maven-metadata.xml\");\n+        MavenMetadata mavenMetadata = new MavenMetadata(example);\n+\n+        assertThat(\"Metadata.groupId\", mavenMetadata.getGroupId(), is(\"org.eclipse.jetty\"));\n+        assertThat(\"Metadata.artifactId\", mavenMetadata.getArtifactId(), is(\"jetty-rewrite\"));\n+        assertThat(\"Metadata.version\", mavenMetadata.getVersion(), is(\"10.0.0-SNAPSHOT\"));\n+\n+        assertThat(\"Metadata.versioning.lastUpdated\", mavenMetadata.getLastUpdated(), is(\"20200918022411\"));\n+\n+        assertThat(\"Metadata.versioning.snapshot.timestamp\", mavenMetadata.getSnapshotTimestamp(), is(\"20200918.022411\"));\n+        assertThat(\"Metadata.versioning.snapshot.buildNumber\", mavenMetadata.getSnapshotBuildNumber(), is(\"580\"));\n+\n+        assertThat(\"Metadata.snapshots.size\", mavenMetadata.getSnapshots().size(), is(4));\n+\n+        assertThat(\"Metadata.snapshot(null, 'jar').value\",\n+            mavenMetadata.getSnapshot(null, \"jar\").getValue(),\n+            is(\"10.0.0-20200918.022411-580\"));\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampVeryOld()\n+    {\n+        String timestamp = \"20190822223344\";\n+        assertTrue(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampNextWeek()\n+    {\n+        LocalDateTime nextWeek = LocalDateTime.now().plusWeeks(1);\n+        String timestamp = getTimestampFormatter().format(nextWeek);\n+        assertFalse(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should NOT be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampNow()\n+    {\n+        LocalDateTime now = LocalDateTime.now();\n+        String timestamp = getTimestampFormatter().format(now);\n+        assertFalse(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should NOT be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampYesterday()\n+    {\n+        LocalDateTime yesterday = LocalDateTime.now().minusDays(1);\n+        String timestamp = getTimestampFormatter().format(yesterday);\n+        assertTrue(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestamp12HoursOld()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzMTMwMA=="}, "originalCommit": {"oid": "a2cd9b3a502c444c818f14941f089bf6dbf877b9"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzUzOTgyOnYy", "diffSide": "RIGHT", "path": "jetty-start/src/test/java/org/eclipse/jetty/start/fileinits/MavenMetadataTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1MzozOFrOHWemwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjowMjoyNVrOHWpOwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzMjE2MQ==", "bodyText": "what about something such now(ZoneId.of(\"UTC\")) as getTimestampFormatter use UTC?", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493332161", "createdAt": "2020-09-23T08:53:38Z", "author": {"login": "olamy"}, "path": "jetty-start/src/test/java/org/eclipse/jetty/start/fileinits/MavenMetadataTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.start.fileinits;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.TimeZone;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.SAXException;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class MavenMetadataTest\n+{\n+    private static final TimeZone UTC = TimeZone.getTimeZone(\"UTC\");\n+\n+    @Test\n+    public void testParseExample() throws ParserConfigurationException, SAXException, IOException\n+    {\n+        Path example = MavenTestingUtils.getTestResourcePathFile(\"example-maven-metadata.xml\");\n+        MavenMetadata mavenMetadata = new MavenMetadata(example);\n+\n+        assertThat(\"Metadata.groupId\", mavenMetadata.getGroupId(), is(\"org.eclipse.jetty\"));\n+        assertThat(\"Metadata.artifactId\", mavenMetadata.getArtifactId(), is(\"jetty-rewrite\"));\n+        assertThat(\"Metadata.version\", mavenMetadata.getVersion(), is(\"10.0.0-SNAPSHOT\"));\n+\n+        assertThat(\"Metadata.versioning.lastUpdated\", mavenMetadata.getLastUpdated(), is(\"20200918022411\"));\n+\n+        assertThat(\"Metadata.versioning.snapshot.timestamp\", mavenMetadata.getSnapshotTimestamp(), is(\"20200918.022411\"));\n+        assertThat(\"Metadata.versioning.snapshot.buildNumber\", mavenMetadata.getSnapshotBuildNumber(), is(\"580\"));\n+\n+        assertThat(\"Metadata.snapshots.size\", mavenMetadata.getSnapshots().size(), is(4));\n+\n+        assertThat(\"Metadata.snapshot(null, 'jar').value\",\n+            mavenMetadata.getSnapshot(null, \"jar\").getValue(),\n+            is(\"10.0.0-20200918.022411-580\"));\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampVeryOld()\n+    {\n+        String timestamp = \"20190822223344\";\n+        assertTrue(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampNextWeek()\n+    {\n+        LocalDateTime nextWeek = LocalDateTime.now().plusWeeks(1);\n+        String timestamp = getTimestampFormatter().format(nextWeek);\n+        assertFalse(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should NOT be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampNow()\n+    {\n+        LocalDateTime now = LocalDateTime.now();\n+        String timestamp = getTimestampFormatter().format(now);\n+        assertFalse(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should NOT be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampYesterday()\n+    {\n+        LocalDateTime yesterday = LocalDateTime.now().minusDays(1);\n+        String timestamp = getTimestampFormatter().format(yesterday);\n+        assertTrue(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestamp12HoursOld()\n+    {\n+        LocalDateTime oldish = LocalDateTime.now().minusHours(12);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2cd9b3a502c444c818f14941f089bf6dbf877b9"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0MTQ2NA==", "bodyText": "That might work.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493341464", "createdAt": "2020-09-23T09:03:06Z", "author": {"login": "joakime"}, "path": "jetty-start/src/test/java/org/eclipse/jetty/start/fileinits/MavenMetadataTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.start.fileinits;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.TimeZone;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.SAXException;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class MavenMetadataTest\n+{\n+    private static final TimeZone UTC = TimeZone.getTimeZone(\"UTC\");\n+\n+    @Test\n+    public void testParseExample() throws ParserConfigurationException, SAXException, IOException\n+    {\n+        Path example = MavenTestingUtils.getTestResourcePathFile(\"example-maven-metadata.xml\");\n+        MavenMetadata mavenMetadata = new MavenMetadata(example);\n+\n+        assertThat(\"Metadata.groupId\", mavenMetadata.getGroupId(), is(\"org.eclipse.jetty\"));\n+        assertThat(\"Metadata.artifactId\", mavenMetadata.getArtifactId(), is(\"jetty-rewrite\"));\n+        assertThat(\"Metadata.version\", mavenMetadata.getVersion(), is(\"10.0.0-SNAPSHOT\"));\n+\n+        assertThat(\"Metadata.versioning.lastUpdated\", mavenMetadata.getLastUpdated(), is(\"20200918022411\"));\n+\n+        assertThat(\"Metadata.versioning.snapshot.timestamp\", mavenMetadata.getSnapshotTimestamp(), is(\"20200918.022411\"));\n+        assertThat(\"Metadata.versioning.snapshot.buildNumber\", mavenMetadata.getSnapshotBuildNumber(), is(\"580\"));\n+\n+        assertThat(\"Metadata.snapshots.size\", mavenMetadata.getSnapshots().size(), is(4));\n+\n+        assertThat(\"Metadata.snapshot(null, 'jar').value\",\n+            mavenMetadata.getSnapshot(null, \"jar\").getValue(),\n+            is(\"10.0.0-20200918.022411-580\"));\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampVeryOld()\n+    {\n+        String timestamp = \"20190822223344\";\n+        assertTrue(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampNextWeek()\n+    {\n+        LocalDateTime nextWeek = LocalDateTime.now().plusWeeks(1);\n+        String timestamp = getTimestampFormatter().format(nextWeek);\n+        assertFalse(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should NOT be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampNow()\n+    {\n+        LocalDateTime now = LocalDateTime.now();\n+        String timestamp = getTimestampFormatter().format(now);\n+        assertFalse(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should NOT be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampYesterday()\n+    {\n+        LocalDateTime yesterday = LocalDateTime.now().minusDays(1);\n+        String timestamp = getTimestampFormatter().format(yesterday);\n+        assertTrue(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestamp12HoursOld()\n+    {\n+        LocalDateTime oldish = LocalDateTime.now().minusHours(12);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzMjE2MQ=="}, "originalCommit": {"oid": "a2cd9b3a502c444c818f14941f089bf6dbf877b9"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUwNjI0MQ==", "bodyText": "I opted to just remove this specific test, it's not reliable as written, and is too sensitive to the time of day that surefire user executes the test on.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493506241", "createdAt": "2020-09-23T12:02:25Z", "author": {"login": "joakime"}, "path": "jetty-start/src/test/java/org/eclipse/jetty/start/fileinits/MavenMetadataTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.start.fileinits;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.TimeZone;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.junit.jupiter.api.Test;\n+import org.xml.sax.SAXException;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class MavenMetadataTest\n+{\n+    private static final TimeZone UTC = TimeZone.getTimeZone(\"UTC\");\n+\n+    @Test\n+    public void testParseExample() throws ParserConfigurationException, SAXException, IOException\n+    {\n+        Path example = MavenTestingUtils.getTestResourcePathFile(\"example-maven-metadata.xml\");\n+        MavenMetadata mavenMetadata = new MavenMetadata(example);\n+\n+        assertThat(\"Metadata.groupId\", mavenMetadata.getGroupId(), is(\"org.eclipse.jetty\"));\n+        assertThat(\"Metadata.artifactId\", mavenMetadata.getArtifactId(), is(\"jetty-rewrite\"));\n+        assertThat(\"Metadata.version\", mavenMetadata.getVersion(), is(\"10.0.0-SNAPSHOT\"));\n+\n+        assertThat(\"Metadata.versioning.lastUpdated\", mavenMetadata.getLastUpdated(), is(\"20200918022411\"));\n+\n+        assertThat(\"Metadata.versioning.snapshot.timestamp\", mavenMetadata.getSnapshotTimestamp(), is(\"20200918.022411\"));\n+        assertThat(\"Metadata.versioning.snapshot.buildNumber\", mavenMetadata.getSnapshotBuildNumber(), is(\"580\"));\n+\n+        assertThat(\"Metadata.snapshots.size\", mavenMetadata.getSnapshots().size(), is(4));\n+\n+        assertThat(\"Metadata.snapshot(null, 'jar').value\",\n+            mavenMetadata.getSnapshot(null, \"jar\").getValue(),\n+            is(\"10.0.0-20200918.022411-580\"));\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampVeryOld()\n+    {\n+        String timestamp = \"20190822223344\";\n+        assertTrue(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampNextWeek()\n+    {\n+        LocalDateTime nextWeek = LocalDateTime.now().plusWeeks(1);\n+        String timestamp = getTimestampFormatter().format(nextWeek);\n+        assertFalse(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should NOT be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampNow()\n+    {\n+        LocalDateTime now = LocalDateTime.now();\n+        String timestamp = getTimestampFormatter().format(now);\n+        assertFalse(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should NOT be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestampYesterday()\n+    {\n+        LocalDateTime yesterday = LocalDateTime.now().minusDays(1);\n+        String timestamp = getTimestampFormatter().format(yesterday);\n+        assertTrue(MavenMetadata.isExpiredTimestamp(timestamp), \"Timestamp should be stale: \" + timestamp);\n+    }\n+\n+    @Test\n+    public void testIsExpiredTimestamp12HoursOld()\n+    {\n+        LocalDateTime oldish = LocalDateTime.now().minusHours(12);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzMjE2MQ=="}, "originalCommit": {"oid": "a2cd9b3a502c444c818f14941f089bf6dbf877b9"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzU1OTg4OnYy", "diffSide": "RIGHT", "path": "jetty-start/src/main/java/org/eclipse/jetty/start/fileinits/MavenLocalRepoFileInitializer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1Njo1MFrOHWez6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjowOTo0MlrOHWpojA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNTUzMA==", "bodyText": "maybe we could have some configuration \u00e0 la mvn -U to force downloading SNAPSHOT as here we have a sort of hardcoded value (the day before) maybe a sys property?", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493335530", "createdAt": "2020-09-23T08:56:50Z", "author": {"login": "olamy"}, "path": "jetty-start/src/main/java/org/eclipse/jetty/start/fileinits/MavenLocalRepoFileInitializer.java", "diffHunk": "@@ -219,6 +290,65 @@ public Coordinates getCoordinates(URI uri)\n         return coords;\n     }\n \n+    protected void download(Coordinates coords, Path destination)\n+        throws IOException\n+    {\n+        if (coords.version.endsWith(\"-SNAPSHOT\"))\n+        {\n+            Path localRepoMetadataPath = localRepositoryDir.resolve(coords.toMetadataPath());\n+            if (isMetadataStale(localRepoMetadataPath))\n+            {\n+                // Grab a fresh copy of the metadata xml\n+                URI mavenMetadataURI = coords.toSnapshotMetadataXmlURI();\n+                super.download(mavenMetadataURI, localRepoMetadataPath);\n+            }\n+\n+            if (Files.exists(localRepoMetadataPath))\n+            {\n+                // parse metadata to get actual SNAPSHOT version\n+                String actualVersion = getMetadataVersion(localRepoMetadataPath, coords);\n+                super.download(coords.toCentralURI(actualVersion), destination);\n+            }\n+        }\n+        else\n+        {\n+            super.download(coords.toCentralURI(), destination);\n+        }\n+    }\n+\n+    private boolean isMetadataStale(Path localRepoMetadataPath)\n+    {\n+        if (!Files.exists(localRepoMetadataPath))\n+        {\n+            // doesn't exist, it's stale.\n+            return true;\n+        }\n+\n+        try\n+        {\n+            MavenMetadata mavenMetadata = new MavenMetadata(localRepoMetadataPath);\n+            return MavenMetadata.isExpiredTimestamp(mavenMetadata.getLastUpdated());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2cd9b3a502c444c818f14941f089bf6dbf877b9"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0MTk1Mw==", "bodyText": "Forcing download of new snapshots could be useful, yes.\nLets make that a new PR after this one gets merged.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493341953", "createdAt": "2020-09-23T09:03:40Z", "author": {"login": "joakime"}, "path": "jetty-start/src/main/java/org/eclipse/jetty/start/fileinits/MavenLocalRepoFileInitializer.java", "diffHunk": "@@ -219,6 +290,65 @@ public Coordinates getCoordinates(URI uri)\n         return coords;\n     }\n \n+    protected void download(Coordinates coords, Path destination)\n+        throws IOException\n+    {\n+        if (coords.version.endsWith(\"-SNAPSHOT\"))\n+        {\n+            Path localRepoMetadataPath = localRepositoryDir.resolve(coords.toMetadataPath());\n+            if (isMetadataStale(localRepoMetadataPath))\n+            {\n+                // Grab a fresh copy of the metadata xml\n+                URI mavenMetadataURI = coords.toSnapshotMetadataXmlURI();\n+                super.download(mavenMetadataURI, localRepoMetadataPath);\n+            }\n+\n+            if (Files.exists(localRepoMetadataPath))\n+            {\n+                // parse metadata to get actual SNAPSHOT version\n+                String actualVersion = getMetadataVersion(localRepoMetadataPath, coords);\n+                super.download(coords.toCentralURI(actualVersion), destination);\n+            }\n+        }\n+        else\n+        {\n+            super.download(coords.toCentralURI(), destination);\n+        }\n+    }\n+\n+    private boolean isMetadataStale(Path localRepoMetadataPath)\n+    {\n+        if (!Files.exists(localRepoMetadataPath))\n+        {\n+            // doesn't exist, it's stale.\n+            return true;\n+        }\n+\n+        try\n+        {\n+            MavenMetadata mavenMetadata = new MavenMetadata(localRepoMetadataPath);\n+            return MavenMetadata.isExpiredTimestamp(mavenMetadata.getLastUpdated());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNTUzMA=="}, "originalCommit": {"oid": "a2cd9b3a502c444c818f14941f089bf6dbf877b9"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUxMjg0NA==", "bodyText": "This ability, to support SNAPSHOT artifacts, is currently only useful to us when testing things.\nThe actual 10.0.0 release wouldn't have this requirement.\nSo I think it's safe to push this --update-snapshots feature to a future Jetty 10.0.x release.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493512844", "createdAt": "2020-09-23T12:09:42Z", "author": {"login": "joakime"}, "path": "jetty-start/src/main/java/org/eclipse/jetty/start/fileinits/MavenLocalRepoFileInitializer.java", "diffHunk": "@@ -219,6 +290,65 @@ public Coordinates getCoordinates(URI uri)\n         return coords;\n     }\n \n+    protected void download(Coordinates coords, Path destination)\n+        throws IOException\n+    {\n+        if (coords.version.endsWith(\"-SNAPSHOT\"))\n+        {\n+            Path localRepoMetadataPath = localRepositoryDir.resolve(coords.toMetadataPath());\n+            if (isMetadataStale(localRepoMetadataPath))\n+            {\n+                // Grab a fresh copy of the metadata xml\n+                URI mavenMetadataURI = coords.toSnapshotMetadataXmlURI();\n+                super.download(mavenMetadataURI, localRepoMetadataPath);\n+            }\n+\n+            if (Files.exists(localRepoMetadataPath))\n+            {\n+                // parse metadata to get actual SNAPSHOT version\n+                String actualVersion = getMetadataVersion(localRepoMetadataPath, coords);\n+                super.download(coords.toCentralURI(actualVersion), destination);\n+            }\n+        }\n+        else\n+        {\n+            super.download(coords.toCentralURI(), destination);\n+        }\n+    }\n+\n+    private boolean isMetadataStale(Path localRepoMetadataPath)\n+    {\n+        if (!Files.exists(localRepoMetadataPath))\n+        {\n+            // doesn't exist, it's stale.\n+            return true;\n+        }\n+\n+        try\n+        {\n+            MavenMetadata mavenMetadata = new MavenMetadata(localRepoMetadataPath);\n+            return MavenMetadata.isExpiredTimestamp(mavenMetadata.getLastUpdated());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNTUzMA=="}, "originalCommit": {"oid": "a2cd9b3a502c444c818f14941f089bf6dbf877b9"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTk4NDYzOnYy", "diffSide": "RIGHT", "path": "examples/async-rest/async-rest-webapp/src/main/config/modules/demo-async-rest.mod", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjozMTozMFrOHW28OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzo1NzoyN1rOHW6JGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczMDg3Mw==", "bodyText": "The groupId should be org.eclipse.jetty.examples like we have o.e.j.tests.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493730873", "createdAt": "2020-09-23T16:31:30Z", "author": {"login": "sbordet"}, "path": "examples/async-rest/async-rest-webapp/src/main/config/modules/demo-async-rest.mod", "diffHunk": "@@ -0,0 +1,15 @@\n+# DO NOT EDIT - See: https://www.eclipse.org/jetty/documentation/current/startup-modules.html\n+\n+[description]\n+Demo Async Rest webapp\n+\n+[tags]\n+demo\n+webapp\n+\n+[depends]\n+deploy\n+\n+[files]\n+maven://org.eclipse.jetty.example-async-rest/example-async-rest-webapp/${jetty.version}/war|webapps/demo-async-rest.war", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "797b267e362d8386fe3a9bf426070137b06bb8da"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4MzMyMA==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493783320", "createdAt": "2020-09-23T17:57:27Z", "author": {"login": "joakime"}, "path": "examples/async-rest/async-rest-webapp/src/main/config/modules/demo-async-rest.mod", "diffHunk": "@@ -0,0 +1,15 @@\n+# DO NOT EDIT - See: https://www.eclipse.org/jetty/documentation/current/startup-modules.html\n+\n+[description]\n+Demo Async Rest webapp\n+\n+[tags]\n+demo\n+webapp\n+\n+[depends]\n+deploy\n+\n+[files]\n+maven://org.eclipse.jetty.example-async-rest/example-async-rest-webapp/${jetty.version}/war|webapps/demo-async-rest.war", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczMDg3Mw=="}, "originalCommit": {"oid": "797b267e362d8386fe3a9bf426070137b06bb8da"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTk4ODk3OnYy", "diffSide": "RIGHT", "path": "jetty-home/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjozMjozNlrOHW2-7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzo1OTo0NFrOHW6PBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczMTU2NA==", "bodyText": "Shouldn't the async-rest groupId be here too?", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493731564", "createdAt": "2020-09-23T16:32:36Z", "author": {"login": "sbordet"}, "path": "jetty-home/pom.xml", "diffHunk": "@@ -464,7 +464,7 @@\n               <goal>unpack-dependencies</goal>\n             </goals>\n             <configuration>\n-              <includeGroupIds>org.eclipse.jetty,org.eclipse.jetty.websocket</includeGroupIds>\n+              <includeGroupIds>org.eclipse.jetty,org.eclipse.jetty.tests,org.eclipse.jetty.websocket</includeGroupIds>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "797b267e362d8386fe3a9bf426070137b06bb8da"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NDgzNg==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493784836", "createdAt": "2020-09-23T17:59:44Z", "author": {"login": "joakime"}, "path": "jetty-home/pom.xml", "diffHunk": "@@ -464,7 +464,7 @@\n               <goal>unpack-dependencies</goal>\n             </goals>\n             <configuration>\n-              <includeGroupIds>org.eclipse.jetty,org.eclipse.jetty.websocket</includeGroupIds>\n+              <includeGroupIds>org.eclipse.jetty,org.eclipse.jetty.tests,org.eclipse.jetty.websocket</includeGroupIds>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczMTU2NA=="}, "originalCommit": {"oid": "797b267e362d8386fe3a9bf426070137b06bb8da"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTk5MDcxOnYy", "diffSide": "RIGHT", "path": "jetty-home/src/main/resources/modules/demo-base.mod", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjozMzowNFrOHW2_-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODowNTo1OFrOHW6dfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczMTgzNA==", "bodyText": "Unnecessary empty line.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493731834", "createdAt": "2020-09-23T16:33:04Z", "author": {"login": "sbordet"}, "path": "jetty-home/src/main/resources/modules/demo-base.mod", "diffHunk": "@@ -0,0 +1,28 @@\n+# DO NOT EDIT - See: https://www.eclipse.org/jetty/documentation/current/startup-modules.html\n+\n+[description]\n+A meta module to enable all demo modules.\n+\n+[tags]\n+demo\n+\n+[depends]\n+http\n+https\n+http2\n+test-keystore\n+work\n+demo-root\n+demo-async-rest\n+demo-proxy\n+demo-spec\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "797b267e362d8386fe3a9bf426070137b06bb8da"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4ODU0MQ==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493788541", "createdAt": "2020-09-23T18:05:58Z", "author": {"login": "joakime"}, "path": "jetty-home/src/main/resources/modules/demo-base.mod", "diffHunk": "@@ -0,0 +1,28 @@\n+# DO NOT EDIT - See: https://www.eclipse.org/jetty/documentation/current/startup-modules.html\n+\n+[description]\n+A meta module to enable all demo modules.\n+\n+[tags]\n+demo\n+\n+[depends]\n+http\n+https\n+http2\n+test-keystore\n+work\n+demo-root\n+demo-async-rest\n+demo-proxy\n+demo-spec\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczMTgzNA=="}, "originalCommit": {"oid": "797b267e362d8386fe3a9bf426070137b06bb8da"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDEzMDk0OnYy", "diffSide": "RIGHT", "path": "jetty-start/src/main/java/org/eclipse/jetty/start/fileinits/MavenLocalRepoFileInitializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzowOTo0MlrOHW4YHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODowNzoyNlrOHW6gfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1NDM5OQ==", "bodyText": "I don't think this is necessary at all - seems to introduce a lot of additional complexity.\nMaybe it's a generic feature but I don't think it should go into this PR.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493754399", "createdAt": "2020-09-23T17:09:42Z", "author": {"login": "sbordet"}, "path": "jetty-start/src/main/java/org/eclipse/jetty/start/fileinits/MavenLocalRepoFileInitializer.java", "diffHunk": "@@ -219,6 +290,65 @@ public Coordinates getCoordinates(URI uri)\n         return coords;\n     }\n \n+    protected void download(Coordinates coords, Path destination)\n+        throws IOException\n+    {\n+        if (coords.version.endsWith(\"-SNAPSHOT\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f1046c816a21813321119b21c78708c32bd4a1"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4OTMwOA==", "bodyText": "As discussed, this is ok.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493789308", "createdAt": "2020-09-23T18:07:26Z", "author": {"login": "joakime"}, "path": "jetty-start/src/main/java/org/eclipse/jetty/start/fileinits/MavenLocalRepoFileInitializer.java", "diffHunk": "@@ -219,6 +290,65 @@ public Coordinates getCoordinates(URI uri)\n         return coords;\n     }\n \n+    protected void download(Coordinates coords, Path destination)\n+        throws IOException\n+    {\n+        if (coords.version.endsWith(\"-SNAPSHOT\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1NDM5OQ=="}, "originalCommit": {"oid": "55f1046c816a21813321119b21c78708c32bd4a1"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDE1MzY0OnYy", "diffSide": "RIGHT", "path": "tests/test-webapps/test-jaas-webapp/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzoxNTozMlrOHW4mIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzoxNTozMlrOHW4mIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1Nzk4NQ==", "bodyText": "Just remove the <configuration> section altogether.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493757985", "createdAt": "2020-09-23T17:15:32Z", "author": {"login": "sbordet"}, "path": "tests/test-webapps/test-jaas-webapp/pom.xml", "diffHunk": "@@ -18,50 +18,37 @@\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-deploy-plugin</artifactId>\n         <configuration>\n-          <!-- DO NOT DEPLOY (or Release) -->\n-          <skip>true</skip>\n+          <!-- DEMO Project, Must Deploy -->\n+          <skip>false</skip>\n         </configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5332f3f685ea86b0d4c398eab7b3e83f7b8a76f8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDE2MDcwOnYy", "diffSide": "RIGHT", "path": "tests/test-webapps/test-jetty-webapp/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzoxNzoxN1rOHW4qig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzoxNzoxN1rOHW4qig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1OTExNA==", "bodyText": "Remove <configuration> section.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493759114", "createdAt": "2020-09-23T17:17:17Z", "author": {"login": "sbordet"}, "path": "tests/test-webapps/test-jetty-webapp/pom.xml", "diffHunk": "@@ -88,50 +86,55 @@\n           </archive>\n         </configuration>\n       </plugin>\n-      <plugin>\n-        <groupId>org.eclipse.jetty</groupId>\n-        <artifactId>jetty-maven-plugin</artifactId>\n-        <version>${project.version}</version>\n-        <dependencies>\n-          <dependency>\n-            <groupId>org.eclipse.jetty</groupId>\n-            <artifactId>jetty-client</artifactId>\n-            <version>${project.version}</version>\n-          </dependency>\n-          <dependency>\n-            <groupId>org.eclipse.jetty</groupId>\n-            <artifactId>jetty-servlets</artifactId>\n-            <version>${project.version}</version>\n-          </dependency>\n-        </dependencies>\n-        <configuration>\n-          <stopPort>8087</stopPort>\n-          <stopKey>foo</stopKey>\n-          <scan>1</scan>\n-          <systemProperties>\n-              <fooprop>222</fooprop>\n-          </systemProperties>\n-          <webApp>\n-            <contextPath>/test</contextPath>\n-            <tempDirectory>${project.build.directory}/work</tempDirectory>\n-          </webApp>\n-          <loginServices>\n-            <loginService implementation=\"org.eclipse.jetty.security.HashLoginService\">\n-              <name>Test Realm</name>\n-              <config>src/main/config/demo-base/etc/realm.properties</config>\n-            </loginService>\n-          </loginServices>\n-        </configuration>\n-      </plugin>\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-deploy-plugin</artifactId>\n         <configuration>\n-          <!-- must deploy: required for jetty-distribution -->\n+          <!-- DEMO Project, Must Deploy -->\n           <skip>false</skip>\n         </configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5332f3f685ea86b0d4c398eab7b3e83f7b8a76f8"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDE2Njg2OnYy", "diffSide": "RIGHT", "path": "tests/test-webapps/test-jetty-webapp/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzoxODo1OFrOHW4uaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo0MTozMlrOHW7vEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDEwNA==", "bodyText": "Why has this part been moved from <build> to <pluginManagement>? We don't need to manage plugins for children POMs, no?", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493760104", "createdAt": "2020-09-23T17:18:58Z", "author": {"login": "sbordet"}, "path": "tests/test-webapps/test-jetty-webapp/pom.xml", "diffHunk": "@@ -88,50 +86,55 @@\n           </archive>\n         </configuration>\n       </plugin>\n-      <plugin>\n-        <groupId>org.eclipse.jetty</groupId>\n-        <artifactId>jetty-maven-plugin</artifactId>\n-        <version>${project.version}</version>\n-        <dependencies>\n-          <dependency>\n-            <groupId>org.eclipse.jetty</groupId>\n-            <artifactId>jetty-client</artifactId>\n-            <version>${project.version}</version>\n-          </dependency>\n-          <dependency>\n-            <groupId>org.eclipse.jetty</groupId>\n-            <artifactId>jetty-servlets</artifactId>\n-            <version>${project.version}</version>\n-          </dependency>\n-        </dependencies>\n-        <configuration>\n-          <stopPort>8087</stopPort>\n-          <stopKey>foo</stopKey>\n-          <scan>1</scan>\n-          <systemProperties>\n-              <fooprop>222</fooprop>\n-          </systemProperties>\n-          <webApp>\n-            <contextPath>/test</contextPath>\n-            <tempDirectory>${project.build.directory}/work</tempDirectory>\n-          </webApp>\n-          <loginServices>\n-            <loginService implementation=\"org.eclipse.jetty.security.HashLoginService\">\n-              <name>Test Realm</name>\n-              <config>src/main/config/demo-base/etc/realm.properties</config>\n-            </loginService>\n-          </loginServices>\n-        </configuration>\n-      </plugin>\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-deploy-plugin</artifactId>\n         <configuration>\n-          <!-- must deploy: required for jetty-distribution -->\n+          <!-- DEMO Project, Must Deploy -->\n           <skip>false</skip>\n         </configuration>\n       </plugin>\n     </plugins>\n+    <pluginManagement>\n+      <plugins>\n+        <plugin>\n+          <groupId>org.eclipse.jetty</groupId>\n+          <artifactId>jetty-maven-plugin</artifactId>\n+          <version>${project.version}</version>\n+          <dependencies>\n+            <dependency>\n+              <groupId>org.eclipse.jetty</groupId>\n+              <artifactId>jetty-client</artifactId>\n+              <version>${project.version}</version>\n+            </dependency>\n+            <dependency>\n+              <groupId>org.eclipse.jetty</groupId>\n+              <artifactId>jetty-servlets</artifactId>\n+              <version>${project.version}</version>\n+            </dependency>\n+          </dependencies>\n+          <configuration>\n+            <stopPort>8087</stopPort>\n+            <stopKey>foo</stopKey>\n+            <scan>1</scan>\n+            <systemProperties>\n+              <fooprop>222</fooprop>\n+            </systemProperties>\n+            <webApp>\n+              <contextPath>/test</contextPath>\n+              <tempDirectory>${project.build.directory}/work</tempDirectory>\n+            </webApp>\n+            <loginServices>\n+              <loginService implementation=\"org.eclipse.jetty.security.HashLoginService\">\n+                <name>Test Realm</name>\n+                <config>src/main/config/demo-base/etc/realm.properties</config>\n+              </loginService>\n+            </loginServices>\n+          </configuration>\n+        </plugin>\n+\n+      </plugins>\n+    </pluginManagement>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5332f3f685ea86b0d4c398eab7b3e83f7b8a76f8"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgwOTQyNA==", "bodyText": "Having jetty-maven-plugin as a formal plugin declaration forces it to resolve in the maven reactor.\nIt was causing a cyclic dependency as  ...\n        WARNING: not enabled by default, as it introduces a cyclic reference in the build reactor.\n        [ERROR] The projects in the reactor contain a cyclic reference:\n          Edge between 'Vertex{label='org.eclipse.jetty:jetty-home:10.0.0-SNAPSHOT'}' and\n          'Vertex{label='org.eclipse.jetty:test-jetty-webapp:10.0.0-SNAPSHOT'}'\n          introduces to cycle in the graph:\n           1: org.eclipse.jetty:test-jetty-webapp:10.0.0-SNAPSHOT\n           2: org.eclipse.jetty:jetty-maven-plugin:10.0.0-SNAPSHOT\n           3: org.eclipse.jetty:jetty-home:10.0.0-SNAPSHOT\n           4: org.eclipse.jetty:test-jetty-webapp:10.0.0-SNAPSHOT @\n\nSimply moving it to <pluginManagement> eliminates it from being involved in the reactor, but still allows it to be used from the command line at will.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493809424", "createdAt": "2020-09-23T18:41:32Z", "author": {"login": "joakime"}, "path": "tests/test-webapps/test-jetty-webapp/pom.xml", "diffHunk": "@@ -88,50 +86,55 @@\n           </archive>\n         </configuration>\n       </plugin>\n-      <plugin>\n-        <groupId>org.eclipse.jetty</groupId>\n-        <artifactId>jetty-maven-plugin</artifactId>\n-        <version>${project.version}</version>\n-        <dependencies>\n-          <dependency>\n-            <groupId>org.eclipse.jetty</groupId>\n-            <artifactId>jetty-client</artifactId>\n-            <version>${project.version}</version>\n-          </dependency>\n-          <dependency>\n-            <groupId>org.eclipse.jetty</groupId>\n-            <artifactId>jetty-servlets</artifactId>\n-            <version>${project.version}</version>\n-          </dependency>\n-        </dependencies>\n-        <configuration>\n-          <stopPort>8087</stopPort>\n-          <stopKey>foo</stopKey>\n-          <scan>1</scan>\n-          <systemProperties>\n-              <fooprop>222</fooprop>\n-          </systemProperties>\n-          <webApp>\n-            <contextPath>/test</contextPath>\n-            <tempDirectory>${project.build.directory}/work</tempDirectory>\n-          </webApp>\n-          <loginServices>\n-            <loginService implementation=\"org.eclipse.jetty.security.HashLoginService\">\n-              <name>Test Realm</name>\n-              <config>src/main/config/demo-base/etc/realm.properties</config>\n-            </loginService>\n-          </loginServices>\n-        </configuration>\n-      </plugin>\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-deploy-plugin</artifactId>\n         <configuration>\n-          <!-- must deploy: required for jetty-distribution -->\n+          <!-- DEMO Project, Must Deploy -->\n           <skip>false</skip>\n         </configuration>\n       </plugin>\n     </plugins>\n+    <pluginManagement>\n+      <plugins>\n+        <plugin>\n+          <groupId>org.eclipse.jetty</groupId>\n+          <artifactId>jetty-maven-plugin</artifactId>\n+          <version>${project.version}</version>\n+          <dependencies>\n+            <dependency>\n+              <groupId>org.eclipse.jetty</groupId>\n+              <artifactId>jetty-client</artifactId>\n+              <version>${project.version}</version>\n+            </dependency>\n+            <dependency>\n+              <groupId>org.eclipse.jetty</groupId>\n+              <artifactId>jetty-servlets</artifactId>\n+              <version>${project.version}</version>\n+            </dependency>\n+          </dependencies>\n+          <configuration>\n+            <stopPort>8087</stopPort>\n+            <stopKey>foo</stopKey>\n+            <scan>1</scan>\n+            <systemProperties>\n+              <fooprop>222</fooprop>\n+            </systemProperties>\n+            <webApp>\n+              <contextPath>/test</contextPath>\n+              <tempDirectory>${project.build.directory}/work</tempDirectory>\n+            </webApp>\n+            <loginServices>\n+              <loginService implementation=\"org.eclipse.jetty.security.HashLoginService\">\n+                <name>Test Realm</name>\n+                <config>src/main/config/demo-base/etc/realm.properties</config>\n+              </loginService>\n+            </loginServices>\n+          </configuration>\n+        </plugin>\n+\n+      </plugins>\n+    </pluginManagement>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDEwNA=="}, "originalCommit": {"oid": "5332f3f685ea86b0d4c398eab7b3e83f7b8a76f8"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDE2OTQwOnYy", "diffSide": "RIGHT", "path": "tests/test-webapps/test-jetty-webapp/src/main/config/modules/demo.d/demo-jetty-override-web.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzoxOTozOVrOHW4v_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo0NjoyNVrOHW8APQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDUxMQ==", "bodyText": "Use 4.0.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493760511", "createdAt": "2020-09-23T17:19:39Z", "author": {"login": "sbordet"}, "path": "tests/test-webapps/test-jetty-webapp/src/main/config/modules/demo.d/demo-jetty-override-web.xml", "diffHunk": "@@ -0,0 +1,64 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<web-app \n+   xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" \n+   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+   xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" \n+   version=\"3.1\"> ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5332f3f685ea86b0d4c398eab7b3e83f7b8a76f8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgxMjUzNg==", "bodyText": "Oddly, no other web descriptor in jetty-10.0.x uses the correct XML intro.\nFrom: https://javaee.github.io/servlet-spec/downloads/servlet-4.0/servlet-4_0_FINAL.pdf\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee webapp_4_0.xsd\"\nversion=\"4.0\">\nChanging this breaks things.\nLets work this out in a different PR.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493812536", "createdAt": "2020-09-23T18:45:00Z", "author": {"login": "joakime"}, "path": "tests/test-webapps/test-jetty-webapp/src/main/config/modules/demo.d/demo-jetty-override-web.xml", "diffHunk": "@@ -0,0 +1,64 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<web-app \n+   xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" \n+   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+   xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" \n+   version=\"3.1\"> ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDUxMQ=="}, "originalCommit": {"oid": "5332f3f685ea86b0d4c398eab7b3e83f7b8a76f8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgxMzgyMQ==", "bodyText": "Opened as Issue #5319", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493813821", "createdAt": "2020-09-23T18:46:25Z", "author": {"login": "joakime"}, "path": "tests/test-webapps/test-jetty-webapp/src/main/config/modules/demo.d/demo-jetty-override-web.xml", "diffHunk": "@@ -0,0 +1,64 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<web-app \n+   xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" \n+   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+   xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" \n+   version=\"3.1\"> ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDUxMQ=="}, "originalCommit": {"oid": "5332f3f685ea86b0d4c398eab7b3e83f7b8a76f8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDE3MjA2OnYy", "diffSide": "RIGHT", "path": "tests/test-webapps/test-jndi-webapp/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzoyMDoyMFrOHW4xpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzoyMDoyMFrOHW4xpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDkzNA==", "bodyText": "Remove <configuration> section.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493760934", "createdAt": "2020-09-23T17:20:20Z", "author": {"login": "sbordet"}, "path": "tests/test-webapps/test-jndi-webapp/pom.xml", "diffHunk": "@@ -18,8 +18,8 @@\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-deploy-plugin</artifactId>\n         <configuration>\n-          <!-- DO NOT DEPLOY (or Release) -->\n-          <skip>true</skip>\n+          <!-- DEMO Project, Must Deploy -->\n+          <skip>false</skip>\n         </configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5332f3f685ea86b0d4c398eab7b3e83f7b8a76f8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDE3NTI3OnYy", "diffSide": "RIGHT", "path": "tests/test-webapps/test-jndi-webapp/src/main/config/modules/demo.d/demo-jndi.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzoyMTowNVrOHW4zjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo1MzozMVrOHW8akQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MTQyMg==", "bodyText": "Must be configure_10_0.dtd.", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493761422", "createdAt": "2020-09-23T17:21:05Z", "author": {"login": "sbordet"}, "path": "tests/test-webapps/test-jndi-webapp/src/main/config/modules/demo.d/demo-jndi.xml", "diffHunk": "@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\"?><!DOCTYPE Configure PUBLIC \"-//Jetty//Configure//EN\" \"https://www.eclipse.org/jetty/configure_9_3.dtd\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5332f3f685ea86b0d4c398eab7b3e83f7b8a76f8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyMDU2MQ==", "bodyText": "Fixed in 1feb60b (for many files in /demos/)", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493820561", "createdAt": "2020-09-23T18:53:31Z", "author": {"login": "joakime"}, "path": "tests/test-webapps/test-jndi-webapp/src/main/config/modules/demo.d/demo-jndi.xml", "diffHunk": "@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\"?><!DOCTYPE Configure PUBLIC \"-//Jetty//Configure//EN\" \"https://www.eclipse.org/jetty/configure_9_3.dtd\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MTQyMg=="}, "originalCommit": {"oid": "5332f3f685ea86b0d4c398eab7b3e83f7b8a76f8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDE3NjkzOnYy", "diffSide": "RIGHT", "path": "tests/test-webapps/test-servlet-spec/test-spec-webapp/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzoyMTozMlrOHW40oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo1MzozOFrOHW8bDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MTY5Ng==", "bodyText": "Remove <configuration>", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493761696", "createdAt": "2020-09-23T17:21:32Z", "author": {"login": "sbordet"}, "path": "tests/test-webapps/test-servlet-spec/test-spec-webapp/pom.xml", "diffHunk": "@@ -18,7 +18,8 @@\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-deploy-plugin</artifactId>\n         <configuration>\n-          <skip>true</skip>\n+          <!-- DEMO Project, Must Deploy -->\n+          <skip>false</skip>\n         </configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5332f3f685ea86b0d4c398eab7b3e83f7b8a76f8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyMDY4NA==", "bodyText": "Fixed", "url": "https://github.com/eclipse/jetty.project/pull/5292#discussion_r493820684", "createdAt": "2020-09-23T18:53:38Z", "author": {"login": "joakime"}, "path": "tests/test-webapps/test-servlet-spec/test-spec-webapp/pom.xml", "diffHunk": "@@ -18,7 +18,8 @@\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-deploy-plugin</artifactId>\n         <configuration>\n-          <skip>true</skip>\n+          <!-- DEMO Project, Must Deploy -->\n+          <skip>false</skip>\n         </configuration>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MTY5Ng=="}, "originalCommit": {"oid": "5332f3f685ea86b0d4c398eab7b3e83f7b8a76f8"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2395, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}