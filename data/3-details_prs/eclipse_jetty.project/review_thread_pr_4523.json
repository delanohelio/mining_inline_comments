{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MzYyMjY3", "number": 4523, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTozODozNVrODbgdXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDoyMzoxOVrODbhVig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTY5OTQ4OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTozODozNVrOFjB9BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMToxNToyNFrOFjE1EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NjQ4NQ==", "bodyText": "How can this happen?  Is this a problem with Core?", "url": "https://github.com/eclipse/jetty.project/pull/4523#discussion_r372276485", "createdAt": "2020-01-29T09:38:35Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandler.java", "diffHunk": "@@ -278,24 +282,41 @@ public void onFrame(Frame frame, Callback callback)\n             dataType = OpCode.UNDEFINED;\n     }\n \n+    public void onClose(Frame frame, Callback callback)\n+    {\n+        notifyOnClose(CloseStatus.getCloseStatus(frame), callback);\n+    }\n+\n     @Override\n     public void onClosed(CloseStatus closeStatus, Callback callback)\n     {\n+        notifyOnClose(closeStatus, callback);\n+        container.notifySessionListeners((listener) -> listener.onJavaxWebSocketSessionClosed(session));\n+    }\n+\n+    private void notifyOnClose(CloseStatus closeStatus, Callback callback)\n+    {\n+        // Make sure onClose is only notified once.\n+        if (!closeNotified.compareAndSet(false, true))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8638fb2cc3ed80c7410249a31ad253d67479a458"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyMzYwMQ==", "bodyText": "No the websocket-core onClosed event means the websocket is fully closed. @sbordet  wanted the ability to send alternate close responses from the API onClose events, so now the onClose event at the API level can be triggered in two ways:\nReceiving a close frame (in which case the websocket is still out open to send a custom close response).\nOr by the core onClosed event (if we never received the close frame but still get closed because of an error or something).\nSo we call notifyOnClose from both these places but we only want to actually call the API onClose event once.", "url": "https://github.com/eclipse/jetty.project/pull/4523#discussion_r372323601", "createdAt": "2020-01-29T11:15:24Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandler.java", "diffHunk": "@@ -278,24 +282,41 @@ public void onFrame(Frame frame, Callback callback)\n             dataType = OpCode.UNDEFINED;\n     }\n \n+    public void onClose(Frame frame, Callback callback)\n+    {\n+        notifyOnClose(CloseStatus.getCloseStatus(frame), callback);\n+    }\n+\n     @Override\n     public void onClosed(CloseStatus closeStatus, Callback callback)\n     {\n+        notifyOnClose(closeStatus, callback);\n+        container.notifySessionListeners((listener) -> listener.onJavaxWebSocketSessionClosed(session));\n+    }\n+\n+    private void notifyOnClose(CloseStatus closeStatus, Callback callback)\n+    {\n+        // Make sure onClose is only notified once.\n+        if (!closeNotified.compareAndSet(false, true))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NjQ4NQ=="}, "originalCommit": {"oid": "8638fb2cc3ed80c7410249a31ad253d67479a458"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTcwODAwOnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTo0MToxNlrOFjCCZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMToxNjozM1rOFjE27A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3Nzg2MA==", "bodyText": "why public?  surely protected?", "url": "https://github.com/eclipse/jetty.project/pull/4523#discussion_r372277860", "createdAt": "2020-01-29T09:41:16Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandler.java", "diffHunk": "@@ -278,24 +282,41 @@ public void onFrame(Frame frame, Callback callback)\n             dataType = OpCode.UNDEFINED;\n     }\n \n+    public void onClose(Frame frame, Callback callback)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8638fb2cc3ed80c7410249a31ad253d67479a458"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyNDA3Ng==", "bodyText": "Yes I guess this could be protected, all the other methods onText, onPong, etc.. are public, these methods all already existed. Should I change them all to protected?", "url": "https://github.com/eclipse/jetty.project/pull/4523#discussion_r372324076", "createdAt": "2020-01-29T11:16:33Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandler.java", "diffHunk": "@@ -278,24 +282,41 @@ public void onFrame(Frame frame, Callback callback)\n             dataType = OpCode.UNDEFINED;\n     }\n \n+    public void onClose(Frame frame, Callback callback)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3Nzg2MA=="}, "originalCommit": {"oid": "8638fb2cc3ed80c7410249a31ad253d67479a458"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTgzMTU5OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/FutureCallback.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDoxOToyMlrOFjDPKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjoyOToxNVrOFjGtKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NzUxMg==", "bodyText": "You don't want to wrap a RuntimeException inside another... the old code was correct.", "url": "https://github.com/eclipse/jetty.project/pull/4523#discussion_r372297512", "createdAt": "2020-01-29T10:19:22Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/FutureCallback.java", "diffHunk": "@@ -163,9 +163,7 @@ public void block(long timeout, TimeUnit unit) throws IOException\n         {\n             Throwable cause = e.getCause();\n             if (cause instanceof RuntimeException)\n-                throw (RuntimeException)cause;\n-            else if (cause instanceof IOException)\n-                throw (IOException)cause;\n+                throw new RuntimeException(cause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8638fb2cc3ed80c7410249a31ad253d67479a458"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyNDI1MA==", "bodyText": "What about rewrapping of the IOException, I was getting stack traces that were being thrown and they didn't trace back through theFutureCallback.block() line and just some seemingly unrelated code, so I thought that was a bit weird and decided to wrap them instead so you could see the block call in the stack trace. I can revert this, wasn't sure what the correct behaviour was.", "url": "https://github.com/eclipse/jetty.project/pull/4523#discussion_r372324250", "createdAt": "2020-01-29T11:16:57Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/FutureCallback.java", "diffHunk": "@@ -163,9 +163,7 @@ public void block(long timeout, TimeUnit unit) throws IOException\n         {\n             Throwable cause = e.getCause();\n             if (cause instanceof RuntimeException)\n-                throw (RuntimeException)cause;\n-            else if (cause instanceof IOException)\n-                throw (IOException)cause;\n+                throw new RuntimeException(cause);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NzUxMg=="}, "originalCommit": {"oid": "8638fb2cc3ed80c7410249a31ad253d67479a458"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM1NDM0Ng==", "bodyText": "I see now, leave this rewrapping then, so applications will have a nicer stack trace that get lost because we unwrap ExecutionException.", "url": "https://github.com/eclipse/jetty.project/pull/4523#discussion_r372354346", "createdAt": "2020-01-29T12:29:15Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/FutureCallback.java", "diffHunk": "@@ -163,9 +163,7 @@ public void block(long timeout, TimeUnit unit) throws IOException\n         {\n             Throwable cause = e.getCause();\n             if (cause instanceof RuntimeException)\n-                throw (RuntimeException)cause;\n-            else if (cause instanceof IOException)\n-                throw (IOException)cause;\n+                throw new RuntimeException(cause);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NzUxMg=="}, "originalCommit": {"oid": "8638fb2cc3ed80c7410249a31ad253d67479a458"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTgzOTg2OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDoyMjoxMVrOFjDULA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMToxNzoxNFrOFjE4Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5ODc5Ng==", "bodyText": "notifyOnClose() has a guard to avoid notifying more than once, but then container.notifySessionListeners() will be called more than once, so either notifyOnClose() returns a boolean or you need to be tighter with the once-only semantic.", "url": "https://github.com/eclipse/jetty.project/pull/4523#discussion_r372298796", "createdAt": "2020-01-29T10:22:11Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandler.java", "diffHunk": "@@ -278,24 +282,41 @@ public void onFrame(Frame frame, Callback callback)\n             dataType = OpCode.UNDEFINED;\n     }\n \n+    public void onClose(Frame frame, Callback callback)\n+    {\n+        notifyOnClose(CloseStatus.getCloseStatus(frame), callback);\n+    }\n+\n     @Override\n     public void onClosed(CloseStatus closeStatus, Callback callback)\n     {\n+        notifyOnClose(closeStatus, callback);\n+        container.notifySessionListeners((listener) -> listener.onJavaxWebSocketSessionClosed(session));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8638fb2cc3ed80c7410249a31ad253d67479a458"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyNDM3NQ==", "bodyText": "This method is for the websocket-core onClosed event which is only ever called once. We also call notifyOnClose() when we receive a close frame which is why it needs the guard and container.notifySessionListeners() does not.", "url": "https://github.com/eclipse/jetty.project/pull/4523#discussion_r372324375", "createdAt": "2020-01-29T11:17:14Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandler.java", "diffHunk": "@@ -278,24 +282,41 @@ public void onFrame(Frame frame, Callback callback)\n             dataType = OpCode.UNDEFINED;\n     }\n \n+    public void onClose(Frame frame, Callback callback)\n+    {\n+        notifyOnClose(CloseStatus.getCloseStatus(frame), callback);\n+    }\n+\n     @Override\n     public void onClosed(CloseStatus closeStatus, Callback callback)\n     {\n+        notifyOnClose(closeStatus, callback);\n+        container.notifySessionListeners((listener) -> listener.onJavaxWebSocketSessionClosed(session));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5ODc5Ng=="}, "originalCommit": {"oid": "8638fb2cc3ed80c7410249a31ad253d67479a458"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTg0MzMwOnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-jetty-common/src/main/java/org/eclipse/jetty/websocket/common/JettyWebSocketFrameHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDoyMzoyMFrOFjDWaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDoyMzoyMFrOFjDWaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5OTM2OA==", "bodyText": "Ditto above.", "url": "https://github.com/eclipse/jetty.project/pull/4523#discussion_r372299368", "createdAt": "2020-01-29T10:23:20Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-jetty-common/src/main/java/org/eclipse/jetty/websocket/common/JettyWebSocketFrameHandler.java", "diffHunk": "@@ -287,6 +295,19 @@ public void onClosed(CloseStatus closeStatus, Callback callback)\n             state = SuspendState.CLOSED;\n         }\n \n+        notifyOnClose(closeStatus, callback);\n+        container.notifySessionListeners((listener) -> listener.onWebSocketSessionClosed(session));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8638fb2cc3ed80c7410249a31ad253d67479a458"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2778, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}