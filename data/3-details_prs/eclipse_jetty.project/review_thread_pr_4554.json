{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxOTYzOTU2", "number": 4554, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMToxMjowOVrODd_Tdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxMTozMzoyNVrODgJ8kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzcyNDcwOnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMToxMjoxMFrOFm535A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNToxMjo1MVrOFnAOJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzODQwNA==", "bodyText": "If the above CAS fails, you're going to return an uncompleted callback.", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376338404", "createdAt": "2020-02-07T11:12:10Z", "author": {"login": "lorban"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -675,26 +674,54 @@ public boolean close(int error, String reason, Callback callback)\n         while (true)\n         {\n             CloseState current = closed.get();\n-            switch (current)\n+            if (current == CloseState.NOT_CLOSED)\n             {\n-                case NOT_CLOSED:\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n                 {\n-                    if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n-                    {\n-                        closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n-                        control(null, callback, closeFrame);\n-                        return true;\n-                    }\n-                    break;\n+                    if (LOG.isDebugEnabled())\n+                        LOG.debug(\"Closing {}/{}\", error, reason);\n+                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n+                    control(null, callback, closeFrame);\n+                    return true;\n                 }\n-                default:\n+            }\n+            else\n+            {\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n+                callback.succeeded();\n+                return false;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> shutdown()\n+    {\n+        while (true)\n+        {\n+            CloseState current = closed.get();\n+            if (current == CloseState.NOT_CLOSED)\n+            {\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n                 {\n                     if (LOG.isDebugEnabled())\n-                        LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n-                    callback.succeeded();\n-                    return false;\n+                        LOG.debug(\"Shutting down {}\", this);\n+                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, ErrorCode.NO_ERROR.code, \"shutdown\");\n+                    closeCallback = new Callback.Completable();\n+                    // Only send the close frame when we can flip Hi and Lo = 0, see onStreamClosed().\n+                    if (streamCount.compareAndSet(0, 1, 0, 0))\n+                        control(null, closeCallback, closeFrame);\n+                    return closeCallback;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ0MjQwNQ==", "bodyText": "That is correct. Other threads will complete the callback.", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376442405", "createdAt": "2020-02-07T15:12:51Z", "author": {"login": "sbordet"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -675,26 +674,54 @@ public boolean close(int error, String reason, Callback callback)\n         while (true)\n         {\n             CloseState current = closed.get();\n-            switch (current)\n+            if (current == CloseState.NOT_CLOSED)\n             {\n-                case NOT_CLOSED:\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n                 {\n-                    if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n-                    {\n-                        closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n-                        control(null, callback, closeFrame);\n-                        return true;\n-                    }\n-                    break;\n+                    if (LOG.isDebugEnabled())\n+                        LOG.debug(\"Closing {}/{}\", error, reason);\n+                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n+                    control(null, callback, closeFrame);\n+                    return true;\n                 }\n-                default:\n+            }\n+            else\n+            {\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n+                callback.succeeded();\n+                return false;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> shutdown()\n+    {\n+        while (true)\n+        {\n+            CloseState current = closed.get();\n+            if (current == CloseState.NOT_CLOSED)\n+            {\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n                 {\n                     if (LOG.isDebugEnabled())\n-                        LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n-                    callback.succeeded();\n-                    return false;\n+                        LOG.debug(\"Shutting down {}\", this);\n+                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, ErrorCode.NO_ERROR.code, \"shutdown\");\n+                    closeCallback = new Callback.Completable();\n+                    // Only send the close frame when we can flip Hi and Lo = 0, see onStreamClosed().\n+                    if (streamCount.compareAndSet(0, 1, 0, 0))\n+                        control(null, closeCallback, closeFrame);\n+                    return closeCallback;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzODQwNA=="}, "originalCommit": {"oid": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzc1OTkxOnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/AbstractHTTP2ServerConnectionFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMToyNzowMFrOFm6NGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNToxMzo1OFrOFnAQrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM0MzgzMg==", "bodyText": "Implementors of ISession (HTTP2Session?) don't override equals/hashcode. I'm wary of the side-effects this could have.", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376343832", "createdAt": "2020-02-07T11:27:00Z", "author": {"login": "lorban"}, "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/AbstractHTTP2ServerConnectionFactory.java", "diffHunk": "@@ -296,22 +300,25 @@ protected ServerParser newServerParser(Connector connector, ServerParser.Listene\n     }\n \n     @ManagedObject(\"The container of HTTP/2 sessions\")\n-    public static class HTTP2SessionContainer implements Connection.Listener, Dumpable\n+    public static class HTTP2SessionContainer implements Connection.Listener, Graceful, Dumpable\n     {\n-        private final Set<Session> sessions = ConcurrentHashMap.newKeySet();\n+        private final Set<ISession> sessions = ConcurrentHashMap.newKeySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1OTE1NA==", "bodyText": "As we discussed, if you protected this sessions collection with a ReentrantReadWriteLock using the read lock to modify the collection and the write lock to shut it down, you could easily guarantee that each session's shutdown method would only ever be called once, and be done with that AtomicBiInteger logic.\nThis would make this code a ton simpler to maintain in the long run.", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376359154", "createdAt": "2020-02-07T12:09:41Z", "author": {"login": "lorban"}, "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/AbstractHTTP2ServerConnectionFactory.java", "diffHunk": "@@ -296,22 +300,25 @@ protected ServerParser newServerParser(Connector connector, ServerParser.Listene\n     }\n \n     @ManagedObject(\"The container of HTTP/2 sessions\")\n-    public static class HTTP2SessionContainer implements Connection.Listener, Dumpable\n+    public static class HTTP2SessionContainer implements Connection.Listener, Graceful, Dumpable\n     {\n-        private final Set<Session> sessions = ConcurrentHashMap.newKeySet();\n+        private final Set<ISession> sessions = ConcurrentHashMap.newKeySet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM0MzgzMg=="}, "originalCommit": {"oid": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ0MzA1NQ==", "bodyText": "Not implementing hashCode() and equals() is by design, I really want session objects to be unique. I'll give rwlock a try.", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376443055", "createdAt": "2020-02-07T15:13:58Z", "author": {"login": "sbordet"}, "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/AbstractHTTP2ServerConnectionFactory.java", "diffHunk": "@@ -296,22 +300,25 @@ protected ServerParser newServerParser(Connector connector, ServerParser.Listene\n     }\n \n     @ManagedObject(\"The container of HTTP/2 sessions\")\n-    public static class HTTP2SessionContainer implements Connection.Listener, Dumpable\n+    public static class HTTP2SessionContainer implements Connection.Listener, Graceful, Dumpable\n     {\n-        private final Set<Session> sessions = ConcurrentHashMap.newKeySet();\n+        private final Set<ISession> sessions = ConcurrentHashMap.newKeySet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM0MzgzMg=="}, "originalCommit": {"oid": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzgwMTIyOnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMTo0NDoxMFrOFm6lKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjozNDowNlrOFnC-cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM0OTk5NA==", "bodyText": "The Lo counter might be > 0 when you reach this line, couldn't it?", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376349994", "createdAt": "2020-02-07T11:44:10Z", "author": {"login": "lorban"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -1041,10 +1068,18 @@ public void onFrame(Frame frame)\n \n     protected void onStreamOpened(IStream stream)\n     {\n+        streamCount.addAndGetLo(1);\n     }\n \n     protected void onStreamClosed(IStream stream)\n     {\n+        if (streamCount.addAndGetLo(-1) == 0)\n+        {\n+            Callback.Completable callback = closeCallback;\n+            // Only send the close frame if we can flip Hi, see shutdown().\n+            if (callback != null && streamCount.compareAndSetHi(0, 1))\n+                control(null, callback, closeFrame);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4NzUzNw==", "bodyText": "Good point!", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376487537", "createdAt": "2020-02-07T16:34:06Z", "author": {"login": "sbordet"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -1041,10 +1068,18 @@ public void onFrame(Frame frame)\n \n     protected void onStreamOpened(IStream stream)\n     {\n+        streamCount.addAndGetLo(1);\n     }\n \n     protected void onStreamClosed(IStream stream)\n     {\n+        if (streamCount.addAndGetLo(-1) == 0)\n+        {\n+            Callback.Completable callback = closeCallback;\n+            // Only send the close frame if we can flip Hi, see shutdown().\n+            if (callback != null && streamCount.compareAndSetHi(0, 1))\n+                control(null, callback, closeFrame);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM0OTk5NA=="}, "originalCommit": {"oid": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzgxNTgyOnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMTo1MDoxMVrOFm6txw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNToxNToxOVrOFnATgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1MjE5OQ==", "bodyText": "This means you may return a CompletableFuture that doesn't block until shutdown is over. Is that desirable?", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376352199", "createdAt": "2020-02-07T11:50:11Z", "author": {"login": "lorban"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -675,26 +674,54 @@ public boolean close(int error, String reason, Callback callback)\n         while (true)\n         {\n             CloseState current = closed.get();\n-            switch (current)\n+            if (current == CloseState.NOT_CLOSED)\n             {\n-                case NOT_CLOSED:\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n                 {\n-                    if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n-                    {\n-                        closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n-                        control(null, callback, closeFrame);\n-                        return true;\n-                    }\n-                    break;\n+                    if (LOG.isDebugEnabled())\n+                        LOG.debug(\"Closing {}/{}\", error, reason);\n+                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n+                    control(null, callback, closeFrame);\n+                    return true;\n                 }\n-                default:\n+            }\n+            else\n+            {\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n+                callback.succeeded();\n+                return false;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> shutdown()\n+    {\n+        while (true)\n+        {\n+            CloseState current = closed.get();\n+            if (current == CloseState.NOT_CLOSED)\n+            {\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n                 {\n                     if (LOG.isDebugEnabled())\n-                        LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n-                    callback.succeeded();\n-                    return false;\n+                        LOG.debug(\"Shutting down {}\", this);\n+                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, ErrorCode.NO_ERROR.code, \"shutdown\");\n+                    closeCallback = new Callback.Completable();\n+                    // Only send the close frame when we can flip Hi and Lo = 0, see onStreamClosed().\n+                    if (streamCount.compareAndSet(0, 1, 0, 0))\n+                        control(null, closeCallback, closeFrame);\n+                    return closeCallback;\n                 }\n             }\n+            else\n+            {\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Ignoring shutdown, already closed\");\n+                Callback.Completable result = closeCallback;\n+                return result != null ? result : CompletableFuture.completedFuture(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ0Mzc3OA==", "bodyText": "It returns a CompletableFuture. Whether the caller wants to block on it, or attach a timeout, or attach some other callback it's in the hands of the caller.", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376443778", "createdAt": "2020-02-07T15:15:19Z", "author": {"login": "sbordet"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -675,26 +674,54 @@ public boolean close(int error, String reason, Callback callback)\n         while (true)\n         {\n             CloseState current = closed.get();\n-            switch (current)\n+            if (current == CloseState.NOT_CLOSED)\n             {\n-                case NOT_CLOSED:\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n                 {\n-                    if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n-                    {\n-                        closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n-                        control(null, callback, closeFrame);\n-                        return true;\n-                    }\n-                    break;\n+                    if (LOG.isDebugEnabled())\n+                        LOG.debug(\"Closing {}/{}\", error, reason);\n+                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n+                    control(null, callback, closeFrame);\n+                    return true;\n                 }\n-                default:\n+            }\n+            else\n+            {\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n+                callback.succeeded();\n+                return false;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> shutdown()\n+    {\n+        while (true)\n+        {\n+            CloseState current = closed.get();\n+            if (current == CloseState.NOT_CLOSED)\n+            {\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n                 {\n                     if (LOG.isDebugEnabled())\n-                        LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n-                    callback.succeeded();\n-                    return false;\n+                        LOG.debug(\"Shutting down {}\", this);\n+                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, ErrorCode.NO_ERROR.code, \"shutdown\");\n+                    closeCallback = new Callback.Completable();\n+                    // Only send the close frame when we can flip Hi and Lo = 0, see onStreamClosed().\n+                    if (streamCount.compareAndSet(0, 1, 0, 0))\n+                        control(null, closeCallback, closeFrame);\n+                    return closeCallback;\n                 }\n             }\n+            else\n+            {\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Ignoring shutdown, already closed\");\n+                Callback.Completable result = closeCallback;\n+                return result != null ? result : CompletableFuture.completedFuture(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1MjE5OQ=="}, "originalCommit": {"oid": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzgzMDIwOnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/AbstractHTTP2ServerConnectionFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMTo1NjoxOVrOFm62VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNToyNDoxNlrOFnAoZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NDM4OA==", "bodyText": "Don't you have to also call LifeCycle.stop on the session when isShutdown is true?", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376354388", "createdAt": "2020-02-07T11:56:19Z", "author": {"login": "lorban"}, "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/AbstractHTTP2ServerConnectionFactory.java", "diffHunk": "@@ -296,22 +300,25 @@ protected ServerParser newServerParser(Connector connector, ServerParser.Listene\n     }\n \n     @ManagedObject(\"The container of HTTP/2 sessions\")\n-    public static class HTTP2SessionContainer implements Connection.Listener, Dumpable\n+    public static class HTTP2SessionContainer implements Connection.Listener, Graceful, Dumpable\n     {\n-        private final Set<Session> sessions = ConcurrentHashMap.newKeySet();\n+        private final Set<ISession> sessions = ConcurrentHashMap.newKeySet();\n+        private final AtomicReference<CompletableFuture<Void>> shutdown = new AtomicReference<>();\n \n         @Override\n         public void onOpened(Connection connection)\n         {\n-            Session session = ((HTTP2Connection)connection).getSession();\n+            ISession session = ((HTTP2Connection)connection).getSession();\n             sessions.add(session);\n             LifeCycle.start(session);\n+            if (isShutdown())\n+                shutdown(session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ0OTEyNg==", "bodyText": "No, as shutdown will initiate the close, and eventually the connection will be closed, calling onClose() which would remove the session and stop it.", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376449126", "createdAt": "2020-02-07T15:24:16Z", "author": {"login": "sbordet"}, "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/AbstractHTTP2ServerConnectionFactory.java", "diffHunk": "@@ -296,22 +300,25 @@ protected ServerParser newServerParser(Connector connector, ServerParser.Listene\n     }\n \n     @ManagedObject(\"The container of HTTP/2 sessions\")\n-    public static class HTTP2SessionContainer implements Connection.Listener, Dumpable\n+    public static class HTTP2SessionContainer implements Connection.Listener, Graceful, Dumpable\n     {\n-        private final Set<Session> sessions = ConcurrentHashMap.newKeySet();\n+        private final Set<ISession> sessions = ConcurrentHashMap.newKeySet();\n+        private final AtomicReference<CompletableFuture<Void>> shutdown = new AtomicReference<>();\n \n         @Override\n         public void onOpened(Connection connection)\n         {\n-            Session session = ((HTTP2Connection)connection).getSession();\n+            ISession session = ((HTTP2Connection)connection).getSession();\n             sessions.add(session);\n             LifeCycle.start(session);\n+            if (isShutdown())\n+                shutdown(session);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NDM4OA=="}, "originalCommit": {"oid": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzg1NTAyOnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjowNzoxMVrOFm7FjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjowNzoxMVrOFm7FjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1ODI4NQ==", "bodyText": "I would clearly document that this shutdown method has to be idempotent as HTTP2SessionContainer might call it twice, and explain the circumstances under which it can be called twice.", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376358285", "createdAt": "2020-02-07T12:07:11Z", "author": {"login": "lorban"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -675,26 +674,54 @@ public boolean close(int error, String reason, Callback callback)\n         while (true)\n         {\n             CloseState current = closed.get();\n-            switch (current)\n+            if (current == CloseState.NOT_CLOSED)\n             {\n-                case NOT_CLOSED:\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n                 {\n-                    if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n-                    {\n-                        closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n-                        control(null, callback, closeFrame);\n-                        return true;\n-                    }\n-                    break;\n+                    if (LOG.isDebugEnabled())\n+                        LOG.debug(\"Closing {}/{}\", error, reason);\n+                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n+                    control(null, callback, closeFrame);\n+                    return true;\n                 }\n-                default:\n+            }\n+            else\n+            {\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n+                callback.succeeded();\n+                return false;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> shutdown()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDQzNTg0OnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxMToyMjo1OVrOFqOuPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDoyNzowMVrOFz9roQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNTcyNQ==", "bodyText": "Can't the whole while (true) loop be replaces with:\n    if (closed.compareAndSet(CloseState.NOT_CLOSED, CloseState.REMOTELY_CLOSED)\n    {\n        closeFrame = frame;\n        notifyClose(this, frame, new DisconnectCallback());\n        return;\n    }\n    if (LOG.isDebugEnable())\n        LOG.debug(\"Ignored {}, alread closed\", frame);\n    return\nThe only time it loops is if the CAS fails and then it is going to return anyway!", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r379825725", "createdAt": "2020-02-15T11:22:59Z", "author": {"login": "gregw"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -439,27 +442,23 @@ public void onGoAway(final GoAwayFrame frame)\n         while (true)\n         {\n             CloseState current = closed.get();\n-            switch (current)\n+            if (current == CloseState.NOT_CLOSED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1a669e65f5b97d89883b05eb7d649ae7275081"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjI4OQ==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r390032289", "createdAt": "2020-03-10T00:27:01Z", "author": {"login": "sbordet"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -439,27 +442,23 @@ public void onGoAway(final GoAwayFrame frame)\n         while (true)\n         {\n             CloseState current = closed.get();\n-            switch (current)\n+            if (current == CloseState.NOT_CLOSED)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNTcyNQ=="}, "originalCommit": {"oid": "8b1a669e65f5b97d89883b05eb7d649ae7275081"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDQzNjA0OnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxMToyMzoyMFrOFqOuWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDoyNzoxMFrOFz9rwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNTc1Mg==", "bodyText": "ditto loop not needed!", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r379825752", "createdAt": "2020-02-15T11:23:20Z", "author": {"login": "gregw"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -675,26 +674,56 @@ public boolean close(int error, String reason, Callback callback)\n         while (true)\n         {\n             CloseState current = closed.get();\n-            switch (current)\n+            if (current == CloseState.NOT_CLOSED)\n             {\n-                case NOT_CLOSED:\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1a669e65f5b97d89883b05eb7d649ae7275081"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjMyMg==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r390032322", "createdAt": "2020-03-10T00:27:10Z", "author": {"login": "sbordet"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -675,26 +674,56 @@ public boolean close(int error, String reason, Callback callback)\n         while (true)\n         {\n             CloseState current = closed.get();\n-            switch (current)\n+            if (current == CloseState.NOT_CLOSED)\n             {\n-                case NOT_CLOSED:\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNTc1Mg=="}, "originalCommit": {"oid": "8b1a669e65f5b97d89883b05eb7d649ae7275081"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDQzNjI3OnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxMToyMzo0OVrOFqOudA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDoyNzoxNlrOFz9r1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNTc4MA==", "bodyText": "ditto loop not needed", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r379825780", "createdAt": "2020-02-15T11:23:49Z", "author": {"login": "gregw"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -675,26 +674,56 @@ public boolean close(int error, String reason, Callback callback)\n         while (true)\n         {\n             CloseState current = closed.get();\n-            switch (current)\n+            if (current == CloseState.NOT_CLOSED)\n             {\n-                case NOT_CLOSED:\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n                 {\n-                    if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n-                    {\n-                        closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n-                        control(null, callback, closeFrame);\n-                        return true;\n-                    }\n-                    break;\n+                    if (LOG.isDebugEnabled())\n+                        LOG.debug(\"Closing {}/{}\", error, reason);\n+                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n+                    control(null, callback, closeFrame);\n+                    return true;\n                 }\n-                default:\n+            }\n+            else\n+            {\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n+                callback.succeeded();\n+                return false;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> shutdown()\n+    {\n+        while (true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1a669e65f5b97d89883b05eb7d649ae7275081"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjM0MA==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r390032340", "createdAt": "2020-03-10T00:27:16Z", "author": {"login": "sbordet"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -675,26 +674,56 @@ public boolean close(int error, String reason, Callback callback)\n         while (true)\n         {\n             CloseState current = closed.get();\n-            switch (current)\n+            if (current == CloseState.NOT_CLOSED)\n             {\n-                case NOT_CLOSED:\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n                 {\n-                    if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n-                    {\n-                        closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n-                        control(null, callback, closeFrame);\n-                        return true;\n-                    }\n-                    break;\n+                    if (LOG.isDebugEnabled())\n+                        LOG.debug(\"Closing {}/{}\", error, reason);\n+                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n+                    control(null, callback, closeFrame);\n+                    return true;\n                 }\n-                default:\n+            }\n+            else\n+            {\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n+                callback.succeeded();\n+                return false;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> shutdown()\n+    {\n+        while (true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNTc4MA=="}, "originalCommit": {"oid": "8b1a669e65f5b97d89883b05eb7d649ae7275081"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDQzOTg2OnYy", "diffSide": "RIGHT", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxMTozMzoyNVrOFqOwOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDoyODowMlrOFz9seQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNjIzNA==", "bodyText": "I don't like having two CaS operations serially.  This one should be a loop something like:\nCallback callback;\nwhile(true)\n{\n    long count = streamCount.get();\n    int streams = AtomicBiInteger.getLo(count) - 1;\n    int close = AtomicBiInteger.getHi(count);\n    callback =   (streams == 0 && close == 1) ? closeCallback : null;\n    if (streamCount.compareAndSet(count, 0, streams))\n        break;\n}\ncontrol(null, callback, closeFrame);", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r379826234", "createdAt": "2020-02-15T11:33:25Z", "author": {"login": "gregw"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -1041,10 +1070,18 @@ public void onFrame(Frame frame)\n \n     protected void onStreamOpened(IStream stream)\n     {\n+        streamCount.addAndGetLo(1);\n     }\n \n     protected void onStreamClosed(IStream stream)\n     {\n+        if (streamCount.addAndGetLo(-1) == 0)\n+        {\n+            Callback.Completable callback = closeCallback;\n+            // Only send the close frame if we can flip Hi, see shutdown().\n+            if (callback != null && streamCount.compareAndSet(0, 1, 0, 0))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1a669e65f5b97d89883b05eb7d649ae7275081"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjUwNQ==", "bodyText": "Done, actually in a different way because the snippet above is wrong, but I implemented a single CAS.", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r390032505", "createdAt": "2020-03-10T00:28:02Z", "author": {"login": "sbordet"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -1041,10 +1070,18 @@ public void onFrame(Frame frame)\n \n     protected void onStreamOpened(IStream stream)\n     {\n+        streamCount.addAndGetLo(1);\n     }\n \n     protected void onStreamClosed(IStream stream)\n     {\n+        if (streamCount.addAndGetLo(-1) == 0)\n+        {\n+            Callback.Completable callback = closeCallback;\n+            // Only send the close frame if we can flip Hi, see shutdown().\n+            if (callback != null && streamCount.compareAndSet(0, 1, 0, 0))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNjIzNA=="}, "originalCommit": {"oid": "8b1a669e65f5b97d89883b05eb7d649ae7275081"}, "originalPosition": 156}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2803, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}