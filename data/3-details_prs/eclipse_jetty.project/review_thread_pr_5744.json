{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMzQxMDIy", "number": 5744, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzo0MTo0M1rOE_RDjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoyMTo1NlrOE_nbzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Nzc1MTgwOnYy", "diffSide": "RIGHT", "path": "jetty-ant/src/main/java/org/eclipse/jetty/ant/ServerProxyImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzo0MTo0M1rOH84apA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzoyMDozOFrOH9NaTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYwMDkzMg==", "bodyText": "Don't like this. File names are unique by definition, so there is no risk of duplicates. I would not add additional randomness caused by Set. If I really don't care, I'd use Collection -- the Set is supposed to be immutable anyway, right?", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533600932", "createdAt": "2020-12-01T17:41:43Z", "author": {"login": "sbordet"}, "path": "jetty-ant/src/main/java/org/eclipse/jetty/ant/ServerProxyImpl.java", "diffHunk": "@@ -135,7 +136,7 @@ public WebAppScannerListener(AntWebAppContext awc)\n         }\n \n         @Override\n-        public void filesChanged(List<String> changedFileNames)\n+        public void filesChanged(Set<String> changedFileNames)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk0NDkwOA==", "bodyText": "Not sure I understand your point. If it's a List then by definition I can have duplicates in a List, but I can't in a Set. Plus, you can't rely on ordering as it depends on the filesystem in what order scanned directories are visited, so List is a furphy.", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533944908", "createdAt": "2020-12-02T07:20:38Z", "author": {"login": "janbartel"}, "path": "jetty-ant/src/main/java/org/eclipse/jetty/ant/ServerProxyImpl.java", "diffHunk": "@@ -135,7 +136,7 @@ public WebAppScannerListener(AntWebAppContext awc)\n         }\n \n         @Override\n-        public void filesChanged(List<String> changedFileNames)\n+        public void filesChanged(Set<String> changedFileNames)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYwMDkzMg=="}, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Nzc2MzYzOnYy", "diffSide": "LEFT", "path": "jetty-deploy/src/main/java/org/eclipse/jetty/deploy/providers/ScanningAppProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzo0NDozM1rOH84h9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzowNTowM1rOH9NBUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYwMjgwNA==", "bodyText": "Scanner.setRecursive() was deprecated, but there is no Javadoc about why.\nThis is the only usage of ScanningAppProvider._recursive which then should also be deprecated and removed?", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533602804", "createdAt": "2020-12-01T17:44:33Z", "author": {"login": "sbordet"}, "path": "jetty-deploy/src/main/java/org/eclipse/jetty/deploy/providers/ScanningAppProvider.java", "diffHunk": "@@ -140,7 +140,6 @@ protected void doStart() throws Exception\n         _scanner = new Scanner();\n         _scanner.setScanDirs(files);\n         _scanner.setScanInterval(_scanInterval);\n-        _scanner.setRecursive(_recursive);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzODUxMg==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533938512", "createdAt": "2020-12-02T07:05:03Z", "author": {"login": "janbartel"}, "path": "jetty-deploy/src/main/java/org/eclipse/jetty/deploy/providers/ScanningAppProvider.java", "diffHunk": "@@ -140,7 +140,6 @@ protected void doStart() throws Exception\n         _scanner = new Scanner();\n         _scanner.setScanDirs(files);\n         _scanner.setScanInterval(_scanInterval);\n-        _scanner.setRecursive(_recursive);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYwMjgwNA=="}, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Nzc5ODgxOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/test/java/org/eclipse/jetty/util/ScannerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzo1Mjo1M1rOH843iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzowNDoyNlrOH9NAVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYwODMzMQ==", "bodyText": "Add correspondent hashCode(). Use Objects.hash(...) if possible.", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533608331", "createdAt": "2020-12-01T17:52:53Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/test/java/org/eclipse/jetty/util/ScannerTest.java", "diffHunk": "@@ -120,6 +122,18 @@ public Event(String filename, Notification notification)\n             _filename = filename;\n             _notification = notification;\n         }\n+\n+        @Override\n+        public boolean equals(Object obj)\n+        {\n+            return ((Event)obj)._filename.equals(_filename) && ((Event)obj)._notification == _notification;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzODI2MQ==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533938261", "createdAt": "2020-12-02T07:04:26Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/test/java/org/eclipse/jetty/util/ScannerTest.java", "diffHunk": "@@ -120,6 +122,18 @@ public Event(String filename, Notification notification)\n             _filename = filename;\n             _notification = notification;\n         }\n+\n+        @Override\n+        public boolean equals(Object obj)\n+        {\n+            return ((Event)obj)._filename.equals(_filename) && ((Event)obj)._notification == _notification;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYwODMzMQ=="}, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzgwNDg4OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/test/java/org/eclipse/jetty/util/ScannerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzo1NDoyN1rOH847ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzowNjoyN1rOH9NDVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYwOTMxNw==", "bodyText": "Spaces!", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533609317", "createdAt": "2020-12-01T17:54:27Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/test/java/org/eclipse/jetty/util/ScannerTest.java", "diffHunk": "@@ -296,31 +309,31 @@ public void testAddedChangeRemove() throws Exception\n         // not stable after 1 scan so should not be seen yet.\n         _scanner.scan();\n         event = _queue.poll();\n-        assertTrue(event == null);\n+        assertNull(event);\n \n-        // Keep a2 unstable and remove a3 before it stabalized\n+        // Keep a2 unstable and remove a3 before it stabilized\n         Thread.sleep(1100); // make sure time in seconds changes\n         touch(\"a2\");\n         delete(\"a3\");\n \n-        // only a1 is stable so it should be seen.\n+        // only a1 is stable so it should be seen, a3 is deleted\n         _scanner.scan();\n-        event = _queue.poll();\n-        assertTrue(event != null);\n-        assertEquals(_directory + \"/a1\", event._filename);\n-        assertEquals(Notification.ADDED, event._notification);\n+        List<Event> actualEvents = new ArrayList<>();\n+        _queue.drainTo(actualEvents);\n+        assertEquals(2, actualEvents.size());\n+        Event a1 = new Event(_directory + \"/a1\", Notification.ADDED);\n+        Event a3 = new Event(_directory + \"/a3\", Notification.REMOVED);\n+        assertThat(actualEvents, Matchers.containsInAnyOrder(a1, a3));\n         assertTrue(_queue.isEmpty());\n-\n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzOTAzMA==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533939030", "createdAt": "2020-12-02T07:06:27Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/test/java/org/eclipse/jetty/util/ScannerTest.java", "diffHunk": "@@ -296,31 +309,31 @@ public void testAddedChangeRemove() throws Exception\n         // not stable after 1 scan so should not be seen yet.\n         _scanner.scan();\n         event = _queue.poll();\n-        assertTrue(event == null);\n+        assertNull(event);\n \n-        // Keep a2 unstable and remove a3 before it stabalized\n+        // Keep a2 unstable and remove a3 before it stabilized\n         Thread.sleep(1100); // make sure time in seconds changes\n         touch(\"a2\");\n         delete(\"a3\");\n \n-        // only a1 is stable so it should be seen.\n+        // only a1 is stable so it should be seen, a3 is deleted\n         _scanner.scan();\n-        event = _queue.poll();\n-        assertTrue(event != null);\n-        assertEquals(_directory + \"/a1\", event._filename);\n-        assertEquals(Notification.ADDED, event._notification);\n+        List<Event> actualEvents = new ArrayList<>();\n+        _queue.drainTo(actualEvents);\n+        assertEquals(2, actualEvents.size());\n+        Event a1 = new Event(_directory + \"/a1\", Notification.ADDED);\n+        Event a3 = new Event(_directory + \"/a3\", Notification.REMOVED);\n+        assertThat(actualEvents, Matchers.containsInAnyOrder(a1, a3));\n         assertTrue(_queue.isEmpty());\n-\n+        ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYwOTMxNw=="}, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzgzOTE2OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODowMjo1MlrOH85Qmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzowNjozN1rOH9NDlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxNDc0Ng==", "bodyText": "Make it final.", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533614746", "createdAt": "2020-12-01T18:02:52Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "diffHunk": "@@ -67,27 +66,27 @@\n     private static final Logger LOG = LoggerFactory.getLogger(Scanner.class);\n     private static int __scannerId = 0;\n \n-    private final AutoLock _lock = new AutoLock();\n     private int _scanInterval;\n-    private int _scanCount = 0;\n-    private final List<Listener> _listeners = new ArrayList<>();\n-    private final Map<String, TimeNSize> _prevScan = new HashMap<>();\n-    private final Map<String, TimeNSize> _currentScan = new HashMap<>();\n+    private AtomicInteger _scanCount = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzOTA5Mg==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533939092", "createdAt": "2020-12-02T07:06:37Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "diffHunk": "@@ -67,27 +66,27 @@\n     private static final Logger LOG = LoggerFactory.getLogger(Scanner.class);\n     private static int __scannerId = 0;\n \n-    private final AutoLock _lock = new AutoLock();\n     private int _scanInterval;\n-    private int _scanCount = 0;\n-    private final List<Listener> _listeners = new ArrayList<>();\n-    private final Map<String, TimeNSize> _prevScan = new HashMap<>();\n-    private final Map<String, TimeNSize> _currentScan = new HashMap<>();\n+    private AtomicInteger _scanCount = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxNDc0Ng=="}, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Nzg0NjU5OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODowNDo1NFrOH85VYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzowNjo0NFrOH9NDyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxNTk3MA==", "bodyText": "Make it private because MetaData is package private.\nMaybe make MetaData a private class too?", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533615970", "createdAt": "2020-12-01T18:04:54Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "diffHunk": "@@ -661,146 +609,116 @@ public boolean exists(String path)\n      */\n     public void scan()\n     {\n-        try (AutoLock l = _lock.lock())\n-        {\n-            reportScanStart(++_scanCount);\n-            scanFiles();\n-            reportDifferences(_currentScan, _prevScan);\n-            _prevScan.clear();\n-            _prevScan.putAll(_currentScan);\n-            reportScanEnd(_scanCount);\n-\n-            for (Listener listener : _listeners)\n-            {\n-                try\n-                {\n-                    if (listener instanceof ScanListener)\n-                        ((ScanListener)listener).scan();\n-                }\n-                catch (Throwable e)\n-                {\n-                    LOG.warn(\"Unable to scan\", e);\n-                }\n-            }\n-        }\n+        int cycle = _scanCount.incrementAndGet();\n+        reportScanStart(cycle);\n+        Map<String, MetaData> currentScan = scanFiles();\n+        reportDifferences(currentScan, _prevScan == null ? Collections.emptyMap() : Collections.unmodifiableMap(_prevScan));\n+        _prevScan = currentScan;\n+        reportScanEnd(cycle);\n     }\n \n     /**\n      * Scan all of the given paths.\n      */\n-    public void scanFiles()\n+    public Map<String, MetaData> scanFiles()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 589}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzOTE0NA==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533939144", "createdAt": "2020-12-02T07:06:44Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "diffHunk": "@@ -661,146 +609,116 @@ public boolean exists(String path)\n      */\n     public void scan()\n     {\n-        try (AutoLock l = _lock.lock())\n-        {\n-            reportScanStart(++_scanCount);\n-            scanFiles();\n-            reportDifferences(_currentScan, _prevScan);\n-            _prevScan.clear();\n-            _prevScan.putAll(_currentScan);\n-            reportScanEnd(_scanCount);\n-\n-            for (Listener listener : _listeners)\n-            {\n-                try\n-                {\n-                    if (listener instanceof ScanListener)\n-                        ((ScanListener)listener).scan();\n-                }\n-                catch (Throwable e)\n-                {\n-                    LOG.warn(\"Unable to scan\", e);\n-                }\n-            }\n-        }\n+        int cycle = _scanCount.incrementAndGet();\n+        reportScanStart(cycle);\n+        Map<String, MetaData> currentScan = scanFiles();\n+        reportDifferences(currentScan, _prevScan == null ? Collections.emptyMap() : Collections.unmodifiableMap(_prevScan));\n+        _prevScan = currentScan;\n+        reportScanEnd(cycle);\n     }\n \n     /**\n      * Scan all of the given paths.\n      */\n-    public void scanFiles()\n+    public Map<String, MetaData> scanFiles()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxNTk3MA=="}, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 589}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Nzg1NTE2OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODowNzowMlrOH85apg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzowNjo0OVrOH9ND4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxNzMxOA==", "bodyText": "Remove extra newline.", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533617318", "createdAt": "2020-12-01T18:07:02Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "diffHunk": "@@ -271,9 +270,13 @@ public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOEx\n         public void fileRemoved(String filename) throws Exception;\n     }\n \n+    /**\n+     * Notification of files that changed in the last scan.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzOTE2OQ==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533939169", "createdAt": "2020-12-02T07:06:49Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "diffHunk": "@@ -271,9 +270,13 @@ public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOEx\n         public void fileRemoved(String filename) throws Exception;\n     }\n \n+    /**\n+     * Notification of files that changed in the last scan.\n+     *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxNzMxOA=="}, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Nzg1NTk0OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODowNzoxM1rOH85bJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzowNjo1NVrOH9NEBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxNzQ0NQ==", "bodyText": "Spaces.", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533617445", "createdAt": "2020-12-01T18:07:13Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "diffHunk": "@@ -312,125 +312,111 @@ public int getScanInterval()\n      * @param scanInterval pause between scans in seconds, or 0 for no scan after the initial scan.\n      */\n     public void setScanInterval(int scanInterval)\n-    {\n-        try (AutoLock l = _lock.lock())\n-        {\n-            _scanInterval = scanInterval;\n-            schedule();\n-        }\n+    {        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzOTIwNA==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533939204", "createdAt": "2020-12-02T07:06:55Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "diffHunk": "@@ -312,125 +312,111 @@ public int getScanInterval()\n      * @param scanInterval pause between scans in seconds, or 0 for no scan after the initial scan.\n      */\n     public void setScanInterval(int scanInterval)\n-    {\n-        try (AutoLock l = _lock.lock())\n-        {\n-            _scanInterval = scanInterval;\n-            schedule();\n-        }\n+    {        ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxNzQ0NQ=="}, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Nzg3NTgyOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODoxMjozMVrOH85ncQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzowNzowNVrOH9NEOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMDU5Mw==", "bodyText": "Make it private and replace with Jetty's Scheduler.", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533620593", "createdAt": "2020-12-01T18:12:31Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "diffHunk": "@@ -544,30 +508,22 @@ public void removeListener(Listener listener)\n     @Override\n     public void doStart()\n     {\n-        try (AutoLock l = _lock.lock())\n-        {\n-            if (_running)\n-                return;\n-\n-            _running = true;\n-            if (LOG.isDebugEnabled())\n-                LOG.debug(\"Scanner start: rprtExists={}, depth={}, rprtDirs={}, interval={}, filter={}, scannables={}\",\n-                    _reportExisting, _scanDepth, _reportDirs, _scanInterval, _filter, _scannables);\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"Scanner start: rprtExists={}, depth={}, rprtDirs={}, interval={}, filter={}, scannables={}\",\n+                _reportExisting, _scanDepth, _reportDirs, _scanInterval, _filter, _scannables);\n \n-            if (_reportExisting)\n-            {\n-                // if files exist at startup, report them\n-                scan();\n-                scan(); // scan twice so files reported as stable\n-            }\n-            else\n-            {\n-                //just register the list of existing files and only report changes\n-                scanFiles();\n-                _prevScan.putAll(_currentScan);\n-            }\n-            schedule();\n+        if (_reportExisting)\n+        {\n+            // if files exist at startup, report them\n+            scan();\n+            scan(); // scan twice so files reported as stable\n+        }\n+        else\n+        {\n+            //just register the list of existing files and only report changes\n+            _prevScan = scanFiles();\n         }\n+        schedule();\n     }\n \n     public TimerTask newTimerTask()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 495}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzOTI1OQ==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533939259", "createdAt": "2020-12-02T07:07:05Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "diffHunk": "@@ -544,30 +508,22 @@ public void removeListener(Listener listener)\n     @Override\n     public void doStart()\n     {\n-        try (AutoLock l = _lock.lock())\n-        {\n-            if (_running)\n-                return;\n-\n-            _running = true;\n-            if (LOG.isDebugEnabled())\n-                LOG.debug(\"Scanner start: rprtExists={}, depth={}, rprtDirs={}, interval={}, filter={}, scannables={}\",\n-                    _reportExisting, _scanDepth, _reportDirs, _scanInterval, _filter, _scannables);\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"Scanner start: rprtExists={}, depth={}, rprtDirs={}, interval={}, filter={}, scannables={}\",\n+                _reportExisting, _scanDepth, _reportDirs, _scanInterval, _filter, _scannables);\n \n-            if (_reportExisting)\n-            {\n-                // if files exist at startup, report them\n-                scan();\n-                scan(); // scan twice so files reported as stable\n-            }\n-            else\n-            {\n-                //just register the list of existing files and only report changes\n-                scanFiles();\n-                _prevScan.putAll(_currentScan);\n-            }\n-            schedule();\n+        if (_reportExisting)\n+        {\n+            // if files exist at startup, report them\n+            scan();\n+            scan(); // scan twice so files reported as stable\n+        }\n+        else\n+        {\n+            //just register the list of existing files and only report changes\n+            _prevScan = scanFiles();\n         }\n+        schedule();\n     }\n \n     public TimerTask newTimerTask()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMDU5Mw=="}, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 495}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Nzg4MjI5OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODoxNDoyMlrOH85rnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzoxMzo0NlrOH9NO4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMTY2MA==", "bodyText": "Still worth to keep around Deprecated method?", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533621660", "createdAt": "2020-12-01T18:14:22Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "diffHunk": "@@ -312,125 +312,111 @@ public int getScanInterval()\n      * @param scanInterval pause between scans in seconds, or 0 for no scan after the initial scan.\n      */\n     public void setScanInterval(int scanInterval)\n-    {\n-        try (AutoLock l = _lock.lock())\n-        {\n-            _scanInterval = scanInterval;\n-            schedule();\n-        }\n+    {        \n+        if (isRunning())\n+            throw new IllegalStateException(\"Scanner started\");\n+        \n+        _scanInterval = scanInterval;\n+        schedule();\n     }\n \n     public void setScanDirs(List<File> dirs)\n     {\n+        if (isRunning())\n+            throw new IllegalStateException(\"Scanner started\");\n+\n         _scannables.clear();\n         if (dirs == null)\n             return;\n-\n-        for (File f:dirs)\n+        for (File f :dirs)\n         {\n-            addScanDir(f);\n-        }\n-    }\n-\n-    @Deprecated\n-    public void addScanDir(File dir)\n-    {\n-        if (dir == null)\n-            return;\n-        try (AutoLock l = _lock.lock())\n-        {\n-            if (dir.isDirectory())\n-                addDirectory(dir.toPath());\n+            if (f.isDirectory())\n+                addDirectory(f.toPath());\n             else\n-                addFile(dir.toPath());\n-        }\n-        catch (Exception e)\n-        {\n-            LOG.warn(\"Unable to add: {}\", dir, e);\n+                addFile(f.toPath());\n         }\n     }\n-    \n+\n     /**\n      * Add a file to be scanned. The file must not be null, and must exist.\n      * \n      * @param p the Path of the file to scan.\n-     * @throws IOException \n      */\n-    public void addFile(Path p) throws IOException\n+    public void addFile(Path p)\n     {\n+        if (isRunning())\n+            throw new IllegalStateException(\"Scanner started\");\n+        \n         if (p == null)\n             throw new IllegalStateException(\"Null path\");\n \n         File f = p.toFile();\n         if (!f.exists() || f.isDirectory())\n-            throw new IllegalStateException(\"Not file or doesn't exist: \" + f.getCanonicalPath());\n+            throw new IllegalStateException(\"Not file or doesn't exist: \" + p);\n \n-        try (AutoLock l = _lock.lock())\n-        {\n-            _scannables.put(p, null);\n-        }\n+        _scannables.putIfAbsent(p, null);\n     }\n \n     /**\n      * Add a directory to be scanned. The directory must not be null and must exist.\n      * \n      * @param p the directory to scan.\n      * @return an IncludeExcludeSet to which the caller can add PathMatcher patterns to match\n-     * @throws IOException\n      */\n-    public IncludeExcludeSet<PathMatcher, Path> addDirectory(Path p) throws IOException\n+    public IncludeExcludeSet<PathMatcher, Path> addDirectory(Path p)\n     {\n+        if (isRunning())\n+            throw new IllegalStateException(\"Scanner started\");\n+        \n         if (p == null)\n             throw new IllegalStateException(\"Null path\");\n \n         File f = p.toFile();\n         if (!f.exists() || !f.isDirectory())\n-            throw new IllegalStateException(\"Not directory or doesn't exist: \" + f.getCanonicalPath());\n+            throw new IllegalStateException(\"Not directory or doesn't exist: \" + p);\n \n-        try (AutoLock l = _lock.lock())\n+        try\n         {\n-            IncludeExcludeSet<PathMatcher, Path> includesExcludes = _scannables.get(p);\n-            if (includesExcludes == null)\n-            {\n-                includesExcludes = new IncludeExcludeSet<>(PathMatcherSet.class);\n-                _scannables.put(p.toRealPath(), includesExcludes);\n-            }\n+            Path real = p.toRealPath();\n+            IncludeExcludeSet<PathMatcher, Path> includesExcludes = new IncludeExcludeSet<>(PathMatcherSet.class);\n+            IncludeExcludeSet<PathMatcher, Path> prev = _scannables.putIfAbsent(real, includesExcludes);\n+            if (prev != null)\n+                includesExcludes = prev;\n             return includesExcludes;\n         }\n-    }\n-\n-    @Deprecated\n-    public List<File> getScanDirs()\n-    {\n-        ArrayList<File> files = new ArrayList<>();\n-        for (Path p : _scannables.keySet())\n-            files.add(p.toFile());\n-        return Collections.unmodifiableList(files);\n+        catch (IOException e)\n+        {\n+            throw new IllegalStateException(e);\n+        }\n     }\n     \n-    public Set<Path> getScannables()\n-    {\n-        return _scannables.keySet();\n-    }\n \n     /**\n-     * @param recursive True if scanning is recursive\n-     * @see #setScanDepth(int)\n+     * Apply a filter to files found in the scan directory.\n+     * Only files matching the filter will be reported as added/changed/removed.\n+     *\n+     * @param filter the filename filter to use\n      */\n     @Deprecated\n-    public void setRecursive(boolean recursive)\n+    public void setFilenameFilter(FilenameFilter filter)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 346}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk0MTk4NQ==", "bodyText": "I don't really want to mess with the WebAppProvider's filter for finding webapps to deploy at this late stage - it can be refactored at a later stage, so I've raised #5748 to track it.", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r533941985", "createdAt": "2020-12-02T07:13:46Z", "author": {"login": "janbartel"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "diffHunk": "@@ -312,125 +312,111 @@ public int getScanInterval()\n      * @param scanInterval pause between scans in seconds, or 0 for no scan after the initial scan.\n      */\n     public void setScanInterval(int scanInterval)\n-    {\n-        try (AutoLock l = _lock.lock())\n-        {\n-            _scanInterval = scanInterval;\n-            schedule();\n-        }\n+    {        \n+        if (isRunning())\n+            throw new IllegalStateException(\"Scanner started\");\n+        \n+        _scanInterval = scanInterval;\n+        schedule();\n     }\n \n     public void setScanDirs(List<File> dirs)\n     {\n+        if (isRunning())\n+            throw new IllegalStateException(\"Scanner started\");\n+\n         _scannables.clear();\n         if (dirs == null)\n             return;\n-\n-        for (File f:dirs)\n+        for (File f :dirs)\n         {\n-            addScanDir(f);\n-        }\n-    }\n-\n-    @Deprecated\n-    public void addScanDir(File dir)\n-    {\n-        if (dir == null)\n-            return;\n-        try (AutoLock l = _lock.lock())\n-        {\n-            if (dir.isDirectory())\n-                addDirectory(dir.toPath());\n+            if (f.isDirectory())\n+                addDirectory(f.toPath());\n             else\n-                addFile(dir.toPath());\n-        }\n-        catch (Exception e)\n-        {\n-            LOG.warn(\"Unable to add: {}\", dir, e);\n+                addFile(f.toPath());\n         }\n     }\n-    \n+\n     /**\n      * Add a file to be scanned. The file must not be null, and must exist.\n      * \n      * @param p the Path of the file to scan.\n-     * @throws IOException \n      */\n-    public void addFile(Path p) throws IOException\n+    public void addFile(Path p)\n     {\n+        if (isRunning())\n+            throw new IllegalStateException(\"Scanner started\");\n+        \n         if (p == null)\n             throw new IllegalStateException(\"Null path\");\n \n         File f = p.toFile();\n         if (!f.exists() || f.isDirectory())\n-            throw new IllegalStateException(\"Not file or doesn't exist: \" + f.getCanonicalPath());\n+            throw new IllegalStateException(\"Not file or doesn't exist: \" + p);\n \n-        try (AutoLock l = _lock.lock())\n-        {\n-            _scannables.put(p, null);\n-        }\n+        _scannables.putIfAbsent(p, null);\n     }\n \n     /**\n      * Add a directory to be scanned. The directory must not be null and must exist.\n      * \n      * @param p the directory to scan.\n      * @return an IncludeExcludeSet to which the caller can add PathMatcher patterns to match\n-     * @throws IOException\n      */\n-    public IncludeExcludeSet<PathMatcher, Path> addDirectory(Path p) throws IOException\n+    public IncludeExcludeSet<PathMatcher, Path> addDirectory(Path p)\n     {\n+        if (isRunning())\n+            throw new IllegalStateException(\"Scanner started\");\n+        \n         if (p == null)\n             throw new IllegalStateException(\"Null path\");\n \n         File f = p.toFile();\n         if (!f.exists() || !f.isDirectory())\n-            throw new IllegalStateException(\"Not directory or doesn't exist: \" + f.getCanonicalPath());\n+            throw new IllegalStateException(\"Not directory or doesn't exist: \" + p);\n \n-        try (AutoLock l = _lock.lock())\n+        try\n         {\n-            IncludeExcludeSet<PathMatcher, Path> includesExcludes = _scannables.get(p);\n-            if (includesExcludes == null)\n-            {\n-                includesExcludes = new IncludeExcludeSet<>(PathMatcherSet.class);\n-                _scannables.put(p.toRealPath(), includesExcludes);\n-            }\n+            Path real = p.toRealPath();\n+            IncludeExcludeSet<PathMatcher, Path> includesExcludes = new IncludeExcludeSet<>(PathMatcherSet.class);\n+            IncludeExcludeSet<PathMatcher, Path> prev = _scannables.putIfAbsent(real, includesExcludes);\n+            if (prev != null)\n+                includesExcludes = prev;\n             return includesExcludes;\n         }\n-    }\n-\n-    @Deprecated\n-    public List<File> getScanDirs()\n-    {\n-        ArrayList<File> files = new ArrayList<>();\n-        for (Path p : _scannables.keySet())\n-            files.add(p.toFile());\n-        return Collections.unmodifiableList(files);\n+        catch (IOException e)\n+        {\n+            throw new IllegalStateException(e);\n+        }\n     }\n     \n-    public Set<Path> getScannables()\n-    {\n-        return _scannables.keySet();\n-    }\n \n     /**\n-     * @param recursive True if scanning is recursive\n-     * @see #setScanDepth(int)\n+     * Apply a filter to files found in the scan directory.\n+     * Only files matching the filter will be reported as added/changed/removed.\n+     *\n+     * @param filter the filename filter to use\n      */\n     @Deprecated\n-    public void setRecursive(boolean recursive)\n+    public void setFilenameFilter(FilenameFilter filter)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMTY2MA=="}, "originalCommit": {"oid": "90e48ba0b5d6fa58aafbcb89d333e436f5455261"}, "originalPosition": 346}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTQxODM5OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ssl/KeyStoreScanner.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoyMTo1NlrOH9apPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzowODoxOFrOH9lQJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2MTcyNA==", "bodyText": "@sbordet this will return true even if the callback fails, which  is a bit strange.", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r534161724", "createdAt": "2020-12-02T13:21:56Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ssl/KeyStoreScanner.java", "diffHunk": "@@ -135,8 +135,7 @@ public void scan()\n \n             _scanner.scan(callback);\n             _scanner.scan(callback);\n-            complete.await(10, TimeUnit.SECONDS);\n-\n+            return complete.await(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97b3f262ab9cbf7401765d8703e5a015decc1688"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMxNTM3Mw==", "bodyText": "@gregw I don't understand? If the 10 s elapsed, complete.await() would have returned false, and the return value would have been ignored. Now we return it so that a JMX call to this method would know if it timed out.", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r534315373", "createdAt": "2020-12-02T16:41:12Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ssl/KeyStoreScanner.java", "diffHunk": "@@ -135,8 +135,7 @@ public void scan()\n \n             _scanner.scan(callback);\n             _scanner.scan(callback);\n-            complete.await(10, TimeUnit.SECONDS);\n-\n+            return complete.await(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2MTcyNA=="}, "originalCommit": {"oid": "97b3f262ab9cbf7401765d8703e5a015decc1688"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzNDQxNA==", "bodyText": "Scan is passed a callback. If it is failed then this method should return false.   Moreover I think if it times out then I think this method should throw a timeout exception rather than return", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r534334414", "createdAt": "2020-12-02T17:06:41Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ssl/KeyStoreScanner.java", "diffHunk": "@@ -135,8 +135,7 @@ public void scan()\n \n             _scanner.scan(callback);\n             _scanner.scan(callback);\n-            complete.await(10, TimeUnit.SECONDS);\n-\n+            return complete.await(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2MTcyNA=="}, "originalCommit": {"oid": "97b3f262ab9cbf7401765d8703e5a015decc1688"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzNTUyNA==", "bodyText": "@sbordet ^\nAlso I don't like the 10second wait either, but not sure how to avoid other than infinite wait", "url": "https://github.com/eclipse/jetty.project/pull/5744#discussion_r534335524", "createdAt": "2020-12-02T17:08:18Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ssl/KeyStoreScanner.java", "diffHunk": "@@ -135,8 +135,7 @@ public void scan()\n \n             _scanner.scan(callback);\n             _scanner.scan(callback);\n-            complete.await(10, TimeUnit.SECONDS);\n-\n+            return complete.await(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2MTcyNA=="}, "originalCommit": {"oid": "97b3f262ab9cbf7401765d8703e5a015decc1688"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2070, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}