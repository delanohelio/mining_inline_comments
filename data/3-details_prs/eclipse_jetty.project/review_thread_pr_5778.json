{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MDQ1MjAz", "number": 5778, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTowNzozNFrOFC3akA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjoyNToyN1rOFC5cCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTQ5MzkyOnYy", "diffSide": "RIGHT", "path": "jetty-io/src/main/java/org/eclipse/jetty/io/ByteBufferPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTowNzozNFrOICPDQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo0OTo0MFrOICQrXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIxNDY1OQ==", "bodyText": "In this way we always pay the cost of volatile, which is updated much more often than it's being read.\nFrankly, I would leave it non-volatile.\nNext best is using AtomicLong.lazySet() in 9.4.x and VarHandle in 10.0.x.\nI would refrain using volatile unconditionally like proposed here, if possible.", "url": "https://github.com/eclipse/jetty.project/pull/5778#discussion_r539214659", "createdAt": "2020-12-09T11:07:34Z", "author": {"login": "sbordet"}, "path": "jetty-io/src/main/java/org/eclipse/jetty/io/ByteBufferPool.java", "diffHunk": "@@ -158,7 +158,7 @@ public void release(ByteBuffer buffer)\n         private final int _capacity;\n         private final int _maxSize;\n         private final AtomicInteger _size;\n-        private long _lastUpdate = System.nanoTime();\n+        private volatile long _lastUpdate = System.nanoTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5318f1da5da37d53b26897cb81181e7e57739bf6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MTMwOQ==", "bodyText": "You're right that we could do better than simply using volatile.\nOn JDK 8, AtomicLong's lazySet()/get() is probably best.\nOn JDK 9+, lazySet()/getAcquire() provide the exact semantics we want at the cheapest possible cost.\nLet me update this PR, and I'll include the and get() -> getAcquire() change during the 10.0.x merge.", "url": "https://github.com/eclipse/jetty.project/pull/5778#discussion_r539241309", "createdAt": "2020-12-09T11:49:40Z", "author": {"login": "lorban"}, "path": "jetty-io/src/main/java/org/eclipse/jetty/io/ByteBufferPool.java", "diffHunk": "@@ -158,7 +158,7 @@ public void release(ByteBuffer buffer)\n         private final int _capacity;\n         private final int _maxSize;\n         private final AtomicInteger _size;\n-        private long _lastUpdate = System.nanoTime();\n+        private volatile long _lastUpdate = System.nanoTime();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIxNDY1OQ=="}, "originalCommit": {"oid": "5318f1da5da37d53b26897cb81181e7e57739bf6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTgyNTM3OnYy", "diffSide": "RIGHT", "path": "jetty-io/src/main/java/org/eclipse/jetty/io/ByteBufferPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjoyNToyN1rOICSChA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjoyOTo1NVrOICSN5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI2MzYyMA==", "bodyText": "I think it should be getAcquire() because we want to see all modifications made by other threads (i.e. we want the semantic of a volatile read). I would remove the comment entirely -- the code difference would be enough.", "url": "https://github.com/eclipse/jetty.project/pull/5778#discussion_r539263620", "createdAt": "2020-12-09T12:25:27Z", "author": {"login": "sbordet"}, "path": "jetty-io/src/main/java/org/eclipse/jetty/io/ByteBufferPool.java", "diffHunk": "@@ -252,6 +252,7 @@ int size()\n \n         long getLastUpdate()\n         {\n+            // This could be changed to a getOpaque() call on JDK 9+.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee84d8c58d68b49c95e9a7ca3652d434398a5118"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI2NjUzMg==", "bodyText": "Sure, I'll remove the comment.", "url": "https://github.com/eclipse/jetty.project/pull/5778#discussion_r539266532", "createdAt": "2020-12-09T12:29:55Z", "author": {"login": "lorban"}, "path": "jetty-io/src/main/java/org/eclipse/jetty/io/ByteBufferPool.java", "diffHunk": "@@ -252,6 +252,7 @@ int size()\n \n         long getLastUpdate()\n         {\n+            // This could be changed to a getOpaque() call on JDK 9+.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI2MzYyMA=="}, "originalCommit": {"oid": "ee84d8c58d68b49c95e9a7ca3652d434398a5118"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2083, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}