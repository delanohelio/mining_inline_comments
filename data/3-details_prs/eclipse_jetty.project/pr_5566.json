{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NzQxNTc3", "number": 5566, "title": "Tries cleanup", "bodyText": "Replace all Trie usages in the code base with a more abstract hierarchy of *Index interfaces, and do not directly expose the implementations, requiring the use of a factory exposed via the builder pattern to create instances.\nThis should help maintenance as the implementation will be chosen based on a set of requirements (case-sensitivity, mutability...) that the factory can interpret as it wants to provide the best implementation complying with them.\nClears the path for a proper fix for #5291", "createdAt": "2020-11-03T13:41:44Z", "url": "https://github.com/eclipse/jetty.project/pull/5566", "merged": true, "mergeCommit": {"oid": "981e263d762085b95c8af04565ed3e18034dd7a4"}, "closed": true, "closedAt": "2020-11-26T14:26:41Z", "author": {"login": "lorban"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdY5mrNgBqjM5NTI5OTg1NDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgSw3wgBqjQwNDI0ODI2NzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6329d71a63e8a306bfd66347b2d865c7100236af", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/6329d71a63e8a306bfd66347b2d865c7100236af", "committedDate": "2020-11-03T13:39:59Z", "message": "replace HttpGenerator's Trie cache with a HashSet cache\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}, "afterCommit": {"oid": "f9a7c7f4380b7104377776e16a45b0c499a530d7", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/f9a7c7f4380b7104377776e16a45b0c499a530d7", "committedDate": "2020-11-03T13:58:04Z", "message": "replace HttpHeaderValue's Trie cache with a TreeMap cache\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9a7c7f4380b7104377776e16a45b0c499a530d7", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/f9a7c7f4380b7104377776e16a45b0c499a530d7", "committedDate": "2020-11-03T13:58:04Z", "message": "replace HttpHeaderValue's Trie cache with a TreeMap cache\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}, "afterCommit": {"oid": "6b0ec6b1299e55412776031b9ba2858af91445ce", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/6b0ec6b1299e55412776031b9ba2858af91445ce", "committedDate": "2020-11-09T13:15:54Z", "message": "introduction of Index and OpaqueIndex\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b0ec6b1299e55412776031b9ba2858af91445ce", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/6b0ec6b1299e55412776031b9ba2858af91445ce", "committedDate": "2020-11-09T13:15:54Z", "message": "introduction of Index and OpaqueIndex\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}, "afterCommit": {"oid": "08d3098efaca0ae940f9108a0e5cf16b17ac4378", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/08d3098efaca0ae940f9108a0e5cf16b17ac4378", "committedDate": "2020-11-09T13:16:46Z", "message": "introduction of Index and OpaqueIndex\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08d3098efaca0ae940f9108a0e5cf16b17ac4378", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/08d3098efaca0ae940f9108a0e5cf16b17ac4378", "committedDate": "2020-11-09T13:16:46Z", "message": "introduction of Index and OpaqueIndex\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}, "afterCommit": {"oid": "2a065844c2c42c82d33e6d0b03226d4a07c30507", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/2a065844c2c42c82d33e6d0b03226d4a07c30507", "committedDate": "2020-11-09T13:25:07Z", "message": "introduction of immutable Index and OpaqueIndex\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2Mjc0ODcw", "url": "https://github.com/eclipse/jetty.project/pull/5566#pullrequestreview-526274870", "createdAt": "2020-11-09T13:51:11Z", "commit": {"oid": "2a065844c2c42c82d33e6d0b03226d4a07c30507"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMzo1MToxMVrOHvvy9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDowNTo0N1rOHvwZkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgyODIxMg==", "bodyText": "I like this approach of a builder that just collects all the entries and then builds the trie!\nI don't so much like the interface name OpaqueIndex.   Why not just have it as part of Index:\npublic interface Index\n{\n    ...;\n    class OpaqueBuilder\n    {\n        public static string Predicate<String> build();\n    }\n}", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r519828212", "createdAt": "2020-11-09T13:51:11Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/OpaqueIndex.java", "diffHunk": "@@ -0,0 +1,62 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+public interface OpaqueIndex\n+{\n+\n+    boolean contains(String key);\n+\n+    class Builder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a065844c2c42c82d33e6d0b03226d4a07c30507"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzMTIxMA==", "bodyText": "contents.size() is not really the right capacity for ArrayTrie.    Capacity is hard to estimate, as it is more character by character and will be different for [\"Foo1\",\"Foo2\",\"Foo3\"] vs [ \"Foo0\",\"Bar0\",\"Bob0\"].\nSo I think we should just probably loop here starting at a low capacity, then recreating larger and larger as need be.\nPerhaps the builder can have a maxCapacity(int) method?", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r519831210", "createdAt": "2020-11-09T13:55:45Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/OpaqueIndex.java", "diffHunk": "@@ -0,0 +1,62 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+public interface OpaqueIndex\n+{\n+\n+    boolean contains(String key);\n+\n+    class Builder\n+    {\n+        private Set<String> contents = new LinkedHashSet<>();\n+        private boolean caseSensitive;\n+\n+        public Builder caseSensitive(boolean caseSensitive)\n+        {\n+            this.caseSensitive = caseSensitive;\n+            return this;\n+        }\n+\n+        public Builder with(String key)\n+        {\n+            contents.add(key);\n+            return this;\n+        }\n+\n+        public OpaqueIndex build()\n+        {\n+            Trie<Boolean> result;\n+            if (caseSensitive)\n+                result = new ArrayTernaryTrie<>(false, contents.size());\n+            else\n+                result = new ArrayTrie<>(contents.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a065844c2c42c82d33e6d0b03226d4a07c30507"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzMzQyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public interface Index<V> extends OpaqueIndex\n          \n          \n            \n            public interface Index<V> extends Predicate<String>", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r519833424", "createdAt": "2020-11-09T13:58:53Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -0,0 +1,116 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.nio.ByteBuffer;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public interface Index<V> extends OpaqueIndex", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04f1b682e33f9747503a97545a6cf443a8c77d19"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzMzg2OQ==", "bodyText": "I really like the Builder pattern applied here!", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r519833869", "createdAt": "2020-11-09T13:59:30Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -0,0 +1,116 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.nio.ByteBuffer;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public interface Index<V> extends OpaqueIndex\n+{\n+    @Override\n+    default boolean contains(String key)\n+    {\n+        return get(key) != null;\n+    }\n+\n+    /**\n+     * Get an exact match from a String key\n+     *\n+     * @param s The key\n+     * @return the value for the string key\n+     */\n+    V get(String s);\n+\n+    /**\n+     * Get an exact match from a String key\n+     *\n+     * @param s The key\n+     * @param offset The offset within the string of the key\n+     * @param len the length of the key\n+     * @return the value for the string / offset / length\n+     */\n+    V get(String s, int offset, int len);\n+\n+    /**\n+     * Get the best match from key in a byte buffer.\n+     * The key is assumed to by ISO_8859_1 characters.\n+     *\n+     * @param b The buffer\n+     * @param offset The offset within the buffer of the key\n+     * @param len the length of the key\n+     * @return The value or null if not found\n+     */\n+    V getBest(ByteBuffer b, int offset, int len);\n+\n+    class Builder<V>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04f1b682e33f9747503a97545a6cf443a8c77d19"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzNDU3MA==", "bodyText": "wow that's a name!!!  why not just overload withAll?", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r519834570", "createdAt": "2020-11-09T14:00:28Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -0,0 +1,116 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.nio.ByteBuffer;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public interface Index<V> extends OpaqueIndex\n+{\n+    @Override\n+    default boolean contains(String key)\n+    {\n+        return get(key) != null;\n+    }\n+\n+    /**\n+     * Get an exact match from a String key\n+     *\n+     * @param s The key\n+     * @return the value for the string key\n+     */\n+    V get(String s);\n+\n+    /**\n+     * Get an exact match from a String key\n+     *\n+     * @param s The key\n+     * @param offset The offset within the string of the key\n+     * @param len the length of the key\n+     * @return the value for the string / offset / length\n+     */\n+    V get(String s, int offset, int len);\n+\n+    /**\n+     * Get the best match from key in a byte buffer.\n+     * The key is assumed to by ISO_8859_1 characters.\n+     *\n+     * @param b The buffer\n+     * @param offset The offset within the buffer of the key\n+     * @param len the length of the key\n+     * @return The value or null if not found\n+     */\n+    V getBest(ByteBuffer b, int offset, int len);\n+\n+    class Builder<V>\n+    {\n+        private Map<String, V> contents = new LinkedHashMap<>();\n+        private boolean caseSensitive;\n+\n+        public Builder<V> caseSensitive(boolean caseSensitive)\n+        {\n+            this.caseSensitive = caseSensitive;\n+            return this;\n+        }\n+\n+        public <T> Builder<V> withAllDerivate(T[] values, Function<T, Map<String, V>> function)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04f1b682e33f9747503a97545a6cf443a8c77d19"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzNDkxMg==", "bodyText": "contents.size() is not really the right capacity for ArrayTrie.    Capacity is hard to estimate, as it is more character by character and will be different for [\"Foo1\",\"Foo2\",\"Foo3\"] vs [ \"Foo0\",\"Bar0\",\"Bob0\"].\nSo I think we should just probably loop here starting at a low capacity, then recreating larger and larger as need be.\nPerhaps the builder can have a maxCapacity(int) method?", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r519834912", "createdAt": "2020-11-09T14:00:59Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -0,0 +1,116 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.nio.ByteBuffer;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public interface Index<V> extends OpaqueIndex\n+{\n+    @Override\n+    default boolean contains(String key)\n+    {\n+        return get(key) != null;\n+    }\n+\n+    /**\n+     * Get an exact match from a String key\n+     *\n+     * @param s The key\n+     * @return the value for the string key\n+     */\n+    V get(String s);\n+\n+    /**\n+     * Get an exact match from a String key\n+     *\n+     * @param s The key\n+     * @param offset The offset within the string of the key\n+     * @param len the length of the key\n+     * @return the value for the string / offset / length\n+     */\n+    V get(String s, int offset, int len);\n+\n+    /**\n+     * Get the best match from key in a byte buffer.\n+     * The key is assumed to by ISO_8859_1 characters.\n+     *\n+     * @param b The buffer\n+     * @param offset The offset within the buffer of the key\n+     * @param len the length of the key\n+     * @return The value or null if not found\n+     */\n+    V getBest(ByteBuffer b, int offset, int len);\n+\n+    class Builder<V>\n+    {\n+        private Map<String, V> contents = new LinkedHashMap<>();\n+        private boolean caseSensitive;\n+\n+        public Builder<V> caseSensitive(boolean caseSensitive)\n+        {\n+            this.caseSensitive = caseSensitive;\n+            return this;\n+        }\n+\n+        public <T> Builder<V> withAllDerivate(T[] values, Function<T, Map<String, V>> function)\n+        {\n+            for (T value : values)\n+            {\n+                Map<String, V> pairs = function.apply(value);\n+                contents.putAll(pairs);\n+            }\n+            return this;\n+        }\n+\n+        public Builder<V> withAll(V[] values, Function<V, String> function)\n+        {\n+            for (V value : values)\n+            {\n+                String key = function.apply(value);\n+                contents.put(key, value);\n+            }\n+            return this;\n+        }\n+\n+        public Builder<V> with(String key, V value)\n+        {\n+            contents.put(key, value);\n+            return this;\n+        }\n+\n+        public Index<V> build()\n+        {\n+            Trie<V> result;\n+            if (caseSensitive)\n+                result = new ArrayTernaryTrie<>(false, contents.size());\n+            else\n+                result = new ArrayTrie<>(contents.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04f1b682e33f9747503a97545a6cf443a8c77d19"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzODA5Ng==", "bodyText": "So do we still really need Trie interface?  just for the unused method variations?\nI like Index as a better name, which can then be directly implemented by the Trie implementations.   We should not ever need an polymorphic Trie, only polymorphic Indexes", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r519838096", "createdAt": "2020-11-09T14:05:47Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Trie.java", "diffHunk": "@@ -26,7 +26,7 @@\n  *\n  * @param <V> the Trie entry type\n  */\n-public interface Trie<V>\n+public interface Trie<V> extends Index<V>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04f1b682e33f9747503a97545a6cf443a8c77d19"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDY4NDM3", "url": "https://github.com/eclipse/jetty.project/pull/5566#pullrequestreview-526468437", "createdAt": "2020-11-09T17:06:08Z", "commit": {"oid": "172eb0894aabadf6483605fc93e8cb747539866d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzowNjowOVrOHv4veQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzowNjowOVrOHv4veQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3NDc3Nw==", "bodyText": "I think I've found a \"simple\" algorithm to work out the required capacity from a set of keys:\n    public static int requiredCapacity(Set<String> keys)\n    {\n        List<String> list = new ArrayList<>(keys);\n        Collections.sort(list);\n\n        return requiredCapacity(list, 0, list.size(), 0);\n    }\n\n    private static int requiredCapacity(List<String> keys, int offset, int length, int index)\n    {\n        if (length == 0)\n            return 0;\n\n        int required = 0;\n\n        Character c = null;\n        for (int i = 0; i < length; i++)\n        {\n            String k = keys.get(offset + i);\n\n            if (c == null)\n            {\n                if (k.length() >= index + 1)\n                {\n                    required++;\n                    c = k.charAt(index);;\n                }\n                else\n                {\n                    offset++;\n                    length--;\n                    i--;\n                }\n                continue;\n            }\n\n            if (k.length() >= index + 1)\n            {\n                char n = k.charAt(index);\n                if (c != n)\n                {\n                    required += requiredCapacity(keys, offset, i, index + 1) + 1;\n                    offset = i;\n                    length -= i;\n                    c = n;\n                    i = 1;\n                }\n                continue;\n            }\n\n            c = null;\n            offset = i;\n            length -= i;\n            i = 0;\n        }\n\n        required += requiredCapacity(keys, offset, length, index + 1);\n        return required;\n    }\nWhich passes the following tests:\n    @Test\n    public void testArrayTrieRequestCapacity()\n    {\n        assertThat(ArrayTrie.requiredCapacity(Set.of(\"ABC\")), is(3));\n        assertThat(ArrayTrie.requiredCapacity(Set.of(\"ABC\", \"XYZ\")), is(6));\n        assertThat(ArrayTrie.requiredCapacity(Set.of(\"A00\", \"A11\")), is(5));\n        assertThat(ArrayTrie.requiredCapacity(Set.of(\"A00\", \"A01\", \"A10\", \"A11\")), is(7));\n        assertThat(ArrayTrie.requiredCapacity(Set.of(\"ABC\", \"ABCDEF\")), is(6));\n        assertThat(ArrayTrie.requiredCapacity(Set.of(\"A\", \"AB\")), is(2));\n        assertThat(ArrayTrie.requiredCapacity(Set.of(\"AB\", \"A\")), is(2));\n        assertThat(ArrayTrie.requiredCapacity(Set.of(\"ABC\", \"ABCDEF\")), is(6));\n        assertThat(ArrayTrie.requiredCapacity(Set.of(\"ABCDEF\", \"ABC\")), is(6));\n        assertThat(ArrayTrie.requiredCapacity(Set.of(\"ABC\", \"ABCDEF\", \"ABX\")), is(7));\n        assertThat(ArrayTrie.requiredCapacity(Set.of(\"ABCDEF\", \"ABC\", \"ABX\")), is(7));\n    }", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r519974777", "createdAt": "2020-11-09T17:06:09Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -0,0 +1,148 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.nio.ByteBuffer;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+public interface Index<V> extends OpaqueIndex\n+{\n+    @Override\n+    default boolean contains(String key)\n+    {\n+        return get(key) != null;\n+    }\n+\n+    @Override\n+    default boolean contains(String key, int offset, int length)\n+    {\n+        return get(key, offset, length) != null;\n+    }\n+\n+    /**\n+     * Get an exact match from a String key\n+     *\n+     * @param s The key\n+     * @return the value for the string key\n+     */\n+    V get(String s);\n+\n+    /**\n+     * Get an exact match from a String key\n+     *\n+     * @param s The key\n+     * @param offset The offset within the string of the key\n+     * @param len the length of the key\n+     * @return the value for the string / offset / length\n+     */\n+    V get(String s, int offset, int len);\n+\n+    /**\n+     * Get the best match from key in a String.\n+     *\n+     * @param s The string\n+     * @param offset The offset within the string of the key\n+     * @param len the length of the key\n+     * @return The value or null if not found\n+     */\n+    V getBest(String s, int offset, int len);\n+\n+    /**\n+     * Get the best match from key in a byte buffer.\n+     * The key is assumed to by ISO_8859_1 characters.\n+     *\n+     * @param b The buffer\n+     * @param offset The offset within the buffer of the key\n+     * @param len the length of the key\n+     * @return The value or null if not found\n+     */\n+    V getBest(ByteBuffer b, int offset, int len);\n+\n+    class Builder<V>\n+    {\n+        private Map<String, V> contents = new LinkedHashMap<>();\n+        private boolean caseSensitive;\n+\n+        public Builder<V> caseSensitive(boolean caseSensitive)\n+        {\n+            this.caseSensitive = caseSensitive;\n+            return this;\n+        }\n+\n+        public <T> Builder<V> withAllDerivate(T[] values, Function<T, Map<String, V>> function)\n+        {\n+            for (T value : values)\n+            {\n+                Map<String, V> pairs = function.apply(value);\n+                contents.putAll(pairs);\n+            }\n+            return this;\n+        }\n+\n+        public Builder<V> withAll(V[] values, Function<V, String> function)\n+        {\n+            for (V value : values)\n+            {\n+                String key = function.apply(value);\n+                contents.put(key, value);\n+            }\n+            return this;\n+        }\n+\n+        public Builder<V> with(String key, V value)\n+        {\n+            contents.put(key, value);\n+            return this;\n+        }\n+\n+        public Index<V> build()\n+        {\n+            int capacity = 16;\n+            Trie<V> result = createTrie(capacity);\n+            for (Map.Entry<String, V> entry : contents.entrySet())\n+            {\n+                while (!result.put(entry.getKey(), entry.getValue()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "172eb0894aabadf6483605fc93e8cb747539866d"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MzU3NTU0", "url": "https://github.com/eclipse/jetty.project/pull/5566#pullrequestreview-528357554", "createdAt": "2020-11-11T16:55:50Z", "commit": {"oid": "e77a26868266dc8cddcf66c8ebd16696f2b8048c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjo1NTo1MFrOHxVyFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjo1NTo1MFrOHxVyFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ5OTE1OQ==", "bodyText": "Rather than a whole new class, can't we just have a mutable() method on the standard builder?", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r521499159", "createdAt": "2020-11-11T16:55:50Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/MutableOpaqueIndex.java", "diffHunk": "@@ -0,0 +1,57 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+public interface MutableOpaqueIndex extends OpaqueIndex", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77a26868266dc8cddcf66c8ebd16696f2b8048c"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MzU5NTE2", "url": "https://github.com/eclipse/jetty.project/pull/5566#pullrequestreview-528359516", "createdAt": "2020-11-11T16:58:08Z", "commit": {"oid": "e77a26868266dc8cddcf66c8ebd16696f2b8048c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjo1ODowOFrOHxV3rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjo1ODowOFrOHxV3rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUwMDU5MA==", "bodyText": "So the name Index is really clear what it is about.  But the name OpaqueIndex doesn't mean anything.\nI'd prefer either StringSet or to just use an Index<Void> as it will probably internally use the same impl anyway,", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r521500590", "createdAt": "2020-11-11T16:58:08Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/OpaqueIndex.java", "diffHunk": "@@ -0,0 +1,86 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+public interface OpaqueIndex", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77a26868266dc8cddcf66c8ebd16696f2b8048c"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MzYyMTA3", "url": "https://github.com/eclipse/jetty.project/pull/5566#pullrequestreview-528362107", "createdAt": "2020-11-11T17:00:29Z", "commit": {"oid": "e77a26868266dc8cddcf66c8ebd16696f2b8048c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzowMDoyOVrOHxV-nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzowMDoyOVrOHxV-nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUwMjM2Nw==", "bodyText": "Again, rather than a whole new class, I'd much rather have an immutable() or mutable() (depending on default) method on the Index.Builder.  Just like the JVM collections, they all have the mutable APIs.", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r521502367", "createdAt": "2020-11-11T17:00:29Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/MutableIndex.java", "diffHunk": "@@ -0,0 +1,102 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public interface MutableIndex<V> extends Index<V>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77a26868266dc8cddcf66c8ebd16696f2b8048c"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63326c1707d86e050e5f412e3ebca8a27cc1a730", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/63326c1707d86e050e5f412e3ebca8a27cc1a730", "committedDate": "2020-11-23T10:42:19Z", "message": "let the tries figure out their capacity when given a map in the ctor\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}, "afterCommit": {"oid": "09f9887bc4aae5ced1a81b39b8d3a54db7b40c1c", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/09f9887bc4aae5ced1a81b39b8d3a54db7b40c1c", "committedDate": "2020-11-23T11:31:28Z", "message": "let the tries figure out their capacity when given a map in the ctor\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57914036727ea2490ea7ba074b0fce6e62f794c2", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/57914036727ea2490ea7ba074b0fce6e62f794c2", "committedDate": "2020-11-23T11:43:57Z", "message": "fix test\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}, "afterCommit": {"oid": "882282c38fe6996e67e18ae7e40cf5695d72f22f", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/882282c38fe6996e67e18ae7e40cf5695d72f22f", "committedDate": "2020-11-23T13:56:54Z", "message": "tries refactoring\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "882282c38fe6996e67e18ae7e40cf5695d72f22f", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/882282c38fe6996e67e18ae7e40cf5695d72f22f", "committedDate": "2020-11-23T13:56:54Z", "message": "tries refactoring\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}, "afterCommit": {"oid": "198225c283601b3728c1c878f149a4afa0e65d36", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/198225c283601b3728c1c878f149a4afa0e65d36", "committedDate": "2020-11-23T15:01:39Z", "message": "tries refactoring\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a2691cea341d6c4ee1eec052469582e958a70e5", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/2a2691cea341d6c4ee1eec052469582e958a70e5", "committedDate": "2020-11-23T16:18:00Z", "message": "remove withAllDerivate() builder method\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}, "afterCommit": {"oid": "0e4725b973f9631221a7fa59373498d4dbdb6633", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/0e4725b973f9631221a7fa59373498d4dbdb6633", "committedDate": "2020-11-24T09:38:50Z", "message": "Milestone 1: replace Trie interface and impls usage with new *Index interfaces and Builders\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NDg4NjI4", "url": "https://github.com/eclipse/jetty.project/pull/5566#pullrequestreview-537488628", "createdAt": "2020-11-24T13:26:59Z", "commit": {"oid": "b5a271c2e81396f3efbf752de90ce2e0110ee94d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMzoyNjo1OVrOH5AwUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMzozODozOVrOH5BOFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0MzI0OA==", "bodyText": "We are going to need good javadoc to explain what units capacity is in!\nperhaps also have a fixedCapacity(double) that multiplies the capacity of what is required for anything added to the builder.", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r529543248", "createdAt": "2020-11-24T13:26:59Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/MutableIndex.java", "diffHunk": "@@ -0,0 +1,79 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.Map;\n+\n+public interface MutableIndex<V> extends Index<V>\n+{\n+    boolean isFull();\n+\n+    /**\n+     * Put an entry into the index.\n+     *\n+     * @param s The key for the entry\n+     * @param v The value of the entry\n+     * @return True if the index had capacity to add the field.\n+     */\n+    boolean put(String s, V v);\n+\n+    /**\n+     * Put a value as both a key and a value.\n+     *\n+     * @param v The value and key\n+     * @return True if the Trie had capacity to add the field.\n+     */\n+    boolean put(V v);\n+\n+    void clear();\n+\n+    V remove(String s);\n+\n+    class Builder<V> extends Index.Builder<V>\n+    {\n+        private int fixedCapacity;\n+\n+        Builder(Map<String, V> contents, boolean caseSensitive)\n+        {\n+            super(contents, caseSensitive);\n+        }\n+\n+        public MutableIndex.Builder<V> fixedCapacity(int capacity)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5a271c2e81396f3efbf752de90ce2e0110ee94d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0NDUwNg==", "bodyText": "Also for a mutable Index builder, this would be better named maxCapacity... which might be implemented as a fixedCapacity at max, or might not.", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r529544506", "createdAt": "2020-11-24T13:29:00Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/MutableIndex.java", "diffHunk": "@@ -0,0 +1,79 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.Map;\n+\n+public interface MutableIndex<V> extends Index<V>\n+{\n+    boolean isFull();\n+\n+    /**\n+     * Put an entry into the index.\n+     *\n+     * @param s The key for the entry\n+     * @param v The value of the entry\n+     * @return True if the index had capacity to add the field.\n+     */\n+    boolean put(String s, V v);\n+\n+    /**\n+     * Put a value as both a key and a value.\n+     *\n+     * @param v The value and key\n+     * @return True if the Trie had capacity to add the field.\n+     */\n+    boolean put(V v);\n+\n+    void clear();\n+\n+    V remove(String s);\n+\n+    class Builder<V> extends Index.Builder<V>\n+    {\n+        private int fixedCapacity;\n+\n+        Builder(Map<String, V> contents, boolean caseSensitive)\n+        {\n+            super(contents, caseSensitive);\n+        }\n+\n+        public MutableIndex.Builder<V> fixedCapacity(int capacity)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0MzI0OA=="}, "originalCommit": {"oid": "b5a271c2e81396f3efbf752de90ce2e0110ee94d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0ODU1MA==", "bodyText": "This is not the correct algorithm as common roots of keys share nodes.  See the one I posted earlier", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r529548550", "createdAt": "2020-11-24T13:35:09Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ArrayTrie.java", "diffHunk": "@@ -126,14 +122,40 @@ public ArrayTrie()\n      * store \"bar\" and \"bat\".\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public ArrayTrie(int capacity)\n+    ArrayTrie(int capacity)\n     {\n         super(true);\n+        capacity++;\n         _value = (V[])new Object[capacity];\n-        _rowIndex = new char[capacity * 32];\n+        _rowIndex = new char[capacity * ROW_SIZE];\n         _key = new String[capacity];\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    ArrayTrie(Map<String, V> initialValues)\n+    {\n+        super(true);\n+        int capacity = requiredCapacity(initialValues.keySet()) + 1;\n+        _value = (V[])new Object[capacity];\n+        _rowIndex = new char[capacity * ROW_SIZE];\n+        _key = new String[capacity];\n+        for (Map.Entry<String, V> entry : initialValues.entrySet())\n+        {\n+            if (!put(entry.getKey(), entry.getValue()))\n+                throw new AssertionError(\"Invalid capacity calculated (\" + capacity + \") at '\" + entry + \"' for \" + initialValues);\n+        }\n+    }\n+\n+    static int requiredCapacity(Set<String> keys)\n+    {\n+        int total = 0;\n+        for (String key : keys)\n+        {\n+            total += key.length() + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5a271c2e81396f3efbf752de90ce2e0110ee94d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MDg2OQ==", "bodyText": "This will create an unbounded shared cache!\nShould be something like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final MutableIndex<HttpField> NO_CACHE = new Index.Builder<HttpField>()\n          \n          \n            \n                    .caseSensitive(false)\n          \n          \n            \n                    .mutable()\n          \n          \n            \n                    .build();\n          \n          \n            \n                private static final MutableIndex<HttpField> NO_CACHE = new Index.Builder<HttpField>()\n          \n          \n            \n                    .caseSensitive(false)\n          \n          \n            \n                    .mutable()\n          \n          \n            \n                    .maxCapacity(0)\n          \n          \n            \n                    .build();\n          \n      \n    \n    \n  \n\nHopefully the builder will be clever when is sees a maxCapacity of 0 and return an EmptyIndex impl", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r529550869", "createdAt": "2020-11-24T13:38:39Z", "author": {"login": "gregw"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java", "diffHunk": "@@ -106,8 +107,73 @@\n      * determine the header name even if the name:value combination is not cached\n      * </ul>\n      */\n-    public static final Trie<HttpField> CACHE = new ArrayTrie<>(2048);\n-    private static final Trie<HttpField> NO_CACHE = Trie.empty(true);\n+    public static final Index<HttpField> CACHE = new Index.Builder<HttpField>()\n+        .caseSensitive(false)\n+        .with(new HttpField(HttpHeader.CONNECTION, HttpHeaderValue.CLOSE))\n+        .with(new HttpField(HttpHeader.CONNECTION, HttpHeaderValue.KEEP_ALIVE))\n+        .with(new HttpField(HttpHeader.CONNECTION, HttpHeaderValue.UPGRADE))\n+        .with(new HttpField(HttpHeader.ACCEPT_ENCODING, \"gzip\"))\n+        .with(new HttpField(HttpHeader.ACCEPT_ENCODING, \"gzip, deflate\"))\n+        .with(new HttpField(HttpHeader.ACCEPT_ENCODING, \"gzip, deflate, br\"))\n+        .with(new HttpField(HttpHeader.ACCEPT_ENCODING, \"gzip,deflate,sdch\"))\n+        .with(new HttpField(HttpHeader.ACCEPT_LANGUAGE, \"en-US,enq=0.5\"))\n+        .with(new HttpField(HttpHeader.ACCEPT_LANGUAGE, \"en-GB,en-USq=0.8,enq=0.6\"))\n+        .with(new HttpField(HttpHeader.ACCEPT_LANGUAGE, \"en-AU,enq=0.9,it-ITq=0.8,itq=0.7,en-GBq=0.6,en-USq=0.5\"))\n+        .with(new HttpField(HttpHeader.ACCEPT_CHARSET, \"ISO-8859-1,utf-8q=0.7,*q=0.3\"))\n+        .with(new HttpField(HttpHeader.ACCEPT, \"*/*\"))\n+        .with(new HttpField(HttpHeader.ACCEPT, \"image/png,image/*q=0.8,*/*q=0.5\"))\n+        .with(new HttpField(HttpHeader.ACCEPT, \"text/html,application/xhtml+xml,application/xmlq=0.9,*/*q=0.8\"))\n+        .with(new HttpField(HttpHeader.ACCEPT, \"text/html,application/xhtml+xml,application/xmlq=0.9,image/webp,image/apng,*/*q=0.8\"))\n+        .with(new HttpField(HttpHeader.ACCEPT_RANGES, HttpHeaderValue.BYTES))\n+        .with(new HttpField(HttpHeader.PRAGMA, \"no-cache\"))\n+        .with(new HttpField(HttpHeader.CACHE_CONTROL, \"private, no-cache, no-cache=Set-Cookie, proxy-revalidate\"))\n+        .with(new HttpField(HttpHeader.CACHE_CONTROL, \"no-cache\"))\n+        .with(new HttpField(HttpHeader.CACHE_CONTROL, \"max-age=0\"))\n+        .with(new HttpField(HttpHeader.CONTENT_LENGTH, \"0\"))\n+        .with(new HttpField(HttpHeader.CONTENT_ENCODING, \"gzip\"))\n+        .with(new HttpField(HttpHeader.CONTENT_ENCODING, \"deflate\"))\n+        .with(new HttpField(HttpHeader.TRANSFER_ENCODING, \"chunked\"))\n+        .with(new HttpField(HttpHeader.EXPIRES, \"Fri, 01 Jan 1990 00:00:00 GMT\"))\n+        .withAll(() ->\n+        {\n+            Map<String, HttpField> map = new LinkedHashMap<>();\n+            // Add common Content types as fields\n+            for (String type : new String[]{\n+                \"text/plain\", \"text/html\", \"text/xml\", \"text/json\", \"application/json\", \"application/x-www-form-urlencoded\"\n+            })\n+            {\n+                HttpField field = new PreEncodedHttpField(HttpHeader.CONTENT_TYPE, type);\n+                map.put(field.toString(), field);\n+\n+                for (String charset : new String[]{\"utf-8\", \"iso-8859-1\"})\n+                {\n+                    PreEncodedHttpField field1 = new PreEncodedHttpField(HttpHeader.CONTENT_TYPE, type + \";charset=\" + charset);\n+                    map.put(field1.toString(), field1);\n+                    PreEncodedHttpField field2 = new PreEncodedHttpField(HttpHeader.CONTENT_TYPE, type + \"; charset=\" + charset);\n+                    map.put(field2.toString(), field2);\n+                    PreEncodedHttpField field3 = new PreEncodedHttpField(HttpHeader.CONTENT_TYPE, type + \";charset=\" + charset.toUpperCase(Locale.ENGLISH));\n+                    map.put(field3.toString(), field3);\n+                    PreEncodedHttpField field4 = new PreEncodedHttpField(HttpHeader.CONTENT_TYPE, type + \"; charset=\" + charset.toUpperCase(Locale.ENGLISH));\n+                    map.put(field4.toString(), field4);\n+                }\n+            }\n+            return map;\n+        })\n+        .withAll(() ->\n+        {\n+            Map<String, HttpField> map = new LinkedHashMap<>();\n+            for (HttpHeader h : HttpHeader.values())\n+            {\n+                HttpField httpField = new HttpField(h, (String)null);\n+                map.put(httpField.toString(), httpField);\n+            }\n+            return map;\n+        })\n+        .build();\n+    private static final MutableIndex<HttpField> NO_CACHE = new Index.Builder<HttpField>()\n+        .caseSensitive(false)\n+        .mutable()\n+        .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5a271c2e81396f3efbf752de90ce2e0110ee94d"}, "originalPosition": 101}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c550183eb2aef26a86bcfc613a94ed6085e2e90", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/2c550183eb2aef26a86bcfc613a94ed6085e2e90", "committedDate": "2020-11-25T08:41:48Z", "message": "get rid of Trie interface\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}, "afterCommit": {"oid": "992342238cf05a743e445059ed20a8511d8ec1d0", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/992342238cf05a743e445059ed20a8511d8ec1d0", "committedDate": "2020-11-25T08:55:02Z", "message": "get rid of Trie interface\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1e30886af34fbb215f6f5c63f5140533a1a8e7f", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/f1e30886af34fbb215f6f5c63f5140533a1a8e7f", "committedDate": "2020-11-25T10:47:14Z", "message": "exact requiredCapacity is now calculated both for ArrayTrie and ArrayTernaryTrie\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}, "afterCommit": {"oid": "7f23b1980cac8df1d7abd2e8899a189404e0c480", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/7f23b1980cac8df1d7abd2e8899a189404e0c480", "committedDate": "2020-11-25T11:46:42Z", "message": "remove duplicates of Index.Mutable\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f23b1980cac8df1d7abd2e8899a189404e0c480", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/7f23b1980cac8df1d7abd2e8899a189404e0c480", "committedDate": "2020-11-25T11:46:42Z", "message": "remove duplicates of Index.Mutable\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}, "afterCommit": {"oid": "343d0486d7d0f33b2b38442edeb953fc50c1bad7", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/343d0486d7d0f33b2b38442edeb953fc50c1bad7", "committedDate": "2020-11-25T11:47:12Z", "message": "remove duplicates of Index.Mutable\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "343d0486d7d0f33b2b38442edeb953fc50c1bad7", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/343d0486d7d0f33b2b38442edeb953fc50c1bad7", "committedDate": "2020-11-25T11:47:12Z", "message": "remove duplicates of Index.Mutable\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}, "afterCommit": {"oid": "be277184979923410785682ec7d16e09b9995fd7", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/be277184979923410785682ec7d16e09b9995fd7", "committedDate": "2020-11-25T12:09:34Z", "message": "remove duplicates of Index.Mutable\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1398919cc06f793ba63c039097d904a206bd65cd", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/1398919cc06f793ba63c039097d904a206bd65cd", "committedDate": "2020-11-25T12:24:41Z", "message": "javadoc\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}, "afterCommit": {"oid": "442f910843024a3a71496b723790ff28cbf4934d", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/442f910843024a3a71496b723790ff28cbf4934d", "committedDate": "2020-11-25T12:45:29Z", "message": "javadoc\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NjQ4MTgz", "url": "https://github.com/eclipse/jetty.project/pull/5566#pullrequestreview-538648183", "createdAt": "2020-11-25T16:05:52Z", "commit": {"oid": "442f910843024a3a71496b723790ff28cbf4934d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjowNTo1MlrOH56QZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoxNTo1N1rOH56rbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ4NTM0OQ==", "bodyText": "This could just be a map, as I think it really should be case sensitive (old mistake)... or even just a string switch in the one place it is used.   But happy to leave for another PR. your call.", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r530485349", "createdAt": "2020-11-25T16:05:52Z", "author": {"login": "gregw"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpGenerator.java", "diffHunk": "@@ -92,13 +91,11 @@\n     private final int _send;\n     private static final int SEND_SERVER = 0x01;\n     private static final int SEND_XPOWEREDBY = 0x02;\n-    private static final Trie<Boolean> ASSUMED_CONTENT_METHODS = new ArrayTrie<>(8);\n-\n-    static\n-    {\n-        ASSUMED_CONTENT_METHODS.put(HttpMethod.POST.asString(), Boolean.TRUE);\n-        ASSUMED_CONTENT_METHODS.put(HttpMethod.PUT.asString(), Boolean.TRUE);\n-    }\n+    private static final Index<Boolean> ASSUMED_CONTENT_METHODS = new Index.Builder<Boolean>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442f910843024a3a71496b723790ff28cbf4934d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5MjI2OA==", "bodyText": "We need to create this lazily only when a with method is called....\neither that or we need a cheaper way for HttpParser to create a cache index on the fly without creating a lot of garbage.\nCurrently that code is:\n                            ? new Index.Builder<HttpField>()\n                            .caseSensitive(false)\n                            .mutable()\n                            .maxCapacity(getHeaderCacheSize())\n                            .build()\nSo even with a lazy contents it is creating two Builders with an int field in one and a boolean plus int in the other...\nPerhaps it would be better to support a short-cut like:\n                            ? new Index.MutableBuilder<HttpField>()\n                            .caseSensitive(false)\n                            .maxCapacity(getHeaderCacheSize())\n                            .build()", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r530492268", "createdAt": "2020-11-25T16:15:57Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -0,0 +1,340 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.nio.ByteBuffer;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+/**\n+ * An immutable String lookup data structure.\n+ * @param <V> the entry type\n+ */\n+public interface Index<V>\n+{\n+    /**\n+     * Get an exact match from a String key\n+     *\n+     * @param s The key\n+     * @return the value for the string key\n+     */\n+    V get(String s);\n+\n+    /**\n+     * Get an exact match from a segment of a ByteBuufer as key\n+     *\n+     * @param b The buffer\n+     * @return The value or null if not found\n+     */\n+    V get(ByteBuffer b);\n+\n+    /**\n+     * Get an exact match from a String key\n+     *\n+     * @param s The key\n+     * @param offset The offset within the string of the key\n+     * @param len the length of the key\n+     * @return the value for the string / offset / length\n+     */\n+    V get(String s, int offset, int len);\n+\n+    /**\n+     * Get an exact match from a segment of a ByteBuufer as key\n+     *\n+     * @param b The buffer\n+     * @param offset The offset within the buffer of the key\n+     * @param len the length of the key\n+     * @return The value or null if not found\n+     */\n+    V get(ByteBuffer b, int offset, int len);\n+\n+    /**\n+     * Get the best match from key in a String.\n+     *\n+     * @param s The string\n+     * @param offset The offset within the string of the key\n+     * @param len the length of the key\n+     * @return The value or null if not found\n+     */\n+    V getBest(String s, int offset, int len);\n+\n+    /**\n+     * Get the best match from key in a byte buffer.\n+     * The key is assumed to by ISO_8859_1 characters.\n+     *\n+     * @param b The buffer\n+     * @param offset The offset within the buffer of the key\n+     * @param len the length of the key\n+     * @return The value or null if not found\n+     */\n+    V getBest(ByteBuffer b, int offset, int len);\n+\n+    /**\n+     * Get the best match from key in a String.\n+     *\n+     * @param s The string\n+     * @return The value or null if not found\n+     */\n+    V getBest(String s);\n+\n+    /**\n+     * Get the best match from key in a byte array.\n+     * The key is assumed to by ISO_8859_1 characters.\n+     *\n+     * @param b The buffer\n+     * @param offset The offset within the array of the key\n+     * @param len the length of the key\n+     * @return The value or null if not found\n+     */\n+    V getBest(byte[] b, int offset, int len);\n+\n+    /**\n+     * Check if the index contains any entry.\n+     *\n+     * @return true if the index does not contain any entry.\n+     */\n+    boolean isEmpty();\n+\n+    /**\n+     * Get the number of entries in the index.\n+     *\n+     * @return the index' entries count.\n+     */\n+    int size();\n+\n+    /**\n+     * Get a {@link Set} of the keys contained in this index.\n+     *\n+     * @return a {@link Set} of the keys contained in this index.\n+     */\n+    Set<String> keySet();\n+\n+    /**\n+     * A mutable String lookup data structure.\n+     * Implementations are not thread-safe.\n+     * @param <V> the entry type\n+     */\n+    interface Mutable<V> extends Index<V>\n+    {\n+        /**\n+         * Put an entry into the index.\n+         *\n+         * @param s The key for the entry\n+         * @param v The value of the entry\n+         * @return True if the index had capacity to add the field.\n+         */\n+        boolean put(String s, V v);\n+\n+        /**\n+         * Put a value as both a key and a value.\n+         *\n+         * @param v The value and key\n+         * @return True if the Trie had capacity to add the field.\n+         */\n+        boolean put(V v);\n+\n+        /**\n+         * Remove an entry from the index.\n+         *\n+         * @param s The key for the entry\n+         * @return The removed value of the entry\n+         */\n+        V remove(String s);\n+\n+        /**\n+         * Remove all entries from the index.\n+         */\n+        void clear();\n+\n+        /**\n+         * Builder of {@link Index.Mutable} instances. Such builder cannot be\n+         * directly created, it is instead returned by calling {@link Index.Builder#mutable()}.\n+         * @param <V> the entry type\n+         */\n+        class Builder<V> extends Index.Builder<V>\n+        {\n+            private int maxCapacity = -1;\n+\n+            Builder(Map<String, V> contents, boolean caseSensitive)\n+            {\n+                super(contents, caseSensitive);\n+            }\n+\n+            /**\n+             * Configure a maximum capacity for the mutable index.\n+             * A negative value means there is no capacity limit and\n+             * the index can grow without limits.\n+             * The default value is -1.\n+             * @param capacity the maximum capacity of the index.\n+             * @return this\n+             */\n+            public Builder<V> maxCapacity(int capacity)\n+            {\n+                this.maxCapacity = capacity;\n+                return this;\n+            }\n+\n+            /**\n+             * Build a {@link Mutable} instance.\n+             * @return a {@link Mutable} instance.\n+             */\n+            public Mutable<V> build()\n+            {\n+                Mutable<V> result;\n+                if (maxCapacity > 0)\n+                    result = new ArrayTernaryTrie<>(!caseSensitive, maxCapacity);\n+                else if (maxCapacity < 0)\n+                    result = new ArrayTernaryTrie.Growing<>(!caseSensitive, 512, 512);\n+                else\n+                    return EmptyTrie.instance(caseSensitive);\n+\n+                for (Map.Entry<String, V> entry : contents.entrySet())\n+                {\n+                    if (!result.put(entry.getKey(), entry.getValue()))\n+                        throw new AssertionError(\"Trie capacity exceeded at \" + entry.getKey());\n+                }\n+                return result;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Builder of {@link Index} instances.\n+     * @param <V> the entry type\n+     */\n+    class Builder<V>\n+    {\n+        Map<String, V> contents;\n+        boolean caseSensitive;\n+\n+        /**\n+         * Create a new index builder instance.\n+         */\n+        public Builder()\n+        {\n+            this(new LinkedHashMap<>(), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442f910843024a3a71496b723790ff28cbf4934d"}, "originalPosition": 234}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NjU4Nzc2", "url": "https://github.com/eclipse/jetty.project/pull/5566#pullrequestreview-538658776", "createdAt": "2020-11-25T16:17:51Z", "commit": {"oid": "442f910843024a3a71496b723790ff28cbf4934d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoxNzo1MVrOH56wWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoxNzo1MVrOH56wWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5MzUyOA==", "bodyText": "See earlier comment about the expense of this. We need to make this as cheap as possible:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        ? new Index.Builder<HttpField>()\n          \n          \n            \n                                        .caseSensitive(false)\n          \n          \n            \n                                        .mutable()\n          \n          \n            \n                                        .maxCapacity(getHeaderCacheSize())\n          \n          \n            \n                                        .build()\n          \n          \n            \n                                        ? new Index.MutableBuilder<HttpField>()\n          \n          \n            \n                                        .caseSensitive(false)\n          \n          \n            \n                                        .maxCapacity(getHeaderCacheSize())\n          \n          \n            \n                                        .build()", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r530493528", "createdAt": "2020-11-25T16:17:51Z", "author": {"login": "gregw"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java", "diffHunk": "@@ -1052,14 +1065,22 @@ else if (_endOfContent == EndOfContent.CHUNKED_CONTENT)\n                     if (_fieldCache == null)\n                     {\n                         _fieldCache = (getHeaderCacheSize() > 0 && (_version != null && _version == HttpVersion.HTTP_1_1))\n-                            ? new ArrayTernaryTrie<>(getHeaderCacheSize())\n+                            ? new Index.Builder<HttpField>()\n+                            .caseSensitive(false)\n+                            .mutable()\n+                            .maxCapacity(getHeaderCacheSize())\n+                            .build()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442f910843024a3a71496b723790ff28cbf4934d"}, "originalPosition": 181}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NjYyNDcw", "url": "https://github.com/eclipse/jetty.project/pull/5566#pullrequestreview-538662470", "createdAt": "2020-11-25T16:22:05Z", "commit": {"oid": "442f910843024a3a71496b723790ff28cbf4934d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoyMjowNVrOH567zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoyMjowNVrOH567zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5NjQ2MQ==", "bodyText": "Hmmmm not having isFull changes this a bit... plus I;m not sure it is right.  Maybe something like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (_field == null)\n          \n          \n            \n                                {\n          \n          \n            \n                                    HttpField field = new HttpField(_header, caseInsensitiveHeader(_headerString, _header.asString()), _valueString);\n          \n          \n            \n                                    if (_fieldCache.put(field))\n          \n          \n            \n                                        _field = field;\n          \n          \n            \n                                }\n          \n          \n            \n                                else\n          \n          \n            \n                                if (_field == null)\n          \n          \n            \n                                    _field = new HttpField(_header, caseInsensitiveHeader(_headerString, _header.asString()), _valueString);\n          \n          \n            \n                                if (!_fieldCache.put(field))\n          \n          \n            \n                                {\n          \n          \n            \n                                    _fieldCache.clear();\n          \n          \n            \n                                    _fieldCache.put(field);\n          \n          \n            \n                                }", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r530496461", "createdAt": "2020-11-25T16:22:05Z", "author": {"login": "gregw"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java", "diffHunk": "@@ -1052,14 +1065,22 @@ else if (_endOfContent == EndOfContent.CHUNKED_CONTENT)\n                     if (_fieldCache == null)\n                     {\n                         _fieldCache = (getHeaderCacheSize() > 0 && (_version != null && _version == HttpVersion.HTTP_1_1))\n-                            ? new ArrayTernaryTrie<>(getHeaderCacheSize())\n+                            ? new Index.Builder<HttpField>()\n+                            .caseSensitive(false)\n+                            .mutable()\n+                            .maxCapacity(getHeaderCacheSize())\n+                            .build()\n                             : NO_CACHE;\n                     }\n \n-                    if (!_fieldCache.isFull())\n+                    if (_field == null)\n+                    {\n+                        HttpField field = new HttpField(_header, caseInsensitiveHeader(_headerString, _header.asString()), _valueString);\n+                        if (_fieldCache.put(field))\n+                            _field = field;\n+                    }\n+                    else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442f910843024a3a71496b723790ff28cbf4934d"}, "originalPosition": 192}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NjY0NTI5", "url": "https://github.com/eclipse/jetty.project/pull/5566#pullrequestreview-538664529", "createdAt": "2020-11-25T16:24:20Z", "commit": {"oid": "442f910843024a3a71496b723790ff28cbf4934d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoyNDoyMVrOH57BuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoyNDoyMVrOH57BuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5Nzk3Nw==", "bodyText": "Can you use <>\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Index.Mutable<MappedResource<E>> _exactMap = new Index.Builder<MappedResource<E>>()\n          \n          \n            \n                private final Index.Mutable<MappedResource<E>> _exactMap = new Index.Builder<>()", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r530497977", "createdAt": "2020-11-25T16:24:21Z", "author": {"login": "gregw"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/PathMappings.java", "diffHunk": "@@ -49,9 +48,18 @@\n     private static final Logger LOG = LoggerFactory.getLogger(PathMappings.class);\n     private final Set<MappedResource<E>> _mappings = new TreeSet<>(Comparator.comparing(MappedResource::getPathSpec));\n \n-    private Trie<MappedResource<E>> _exactMap = new ArrayTernaryTrie<>(false);\n-    private Trie<MappedResource<E>> _prefixMap = new ArrayTernaryTrie<>(false);\n-    private Trie<MappedResource<E>> _suffixMap = new ArrayTernaryTrie<>(false);\n+    private final Index.Mutable<MappedResource<E>> _exactMap = new Index.Builder<MappedResource<E>>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442f910843024a3a71496b723790ff28cbf4934d"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NjY2MzQ5", "url": "https://github.com/eclipse/jetty.project/pull/5566#pullrequestreview-538666349", "createdAt": "2020-11-25T16:26:10Z", "commit": {"oid": "442f910843024a3a71496b723790ff28cbf4934d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoyNjoxMFrOH57G-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoyNjoxMFrOH57G-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5OTMyMA==", "bodyText": "soo much better!", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r530499320", "createdAt": "2020-11-25T16:26:10Z", "author": {"login": "gregw"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/PathMappings.java", "diffHunk": "@@ -230,24 +235,18 @@ public boolean put(PathSpec pathSpec, E resource)\n         {\n             case EXACT:\n                 String exact = pathSpec.getPrefix();\n-                while (exact != null && !_exactMap.put(exact, entry))\n-                {\n-                    _exactMap = new ArrayTernaryTrie<>((ArrayTernaryTrie<MappedResource<E>>)_exactMap, 1.5);\n-                }\n+                if (exact != null)\n+                    _exactMap.put(exact, entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442f910843024a3a71496b723790ff28cbf4934d"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NjY3MTkz", "url": "https://github.com/eclipse/jetty.project/pull/5566#pullrequestreview-538667193", "createdAt": "2020-11-25T16:27:05Z", "commit": {"oid": "442f910843024a3a71496b723790ff28cbf4934d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoyNzowNlrOH57JdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoyNzowNlrOH57JdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5OTk1Nw==", "bodyText": "oops these have been accidentally commented out!", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r530499957", "createdAt": "2020-11-25T16:27:06Z", "author": {"login": "gregw"}, "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Cipher.java", "diffHunk": "@@ -20,323 +20,312 @@\n \n import java.util.Comparator;\n \n-import org.eclipse.jetty.util.ArrayTrie;\n-import org.eclipse.jetty.util.Trie;\n+import org.eclipse.jetty.util.Index;\n \n public class HTTP2Cipher\n {\n     public static final Comparator<String> COMPARATOR = new CipherComparator();\n \n-    private static final Trie<Boolean> __blackProtocols = new ArrayTrie<>(6 * 5);\n-    private static final Trie<Boolean> __blackCiphers = new ArrayTrie<>(275 * 40);\n+    private static final Index<Boolean> __blackProtocols = new Index.Builder<Boolean>()\n+        .caseSensitive(false)\n+        .with(\"TLSv1.2\", Boolean.TRUE)\n+        .with(\"TLSv1.1\", Boolean.TRUE)\n+        .with(\"TLSv1\", Boolean.TRUE)\n+        .with(\"SSL\", Boolean.TRUE)\n+        .with(\"SSLv2\", Boolean.TRUE)\n+        .with(\"SSLv3\", Boolean.TRUE)\n+        .build();\n \n-    static String[] _xxx;\n-\n-    static\n-    {\n-        String[] protocols = {\"TLSv1.2\", \"TLSv1.1\", \"TLSv1\", \"SSL\", \"SSLv2\", \"SSLv3\"};\n-        for (String p : protocols)\n-        {\n-            __blackProtocols.put(p, Boolean.TRUE);\n-        }\n-\n-        String[] ciphers =\n-        {\n-            \"TLS_NULL_WITH_NULL_NULL\",\n-            // \"TLS_RSA_WITH_NULL_MD5\",\n-            \"TLS_RSA_WITH_NULL_SHA\",\n-            \"TLS_RSA_EXPORT_WITH_RC4_40_MD5\"/*,\n-            \"TLS_RSA_WITH_RC4_128_MD5\",\n-            \"TLS_RSA_WITH_RC4_128_SHA\",\n-            \"TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5\",\n-            \"TLS_RSA_WITH_IDEA_CBC_SHA\",\n-            \"TLS_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n-            \"TLS_RSA_WITH_DES_CBC_SHA\",\n-            \"TLS_RSA_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA\",\n-            \"TLS_DH_DSS_WITH_DES_CBC_SHA\",\n-            \"TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n-            \"TLS_DH_RSA_WITH_DES_CBC_SHA\",\n-            \"TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA\",\n-            \"TLS_DHE_DSS_WITH_DES_CBC_SHA\",\n-            \"TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n-            \"TLS_DHE_RSA_WITH_DES_CBC_SHA\",\n-            \"TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_DH_anon_EXPORT_WITH_RC4_40_MD5\",\n-            \"TLS_DH_anon_WITH_RC4_128_MD5\",\n-            \"TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA\",\n-            \"TLS_DH_anon_WITH_DES_CBC_SHA\",\n-            \"TLS_DH_anon_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_KRB5_WITH_DES_CBC_SHA\",\n-            \"TLS_KRB5_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_KRB5_WITH_RC4_128_SHA\",\n-            \"TLS_KRB5_WITH_IDEA_CBC_SHA\",\n-            \"TLS_KRB5_WITH_DES_CBC_MD5\",\n-            \"TLS_KRB5_WITH_3DES_EDE_CBC_MD5\",\n-            \"TLS_KRB5_WITH_RC4_128_MD5\",\n-            \"TLS_KRB5_WITH_IDEA_CBC_MD5\",\n-            \"TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA\",\n-            \"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA\",\n-            \"TLS_KRB5_EXPORT_WITH_RC4_40_SHA\",\n-            \"TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5\",\n-            \"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5\",\n-            \"TLS_KRB5_EXPORT_WITH_RC4_40_MD5\",\n-            \"TLS_PSK_WITH_NULL_SHA\",\n-            \"TLS_DHE_PSK_WITH_NULL_SHA\",\n-            \"TLS_RSA_PSK_WITH_NULL_SHA\",\n-            \"TLS_RSA_WITH_AES_128_CBC_SHA\",\n-            \"TLS_DH_DSS_WITH_AES_128_CBC_SHA\",\n-            \"TLS_DH_RSA_WITH_AES_128_CBC_SHA\",\n-            \"TLS_DHE_DSS_WITH_AES_128_CBC_SHA\",\n-            \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\",\n-            \"TLS_DH_anon_WITH_AES_128_CBC_SHA\",\n-            \"TLS_RSA_WITH_AES_256_CBC_SHA\",\n-            \"TLS_DH_DSS_WITH_AES_256_CBC_SHA\",\n-            \"TLS_DH_RSA_WITH_AES_256_CBC_SHA\",\n-            \"TLS_DHE_DSS_WITH_AES_256_CBC_SHA\",\n-            \"TLS_DHE_RSA_WITH_AES_256_CBC_SHA\",\n-            \"TLS_DH_anon_WITH_AES_256_CBC_SHA\",\n-            \"TLS_RSA_WITH_NULL_SHA256\",\n-            \"TLS_RSA_WITH_AES_128_CBC_SHA256\",\n-            \"TLS_RSA_WITH_AES_256_CBC_SHA256\",\n-            \"TLS_DH_DSS_WITH_AES_128_CBC_SHA256\",\n-            \"TLS_DH_RSA_WITH_AES_128_CBC_SHA256\",\n-            \"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256\",\n-            \"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA\",\n-            \"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA\",\n-            \"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA\",\n-            \"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA\",\n-            \"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA\",\n-            \"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA\",\n-            \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256\",\n-            \"TLS_DH_DSS_WITH_AES_256_CBC_SHA256\",\n-            \"TLS_DH_RSA_WITH_AES_256_CBC_SHA256\",\n-            \"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256\",\n-            \"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256\",\n-            \"TLS_DH_anon_WITH_AES_128_CBC_SHA256\",\n-            \"TLS_DH_anon_WITH_AES_256_CBC_SHA256\",\n-            \"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA\",\n-            \"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA\",\n-            \"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA\",\n-            \"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA\",\n-            \"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA\",\n-            \"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA\",\n-            \"TLS_PSK_WITH_RC4_128_SHA\",\n-            \"TLS_PSK_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_PSK_WITH_AES_128_CBC_SHA\",\n-            \"TLS_PSK_WITH_AES_256_CBC_SHA\",\n-            \"TLS_DHE_PSK_WITH_RC4_128_SHA\",\n-            \"TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_DHE_PSK_WITH_AES_128_CBC_SHA\",\n-            \"TLS_DHE_PSK_WITH_AES_256_CBC_SHA\",\n-            \"TLS_RSA_PSK_WITH_RC4_128_SHA\",\n-            \"TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_RSA_PSK_WITH_AES_128_CBC_SHA\",\n-            \"TLS_RSA_PSK_WITH_AES_256_CBC_SHA\",\n-            \"TLS_RSA_WITH_SEED_CBC_SHA\",\n-            \"TLS_DH_DSS_WITH_SEED_CBC_SHA\",\n-            \"TLS_DH_RSA_WITH_SEED_CBC_SHA\",\n-            \"TLS_DHE_DSS_WITH_SEED_CBC_SHA\",\n-            \"TLS_DHE_RSA_WITH_SEED_CBC_SHA\",\n-            \"TLS_DH_anon_WITH_SEED_CBC_SHA\",\n-            \"TLS_RSA_WITH_AES_128_GCM_SHA256\",\n-            \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n-            \"TLS_DH_RSA_WITH_AES_128_GCM_SHA256\",\n-            \"TLS_DH_RSA_WITH_AES_256_GCM_SHA384\",\n-            \"TLS_DH_DSS_WITH_AES_128_GCM_SHA256\",\n-            \"TLS_DH_DSS_WITH_AES_256_GCM_SHA384\",\n-            \"TLS_DH_anon_WITH_AES_128_GCM_SHA256\",\n-            \"TLS_DH_anon_WITH_AES_256_GCM_SHA384\",\n-            \"TLS_PSK_WITH_AES_128_GCM_SHA256\",\n-            \"TLS_PSK_WITH_AES_256_GCM_SHA384\",\n-            \"TLS_RSA_PSK_WITH_AES_128_GCM_SHA256\",\n-            \"TLS_RSA_PSK_WITH_AES_256_GCM_SHA384\",\n-            \"TLS_PSK_WITH_AES_128_CBC_SHA256\",\n-            \"TLS_PSK_WITH_AES_256_CBC_SHA384\",\n-            \"TLS_PSK_WITH_NULL_SHA256\",\n-            \"TLS_PSK_WITH_NULL_SHA384\",\n-            \"TLS_DHE_PSK_WITH_AES_128_CBC_SHA256\",\n-            \"TLS_DHE_PSK_WITH_AES_256_CBC_SHA384\",\n-            \"TLS_DHE_PSK_WITH_NULL_SHA256\",\n-            \"TLS_DHE_PSK_WITH_NULL_SHA384\",\n-            \"TLS_RSA_PSK_WITH_AES_128_CBC_SHA256\",\n-            \"TLS_RSA_PSK_WITH_AES_256_CBC_SHA384\",\n-            \"TLS_RSA_PSK_WITH_NULL_SHA256\",\n-            \"TLS_RSA_PSK_WITH_NULL_SHA384\",\n-            \"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n-            \"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256\",\n-            \"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n-            \"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256\",\n-            \"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n-            \"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256\",\n-            \"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256\",\n-            \"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256\",\n-            \"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256\",\n-            \"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256\",\n-            \"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256\",\n-            \"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256\",\n-            \"TLS_EMPTY_RENEGOTIATION_INFO_SCSV\",\n-            \"TLS_ECDH_ECDSA_WITH_NULL_SHA\",\n-            \"TLS_ECDH_ECDSA_WITH_RC4_128_SHA\",\n-            \"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA\",\n-            \"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA\",\n-            \"TLS_ECDHE_ECDSA_WITH_NULL_SHA\",\n-            \"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\",\n-            \"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\",\n-            \"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\",\n-            \"TLS_ECDH_RSA_WITH_NULL_SHA\",\n-            \"TLS_ECDH_RSA_WITH_RC4_128_SHA\",\n-            \"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA\",\n-            \"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA\",\n-            \"TLS_ECDHE_RSA_WITH_NULL_SHA\",\n-            \"TLS_ECDHE_RSA_WITH_RC4_128_SHA\",\n-            \"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",\n-            \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",\n-            \"TLS_ECDH_anon_WITH_NULL_SHA\",\n-            \"TLS_ECDH_anon_WITH_RC4_128_SHA\",\n-            \"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_ECDH_anon_WITH_AES_128_CBC_SHA\",\n-            \"TLS_ECDH_anon_WITH_AES_256_CBC_SHA\",\n-            \"TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_SRP_SHA_WITH_AES_128_CBC_SHA\",\n-            \"TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA\",\n-            \"TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA\",\n-            \"TLS_SRP_SHA_WITH_AES_256_CBC_SHA\",\n-            \"TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA\",\n-            \"TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA\",\n-            \"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\",\n-            \"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384\",\n-            \"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256\",\n-            \"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384\",\n-            \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",\n-            \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",\n-            \"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256\",\n-            \"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384\",\n-            \"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256\",\n-            \"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\",\n-            \"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256\",\n-            \"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384\",\n-            \"TLS_ECDHE_PSK_WITH_RC4_128_SHA\",\n-            \"TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA\",\n-            \"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA\",\n-            \"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA\",\n-            \"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256\",\n-            \"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384\",\n-            \"TLS_ECDHE_PSK_WITH_NULL_SHA\",\n-            \"TLS_ECDHE_PSK_WITH_NULL_SHA256\",\n-            \"TLS_ECDHE_PSK_WITH_NULL_SHA384\",\n-            \"TLS_RSA_WITH_ARIA_128_CBC_SHA256\",\n-            \"TLS_RSA_WITH_ARIA_256_CBC_SHA384\",\n-            \"TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256\",\n-            \"TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384\",\n-            \"TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256\",\n-            \"TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384\",\n-            \"TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256\",\n-            \"TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384\",\n-            \"TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256\",\n-            \"TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384\",\n-            \"TLS_DH_anon_WITH_ARIA_128_CBC_SHA256\",\n-            \"TLS_DH_anon_WITH_ARIA_256_CBC_SHA384\",\n-            \"TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256\",\n-            \"TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384\",\n-            \"TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256\",\n-            \"TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384\",\n-            \"TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256\",\n-            \"TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384\",\n-            \"TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256\",\n-            \"TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384\",\n-            \"TLS_RSA_WITH_ARIA_128_GCM_SHA256\",\n-            \"TLS_RSA_WITH_ARIA_256_GCM_SHA384\",\n-            \"TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256\",\n-            \"TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384\",\n-            \"TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256\",\n-            \"TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384\",\n-            \"TLS_DH_anon_WITH_ARIA_128_GCM_SHA256\",\n-            \"TLS_DH_anon_WITH_ARIA_256_GCM_SHA384\",\n-            \"TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256\",\n-            \"TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384\",\n-            \"TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256\",\n-            \"TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384\",\n-            \"TLS_PSK_WITH_ARIA_128_CBC_SHA256\",\n-            \"TLS_PSK_WITH_ARIA_256_CBC_SHA384\",\n-            \"TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256\",\n-            \"TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384\",\n-            \"TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256\",\n-            \"TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384\",\n-            \"TLS_PSK_WITH_ARIA_128_GCM_SHA256\",\n-            \"TLS_PSK_WITH_ARIA_256_GCM_SHA384\",\n-            \"TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256\",\n-            \"TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384\",\n-            \"TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256\",\n-            \"TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384\",\n-            \"TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\",\n-            \"TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\",\n-            \"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\",\n-            \"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\",\n-            \"TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n-            \"TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384\",\n-            \"TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256\",\n-            \"TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384\",\n-            \"TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256\",\n-            \"TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384\",\n-            \"TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256\",\n-            \"TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384\",\n-            \"TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256\",\n-            \"TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384\",\n-            \"TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256\",\n-            \"TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384\",\n-            \"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256\",\n-            \"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384\",\n-            \"TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256\",\n-            \"TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384\",\n-            \"TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256\",\n-            \"TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384\",\n-            \"TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256\",\n-            \"TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384\",\n-            \"TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256\",\n-            \"TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384\",\n-            \"TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\",\n-            \"TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\",\n-            \"TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256\",\n-            \"TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384\",\n-            \"TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\",\n-            \"TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\",\n-            \"TLS_RSA_WITH_AES_128_CCM\",\n-            \"TLS_RSA_WITH_AES_256_CCM\",\n-            \"TLS_RSA_WITH_AES_128_CCM_8\",\n-            \"TLS_RSA_WITH_AES_256_CCM_8\",\n-            \"TLS_PSK_WITH_AES_128_CCM\",\n-            \"TLS_PSK_WITH_AES_256_CCM\",\n-            \"TLS_PSK_WITH_AES_128_CCM_8\",\n-            \"TLS_PSK_WITH_AES_256_CCM_8\"\n-            */\n-        };\n-        _xxx = ciphers;\n-        for (String c : ciphers)\n-        {\n-            __blackCiphers.put(c, Boolean.TRUE);\n-        }\n-    }\n+    private static final Index<Boolean> __blackCiphers = new Index.Builder<Boolean>()\n+        .caseSensitive(false)\n+        .with(\"TLS_NULL_WITH_NULL_NULL\", Boolean.TRUE)\n+//        .with(\"TLS_RSA_WITH_NULL_MD5\", Boolean.TRUE)\n+        .with(\"TLS_RSA_WITH_NULL_SHA\", Boolean.TRUE)\n+        .with(\"TLS_RSA_EXPORT_WITH_RC4_40_MD5\", Boolean.TRUE)\n+        /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442f910843024a3a71496b723790ff28cbf4934d"}, "originalPosition": 326}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NjczMDkz", "url": "https://github.com/eclipse/jetty.project/pull/5566#pullrequestreview-538673093", "createdAt": "2020-11-25T16:33:53Z", "commit": {"oid": "442f910843024a3a71496b723790ff28cbf4934d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjozMzo1M1rOH57auA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjozMzo1M1rOH57auA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwNDM3Ng==", "bodyText": "Maybe AbstractIndex and the name Trie only applies to real implementations?", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r530504376", "createdAt": "2020-11-25T16:33:53Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/AbstractTrie.java", "diffHunk": "@@ -29,7 +33,7 @@\n  *\n  * @param <V> the type of object that the Trie holds\n  */\n-public abstract class AbstractTrie<V> implements Trie<V>\n+abstract class AbstractTrie<V> implements Index.Mutable<V>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442f910843024a3a71496b723790ff28cbf4934d"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NzQxMTk2", "url": "https://github.com/eclipse/jetty.project/pull/5566#pullrequestreview-538741196", "createdAt": "2020-11-25T18:02:23Z", "commit": {"oid": "df3ca669f01b3ea300cbd5a3ddcec0731e4e8d64"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44a41402658a344fb02be99923dd527c6054de80", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/44a41402658a344fb02be99923dd527c6054de80", "committedDate": "2020-11-26T07:46:28Z", "message": "restore blacklisted ciphers list\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}, "afterCommit": {"oid": "5c561023bb1b049eff19e6354627440e06ad8354", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/5c561023bb1b049eff19e6354627440e06ad8354", "committedDate": "2020-11-26T08:10:43Z", "message": "throw an exception when trying to build a mutable index with maxSize == 0 and some contents\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c561023bb1b049eff19e6354627440e06ad8354", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/5c561023bb1b049eff19e6354627440e06ad8354", "committedDate": "2020-11-26T08:10:43Z", "message": "throw an exception when trying to build a mutable index with maxSize == 0 and some contents\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}, "afterCommit": {"oid": "ea3e3c5a7da0ac4c0773eceef1f89f66a12d33b7", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/ea3e3c5a7da0ac4c0773eceef1f89f66a12d33b7", "committedDate": "2020-11-26T08:12:47Z", "message": "replace Trie interface and impls usage with new *Index interfaces and Builders\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea3e3c5a7da0ac4c0773eceef1f89f66a12d33b7", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/ea3e3c5a7da0ac4c0773eceef1f89f66a12d33b7", "committedDate": "2020-11-26T08:12:47Z", "message": "replace Trie interface and impls usage with new *Index interfaces and Builders\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}, "afterCommit": {"oid": "9a586516745bfce84db440c6852e8bb403daf8d8", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/9a586516745bfce84db440c6852e8bb403daf8d8", "committedDate": "2020-11-26T08:27:28Z", "message": "replace Trie interface and impls usage with new *Index interfaces and Builders\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MTA2NDg1", "url": "https://github.com/eclipse/jetty.project/pull/5566#pullrequestreview-539106485", "createdAt": "2020-11-26T08:53:09Z", "commit": {"oid": "9a586516745bfce84db440c6852e8bb403daf8d8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODo1MzoxMFrOH6Ra9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODo1NzozN1rOH6RlpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg2NDg4NQ==", "bodyText": "Is there a max capacity to ArrayTernaryTrie?  If so we might need to pick which implementation", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r530864885", "createdAt": "2020-11-26T08:53:10Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -0,0 +1,353 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.nio.ByteBuffer;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+/**\n+ * An immutable String lookup data structure.\n+ * @param <V> the entry type\n+ */\n+public interface Index<V>\n+{\n+    /**\n+     * Get an exact match from a String key\n+     *\n+     * @param s The key\n+     * @return the value for the string key\n+     */\n+    V get(String s);\n+\n+    /**\n+     * Get an exact match from a segment of a ByteBuufer as key\n+     *\n+     * @param b The buffer\n+     * @return The value or null if not found\n+     */\n+    V get(ByteBuffer b);\n+\n+    /**\n+     * Get an exact match from a String key\n+     *\n+     * @param s The key\n+     * @param offset The offset within the string of the key\n+     * @param len the length of the key\n+     * @return the value for the string / offset / length\n+     */\n+    V get(String s, int offset, int len);\n+\n+    /**\n+     * Get an exact match from a segment of a ByteBuufer as key\n+     *\n+     * @param b The buffer\n+     * @param offset The offset within the buffer of the key\n+     * @param len the length of the key\n+     * @return The value or null if not found\n+     */\n+    V get(ByteBuffer b, int offset, int len);\n+\n+    /**\n+     * Get the best match from key in a String.\n+     *\n+     * @param s The string\n+     * @param offset The offset within the string of the key\n+     * @param len the length of the key\n+     * @return The value or null if not found\n+     */\n+    V getBest(String s, int offset, int len);\n+\n+    /**\n+     * Get the best match from key in a byte buffer.\n+     * The key is assumed to by ISO_8859_1 characters.\n+     *\n+     * @param b The buffer\n+     * @param offset The offset within the buffer of the key\n+     * @param len the length of the key\n+     * @return The value or null if not found\n+     */\n+    V getBest(ByteBuffer b, int offset, int len);\n+\n+    /**\n+     * Get the best match from key in a String.\n+     *\n+     * @param s The string\n+     * @return The value or null if not found\n+     */\n+    V getBest(String s);\n+\n+    /**\n+     * Get the best match from key in a byte array.\n+     * The key is assumed to by ISO_8859_1 characters.\n+     *\n+     * @param b The buffer\n+     * @param offset The offset within the array of the key\n+     * @param len the length of the key\n+     * @return The value or null if not found\n+     */\n+    V getBest(byte[] b, int offset, int len);\n+\n+    /**\n+     * Check if the index contains any entry.\n+     *\n+     * @return true if the index does not contain any entry.\n+     */\n+    boolean isEmpty();\n+\n+    /**\n+     * Get the number of entries in the index.\n+     *\n+     * @return the index' entries count.\n+     */\n+    int size();\n+\n+    /**\n+     * Get a {@link Set} of the keys contained in this index.\n+     *\n+     * @return a {@link Set} of the keys contained in this index.\n+     */\n+    Set<String> keySet();\n+\n+    /**\n+     * A mutable String lookup data structure.\n+     * Implementations are not thread-safe.\n+     * @param <V> the entry type\n+     */\n+    interface Mutable<V> extends Index<V>\n+    {\n+        /**\n+         * Put an entry into the index.\n+         *\n+         * @param s The key for the entry\n+         * @param v The value of the entry\n+         * @return True if the index had capacity to add the field.\n+         */\n+        boolean put(String s, V v);\n+\n+        /**\n+         * Put a value as both a key and a value.\n+         *\n+         * @param v The value and key\n+         * @return True if the Trie had capacity to add the field.\n+         */\n+        boolean put(V v);\n+\n+        /**\n+         * Remove an entry from the index.\n+         *\n+         * @param s The key for the entry\n+         * @return The removed value of the entry\n+         */\n+        V remove(String s);\n+\n+        /**\n+         * Remove all entries from the index.\n+         */\n+        void clear();\n+\n+        /**\n+         * Builder of {@link Index.Mutable} instances. Such builder cannot be\n+         * directly created, it is instead returned by calling {@link Index.Builder#mutable()}.\n+         * @param <V> the entry type\n+         */\n+        class Builder<V> extends Index.Builder<V>\n+        {\n+            private int maxCapacity = -1;\n+\n+            Builder(boolean caseSensitive, Map<String, V> contents)\n+            {\n+                super(caseSensitive, contents);\n+            }\n+\n+            /**\n+             * Configure a maximum capacity for the mutable index.\n+             * A negative value means there is no capacity limit and\n+             * the index can grow without limits.\n+             * The default value is -1.\n+             * @param capacity the maximum capacity of the index.\n+             * @return this\n+             */\n+            public Builder<V> maxCapacity(int capacity)\n+            {\n+                this.maxCapacity = capacity;\n+                return this;\n+            }\n+\n+            /**\n+             * Build a {@link Mutable} instance.\n+             * @return a {@link Mutable} instance.\n+             */\n+            public Mutable<V> build()\n+            {\n+                if (contents != null && maxCapacity == 0)\n+                    throw new IllegalStateException(\"Cannot create a mutable index with maxCapacity=0 and some contents\");\n+\n+                Mutable<V> result;\n+                if (maxCapacity > 0)\n+                    result = new ArrayTernaryTrie<>(!caseSensitive, maxCapacity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a586516745bfce84db440c6852e8bb403daf8d8"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg2NzI0Ng==", "bodyText": "Is there a reason to use ArrayTrie in any cases?", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r530867246", "createdAt": "2020-11-26T08:57:05Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Index.java", "diffHunk": "@@ -0,0 +1,353 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.nio.ByteBuffer;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+/**\n+ * An immutable String lookup data structure.\n+ * @param <V> the entry type\n+ */\n+public interface Index<V>\n+{\n+    /**\n+     * Get an exact match from a String key\n+     *\n+     * @param s The key\n+     * @return the value for the string key\n+     */\n+    V get(String s);\n+\n+    /**\n+     * Get an exact match from a segment of a ByteBuufer as key\n+     *\n+     * @param b The buffer\n+     * @return The value or null if not found\n+     */\n+    V get(ByteBuffer b);\n+\n+    /**\n+     * Get an exact match from a String key\n+     *\n+     * @param s The key\n+     * @param offset The offset within the string of the key\n+     * @param len the length of the key\n+     * @return the value for the string / offset / length\n+     */\n+    V get(String s, int offset, int len);\n+\n+    /**\n+     * Get an exact match from a segment of a ByteBuufer as key\n+     *\n+     * @param b The buffer\n+     * @param offset The offset within the buffer of the key\n+     * @param len the length of the key\n+     * @return The value or null if not found\n+     */\n+    V get(ByteBuffer b, int offset, int len);\n+\n+    /**\n+     * Get the best match from key in a String.\n+     *\n+     * @param s The string\n+     * @param offset The offset within the string of the key\n+     * @param len the length of the key\n+     * @return The value or null if not found\n+     */\n+    V getBest(String s, int offset, int len);\n+\n+    /**\n+     * Get the best match from key in a byte buffer.\n+     * The key is assumed to by ISO_8859_1 characters.\n+     *\n+     * @param b The buffer\n+     * @param offset The offset within the buffer of the key\n+     * @param len the length of the key\n+     * @return The value or null if not found\n+     */\n+    V getBest(ByteBuffer b, int offset, int len);\n+\n+    /**\n+     * Get the best match from key in a String.\n+     *\n+     * @param s The string\n+     * @return The value or null if not found\n+     */\n+    V getBest(String s);\n+\n+    /**\n+     * Get the best match from key in a byte array.\n+     * The key is assumed to by ISO_8859_1 characters.\n+     *\n+     * @param b The buffer\n+     * @param offset The offset within the array of the key\n+     * @param len the length of the key\n+     * @return The value or null if not found\n+     */\n+    V getBest(byte[] b, int offset, int len);\n+\n+    /**\n+     * Check if the index contains any entry.\n+     *\n+     * @return true if the index does not contain any entry.\n+     */\n+    boolean isEmpty();\n+\n+    /**\n+     * Get the number of entries in the index.\n+     *\n+     * @return the index' entries count.\n+     */\n+    int size();\n+\n+    /**\n+     * Get a {@link Set} of the keys contained in this index.\n+     *\n+     * @return a {@link Set} of the keys contained in this index.\n+     */\n+    Set<String> keySet();\n+\n+    /**\n+     * A mutable String lookup data structure.\n+     * Implementations are not thread-safe.\n+     * @param <V> the entry type\n+     */\n+    interface Mutable<V> extends Index<V>\n+    {\n+        /**\n+         * Put an entry into the index.\n+         *\n+         * @param s The key for the entry\n+         * @param v The value of the entry\n+         * @return True if the index had capacity to add the field.\n+         */\n+        boolean put(String s, V v);\n+\n+        /**\n+         * Put a value as both a key and a value.\n+         *\n+         * @param v The value and key\n+         * @return True if the Trie had capacity to add the field.\n+         */\n+        boolean put(V v);\n+\n+        /**\n+         * Remove an entry from the index.\n+         *\n+         * @param s The key for the entry\n+         * @return The removed value of the entry\n+         */\n+        V remove(String s);\n+\n+        /**\n+         * Remove all entries from the index.\n+         */\n+        void clear();\n+\n+        /**\n+         * Builder of {@link Index.Mutable} instances. Such builder cannot be\n+         * directly created, it is instead returned by calling {@link Index.Builder#mutable()}.\n+         * @param <V> the entry type\n+         */\n+        class Builder<V> extends Index.Builder<V>\n+        {\n+            private int maxCapacity = -1;\n+\n+            Builder(boolean caseSensitive, Map<String, V> contents)\n+            {\n+                super(caseSensitive, contents);\n+            }\n+\n+            /**\n+             * Configure a maximum capacity for the mutable index.\n+             * A negative value means there is no capacity limit and\n+             * the index can grow without limits.\n+             * The default value is -1.\n+             * @param capacity the maximum capacity of the index.\n+             * @return this\n+             */\n+            public Builder<V> maxCapacity(int capacity)\n+            {\n+                this.maxCapacity = capacity;\n+                return this;\n+            }\n+\n+            /**\n+             * Build a {@link Mutable} instance.\n+             * @return a {@link Mutable} instance.\n+             */\n+            public Mutable<V> build()\n+            {\n+                if (contents != null && maxCapacity == 0)\n+                    throw new IllegalStateException(\"Cannot create a mutable index with maxCapacity=0 and some contents\");\n+\n+                Mutable<V> result;\n+                if (maxCapacity > 0)\n+                    result = new ArrayTernaryTrie<>(!caseSensitive, maxCapacity);\n+                else if (maxCapacity < 0)\n+                    result = new ArrayTernaryTrie.Growing<>(!caseSensitive, 512, 512);\n+                else\n+                    result = EmptyTrie.instance(caseSensitive);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a586516745bfce84db440c6852e8bb403daf8d8"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg2NzYyMQ==", "bodyText": "Need to pass in all the context paths and not have this mutable", "url": "https://github.com/eclipse/jetty.project/pull/5566#discussion_r530867621", "createdAt": "2020-11-26T08:57:37Z", "author": {"login": "gregw"}, "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ContextHandlerCollection.java", "diffHunk": "@@ -378,12 +360,15 @@ public String toString()\n     private static class Mapping extends Handlers\n     {\n         private final Map<ContextHandler, Handler> _contextBranches = new HashMap<>();\n-        private final Trie<Map.Entry<String, Branch[]>> _pathBranches;\n+        private final Index.Mutable<Map.Entry<String, Branch[]>> _pathBranches;\n \n-        private Mapping(Handler[] handlers, int capacity)\n+        private Mapping(Handler[] handlers)\n         {\n             super(handlers);\n-            _pathBranches = new ArrayTernaryTrie<>(false, capacity);\n+            _pathBranches = new Index.Builder<Map.Entry<String, Branch[]>>()\n+                .caseSensitive(true)\n+                .mutable()\n+                .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a586516745bfce84db440c6852e8bb403daf8d8"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MTE4NDIw", "url": "https://github.com/eclipse/jetty.project/pull/5566#pullrequestreview-539118420", "createdAt": "2020-11-26T09:07:58Z", "commit": {"oid": "9a586516745bfce84db440c6852e8bb403daf8d8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MzAyMTM5", "url": "https://github.com/eclipse/jetty.project/pull/5566#pullrequestreview-539302139", "createdAt": "2020-11-26T13:11:28Z", "commit": {"oid": "8fe47a7d7b6a1bba7673a77d21f8f32c7b89f69d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa8bd5d8201615b9faacd7675ef97e8adf32167d", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/aa8bd5d8201615b9faacd7675ef97e8adf32167d", "committedDate": "2020-11-26T13:14:16Z", "message": "replace Trie interface and impls usage with new *Index interfaces and Builders\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8fe47a7d7b6a1bba7673a77d21f8f32c7b89f69d", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/8fe47a7d7b6a1bba7673a77d21f8f32c7b89f69d", "committedDate": "2020-11-26T10:44:32Z", "message": "fix checkstyle\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}, "afterCommit": {"oid": "aa8bd5d8201615b9faacd7675ef97e8adf32167d", "author": {"user": {"login": "lorban", "name": "Ludovic Orban"}}, "url": "https://github.com/eclipse/jetty.project/commit/aa8bd5d8201615b9faacd7675ef97e8adf32167d", "committedDate": "2020-11-26T13:14:16Z", "message": "replace Trie interface and impls usage with new *Index interfaces and Builders\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4996, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}