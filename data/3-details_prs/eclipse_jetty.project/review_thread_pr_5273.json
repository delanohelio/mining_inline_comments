{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NTE0OTM3", "number": 5273, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDoyMjozNFrOEj_Xag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjo0MzozN1rOEkQ-Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTczODAyOnYy", "diffSide": "RIGHT", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/FilterHolder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDoyMjozNFrOHSqU8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDoyMjozNFrOHSqU8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMyOTkwNg==", "bodyText": "The ServletHolder does these two operations in the opposite order.  However, I think the order here is correct, so the servlet holder needs to be changed to do the same order.", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489329906", "createdAt": "2020-09-16T10:22:34Z", "author": {"login": "gregw"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/FilterHolder.java", "diffHunk": "@@ -156,13 +161,41 @@ public void doStop()\n \n     @Override\n     public void destroyInstance(Object o)\n-        throws Exception\n     {\n         if (o == null)\n             return;\n-        Filter f = (Filter)o;\n-        f.destroy();\n-        getServletHandler().destroyFilter(f);\n+\n+        Filter filter = (Filter)o;\n+        // destroy the wrapped filter, in case there is special behaviour\n+        filter.destroy();\n+        // need to use the unwrapped filter because lifecycle callbacks such as\n+        // postconstruct and predestroy are based off the classname and the wrapper\n+        // classes are unknown outside the ServletHolder\n+        getServletHandler().destroyFilter(unwrap(filter));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "439d3f9d9e56339ad3b1d8c0bb6580a1b14fa880"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTc0OTA4OnYy", "diffSide": "RIGHT", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/FilterHolder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDoyNTozM1rOHSqbow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDoyNTozM1rOHSqbow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzMTYxOQ==", "bodyText": "I'd be OK with FilterWrapper and changing the existing servlet one to match.", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489331619", "createdAt": "2020-09-16T10:25:33Z", "author": {"login": "gregw"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/FilterHolder.java", "diffHunk": "@@ -264,11 +304,62 @@ public void addMappingForUrlPatterns(EnumSet<DispatcherType> dispatcherTypes, bo\n \n     class Config extends HolderConfig implements FilterConfig\n     {\n-\n         @Override\n         public String getFilterName()\n         {\n             return getName();\n         }\n     }\n+\n+    /**\n+     * Experimental Wrapper mechanism for Filter objects.\n+     * <p>\n+     * Beans in ServletContextHandler or WebAppContext that implement this interface\n+     * will be called to optionally wrap any newly created Filters\n+     * (before their {@link Filter#init(FilterConfig)} method is called)\n+     * </p>\n+     */\n+    public interface WrapperFunction\n+    {\n+        Filter wrapFilter(Filter filter);\n+    }\n+\n+    public static class WrapperFilter implements Filter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "439d3f9d9e56339ad3b1d8c0bb6580a1b14fa880"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTc4OTY3OnYy", "diffSide": "RIGHT", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ListenerHolder.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDozNzoxM1rOHSqz_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTozMjoyOVrOHS2oLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzNzg1NA==", "bodyText": "It would be good to have the bulk of wrap and unwrap in BaseHolder... but I'm struggling to think of how to do this nicely... as getBeans needs a real type.   Maybe we could pass it that type and have a common wrapper function interface:\n    private T wrap(T item, Class<? extends WrapperFunction<T>> wrapperType)\n\ufffc    {\n\ufffc        ServletContextHandler contextHandler = getServletHandler().getServletContextHandler();\n\ufffc        if (contextHandler != null)\n\ufffc        {\n\ufffc            for (WrapperFunction<T> wrapperFunction : contextHandler.getBeans(wrapperType))\n\ufffc            {\n\ufffc                item = wrapperFunction.wrapEventListener(item);\n\ufffc            }\n\ufffc        }\n\ufffc        return item;\n\ufffc    }\nNote sure if that works.... or if it is better... thoughts?", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489337854", "createdAt": "2020-09-16T10:37:13Z", "author": {"login": "gregw"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ListenerHolder.java", "diffHunk": "@@ -126,9 +127,67 @@ public void doStop() throws Exception\n         }\n     }\n \n+    private EventListener wrap(final EventListener listener)\n+    {\n+        EventListener ret = listener;\n+        ServletContextHandler contextHandler = getServletHandler().getServletContextHandler();\n+        if (contextHandler != null)\n+        {\n+            for (ListenerHolder.WrapperFunction wrapperFunction : contextHandler.getBeans(ListenerHolder.WrapperFunction.class))\n+            {\n+                ret = wrapperFunction.wrapEventListener(ret);\n+            }\n+        }\n+        return ret;\n+    }\n+\n+    private static EventListener unwrap(EventListener listener)\n+    {\n+        EventListener unwrapped = listener;\n+        while (ListenerHolder.WrapperEventListener.class.isAssignableFrom(unwrapped.getClass()))\n+        {\n+            unwrapped = ((ListenerHolder.WrapperEventListener)unwrapped).getWrappedListener();\n+        }\n+        return unwrapped;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "439d3f9d9e56339ad3b1d8c0bb6580a1b14fa880"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ4MDc5OQ==", "bodyText": "How about ...\n    protected <C,W> C wrap(final C component, final Class<W> wrapperFunctionType, final BiFunction<W,C,C> function)\n    {\n        C ret = component;\n        ServletContextHandler contextHandler = getServletHandler().getServletContextHandler();\n        if (contextHandler != null)\n        {\n            for (W wrapperFunction : contextHandler.getBeans(wrapperFunctionType))\n            {\n                ret = function.apply(wrapperFunction, ret);\n            }\n        }\n        return ret;\n    }\nWith a call like the following in FilterHolder ...\n_filter = wrap(_filter, FilterHolder.WrapperFunction.class, FilterHolder.WrapperFunction::wrapFilter);", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489480799", "createdAt": "2020-09-16T14:27:02Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ListenerHolder.java", "diffHunk": "@@ -126,9 +127,67 @@ public void doStop() throws Exception\n         }\n     }\n \n+    private EventListener wrap(final EventListener listener)\n+    {\n+        EventListener ret = listener;\n+        ServletContextHandler contextHandler = getServletHandler().getServletContextHandler();\n+        if (contextHandler != null)\n+        {\n+            for (ListenerHolder.WrapperFunction wrapperFunction : contextHandler.getBeans(ListenerHolder.WrapperFunction.class))\n+            {\n+                ret = wrapperFunction.wrapEventListener(ret);\n+            }\n+        }\n+        return ret;\n+    }\n+\n+    private static EventListener unwrap(EventListener listener)\n+    {\n+        EventListener unwrapped = listener;\n+        while (ListenerHolder.WrapperEventListener.class.isAssignableFrom(unwrapped.getClass()))\n+        {\n+            unwrapped = ((ListenerHolder.WrapperEventListener)unwrapped).getWrappedListener();\n+        }\n+        return unwrapped;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzNzg1NA=="}, "originalCommit": {"oid": "439d3f9d9e56339ad3b1d8c0bb6580a1b14fa880"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ4MTUyMw==", "bodyText": "it's abstract > abstract > abstract.\nnot the prettiest thing.\nI kinda like the local wrap methods instead (easier to follow)", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489481523", "createdAt": "2020-09-16T14:27:57Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ListenerHolder.java", "diffHunk": "@@ -126,9 +127,67 @@ public void doStop() throws Exception\n         }\n     }\n \n+    private EventListener wrap(final EventListener listener)\n+    {\n+        EventListener ret = listener;\n+        ServletContextHandler contextHandler = getServletHandler().getServletContextHandler();\n+        if (contextHandler != null)\n+        {\n+            for (ListenerHolder.WrapperFunction wrapperFunction : contextHandler.getBeans(ListenerHolder.WrapperFunction.class))\n+            {\n+                ret = wrapperFunction.wrapEventListener(ret);\n+            }\n+        }\n+        return ret;\n+    }\n+\n+    private static EventListener unwrap(EventListener listener)\n+    {\n+        EventListener unwrapped = listener;\n+        while (ListenerHolder.WrapperEventListener.class.isAssignableFrom(unwrapped.getClass()))\n+        {\n+            unwrapped = ((ListenerHolder.WrapperEventListener)unwrapped).getWrappedListener();\n+        }\n+        return unwrapped;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzNzg1NA=="}, "originalCommit": {"oid": "439d3f9d9e56339ad3b1d8c0bb6580a1b14fa880"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxODU1OA==", "bodyText": "I agree that is too ugly.... let me have a play with it for 15 minutes to see if I can find something simpler....", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489518558", "createdAt": "2020-09-16T15:15:37Z", "author": {"login": "gregw"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ListenerHolder.java", "diffHunk": "@@ -126,9 +127,67 @@ public void doStop() throws Exception\n         }\n     }\n \n+    private EventListener wrap(final EventListener listener)\n+    {\n+        EventListener ret = listener;\n+        ServletContextHandler contextHandler = getServletHandler().getServletContextHandler();\n+        if (contextHandler != null)\n+        {\n+            for (ListenerHolder.WrapperFunction wrapperFunction : contextHandler.getBeans(ListenerHolder.WrapperFunction.class))\n+            {\n+                ret = wrapperFunction.wrapEventListener(ret);\n+            }\n+        }\n+        return ret;\n+    }\n+\n+    private static EventListener unwrap(EventListener listener)\n+    {\n+        EventListener unwrapped = listener;\n+        while (ListenerHolder.WrapperEventListener.class.isAssignableFrom(unwrapped.getClass()))\n+        {\n+            unwrapped = ((ListenerHolder.WrapperEventListener)unwrapped).getWrappedListener();\n+        }\n+        return unwrapped;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzNzg1NA=="}, "originalCommit": {"oid": "439d3f9d9e56339ad3b1d8c0bb6580a1b14fa880"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzMTQzOQ==", "bodyText": "@joakime I've pushed an alternative", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489531439", "createdAt": "2020-09-16T15:32:29Z", "author": {"login": "gregw"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ListenerHolder.java", "diffHunk": "@@ -126,9 +127,67 @@ public void doStop() throws Exception\n         }\n     }\n \n+    private EventListener wrap(final EventListener listener)\n+    {\n+        EventListener ret = listener;\n+        ServletContextHandler contextHandler = getServletHandler().getServletContextHandler();\n+        if (contextHandler != null)\n+        {\n+            for (ListenerHolder.WrapperFunction wrapperFunction : contextHandler.getBeans(ListenerHolder.WrapperFunction.class))\n+            {\n+                ret = wrapperFunction.wrapEventListener(ret);\n+            }\n+        }\n+        return ret;\n+    }\n+\n+    private static EventListener unwrap(EventListener listener)\n+    {\n+        EventListener unwrapped = listener;\n+        while (ListenerHolder.WrapperEventListener.class.isAssignableFrom(unwrapped.getClass()))\n+        {\n+            unwrapped = ((ListenerHolder.WrapperEventListener)unwrapped).getWrappedListener();\n+        }\n+        return unwrapped;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzNzg1NA=="}, "originalCommit": {"oid": "439d3f9d9e56339ad3b1d8c0bb6580a1b14fa880"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzA0Mjk1OnYy", "diffSide": "LEFT", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/FilterHolder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTozOTowOFrOHS261A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTozOTowOFrOHS261A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNjIxMg==", "bodyText": "Should probably move this javadoc detail to the holder specific WrapFunction javadoc.", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489536212", "createdAt": "2020-09-16T15:39:08Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/FilterHolder.java", "diffHunk": "@@ -297,16 +297,8 @@ public String getFilterName()\n      * (before their {@link Filter#init(FilterConfig)} method is called)\n      * </p>\n      */\n-    public interface WrapperFunction\n-    {\n-        /**\n-         * Optionally wrap the Filter.\n-         *\n-         * @param filter the Filter being passed in.\n-         * @return the Filter (extend from {@link FilterHolder.Wrapper} if you do wrap the Filter)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31175e98e59d0c3fcf2d375994584f8eeef907fd"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzA0NDA2OnYy", "diffSide": "LEFT", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ListenerHolder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTozOToxOVrOHS27dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTozOToxOVrOHS27dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNjM3Mg==", "bodyText": "Ditto.", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489536372", "createdAt": "2020-09-16T15:39:19Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ListenerHolder.java", "diffHunk": "@@ -141,17 +141,8 @@ public String toString()\n      * they are used for the first time.\n      * </p>\n      */\n-    public interface WrapperFunction\n-    {\n-        /**\n-         * Optionally wrap the Servlet EventListener.\n-         *\n-         * @param listener the Servlet EventListener being passed in.\n-         * @return the Servlet EventListener (extend from {@link ListenerHolder.Wrapper}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31175e98e59d0c3fcf2d375994584f8eeef907fd"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzA0NDUwOnYy", "diffSide": "LEFT", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTozOToyN1rOHS27ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTozOToyN1rOHS27ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNjQ1MQ==", "bodyText": "This one too.", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489536451", "createdAt": "2020-09-16T15:39:27Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java", "diffHunk": "@@ -1281,16 +1281,8 @@ public UnavailableException getUnavailableException()\n      * (before their {@link Servlet#init(ServletConfig)} method is called)\n      * </p>\n      */\n-    public interface WrapperFunction\n-    {\n-        /**\n-         * Optionally wrap the Servlet.\n-         *\n-         * @param servlet the servlet being passed in.\n-         * @return the servlet (extend from {@link ServletHolder.Wrapper} if you do wrap the Servlet)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31175e98e59d0c3fcf2d375994584f8eeef907fd"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDMyNjc0OnYy", "diffSide": "RIGHT", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/BaseHolder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDo1NTozOFrOHTD5SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMTowODozNlrOHTESlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0ODgwOQ==", "bodyText": "I really don't understand why you have this templated over C when the class itself is already templated over T?\nWhen will C and T ever  be different types?", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489748809", "createdAt": "2020-09-16T20:55:38Z", "author": {"login": "gregw"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/BaseHolder.java", "diffHunk": "@@ -185,6 +186,32 @@ public synchronized boolean isInstance()\n         return _instance != null;\n     }\n \n+    protected <C, W> C wrap(final C component, final Class<W> wrapperFunctionType, final BiFunction<W, C, C> function)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee8b935398109867addfbb1730fc5bc8f8fdf7d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1Mzg4Ng==", "bodyText": "Good point.\nThe protected <C, W> portion was the problem with using <T, W> as that's a local T that hides the BaseHolder<T> declaration.\nI fixed this  in commit c569c87", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489753886", "createdAt": "2020-09-16T21:05:53Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/BaseHolder.java", "diffHunk": "@@ -185,6 +186,32 @@ public synchronized boolean isInstance()\n         return _instance != null;\n     }\n \n+    protected <C, W> C wrap(final C component, final Class<W> wrapperFunctionType, final BiFunction<W, C, C> function)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0ODgwOQ=="}, "originalCommit": {"oid": "aee8b935398109867addfbb1730fc5bc8f8fdf7d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1NTI4NA==", "bodyText": "There was a point in time in this effort where wrap() returned the Wrapped/Wrapper version.\nBut that doesn't allow identity behavior (no wrap).\nOnce that was removed there wasn't a need for <C> anymore.", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489755284", "createdAt": "2020-09-16T21:08:36Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/BaseHolder.java", "diffHunk": "@@ -185,6 +186,32 @@ public synchronized boolean isInstance()\n         return _instance != null;\n     }\n \n+    protected <C, W> C wrap(final C component, final Class<W> wrapperFunctionType, final BiFunction<W, C, C> function)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0ODgwOQ=="}, "originalCommit": {"oid": "aee8b935398109867addfbb1730fc5bc8f8fdf7d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDYyMjMxOnYy", "diffSide": "RIGHT", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/BaseHolder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjo0MzozN1rOHTGqnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzo1Mzo0MFrOHTV3zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5NDIwNw==", "bodyText": "I don't love this signature.... but I'd like it a lot more with javadoc!", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489794207", "createdAt": "2020-09-16T22:43:37Z", "author": {"login": "gregw"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/BaseHolder.java", "diffHunk": "@@ -185,6 +186,38 @@ public synchronized boolean isInstance()\n         return _instance != null;\n     }\n \n+    protected <W> T wrap(final T component, final Class<W> wrapperFunctionType, final BiFunction<W, T, T> function)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d4b92b7ded4ede154df22f452d1f637fda55151"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0MzM0MQ==", "bodyText": "Added javadoc.", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r490043341", "createdAt": "2020-09-17T07:53:40Z", "author": {"login": "joakime"}, "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/BaseHolder.java", "diffHunk": "@@ -185,6 +186,38 @@ public synchronized boolean isInstance()\n         return _instance != null;\n     }\n \n+    protected <W> T wrap(final T component, final Class<W> wrapperFunctionType, final BiFunction<W, T, T> function)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5NDIwNw=="}, "originalCommit": {"oid": "9d4b92b7ded4ede154df22f452d1f637fda55151"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2392, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}