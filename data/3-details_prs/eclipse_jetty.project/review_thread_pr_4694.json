{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMTcyNjg2", "number": 4694, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMzoyNFrODqZS2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyMTo0MlrODqZhtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgxMjExOnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMzoyNFrOF6HQzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMzozMDo0MVrOF6f3kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MDcxOA==", "bodyText": "Do you still need the TODO above?", "url": "https://github.com/eclipse/jetty.project/pull/4694#discussion_r396480718", "createdAt": "2020-03-23T14:13:24Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandler.java", "diffHunk": "@@ -374,7 +374,7 @@ private void assertBasicTypeNotRegistered(byte basicWebSocketType, Object messag\n         try\n         {\n             // TODO: move methodhandle lookup to container?\n-            MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n+            MethodHandles.Lookup lookup = JavaxWebSocketFrameHandlerFactory.getServerMethodHandleLookup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04cc21fe40816b0bab0581960097eb92d2121874"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg4Mzg1Ng==", "bodyText": "I think we can remove it, I don't know why we would want to do this in the container, it seems better to contain the MethodHandle stuff in the FrameHandler.", "url": "https://github.com/eclipse/jetty.project/pull/4694#discussion_r396883856", "createdAt": "2020-03-24T03:30:41Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandler.java", "diffHunk": "@@ -374,7 +374,7 @@ private void assertBasicTypeNotRegistered(byte basicWebSocketType, Object messag\n         try\n         {\n             // TODO: move methodhandle lookup to container?\n-            MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n+            MethodHandles.Lookup lookup = JavaxWebSocketFrameHandlerFactory.getServerMethodHandleLookup();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MDcxOA=="}, "originalCommit": {"oid": "04cc21fe40816b0bab0581960097eb92d2121874"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgxMjkyOnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMzozNFrOF6HRTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMzozNFrOF6HRTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MDg0NQ==", "bodyText": "Ditto.", "url": "https://github.com/eclipse/jetty.project/pull/4694#discussion_r396480845", "createdAt": "2020-03-23T14:13:34Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandler.java", "diffHunk": "@@ -432,7 +432,7 @@ else if (String.class.isAssignableFrom(clazz))\n         try\n         {\n             // TODO: move MethodHandle lookup to container?\n-            MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n+            MethodHandles.Lookup lookup = JavaxWebSocketFrameHandlerFactory.getServerMethodHandleLookup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04cc21fe40816b0bab0581960097eb92d2121874"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgxOTM1OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandlerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxNTowMlrOF6HViA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxNTowMlrOF6HViA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MTkyOA==", "bodyText": "There is an additional  ()} in the javadoc.", "url": "https://github.com/eclipse/jetty.project/pull/4694#discussion_r396481928", "createdAt": "2020-03-23T14:15:02Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandlerFactory.java", "diffHunk": "@@ -704,9 +705,53 @@ private void assertSignatureValid(Class<?> endpointClass, Method method, Class<?\n         }\n     }\n \n-    private MethodHandles.Lookup getMethodHandleLookup(Class<?> endpointClass)\n+    /**\n+     * <p>\n+     * Gives a {@link MethodHandles.Lookup} instance to be used to find methods in server classes.\n+     * For lookups on application classes use {@link #getApplicationMethodHandleLookup(Class)} ()} instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04cc21fe40816b0bab0581960097eb92d2121874"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgyMTY4OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandlerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxNTozMlrOF6HW8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxNTozMlrOF6HW8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MjI5MA==", "bodyText": "Missing description of what it returns.", "url": "https://github.com/eclipse/jetty.project/pull/4694#discussion_r396482290", "createdAt": "2020-03-23T14:15:32Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandlerFactory.java", "diffHunk": "@@ -704,9 +705,53 @@ private void assertSignatureValid(Class<?> endpointClass, Method method, Class<?\n         }\n     }\n \n-    private MethodHandles.Lookup getMethodHandleLookup(Class<?> endpointClass)\n+    /**\n+     * <p>\n+     * Gives a {@link MethodHandles.Lookup} instance to be used to find methods in server classes.\n+     * For lookups on application classes use {@link #getApplicationMethodHandleLookup(Class)} ()} instead.\n+     * </p>\n+     * <p>\n+     * This uses the caller sensitive {@link MethodHandles#lookup()}, this will allow MethodHandle access\n+     * to server classes we need to use and will give access permissions to private methods as well.\n+     * </p>\n+     *\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04cc21fe40816b0bab0581960097eb92d2121874"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzg0OTE3OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-jetty-common/src/main/java/org/eclipse/jetty/websocket/common/JettyWebSocketFrameHandlerFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyMToyOVrOF6HoZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMzozMDo0NlrOF6f3pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4Njc1Nw==", "bodyText": "To avoid duplicating these javadocs, I would rather @see JavaxWebSocketFrameHandlerFactory#getServerMethodHandleLookup().\nSo that if we improve the javadocs, we only do it in one place.\nCheck that we can actually do this @see because it will reference a class in a different module that is not dependent on this one.", "url": "https://github.com/eclipse/jetty.project/pull/4694#discussion_r396486757", "createdAt": "2020-03-23T14:21:29Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-jetty-common/src/main/java/org/eclipse/jetty/websocket/common/JettyWebSocketFrameHandlerFactory.java", "diffHunk": "@@ -456,9 +457,53 @@ private void assertSignatureValid(Class<?> endpointClass, Method method, Class<?\n         throw new InvalidSignatureException(err.toString());\n     }\n \n-    private MethodHandles.Lookup getMethodHandleLookup(Class<?> endpointClass)\n+    /**\n+     * <p>\n+     * Gives a {@link MethodHandles.Lookup} instance to be used to find methods in server classes.\n+     * For lookups on application classes use {@link #getApplicationMethodHandleLookup(Class)} ()} instead.\n+     * </p>\n+     * <p>\n+     * This uses the caller sensitive {@link MethodHandles#lookup()}, this will allow MethodHandle access\n+     * to server classes we need to use and will give access permissions to private methods as well.\n+     * </p>\n+     *\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04cc21fe40816b0bab0581960097eb92d2121874"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg4Mzg3Ng==", "bodyText": "This can't be done, I think they will have to be duplicated.\nSymbol 'org.eclipse.jetty.websocket.javax.common.JavaxWebSocketFrameHandlerFactory' is inaccessible from here.", "url": "https://github.com/eclipse/jetty.project/pull/4694#discussion_r396883876", "createdAt": "2020-03-24T03:30:46Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-websocket/websocket-jetty-common/src/main/java/org/eclipse/jetty/websocket/common/JettyWebSocketFrameHandlerFactory.java", "diffHunk": "@@ -456,9 +457,53 @@ private void assertSignatureValid(Class<?> endpointClass, Method method, Class<?\n         throw new InvalidSignatureException(err.toString());\n     }\n \n-    private MethodHandles.Lookup getMethodHandleLookup(Class<?> endpointClass)\n+    /**\n+     * <p>\n+     * Gives a {@link MethodHandles.Lookup} instance to be used to find methods in server classes.\n+     * For lookups on application classes use {@link #getApplicationMethodHandleLookup(Class)} ()} instead.\n+     * </p>\n+     * <p>\n+     * This uses the caller sensitive {@link MethodHandles#lookup()}, this will allow MethodHandle access\n+     * to server classes we need to use and will give access permissions to private methods as well.\n+     * </p>\n+     *\n+     * @return", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4Njc1Nw=="}, "originalCommit": {"oid": "04cc21fe40816b0bab0581960097eb92d2121874"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzg1MDE1OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-jetty-common/src/main/java/org/eclipse/jetty/websocket/common/JettyWebSocketFrameHandlerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyMTo0MlrOF6Ho-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyMTo0MlrOF6Ho-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4NjkwNw==", "bodyText": "Ditto.", "url": "https://github.com/eclipse/jetty.project/pull/4694#discussion_r396486907", "createdAt": "2020-03-23T14:21:42Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-jetty-common/src/main/java/org/eclipse/jetty/websocket/common/JettyWebSocketFrameHandlerFactory.java", "diffHunk": "@@ -456,9 +457,53 @@ private void assertSignatureValid(Class<?> endpointClass, Method method, Class<?\n         throw new InvalidSignatureException(err.toString());\n     }\n \n-    private MethodHandles.Lookup getMethodHandleLookup(Class<?> endpointClass)\n+    /**\n+     * <p>\n+     * Gives a {@link MethodHandles.Lookup} instance to be used to find methods in server classes.\n+     * For lookups on application classes use {@link #getApplicationMethodHandleLookup(Class)} ()} instead.\n+     * </p>\n+     * <p>\n+     * This uses the caller sensitive {@link MethodHandles#lookup()}, this will allow MethodHandle access\n+     * to server classes we need to use and will give access permissions to private methods as well.\n+     * </p>\n+     *\n+     * @return\n+     */\n+    public static MethodHandles.Lookup getServerMethodHandleLookup()\n     {\n-        return MethodHandles.publicLookup().in(endpointClass);\n+        return MethodHandles.lookup();\n+    }\n+\n+    /**\n+     * <p>\n+     * Gives a {@link MethodHandles.Lookup} instance to be used to find public methods in application classes.\n+     * For lookups on server classes use {@link #getServerMethodHandleLookup()} instead.\n+     * </p>\n+     * <p>\n+     * This uses {@link MethodHandles#publicLookup()} as we only need access to public method of the lookupClass.\n+     * To look up a method on the lookupClass, it must be public and the class must be accessible from this\n+     * module, so if the lookupClass is in a JPMS module it must be exported so that the public methods\n+     * of the lookupClass are accessible outside of the module.\n+     * </p>\n+     * <p>\n+     * The {@link java.lang.invoke.MethodHandles.Lookup#in(Class)} allows us to search specifically\n+     * in the endpoint Class to avoid any potential linkage errors which could occur if the same\n+     * class is present in multiple web apps. Unlike using {@link MethodHandles#publicLookup()}\n+     * using {@link MethodHandles#lookup()} with {@link java.lang.invoke.MethodHandles.Lookup#in(Class)}\n+     * will cause the lookup to lose its public access to the lookup class if they are in different modules.\n+     * </p>\n+     * <p>\n+     * {@link MethodHandles#privateLookupIn(Class, MethodHandles.Lookup)} is also unsuitable because it\n+     * requires the caller module to read the target module, and the target module to open reflective\n+     * access to the lookupClasses private methods. This is possible but requires extra configuration\n+     * to provide private access which is not necessary for the purpose of accessing the public methods.\n+     * </p>\n+     * @param lookupClass the desired lookup class for the new lookup object.\n+     * @return a lookup object to be used to find methods on the lookupClass.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04cc21fe40816b0bab0581960097eb92d2121874"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2691, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}