{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMTcyNjg2", "number": 4694, "title": "Issue #4691 - use static methods with javadoc to get MethodHandle lookups", "bodyText": "Issue #4691\nMethod handle lookups for websocket are now all created from static methods on both the Jetty and Javax FrameHandlerFactory. Two static methods are given, one for looking up methods on server classes and one for looking up methods on application classes.\nThese methods now have javadoc to describe the reasons why these specific MethodHandle lookups are the correct ones to use for the given situation.", "createdAt": "2020-03-23T05:48:02Z", "url": "https://github.com/eclipse/jetty.project/pull/4694", "merged": true, "mergeCommit": {"oid": "ea80253cca4a1cd1747547829043a7888d74f90d"}, "closed": true, "closedAt": "2020-03-24T23:31:38Z", "author": {"login": "lachlan-roberts"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQXqicgH2gAyMzkyMTcyNjg2OjA0Y2MyMWZlNDA4MTZiMGJhYjA1ODE5NjAwOTdlYjkyZDIxMjE4NzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQvtmcgFqTM4MDE0MzU4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "04cc21fe40816b0bab0581960097eb92d2121874", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/04cc21fe40816b0bab0581960097eb92d2121874", "committedDate": "2020-03-23T05:43:09Z", "message": "Issue #4691 - use static methods with javadoc to get MethodHandle lookup\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NDY3Mzkz", "url": "https://github.com/eclipse/jetty.project/pull/4694#pullrequestreview-379467393", "createdAt": "2020-03-23T14:13:24Z", "commit": {"oid": "04cc21fe40816b0bab0581960097eb92d2121874"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMzoyNFrOF6HQzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyMTo0MlrOF6Ho-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MDcxOA==", "bodyText": "Do you still need the TODO above?", "url": "https://github.com/eclipse/jetty.project/pull/4694#discussion_r396480718", "createdAt": "2020-03-23T14:13:24Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandler.java", "diffHunk": "@@ -374,7 +374,7 @@ private void assertBasicTypeNotRegistered(byte basicWebSocketType, Object messag\n         try\n         {\n             // TODO: move methodhandle lookup to container?\n-            MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n+            MethodHandles.Lookup lookup = JavaxWebSocketFrameHandlerFactory.getServerMethodHandleLookup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04cc21fe40816b0bab0581960097eb92d2121874"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MDg0NQ==", "bodyText": "Ditto.", "url": "https://github.com/eclipse/jetty.project/pull/4694#discussion_r396480845", "createdAt": "2020-03-23T14:13:34Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandler.java", "diffHunk": "@@ -432,7 +432,7 @@ else if (String.class.isAssignableFrom(clazz))\n         try\n         {\n             // TODO: move MethodHandle lookup to container?\n-            MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n+            MethodHandles.Lookup lookup = JavaxWebSocketFrameHandlerFactory.getServerMethodHandleLookup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04cc21fe40816b0bab0581960097eb92d2121874"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MTkyOA==", "bodyText": "There is an additional  ()} in the javadoc.", "url": "https://github.com/eclipse/jetty.project/pull/4694#discussion_r396481928", "createdAt": "2020-03-23T14:15:02Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandlerFactory.java", "diffHunk": "@@ -704,9 +705,53 @@ private void assertSignatureValid(Class<?> endpointClass, Method method, Class<?\n         }\n     }\n \n-    private MethodHandles.Lookup getMethodHandleLookup(Class<?> endpointClass)\n+    /**\n+     * <p>\n+     * Gives a {@link MethodHandles.Lookup} instance to be used to find methods in server classes.\n+     * For lookups on application classes use {@link #getApplicationMethodHandleLookup(Class)} ()} instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04cc21fe40816b0bab0581960097eb92d2121874"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MjI5MA==", "bodyText": "Missing description of what it returns.", "url": "https://github.com/eclipse/jetty.project/pull/4694#discussion_r396482290", "createdAt": "2020-03-23T14:15:32Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandlerFactory.java", "diffHunk": "@@ -704,9 +705,53 @@ private void assertSignatureValid(Class<?> endpointClass, Method method, Class<?\n         }\n     }\n \n-    private MethodHandles.Lookup getMethodHandleLookup(Class<?> endpointClass)\n+    /**\n+     * <p>\n+     * Gives a {@link MethodHandles.Lookup} instance to be used to find methods in server classes.\n+     * For lookups on application classes use {@link #getApplicationMethodHandleLookup(Class)} ()} instead.\n+     * </p>\n+     * <p>\n+     * This uses the caller sensitive {@link MethodHandles#lookup()}, this will allow MethodHandle access\n+     * to server classes we need to use and will give access permissions to private methods as well.\n+     * </p>\n+     *\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04cc21fe40816b0bab0581960097eb92d2121874"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4Njc1Nw==", "bodyText": "To avoid duplicating these javadocs, I would rather @see JavaxWebSocketFrameHandlerFactory#getServerMethodHandleLookup().\nSo that if we improve the javadocs, we only do it in one place.\nCheck that we can actually do this @see because it will reference a class in a different module that is not dependent on this one.", "url": "https://github.com/eclipse/jetty.project/pull/4694#discussion_r396486757", "createdAt": "2020-03-23T14:21:29Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-jetty-common/src/main/java/org/eclipse/jetty/websocket/common/JettyWebSocketFrameHandlerFactory.java", "diffHunk": "@@ -456,9 +457,53 @@ private void assertSignatureValid(Class<?> endpointClass, Method method, Class<?\n         throw new InvalidSignatureException(err.toString());\n     }\n \n-    private MethodHandles.Lookup getMethodHandleLookup(Class<?> endpointClass)\n+    /**\n+     * <p>\n+     * Gives a {@link MethodHandles.Lookup} instance to be used to find methods in server classes.\n+     * For lookups on application classes use {@link #getApplicationMethodHandleLookup(Class)} ()} instead.\n+     * </p>\n+     * <p>\n+     * This uses the caller sensitive {@link MethodHandles#lookup()}, this will allow MethodHandle access\n+     * to server classes we need to use and will give access permissions to private methods as well.\n+     * </p>\n+     *\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04cc21fe40816b0bab0581960097eb92d2121874"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4NjkwNw==", "bodyText": "Ditto.", "url": "https://github.com/eclipse/jetty.project/pull/4694#discussion_r396486907", "createdAt": "2020-03-23T14:21:42Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/websocket-jetty-common/src/main/java/org/eclipse/jetty/websocket/common/JettyWebSocketFrameHandlerFactory.java", "diffHunk": "@@ -456,9 +457,53 @@ private void assertSignatureValid(Class<?> endpointClass, Method method, Class<?\n         throw new InvalidSignatureException(err.toString());\n     }\n \n-    private MethodHandles.Lookup getMethodHandleLookup(Class<?> endpointClass)\n+    /**\n+     * <p>\n+     * Gives a {@link MethodHandles.Lookup} instance to be used to find methods in server classes.\n+     * For lookups on application classes use {@link #getApplicationMethodHandleLookup(Class)} ()} instead.\n+     * </p>\n+     * <p>\n+     * This uses the caller sensitive {@link MethodHandles#lookup()}, this will allow MethodHandle access\n+     * to server classes we need to use and will give access permissions to private methods as well.\n+     * </p>\n+     *\n+     * @return\n+     */\n+    public static MethodHandles.Lookup getServerMethodHandleLookup()\n     {\n-        return MethodHandles.publicLookup().in(endpointClass);\n+        return MethodHandles.lookup();\n+    }\n+\n+    /**\n+     * <p>\n+     * Gives a {@link MethodHandles.Lookup} instance to be used to find public methods in application classes.\n+     * For lookups on server classes use {@link #getServerMethodHandleLookup()} instead.\n+     * </p>\n+     * <p>\n+     * This uses {@link MethodHandles#publicLookup()} as we only need access to public method of the lookupClass.\n+     * To look up a method on the lookupClass, it must be public and the class must be accessible from this\n+     * module, so if the lookupClass is in a JPMS module it must be exported so that the public methods\n+     * of the lookupClass are accessible outside of the module.\n+     * </p>\n+     * <p>\n+     * The {@link java.lang.invoke.MethodHandles.Lookup#in(Class)} allows us to search specifically\n+     * in the endpoint Class to avoid any potential linkage errors which could occur if the same\n+     * class is present in multiple web apps. Unlike using {@link MethodHandles#publicLookup()}\n+     * using {@link MethodHandles#lookup()} with {@link java.lang.invoke.MethodHandles.Lookup#in(Class)}\n+     * will cause the lookup to lose its public access to the lookup class if they are in different modules.\n+     * </p>\n+     * <p>\n+     * {@link MethodHandles#privateLookupIn(Class, MethodHandles.Lookup)} is also unsuitable because it\n+     * requires the caller module to read the target module, and the target module to open reflective\n+     * access to the lookupClasses private methods. This is possible but requires extra configuration\n+     * to provide private access which is not necessary for the purpose of accessing the public methods.\n+     * </p>\n+     * @param lookupClass the desired lookup class for the new lookup object.\n+     * @return a lookup object to be used to find methods on the lookupClass.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04cc21fe40816b0bab0581960097eb92d2121874"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0b6d9f67793aebfe075739d5a597345518b44f0", "author": {"user": {"login": "lachlan-roberts", "name": "Lachlan"}}, "url": "https://github.com/eclipse/jetty.project/commit/c0b6d9f67793aebfe075739d5a597345518b44f0", "committedDate": "2020-03-24T03:30:02Z", "message": "Issue #4691 - changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTI0MTg5", "url": "https://github.com/eclipse/jetty.project/pull/4694#pullrequestreview-380124189", "createdAt": "2020-03-24T09:19:26Z", "commit": {"oid": "c0b6d9f67793aebfe075739d5a597345518b44f0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTQzNTgy", "url": "https://github.com/eclipse/jetty.project/pull/4694#pullrequestreview-380143582", "createdAt": "2020-03-24T09:44:13Z", "commit": {"oid": "c0b6d9f67793aebfe075739d5a597345518b44f0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 507, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}