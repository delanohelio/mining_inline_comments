{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MTcyNjA3", "number": 4601, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOToyMDo1NFrODin0vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDozNjowNFrODjO0rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjMwNjUzOnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyAppender.java", "isResolved": true, "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOToyMDo1NFrOFt-OoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoxMjo0MlrOFuXKUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0OTc5Mw==", "bodyText": "I don't particularly like this because it is designed to force allocation, and we can avoid it.\nThis can just be emit(JettyLogger, Level, String, Object...) as all the rest can be computed by the implementation.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383749793", "createdAt": "2020-02-25T09:20:54Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyAppender.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+public interface JettyAppender\n+{\n+    void emit(JettyLoggingEvent event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgwOTc3Mg==", "bodyText": "This is in preparation for the slf4j 2.0.0 behaviors.\nWhich will use the org.slf4j.event.LoggingEvent to handle the differences between normal loggers and location aware loggers, along with the markers and context key value pairs.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383809772", "createdAt": "2020-02-25T11:03:35Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyAppender.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+public interface JettyAppender\n+{\n+    void emit(JettyLoggingEvent event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0OTc5Mw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxNzIxMw==", "bodyText": "I see this as just an implementation detail.\nWhether we will be forced by an implementation to create an event it's orthogonal to the design of this interface.\nEvents are not part of the SLF4J API so we don't need them.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383817213", "createdAt": "2020-02-25T11:19:38Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyAppender.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+public interface JettyAppender\n+{\n+    void emit(JettyLoggingEvent event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0OTc5Mw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg0OTk0Ng==", "bodyText": "We can always have an Appender that makes events if they are needed by an integration", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383849946", "createdAt": "2020-02-25T12:32:16Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyAppender.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+public interface JettyAppender\n+{\n+    void emit(JettyLoggingEvent event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0OTc5Mw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4ODQyOQ==", "bodyText": "The new interface would look like this ...\n    void emit(Level level, long timestamp, String threadName, String name, String condensedName, String message, Throwable throwable, Object[] argumentArray, \n              boolean hideStacks, Marker marker);\nAnd when slf4j 2.0.0 hits (currently in alpha, no public log4j 2 support yet) the API will look like this ...\n    void emit(Level level, long timestamp, String threadName, String name, String condensedName, String message, Throwable throwable, Object[] argumentArray, \n              boolean hideStacks, List<Marker> markers, List<KeyValuePair> keyValueContextPairs);", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383888429", "createdAt": "2020-02-25T13:48:55Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyAppender.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+public interface JettyAppender\n+{\n+    void emit(JettyLoggingEvent event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0OTc5Mw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4OTg3Ng==", "bodyText": "We can always have an Appender that makes events if they are needed by an integration\n\nSlf4j will give us org.slf4j.event.LoggingEvent instances from the API itself in version 2.0.0+\nThe idea of an Appender to make events isn't really a thing, we receive them, not the other way around.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383889876", "createdAt": "2020-02-25T13:51:22Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyAppender.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+public interface JettyAppender\n+{\n+    void emit(JettyLoggingEvent event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0OTc5Mw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkwMTYxMQ==", "bodyText": "This is now feeling a lot more like we are using slf4j implementation rather than their interface, making me much less interested in this idea.\nI just don't see why the implementation of LOG.debug(\"foo\"); should end up in being much more than a System.err.printf under the hood.   We don't want our default implementation to be a stream of slf4j event objects.\nI don't understand your point about us not generating events.  The proposed code for debug is:\n     @Override\n    public void debug(String msg)\n    {\n        if (isDebugEnabled())\n        {\n            getAppender().emit(asEvent(Level.DEBUG, msg));\n        }\n    }\nBut there is no reason that it cannot be:\n     @Override\n    public void debug(String msg)\n    {\n        if (isDebugEnabled())\n        {\n            getAppender().emit(Level.DEBUG, msg);\n        }\n    }\nand if events are needed, then emit can create them.... but in fact I can't even see why we need the abstraction of an appender? Shouldn't this code just be:\nBut there is no reason that it cannot be:\n     @Override\n    public void debug(String msg)\n    {\n        if (isDebugEnabled())\n        {\n            emit(Level.DEBUG, msg);\n        }\n    }\nIf we want to do something more complex, then the whole implementation of debug is replaced with another jar.    We don't want to reinvent log interception/filtering/appending etc. etc.  we just want a simple StdErr implementation that is statically initialised and can be replaced with a third party implementation if anything sophisticated is desired.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383901611", "createdAt": "2020-02-25T14:11:24Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyAppender.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+public interface JettyAppender\n+{\n+    void emit(JettyLoggingEvent event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0OTc5Mw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkwNzIwMQ==", "bodyText": "Splitting up the Logger from what actually produces the log (Appender) makes things easier to maintain and test, and as a bonus it uses less memory (as each logger instance is no longer doing the entire job of emitting the log).\nI'll give it a go at making our Appender have multiple entry points.\nAnd with slf4j 2.0.0  ...\nWe have Markers and KeyValuePairs as well to make a decision on. (do we care to support them or not).\nMarkers are supported by logback only (currently).\nKeyValuePairs (the end result of MDC use) are supported by log4j1 impl, logback impl, and jdk/jul impls currently. (log4j2 impl in git shows signs of supporting them too).", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383907201", "createdAt": "2020-02-25T14:20:31Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyAppender.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+public interface JettyAppender\n+{\n+    void emit(JettyLoggingEvent event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0OTc5Mw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxMjk4Nw==", "bodyText": "A split API for Appender would now look like ...\n    void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message);\n\n    void emit(JettyLogger logger, Level level, long timestamp, String threadName,\n              Throwable throwable, String message);\n\n    void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message,\n              Object[] argumentArray);\n\n    void emit(JettyLogger logger, Level level, long timestamp, String threadName, String name,\n              Throwable throwable, String message, Object[] argumentArray);\nWhere each parameter is ...\n\nJettyLogger logger is used for the logger name (full or condensed based on appender config), and the hideStacks configuration for that logger.\nLevel level is for the level of the event itself.\nlong timestamp the timestamp at logging event time (either from the raw Logger methods like .info() and .debug, but also from org.slf4j.event.LoggingEvent data given to us)\nString threadName the threadName at logging event time (either from the raw Logger methods like .info() and .debug, but also from org.slf4j.event.LoggingEvent data given to us)\nString message the log message (or log message format)\nThrowable throwable the throwable given. (presented as a whole stacktrace or not, based on logger's hideStacks configuration)\nObject[] argumentArray the array of arguments given to the log.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383912987", "createdAt": "2020-02-25T14:29:51Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyAppender.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+public interface JettyAppender\n+{\n+    void emit(JettyLoggingEvent event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0OTc5Mw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxNTU4Ng==", "bodyText": "There is no need for all those parameters. The 4 I gave in the initial comment are sufficient.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383915586", "createdAt": "2020-02-25T14:34:13Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyAppender.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+public interface JettyAppender\n+{\n+    void emit(JettyLoggingEvent event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0OTc5Mw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzNjk3OA==", "bodyText": "This is now feeling a lot more like we are using slf4j implementation rather than their interface, making me much less interested in this idea.\n\nThe entirety of Jetty uses only org.slf4j.Logger and org.slf4j.LoggerFactory, we are using their interface.\nThis jetty-slf4j-impl is our implementation of those, and are completely optional.\nIn fact, only the StacklessLogging class is used directly by Jetty test cases, the rest is not used directly by Jetty.\nScenario 1\nThe use of slf4j also allows us to (for example) capture other loggers and route them to any slf4j implementation we want.\nJetty uses the org.slf4j.Logger API to create it's logging events.\nWe have the following jars on the classpath.\n\nslf4j-api.jar\njetty-slf4j-impl.jar (this is the slf4j impl in use)\njcl-over-slf4j.jar (bridge api for commons-logging)\njul-to-slf4j.jar (bridge api for java.util.logging, JSP and mail jars use this)\nlog4j-to-slf4j.jar (bridge api for log4j 1.x and log4j 2.x)\n\n(For slf4j 1.x there are also bridge API jars for apache juli, and osgi logging, haven't checked for slf4j 2.x)\nWe can receive events from any of the logging APIs now.\nOur org.eclipse.jetty.logging.JettyLogger can receive those events as ...\n\nCalls to equivalent .info() or .debug() style methods\nA call to public void log(org.slf4j.event.LoggingEvent event) (depends on bridge API - this is the SubstituteLogger internal slf4j API).\nA call to public void log(Marker marker, String callerFQCN, int level, String msg, Object[] arguments, Throwable t) (depends on bridge API and if source/location features - this is the LocationAwareLogger internal slf4j API)\n\nThe existence of the org.slf4j.event.LoggingEvent is to handle loggers that process events in a non-direct way:\n\nlost threadname information (like java.util.logging)\ntimestamp skews (like osgi logging)\n\nWith this PR, the jetty-slf4j-impl can handle all of those events, and can now be written to System.err via the StdErrAppender (not supported in Jetty 9.4.x or current 10.x HEAD) and we don't have to care about where it came from, just implement the interface org.slf4j.Logger (with LocationAwareLogger and SubstituteLogger extensions)\nScenario 2\nJetty uses the org.slf4j.Logger API to create it's logging events.\nThe user has chosen to use it's own slf4j impl (lets call it corp-slf4j-impl.jar)\nJetty participates with logging level / name / MDC / location without extra work or effort.\nAll of the classes in this PR are unused and are not present.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383936978", "createdAt": "2020-02-25T15:06:12Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyAppender.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+public interface JettyAppender\n+{\n+    void emit(JettyLoggingEvent event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0OTc5Mw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzODIzMg==", "bodyText": "There is no need for all those parameters. The 4 I gave in the initial comment are sufficient.\n\nNo, they are not.\nEspecially when using slf4j bridge APIs for capturing other loggers into our jetty-slf4j-impl", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383938232", "createdAt": "2020-02-25T15:08:11Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyAppender.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+public interface JettyAppender\n+{\n+    void emit(JettyLoggingEvent event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0OTc5Mw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE1ODI5MQ==", "bodyText": "The entire StdErrAppender API interface has been redone.\nNo more JettyLoggingEvent.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384158291", "createdAt": "2020-02-25T22:12:42Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyAppender.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+public interface JettyAppender\n+{\n+    void emit(JettyLoggingEvent event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0OTc5Mw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjMxODU0OnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOToyNDoxMFrOFt-V5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjowNzo1OVrOFuXCMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1MTY1Mw==", "bodyText": "See above, all these asEvent() are not necessary.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383751653", "createdAt": "2020-02-25T09:24:10Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLogger.java", "diffHunk": "@@ -0,0 +1,663 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+import org.slf4j.event.Level;\n+import org.slf4j.spi.LocationAwareLogger;\n+\n+public class JettyLogger implements LocationAwareLogger, Logger\n+{\n+    /**\n+     * The Level to set if you want this logger to be \"OFF\"\n+     */\n+    public static final int OFF = 999;\n+    /**\n+     * The Level to set if you want this logger to show all events from all levels.\n+     */\n+    public static final int ALL = -1;\n+\n+    private final String name;\n+    private final String condensedName;\n+    private int level;\n+    private JettyAppender appender;\n+    private boolean hideStacks = false;\n+\n+    public JettyLogger(String name)\n+    {\n+        this.name = name;\n+        this.condensedName = JettyLoggerFactory.condensePackageString(name);\n+    }\n+\n+    @Override\n+    public void debug(String msg)\n+    {\n+        if (isDebugEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.DEBUG, msg));\n+        }\n+    }\n+\n+    @Override\n+    public void debug(String format, Object arg)\n+    {\n+        if (isDebugEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.DEBUG, format, arg));\n+        }\n+    }\n+\n+    @Override\n+    public void debug(String format, Object arg1, Object arg2)\n+    {\n+        if (isDebugEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.DEBUG, format, arg1, arg2));\n+        }\n+    }\n+\n+    @Override\n+    public void debug(String format, Object... arguments)\n+    {\n+        if (isDebugEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.DEBUG, format, arguments));\n+        }\n+    }\n+\n+    @Override\n+    public void debug(String msg, Throwable throwable)\n+    {\n+        if (isDebugEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.DEBUG, msg, throwable));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled(Marker marker)\n+    {\n+        return isDebugEnabled();\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String msg)\n+    {\n+        debug(msg);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String format, Object arg)\n+    {\n+        debug(format, arg);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String format, Object arg1, Object arg2)\n+    {\n+        debug(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String format, Object... arguments)\n+    {\n+        debug(format, arguments);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String msg, Throwable t)\n+    {\n+        debug(msg, t);\n+    }\n+\n+    @Override\n+    public void error(String msg)\n+    {\n+        if (isErrorEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.ERROR, msg));\n+        }\n+    }\n+\n+    @Override\n+    public void error(String format, Object arg)\n+    {\n+        if (isErrorEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.ERROR, format, arg));\n+        }\n+    }\n+\n+    @Override\n+    public void error(String format, Object arg1, Object arg2)\n+    {\n+        if (isErrorEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.ERROR, format, arg1, arg2));\n+        }\n+    }\n+\n+    @Override\n+    public void error(String format, Object... arguments)\n+    {\n+        if (isErrorEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.ERROR, format, arguments));\n+        }\n+    }\n+\n+    @Override\n+    public void error(String msg, Throwable throwable)\n+    {\n+        if (isErrorEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.ERROR, msg, throwable));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isErrorEnabled(Marker marker)\n+    {\n+        return isErrorEnabled();\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String msg)\n+    {\n+        error(msg);\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String format, Object arg)\n+    {\n+        error(format, arg);\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String format, Object arg1, Object arg2)\n+    {\n+        error(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String format, Object... arguments)\n+    {\n+        error(format, arguments);\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String msg, Throwable t)\n+    {\n+        error(msg, t);\n+    }\n+\n+    public JettyAppender getAppender()\n+    {\n+        return appender;\n+    }\n+\n+    @Override\n+    public void log(Marker marker, String fqcn, int levelInt, String message, Object[] argArray, Throwable throwable)\n+    {\n+        if (this.level <= levelInt)\n+        {\n+            getAppender().emit(asEvent(intToLevel(levelInt), message, throwable, argArray));\n+        }\n+    }\n+\n+    public void setAppender(JettyAppender appender)\n+    {\n+        this.appender = appender;\n+    }\n+\n+    public String getCondensedName()\n+    {\n+        return condensedName;\n+    }\n+\n+    public int getLevel()\n+    {\n+        return level;\n+    }\n+\n+    public void setLevel(Level level)\n+    {\n+        Objects.requireNonNull(level, \"Level\");\n+        setLevel(level.toInt());\n+    }\n+\n+    public void setLevel(int lvlInt)\n+    {\n+        this.level = lvlInt;\n+\n+        // apply setLevel to children too.\n+        JettyLoggerFactory jettyLoggerFactory = JettyLoggerFactory.getLoggerFactory();\n+        jettyLoggerFactory.walkChildLoggers(this.getName(), (logger) -> logger.setLevel(lvlInt));\n+    }\n+\n+    @Override\n+    public String getName()\n+    {\n+        return name;\n+    }\n+\n+    @Override\n+    public void info(String msg)\n+    {\n+        if (isInfoEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.INFO, msg));\n+        }\n+    }\n+\n+    @Override\n+    public void info(String format, Object arg)\n+    {\n+        if (isInfoEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.INFO, format, arg));\n+        }\n+    }\n+\n+    @Override\n+    public void info(String format, Object arg1, Object arg2)\n+    {\n+        if (isInfoEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.INFO, format, arg1, arg2));\n+        }\n+    }\n+\n+    @Override\n+    public void info(String format, Object... arguments)\n+    {\n+        if (isInfoEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.INFO, format, arguments));\n+        }\n+    }\n+\n+    @Override\n+    public void info(String msg, Throwable throwable)\n+    {\n+        if (isInfoEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.INFO, msg, throwable));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled(Marker marker)\n+    {\n+        return isInfoEnabled();\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String msg)\n+    {\n+        info(msg);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String format, Object arg)\n+    {\n+        info(format, arg);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String format, Object arg1, Object arg2)\n+    {\n+        info(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String format, Object... arguments)\n+    {\n+        info(format, arguments);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String msg, Throwable t)\n+    {\n+        info(msg, t);\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled()\n+    {\n+        return level <= Level.DEBUG.toInt();\n+    }\n+\n+    @Override\n+    public boolean isErrorEnabled()\n+    {\n+        return level <= Level.ERROR.toInt();\n+    }\n+\n+    public boolean isHideStacks()\n+    {\n+        return hideStacks;\n+    }\n+\n+    public void setHideStacks(boolean hideStacks)\n+    {\n+        this.hideStacks = hideStacks;\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled()\n+    {\n+        return level <= Level.INFO.toInt();\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled()\n+    {\n+        return level <= Level.TRACE.toInt();\n+    }\n+\n+    @Override\n+    public boolean isWarnEnabled()\n+    {\n+        return level <= Level.WARN.toInt();\n+    }\n+\n+    @Override\n+    public void trace(String msg)\n+    {\n+        if (isTraceEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.TRACE, msg));\n+        }\n+    }\n+\n+    @Override\n+    public void trace(String format, Object arg)\n+    {\n+        if (isTraceEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.TRACE, format, arg));\n+        }\n+    }\n+\n+    @Override\n+    public void trace(String format, Object arg1, Object arg2)\n+    {\n+        if (isTraceEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.TRACE, format, arg1, arg2));\n+        }\n+    }\n+\n+    @Override\n+    public void trace(String format, Object... arguments)\n+    {\n+        if (isTraceEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.TRACE, format, arguments));\n+        }\n+    }\n+\n+    @Override\n+    public void trace(String msg, Throwable throwable)\n+    {\n+        if (isTraceEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.TRACE, msg, throwable));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled(Marker marker)\n+    {\n+        return isTraceEnabled();\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String msg)\n+    {\n+        trace(msg);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String format, Object arg)\n+    {\n+        trace(format, arg);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String format, Object arg1, Object arg2)\n+    {\n+        trace(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String format, Object... argArray)\n+    {\n+        trace(format, argArray);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String msg, Throwable t)\n+    {\n+        trace(msg, t);\n+    }\n+\n+    @Override\n+    public void warn(String msg)\n+    {\n+        if (isWarnEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.WARN, msg));\n+        }\n+    }\n+\n+    @Override\n+    public void warn(String format, Object arg)\n+    {\n+        if (isWarnEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.WARN, format, arg));\n+        }\n+    }\n+\n+    @Override\n+    public void warn(String format, Object... arguments)\n+    {\n+        if (isWarnEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.WARN, format, arguments));\n+        }\n+    }\n+\n+    @Override\n+    public void warn(String format, Object arg1, Object arg2)\n+    {\n+        if (isWarnEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.WARN, format, arg1, arg2));\n+        }\n+    }\n+\n+    @Override\n+    public void warn(String msg, Throwable throwable)\n+    {\n+        if (isWarnEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.WARN, msg, throwable));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isWarnEnabled(Marker marker)\n+    {\n+        return isWarnEnabled();\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String msg)\n+    {\n+        warn(msg);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String format, Object arg)\n+    {\n+        warn(format, arg);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String format, Object arg1, Object arg2)\n+    {\n+        warn(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String format, Object... arguments)\n+    {\n+        warn(format, arguments);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String msg, Throwable t)\n+    {\n+        warn(msg, t);\n+    }\n+\n+    public static Level intToLevel(int level)\n+    {\n+        if (level >= JettyLogger.OFF)\n+            return Level.ERROR;\n+        if (level >= Level.ERROR.toInt())\n+            return Level.ERROR;\n+        if (level >= Level.WARN.toInt())\n+            return Level.WARN;\n+        if (level >= Level.INFO.toInt())\n+            return Level.INFO;\n+        if (level >= Level.DEBUG.toInt())\n+            return Level.DEBUG;\n+        if (level >= Level.TRACE.toInt())\n+            return Level.TRACE;\n+        return Level.TRACE; // everything else\n+    }\n+\n+    public static String levelToString(int level)\n+    {\n+        if (level >= JettyLogger.OFF)\n+            return \"OFF\";\n+        if (level >= Level.ERROR.toInt())\n+            return \"ERROR\";\n+        if (level >= Level.WARN.toInt())\n+            return \"WARN\";\n+        if (level >= Level.INFO.toInt())\n+            return \"INFO\";\n+        if (level >= Level.DEBUG.toInt())\n+            return \"DEBUG\";\n+        if (level >= Level.TRACE.toInt())\n+            return \"TRACE\";\n+        return \"OFF\"; // everything else\n+    }\n+\n+    @SuppressWarnings(\"StringBufferReplaceableByString\")\n+    @Override\n+    public String toString()\n+    {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(JettyLogger.class.getSimpleName());\n+        sb.append(':').append(name);\n+        sb.append(\":LEVEL=\").append(levelToString(level));\n+        return sb.toString();\n+    }\n+\n+    private JettyLoggingEvent asEvent(Level level, String msg)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 591}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE1NjIxMQ==", "bodyText": "JettyLoggingEvent has been removed.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384156211", "createdAt": "2020-02-25T22:07:59Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLogger.java", "diffHunk": "@@ -0,0 +1,663 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+import org.slf4j.event.Level;\n+import org.slf4j.spi.LocationAwareLogger;\n+\n+public class JettyLogger implements LocationAwareLogger, Logger\n+{\n+    /**\n+     * The Level to set if you want this logger to be \"OFF\"\n+     */\n+    public static final int OFF = 999;\n+    /**\n+     * The Level to set if you want this logger to show all events from all levels.\n+     */\n+    public static final int ALL = -1;\n+\n+    private final String name;\n+    private final String condensedName;\n+    private int level;\n+    private JettyAppender appender;\n+    private boolean hideStacks = false;\n+\n+    public JettyLogger(String name)\n+    {\n+        this.name = name;\n+        this.condensedName = JettyLoggerFactory.condensePackageString(name);\n+    }\n+\n+    @Override\n+    public void debug(String msg)\n+    {\n+        if (isDebugEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.DEBUG, msg));\n+        }\n+    }\n+\n+    @Override\n+    public void debug(String format, Object arg)\n+    {\n+        if (isDebugEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.DEBUG, format, arg));\n+        }\n+    }\n+\n+    @Override\n+    public void debug(String format, Object arg1, Object arg2)\n+    {\n+        if (isDebugEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.DEBUG, format, arg1, arg2));\n+        }\n+    }\n+\n+    @Override\n+    public void debug(String format, Object... arguments)\n+    {\n+        if (isDebugEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.DEBUG, format, arguments));\n+        }\n+    }\n+\n+    @Override\n+    public void debug(String msg, Throwable throwable)\n+    {\n+        if (isDebugEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.DEBUG, msg, throwable));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled(Marker marker)\n+    {\n+        return isDebugEnabled();\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String msg)\n+    {\n+        debug(msg);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String format, Object arg)\n+    {\n+        debug(format, arg);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String format, Object arg1, Object arg2)\n+    {\n+        debug(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String format, Object... arguments)\n+    {\n+        debug(format, arguments);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String msg, Throwable t)\n+    {\n+        debug(msg, t);\n+    }\n+\n+    @Override\n+    public void error(String msg)\n+    {\n+        if (isErrorEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.ERROR, msg));\n+        }\n+    }\n+\n+    @Override\n+    public void error(String format, Object arg)\n+    {\n+        if (isErrorEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.ERROR, format, arg));\n+        }\n+    }\n+\n+    @Override\n+    public void error(String format, Object arg1, Object arg2)\n+    {\n+        if (isErrorEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.ERROR, format, arg1, arg2));\n+        }\n+    }\n+\n+    @Override\n+    public void error(String format, Object... arguments)\n+    {\n+        if (isErrorEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.ERROR, format, arguments));\n+        }\n+    }\n+\n+    @Override\n+    public void error(String msg, Throwable throwable)\n+    {\n+        if (isErrorEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.ERROR, msg, throwable));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isErrorEnabled(Marker marker)\n+    {\n+        return isErrorEnabled();\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String msg)\n+    {\n+        error(msg);\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String format, Object arg)\n+    {\n+        error(format, arg);\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String format, Object arg1, Object arg2)\n+    {\n+        error(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String format, Object... arguments)\n+    {\n+        error(format, arguments);\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String msg, Throwable t)\n+    {\n+        error(msg, t);\n+    }\n+\n+    public JettyAppender getAppender()\n+    {\n+        return appender;\n+    }\n+\n+    @Override\n+    public void log(Marker marker, String fqcn, int levelInt, String message, Object[] argArray, Throwable throwable)\n+    {\n+        if (this.level <= levelInt)\n+        {\n+            getAppender().emit(asEvent(intToLevel(levelInt), message, throwable, argArray));\n+        }\n+    }\n+\n+    public void setAppender(JettyAppender appender)\n+    {\n+        this.appender = appender;\n+    }\n+\n+    public String getCondensedName()\n+    {\n+        return condensedName;\n+    }\n+\n+    public int getLevel()\n+    {\n+        return level;\n+    }\n+\n+    public void setLevel(Level level)\n+    {\n+        Objects.requireNonNull(level, \"Level\");\n+        setLevel(level.toInt());\n+    }\n+\n+    public void setLevel(int lvlInt)\n+    {\n+        this.level = lvlInt;\n+\n+        // apply setLevel to children too.\n+        JettyLoggerFactory jettyLoggerFactory = JettyLoggerFactory.getLoggerFactory();\n+        jettyLoggerFactory.walkChildLoggers(this.getName(), (logger) -> logger.setLevel(lvlInt));\n+    }\n+\n+    @Override\n+    public String getName()\n+    {\n+        return name;\n+    }\n+\n+    @Override\n+    public void info(String msg)\n+    {\n+        if (isInfoEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.INFO, msg));\n+        }\n+    }\n+\n+    @Override\n+    public void info(String format, Object arg)\n+    {\n+        if (isInfoEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.INFO, format, arg));\n+        }\n+    }\n+\n+    @Override\n+    public void info(String format, Object arg1, Object arg2)\n+    {\n+        if (isInfoEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.INFO, format, arg1, arg2));\n+        }\n+    }\n+\n+    @Override\n+    public void info(String format, Object... arguments)\n+    {\n+        if (isInfoEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.INFO, format, arguments));\n+        }\n+    }\n+\n+    @Override\n+    public void info(String msg, Throwable throwable)\n+    {\n+        if (isInfoEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.INFO, msg, throwable));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled(Marker marker)\n+    {\n+        return isInfoEnabled();\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String msg)\n+    {\n+        info(msg);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String format, Object arg)\n+    {\n+        info(format, arg);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String format, Object arg1, Object arg2)\n+    {\n+        info(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String format, Object... arguments)\n+    {\n+        info(format, arguments);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String msg, Throwable t)\n+    {\n+        info(msg, t);\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled()\n+    {\n+        return level <= Level.DEBUG.toInt();\n+    }\n+\n+    @Override\n+    public boolean isErrorEnabled()\n+    {\n+        return level <= Level.ERROR.toInt();\n+    }\n+\n+    public boolean isHideStacks()\n+    {\n+        return hideStacks;\n+    }\n+\n+    public void setHideStacks(boolean hideStacks)\n+    {\n+        this.hideStacks = hideStacks;\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled()\n+    {\n+        return level <= Level.INFO.toInt();\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled()\n+    {\n+        return level <= Level.TRACE.toInt();\n+    }\n+\n+    @Override\n+    public boolean isWarnEnabled()\n+    {\n+        return level <= Level.WARN.toInt();\n+    }\n+\n+    @Override\n+    public void trace(String msg)\n+    {\n+        if (isTraceEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.TRACE, msg));\n+        }\n+    }\n+\n+    @Override\n+    public void trace(String format, Object arg)\n+    {\n+        if (isTraceEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.TRACE, format, arg));\n+        }\n+    }\n+\n+    @Override\n+    public void trace(String format, Object arg1, Object arg2)\n+    {\n+        if (isTraceEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.TRACE, format, arg1, arg2));\n+        }\n+    }\n+\n+    @Override\n+    public void trace(String format, Object... arguments)\n+    {\n+        if (isTraceEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.TRACE, format, arguments));\n+        }\n+    }\n+\n+    @Override\n+    public void trace(String msg, Throwable throwable)\n+    {\n+        if (isTraceEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.TRACE, msg, throwable));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled(Marker marker)\n+    {\n+        return isTraceEnabled();\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String msg)\n+    {\n+        trace(msg);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String format, Object arg)\n+    {\n+        trace(format, arg);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String format, Object arg1, Object arg2)\n+    {\n+        trace(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String format, Object... argArray)\n+    {\n+        trace(format, argArray);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String msg, Throwable t)\n+    {\n+        trace(msg, t);\n+    }\n+\n+    @Override\n+    public void warn(String msg)\n+    {\n+        if (isWarnEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.WARN, msg));\n+        }\n+    }\n+\n+    @Override\n+    public void warn(String format, Object arg)\n+    {\n+        if (isWarnEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.WARN, format, arg));\n+        }\n+    }\n+\n+    @Override\n+    public void warn(String format, Object... arguments)\n+    {\n+        if (isWarnEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.WARN, format, arguments));\n+        }\n+    }\n+\n+    @Override\n+    public void warn(String format, Object arg1, Object arg2)\n+    {\n+        if (isWarnEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.WARN, format, arg1, arg2));\n+        }\n+    }\n+\n+    @Override\n+    public void warn(String msg, Throwable throwable)\n+    {\n+        if (isWarnEnabled())\n+        {\n+            getAppender().emit(asEvent(Level.WARN, msg, throwable));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isWarnEnabled(Marker marker)\n+    {\n+        return isWarnEnabled();\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String msg)\n+    {\n+        warn(msg);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String format, Object arg)\n+    {\n+        warn(format, arg);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String format, Object arg1, Object arg2)\n+    {\n+        warn(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String format, Object... arguments)\n+    {\n+        warn(format, arguments);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String msg, Throwable t)\n+    {\n+        warn(msg, t);\n+    }\n+\n+    public static Level intToLevel(int level)\n+    {\n+        if (level >= JettyLogger.OFF)\n+            return Level.ERROR;\n+        if (level >= Level.ERROR.toInt())\n+            return Level.ERROR;\n+        if (level >= Level.WARN.toInt())\n+            return Level.WARN;\n+        if (level >= Level.INFO.toInt())\n+            return Level.INFO;\n+        if (level >= Level.DEBUG.toInt())\n+            return Level.DEBUG;\n+        if (level >= Level.TRACE.toInt())\n+            return Level.TRACE;\n+        return Level.TRACE; // everything else\n+    }\n+\n+    public static String levelToString(int level)\n+    {\n+        if (level >= JettyLogger.OFF)\n+            return \"OFF\";\n+        if (level >= Level.ERROR.toInt())\n+            return \"ERROR\";\n+        if (level >= Level.WARN.toInt())\n+            return \"WARN\";\n+        if (level >= Level.INFO.toInt())\n+            return \"INFO\";\n+        if (level >= Level.DEBUG.toInt())\n+            return \"DEBUG\";\n+        if (level >= Level.TRACE.toInt())\n+            return \"TRACE\";\n+        return \"OFF\"; // everything else\n+    }\n+\n+    @SuppressWarnings(\"StringBufferReplaceableByString\")\n+    @Override\n+    public String toString()\n+    {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(JettyLogger.class.getSimpleName());\n+        sb.append(':').append(name);\n+        sb.append(\":LEVEL=\").append(levelToString(level));\n+        return sb.toString();\n+    }\n+\n+    private JettyLoggingEvent asEvent(Level level, String msg)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1MTY1Mw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 591}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjMyODM5OnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOToyNjo1N1rOFt-cHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjowODoxNFrOFuXCkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1MzI0NA==", "bodyText": "We want to write the code in a way that this assert is not necessary - why paying the cost for every call?", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383753244", "createdAt": "2020-02-25T09:26:57Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()\n+    {\n+        if (instance == null)\n+        {\n+            instance = new JettyLoggerFactory();\n+        }\n+\n+        return instance;\n+    }\n+\n+    protected static void setInstance(JettyLoggerFactory loggerFactory)\n+    {\n+        if (loggerFactory != null && instance != null)\n+        {\n+            System.err.printf(\"Replacing main Instance %s@%x with %s@%x\",\n+                instance.getClass().getName(),\n+                instance.hashCode(),\n+                loggerFactory.getClass().getName(),\n+                loggerFactory.hashCode());\n+        }\n+        instance = loggerFactory;\n+    }\n+\n+    private static JettyLoggerFactory instance;\n+\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private boolean initialized = false;\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;\n+    private ConcurrentMap<String, JettyLogger> loggerMap;\n+\n+    private JettyLoggerFactory()\n+    {\n+    }\n+\n+    public JettyLoggerFactory initialize(JettyLoggerConfiguration config)\n+    {\n+        configuration = Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+\n+        loggerMap = new ConcurrentHashMap<>();\n+\n+        rootLogger = new JettyLogger(ROOT_LOGGER_NAME);\n+        loggerMap.put(ROOT_LOGGER_NAME, rootLogger);\n+\n+        rootLogger.setLevel(configuration.getLevel(ROOT_LOGGER_NAME));\n+        rootLogger.setAppender(new StdErrAppender(configuration));\n+\n+        initialized = true;\n+        return this;\n+    }\n+\n+    private void assertInitialized()\n+    {\n+        if (!initialized)\n+        {\n+            throw new IllegalStateException(this.getClass().getSimpleName() + \" is not initialized yet\");\n+        }\n+    }\n+\n+    /**\n+     * Get a {@link JettyLogger} instance, creating if not yet existing.\n+     *\n+     * @param name the name of the logger\n+     * @return the JettyLogger instance\n+     */\n+    public JettyLogger getJettyLogger(String name)\n+    {\n+        assertInitialized();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxMDIxMw==", "bodyText": "This is only and impact during initialization of a Logger itself, which should occur only once per JVM per named logger.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383810213", "createdAt": "2020-02-25T11:04:28Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()\n+    {\n+        if (instance == null)\n+        {\n+            instance = new JettyLoggerFactory();\n+        }\n+\n+        return instance;\n+    }\n+\n+    protected static void setInstance(JettyLoggerFactory loggerFactory)\n+    {\n+        if (loggerFactory != null && instance != null)\n+        {\n+            System.err.printf(\"Replacing main Instance %s@%x with %s@%x\",\n+                instance.getClass().getName(),\n+                instance.hashCode(),\n+                loggerFactory.getClass().getName(),\n+                loggerFactory.hashCode());\n+        }\n+        instance = loggerFactory;\n+    }\n+\n+    private static JettyLoggerFactory instance;\n+\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private boolean initialized = false;\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;\n+    private ConcurrentMap<String, JettyLogger> loggerMap;\n+\n+    private JettyLoggerFactory()\n+    {\n+    }\n+\n+    public JettyLoggerFactory initialize(JettyLoggerConfiguration config)\n+    {\n+        configuration = Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+\n+        loggerMap = new ConcurrentHashMap<>();\n+\n+        rootLogger = new JettyLogger(ROOT_LOGGER_NAME);\n+        loggerMap.put(ROOT_LOGGER_NAME, rootLogger);\n+\n+        rootLogger.setLevel(configuration.getLevel(ROOT_LOGGER_NAME));\n+        rootLogger.setAppender(new StdErrAppender(configuration));\n+\n+        initialized = true;\n+        return this;\n+    }\n+\n+    private void assertInitialized()\n+    {\n+        if (!initialized)\n+        {\n+            throw new IllegalStateException(this.getClass().getSimpleName() + \" is not initialized yet\");\n+        }\n+    }\n+\n+    /**\n+     * Get a {@link JettyLogger} instance, creating if not yet existing.\n+     *\n+     * @param name the name of the logger\n+     * @return the JettyLogger instance\n+     */\n+    public JettyLogger getJettyLogger(String name)\n+    {\n+        assertInitialized();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1MzI0NA=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxODIzMA==", "bodyText": "Nope, that is called every time you get a logger.\nAssuming that it only happens once is assuming too much. For example, CometD uses per-instance loggers and there can be thousands/millions of instances created in the lifespan of the application.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383818230", "createdAt": "2020-02-25T11:21:45Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()\n+    {\n+        if (instance == null)\n+        {\n+            instance = new JettyLoggerFactory();\n+        }\n+\n+        return instance;\n+    }\n+\n+    protected static void setInstance(JettyLoggerFactory loggerFactory)\n+    {\n+        if (loggerFactory != null && instance != null)\n+        {\n+            System.err.printf(\"Replacing main Instance %s@%x with %s@%x\",\n+                instance.getClass().getName(),\n+                instance.hashCode(),\n+                loggerFactory.getClass().getName(),\n+                loggerFactory.hashCode());\n+        }\n+        instance = loggerFactory;\n+    }\n+\n+    private static JettyLoggerFactory instance;\n+\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private boolean initialized = false;\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;\n+    private ConcurrentMap<String, JettyLogger> loggerMap;\n+\n+    private JettyLoggerFactory()\n+    {\n+    }\n+\n+    public JettyLoggerFactory initialize(JettyLoggerConfiguration config)\n+    {\n+        configuration = Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+\n+        loggerMap = new ConcurrentHashMap<>();\n+\n+        rootLogger = new JettyLogger(ROOT_LOGGER_NAME);\n+        loggerMap.put(ROOT_LOGGER_NAME, rootLogger);\n+\n+        rootLogger.setLevel(configuration.getLevel(ROOT_LOGGER_NAME));\n+        rootLogger.setAppender(new StdErrAppender(configuration));\n+\n+        initialized = true;\n+        return this;\n+    }\n+\n+    private void assertInitialized()\n+    {\n+        if (!initialized)\n+        {\n+            throw new IllegalStateException(this.getClass().getSimpleName() + \" is not initialized yet\");\n+        }\n+    }\n+\n+    /**\n+     * Get a {@link JettyLogger} instance, creating if not yet existing.\n+     *\n+     * @param name the name of the logger\n+     * @return the JettyLogger instance\n+     */\n+    public JettyLogger getJettyLogger(String name)\n+    {\n+        assertInitialized();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1MzI0NA=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5Mzc3MA==", "bodyText": "That's just a horrible use of logging in CometD, this is why Markers and MDC and KeyValuePairs exist.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383893770", "createdAt": "2020-02-25T13:58:06Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()\n+    {\n+        if (instance == null)\n+        {\n+            instance = new JettyLoggerFactory();\n+        }\n+\n+        return instance;\n+    }\n+\n+    protected static void setInstance(JettyLoggerFactory loggerFactory)\n+    {\n+        if (loggerFactory != null && instance != null)\n+        {\n+            System.err.printf(\"Replacing main Instance %s@%x with %s@%x\",\n+                instance.getClass().getName(),\n+                instance.hashCode(),\n+                loggerFactory.getClass().getName(),\n+                loggerFactory.hashCode());\n+        }\n+        instance = loggerFactory;\n+    }\n+\n+    private static JettyLoggerFactory instance;\n+\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private boolean initialized = false;\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;\n+    private ConcurrentMap<String, JettyLogger> loggerMap;\n+\n+    private JettyLoggerFactory()\n+    {\n+    }\n+\n+    public JettyLoggerFactory initialize(JettyLoggerConfiguration config)\n+    {\n+        configuration = Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+\n+        loggerMap = new ConcurrentHashMap<>();\n+\n+        rootLogger = new JettyLogger(ROOT_LOGGER_NAME);\n+        loggerMap.put(ROOT_LOGGER_NAME, rootLogger);\n+\n+        rootLogger.setLevel(configuration.getLevel(ROOT_LOGGER_NAME));\n+        rootLogger.setAppender(new StdErrAppender(configuration));\n+\n+        initialized = true;\n+        return this;\n+    }\n+\n+    private void assertInitialized()\n+    {\n+        if (!initialized)\n+        {\n+            throw new IllegalStateException(this.getClass().getSimpleName() + \" is not initialized yet\");\n+        }\n+    }\n+\n+    /**\n+     * Get a {@link JettyLogger} instance, creating if not yet existing.\n+     *\n+     * @param name the name of the logger\n+     * @return the JettyLogger instance\n+     */\n+    public JettyLogger getJettyLogger(String name)\n+    {\n+        assertInitialized();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1MzI0NA=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxNjQ2MQ==", "bodyText": "It's not \"horrible use\", it's actually a feature. What I'm saying is that I don't want to bind design decision to assumptions that are wrong, so let's base on the least number of assumptions.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383916461", "createdAt": "2020-02-25T14:35:42Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()\n+    {\n+        if (instance == null)\n+        {\n+            instance = new JettyLoggerFactory();\n+        }\n+\n+        return instance;\n+    }\n+\n+    protected static void setInstance(JettyLoggerFactory loggerFactory)\n+    {\n+        if (loggerFactory != null && instance != null)\n+        {\n+            System.err.printf(\"Replacing main Instance %s@%x with %s@%x\",\n+                instance.getClass().getName(),\n+                instance.hashCode(),\n+                loggerFactory.getClass().getName(),\n+                loggerFactory.hashCode());\n+        }\n+        instance = loggerFactory;\n+    }\n+\n+    private static JettyLoggerFactory instance;\n+\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private boolean initialized = false;\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;\n+    private ConcurrentMap<String, JettyLogger> loggerMap;\n+\n+    private JettyLoggerFactory()\n+    {\n+    }\n+\n+    public JettyLoggerFactory initialize(JettyLoggerConfiguration config)\n+    {\n+        configuration = Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+\n+        loggerMap = new ConcurrentHashMap<>();\n+\n+        rootLogger = new JettyLogger(ROOT_LOGGER_NAME);\n+        loggerMap.put(ROOT_LOGGER_NAME, rootLogger);\n+\n+        rootLogger.setLevel(configuration.getLevel(ROOT_LOGGER_NAME));\n+        rootLogger.setAppender(new StdErrAppender(configuration));\n+\n+        initialized = true;\n+        return this;\n+    }\n+\n+    private void assertInitialized()\n+    {\n+        if (!initialized)\n+        {\n+            throw new IllegalStateException(this.getClass().getSimpleName() + \" is not initialized yet\");\n+        }\n+    }\n+\n+    /**\n+     * Get a {@link JettyLogger} instance, creating if not yet existing.\n+     *\n+     * @param name the name of the logger\n+     * @return the JettyLogger instance\n+     */\n+    public JettyLogger getJettyLogger(String name)\n+    {\n+        assertInitialized();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1MzI0NA=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE1NjMwNw==", "bodyText": "initialized assert removed", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384156307", "createdAt": "2020-02-25T22:08:14Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()\n+    {\n+        if (instance == null)\n+        {\n+            instance = new JettyLoggerFactory();\n+        }\n+\n+        return instance;\n+    }\n+\n+    protected static void setInstance(JettyLoggerFactory loggerFactory)\n+    {\n+        if (loggerFactory != null && instance != null)\n+        {\n+            System.err.printf(\"Replacing main Instance %s@%x with %s@%x\",\n+                instance.getClass().getName(),\n+                instance.hashCode(),\n+                loggerFactory.getClass().getName(),\n+                loggerFactory.hashCode());\n+        }\n+        instance = loggerFactory;\n+    }\n+\n+    private static JettyLoggerFactory instance;\n+\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private boolean initialized = false;\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;\n+    private ConcurrentMap<String, JettyLogger> loggerMap;\n+\n+    private JettyLoggerFactory()\n+    {\n+    }\n+\n+    public JettyLoggerFactory initialize(JettyLoggerConfiguration config)\n+    {\n+        configuration = Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+\n+        loggerMap = new ConcurrentHashMap<>();\n+\n+        rootLogger = new JettyLogger(ROOT_LOGGER_NAME);\n+        loggerMap.put(ROOT_LOGGER_NAME, rootLogger);\n+\n+        rootLogger.setLevel(configuration.getLevel(ROOT_LOGGER_NAME));\n+        rootLogger.setAppender(new StdErrAppender(configuration));\n+\n+        initialized = true;\n+        return this;\n+    }\n+\n+    private void assertInitialized()\n+    {\n+        if (!initialized)\n+        {\n+            throw new IllegalStateException(this.getClass().getSimpleName() + \" is not initialized yet\");\n+        }\n+    }\n+\n+    /**\n+     * Get a {@link JettyLogger} instance, creating if not yet existing.\n+     *\n+     * @param name the name of the logger\n+     * @return the JettyLogger instance\n+     */\n+    public JettyLogger getJettyLogger(String name)\n+    {\n+        assertInitialized();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1MzI0NA=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjMzMTkxOnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOToyNzo1OVrOFt-eSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoyMjowN1rOFurPQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1MzgwMg==", "bodyText": "The static parts of this class need to be synchronized, or eagerly initialized.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383753802", "createdAt": "2020-02-25T09:27:59Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE1NzA4Nw==", "bodyText": "For normal (non-testing) usage, this is only initialized by slf4j-api during it's org.slf4j.LoggerFactory.getInstance() call which results in our service provider being kicked off during a formal initialization phase.\nSee JettyLoggingServiceProvider.initialize()", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384157087", "createdAt": "2020-02-25T22:09:59Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1MzgwMg=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4NzIzNA==", "bodyText": "Removed singletons at JettyLoggerFactory level", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384487234", "createdAt": "2020-02-26T13:22:07Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1MzgwMg=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjMzNDg4OnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOToyODo1MVrOFt-gNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzo1NjoyM1rOFuG9Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1NDI5NA==", "bodyText": "Why do we need this at all? Just for testing?", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383754294", "createdAt": "2020-02-25T09:28:51Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()\n+    {\n+        if (instance == null)\n+        {\n+            instance = new JettyLoggerFactory();\n+        }\n+\n+        return instance;\n+    }\n+\n+    protected static void setInstance(JettyLoggerFactory loggerFactory)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5Mjc1OA==", "bodyText": "It's to help with testing, yes.\nThat's also the reason it's protected and not public.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383892758", "createdAt": "2020-02-25T13:56:23Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()\n+    {\n+        if (instance == null)\n+        {\n+            instance = new JettyLoggerFactory();\n+        }\n+\n+        return instance;\n+    }\n+\n+    protected static void setInstance(JettyLoggerFactory loggerFactory)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1NDI5NA=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjM0MTg3OnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTozMDo0N1rOFt-ksw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTozMDo0N1rOFt-ksw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1NTQ0Mw==", "bodyText": "This is not atomic. Use loggerMap.compute().", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383755443", "createdAt": "2020-02-25T09:30:47Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()\n+    {\n+        if (instance == null)\n+        {\n+            instance = new JettyLoggerFactory();\n+        }\n+\n+        return instance;\n+    }\n+\n+    protected static void setInstance(JettyLoggerFactory loggerFactory)\n+    {\n+        if (loggerFactory != null && instance != null)\n+        {\n+            System.err.printf(\"Replacing main Instance %s@%x with %s@%x\",\n+                instance.getClass().getName(),\n+                instance.hashCode(),\n+                loggerFactory.getClass().getName(),\n+                loggerFactory.hashCode());\n+        }\n+        instance = loggerFactory;\n+    }\n+\n+    private static JettyLoggerFactory instance;\n+\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private boolean initialized = false;\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;\n+    private ConcurrentMap<String, JettyLogger> loggerMap;\n+\n+    private JettyLoggerFactory()\n+    {\n+    }\n+\n+    public JettyLoggerFactory initialize(JettyLoggerConfiguration config)\n+    {\n+        configuration = Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+\n+        loggerMap = new ConcurrentHashMap<>();\n+\n+        rootLogger = new JettyLogger(ROOT_LOGGER_NAME);\n+        loggerMap.put(ROOT_LOGGER_NAME, rootLogger);\n+\n+        rootLogger.setLevel(configuration.getLevel(ROOT_LOGGER_NAME));\n+        rootLogger.setAppender(new StdErrAppender(configuration));\n+\n+        initialized = true;\n+        return this;\n+    }\n+\n+    private void assertInitialized()\n+    {\n+        if (!initialized)\n+        {\n+            throw new IllegalStateException(this.getClass().getSimpleName() + \" is not initialized yet\");\n+        }\n+    }\n+\n+    /**\n+     * Get a {@link JettyLogger} instance, creating if not yet existing.\n+     *\n+     * @param name the name of the logger\n+     * @return the JettyLogger instance\n+     */\n+    public JettyLogger getJettyLogger(String name)\n+    {\n+        assertInitialized();\n+\n+        if (name.equals(ROOT_LOGGER_NAME))\n+        {\n+            return getRootLogger();\n+        }\n+\n+        JettyLogger jettyLogger = loggerMap.get(name);\n+        if (jettyLogger == null)\n+        {\n+            jettyLogger = createLogger(name);\n+            loggerMap.putIfAbsent(name, jettyLogger);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjM1NTc4OnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTozNDo1NVrOFt-tZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTozNDo1NVrOFt-tZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1NzY3MQ==", "bodyText": "This method and the one above are never used.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383757671", "createdAt": "2020-02-25T09:34:55Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,250 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()\n+    {\n+        if (instance == null)\n+        {\n+            instance = new JettyLoggerFactory();\n+        }\n+\n+        return instance;\n+    }\n+\n+    protected static void setInstance(JettyLoggerFactory loggerFactory)\n+    {\n+        if (loggerFactory != null && instance != null)\n+        {\n+            System.err.printf(\"Replacing main Instance %s@%x with %s@%x\",\n+                instance.getClass().getName(),\n+                instance.hashCode(),\n+                loggerFactory.getClass().getName(),\n+                loggerFactory.hashCode());\n+        }\n+        instance = loggerFactory;\n+    }\n+\n+    private static JettyLoggerFactory instance;\n+\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private boolean initialized = false;\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;\n+    private ConcurrentMap<String, JettyLogger> loggerMap;\n+\n+    private JettyLoggerFactory()\n+    {\n+    }\n+\n+    public JettyLoggerFactory initialize(JettyLoggerConfiguration config)\n+    {\n+        configuration = Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+\n+        loggerMap = new ConcurrentHashMap<>();\n+\n+        rootLogger = new JettyLogger(ROOT_LOGGER_NAME);\n+        loggerMap.put(ROOT_LOGGER_NAME, rootLogger);\n+\n+        rootLogger.setLevel(configuration.getLevel(ROOT_LOGGER_NAME));\n+        rootLogger.setAppender(new StdErrAppender(configuration));\n+\n+        initialized = true;\n+        return this;\n+    }\n+\n+    private void assertInitialized()\n+    {\n+        if (!initialized)\n+        {\n+            throw new IllegalStateException(this.getClass().getSimpleName() + \" is not initialized yet\");\n+        }\n+    }\n+\n+    /**\n+     * Get a {@link JettyLogger} instance, creating if not yet existing.\n+     *\n+     * @param name the name of the logger\n+     * @return the JettyLogger instance\n+     */\n+    public JettyLogger getJettyLogger(String name)\n+    {\n+        assertInitialized();\n+\n+        if (name.equals(ROOT_LOGGER_NAME))\n+        {\n+            return getRootLogger();\n+        }\n+\n+        JettyLogger jettyLogger = loggerMap.get(name);\n+        if (jettyLogger == null)\n+        {\n+            jettyLogger = createLogger(name);\n+            loggerMap.putIfAbsent(name, jettyLogger);\n+        }\n+        return jettyLogger;\n+    }\n+\n+    /**\n+     * Main interface for {@link ILoggerFactory}\n+     *\n+     * @param name the name of the logger\n+     * @return the Slf4j Logger\n+     */\n+    @Override\n+    public Logger getLogger(String name)\n+    {\n+        return getJettyLogger(name);\n+    }\n+\n+    protected void walkChildLoggers(String parentName, Consumer<JettyLogger> childConsumer)\n+    {\n+        String prefix = parentName;\n+        if (parentName.length() > 0 && !prefix.endsWith(\".\"))\n+        {\n+            prefix += \".\";\n+        }\n+\n+        for (JettyLogger logger : loggerMap.values())\n+        {\n+            if (logger.getName().equals(parentName))\n+            {\n+                // skip self\n+                continue;\n+            }\n+\n+            // is child, and is not itself\n+            if (logger.getName().startsWith(prefix))\n+            {\n+                childConsumer.accept(logger);\n+            }\n+        }\n+    }\n+\n+    public JettyLogger getConfiguredJettyLogger(Class<?> clazz)\n+    {\n+        return getConfiguredJettyLogger(clazz.getName());\n+    }\n+\n+    public JettyLogger getConfiguredJettyLogger(String name)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjM1NzI1OnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggingEvent.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTozNToyM1rOFt-uYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjo0MDoyOVrOFuEkIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1NzkyMQ==", "bodyText": "Not needed, see above.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383757921", "createdAt": "2020-02-25T09:35:23Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggingEvent.java", "diffHunk": "@@ -0,0 +1,107 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import org.slf4j.Marker;\n+import org.slf4j.event.Level;\n+import org.slf4j.event.LoggingEvent;\n+\n+public class JettyLoggingEvent implements LoggingEvent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxMDY0Nw==", "bodyText": "Absolutely needed for our slf4j 2.0.0 (near) future", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383810647", "createdAt": "2020-02-25T11:05:25Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggingEvent.java", "diffHunk": "@@ -0,0 +1,107 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import org.slf4j.Marker;\n+import org.slf4j.event.Level;\n+import org.slf4j.event.LoggingEvent;\n+\n+public class JettyLoggingEvent implements LoggingEvent", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1NzkyMQ=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg1MzYwMA==", "bodyText": "Can you explain why it is needed for slf4j 2.0?  I'ver had a quick look at the API and most of it is unchanged and doesn't require events.  Even the LoggingEventBuilder API should only require a builder implementation and there is no compulsion for normal logging to use that path.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383853600", "createdAt": "2020-02-25T12:40:29Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggingEvent.java", "diffHunk": "@@ -0,0 +1,107 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import org.slf4j.Marker;\n+import org.slf4j.event.Level;\n+import org.slf4j.event.LoggingEvent;\n+\n+public class JettyLoggingEvent implements LoggingEvent", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1NzkyMQ=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjM2Mzc0OnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggingServiceProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTozNzoxOVrOFt-ygA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMTowNzowM1rOFuB_cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1ODk3Ng==", "bodyText": "Can't we use BasicMDCAdapter? I don't think we need a Jetty specific one, but we may want to use the MDC, so we want to have a working implementation.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383758976", "createdAt": "2020-02-25T09:37:19Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggingServiceProvider.java", "diffHunk": "@@ -0,0 +1,78 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.IMarkerFactory;\n+import org.slf4j.helpers.BasicMarkerFactory;\n+import org.slf4j.helpers.NOPMDCAdapter;\n+import org.slf4j.spi.MDCAdapter;\n+import org.slf4j.spi.SLF4JServiceProvider;\n+\n+public class JettyLoggingServiceProvider implements SLF4JServiceProvider\n+{\n+    /**\n+     * Declare the version of the SLF4J API this implementation is compiled against.\n+     * The value of this field is modified with each major release.\n+     */\n+    // to avoid constant folding by the compiler, this field must *not* be final\n+    public static String REQUESTED_API_VERSION = \"1.8.99\"; // !final\n+\n+    private JettyLoggerFactory loggerFactory;\n+    private BasicMarkerFactory markerFactory;\n+    private MDCAdapter mdcAdapter;\n+\n+    @Override\n+    public void initialize()\n+    {\n+        JettyLoggerConfiguration config = new JettyLoggerConfiguration().loadRuntime(this.getClass().getClassLoader());\n+        loggerFactory = JettyLoggerFactory.getLoggerFactory().initialize(config);\n+        markerFactory = new BasicMarkerFactory();\n+        mdcAdapter = new NOPMDCAdapter(); // TODO: Provide Jetty Implementation?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxMTQ0Mg==", "bodyText": "Using a MDC would also mean we have a custom logger output (appender) to do something with that MDC content.\n(yay, we have the key value pairs, now what do we do with them in StdErrAppender?)\nAlso, in slf4j 2.0.0 this is replaced with a better KeyValuePairs handling in the org.slf4j.event.LoggingEvent", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383811442", "createdAt": "2020-02-25T11:07:03Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggingServiceProvider.java", "diffHunk": "@@ -0,0 +1,78 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.IMarkerFactory;\n+import org.slf4j.helpers.BasicMarkerFactory;\n+import org.slf4j.helpers.NOPMDCAdapter;\n+import org.slf4j.spi.MDCAdapter;\n+import org.slf4j.spi.SLF4JServiceProvider;\n+\n+public class JettyLoggingServiceProvider implements SLF4JServiceProvider\n+{\n+    /**\n+     * Declare the version of the SLF4J API this implementation is compiled against.\n+     * The value of this field is modified with each major release.\n+     */\n+    // to avoid constant folding by the compiler, this field must *not* be final\n+    public static String REQUESTED_API_VERSION = \"1.8.99\"; // !final\n+\n+    private JettyLoggerFactory loggerFactory;\n+    private BasicMarkerFactory markerFactory;\n+    private MDCAdapter mdcAdapter;\n+\n+    @Override\n+    public void initialize()\n+    {\n+        JettyLoggerConfiguration config = new JettyLoggerConfiguration().loadRuntime(this.getClass().getClassLoader());\n+        loggerFactory = JettyLoggerFactory.getLoggerFactory().initialize(config);\n+        markerFactory = new BasicMarkerFactory();\n+        mdcAdapter = new NOPMDCAdapter(); // TODO: Provide Jetty Implementation?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1ODk3Ng=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjM4NDk3OnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggingServiceProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo0MTo0MFrOFt_ABg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMTowNzoyN1rOFuCAOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2MjQzOA==", "bodyText": "What if 2 thread concurrently trigger the first initialization of this service provider? Does SLF4J make any guarantee that this will not happen?\nIf it does not, then we may have a concurrent call to a static object that must be guarded.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383762438", "createdAt": "2020-02-25T09:41:40Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggingServiceProvider.java", "diffHunk": "@@ -0,0 +1,78 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.IMarkerFactory;\n+import org.slf4j.helpers.BasicMarkerFactory;\n+import org.slf4j.helpers.NOPMDCAdapter;\n+import org.slf4j.spi.MDCAdapter;\n+import org.slf4j.spi.SLF4JServiceProvider;\n+\n+public class JettyLoggingServiceProvider implements SLF4JServiceProvider\n+{\n+    /**\n+     * Declare the version of the SLF4J API this implementation is compiled against.\n+     * The value of this field is modified with each major release.\n+     */\n+    // to avoid constant folding by the compiler, this field must *not* be final\n+    public static String REQUESTED_API_VERSION = \"1.8.99\"; // !final\n+\n+    private JettyLoggerFactory loggerFactory;\n+    private BasicMarkerFactory markerFactory;\n+    private MDCAdapter mdcAdapter;\n+\n+    @Override\n+    public void initialize()\n+    {\n+        JettyLoggerConfiguration config = new JettyLoggerConfiguration().loadRuntime(this.getClass().getClassLoader());\n+        loggerFactory = JettyLoggerFactory.getLoggerFactory().initialize(config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxMTY0Mw==", "bodyText": "Yes, slf4j makes sure this doesn't happen.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383811643", "createdAt": "2020-02-25T11:07:27Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggingServiceProvider.java", "diffHunk": "@@ -0,0 +1,78 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.IMarkerFactory;\n+import org.slf4j.helpers.BasicMarkerFactory;\n+import org.slf4j.helpers.NOPMDCAdapter;\n+import org.slf4j.spi.MDCAdapter;\n+import org.slf4j.spi.SLF4JServiceProvider;\n+\n+public class JettyLoggingServiceProvider implements SLF4JServiceProvider\n+{\n+    /**\n+     * Declare the version of the SLF4J API this implementation is compiled against.\n+     * The value of this field is modified with each major release.\n+     */\n+    // to avoid constant folding by the compiler, this field must *not* be final\n+    public static String REQUESTED_API_VERSION = \"1.8.99\"; // !final\n+\n+    private JettyLoggerFactory loggerFactory;\n+    private BasicMarkerFactory markerFactory;\n+    private MDCAdapter mdcAdapter;\n+\n+    @Override\n+    public void initialize()\n+    {\n+        JettyLoggerConfiguration config = new JettyLoggerConfiguration().loadRuntime(this.getClass().getClassLoader());\n+        loggerFactory = JettyLoggerFactory.getLoggerFactory().initialize(config);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2MjQzOA=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjQwNDgzOnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StacklessLogging.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo0NTo0NFrOFt_NKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyMDo1M1rOFuXYfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2NTgwMg==", "bodyText": "We do not remember if the stack were hidden before? We should restore to whatever value it was before, rather than forcing false, no? Make squelched a Map and we should be good.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383765802", "createdAt": "2020-02-25T09:45:44Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StacklessLogging.java", "diffHunk": "@@ -0,0 +1,126 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A try-with-resources compatible layer for {@link JettyLogger#setHideStacks(boolean) hiding stacktraces} within the scope of the <code>try</code> block when\n+ * logging with {@link JettyLogger} implementation.\n+ * <p>\n+ * Use of other logging implementation cause no effect when using this class\n+ * <p>\n+ * Example:\n+ *\n+ * <pre>\n+ * try (StacklessLogging scope = new StacklessLogging(EventDriver.class,Noisy.class))\n+ * {\n+ *     doActionThatCausesStackTraces();\n+ * }\n+ * </pre>\n+ */\n+public class StacklessLogging implements AutoCloseable\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(StacklessLogging.class);\n+    private static final JettyLoggerFactory loggerFactory;\n+\n+    static\n+    {\n+        JettyLoggerFactory jettyLoggerFactory = null;\n+        ILoggerFactory activeLoggerFactory = LoggerFactory.getILoggerFactory();\n+        if (activeLoggerFactory instanceof JettyLoggerFactory)\n+        {\n+            jettyLoggerFactory = (JettyLoggerFactory)activeLoggerFactory;\n+        }\n+        else\n+        {\n+            LOG.warn(\"Unable to squelch stacktraces ({} is not a {})\",\n+                activeLoggerFactory.getClass().getName(),\n+                JettyLoggerFactory.class.getName());\n+        }\n+        loggerFactory = jettyLoggerFactory;\n+    }\n+\n+    private final Set<JettyLogger> squelched = new HashSet<>();\n+\n+    public StacklessLogging(Class<?>... classesToSquelch)\n+    {\n+        for (Class<?> clazz : classesToSquelch)\n+        {\n+            JettyLogger jettyLogger = loggerFactory.getJettyLogger(clazz.getName());\n+            // only operate on loggers that are of type StdErrLog\n+            if (!jettyLogger.isDebugEnabled())\n+            {\n+                if (!jettyLogger.isHideStacks())\n+                {\n+                    jettyLogger.setHideStacks(true);\n+                    squelched.add(jettyLogger);\n+                }\n+            }\n+        }\n+    }\n+\n+    public StacklessLogging(Package... packagesToSquelch)\n+    {\n+        for (Package pkg : packagesToSquelch)\n+        {\n+            JettyLogger jettyLogger = loggerFactory.getJettyLogger(pkg.getName());\n+            // only operate on loggers that are of type StdErrLog\n+            if (!jettyLogger.isDebugEnabled())\n+            {\n+                if (!jettyLogger.isHideStacks())\n+                {\n+                    jettyLogger.setHideStacks(true);\n+                    squelched.add(jettyLogger);\n+                }\n+            }\n+        }\n+    }\n+\n+    public StacklessLogging(Logger... logs)\n+    {\n+        for (Logger log : logs)\n+        {\n+            // only operate on loggers that are of type StdErrLog\n+            if (log instanceof JettyLogger && !log.isDebugEnabled())\n+            {\n+                JettyLogger jettyLogger = ((JettyLogger)log);\n+                if (!jettyLogger.isHideStacks())\n+                {\n+                    jettyLogger.setHideStacks(true);\n+                    squelched.add(jettyLogger);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+        for (JettyLogger log : squelched)\n+        {\n+            log.setHideStacks(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxMjIxNw==", "bodyText": "Good point.\nBut to be fair, we only really use StacklessLogging in our unit tests.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383812217", "createdAt": "2020-02-25T11:08:40Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StacklessLogging.java", "diffHunk": "@@ -0,0 +1,126 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A try-with-resources compatible layer for {@link JettyLogger#setHideStacks(boolean) hiding stacktraces} within the scope of the <code>try</code> block when\n+ * logging with {@link JettyLogger} implementation.\n+ * <p>\n+ * Use of other logging implementation cause no effect when using this class\n+ * <p>\n+ * Example:\n+ *\n+ * <pre>\n+ * try (StacklessLogging scope = new StacklessLogging(EventDriver.class,Noisy.class))\n+ * {\n+ *     doActionThatCausesStackTraces();\n+ * }\n+ * </pre>\n+ */\n+public class StacklessLogging implements AutoCloseable\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(StacklessLogging.class);\n+    private static final JettyLoggerFactory loggerFactory;\n+\n+    static\n+    {\n+        JettyLoggerFactory jettyLoggerFactory = null;\n+        ILoggerFactory activeLoggerFactory = LoggerFactory.getILoggerFactory();\n+        if (activeLoggerFactory instanceof JettyLoggerFactory)\n+        {\n+            jettyLoggerFactory = (JettyLoggerFactory)activeLoggerFactory;\n+        }\n+        else\n+        {\n+            LOG.warn(\"Unable to squelch stacktraces ({} is not a {})\",\n+                activeLoggerFactory.getClass().getName(),\n+                JettyLoggerFactory.class.getName());\n+        }\n+        loggerFactory = jettyLoggerFactory;\n+    }\n+\n+    private final Set<JettyLogger> squelched = new HashSet<>();\n+\n+    public StacklessLogging(Class<?>... classesToSquelch)\n+    {\n+        for (Class<?> clazz : classesToSquelch)\n+        {\n+            JettyLogger jettyLogger = loggerFactory.getJettyLogger(clazz.getName());\n+            // only operate on loggers that are of type StdErrLog\n+            if (!jettyLogger.isDebugEnabled())\n+            {\n+                if (!jettyLogger.isHideStacks())\n+                {\n+                    jettyLogger.setHideStacks(true);\n+                    squelched.add(jettyLogger);\n+                }\n+            }\n+        }\n+    }\n+\n+    public StacklessLogging(Package... packagesToSquelch)\n+    {\n+        for (Package pkg : packagesToSquelch)\n+        {\n+            JettyLogger jettyLogger = loggerFactory.getJettyLogger(pkg.getName());\n+            // only operate on loggers that are of type StdErrLog\n+            if (!jettyLogger.isDebugEnabled())\n+            {\n+                if (!jettyLogger.isHideStacks())\n+                {\n+                    jettyLogger.setHideStacks(true);\n+                    squelched.add(jettyLogger);\n+                }\n+            }\n+        }\n+    }\n+\n+    public StacklessLogging(Logger... logs)\n+    {\n+        for (Logger log : logs)\n+        {\n+            // only operate on loggers that are of type StdErrLog\n+            if (log instanceof JettyLogger && !log.isDebugEnabled())\n+            {\n+                JettyLogger jettyLogger = ((JettyLogger)log);\n+                if (!jettyLogger.isHideStacks())\n+                {\n+                    jettyLogger.setHideStacks(true);\n+                    squelched.add(jettyLogger);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+        for (JettyLogger log : squelched)\n+        {\n+            log.setHideStacks(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2NTgwMg=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2MTkxOQ==", "bodyText": "No work is needed here.\nThe squelched collection only has loggers that were originally logger.isHideStacks == false;\nEntries that were originally logger.isHideStacks == true are not present in the squelched list.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384161919", "createdAt": "2020-02-25T22:20:53Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StacklessLogging.java", "diffHunk": "@@ -0,0 +1,126 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A try-with-resources compatible layer for {@link JettyLogger#setHideStacks(boolean) hiding stacktraces} within the scope of the <code>try</code> block when\n+ * logging with {@link JettyLogger} implementation.\n+ * <p>\n+ * Use of other logging implementation cause no effect when using this class\n+ * <p>\n+ * Example:\n+ *\n+ * <pre>\n+ * try (StacklessLogging scope = new StacklessLogging(EventDriver.class,Noisy.class))\n+ * {\n+ *     doActionThatCausesStackTraces();\n+ * }\n+ * </pre>\n+ */\n+public class StacklessLogging implements AutoCloseable\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(StacklessLogging.class);\n+    private static final JettyLoggerFactory loggerFactory;\n+\n+    static\n+    {\n+        JettyLoggerFactory jettyLoggerFactory = null;\n+        ILoggerFactory activeLoggerFactory = LoggerFactory.getILoggerFactory();\n+        if (activeLoggerFactory instanceof JettyLoggerFactory)\n+        {\n+            jettyLoggerFactory = (JettyLoggerFactory)activeLoggerFactory;\n+        }\n+        else\n+        {\n+            LOG.warn(\"Unable to squelch stacktraces ({} is not a {})\",\n+                activeLoggerFactory.getClass().getName(),\n+                JettyLoggerFactory.class.getName());\n+        }\n+        loggerFactory = jettyLoggerFactory;\n+    }\n+\n+    private final Set<JettyLogger> squelched = new HashSet<>();\n+\n+    public StacklessLogging(Class<?>... classesToSquelch)\n+    {\n+        for (Class<?> clazz : classesToSquelch)\n+        {\n+            JettyLogger jettyLogger = loggerFactory.getJettyLogger(clazz.getName());\n+            // only operate on loggers that are of type StdErrLog\n+            if (!jettyLogger.isDebugEnabled())\n+            {\n+                if (!jettyLogger.isHideStacks())\n+                {\n+                    jettyLogger.setHideStacks(true);\n+                    squelched.add(jettyLogger);\n+                }\n+            }\n+        }\n+    }\n+\n+    public StacklessLogging(Package... packagesToSquelch)\n+    {\n+        for (Package pkg : packagesToSquelch)\n+        {\n+            JettyLogger jettyLogger = loggerFactory.getJettyLogger(pkg.getName());\n+            // only operate on loggers that are of type StdErrLog\n+            if (!jettyLogger.isDebugEnabled())\n+            {\n+                if (!jettyLogger.isHideStacks())\n+                {\n+                    jettyLogger.setHideStacks(true);\n+                    squelched.add(jettyLogger);\n+                }\n+            }\n+        }\n+    }\n+\n+    public StacklessLogging(Logger... logs)\n+    {\n+        for (Logger log : logs)\n+        {\n+            // only operate on loggers that are of type StdErrLog\n+            if (log instanceof JettyLogger && !log.isDebugEnabled())\n+            {\n+                JettyLogger jettyLogger = ((JettyLogger)log);\n+                if (!jettyLogger.isHideStacks())\n+                {\n+                    jettyLogger.setHideStacks(true);\n+                    squelched.add(jettyLogger);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+        for (JettyLogger log : squelched)\n+        {\n+            log.setHideStacks(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2NTgwMg=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjQwODY0OnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo0Njo0MVrOFt_PhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMTowOToxOVrOFuCDoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2NjQwNA==", "bodyText": "Use {@code ...} instead of <code>.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383766404", "createdAt": "2020-02-25T09:46:41Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,251 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxMjUxMw==", "bodyText": "Using {@code ...} for content that contains { or } has caused problems in the javadoc tooling (in the past).", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383812513", "createdAt": "2020-02-25T11:09:19Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,251 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2NjQwNA=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjQzNDk3OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo1MzozOFrOFt_fxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoxMTo1NVrOFuXJFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3MDU2Nw==", "bodyText": "Why we want back to 1.8.0-beta1 from 1.8.0-beta2?", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383770567", "createdAt": "2020-02-25T09:53:38Z", "author": {"login": "sbordet"}, "path": "pom.xml", "diffHunk": "@@ -19,9 +19,9 @@\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <build-support.version>1.4</build-support.version>\n     <checkstyle.version>8.20</checkstyle.version>\n-    <slf4j.version>1.8.0-beta2</slf4j.version>\n-    <log4j2.version>2.11.2</log4j2.version>\n-    <logback.version>1.3.0-alpha4</logback.version>\n+    <slf4j.version>1.8.0-beta1</slf4j.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg1NTkyMQ==", "bodyText": "Can we do this work against 2.0.0-alpha0.  I know that is an early release, but there is no point going to 1.8 for this change.  If we work against the alpha then we can see any problems and give feedback", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383855921", "createdAt": "2020-02-25T12:45:35Z", "author": {"login": "gregw"}, "path": "pom.xml", "diffHunk": "@@ -19,9 +19,9 @@\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <build-support.version>1.4</build-support.version>\n     <checkstyle.version>8.20</checkstyle.version>\n-    <slf4j.version>1.8.0-beta2</slf4j.version>\n-    <log4j2.version>2.11.2</log4j2.version>\n-    <logback.version>1.3.0-alpha4</logback.version>\n+    <slf4j.version>1.8.0-beta1</slf4j.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3MDU2Nw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5MDk1NA==", "bodyText": "While slf4j-api 2.0.0-alpha0 exists, there's no public (or SNAPSHOT) release of log4j2 that uses it (yet).\nThat's the only reason I stuck with 1.8.0", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383890954", "createdAt": "2020-02-25T13:53:10Z", "author": {"login": "joakime"}, "path": "pom.xml", "diffHunk": "@@ -19,9 +19,9 @@\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <build-support.version>1.4</build-support.version>\n     <checkstyle.version>8.20</checkstyle.version>\n-    <slf4j.version>1.8.0-beta2</slf4j.version>\n-    <log4j2.version>2.11.2</log4j2.version>\n-    <logback.version>1.3.0-alpha4</logback.version>\n+    <slf4j.version>1.8.0-beta1</slf4j.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3MDU2Nw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5MTQ2OQ==", "bodyText": "I'd probably go with 2.0.0-alpha1 if you are ok with no log4j2 support (yet)", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383891469", "createdAt": "2020-02-25T13:54:04Z", "author": {"login": "joakime"}, "path": "pom.xml", "diffHunk": "@@ -19,9 +19,9 @@\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <build-support.version>1.4</build-support.version>\n     <checkstyle.version>8.20</checkstyle.version>\n-    <slf4j.version>1.8.0-beta2</slf4j.version>\n-    <log4j2.version>2.11.2</log4j2.version>\n-    <logback.version>1.3.0-alpha4</logback.version>\n+    <slf4j.version>1.8.0-beta1</slf4j.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3MDU2Nw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkwNTgwMA==", "bodyText": "We know we will want to go to 2 as soon as it is available, so I think working with 1.8 is not really productive.\nI'd much rather find out problems with 2 now when we have a chance to influence the design.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r383905800", "createdAt": "2020-02-25T14:18:22Z", "author": {"login": "gregw"}, "path": "pom.xml", "diffHunk": "@@ -19,9 +19,9 @@\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <build-support.version>1.4</build-support.version>\n     <checkstyle.version>8.20</checkstyle.version>\n-    <slf4j.version>1.8.0-beta2</slf4j.version>\n-    <log4j2.version>2.11.2</log4j2.version>\n-    <logback.version>1.3.0-alpha4</logback.version>\n+    <slf4j.version>1.8.0-beta1</slf4j.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3MDU2Nw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE1Nzk3Mw==", "bodyText": "Updated to 2.0.0-alpha1", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384157973", "createdAt": "2020-02-25T22:11:55Z", "author": {"login": "joakime"}, "path": "pom.xml", "diffHunk": "@@ -19,9 +19,9 @@\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <build-support.version>1.4</build-support.version>\n     <checkstyle.version>8.20</checkstyle.version>\n-    <slf4j.version>1.8.0-beta2</slf4j.version>\n-    <log4j2.version>2.11.2</log4j2.version>\n-    <logback.version>1.3.0-alpha4</logback.version>\n+    <slf4j.version>1.8.0-beta1</slf4j.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3MDU2Nw=="}, "originalCommit": {"oid": "c972e60312fb68c7d0025b6a588cc0af833aa3f5"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTgwNDc2OnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjoyNzozNVrOFufiKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoyMTo0MFrOFurOSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NTQ2Nw==", "bodyText": "I'm really curious about the story behind this? :) ERROR is 5 characters so DEBUG will not be longer", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384295467", "createdAt": "2020-02-26T06:27:35Z", "author": {"login": "olamy"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string\n+     * to the number of arguments provided on the various {@link org.slf4j.Logger} methods.\n+     * False will use the old-school Jetty message formatter, which will add missing <code>{}</code>\n+     * entries to the end of the format String if it detects more arguments then there are <code>{}</code>\n+     * elements in the provided format String.\n+     */\n+    private final boolean strictFormat;\n+\n+    /**\n+     * The fixed size of the thread name to use for output\n+     */\n+    private final int threadPadding;\n+\n+    /**\n+     * The stream to write logging events to.\n+     */\n+    private PrintStream stderr;\n+\n+    public StdErrAppender(JettyLoggerConfiguration config)\n+    {\n+        this(config, System.err);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream)\n+    {\n+        this(config, stream, null);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream, ZoneId zoneId)\n+    {\n+        Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+        this.stderr = Objects.requireNonNull(stream, \"PrintStream\");\n+\n+        ZoneId tzone = zoneId;\n+        if (tzone == null)\n+        {\n+            tzone = config.getZoneId(ZONEID_KEY);\n+            if (tzone == null)\n+            {\n+                tzone = TimeZone.getDefault().toZoneId();\n+            }\n+        }\n+\n+        this.timezone = tzone;\n+        this.timestampFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+        this.timestampFormatter.withZone(timezone);\n+\n+        this.condensedNames = config.getBoolean(NAME_CONDENSE_KEY, true);\n+        this.escapedMessages = config.getBoolean(MESSAGE_ESCAPE_KEY, true);\n+        this.strictFormat = config.getBoolean(STRICT_SLF4J_FORMAT_KEY, true);\n+        this.threadPadding = config.getInt(THREAD_PADDING_KEY, -1);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, null, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, throwable, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message, Object... argumentArray)\n+    {\n+        Throwable cause = NormalizedParameters.getThrowableCandidate(argumentArray);\n+        emit(logger, level, timestamp, threadName, cause, message, argumentArray);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        StringBuilder builder = new StringBuilder(64);\n+        format(builder, logger, level, timestamp, threadName, throwable, message, argumentArray);\n+        stderr.println(builder);\n+    }\n+\n+    public ZoneId getTimeZone()\n+    {\n+        return timezone;\n+    }\n+\n+    public boolean isCondensedNames()\n+    {\n+        return condensedNames;\n+    }\n+\n+    public boolean isEscapedMessages()\n+    {\n+        return escapedMessages;\n+    }\n+\n+    public int getThreadPadding()\n+    {\n+        return threadPadding;\n+    }\n+\n+    public boolean isStrictFormat()\n+    {\n+        return strictFormat;\n+    }\n+\n+    public void setStream(PrintStream stream)\n+    {\n+        this.stderr = stream;\n+    }\n+\n+    private void format(StringBuilder builder, JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        Throwable cause = throwable;\n+\n+        // Timestamp\n+        ZonedDateTime tsInstant = Instant.ofEpochMilli(timestamp).atZone(timezone);\n+        timestampFormatter.formatTo(tsInstant, builder);\n+\n+        // Level\n+        builder.append(':').append(renderedLevel(level));\n+\n+        // Logger Name\n+        builder.append(':');\n+        if (condensedNames)\n+        {\n+            builder.append(logger.getCondensedName());\n+        }\n+        else\n+        {\n+            builder.append(logger.getName());\n+        }\n+\n+        // Thread Name\n+        builder.append(':');\n+        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(':');\n+\n+        // Message\n+        builder.append(' ');\n+\n+        if (strictFormat)\n+        {\n+            FormattingTuple ft = MessageFormatter.arrayFormat(message, argumentArray);\n+            appendEscaped(builder, ft.getMessage());\n+            if (cause == null)\n+            {\n+                cause = ft.getThrowable();\n+            }\n+        }\n+        else\n+        {\n+            // TODO: this should really be removed, as it violates the slf4j API contract for throwables and such\n+            StringBuilder msg = new StringBuilder();\n+            Object[] args = argumentArray == null ? EMPTY_ARGS : argumentArray;\n+            msg.append(Objects.requireNonNullElseGet(message, () -> \"{} \".repeat(args.length)));\n+            String braces = \"{}\";\n+            int start = 0;\n+            for (Object arg : args)\n+            {\n+                int bracesIndex = msg.indexOf(braces, start);\n+                if (bracesIndex < 0)\n+                {\n+                    appendEscaped(builder, msg.substring(start));\n+                    builder.append(\" \");\n+                    if (arg != null)\n+                        builder.append(arg);\n+                    start = msg.length();\n+                }\n+                else\n+                {\n+                    appendEscaped(builder, msg.substring(start, bracesIndex));\n+                    builder.append(arg);\n+                    start = bracesIndex + braces.length();\n+                }\n+            }\n+            appendEscaped(builder, msg.substring(start));\n+        }\n+\n+        // Throwable\n+        if (cause != null)\n+        {\n+            if (logger.isHideStacks())\n+            {\n+                builder.append(\": \").append(cause);\n+            }\n+            else\n+            {\n+                appendCause(builder, cause, \"\");\n+            }\n+        }\n+    }\n+\n+    private String renderedLevel(Level level)\n+    {\n+        switch (level)\n+        {\n+            case ERROR:  // New for Jetty 10+\n+                return \"ERROR\";\n+            case WARN:\n+                return \"WARN\";\n+            case INFO:\n+                return \"INFO\";\n+            case DEBUG:\n+                return \"DBUG\"; // keeping abbreviated name for historical reasons", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxNDUwMg==", "bodyText": "ERROR is a new level that was not there before. See my comment above.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384314502", "createdAt": "2020-02-26T07:33:54Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string\n+     * to the number of arguments provided on the various {@link org.slf4j.Logger} methods.\n+     * False will use the old-school Jetty message formatter, which will add missing <code>{}</code>\n+     * entries to the end of the format String if it detects more arguments then there are <code>{}</code>\n+     * elements in the provided format String.\n+     */\n+    private final boolean strictFormat;\n+\n+    /**\n+     * The fixed size of the thread name to use for output\n+     */\n+    private final int threadPadding;\n+\n+    /**\n+     * The stream to write logging events to.\n+     */\n+    private PrintStream stderr;\n+\n+    public StdErrAppender(JettyLoggerConfiguration config)\n+    {\n+        this(config, System.err);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream)\n+    {\n+        this(config, stream, null);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream, ZoneId zoneId)\n+    {\n+        Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+        this.stderr = Objects.requireNonNull(stream, \"PrintStream\");\n+\n+        ZoneId tzone = zoneId;\n+        if (tzone == null)\n+        {\n+            tzone = config.getZoneId(ZONEID_KEY);\n+            if (tzone == null)\n+            {\n+                tzone = TimeZone.getDefault().toZoneId();\n+            }\n+        }\n+\n+        this.timezone = tzone;\n+        this.timestampFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+        this.timestampFormatter.withZone(timezone);\n+\n+        this.condensedNames = config.getBoolean(NAME_CONDENSE_KEY, true);\n+        this.escapedMessages = config.getBoolean(MESSAGE_ESCAPE_KEY, true);\n+        this.strictFormat = config.getBoolean(STRICT_SLF4J_FORMAT_KEY, true);\n+        this.threadPadding = config.getInt(THREAD_PADDING_KEY, -1);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, null, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, throwable, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message, Object... argumentArray)\n+    {\n+        Throwable cause = NormalizedParameters.getThrowableCandidate(argumentArray);\n+        emit(logger, level, timestamp, threadName, cause, message, argumentArray);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        StringBuilder builder = new StringBuilder(64);\n+        format(builder, logger, level, timestamp, threadName, throwable, message, argumentArray);\n+        stderr.println(builder);\n+    }\n+\n+    public ZoneId getTimeZone()\n+    {\n+        return timezone;\n+    }\n+\n+    public boolean isCondensedNames()\n+    {\n+        return condensedNames;\n+    }\n+\n+    public boolean isEscapedMessages()\n+    {\n+        return escapedMessages;\n+    }\n+\n+    public int getThreadPadding()\n+    {\n+        return threadPadding;\n+    }\n+\n+    public boolean isStrictFormat()\n+    {\n+        return strictFormat;\n+    }\n+\n+    public void setStream(PrintStream stream)\n+    {\n+        this.stderr = stream;\n+    }\n+\n+    private void format(StringBuilder builder, JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        Throwable cause = throwable;\n+\n+        // Timestamp\n+        ZonedDateTime tsInstant = Instant.ofEpochMilli(timestamp).atZone(timezone);\n+        timestampFormatter.formatTo(tsInstant, builder);\n+\n+        // Level\n+        builder.append(':').append(renderedLevel(level));\n+\n+        // Logger Name\n+        builder.append(':');\n+        if (condensedNames)\n+        {\n+            builder.append(logger.getCondensedName());\n+        }\n+        else\n+        {\n+            builder.append(logger.getName());\n+        }\n+\n+        // Thread Name\n+        builder.append(':');\n+        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(':');\n+\n+        // Message\n+        builder.append(' ');\n+\n+        if (strictFormat)\n+        {\n+            FormattingTuple ft = MessageFormatter.arrayFormat(message, argumentArray);\n+            appendEscaped(builder, ft.getMessage());\n+            if (cause == null)\n+            {\n+                cause = ft.getThrowable();\n+            }\n+        }\n+        else\n+        {\n+            // TODO: this should really be removed, as it violates the slf4j API contract for throwables and such\n+            StringBuilder msg = new StringBuilder();\n+            Object[] args = argumentArray == null ? EMPTY_ARGS : argumentArray;\n+            msg.append(Objects.requireNonNullElseGet(message, () -> \"{} \".repeat(args.length)));\n+            String braces = \"{}\";\n+            int start = 0;\n+            for (Object arg : args)\n+            {\n+                int bracesIndex = msg.indexOf(braces, start);\n+                if (bracesIndex < 0)\n+                {\n+                    appendEscaped(builder, msg.substring(start));\n+                    builder.append(\" \");\n+                    if (arg != null)\n+                        builder.append(arg);\n+                    start = msg.length();\n+                }\n+                else\n+                {\n+                    appendEscaped(builder, msg.substring(start, bracesIndex));\n+                    builder.append(arg);\n+                    start = bracesIndex + braces.length();\n+                }\n+            }\n+            appendEscaped(builder, msg.substring(start));\n+        }\n+\n+        // Throwable\n+        if (cause != null)\n+        {\n+            if (logger.isHideStacks())\n+            {\n+                builder.append(\": \").append(cause);\n+            }\n+            else\n+            {\n+                appendCause(builder, cause, \"\");\n+            }\n+        }\n+    }\n+\n+    private String renderedLevel(Level level)\n+    {\n+        switch (level)\n+        {\n+            case ERROR:  // New for Jetty 10+\n+                return \"ERROR\";\n+            case WARN:\n+                return \"WARN\";\n+            case INFO:\n+                return \"INFO\";\n+            case DEBUG:\n+                return \"DBUG\"; // keeping abbreviated name for historical reasons", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NTQ2Nw=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0MjM2NQ==", "bodyText": "my question is more why keep the \"DBUG\" :) we can use \"DEBUG\"", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384342365", "createdAt": "2020-02-26T08:43:22Z", "author": {"login": "olamy"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string\n+     * to the number of arguments provided on the various {@link org.slf4j.Logger} methods.\n+     * False will use the old-school Jetty message formatter, which will add missing <code>{}</code>\n+     * entries to the end of the format String if it detects more arguments then there are <code>{}</code>\n+     * elements in the provided format String.\n+     */\n+    private final boolean strictFormat;\n+\n+    /**\n+     * The fixed size of the thread name to use for output\n+     */\n+    private final int threadPadding;\n+\n+    /**\n+     * The stream to write logging events to.\n+     */\n+    private PrintStream stderr;\n+\n+    public StdErrAppender(JettyLoggerConfiguration config)\n+    {\n+        this(config, System.err);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream)\n+    {\n+        this(config, stream, null);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream, ZoneId zoneId)\n+    {\n+        Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+        this.stderr = Objects.requireNonNull(stream, \"PrintStream\");\n+\n+        ZoneId tzone = zoneId;\n+        if (tzone == null)\n+        {\n+            tzone = config.getZoneId(ZONEID_KEY);\n+            if (tzone == null)\n+            {\n+                tzone = TimeZone.getDefault().toZoneId();\n+            }\n+        }\n+\n+        this.timezone = tzone;\n+        this.timestampFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+        this.timestampFormatter.withZone(timezone);\n+\n+        this.condensedNames = config.getBoolean(NAME_CONDENSE_KEY, true);\n+        this.escapedMessages = config.getBoolean(MESSAGE_ESCAPE_KEY, true);\n+        this.strictFormat = config.getBoolean(STRICT_SLF4J_FORMAT_KEY, true);\n+        this.threadPadding = config.getInt(THREAD_PADDING_KEY, -1);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, null, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, throwable, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message, Object... argumentArray)\n+    {\n+        Throwable cause = NormalizedParameters.getThrowableCandidate(argumentArray);\n+        emit(logger, level, timestamp, threadName, cause, message, argumentArray);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        StringBuilder builder = new StringBuilder(64);\n+        format(builder, logger, level, timestamp, threadName, throwable, message, argumentArray);\n+        stderr.println(builder);\n+    }\n+\n+    public ZoneId getTimeZone()\n+    {\n+        return timezone;\n+    }\n+\n+    public boolean isCondensedNames()\n+    {\n+        return condensedNames;\n+    }\n+\n+    public boolean isEscapedMessages()\n+    {\n+        return escapedMessages;\n+    }\n+\n+    public int getThreadPadding()\n+    {\n+        return threadPadding;\n+    }\n+\n+    public boolean isStrictFormat()\n+    {\n+        return strictFormat;\n+    }\n+\n+    public void setStream(PrintStream stream)\n+    {\n+        this.stderr = stream;\n+    }\n+\n+    private void format(StringBuilder builder, JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        Throwable cause = throwable;\n+\n+        // Timestamp\n+        ZonedDateTime tsInstant = Instant.ofEpochMilli(timestamp).atZone(timezone);\n+        timestampFormatter.formatTo(tsInstant, builder);\n+\n+        // Level\n+        builder.append(':').append(renderedLevel(level));\n+\n+        // Logger Name\n+        builder.append(':');\n+        if (condensedNames)\n+        {\n+            builder.append(logger.getCondensedName());\n+        }\n+        else\n+        {\n+            builder.append(logger.getName());\n+        }\n+\n+        // Thread Name\n+        builder.append(':');\n+        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(':');\n+\n+        // Message\n+        builder.append(' ');\n+\n+        if (strictFormat)\n+        {\n+            FormattingTuple ft = MessageFormatter.arrayFormat(message, argumentArray);\n+            appendEscaped(builder, ft.getMessage());\n+            if (cause == null)\n+            {\n+                cause = ft.getThrowable();\n+            }\n+        }\n+        else\n+        {\n+            // TODO: this should really be removed, as it violates the slf4j API contract for throwables and such\n+            StringBuilder msg = new StringBuilder();\n+            Object[] args = argumentArray == null ? EMPTY_ARGS : argumentArray;\n+            msg.append(Objects.requireNonNullElseGet(message, () -> \"{} \".repeat(args.length)));\n+            String braces = \"{}\";\n+            int start = 0;\n+            for (Object arg : args)\n+            {\n+                int bracesIndex = msg.indexOf(braces, start);\n+                if (bracesIndex < 0)\n+                {\n+                    appendEscaped(builder, msg.substring(start));\n+                    builder.append(\" \");\n+                    if (arg != null)\n+                        builder.append(arg);\n+                    start = msg.length();\n+                }\n+                else\n+                {\n+                    appendEscaped(builder, msg.substring(start, bracesIndex));\n+                    builder.append(arg);\n+                    start = bracesIndex + braces.length();\n+                }\n+            }\n+            appendEscaped(builder, msg.substring(start));\n+        }\n+\n+        // Throwable\n+        if (cause != null)\n+        {\n+            if (logger.isHideStacks())\n+            {\n+                builder.append(\": \").append(cause);\n+            }\n+            else\n+            {\n+                appendCause(builder, cause, \"\");\n+            }\n+        }\n+    }\n+\n+    private String renderedLevel(Level level)\n+    {\n+        switch (level)\n+        {\n+            case ERROR:  // New for Jetty 10+\n+                return \"ERROR\";\n+            case WARN:\n+                return \"WARN\";\n+            case INFO:\n+                return \"INFO\";\n+            case DEBUG:\n+                return \"DBUG\"; // keeping abbreviated name for historical reasons", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NTQ2Nw=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0NTQ5Mw==", "bodyText": "Sure we can use \"DEBUG\", but we then have to use \"WARN \" instead of \"WARN\" to keep the formatting nice.  I'm OK with that... or even if we pad with \"%5s\" when printing (although adding the space here is probably a lot faster/simpler).", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384345493", "createdAt": "2020-02-26T08:49:34Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string\n+     * to the number of arguments provided on the various {@link org.slf4j.Logger} methods.\n+     * False will use the old-school Jetty message formatter, which will add missing <code>{}</code>\n+     * entries to the end of the format String if it detects more arguments then there are <code>{}</code>\n+     * elements in the provided format String.\n+     */\n+    private final boolean strictFormat;\n+\n+    /**\n+     * The fixed size of the thread name to use for output\n+     */\n+    private final int threadPadding;\n+\n+    /**\n+     * The stream to write logging events to.\n+     */\n+    private PrintStream stderr;\n+\n+    public StdErrAppender(JettyLoggerConfiguration config)\n+    {\n+        this(config, System.err);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream)\n+    {\n+        this(config, stream, null);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream, ZoneId zoneId)\n+    {\n+        Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+        this.stderr = Objects.requireNonNull(stream, \"PrintStream\");\n+\n+        ZoneId tzone = zoneId;\n+        if (tzone == null)\n+        {\n+            tzone = config.getZoneId(ZONEID_KEY);\n+            if (tzone == null)\n+            {\n+                tzone = TimeZone.getDefault().toZoneId();\n+            }\n+        }\n+\n+        this.timezone = tzone;\n+        this.timestampFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+        this.timestampFormatter.withZone(timezone);\n+\n+        this.condensedNames = config.getBoolean(NAME_CONDENSE_KEY, true);\n+        this.escapedMessages = config.getBoolean(MESSAGE_ESCAPE_KEY, true);\n+        this.strictFormat = config.getBoolean(STRICT_SLF4J_FORMAT_KEY, true);\n+        this.threadPadding = config.getInt(THREAD_PADDING_KEY, -1);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, null, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, throwable, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message, Object... argumentArray)\n+    {\n+        Throwable cause = NormalizedParameters.getThrowableCandidate(argumentArray);\n+        emit(logger, level, timestamp, threadName, cause, message, argumentArray);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        StringBuilder builder = new StringBuilder(64);\n+        format(builder, logger, level, timestamp, threadName, throwable, message, argumentArray);\n+        stderr.println(builder);\n+    }\n+\n+    public ZoneId getTimeZone()\n+    {\n+        return timezone;\n+    }\n+\n+    public boolean isCondensedNames()\n+    {\n+        return condensedNames;\n+    }\n+\n+    public boolean isEscapedMessages()\n+    {\n+        return escapedMessages;\n+    }\n+\n+    public int getThreadPadding()\n+    {\n+        return threadPadding;\n+    }\n+\n+    public boolean isStrictFormat()\n+    {\n+        return strictFormat;\n+    }\n+\n+    public void setStream(PrintStream stream)\n+    {\n+        this.stderr = stream;\n+    }\n+\n+    private void format(StringBuilder builder, JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        Throwable cause = throwable;\n+\n+        // Timestamp\n+        ZonedDateTime tsInstant = Instant.ofEpochMilli(timestamp).atZone(timezone);\n+        timestampFormatter.formatTo(tsInstant, builder);\n+\n+        // Level\n+        builder.append(':').append(renderedLevel(level));\n+\n+        // Logger Name\n+        builder.append(':');\n+        if (condensedNames)\n+        {\n+            builder.append(logger.getCondensedName());\n+        }\n+        else\n+        {\n+            builder.append(logger.getName());\n+        }\n+\n+        // Thread Name\n+        builder.append(':');\n+        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(':');\n+\n+        // Message\n+        builder.append(' ');\n+\n+        if (strictFormat)\n+        {\n+            FormattingTuple ft = MessageFormatter.arrayFormat(message, argumentArray);\n+            appendEscaped(builder, ft.getMessage());\n+            if (cause == null)\n+            {\n+                cause = ft.getThrowable();\n+            }\n+        }\n+        else\n+        {\n+            // TODO: this should really be removed, as it violates the slf4j API contract for throwables and such\n+            StringBuilder msg = new StringBuilder();\n+            Object[] args = argumentArray == null ? EMPTY_ARGS : argumentArray;\n+            msg.append(Objects.requireNonNullElseGet(message, () -> \"{} \".repeat(args.length)));\n+            String braces = \"{}\";\n+            int start = 0;\n+            for (Object arg : args)\n+            {\n+                int bracesIndex = msg.indexOf(braces, start);\n+                if (bracesIndex < 0)\n+                {\n+                    appendEscaped(builder, msg.substring(start));\n+                    builder.append(\" \");\n+                    if (arg != null)\n+                        builder.append(arg);\n+                    start = msg.length();\n+                }\n+                else\n+                {\n+                    appendEscaped(builder, msg.substring(start, bracesIndex));\n+                    builder.append(arg);\n+                    start = bracesIndex + braces.length();\n+                }\n+            }\n+            appendEscaped(builder, msg.substring(start));\n+        }\n+\n+        // Throwable\n+        if (cause != null)\n+        {\n+            if (logger.isHideStacks())\n+            {\n+                builder.append(\": \").append(cause);\n+            }\n+            else\n+            {\n+                appendCause(builder, cause, \"\");\n+            }\n+        }\n+    }\n+\n+    private String renderedLevel(Level level)\n+    {\n+        switch (level)\n+        {\n+            case ERROR:  // New for Jetty 10+\n+                return \"ERROR\";\n+            case WARN:\n+                return \"WARN\";\n+            case INFO:\n+                return \"INFO\";\n+            case DEBUG:\n+                return \"DBUG\"; // keeping abbreviated name for historical reasons", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NTQ2Nw=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4Njk4Nw==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384486987", "createdAt": "2020-02-26T13:21:40Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string\n+     * to the number of arguments provided on the various {@link org.slf4j.Logger} methods.\n+     * False will use the old-school Jetty message formatter, which will add missing <code>{}</code>\n+     * entries to the end of the format String if it detects more arguments then there are <code>{}</code>\n+     * elements in the provided format String.\n+     */\n+    private final boolean strictFormat;\n+\n+    /**\n+     * The fixed size of the thread name to use for output\n+     */\n+    private final int threadPadding;\n+\n+    /**\n+     * The stream to write logging events to.\n+     */\n+    private PrintStream stderr;\n+\n+    public StdErrAppender(JettyLoggerConfiguration config)\n+    {\n+        this(config, System.err);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream)\n+    {\n+        this(config, stream, null);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream, ZoneId zoneId)\n+    {\n+        Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+        this.stderr = Objects.requireNonNull(stream, \"PrintStream\");\n+\n+        ZoneId tzone = zoneId;\n+        if (tzone == null)\n+        {\n+            tzone = config.getZoneId(ZONEID_KEY);\n+            if (tzone == null)\n+            {\n+                tzone = TimeZone.getDefault().toZoneId();\n+            }\n+        }\n+\n+        this.timezone = tzone;\n+        this.timestampFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+        this.timestampFormatter.withZone(timezone);\n+\n+        this.condensedNames = config.getBoolean(NAME_CONDENSE_KEY, true);\n+        this.escapedMessages = config.getBoolean(MESSAGE_ESCAPE_KEY, true);\n+        this.strictFormat = config.getBoolean(STRICT_SLF4J_FORMAT_KEY, true);\n+        this.threadPadding = config.getInt(THREAD_PADDING_KEY, -1);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, null, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, throwable, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message, Object... argumentArray)\n+    {\n+        Throwable cause = NormalizedParameters.getThrowableCandidate(argumentArray);\n+        emit(logger, level, timestamp, threadName, cause, message, argumentArray);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        StringBuilder builder = new StringBuilder(64);\n+        format(builder, logger, level, timestamp, threadName, throwable, message, argumentArray);\n+        stderr.println(builder);\n+    }\n+\n+    public ZoneId getTimeZone()\n+    {\n+        return timezone;\n+    }\n+\n+    public boolean isCondensedNames()\n+    {\n+        return condensedNames;\n+    }\n+\n+    public boolean isEscapedMessages()\n+    {\n+        return escapedMessages;\n+    }\n+\n+    public int getThreadPadding()\n+    {\n+        return threadPadding;\n+    }\n+\n+    public boolean isStrictFormat()\n+    {\n+        return strictFormat;\n+    }\n+\n+    public void setStream(PrintStream stream)\n+    {\n+        this.stderr = stream;\n+    }\n+\n+    private void format(StringBuilder builder, JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        Throwable cause = throwable;\n+\n+        // Timestamp\n+        ZonedDateTime tsInstant = Instant.ofEpochMilli(timestamp).atZone(timezone);\n+        timestampFormatter.formatTo(tsInstant, builder);\n+\n+        // Level\n+        builder.append(':').append(renderedLevel(level));\n+\n+        // Logger Name\n+        builder.append(':');\n+        if (condensedNames)\n+        {\n+            builder.append(logger.getCondensedName());\n+        }\n+        else\n+        {\n+            builder.append(logger.getName());\n+        }\n+\n+        // Thread Name\n+        builder.append(':');\n+        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(':');\n+\n+        // Message\n+        builder.append(' ');\n+\n+        if (strictFormat)\n+        {\n+            FormattingTuple ft = MessageFormatter.arrayFormat(message, argumentArray);\n+            appendEscaped(builder, ft.getMessage());\n+            if (cause == null)\n+            {\n+                cause = ft.getThrowable();\n+            }\n+        }\n+        else\n+        {\n+            // TODO: this should really be removed, as it violates the slf4j API contract for throwables and such\n+            StringBuilder msg = new StringBuilder();\n+            Object[] args = argumentArray == null ? EMPTY_ARGS : argumentArray;\n+            msg.append(Objects.requireNonNullElseGet(message, () -> \"{} \".repeat(args.length)));\n+            String braces = \"{}\";\n+            int start = 0;\n+            for (Object arg : args)\n+            {\n+                int bracesIndex = msg.indexOf(braces, start);\n+                if (bracesIndex < 0)\n+                {\n+                    appendEscaped(builder, msg.substring(start));\n+                    builder.append(\" \");\n+                    if (arg != null)\n+                        builder.append(arg);\n+                    start = msg.length();\n+                }\n+                else\n+                {\n+                    appendEscaped(builder, msg.substring(start, bracesIndex));\n+                    builder.append(arg);\n+                    start = bracesIndex + braces.length();\n+                }\n+            }\n+            appendEscaped(builder, msg.substring(start));\n+        }\n+\n+        // Throwable\n+        if (cause != null)\n+        {\n+            if (logger.isHideStacks())\n+            {\n+                builder.append(\": \").append(cause);\n+            }\n+            else\n+            {\n+                appendCause(builder, cause, \"\");\n+            }\n+        }\n+    }\n+\n+    private String renderedLevel(Level level)\n+    {\n+        switch (level)\n+        {\n+            case ERROR:  // New for Jetty 10+\n+                return \"ERROR\";\n+            case WARN:\n+                return \"WARN\";\n+            case INFO:\n+                return \"INFO\";\n+            case DEBUG:\n+                return \"DBUG\"; // keeping abbreviated name for historical reasons", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NTQ2Nw=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTg5NjcxOnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzoxODo1N1rOFugZtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoyMTozMVrOFurOAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwOTY4Nw==", "bodyText": "Do we need this static instance at all?  The instance we will use is the one created by the JettyLoggingServiceProvider so why confuse things and have another lazy static?", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384309687", "createdAt": "2020-02-26T07:18:57Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,213 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0MjAxMw==", "bodyText": "That static is used by both our implementation (to handle cascading level and hidestacks runtime changes) and the JettyLoggingServiceProvider's own initialize() phase.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384442013", "createdAt": "2020-02-26T11:45:31Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,213 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwOTY4Nw=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1NjI3MA==", "bodyText": "I think this is needlessly complex and the use of initiailize methods means we cannot use fast finals.\nThe JettyLoggingServiceProvider should just make it's own instance and pass the configuration into the constructor. If slf4j is providing us with a life cycle mechanism, then I don't see why we need to duplicate with statics.  Can you try to get rid of this", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384456270", "createdAt": "2020-02-26T12:18:12Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,213 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwOTY4Nw=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4NjkxMg==", "bodyText": "Removed singletons at JettyLoggerFactory", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384486912", "createdAt": "2020-02-26T13:21:31Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,213 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    protected static JettyLoggerFactory getLoggerFactory()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwOTY4Nw=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTkwNTA2OnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "isResolved": true, "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzoyMzoxM1rOFuge2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMjo1ODozN1rOFuqg8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMTAwMA==", "bodyText": "Why are we not using DateCache?    I know it is not as flexible as a modern formatter, but it is fast for the simple data stamp that this log needs.  If users want anything fancier, they should replace our logging.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384311000", "createdAt": "2020-02-26T07:23:13Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0MTMwMA==", "bodyText": "Our DateCache exists in jetty-util (which we cannot depend on), and it uses the standard Java DateTimeFormatter in exactly the same way like this code does (when formatting with milliseconds like this Appender does).\nThe DateCache only works on caching results that are on the same second and do not contain a millisecond formatting string.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384441300", "createdAt": "2020-02-26T11:43:59Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMTAwMA=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0MzgxNg==", "bodyText": "StdErrLog uses DateCache and separately handles the ms.  So why can't we depend on jetty-util?      I know it is a very old class.... but when it was introduced it was VERY beneficial.  If we are doing full logging, we can avoid thousands of time formats per second - well worth it!", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384443816", "createdAt": "2020-02-26T11:49:33Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMTAwMA=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0Njk3OA==", "bodyText": "Yes, and I tested StdErrLog's DateCache usage, and found it has a 100% cache-miss on uses with DateCache simply because it formats with milliseconds.\nWhich means, DateCache always used java's DateTimeFormatter to format.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384446978", "createdAt": "2020-02-26T11:56:38Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMTAwMA=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0ODkwOA==", "bodyText": "Opened #4605 to review DateCache.\nThe results of that can determine what we do here.\nUse it more aggressively everywhere (including this jetty-slf4j-impl), or something else.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384448908", "createdAt": "2020-02-26T12:00:56Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMTAwMA=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1MDMzMA==", "bodyText": "Then let's not remove it and have to review to have it replace.  Keep it and review to see if we remove it!", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384450330", "createdAt": "2020-02-26T12:04:22Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMTAwMA=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1MzE3Mg==", "bodyText": "I cannot add the dependency on jetty-util here as jetty-util uses logging it's a loop in both the dependencies on maven and the load order at jvm runtime.\nI would rather just rip out the DateTimeFormatter entirely and just use raw inline formatting against the Java 8+ date/time APIs.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384453172", "createdAt": "2020-02-26T12:11:02Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMTAwMA=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1NjgwNQ==", "bodyText": "StdErrLog uses it, so this can use it.    Avoiding calling any formatter thousands of times per second is very valuble.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384456805", "createdAt": "2020-02-26T12:19:23Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMTAwMA=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1ODg4Mw==", "bodyText": "I just ran StdErrLogTest and it had 1 MISS and every other log in the test was a date cache hit!", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384458883", "createdAt": "2020-02-26T12:24:10Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMTAwMA=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1OTg4NQ==", "bodyText": "Note the solution to the dependency issue is to make this implementation part of org.eclipse.jetty.util.log in jetty-util", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384459885", "createdAt": "2020-02-26T12:26:29Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMTAwMA=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3MjYwMw==", "bodyText": "I did this differently:\n\nBrought in DateCache into jetty-sfl4j-impl\nStripped out everything that jetty-slf4j-impl wouldn't use (down to 1 public method)\nRenamed it to Timestamp\nHave millisecond formatting done within Timestamp on top of the cached Tick.formattedString (if a cache hit or cache miss on the second cache, just like DateCache does)", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384472603", "createdAt": "2020-02-26T12:53:27Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMTAwMA=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3MjYzMg==", "bodyText": "Oh but we can't do that... because then we can't replace the jar.... hmmmmm", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384472632", "createdAt": "2020-02-26T12:53:29Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMTAwMA=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3NTM3Ng==", "bodyText": "This is the only method in DateCache that a logger would use.\n\n  \n    \n      jetty.project/jetty-util/src/main/java/org/eclipse/jetty/util/DateCache.java\n    \n    \n        Lines 203 to 222\n      in\n      7ce14a4\n    \n    \n    \n    \n\n        \n          \n               /** \n        \n\n        \n          \n                * Format a date according to our stored formatter. \n        \n\n        \n          \n                * The passed time is expected to be close to the current time, so it is \n        \n\n        \n          \n                * compared to the last value passed and if it is within the same second, \n        \n\n        \n          \n                * the format is reused.  Otherwise a new cached format is created. \n        \n\n        \n          \n                * \n        \n\n        \n          \n                * @param now the milliseconds since unix epoch \n        \n\n        \n          \n                * @return Formatted date \n        \n\n        \n          \n                */ \n        \n\n        \n          \n               public String formatNow(long now) \n        \n\n        \n          \n               { \n        \n\n        \n          \n                   long seconds = now / 1000; \n        \n\n        \n          \n            \n        \n\n        \n          \n                   Tick tick = _tick; \n        \n\n        \n          \n            \n        \n\n        \n          \n                   // Is this the cached time \n        \n\n        \n          \n                   if (tick != null && tick._seconds == seconds) \n        \n\n        \n          \n                       return tick._string; \n        \n\n        \n          \n                   return formatTick(now)._string; \n        \n\n        \n          \n               } \n        \n    \n  \n\n\nIncidentally, in the process, I discovered a bug in DateCache, filed in #4606", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384475376", "createdAt": "2020-02-26T12:58:37Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMTAwMA=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTkxNTIwOnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzoyODoxM1rOFuglKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoyMToxOFrOFurNjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMjYxOQ==", "bodyText": "what is this?  Looks like slf4j implementation to me.... and a mode of operation.   We don't want either.\nWe just want simple formatting as we currently do, if anything different is required then we replace the logging jar.\nModes of operation are just slow and confusing.\nSo we definitely have to remove the modes.\nAre the slf4j helper classes in the API jar?   What are the differences between their format and ours?", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384312619", "createdAt": "2020-02-26T07:28:13Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string\n+     * to the number of arguments provided on the various {@link org.slf4j.Logger} methods.\n+     * False will use the old-school Jetty message formatter, which will add missing <code>{}</code>\n+     * entries to the end of the format String if it detects more arguments then there are <code>{}</code>\n+     * elements in the provided format String.\n+     */\n+    private final boolean strictFormat;\n+\n+    /**\n+     * The fixed size of the thread name to use for output\n+     */\n+    private final int threadPadding;\n+\n+    /**\n+     * The stream to write logging events to.\n+     */\n+    private PrintStream stderr;\n+\n+    public StdErrAppender(JettyLoggerConfiguration config)\n+    {\n+        this(config, System.err);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream)\n+    {\n+        this(config, stream, null);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream, ZoneId zoneId)\n+    {\n+        Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+        this.stderr = Objects.requireNonNull(stream, \"PrintStream\");\n+\n+        ZoneId tzone = zoneId;\n+        if (tzone == null)\n+        {\n+            tzone = config.getZoneId(ZONEID_KEY);\n+            if (tzone == null)\n+            {\n+                tzone = TimeZone.getDefault().toZoneId();\n+            }\n+        }\n+\n+        this.timezone = tzone;\n+        this.timestampFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+        this.timestampFormatter.withZone(timezone);\n+\n+        this.condensedNames = config.getBoolean(NAME_CONDENSE_KEY, true);\n+        this.escapedMessages = config.getBoolean(MESSAGE_ESCAPE_KEY, true);\n+        this.strictFormat = config.getBoolean(STRICT_SLF4J_FORMAT_KEY, true);\n+        this.threadPadding = config.getInt(THREAD_PADDING_KEY, -1);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, null, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, throwable, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message, Object... argumentArray)\n+    {\n+        Throwable cause = NormalizedParameters.getThrowableCandidate(argumentArray);\n+        emit(logger, level, timestamp, threadName, cause, message, argumentArray);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        StringBuilder builder = new StringBuilder(64);\n+        format(builder, logger, level, timestamp, threadName, throwable, message, argumentArray);\n+        stderr.println(builder);\n+    }\n+\n+    public ZoneId getTimeZone()\n+    {\n+        return timezone;\n+    }\n+\n+    public boolean isCondensedNames()\n+    {\n+        return condensedNames;\n+    }\n+\n+    public boolean isEscapedMessages()\n+    {\n+        return escapedMessages;\n+    }\n+\n+    public int getThreadPadding()\n+    {\n+        return threadPadding;\n+    }\n+\n+    public boolean isStrictFormat()\n+    {\n+        return strictFormat;\n+    }\n+\n+    public void setStream(PrintStream stream)\n+    {\n+        this.stderr = stream;\n+    }\n+\n+    private void format(StringBuilder builder, JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        Throwable cause = throwable;\n+\n+        // Timestamp\n+        ZonedDateTime tsInstant = Instant.ofEpochMilli(timestamp).atZone(timezone);\n+        timestampFormatter.formatTo(tsInstant, builder);\n+\n+        // Level\n+        builder.append(':').append(renderedLevel(level));\n+\n+        // Logger Name\n+        builder.append(':');\n+        if (condensedNames)\n+        {\n+            builder.append(logger.getCondensedName());\n+        }\n+        else\n+        {\n+            builder.append(logger.getName());\n+        }\n+\n+        // Thread Name\n+        builder.append(':');\n+        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(':');\n+\n+        // Message\n+        builder.append(' ');\n+\n+        if (strictFormat)\n+        {\n+            FormattingTuple ft = MessageFormatter.arrayFormat(message, argumentArray);\n+            appendEscaped(builder, ft.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzOTIxMw==", "bodyText": "Our formatter is historical and frankly broken.\nI'll remove our formatter (the MessageFormatter is in the slf4j-api jar and handles formatting along with final Throwable logic)", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384439213", "createdAt": "2020-02-26T11:39:23Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string\n+     * to the number of arguments provided on the various {@link org.slf4j.Logger} methods.\n+     * False will use the old-school Jetty message formatter, which will add missing <code>{}</code>\n+     * entries to the end of the format String if it detects more arguments then there are <code>{}</code>\n+     * elements in the provided format String.\n+     */\n+    private final boolean strictFormat;\n+\n+    /**\n+     * The fixed size of the thread name to use for output\n+     */\n+    private final int threadPadding;\n+\n+    /**\n+     * The stream to write logging events to.\n+     */\n+    private PrintStream stderr;\n+\n+    public StdErrAppender(JettyLoggerConfiguration config)\n+    {\n+        this(config, System.err);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream)\n+    {\n+        this(config, stream, null);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream, ZoneId zoneId)\n+    {\n+        Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+        this.stderr = Objects.requireNonNull(stream, \"PrintStream\");\n+\n+        ZoneId tzone = zoneId;\n+        if (tzone == null)\n+        {\n+            tzone = config.getZoneId(ZONEID_KEY);\n+            if (tzone == null)\n+            {\n+                tzone = TimeZone.getDefault().toZoneId();\n+            }\n+        }\n+\n+        this.timezone = tzone;\n+        this.timestampFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+        this.timestampFormatter.withZone(timezone);\n+\n+        this.condensedNames = config.getBoolean(NAME_CONDENSE_KEY, true);\n+        this.escapedMessages = config.getBoolean(MESSAGE_ESCAPE_KEY, true);\n+        this.strictFormat = config.getBoolean(STRICT_SLF4J_FORMAT_KEY, true);\n+        this.threadPadding = config.getInt(THREAD_PADDING_KEY, -1);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, null, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, throwable, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message, Object... argumentArray)\n+    {\n+        Throwable cause = NormalizedParameters.getThrowableCandidate(argumentArray);\n+        emit(logger, level, timestamp, threadName, cause, message, argumentArray);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        StringBuilder builder = new StringBuilder(64);\n+        format(builder, logger, level, timestamp, threadName, throwable, message, argumentArray);\n+        stderr.println(builder);\n+    }\n+\n+    public ZoneId getTimeZone()\n+    {\n+        return timezone;\n+    }\n+\n+    public boolean isCondensedNames()\n+    {\n+        return condensedNames;\n+    }\n+\n+    public boolean isEscapedMessages()\n+    {\n+        return escapedMessages;\n+    }\n+\n+    public int getThreadPadding()\n+    {\n+        return threadPadding;\n+    }\n+\n+    public boolean isStrictFormat()\n+    {\n+        return strictFormat;\n+    }\n+\n+    public void setStream(PrintStream stream)\n+    {\n+        this.stderr = stream;\n+    }\n+\n+    private void format(StringBuilder builder, JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        Throwable cause = throwable;\n+\n+        // Timestamp\n+        ZonedDateTime tsInstant = Instant.ofEpochMilli(timestamp).atZone(timezone);\n+        timestampFormatter.formatTo(tsInstant, builder);\n+\n+        // Level\n+        builder.append(':').append(renderedLevel(level));\n+\n+        // Logger Name\n+        builder.append(':');\n+        if (condensedNames)\n+        {\n+            builder.append(logger.getCondensedName());\n+        }\n+        else\n+        {\n+            builder.append(logger.getName());\n+        }\n+\n+        // Thread Name\n+        builder.append(':');\n+        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(':');\n+\n+        // Message\n+        builder.append(' ');\n+\n+        if (strictFormat)\n+        {\n+            FormattingTuple ft = MessageFormatter.arrayFormat(message, argumentArray);\n+            appendEscaped(builder, ft.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMjYxOQ=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0Mjk0Ng==", "bodyText": "OK - but can you explain the differences?", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384442946", "createdAt": "2020-02-26T11:47:34Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string\n+     * to the number of arguments provided on the various {@link org.slf4j.Logger} methods.\n+     * False will use the old-school Jetty message formatter, which will add missing <code>{}</code>\n+     * entries to the end of the format String if it detects more arguments then there are <code>{}</code>\n+     * elements in the provided format String.\n+     */\n+    private final boolean strictFormat;\n+\n+    /**\n+     * The fixed size of the thread name to use for output\n+     */\n+    private final int threadPadding;\n+\n+    /**\n+     * The stream to write logging events to.\n+     */\n+    private PrintStream stderr;\n+\n+    public StdErrAppender(JettyLoggerConfiguration config)\n+    {\n+        this(config, System.err);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream)\n+    {\n+        this(config, stream, null);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream, ZoneId zoneId)\n+    {\n+        Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+        this.stderr = Objects.requireNonNull(stream, \"PrintStream\");\n+\n+        ZoneId tzone = zoneId;\n+        if (tzone == null)\n+        {\n+            tzone = config.getZoneId(ZONEID_KEY);\n+            if (tzone == null)\n+            {\n+                tzone = TimeZone.getDefault().toZoneId();\n+            }\n+        }\n+\n+        this.timezone = tzone;\n+        this.timestampFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+        this.timestampFormatter.withZone(timezone);\n+\n+        this.condensedNames = config.getBoolean(NAME_CONDENSE_KEY, true);\n+        this.escapedMessages = config.getBoolean(MESSAGE_ESCAPE_KEY, true);\n+        this.strictFormat = config.getBoolean(STRICT_SLF4J_FORMAT_KEY, true);\n+        this.threadPadding = config.getInt(THREAD_PADDING_KEY, -1);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, null, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, throwable, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message, Object... argumentArray)\n+    {\n+        Throwable cause = NormalizedParameters.getThrowableCandidate(argumentArray);\n+        emit(logger, level, timestamp, threadName, cause, message, argumentArray);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        StringBuilder builder = new StringBuilder(64);\n+        format(builder, logger, level, timestamp, threadName, throwable, message, argumentArray);\n+        stderr.println(builder);\n+    }\n+\n+    public ZoneId getTimeZone()\n+    {\n+        return timezone;\n+    }\n+\n+    public boolean isCondensedNames()\n+    {\n+        return condensedNames;\n+    }\n+\n+    public boolean isEscapedMessages()\n+    {\n+        return escapedMessages;\n+    }\n+\n+    public int getThreadPadding()\n+    {\n+        return threadPadding;\n+    }\n+\n+    public boolean isStrictFormat()\n+    {\n+        return strictFormat;\n+    }\n+\n+    public void setStream(PrintStream stream)\n+    {\n+        this.stderr = stream;\n+    }\n+\n+    private void format(StringBuilder builder, JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        Throwable cause = throwable;\n+\n+        // Timestamp\n+        ZonedDateTime tsInstant = Instant.ofEpochMilli(timestamp).atZone(timezone);\n+        timestampFormatter.formatTo(tsInstant, builder);\n+\n+        // Level\n+        builder.append(':').append(renderedLevel(level));\n+\n+        // Logger Name\n+        builder.append(':');\n+        if (condensedNames)\n+        {\n+            builder.append(logger.getCondensedName());\n+        }\n+        else\n+        {\n+            builder.append(logger.getName());\n+        }\n+\n+        // Thread Name\n+        builder.append(':');\n+        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(':');\n+\n+        // Message\n+        builder.append(' ');\n+\n+        if (strictFormat)\n+        {\n+            FormattingTuple ft = MessageFormatter.arrayFormat(message, argumentArray);\n+            appendEscaped(builder, ft.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMjYxOQ=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0NjI1Mg==", "bodyText": "MessageFormatter will ...\n\nperform the {} formatting\nhandle escaped \\\\{} entries in the input format string\nhonor the provided {} and not add extra ones that are missing\nhandle null argument array entries properly (by not showing null in the output)\nskip formatting if arguments array is empty\nif final argument is a throwable make note of it and return it\n\nOur formatter will ...\n\nperform the {} formatting\nnot honor escaped \\\\{} entries\nadd missing {} entries to process entire arguments array\nformat even if arguments array is empty or contains null characters\nformat Throwable via Throwable.toString() as any other argument in the array", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384446252", "createdAt": "2020-02-26T11:55:05Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string\n+     * to the number of arguments provided on the various {@link org.slf4j.Logger} methods.\n+     * False will use the old-school Jetty message formatter, which will add missing <code>{}</code>\n+     * entries to the end of the format String if it detects more arguments then there are <code>{}</code>\n+     * elements in the provided format String.\n+     */\n+    private final boolean strictFormat;\n+\n+    /**\n+     * The fixed size of the thread name to use for output\n+     */\n+    private final int threadPadding;\n+\n+    /**\n+     * The stream to write logging events to.\n+     */\n+    private PrintStream stderr;\n+\n+    public StdErrAppender(JettyLoggerConfiguration config)\n+    {\n+        this(config, System.err);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream)\n+    {\n+        this(config, stream, null);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream, ZoneId zoneId)\n+    {\n+        Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+        this.stderr = Objects.requireNonNull(stream, \"PrintStream\");\n+\n+        ZoneId tzone = zoneId;\n+        if (tzone == null)\n+        {\n+            tzone = config.getZoneId(ZONEID_KEY);\n+            if (tzone == null)\n+            {\n+                tzone = TimeZone.getDefault().toZoneId();\n+            }\n+        }\n+\n+        this.timezone = tzone;\n+        this.timestampFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+        this.timestampFormatter.withZone(timezone);\n+\n+        this.condensedNames = config.getBoolean(NAME_CONDENSE_KEY, true);\n+        this.escapedMessages = config.getBoolean(MESSAGE_ESCAPE_KEY, true);\n+        this.strictFormat = config.getBoolean(STRICT_SLF4J_FORMAT_KEY, true);\n+        this.threadPadding = config.getInt(THREAD_PADDING_KEY, -1);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, null, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, throwable, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message, Object... argumentArray)\n+    {\n+        Throwable cause = NormalizedParameters.getThrowableCandidate(argumentArray);\n+        emit(logger, level, timestamp, threadName, cause, message, argumentArray);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        StringBuilder builder = new StringBuilder(64);\n+        format(builder, logger, level, timestamp, threadName, throwable, message, argumentArray);\n+        stderr.println(builder);\n+    }\n+\n+    public ZoneId getTimeZone()\n+    {\n+        return timezone;\n+    }\n+\n+    public boolean isCondensedNames()\n+    {\n+        return condensedNames;\n+    }\n+\n+    public boolean isEscapedMessages()\n+    {\n+        return escapedMessages;\n+    }\n+\n+    public int getThreadPadding()\n+    {\n+        return threadPadding;\n+    }\n+\n+    public boolean isStrictFormat()\n+    {\n+        return strictFormat;\n+    }\n+\n+    public void setStream(PrintStream stream)\n+    {\n+        this.stderr = stream;\n+    }\n+\n+    private void format(StringBuilder builder, JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        Throwable cause = throwable;\n+\n+        // Timestamp\n+        ZonedDateTime tsInstant = Instant.ofEpochMilli(timestamp).atZone(timezone);\n+        timestampFormatter.formatTo(tsInstant, builder);\n+\n+        // Level\n+        builder.append(':').append(renderedLevel(level));\n+\n+        // Logger Name\n+        builder.append(':');\n+        if (condensedNames)\n+        {\n+            builder.append(logger.getCondensedName());\n+        }\n+        else\n+        {\n+            builder.append(logger.getName());\n+        }\n+\n+        // Thread Name\n+        builder.append(':');\n+        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(':');\n+\n+        // Message\n+        builder.append(' ');\n+\n+        if (strictFormat)\n+        {\n+            FormattingTuple ft = MessageFormatter.arrayFormat(message, argumentArray);\n+            appendEscaped(builder, ft.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMjYxOQ=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0OTYzOQ==", "bodyText": "OK sounds near enough... and if we have the helpers on the classpath anyway!", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384449639", "createdAt": "2020-02-26T12:02:48Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string\n+     * to the number of arguments provided on the various {@link org.slf4j.Logger} methods.\n+     * False will use the old-school Jetty message formatter, which will add missing <code>{}</code>\n+     * entries to the end of the format String if it detects more arguments then there are <code>{}</code>\n+     * elements in the provided format String.\n+     */\n+    private final boolean strictFormat;\n+\n+    /**\n+     * The fixed size of the thread name to use for output\n+     */\n+    private final int threadPadding;\n+\n+    /**\n+     * The stream to write logging events to.\n+     */\n+    private PrintStream stderr;\n+\n+    public StdErrAppender(JettyLoggerConfiguration config)\n+    {\n+        this(config, System.err);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream)\n+    {\n+        this(config, stream, null);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream, ZoneId zoneId)\n+    {\n+        Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+        this.stderr = Objects.requireNonNull(stream, \"PrintStream\");\n+\n+        ZoneId tzone = zoneId;\n+        if (tzone == null)\n+        {\n+            tzone = config.getZoneId(ZONEID_KEY);\n+            if (tzone == null)\n+            {\n+                tzone = TimeZone.getDefault().toZoneId();\n+            }\n+        }\n+\n+        this.timezone = tzone;\n+        this.timestampFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+        this.timestampFormatter.withZone(timezone);\n+\n+        this.condensedNames = config.getBoolean(NAME_CONDENSE_KEY, true);\n+        this.escapedMessages = config.getBoolean(MESSAGE_ESCAPE_KEY, true);\n+        this.strictFormat = config.getBoolean(STRICT_SLF4J_FORMAT_KEY, true);\n+        this.threadPadding = config.getInt(THREAD_PADDING_KEY, -1);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, null, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, throwable, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message, Object... argumentArray)\n+    {\n+        Throwable cause = NormalizedParameters.getThrowableCandidate(argumentArray);\n+        emit(logger, level, timestamp, threadName, cause, message, argumentArray);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        StringBuilder builder = new StringBuilder(64);\n+        format(builder, logger, level, timestamp, threadName, throwable, message, argumentArray);\n+        stderr.println(builder);\n+    }\n+\n+    public ZoneId getTimeZone()\n+    {\n+        return timezone;\n+    }\n+\n+    public boolean isCondensedNames()\n+    {\n+        return condensedNames;\n+    }\n+\n+    public boolean isEscapedMessages()\n+    {\n+        return escapedMessages;\n+    }\n+\n+    public int getThreadPadding()\n+    {\n+        return threadPadding;\n+    }\n+\n+    public boolean isStrictFormat()\n+    {\n+        return strictFormat;\n+    }\n+\n+    public void setStream(PrintStream stream)\n+    {\n+        this.stderr = stream;\n+    }\n+\n+    private void format(StringBuilder builder, JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        Throwable cause = throwable;\n+\n+        // Timestamp\n+        ZonedDateTime tsInstant = Instant.ofEpochMilli(timestamp).atZone(timezone);\n+        timestampFormatter.formatTo(tsInstant, builder);\n+\n+        // Level\n+        builder.append(':').append(renderedLevel(level));\n+\n+        // Logger Name\n+        builder.append(':');\n+        if (condensedNames)\n+        {\n+            builder.append(logger.getCondensedName());\n+        }\n+        else\n+        {\n+            builder.append(logger.getName());\n+        }\n+\n+        // Thread Name\n+        builder.append(':');\n+        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(':');\n+\n+        // Message\n+        builder.append(' ');\n+\n+        if (strictFormat)\n+        {\n+            FormattingTuple ft = MessageFormatter.arrayFormat(message, argumentArray);\n+            appendEscaped(builder, ft.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMjYxOQ=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4Njc5Nw==", "bodyText": "The lax formatting that Jetty StdErrLog had is now removed", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384486797", "createdAt": "2020-02-26T13:21:18Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string\n+     * to the number of arguments provided on the various {@link org.slf4j.Logger} methods.\n+     * False will use the old-school Jetty message formatter, which will add missing <code>{}</code>\n+     * entries to the end of the format String if it detects more arguments then there are <code>{}</code>\n+     * elements in the provided format String.\n+     */\n+    private final boolean strictFormat;\n+\n+    /**\n+     * The fixed size of the thread name to use for output\n+     */\n+    private final int threadPadding;\n+\n+    /**\n+     * The stream to write logging events to.\n+     */\n+    private PrintStream stderr;\n+\n+    public StdErrAppender(JettyLoggerConfiguration config)\n+    {\n+        this(config, System.err);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream)\n+    {\n+        this(config, stream, null);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream, ZoneId zoneId)\n+    {\n+        Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+        this.stderr = Objects.requireNonNull(stream, \"PrintStream\");\n+\n+        ZoneId tzone = zoneId;\n+        if (tzone == null)\n+        {\n+            tzone = config.getZoneId(ZONEID_KEY);\n+            if (tzone == null)\n+            {\n+                tzone = TimeZone.getDefault().toZoneId();\n+            }\n+        }\n+\n+        this.timezone = tzone;\n+        this.timestampFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+        this.timestampFormatter.withZone(timezone);\n+\n+        this.condensedNames = config.getBoolean(NAME_CONDENSE_KEY, true);\n+        this.escapedMessages = config.getBoolean(MESSAGE_ESCAPE_KEY, true);\n+        this.strictFormat = config.getBoolean(STRICT_SLF4J_FORMAT_KEY, true);\n+        this.threadPadding = config.getInt(THREAD_PADDING_KEY, -1);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, null, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, throwable, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message, Object... argumentArray)\n+    {\n+        Throwable cause = NormalizedParameters.getThrowableCandidate(argumentArray);\n+        emit(logger, level, timestamp, threadName, cause, message, argumentArray);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        StringBuilder builder = new StringBuilder(64);\n+        format(builder, logger, level, timestamp, threadName, throwable, message, argumentArray);\n+        stderr.println(builder);\n+    }\n+\n+    public ZoneId getTimeZone()\n+    {\n+        return timezone;\n+    }\n+\n+    public boolean isCondensedNames()\n+    {\n+        return condensedNames;\n+    }\n+\n+    public boolean isEscapedMessages()\n+    {\n+        return escapedMessages;\n+    }\n+\n+    public int getThreadPadding()\n+    {\n+        return threadPadding;\n+    }\n+\n+    public boolean isStrictFormat()\n+    {\n+        return strictFormat;\n+    }\n+\n+    public void setStream(PrintStream stream)\n+    {\n+        this.stderr = stream;\n+    }\n+\n+    private void format(StringBuilder builder, JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        Throwable cause = throwable;\n+\n+        // Timestamp\n+        ZonedDateTime tsInstant = Instant.ofEpochMilli(timestamp).atZone(timezone);\n+        timestampFormatter.formatTo(tsInstant, builder);\n+\n+        // Level\n+        builder.append(':').append(renderedLevel(level));\n+\n+        // Logger Name\n+        builder.append(':');\n+        if (condensedNames)\n+        {\n+            builder.append(logger.getCondensedName());\n+        }\n+        else\n+        {\n+            builder.append(logger.getName());\n+        }\n+\n+        // Thread Name\n+        builder.append(':');\n+        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(':');\n+\n+        // Message\n+        builder.append(' ');\n+\n+        if (strictFormat)\n+        {\n+            FormattingTuple ft = MessageFormatter.arrayFormat(message, argumentArray);\n+            appendEscaped(builder, ft.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMjYxOQ=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTkyNjk1OnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzozMzoyOVrOFugsCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMTo0NjoyNFrOFuogMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxNDM3Nw==", "bodyText": "The intention is that all the level tags are the same length so that they read nicely down the screen (not sure how ignored escaped that), so they should either be:\n\"ERR \"\n\"WARN\"\n\"INFO\"\n\"DBUG\"\n\nor\n\"ERROR\"\n\"WARN \"\n\"INFO \"\n\"DEBUG\"", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384314377", "createdAt": "2020-02-26T07:33:29Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string\n+     * to the number of arguments provided on the various {@link org.slf4j.Logger} methods.\n+     * False will use the old-school Jetty message formatter, which will add missing <code>{}</code>\n+     * entries to the end of the format String if it detects more arguments then there are <code>{}</code>\n+     * elements in the provided format String.\n+     */\n+    private final boolean strictFormat;\n+\n+    /**\n+     * The fixed size of the thread name to use for output\n+     */\n+    private final int threadPadding;\n+\n+    /**\n+     * The stream to write logging events to.\n+     */\n+    private PrintStream stderr;\n+\n+    public StdErrAppender(JettyLoggerConfiguration config)\n+    {\n+        this(config, System.err);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream)\n+    {\n+        this(config, stream, null);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream, ZoneId zoneId)\n+    {\n+        Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+        this.stderr = Objects.requireNonNull(stream, \"PrintStream\");\n+\n+        ZoneId tzone = zoneId;\n+        if (tzone == null)\n+        {\n+            tzone = config.getZoneId(ZONEID_KEY);\n+            if (tzone == null)\n+            {\n+                tzone = TimeZone.getDefault().toZoneId();\n+            }\n+        }\n+\n+        this.timezone = tzone;\n+        this.timestampFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+        this.timestampFormatter.withZone(timezone);\n+\n+        this.condensedNames = config.getBoolean(NAME_CONDENSE_KEY, true);\n+        this.escapedMessages = config.getBoolean(MESSAGE_ESCAPE_KEY, true);\n+        this.strictFormat = config.getBoolean(STRICT_SLF4J_FORMAT_KEY, true);\n+        this.threadPadding = config.getInt(THREAD_PADDING_KEY, -1);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, null, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, throwable, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message, Object... argumentArray)\n+    {\n+        Throwable cause = NormalizedParameters.getThrowableCandidate(argumentArray);\n+        emit(logger, level, timestamp, threadName, cause, message, argumentArray);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        StringBuilder builder = new StringBuilder(64);\n+        format(builder, logger, level, timestamp, threadName, throwable, message, argumentArray);\n+        stderr.println(builder);\n+    }\n+\n+    public ZoneId getTimeZone()\n+    {\n+        return timezone;\n+    }\n+\n+    public boolean isCondensedNames()\n+    {\n+        return condensedNames;\n+    }\n+\n+    public boolean isEscapedMessages()\n+    {\n+        return escapedMessages;\n+    }\n+\n+    public int getThreadPadding()\n+    {\n+        return threadPadding;\n+    }\n+\n+    public boolean isStrictFormat()\n+    {\n+        return strictFormat;\n+    }\n+\n+    public void setStream(PrintStream stream)\n+    {\n+        this.stderr = stream;\n+    }\n+\n+    private void format(StringBuilder builder, JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        Throwable cause = throwable;\n+\n+        // Timestamp\n+        ZonedDateTime tsInstant = Instant.ofEpochMilli(timestamp).atZone(timezone);\n+        timestampFormatter.formatTo(tsInstant, builder);\n+\n+        // Level\n+        builder.append(':').append(renderedLevel(level));\n+\n+        // Logger Name\n+        builder.append(':');\n+        if (condensedNames)\n+        {\n+            builder.append(logger.getCondensedName());\n+        }\n+        else\n+        {\n+            builder.append(logger.getName());\n+        }\n+\n+        // Thread Name\n+        builder.append(':');\n+        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(':');\n+\n+        // Message\n+        builder.append(' ');\n+\n+        if (strictFormat)\n+        {\n+            FormattingTuple ft = MessageFormatter.arrayFormat(message, argumentArray);\n+            appendEscaped(builder, ft.getMessage());\n+            if (cause == null)\n+            {\n+                cause = ft.getThrowable();\n+            }\n+        }\n+        else\n+        {\n+            // TODO: this should really be removed, as it violates the slf4j API contract for throwables and such\n+            StringBuilder msg = new StringBuilder();\n+            Object[] args = argumentArray == null ? EMPTY_ARGS : argumentArray;\n+            msg.append(Objects.requireNonNullElseGet(message, () -> \"{} \".repeat(args.length)));\n+            String braces = \"{}\";\n+            int start = 0;\n+            for (Object arg : args)\n+            {\n+                int bracesIndex = msg.indexOf(braces, start);\n+                if (bracesIndex < 0)\n+                {\n+                    appendEscaped(builder, msg.substring(start));\n+                    builder.append(\" \");\n+                    if (arg != null)\n+                        builder.append(arg);\n+                    start = msg.length();\n+                }\n+                else\n+                {\n+                    appendEscaped(builder, msg.substring(start, bracesIndex));\n+                    builder.append(arg);\n+                    start = bracesIndex + braces.length();\n+                }\n+            }\n+            appendEscaped(builder, msg.substring(start));\n+        }\n+\n+        // Throwable\n+        if (cause != null)\n+        {\n+            if (logger.isHideStacks())\n+            {\n+                builder.append(\": \").append(cause);\n+            }\n+            else\n+            {\n+                appendCause(builder, cause, \"\");\n+            }\n+        }\n+    }\n+\n+    private String renderedLevel(Level level)\n+    {\n+        switch (level)\n+        {\n+            case ERROR:  // New for Jetty 10+\n+                return \"ERROR\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0MjQxNw==", "bodyText": "I'll use the second form.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384442417", "createdAt": "2020-02-26T11:46:24Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/StdErrAppender.java", "diffHunk": "@@ -0,0 +1,331 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.io.PrintStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+\n+import org.slf4j.event.Level;\n+import org.slf4j.helpers.FormattingTuple;\n+import org.slf4j.helpers.MessageFormatter;\n+import org.slf4j.helpers.NormalizedParameters;\n+\n+public class StdErrAppender implements JettyAppender\n+{\n+    /**\n+     * Configuration keys specific to the StdErrAppender\n+     */\n+    public static final String NAME_CONDENSE_KEY = \"org.eclipse.jetty.logging.appender.NAME_CONDENSE\";\n+    public static final String THREAD_PADDING_KEY = \"org.eclipse.jetty.logging.appender.THREAD_PADDING\";\n+    public static final String MESSAGE_ESCAPE_KEY = \"org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE\";\n+    public static final String STRICT_SLF4J_FORMAT_KEY = \"org.eclipse.jetty.logging.appender.STRICT_SLF4J_SYNTAX\";\n+    public static final String ZONEID_KEY = \"org.eclipse.jetty.logging.appender.ZONE_ID\";\n+\n+    private static final Object[] EMPTY_ARGS = new Object[0];\n+    private final DateTimeFormatter timestampFormatter;\n+    private final ZoneId timezone;\n+\n+    /**\n+     * True to have output show condensed logger names, false to use the as defined long names.\n+     */\n+    private final boolean condensedNames;\n+\n+    /**\n+     * True to have messages escaped for control characters, false to leave messages alone.\n+     */\n+    private final boolean escapedMessages;\n+\n+    /**\n+     * True to have formatting be based on the strict definition of Slf4J's {@link MessageFormatter},\n+     * where there has to be a match to the number of <code>{}</code> in the format string\n+     * to the number of arguments provided on the various {@link org.slf4j.Logger} methods.\n+     * False will use the old-school Jetty message formatter, which will add missing <code>{}</code>\n+     * entries to the end of the format String if it detects more arguments then there are <code>{}</code>\n+     * elements in the provided format String.\n+     */\n+    private final boolean strictFormat;\n+\n+    /**\n+     * The fixed size of the thread name to use for output\n+     */\n+    private final int threadPadding;\n+\n+    /**\n+     * The stream to write logging events to.\n+     */\n+    private PrintStream stderr;\n+\n+    public StdErrAppender(JettyLoggerConfiguration config)\n+    {\n+        this(config, System.err);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream)\n+    {\n+        this(config, stream, null);\n+    }\n+\n+    public StdErrAppender(JettyLoggerConfiguration config, PrintStream stream, ZoneId zoneId)\n+    {\n+        Objects.requireNonNull(config, \"JettyLoggerConfiguration\");\n+        this.stderr = Objects.requireNonNull(stream, \"PrintStream\");\n+\n+        ZoneId tzone = zoneId;\n+        if (tzone == null)\n+        {\n+            tzone = config.getZoneId(ZONEID_KEY);\n+            if (tzone == null)\n+            {\n+                tzone = TimeZone.getDefault().toZoneId();\n+            }\n+        }\n+\n+        this.timezone = tzone;\n+        this.timestampFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+        this.timestampFormatter.withZone(timezone);\n+\n+        this.condensedNames = config.getBoolean(NAME_CONDENSE_KEY, true);\n+        this.escapedMessages = config.getBoolean(MESSAGE_ESCAPE_KEY, true);\n+        this.strictFormat = config.getBoolean(STRICT_SLF4J_FORMAT_KEY, true);\n+        this.threadPadding = config.getInt(THREAD_PADDING_KEY, -1);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, null, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message)\n+    {\n+        emit(logger, level, timestamp, threadName, throwable, message, EMPTY_ARGS);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, String message, Object... argumentArray)\n+    {\n+        Throwable cause = NormalizedParameters.getThrowableCandidate(argumentArray);\n+        emit(logger, level, timestamp, threadName, cause, message, argumentArray);\n+    }\n+\n+    @Override\n+    public void emit(JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        StringBuilder builder = new StringBuilder(64);\n+        format(builder, logger, level, timestamp, threadName, throwable, message, argumentArray);\n+        stderr.println(builder);\n+    }\n+\n+    public ZoneId getTimeZone()\n+    {\n+        return timezone;\n+    }\n+\n+    public boolean isCondensedNames()\n+    {\n+        return condensedNames;\n+    }\n+\n+    public boolean isEscapedMessages()\n+    {\n+        return escapedMessages;\n+    }\n+\n+    public int getThreadPadding()\n+    {\n+        return threadPadding;\n+    }\n+\n+    public boolean isStrictFormat()\n+    {\n+        return strictFormat;\n+    }\n+\n+    public void setStream(PrintStream stream)\n+    {\n+        this.stderr = stream;\n+    }\n+\n+    private void format(StringBuilder builder, JettyLogger logger, Level level, long timestamp, String threadName, Throwable throwable, String message, Object... argumentArray)\n+    {\n+        Throwable cause = throwable;\n+\n+        // Timestamp\n+        ZonedDateTime tsInstant = Instant.ofEpochMilli(timestamp).atZone(timezone);\n+        timestampFormatter.formatTo(tsInstant, builder);\n+\n+        // Level\n+        builder.append(':').append(renderedLevel(level));\n+\n+        // Logger Name\n+        builder.append(':');\n+        if (condensedNames)\n+        {\n+            builder.append(logger.getCondensedName());\n+        }\n+        else\n+        {\n+            builder.append(logger.getName());\n+        }\n+\n+        // Thread Name\n+        builder.append(':');\n+        builder.append(threadName); // TODO: support TAG_PAD configuration\n+        builder.append(':');\n+\n+        // Message\n+        builder.append(' ');\n+\n+        if (strictFormat)\n+        {\n+            FormattingTuple ft = MessageFormatter.arrayFormat(message, argumentArray);\n+            appendEscaped(builder, ft.getMessage());\n+            if (cause == null)\n+            {\n+                cause = ft.getThrowable();\n+            }\n+        }\n+        else\n+        {\n+            // TODO: this should really be removed, as it violates the slf4j API contract for throwables and such\n+            StringBuilder msg = new StringBuilder();\n+            Object[] args = argumentArray == null ? EMPTY_ARGS : argumentArray;\n+            msg.append(Objects.requireNonNullElseGet(message, () -> \"{} \".repeat(args.length)));\n+            String braces = \"{}\";\n+            int start = 0;\n+            for (Object arg : args)\n+            {\n+                int bracesIndex = msg.indexOf(braces, start);\n+                if (bracesIndex < 0)\n+                {\n+                    appendEscaped(builder, msg.substring(start));\n+                    builder.append(\" \");\n+                    if (arg != null)\n+                        builder.append(arg);\n+                    start = msg.length();\n+                }\n+                else\n+                {\n+                    appendEscaped(builder, msg.substring(start, bracesIndex));\n+                    builder.append(arg);\n+                    start = bracesIndex + braces.length();\n+                }\n+            }\n+            appendEscaped(builder, msg.substring(start));\n+        }\n+\n+        // Throwable\n+        if (cause != null)\n+        {\n+            if (logger.isHideStacks())\n+            {\n+                builder.append(\": \").append(cause);\n+            }\n+            else\n+            {\n+                appendCause(builder, cause, \"\");\n+            }\n+        }\n+    }\n+\n+    private String renderedLevel(Level level)\n+    {\n+        switch (level)\n+        {\n+            case ERROR:  // New for Jetty 10+\n+                return \"ERROR\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxNDM3Nw=="}, "originalCommit": {"oid": "66627df561490eff65438008ba555292864faf55"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjI2Mjc3OnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODozMDo0NVrOFu3IJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODo1NDoyM1rOFu36Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4MjAyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private JettyLoggerConfiguration configuration;\n          \n          \n            \n                private JettyLogger rootLogger;\n          \n          \n            \n                private final JettyLoggerConfiguration configuration;\n          \n          \n            \n                private final JettyLogger rootLogger;", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384682020", "createdAt": "2020-02-26T18:30:45Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,196 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a85bfb10f9aaea7a593a1cb2708b256f13aec88"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4NzgyMg==", "bodyText": "This is the side effect of eliminating the singleton.\nI need to be able to reset the active configuration that org.slf4j.LoggerFactory is tracking, as I cannot reset the active LoggerFactory to test scenarios.\nI either have a Singleton with final fields where I can reset the singleton itself, or I have the ability to reset the configuration.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384687822", "createdAt": "2020-02-26T18:41:27Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,196 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4MjAyMA=="}, "originalCommit": {"oid": "8a85bfb10f9aaea7a593a1cb2708b256f13aec88"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY5NDg1NA==", "bodyText": "Done", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384694854", "createdAt": "2020-02-26T18:54:23Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,196 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4MjAyMA=="}, "originalCommit": {"oid": "8a85bfb10f9aaea7a593a1cb2708b256f13aec88"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjI2NzExOnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODozMjowMVrOFu3K8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODo1NDoxN1rOFu36Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4MjczOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    initialize(config);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                /**\n          \n          \n            \n                 * Reinitialize this Factory, forgetting about all prior config and loggers.\n          \n          \n            \n                 * <p>\n          \n          \n            \n                 * This is really only used in test cases.\n          \n          \n            \n                 * </p>\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param config the configuration to reset to\n          \n          \n            \n                 */\n          \n          \n            \n                protected void initialize(JettyLoggerConfiguration config)\n          \n          \n            \n                {", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384682739", "createdAt": "2020-02-26T18:32:01Z", "author": {"login": "gregw"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,196 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;\n+    private ConcurrentMap<String, JettyLogger> loggerMap;\n+\n+    public JettyLoggerFactory(JettyLoggerConfiguration config)\n+    {\n+        initialize(config);\n+    }\n+\n+    /**\n+     * Reinitialize this Factory, forgetting about all prior config and loggers.\n+     * <p>\n+     * This is really only used in test cases.\n+     * </p>\n+     *\n+     * @param config the configuration to reset to\n+     */\n+    protected void initialize(JettyLoggerConfiguration config)\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a85bfb10f9aaea7a593a1cb2708b256f13aec88"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4ODE2Mw==", "bodyText": "I need this for testing, all of your prior recommendations have eliminated all of my options, don't get rid of this one too.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384688163", "createdAt": "2020-02-26T18:42:07Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,196 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;\n+    private ConcurrentMap<String, JettyLogger> loggerMap;\n+\n+    public JettyLoggerFactory(JettyLoggerConfiguration config)\n+    {\n+        initialize(config);\n+    }\n+\n+    /**\n+     * Reinitialize this Factory, forgetting about all prior config and loggers.\n+     * <p>\n+     * This is really only used in test cases.\n+     * </p>\n+     *\n+     * @param config the configuration to reset to\n+     */\n+    protected void initialize(JettyLoggerConfiguration config)\n+    {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4MjczOQ=="}, "originalCommit": {"oid": "8a85bfb10f9aaea7a593a1cb2708b256f13aec88"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY5NDgxMA==", "bodyText": "Done.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384694810", "createdAt": "2020-02-26T18:54:17Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -0,0 +1,196 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.logging;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.Logger;\n+\n+public class JettyLoggerFactory implements ILoggerFactory\n+{\n+    private static final String ROOT_LOGGER_NAME = \"\";\n+    private JettyLoggerConfiguration configuration;\n+    private JettyLogger rootLogger;\n+    private ConcurrentMap<String, JettyLogger> loggerMap;\n+\n+    public JettyLoggerFactory(JettyLoggerConfiguration config)\n+    {\n+        initialize(config);\n+    }\n+\n+    /**\n+     * Reinitialize this Factory, forgetting about all prior config and loggers.\n+     * <p>\n+     * This is really only used in test cases.\n+     * </p>\n+     *\n+     * @param config the configuration to reset to\n+     */\n+    protected void initialize(JettyLoggerConfiguration config)\n+    {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4MjczOQ=="}, "originalCommit": {"oid": "8a85bfb10f9aaea7a593a1cb2708b256f13aec88"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjY5NjE0OnYy", "diffSide": "RIGHT", "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDozNjowNFrOFu7RZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToxMToxOFrOFu8Wrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0OTkyNQ==", "bodyText": "Nope. This is not needed.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384749925", "createdAt": "2020-02-26T20:36:04Z", "author": {"login": "sbordet"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -69,7 +69,7 @@ public JettyLogger getJettyLogger(String name)\n      * @return the Slf4j Logger\n      */\n     @Override\n-    public Logger getLogger(String name)\n+    public synchronized Logger getLogger(String name)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1339bd1d851ecd5d07a5cc9223f42653a0361ac3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2NzY2Mw==", "bodyText": "reverted.", "url": "https://github.com/eclipse/jetty.project/pull/4601#discussion_r384767663", "createdAt": "2020-02-26T21:11:18Z", "author": {"login": "joakime"}, "path": "jetty-slf4j-impl/src/main/java/org/eclipse/jetty/logging/JettyLoggerFactory.java", "diffHunk": "@@ -69,7 +69,7 @@ public JettyLogger getJettyLogger(String name)\n      * @return the Slf4j Logger\n      */\n     @Override\n-    public Logger getLogger(String name)\n+    public synchronized Logger getLogger(String name)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0OTkyNQ=="}, "originalCommit": {"oid": "1339bd1d851ecd5d07a5cc9223f42653a0361ac3"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2638, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}