{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NDcxMzky", "number": 4884, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDoyNDozOVrOD9vCxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzozMjowNFrOD-N_Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDYwNDg1OnYy", "diffSide": "RIGHT", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/PathSpec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDoyNDo0MFrOGXZ5XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzozMDo0N1rOGXgiQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5NDcxNw==", "bodyText": "While you're editing this file, could you add a header that describes what a PathSpec is.", "url": "https://github.com/eclipse/jetty.project/pull/4884#discussion_r427194717", "createdAt": "2020-05-19T10:24:40Z", "author": {"login": "janbartel"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/PathSpec.java", "diffHunk": "@@ -18,67 +18,12 @@\n \n package org.eclipse.jetty.http.pathmap;\n \n-/**\n- * The base PathSpec, what all other path specs are based on\n- */\n-public abstract class PathSpec implements Comparable<PathSpec>\n+public interface PathSpec extends Comparable<PathSpec>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de083dce8903611311ae9179968b387c75866979"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwMzQ4OA==", "bodyText": "Sure, I'll do it.", "url": "https://github.com/eclipse/jetty.project/pull/4884#discussion_r427303488", "createdAt": "2020-05-19T13:30:47Z", "author": {"login": "lorban"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/PathSpec.java", "diffHunk": "@@ -18,67 +18,12 @@\n \n package org.eclipse.jetty.http.pathmap;\n \n-/**\n- * The base PathSpec, what all other path specs are based on\n- */\n-public abstract class PathSpec implements Comparable<PathSpec>\n+public interface PathSpec extends Comparable<PathSpec>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5NDcxNw=="}, "originalCommit": {"oid": "de083dce8903611311ae9179968b387c75866979"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDYxMjM4OnYy", "diffSide": "RIGHT", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/BasePathSpec.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDoyNjo1NlrOGXZ-Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzozMDoyMFrOGXgg1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5NTkzOQ==", "bodyText": "I'm not sure I see the benefit of the Decomposition class? What benefit does it give over and above being just  private fields on the BasePathSpec class?", "url": "https://github.com/eclipse/jetty.project/pull/4884#discussion_r427195939", "createdAt": "2020-05-19T10:26:56Z", "author": {"login": "janbartel"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/BasePathSpec.java", "diffHunk": "@@ -0,0 +1,114 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.http.pathmap;\n+\n+/**\n+ * The base PathSpec, what all other path specs are based on\n+ */\n+public abstract class BasePathSpec implements PathSpec\n+{\n+    protected static class Decomposition", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de083dce8903611311ae9179968b387c75866979"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0OTQyOQ==", "bodyText": "OK, I've had an offline conversation with @gregw and I see why you might have introduced the Decomposition class. IMHO the behaviour in the base class is so trivial as to not warrant the complexity of introducing the Decomposition class, so I would ditch the BasePathSpec and have ServletPathSpec, RegexPathSpec directly implement the PathSpec interface.", "url": "https://github.com/eclipse/jetty.project/pull/4884#discussion_r427249429", "createdAt": "2020-05-19T12:06:18Z", "author": {"login": "janbartel"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/BasePathSpec.java", "diffHunk": "@@ -0,0 +1,114 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.http.pathmap;\n+\n+/**\n+ * The base PathSpec, what all other path specs are based on\n+ */\n+public abstract class BasePathSpec implements PathSpec\n+{\n+    protected static class Decomposition", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5NTkzOQ=="}, "originalCommit": {"oid": "de083dce8903611311ae9179968b387c75866979"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwMzEyNg==", "bodyText": "I introduced Decomposition more for the bits in common between RegexPathSpec and UriTemplatePathSpec.\nBut it's getting apparent now that the code has been written that it's not worth it.", "url": "https://github.com/eclipse/jetty.project/pull/4884#discussion_r427303126", "createdAt": "2020-05-19T13:30:20Z", "author": {"login": "lorban"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/BasePathSpec.java", "diffHunk": "@@ -0,0 +1,114 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.http.pathmap;\n+\n+/**\n+ * The base PathSpec, what all other path specs are based on\n+ */\n+public abstract class BasePathSpec implements PathSpec\n+{\n+    protected static class Decomposition", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5NTkzOQ=="}, "originalCommit": {"oid": "de083dce8903611311ae9179968b387c75866979"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDk3ODYxOnYy", "diffSide": "RIGHT", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/BasePathSpec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjoxNToyNFrOGXdjTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyOTowOVrOGXgdEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1NDYwNQ==", "bodyText": "I'm not sure it is worthwhile having BasePathSpec and Decomposition.\nI understand they exist to try and achieve some code reuse between the 3 implementations, but ultimately you are creating two new classes just to save duplicating a few simple getters.\nPerhaps a compromise is to keep Decomposition available as a getter on the interface, and then have default methods for the ohter getters.    Or just have an abstract base class and no interface.  Or just duplicate the fields/getters in the impls.\nI'd probably like Decomposition better if it had a better name.... PathSpecComponets??? nah still horrid....", "url": "https://github.com/eclipse/jetty.project/pull/4884#discussion_r427254605", "createdAt": "2020-05-19T12:15:24Z", "author": {"login": "gregw"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/BasePathSpec.java", "diffHunk": "@@ -0,0 +1,114 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.http.pathmap;\n+\n+/**\n+ * The base PathSpec, what all other path specs are based on\n+ */\n+public abstract class BasePathSpec implements PathSpec", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de083dce8903611311ae9179968b387c75866979"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwMjE2MQ==", "bodyText": "BasePathSpec doesn't do much, but there's a little more in common between RegexPathSpec and UriTemplatePathSpec.\nIt still doesn't justify the Decomposition, though so I'll also duplicate that around.", "url": "https://github.com/eclipse/jetty.project/pull/4884#discussion_r427302161", "createdAt": "2020-05-19T13:29:09Z", "author": {"login": "lorban"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/BasePathSpec.java", "diffHunk": "@@ -0,0 +1,114 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.http.pathmap;\n+\n+/**\n+ * The base PathSpec, what all other path specs are based on\n+ */\n+public abstract class BasePathSpec implements PathSpec", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1NDYwNQ=="}, "originalCommit": {"oid": "de083dce8903611311ae9179968b387c75866979"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTY2Nzg2OnYy", "diffSide": "RIGHT", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/LogicalDeclarationComparator.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzozMDo0MFrOGYLwUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTowNjo1MFrOGYQdXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxMTYwMg==", "bodyText": "Can we think of a better name than LogicalDeclarationComparator? It's a comparator that works for MappedResources based on their PathSpecs .... is it a MappedResourceComparator? Is it a PathSpecComparator? In fact, could it be an anonymous class defined in PathMappings in the constructor for _mappings at line 49? I can't see where it's used anywhere else, but maybe it is?", "url": "https://github.com/eclipse/jetty.project/pull/4884#discussion_r428011602", "createdAt": "2020-05-20T13:30:40Z", "author": {"login": "janbartel"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/LogicalDeclarationComparator.java", "diffHunk": "@@ -0,0 +1,35 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.http.pathmap;\n+\n+import java.util.Comparator;\n+\n+/**\n+ * Sort {@link MappedResource}s by their {@link MappedResource#getPathSpec()} logical declarations.\n+ */\n+public class LogicalDeclarationComparator implements Comparator<MappedResource>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c7518e9cf5d3dbfb6cc62d2c3d8c5e608cba144"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA3ODE5NQ==", "bodyText": "I think this class should go and be replaced with a lambda in the PathMappings' TreeSet constructor instead.", "url": "https://github.com/eclipse/jetty.project/pull/4884#discussion_r428078195", "createdAt": "2020-05-20T14:53:37Z", "author": {"login": "lorban"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/LogicalDeclarationComparator.java", "diffHunk": "@@ -0,0 +1,35 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.http.pathmap;\n+\n+import java.util.Comparator;\n+\n+/**\n+ * Sort {@link MappedResource}s by their {@link MappedResource#getPathSpec()} logical declarations.\n+ */\n+public class LogicalDeclarationComparator implements Comparator<MappedResource>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxMTYwMg=="}, "originalCommit": {"oid": "3c7518e9cf5d3dbfb6cc62d2c3d8c5e608cba144"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA3ODY2OA==", "bodyText": "But since this is @joakime 's code, maybe he had something else in mind?", "url": "https://github.com/eclipse/jetty.project/pull/4884#discussion_r428078668", "createdAt": "2020-05-20T14:54:14Z", "author": {"login": "lorban"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/LogicalDeclarationComparator.java", "diffHunk": "@@ -0,0 +1,35 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.http.pathmap;\n+\n+import java.util.Comparator;\n+\n+/**\n+ * Sort {@link MappedResource}s by their {@link MappedResource#getPathSpec()} logical declarations.\n+ */\n+public class LogicalDeclarationComparator implements Comparator<MappedResource>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxMTYwMg=="}, "originalCommit": {"oid": "3c7518e9cf5d3dbfb6cc62d2c3d8c5e608cba144"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4MDQyMw==", "bodyText": "If you can make the tests pass then i'm good with any change you want to make.", "url": "https://github.com/eclipse/jetty.project/pull/4884#discussion_r428080423", "createdAt": "2020-05-20T14:56:23Z", "author": {"login": "joakime"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/LogicalDeclarationComparator.java", "diffHunk": "@@ -0,0 +1,35 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.http.pathmap;\n+\n+import java.util.Comparator;\n+\n+/**\n+ * Sort {@link MappedResource}s by their {@link MappedResource#getPathSpec()} logical declarations.\n+ */\n+public class LogicalDeclarationComparator implements Comparator<MappedResource>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxMTYwMg=="}, "originalCommit": {"oid": "3c7518e9cf5d3dbfb6cc62d2c3d8c5e608cba144"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4ODY3MA==", "bodyText": "Okay, done.", "url": "https://github.com/eclipse/jetty.project/pull/4884#discussion_r428088670", "createdAt": "2020-05-20T15:06:50Z", "author": {"login": "lorban"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/LogicalDeclarationComparator.java", "diffHunk": "@@ -0,0 +1,35 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.http.pathmap;\n+\n+import java.util.Comparator;\n+\n+/**\n+ * Sort {@link MappedResource}s by their {@link MappedResource#getPathSpec()} logical declarations.\n+ */\n+public class LogicalDeclarationComparator implements Comparator<MappedResource>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxMTYwMg=="}, "originalCommit": {"oid": "3c7518e9cf5d3dbfb6cc62d2c3d8c5e608cba144"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTY3NDk5OnYy", "diffSide": "RIGHT", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/RegexPathSpec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzozMjowNFrOGYL0ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDo1NDo1NFrOGYP4Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxMjY4Mg==", "bodyText": "You can delete this line now.", "url": "https://github.com/eclipse/jetty.project/pull/4884#discussion_r428012682", "createdAt": "2020-05-20T13:32:04Z", "author": {"login": "janbartel"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/RegexPathSpec.java", "diffHunk": "@@ -56,54 +59,65 @@ public RegexPathSpec(String regex)\n                     break;\n                 case '/':\n                     if (!inGrouping)\n-                    {\n-                        this.pathDepth++;\n-                    }\n+                        pathDepth++;\n                     break;\n                 default:\n-                    if (!inGrouping)\n-                    {\n-                        if (Character.isLetterOrDigit(c))\n-                        {\n-                            signature.append('l'); // literal (exact)\n-                        }\n-                    }\n+                    if (!inGrouping && Character.isLetterOrDigit(c))\n+                        signature.append('l'); // literal (exact)\n                     break;\n             }\n         }\n-        this.pattern = Pattern.compile(pathSpec);\n+        Pattern pattern = Pattern.compile(declaration);\n \n         // Figure out the grouping based on the signature\n         String sig = signature.toString();\n \n+        PathSpecGroup group;\n         if (Pattern.matches(\"^l*$\", sig))\n-        {\n-            this.group = PathSpecGroup.EXACT;\n-        }\n+            group = PathSpecGroup.EXACT;\n         else if (Pattern.matches(\"^l*g+\", sig))\n-        {\n-            this.group = PathSpecGroup.PREFIX_GLOB;\n-        }\n+            group = PathSpecGroup.PREFIX_GLOB;\n         else if (Pattern.matches(\"^g+l+$\", sig))\n-        {\n-            this.group = PathSpecGroup.SUFFIX_GLOB;\n-        }\n+            group = PathSpecGroup.SUFFIX_GLOB;\n         else\n-        {\n-            this.group = PathSpecGroup.MIDDLE_GLOB;\n-        }\n+            group = PathSpecGroup.MIDDLE_GLOB;\n+\n+        //return new RegexDecomposition(declaration, group, pathDepth, specLength, null, null, pattern);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c7518e9cf5d3dbfb6cc62d2c3d8c5e608cba144"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA3OTIwNg==", "bodyText": "Indeed, thanks.", "url": "https://github.com/eclipse/jetty.project/pull/4884#discussion_r428079206", "createdAt": "2020-05-20T14:54:54Z", "author": {"login": "lorban"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/pathmap/RegexPathSpec.java", "diffHunk": "@@ -56,54 +59,65 @@ public RegexPathSpec(String regex)\n                     break;\n                 case '/':\n                     if (!inGrouping)\n-                    {\n-                        this.pathDepth++;\n-                    }\n+                        pathDepth++;\n                     break;\n                 default:\n-                    if (!inGrouping)\n-                    {\n-                        if (Character.isLetterOrDigit(c))\n-                        {\n-                            signature.append('l'); // literal (exact)\n-                        }\n-                    }\n+                    if (!inGrouping && Character.isLetterOrDigit(c))\n+                        signature.append('l'); // literal (exact)\n                     break;\n             }\n         }\n-        this.pattern = Pattern.compile(pathSpec);\n+        Pattern pattern = Pattern.compile(declaration);\n \n         // Figure out the grouping based on the signature\n         String sig = signature.toString();\n \n+        PathSpecGroup group;\n         if (Pattern.matches(\"^l*$\", sig))\n-        {\n-            this.group = PathSpecGroup.EXACT;\n-        }\n+            group = PathSpecGroup.EXACT;\n         else if (Pattern.matches(\"^l*g+\", sig))\n-        {\n-            this.group = PathSpecGroup.PREFIX_GLOB;\n-        }\n+            group = PathSpecGroup.PREFIX_GLOB;\n         else if (Pattern.matches(\"^g+l+$\", sig))\n-        {\n-            this.group = PathSpecGroup.SUFFIX_GLOB;\n-        }\n+            group = PathSpecGroup.SUFFIX_GLOB;\n         else\n-        {\n-            this.group = PathSpecGroup.MIDDLE_GLOB;\n-        }\n+            group = PathSpecGroup.MIDDLE_GLOB;\n+\n+        //return new RegexDecomposition(declaration, group, pathDepth, specLength, null, null, pattern);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxMjY4Mg=="}, "originalCommit": {"oid": "3c7518e9cf5d3dbfb6cc62d2c3d8c5e608cba144"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2546, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}