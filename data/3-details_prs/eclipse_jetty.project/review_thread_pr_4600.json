{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4ODk4NTU4", "number": 4600, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDoxMToxOFrODiRSqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMToyNjozN1rODoriSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjYxNDgwOnYy", "diffSide": "RIGHT", "path": "tests/test-sessions/test-infinispan-sessions/src/test/java/org/eclipse/jetty/server/session/InfinispanSessionDataStoreTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDoxMToxOFrOFtbLMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMToxNTo0MFrOFuCPBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE3NTQ3NQ==", "bodyText": "Why did you change the test data so that all will have expired?", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r383175475", "createdAt": "2020-02-24T10:11:18Z", "author": {"login": "janbartel"}, "path": "tests/test-sessions/test-infinispan-sessions/src/test/java/org/eclipse/jetty/server/session/InfinispanSessionDataStoreTest.java", "diffHunk": "@@ -164,30 +166,26 @@ public boolean checkSessionPersisted(SessionData data) throws Exception\n     @Test\n     public void testQuery() throws Exception\n     {\n-        Cache<String, SessionData> cache = _testSupport.getCache();\n+        InfinispanSessionData sd1 = new InfinispanSessionData(\"sd1\", \"\", \"\", 0, 0, 0, 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "287c6ce7098e14dee1168f62f86d15abf46f3e19"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE4OTMxMQ==", "bodyText": "The previous testQuery didn't work from the beginning, so I replaced it with the test used in RemoteInfinispanSessionDataStoreTest", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r383189311", "createdAt": "2020-02-24T10:37:38Z", "author": {"login": "kandrej"}, "path": "tests/test-sessions/test-infinispan-sessions/src/test/java/org/eclipse/jetty/server/session/InfinispanSessionDataStoreTest.java", "diffHunk": "@@ -164,30 +166,26 @@ public boolean checkSessionPersisted(SessionData data) throws Exception\n     @Test\n     public void testQuery() throws Exception\n     {\n-        Cache<String, SessionData> cache = _testSupport.getCache();\n+        InfinispanSessionData sd1 = new InfinispanSessionData(\"sd1\", \"\", \"\", 0, 0, 0, 1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE3NTQ3NQ=="}, "originalCommit": {"oid": "287c6ce7098e14dee1168f62f86d15abf46f3e19"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxNTQzMQ==", "bodyText": "Fair enough.", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r383815431", "createdAt": "2020-02-25T11:15:40Z", "author": {"login": "janbartel"}, "path": "tests/test-sessions/test-infinispan-sessions/src/test/java/org/eclipse/jetty/server/session/InfinispanSessionDataStoreTest.java", "diffHunk": "@@ -164,30 +166,26 @@ public boolean checkSessionPersisted(SessionData data) throws Exception\n     @Test\n     public void testQuery() throws Exception\n     {\n-        Cache<String, SessionData> cache = _testSupport.getCache();\n+        InfinispanSessionData sd1 = new InfinispanSessionData(\"sd1\", \"\", \"\", 0, 0, 0, 1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE3NTQ3NQ=="}, "originalCommit": {"oid": "287c6ce7098e14dee1168f62f86d15abf46f3e19"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjYxODY5OnYy", "diffSide": "RIGHT", "path": "tests/test-sessions/test-infinispan-sessions/src/test/java/org/eclipse/jetty/server/session/InfinispanSessionDataStoreTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDoxMjowOFrOFtbNKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDoxMjowOFrOFtbNKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE3NTk3Ng==", "bodyText": "Also, why did you change the query? The query did the same search as the InfinispanSessionDataStore implementation.", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r383175976", "createdAt": "2020-02-24T10:12:08Z", "author": {"login": "janbartel"}, "path": "tests/test-sessions/test-infinispan-sessions/src/test/java/org/eclipse/jetty/server/session/InfinispanSessionDataStoreTest.java", "diffHunk": "@@ -164,30 +166,26 @@ public boolean checkSessionPersisted(SessionData data) throws Exception\n     @Test\n     public void testQuery() throws Exception\n     {\n-        Cache<String, SessionData> cache = _testSupport.getCache();\n+        InfinispanSessionData sd1 = new InfinispanSessionData(\"sd1\", \"\", \"\", 0, 0, 0, 1000);\n+        sd1.setLastNode(\"fred1\");\n+        _testSupport.getCache().put(\"session1\", sd1);\n \n-        SessionData sd1 = new SessionData(\"sd1\", \"\", \"\", 0, 0, 0, 0);\n-        SessionData sd2 = new SessionData(\"sd2\", \"\", \"\", 0, 0, 0, 1000);\n-        sd2.setExpiry(100L); //long ago\n-        SessionData sd3 = new SessionData(\"sd3\", \"\", \"\", 0, 0, 0, 0);\n+        InfinispanSessionData sd2 = new InfinispanSessionData(\"sd2\", \"\", \"\", 0, 0, 0, 2000);\n+        sd2.setLastNode(\"fred2\");\n+        _testSupport.getCache().put(\"session2\", sd2);\n \n-        cache.put(\"session1\", sd1);\n-        cache.put(\"session2\", sd2);\n-        cache.put(\"session3\", sd3);\n+        InfinispanSessionData sd3 = new InfinispanSessionData(\"sd3\", \"\", \"\", 0, 0, 0, 3000);\n+        sd3.setLastNode(\"fred3\");\n+        _testSupport.getCache().put(\"session3\", sd3);\n \n-        QueryFactory qf = Search.getQueryFactory(cache);\n-        Query q = qf.from(SessionData.class).select(\"id\").having(\"expiry\").lte(System.currentTimeMillis()).and().having(\"expiry\").gt(0).toBuilder().build();\n+        QueryFactory qf = Search.getQueryFactory(_testSupport.getCache());\n \n-        List<Object[]> list = q.list();\n-\n-        List<String> ids = new ArrayList<>();\n-        for (Object[] sl : list)\n+        for (int i = 0; i <= 3; i++)\n         {\n-            ids.add((String)sl[0]);\n+            long now = System.currentTimeMillis();\n+            Query q = qf.from(InfinispanSessionData.class).having(\"expiry\").lt(now).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "287c6ce7098e14dee1168f62f86d15abf46f3e19"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjYyMDE0OnYy", "diffSide": "RIGHT", "path": "tests/test-sessions/test-infinispan-sessions/src/test/java/org/eclipse/jetty/server/session/InfinispanTestSupport.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDoxMjozMlrOFtbN8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMToxNjozM1rOFuCQrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE3NjE3Nw==", "bodyText": "Can we have a test both with and without storeAsBinary enabled, to be on the safe side?", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r383176177", "createdAt": "2020-02-24T10:12:32Z", "author": {"login": "janbartel"}, "path": "tests/test-sessions/test-infinispan-sessions/src/test/java/org/eclipse/jetty/server/session/InfinispanTestSupport.java", "diffHunk": "@@ -113,7 +113,7 @@ public void setup() throws Exception\n                 .persistence()\n                 .addSingleFileStore()\n                 .location(_tmpdir.getAbsolutePath())\n-                .storeAsBinary()\n+                .storeAsBinary().enable()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "287c6ce7098e14dee1168f62f86d15abf46f3e19"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE4OTg0Ng==", "bodyText": "Yes. It just triggers serialization, so data in the cache is in serialized form", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r383189846", "createdAt": "2020-02-24T10:38:37Z", "author": {"login": "kandrej"}, "path": "tests/test-sessions/test-infinispan-sessions/src/test/java/org/eclipse/jetty/server/session/InfinispanTestSupport.java", "diffHunk": "@@ -113,7 +113,7 @@ public void setup() throws Exception\n                 .persistence()\n                 .addSingleFileStore()\n                 .location(_tmpdir.getAbsolutePath())\n-                .storeAsBinary()\n+                .storeAsBinary().enable()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE3NjE3Nw=="}, "originalCommit": {"oid": "287c6ce7098e14dee1168f62f86d15abf46f3e19"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxNTg1Mg==", "bodyText": "I mean can you make a test both with and without storeAsBinaryEnabled please.", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r383815852", "createdAt": "2020-02-25T11:16:33Z", "author": {"login": "janbartel"}, "path": "tests/test-sessions/test-infinispan-sessions/src/test/java/org/eclipse/jetty/server/session/InfinispanTestSupport.java", "diffHunk": "@@ -113,7 +113,7 @@ public void setup() throws Exception\n                 .persistence()\n                 .addSingleFileStore()\n                 .location(_tmpdir.getAbsolutePath())\n-                .storeAsBinary()\n+                .storeAsBinary().enable()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE3NjE3Nw=="}, "originalCommit": {"oid": "287c6ce7098e14dee1168f62f86d15abf46f3e19"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjYzMDg5OnYy", "diffSide": "RIGHT", "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/InfinispanSessionDataSerializer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDoxNTozNlrOFtbUQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMToxMzowMVrOFuCKLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE3Nzc5Mw==", "bodyText": "Why is this class necessary? We are using the org.eclipse.jetty.session.infinispan.SessionDataMarshaller now, are you saying this class replaces the SessionDataMarshaller?", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r383177793", "createdAt": "2020-02-24T10:15:36Z", "author": {"login": "janbartel"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/InfinispanSessionDataSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.eclipse.jetty.session.infinispan;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+\n+import org.infinispan.commons.marshall.Externalizer;\n+\n+public class InfinispanSessionDataSerializer implements Externalizer<InfinispanSessionData>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "287c6ce7098e14dee1168f62f86d15abf46f3e19"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE5NTAxNQ==", "bodyText": "SessionDataMarshaller is ok in the remote setup, but it is not used in embedded infinispan when storeAsBinary is enabled. In this case the default java serialization rules are used, which fail because the SessionData readObject is invoked and ObjectInputStream is not ClassLoadingObjectInputStream", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r383195015", "createdAt": "2020-02-24T10:48:45Z", "author": {"login": "kandrej"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/InfinispanSessionDataSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.eclipse.jetty.session.infinispan;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+\n+import org.infinispan.commons.marshall.Externalizer;\n+\n+public class InfinispanSessionDataSerializer implements Externalizer<InfinispanSessionData>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE3Nzc5Mw=="}, "originalCommit": {"oid": "287c6ce7098e14dee1168f62f86d15abf46f3e19"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxNDE4OA==", "bodyText": "OK. Please see my comment above about the presence of the annotation.", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r383814188", "createdAt": "2020-02-25T11:13:01Z", "author": {"login": "janbartel"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/InfinispanSessionDataSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.eclipse.jetty.session.infinispan;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+\n+import org.infinispan.commons.marshall.Externalizer;\n+\n+public class InfinispanSessionDataSerializer implements Externalizer<InfinispanSessionData>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE3Nzc5Mw=="}, "originalCommit": {"oid": "287c6ce7098e14dee1168f62f86d15abf46f3e19"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjYzMzM1OnYy", "diffSide": "RIGHT", "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/InfinispanSessionDataSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDoxNjoxOFrOFtbVrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMToxNDowNlrOFuCMNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE3ODE1OQ==", "bodyText": "Please see the o.j.e.session.infinispan.SessionDataMarshaller regarding the requirements for the first field that is serialized: the version.", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r383178159", "createdAt": "2020-02-24T10:16:18Z", "author": {"login": "janbartel"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/InfinispanSessionDataSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.eclipse.jetty.session.infinispan;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+\n+import org.infinispan.commons.marshall.Externalizer;\n+\n+public class InfinispanSessionDataSerializer implements Externalizer<InfinispanSessionData>\n+{\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Override\n+    public void writeObject(ObjectOutput output, InfinispanSessionData object) throws IOException\n+    {\n+        output.writeUTF(object.getId()); //session id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "287c6ce7098e14dee1168f62f86d15abf46f3e19"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxNDcwOQ==", "bodyText": "Rather than copying the serialization, I'd rather that there was a refactoring that made it possible for your new class and the SessionDataMarshaller to use the same code.", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r383814709", "createdAt": "2020-02-25T11:14:06Z", "author": {"login": "janbartel"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/InfinispanSessionDataSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.eclipse.jetty.session.infinispan;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+\n+import org.infinispan.commons.marshall.Externalizer;\n+\n+public class InfinispanSessionDataSerializer implements Externalizer<InfinispanSessionData>\n+{\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Override\n+    public void writeObject(ObjectOutput output, InfinispanSessionData object) throws IOException\n+    {\n+        output.writeUTF(object.getId()); //session id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE3ODE1OQ=="}, "originalCommit": {"oid": "287c6ce7098e14dee1168f62f86d15abf46f3e19"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjcxNjg2OnYy", "diffSide": "RIGHT", "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/InfinispanSessionData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMToxMjozNFrOFuCJcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTo1MToxMVrOFuLfgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxNDAwMw==", "bodyText": "You're sure that this annotation will have no effect in the remote case?", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r383814003", "createdAt": "2020-02-25T11:12:34Z", "author": {"login": "janbartel"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/InfinispanSessionData.java", "diffHunk": "@@ -19,6 +20,7 @@\n  * pool and thus these threads have no knowledge of the correct classloader to\n  * use.\n  */\n+@SerializeWith(InfinispanSessionDataSerializer.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fae023c0d53c99638474bc82ce90e561cbcbda6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk2NzEwNA==", "bodyText": "I am not sure, but I run the remote tests and it doesn't seem to have any effect on those", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r383967104", "createdAt": "2020-02-25T15:51:11Z", "author": {"login": "kandrej"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/InfinispanSessionData.java", "diffHunk": "@@ -19,6 +20,7 @@\n  * pool and thus these threads have no knowledge of the correct classloader to\n  * use.\n  */\n+@SerializeWith(InfinispanSessionDataSerializer.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxNDAwMw=="}, "originalCommit": {"oid": "4fae023c0d53c99638474bc82ce90e561cbcbda6"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTQ4NjU3OnYy", "diffSide": "RIGHT", "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo0NjowN1rOFv7kHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo0NjowN1rOFv7kHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwMzI5Mw==", "bodyText": "The thing is, we don't want to do this static initialization all the time. Certainly when we use infinispan remote, the use of the session.proto is already configured into a different serialization context, so this static initialization is wasted.\nIn jetty we are generally static-phobic: we prefer if we can do things per instance.", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r385803293", "createdAt": "2020-02-28T16:46:07Z", "author": {"login": "janbartel"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "diffHunk": "@@ -30,13 +39,35 @@\n  * control to ensure that session attributes can be deserialized using either\n  * the container class loader or the webapp classloader, as appropriate.\n  */\n-public class SessionDataMarshaller implements MessageMarshaller<InfinispanSessionData>\n+public class SessionDataMarshaller implements MessageMarshaller<InfinispanSessionData>, Externalizer<InfinispanSessionData>\n {\n     /**\n      * The version of the serializer.\n      */\n     private static final int VERSION = 0;\n \n+    private static final Logger LOG = Log.getLogger(\"org.eclipse.jetty.server.session\");\n+    \n+    private static SerializationContext serializationContext;\n+\n+    static\n+    {\n+        FileDescriptorSource fds = new FileDescriptorSource();\n+        try\n+        {\n+            fds.addProtoFiles(\"/session.proto\");\n+            serializationContext = ProtobufUtil.newSerializationContext();\n+            serializationContext.registerProtoFiles(fds);\n+            serializationContext.registerMarshaller(new SessionDataMarshaller());\n+        }\n+        catch (IOException e)\n+        {\n+            serializationContext = null;\n+            LOG.warn(\"SerializationContext cannot be initialized\", e);\n+        }\n+\n+    }\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cbb83aba34c01cb96db4c61cc19b5e8239011d7"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTQ5MDcwOnYy", "diffSide": "RIGHT", "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo0NzoxNlrOFv7mnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo0NzoxNlrOFv7mnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwMzkzMg==", "bodyText": "Also here I wanted to avoid the double copying and buffering of data, which is why I was suggesting having a common method that worked with both ObejectInput and ProtoSteamReader.", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r385803932", "createdAt": "2020-02-28T16:47:16Z", "author": {"login": "janbartel"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "diffHunk": "@@ -49,6 +80,50 @@ public String getTypeName()\n         return \"org_eclipse_jetty_session_infinispan.InfinispanSessionData\";\n     }\n \n+    @Override\n+    public InfinispanSessionData readObject(ObjectInput input) throws IOException, ClassNotFoundException\n+    {\n+        if (serializationContext != null)\n+        {\n+            ByteArrayOutputStream os = new ByteArrayOutputStream();\n+            int bufferSize = 4 * 1024;\n+            byte[] buffer = new byte[bufferSize];\n+            int len = -1;\n+            while ((len = input.read(buffer, 0, bufferSize)) != -1)\n+            {\n+                os.write(buffer, 0, len);\n+            }\n+\n+            // invokes readFrom(ProtoStreamReader)\n+            InfinispanSessionData data = ProtobufUtil.fromByteArray(serializationContext, os.toByteArray(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cbb83aba34c01cb96db4c61cc19b5e8239011d7"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTE1ODE4OnYy", "diffSide": "RIGHT", "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo0NDoyMlrOFzrmYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDo0NToxN1rOF3Wvdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczNjAzNA==", "bodyText": "Can we keep the SerializationContext as a field that is lazily initialized only by the readObject/writeObject methods? The field would not be used by the readFrom/writeTo methods.", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r389736034", "createdAt": "2020-03-09T14:44:22Z", "author": {"login": "janbartel"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "diffHunk": "@@ -39,35 +38,24 @@\n  * control to ensure that session attributes can be deserialized using either\n  * the container class loader or the webapp classloader, as appropriate.\n  */\n-public class SessionDataMarshaller implements MessageMarshaller<InfinispanSessionData>, Externalizer<InfinispanSessionData>\n+public class SessionDataMarshaller\n+        implements MessageMarshaller<InfinispanSessionData>, Externalizer<InfinispanSessionData>\n {\n     /**\n      * The version of the serializer.\n      */\n     private static final int VERSION = 0;\n \n-    private static final Logger LOG = Log.getLogger(\"org.eclipse.jetty.server.session\");\n-    \n-    private static SerializationContext serializationContext;\n-\n-    static\n+    private SerializationContext initSerializationContext() throws IOException\n     {\n         FileDescriptorSource fds = new FileDescriptorSource();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690e2d447531844c4b55ac850942f352e9ead6c0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc2Njc1MA==", "bodyText": "It is useless to keep SerializationContext because a new SessionDataMarshaller instance is created every time readObject or writeObject is called. I can either have it as a lazily initialized static field or create one every time", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r389766750", "createdAt": "2020-03-09T15:28:02Z", "author": {"login": "kandrej"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "diffHunk": "@@ -39,35 +38,24 @@\n  * control to ensure that session attributes can be deserialized using either\n  * the container class loader or the webapp classloader, as appropriate.\n  */\n-public class SessionDataMarshaller implements MessageMarshaller<InfinispanSessionData>, Externalizer<InfinispanSessionData>\n+public class SessionDataMarshaller\n+        implements MessageMarshaller<InfinispanSessionData>, Externalizer<InfinispanSessionData>\n {\n     /**\n      * The version of the serializer.\n      */\n     private static final int VERSION = 0;\n \n-    private static final Logger LOG = Log.getLogger(\"org.eclipse.jetty.server.session\");\n-    \n-    private static SerializationContext serializationContext;\n-\n-    static\n+    private SerializationContext initSerializationContext() throws IOException\n     {\n         FileDescriptorSource fds = new FileDescriptorSource();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczNjAzNA=="}, "originalCommit": {"oid": "690e2d447531844c4b55ac850942f352e9ead6c0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4ODU5OA==", "bodyText": "Lets make it a static, lazily initialized. That way, if the remote protobuf marshalling is being used, it will never be initialized, it is only if the Externalizer methods are called that it will be initialized.", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r393588598", "createdAt": "2020-03-17T10:45:17Z", "author": {"login": "janbartel"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "diffHunk": "@@ -39,35 +38,24 @@\n  * control to ensure that session attributes can be deserialized using either\n  * the container class loader or the webapp classloader, as appropriate.\n  */\n-public class SessionDataMarshaller implements MessageMarshaller<InfinispanSessionData>, Externalizer<InfinispanSessionData>\n+public class SessionDataMarshaller\n+        implements MessageMarshaller<InfinispanSessionData>, Externalizer<InfinispanSessionData>\n {\n     /**\n      * The version of the serializer.\n      */\n     private static final int VERSION = 0;\n \n-    private static final Logger LOG = Log.getLogger(\"org.eclipse.jetty.server.session\");\n-    \n-    private static SerializationContext serializationContext;\n-\n-    static\n+    private SerializationContext initSerializationContext() throws IOException\n     {\n         FileDescriptorSource fds = new FileDescriptorSource();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczNjAzNA=="}, "originalCommit": {"oid": "690e2d447531844c4b55ac850942f352e9ead6c0"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzE4ODA0OnYy", "diffSide": "RIGHT", "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMzo1NDoyNVrOF1fjsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDo0NjoyN1rOF3WyAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYzNTg5MQ==", "bodyText": "Can you explain the necessity for this special write? And also the BoundDelegatingInputStream?", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r391635891", "createdAt": "2020-03-12T13:54:25Z", "author": {"login": "janbartel"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "diffHunk": "@@ -49,6 +67,33 @@ public String getTypeName()\n         return \"org_eclipse_jetty_session_infinispan.InfinispanSessionData\";\n     }\n \n+    @Override\n+    public InfinispanSessionData readObject(ObjectInput input) throws IOException, ClassNotFoundException\n+    {\n+        SerializationContext serializationContext = initSerializationContext();\n+\n+        // invokes readFrom(ProtoStreamReader)\n+        InfinispanSessionData data = ProtobufUtil.readFrom(serializationContext, new BoundDelegatingInputStream(input),\n+                InfinispanSessionData.class);\n+        if (data != null)\n+        {\n+            data.deserializeAttributes();\n+        }\n+        return data;\n+    }\n+\n+    @Override\n+    public void writeObject(ObjectOutput output, InfinispanSessionData object) throws IOException\n+    {\n+        SerializationContext serializationContext = initSerializationContext();\n+\n+     // invokes writeTo(ProtoStreamWriter, InfinispanSessionData)\n+        byte[] data = ProtobufUtil.toByteArray(serializationContext, object);\n+        int length = data.length;\n+        output.write(ByteBuffer.allocate(4).putInt(length).array());\n+        output.write(data);        \n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4f77701b56d90a93ce5f9c4a1d3b2b203720b4d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1Mjk0Mg==", "bodyText": "I found out that when reading the session from a file, the returned ObjectInput has more data than writeObject has written. It seems Infinispan appends some data at the end for some reason.\nIf I just wrap all the data in an InputStream, Protobuf fails to deserialize the session. So to know exactly how many bytes need to be parsed, the write first saves the length of the data.\nBoundDelegatingInputStream is just a wrapper that first reads the length of the data and stops when the length is reached.", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r391652942", "createdAt": "2020-03-12T14:19:25Z", "author": {"login": "kandrej"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "diffHunk": "@@ -49,6 +67,33 @@ public String getTypeName()\n         return \"org_eclipse_jetty_session_infinispan.InfinispanSessionData\";\n     }\n \n+    @Override\n+    public InfinispanSessionData readObject(ObjectInput input) throws IOException, ClassNotFoundException\n+    {\n+        SerializationContext serializationContext = initSerializationContext();\n+\n+        // invokes readFrom(ProtoStreamReader)\n+        InfinispanSessionData data = ProtobufUtil.readFrom(serializationContext, new BoundDelegatingInputStream(input),\n+                InfinispanSessionData.class);\n+        if (data != null)\n+        {\n+            data.deserializeAttributes();\n+        }\n+        return data;\n+    }\n+\n+    @Override\n+    public void writeObject(ObjectOutput output, InfinispanSessionData object) throws IOException\n+    {\n+        SerializationContext serializationContext = initSerializationContext();\n+\n+     // invokes writeTo(ProtoStreamWriter, InfinispanSessionData)\n+        byte[] data = ProtobufUtil.toByteArray(serializationContext, object);\n+        int length = data.length;\n+        output.write(ByteBuffer.allocate(4).putInt(length).array());\n+        output.write(data);        \n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYzNTg5MQ=="}, "originalCommit": {"oid": "f4f77701b56d90a93ce5f9c4a1d3b2b203720b4d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY4MDAzNg==", "bodyText": "So if you configure storeAsBinary, but don't use a filestore, what happens? Is that combination even possible?", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r391680036", "createdAt": "2020-03-12T14:57:59Z", "author": {"login": "janbartel"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "diffHunk": "@@ -49,6 +67,33 @@ public String getTypeName()\n         return \"org_eclipse_jetty_session_infinispan.InfinispanSessionData\";\n     }\n \n+    @Override\n+    public InfinispanSessionData readObject(ObjectInput input) throws IOException, ClassNotFoundException\n+    {\n+        SerializationContext serializationContext = initSerializationContext();\n+\n+        // invokes readFrom(ProtoStreamReader)\n+        InfinispanSessionData data = ProtobufUtil.readFrom(serializationContext, new BoundDelegatingInputStream(input),\n+                InfinispanSessionData.class);\n+        if (data != null)\n+        {\n+            data.deserializeAttributes();\n+        }\n+        return data;\n+    }\n+\n+    @Override\n+    public void writeObject(ObjectOutput output, InfinispanSessionData object) throws IOException\n+    {\n+        SerializationContext serializationContext = initSerializationContext();\n+\n+     // invokes writeTo(ProtoStreamWriter, InfinispanSessionData)\n+        byte[] data = ProtobufUtil.toByteArray(serializationContext, object);\n+        int length = data.length;\n+        output.write(ByteBuffer.allocate(4).putInt(length).array());\n+        output.write(data);        \n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYzNTg5MQ=="}, "originalCommit": {"oid": "f4f77701b56d90a93ce5f9c4a1d3b2b203720b4d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwMzM5MQ==", "bodyText": "Sure is possible. storeAsBinary means that the data is stored serialized in the cache (memory). The file is always binary\nThis means that when you put an instance in the cache the instance is first serialized and than saved. When you get an instance from the cache it has to be deserialized first. In this case the data from the cache is just copied to a file\nIf storeAsBinary is disabled, you put and get the instance itself in the cache. The data is serialized only when it is moved from the cache to the file", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r391703391", "createdAt": "2020-03-12T15:31:42Z", "author": {"login": "kandrej"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "diffHunk": "@@ -49,6 +67,33 @@ public String getTypeName()\n         return \"org_eclipse_jetty_session_infinispan.InfinispanSessionData\";\n     }\n \n+    @Override\n+    public InfinispanSessionData readObject(ObjectInput input) throws IOException, ClassNotFoundException\n+    {\n+        SerializationContext serializationContext = initSerializationContext();\n+\n+        // invokes readFrom(ProtoStreamReader)\n+        InfinispanSessionData data = ProtobufUtil.readFrom(serializationContext, new BoundDelegatingInputStream(input),\n+                InfinispanSessionData.class);\n+        if (data != null)\n+        {\n+            data.deserializeAttributes();\n+        }\n+        return data;\n+    }\n+\n+    @Override\n+    public void writeObject(ObjectOutput output, InfinispanSessionData object) throws IOException\n+    {\n+        SerializationContext serializationContext = initSerializationContext();\n+\n+     // invokes writeTo(ProtoStreamWriter, InfinispanSessionData)\n+        byte[] data = ProtobufUtil.toByteArray(serializationContext, object);\n+        int length = data.length;\n+        output.write(ByteBuffer.allocate(4).putInt(length).array());\n+        output.write(data);        \n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYzNTg5MQ=="}, "originalCommit": {"oid": "f4f77701b56d90a93ce5f9c4a1d3b2b203720b4d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0MTg2Nw==", "bodyText": "If storeAsBinary=true but not filestore, which form of serialization is used?", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r392941867", "createdAt": "2020-03-16T11:07:41Z", "author": {"login": "janbartel"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "diffHunk": "@@ -49,6 +67,33 @@ public String getTypeName()\n         return \"org_eclipse_jetty_session_infinispan.InfinispanSessionData\";\n     }\n \n+    @Override\n+    public InfinispanSessionData readObject(ObjectInput input) throws IOException, ClassNotFoundException\n+    {\n+        SerializationContext serializationContext = initSerializationContext();\n+\n+        // invokes readFrom(ProtoStreamReader)\n+        InfinispanSessionData data = ProtobufUtil.readFrom(serializationContext, new BoundDelegatingInputStream(input),\n+                InfinispanSessionData.class);\n+        if (data != null)\n+        {\n+            data.deserializeAttributes();\n+        }\n+        return data;\n+    }\n+\n+    @Override\n+    public void writeObject(ObjectOutput output, InfinispanSessionData object) throws IOException\n+    {\n+        SerializationContext serializationContext = initSerializationContext();\n+\n+     // invokes writeTo(ProtoStreamWriter, InfinispanSessionData)\n+        byte[] data = ProtobufUtil.toByteArray(serializationContext, object);\n+        int length = data.length;\n+        output.write(ByteBuffer.allocate(4).putInt(length).array());\n+        output.write(data);        \n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYzNTg5MQ=="}, "originalCommit": {"oid": "f4f77701b56d90a93ce5f9c4a1d3b2b203720b4d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MTAxMQ==", "bodyText": "Always the Externalizer interface", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r392951011", "createdAt": "2020-03-16T11:29:33Z", "author": {"login": "kandrej"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "diffHunk": "@@ -49,6 +67,33 @@ public String getTypeName()\n         return \"org_eclipse_jetty_session_infinispan.InfinispanSessionData\";\n     }\n \n+    @Override\n+    public InfinispanSessionData readObject(ObjectInput input) throws IOException, ClassNotFoundException\n+    {\n+        SerializationContext serializationContext = initSerializationContext();\n+\n+        // invokes readFrom(ProtoStreamReader)\n+        InfinispanSessionData data = ProtobufUtil.readFrom(serializationContext, new BoundDelegatingInputStream(input),\n+                InfinispanSessionData.class);\n+        if (data != null)\n+        {\n+            data.deserializeAttributes();\n+        }\n+        return data;\n+    }\n+\n+    @Override\n+    public void writeObject(ObjectOutput output, InfinispanSessionData object) throws IOException\n+    {\n+        SerializationContext serializationContext = initSerializationContext();\n+\n+     // invokes writeTo(ProtoStreamWriter, InfinispanSessionData)\n+        byte[] data = ProtobufUtil.toByteArray(serializationContext, object);\n+        int length = data.length;\n+        output.write(ByteBuffer.allocate(4).putInt(length).array());\n+        output.write(data);        \n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYzNTg5MQ=="}, "originalCommit": {"oid": "f4f77701b56d90a93ce5f9c4a1d3b2b203720b4d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MzUwNA==", "bodyText": "Store as binary is explained in the user guide:\nhttps://infinispan.org/docs/9.4.x/user_guide/user_guide.html#store_binary", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r393153504", "createdAt": "2020-03-16T16:31:22Z", "author": {"login": "kandrej"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "diffHunk": "@@ -49,6 +67,33 @@ public String getTypeName()\n         return \"org_eclipse_jetty_session_infinispan.InfinispanSessionData\";\n     }\n \n+    @Override\n+    public InfinispanSessionData readObject(ObjectInput input) throws IOException, ClassNotFoundException\n+    {\n+        SerializationContext serializationContext = initSerializationContext();\n+\n+        // invokes readFrom(ProtoStreamReader)\n+        InfinispanSessionData data = ProtobufUtil.readFrom(serializationContext, new BoundDelegatingInputStream(input),\n+                InfinispanSessionData.class);\n+        if (data != null)\n+        {\n+            data.deserializeAttributes();\n+        }\n+        return data;\n+    }\n+\n+    @Override\n+    public void writeObject(ObjectOutput output, InfinispanSessionData object) throws IOException\n+    {\n+        SerializationContext serializationContext = initSerializationContext();\n+\n+     // invokes writeTo(ProtoStreamWriter, InfinispanSessionData)\n+        byte[] data = ProtobufUtil.toByteArray(serializationContext, object);\n+        int length = data.length;\n+        output.write(ByteBuffer.allocate(4).putInt(length).array());\n+        output.write(data);        \n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYzNTg5MQ=="}, "originalCommit": {"oid": "f4f77701b56d90a93ce5f9c4a1d3b2b203720b4d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4OTI1MQ==", "bodyText": "I wish infinispan had a unified serialization api!\nI think we're good with your solution (just make the serialization context a lazily initialized static).", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r393589251", "createdAt": "2020-03-17T10:46:27Z", "author": {"login": "janbartel"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "diffHunk": "@@ -49,6 +67,33 @@ public String getTypeName()\n         return \"org_eclipse_jetty_session_infinispan.InfinispanSessionData\";\n     }\n \n+    @Override\n+    public InfinispanSessionData readObject(ObjectInput input) throws IOException, ClassNotFoundException\n+    {\n+        SerializationContext serializationContext = initSerializationContext();\n+\n+        // invokes readFrom(ProtoStreamReader)\n+        InfinispanSessionData data = ProtobufUtil.readFrom(serializationContext, new BoundDelegatingInputStream(input),\n+                InfinispanSessionData.class);\n+        if (data != null)\n+        {\n+            data.deserializeAttributes();\n+        }\n+        return data;\n+    }\n+\n+    @Override\n+    public void writeObject(ObjectOutput output, InfinispanSessionData object) throws IOException\n+    {\n+        SerializationContext serializationContext = initSerializationContext();\n+\n+     // invokes writeTo(ProtoStreamWriter, InfinispanSessionData)\n+        byte[] data = ProtobufUtil.toByteArray(serializationContext, object);\n+        int length = data.length;\n+        output.write(ByteBuffer.allocate(4).putInt(length).array());\n+        output.write(data);        \n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYzNTg5MQ=="}, "originalCommit": {"oid": "f4f77701b56d90a93ce5f9c4a1d3b2b203720b4d"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTgyOTIxOnYy", "diffSide": "RIGHT", "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMToyNjozN1rOF3YDJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTo1NTozN1rOF3Y-eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYxMDAyMw==", "bodyText": "I think you're going to need some synchronization - the lazy init of the serializationContext fields isn't thread safe, is it?", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r393610023", "createdAt": "2020-03-17T11:26:37Z", "author": {"login": "janbartel"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "diffHunk": "@@ -49,6 +68,39 @@ public String getTypeName()\n         return \"org_eclipse_jetty_session_infinispan.InfinispanSessionData\";\n     }\n \n+    @Override\n+    public InfinispanSessionData readObject(ObjectInput input) throws IOException, ClassNotFoundException\n+    {\n+        if (serializationContext == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d436892ce0ed1ec05214859b311d0fba3d706350"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyNTIwOA==", "bodyText": "You're right, better be sure", "url": "https://github.com/eclipse/jetty.project/pull/4600#discussion_r393625208", "createdAt": "2020-03-17T11:55:37Z", "author": {"login": "kandrej"}, "path": "jetty-infinispan/infinispan-common/src/main/java/org/eclipse/jetty/session/infinispan/SessionDataMarshaller.java", "diffHunk": "@@ -49,6 +68,39 @@ public String getTypeName()\n         return \"org_eclipse_jetty_session_infinispan.InfinispanSessionData\";\n     }\n \n+    @Override\n+    public InfinispanSessionData readObject(ObjectInput input) throws IOException, ClassNotFoundException\n+    {\n+        if (serializationContext == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYxMDAyMw=="}, "originalCommit": {"oid": "d436892ce0ed1ec05214859b311d0fba3d706350"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2632, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}