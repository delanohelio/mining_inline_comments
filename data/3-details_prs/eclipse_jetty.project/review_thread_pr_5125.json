{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzOTYyNjkx", "number": 5125, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOTo0ODowNlrOEXIvqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo1ODoxMVrOEY9Vrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjk1OTc2OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/util/WebSocketConnectionStatistics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOTo0ODowNlrOG-wgJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOTo0OTo1OFrOG-wkzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ1OTU1Ng==", "bodyText": "I think this could be generalised as we now probably need the same thing for HTTP stats maybe HTTP2 stats etc.\nSo perhaps put a protected method into ConnectionStatistics that asks if a connection should be included.... perhaps with the default implementation checking in IncludeExcludeSet of classes?", "url": "https://github.com/eclipse/jetty.project/pull/5125#discussion_r468459556", "createdAt": "2020-08-11T09:48:06Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/util/WebSocketConnectionStatistics.java", "diffHunk": "@@ -0,0 +1,40 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.common.util;\n+\n+import org.eclipse.jetty.io.Connection;\n+import org.eclipse.jetty.io.ConnectionStatistics;\n+import org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection;\n+\n+public class WebSocketConnectionStatistics extends ConnectionStatistics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a3ff775d5bc285e066e5638623970496f32022d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ2MDc0OQ==", "bodyText": "Hmm perhaps keep the base class the same for efficiency, but have an IncludeExclude version derived", "url": "https://github.com/eclipse/jetty.project/pull/5125#discussion_r468460749", "createdAt": "2020-08-11T09:49:58Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/util/WebSocketConnectionStatistics.java", "diffHunk": "@@ -0,0 +1,40 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.common.util;\n+\n+import org.eclipse.jetty.io.Connection;\n+import org.eclipse.jetty.io.ConnectionStatistics;\n+import org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection;\n+\n+public class WebSocketConnectionStatistics extends ConnectionStatistics", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ1OTU1Ng=="}, "originalCommit": {"oid": "8a3ff775d5bc285e066e5638623970496f32022d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjAyNzUxOnYy", "diffSide": "RIGHT", "path": "jetty-io/src/main/java/org/eclipse/jetty/io/IncludeExcludeConnectionStatistics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo0ODo0NFrOHBf6Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo0ODo0NFrOHBf6Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzMzQzOQ==", "bodyText": "You don't need tristate logic here, just use:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (Boolean.TRUE.equals(_set.isIncludedAndNotExcluded(connection)))\n          \n          \n            \n                    if (_set.test(connection))", "url": "https://github.com/eclipse/jetty.project/pull/5125#discussion_r471333439", "createdAt": "2020-08-17T08:48:44Z", "author": {"login": "gregw"}, "path": "jetty-io/src/main/java/org/eclipse/jetty/io/IncludeExcludeConnectionStatistics.java", "diffHunk": "@@ -0,0 +1,114 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.io;\n+\n+import java.util.AbstractSet;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import org.eclipse.jetty.util.IncludeExcludeSet;\n+\n+public class IncludeExcludeConnectionStatistics extends ConnectionStatistics\n+{\n+    private final IncludeExcludeSet<Class<? extends Connection>, Connection> _set = new IncludeExcludeSet<>(ConnectionSet.class);\n+\n+    public void include(String className) throws ClassNotFoundException\n+    {\n+        _set.include(connectionForName(className));\n+    }\n+\n+    public void include(Class<? extends Connection> clazz)\n+    {\n+        _set.include(clazz);\n+    }\n+\n+    public void exclude(String className) throws ClassNotFoundException\n+    {\n+        _set.exclude(connectionForName(className));\n+    }\n+\n+    public void exclude(Class<? extends Connection> clazz)\n+    {\n+        _set.exclude(clazz);\n+    }\n+\n+    private Class<? extends Connection> connectionForName(String className) throws ClassNotFoundException\n+    {\n+        Class<?> aClass = Class.forName(className);\n+        if (!Connection.class.isAssignableFrom(aClass))\n+            throw new IllegalArgumentException(\"Class is not a Connection\");\n+\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Connection> connectionClass = (Class<? extends Connection>)aClass;\n+        return connectionClass;\n+    }\n+\n+    @Override\n+    public void onOpened(Connection connection)\n+    {\n+        if (Boolean.TRUE.equals(_set.isIncludedAndNotExcluded(connection)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1663a6d7af9d85390fef6deb6d15cd7bce30263e"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjAyODY3OnYy", "diffSide": "RIGHT", "path": "jetty-io/src/main/java/org/eclipse/jetty/io/IncludeExcludeConnectionStatistics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo0OTowNFrOHBf69w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo0OTowNFrOHBf69w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzMzYyMw==", "bodyText": "ditto", "url": "https://github.com/eclipse/jetty.project/pull/5125#discussion_r471333623", "createdAt": "2020-08-17T08:49:04Z", "author": {"login": "gregw"}, "path": "jetty-io/src/main/java/org/eclipse/jetty/io/IncludeExcludeConnectionStatistics.java", "diffHunk": "@@ -0,0 +1,114 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.io;\n+\n+import java.util.AbstractSet;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import org.eclipse.jetty.util.IncludeExcludeSet;\n+\n+public class IncludeExcludeConnectionStatistics extends ConnectionStatistics\n+{\n+    private final IncludeExcludeSet<Class<? extends Connection>, Connection> _set = new IncludeExcludeSet<>(ConnectionSet.class);\n+\n+    public void include(String className) throws ClassNotFoundException\n+    {\n+        _set.include(connectionForName(className));\n+    }\n+\n+    public void include(Class<? extends Connection> clazz)\n+    {\n+        _set.include(clazz);\n+    }\n+\n+    public void exclude(String className) throws ClassNotFoundException\n+    {\n+        _set.exclude(connectionForName(className));\n+    }\n+\n+    public void exclude(Class<? extends Connection> clazz)\n+    {\n+        _set.exclude(clazz);\n+    }\n+\n+    private Class<? extends Connection> connectionForName(String className) throws ClassNotFoundException\n+    {\n+        Class<?> aClass = Class.forName(className);\n+        if (!Connection.class.isAssignableFrom(aClass))\n+            throw new IllegalArgumentException(\"Class is not a Connection\");\n+\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Connection> connectionClass = (Class<? extends Connection>)aClass;\n+        return connectionClass;\n+    }\n+\n+    @Override\n+    public void onOpened(Connection connection)\n+    {\n+        if (Boolean.TRUE.equals(_set.isIncludedAndNotExcluded(connection)))\n+            super.onOpened(connection);\n+    }\n+\n+    @Override\n+    public void onClosed(Connection connection)\n+    {\n+        if (Boolean.TRUE.equals(_set.isIncludedAndNotExcluded(connection)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1663a6d7af9d85390fef6deb6d15cd7bce30263e"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjA2MjU0OnYy", "diffSide": "RIGHT", "path": "jetty-io/src/main/java/org/eclipse/jetty/io/IncludeExcludeConnectionStatistics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo1ODoxMVrOHBgPcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDoxNzoxOFrOHB-_3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzODg2NQ==", "bodyText": "rather than create your own set type just to provide a predicate is is probably simpler to use:\nnew IncludeExcludeSet<>(new HashSet<>(), Connection.class::isAssignableFrom, new HashSet<>(), Connection.class::isAssignableFrom);", "url": "https://github.com/eclipse/jetty.project/pull/5125#discussion_r471338865", "createdAt": "2020-08-17T08:58:11Z", "author": {"login": "gregw"}, "path": "jetty-io/src/main/java/org/eclipse/jetty/io/IncludeExcludeConnectionStatistics.java", "diffHunk": "@@ -0,0 +1,114 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.io;\n+\n+import java.util.AbstractSet;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import org.eclipse.jetty.util.IncludeExcludeSet;\n+\n+public class IncludeExcludeConnectionStatistics extends ConnectionStatistics\n+{\n+    private final IncludeExcludeSet<Class<? extends Connection>, Connection> _set = new IncludeExcludeSet<>(ConnectionSet.class);\n+\n+    public void include(String className) throws ClassNotFoundException\n+    {\n+        _set.include(connectionForName(className));\n+    }\n+\n+    public void include(Class<? extends Connection> clazz)\n+    {\n+        _set.include(clazz);\n+    }\n+\n+    public void exclude(String className) throws ClassNotFoundException\n+    {\n+        _set.exclude(connectionForName(className));\n+    }\n+\n+    public void exclude(Class<? extends Connection> clazz)\n+    {\n+        _set.exclude(clazz);\n+    }\n+\n+    private Class<? extends Connection> connectionForName(String className) throws ClassNotFoundException\n+    {\n+        Class<?> aClass = Class.forName(className);\n+        if (!Connection.class.isAssignableFrom(aClass))\n+            throw new IllegalArgumentException(\"Class is not a Connection\");\n+\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Connection> connectionClass = (Class<? extends Connection>)aClass;\n+        return connectionClass;\n+    }\n+\n+    @Override\n+    public void onOpened(Connection connection)\n+    {\n+        if (Boolean.TRUE.equals(_set.isIncludedAndNotExcluded(connection)))\n+            super.onOpened(connection);\n+    }\n+\n+    @Override\n+    public void onClosed(Connection connection)\n+    {\n+        if (Boolean.TRUE.equals(_set.isIncludedAndNotExcluded(connection)))\n+            super.onClosed(connection);\n+    }\n+\n+    public static class ConnectionSet extends AbstractSet<Class<? extends Connection>> implements Predicate<Connection>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1663a6d7af9d85390fef6deb6d15cd7bce30263e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0Mjc4Mw==", "bodyText": "This doesn't work, we wan't to know if assignable from one of the values present in the set, it will always be assignable from Connection.\nTo get the same logic I would need something like this\nHashSet<Class<? extends Connection>> includes = new HashSet<>();\nHashSet<Class<? extends Connection>> excludes = new HashSet<>();\n\n_set = new IncludeExcludeSet<>(includes, connection ->\n{\n    if (connection == null)\n        return false;\n    return includes.stream().anyMatch(c -> c.isAssignableFrom(connection.getClass()));\n},\nexcludes, connection ->\n{\n    if (connection == null)\n        return false;\n    return excludes.stream().anyMatch(c -> c.isAssignableFrom(connection.getClass()));\n});\nso seems easier to just define the set type.", "url": "https://github.com/eclipse/jetty.project/pull/5125#discussion_r471842783", "createdAt": "2020-08-18T00:17:18Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-io/src/main/java/org/eclipse/jetty/io/IncludeExcludeConnectionStatistics.java", "diffHunk": "@@ -0,0 +1,114 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.io;\n+\n+import java.util.AbstractSet;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import org.eclipse.jetty.util.IncludeExcludeSet;\n+\n+public class IncludeExcludeConnectionStatistics extends ConnectionStatistics\n+{\n+    private final IncludeExcludeSet<Class<? extends Connection>, Connection> _set = new IncludeExcludeSet<>(ConnectionSet.class);\n+\n+    public void include(String className) throws ClassNotFoundException\n+    {\n+        _set.include(connectionForName(className));\n+    }\n+\n+    public void include(Class<? extends Connection> clazz)\n+    {\n+        _set.include(clazz);\n+    }\n+\n+    public void exclude(String className) throws ClassNotFoundException\n+    {\n+        _set.exclude(connectionForName(className));\n+    }\n+\n+    public void exclude(Class<? extends Connection> clazz)\n+    {\n+        _set.exclude(clazz);\n+    }\n+\n+    private Class<? extends Connection> connectionForName(String className) throws ClassNotFoundException\n+    {\n+        Class<?> aClass = Class.forName(className);\n+        if (!Connection.class.isAssignableFrom(aClass))\n+            throw new IllegalArgumentException(\"Class is not a Connection\");\n+\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Connection> connectionClass = (Class<? extends Connection>)aClass;\n+        return connectionClass;\n+    }\n+\n+    @Override\n+    public void onOpened(Connection connection)\n+    {\n+        if (Boolean.TRUE.equals(_set.isIncludedAndNotExcluded(connection)))\n+            super.onOpened(connection);\n+    }\n+\n+    @Override\n+    public void onClosed(Connection connection)\n+    {\n+        if (Boolean.TRUE.equals(_set.isIncludedAndNotExcluded(connection)))\n+            super.onClosed(connection);\n+    }\n+\n+    public static class ConnectionSet extends AbstractSet<Class<? extends Connection>> implements Predicate<Connection>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzODg2NQ=="}, "originalCommit": {"oid": "1663a6d7af9d85390fef6deb6d15cd7bce30263e"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2294, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}