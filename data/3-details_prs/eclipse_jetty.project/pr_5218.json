{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2OTc1ODk1", "number": 5218, "title": "Alternative Pool Strategies", "bodyText": "Speculative proposal to make Pool have a pluggable strategy for #5217", "createdAt": "2020-09-01T10:16:27Z", "url": "https://github.com/eclipse/jetty.project/pull/5218", "merged": true, "mergeCommit": {"oid": "ba22c08fde5362fe2e89e9c417d2a90658c74283"}, "closed": true, "closedAt": "2020-09-16T16:27:27Z", "author": {"login": "gregw"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEkpeagH2gAyNDc2OTc1ODk1OmI2M2M1OWQ1MTFlMjc0OTA4ODA4YWMzYjMzOGM0MDE0OWYwNzQ4NjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJe7iOAH2gAyNDc2OTc1ODk1OjIxZjkzYzZkZjFmYWYyNjEyZmE1MTBmYThkZjI4ZGUyNTg3N2FjOGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b63c59d511e274908808ac3b338c40149f074864", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/b63c59d511e274908808ac3b338c40149f074864", "committedDate": "2020-09-01T10:14:49Z", "message": "Speculative idea to make a pluggable Pool strategy\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "410fe53ea19e7b0a66e010da66672936326cfc55", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/410fe53ea19e7b0a66e010da66672936326cfc55", "committedDate": "2020-09-01T13:43:34Z", "message": "Speculative idea to make a pluggable Pool strategy\n\n + javadoc\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27d31dedb26cd625b3919b31efd7043c78abf226", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/27d31dedb26cd625b3919b31efd7043c78abf226", "committedDate": "2020-09-01T14:13:17Z", "message": "Speculative idea to make a pluggable Pool strategy\n\n + Added a ThreadLocalStrategy for a single cached item\n + Tell strategies about newly reserved entries\n + Fixed multiplexing test that was dependent on the impl of the cache\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91df8dad0945b6951ff30629df4e86e739a02d85", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/91df8dad0945b6951ff30629df4e86e739a02d85", "committedDate": "2020-09-01T15:38:54Z", "message": "Speculative idea to make a pluggable Pool strategy\n\n + added tests\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db086a513502d36bde7d1d886eaea7dca3e53721", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/db086a513502d36bde7d1d886eaea7dca3e53721", "committedDate": "2020-09-02T11:53:56Z", "message": "Feedback from review\n\n + Don't have a fallback iteration, instead make a SearchStrategy and DualStrategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ab7bd726b0e2412a5c1497348473dbac98d64a3", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/6ab7bd726b0e2412a5c1497348473dbac98d64a3", "committedDate": "2020-09-02T12:34:58Z", "message": "Feedback from review\n\n + split strategies into Cache and Strategies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNzg3NDI1", "url": "https://github.com/eclipse/jetty.project/pull/5218#pullrequestreview-480787425", "createdAt": "2020-09-02T12:53:16Z", "commit": {"oid": "6ab7bd726b0e2412a5c1497348473dbac98d64a3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMjo1MzoxNlrOHLtqgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMjo1ODowOFrOHLt26g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA0NDU0NA==", "bodyText": "Why a release() inside reserve()?", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r482044544", "createdAt": "2020-09-02T12:53:16Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -165,7 +201,8 @@ public Entry reserve(int allotment)\n             pending.incrementAndGet();\n \n             Entry entry = new Entry();\n-            sharedList.add(entry);\n+            entries.add(entry);\n+            strategy.released(entries, entry, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab7bd726b0e2412a5c1497348473dbac98d64a3"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA0NzMzMw==", "bodyText": "Just release() and implementations have to call entry.tryRelease() so that we're symmetric with acquire() above?", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r482047333", "createdAt": "2020-09-02T12:57:31Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -559,4 +574,222 @@ public String toString()\n                 pooled);\n         }\n     }\n+\n+    /** A pluggable strategy to optimize pool acquisition\n+     * @param <T> The type of the items in the pool\n+     */\n+    public interface Cache<T>\n+    {\n+        /** Acquire an entry\n+         * @param entries The list of entries known to the pool. This may be concurrently modified.\n+         * @return An acquired entry or null if none can be acquired by this strategy\n+         */\n+        Pool<T>.Entry acquire(List<Pool<T>.Entry> entries);\n+\n+        /**\n+         * Notification an entry has been release.  The notification comes after the entry\n+         * has been put back in the pool and it may already have been reacquired before or during this call.\n+         * @param entries The list of entries known to the pool. This may be concurrently modified.\n+         * @param entry The entry to be release\n+         * @param reusable true if the entry is reusable and will be put back in the pool.\n+         */\n+        default void released(List<Pool<T>.Entry> entries, Pool<T>.Entry entry, boolean reusable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab7bd726b0e2412a5c1497348473dbac98d64a3"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA0NzcyMg==", "bodyText": "Is not this class missing a remove() method?", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r482047722", "createdAt": "2020-09-02T12:58:08Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -559,4 +574,222 @@ public String toString()\n                 pooled);\n         }\n     }\n+\n+    /** A pluggable strategy to optimize pool acquisition\n+     * @param <T> The type of the items in the pool\n+     */\n+    public interface Cache<T>\n+    {\n+        /** Acquire an entry\n+         * @param entries The list of entries known to the pool. This may be concurrently modified.\n+         * @return An acquired entry or null if none can be acquired by this strategy\n+         */\n+        Pool<T>.Entry acquire(List<Pool<T>.Entry> entries);\n+\n+        /**\n+         * Notification an entry has been release.  The notification comes after the entry\n+         * has been put back in the pool and it may already have been reacquired before or during this call.\n+         * @param entries The list of entries known to the pool. This may be concurrently modified.\n+         * @param entry The entry to be release\n+         * @param reusable true if the entry is reusable and will be put back in the pool.\n+         */\n+        default void released(List<Pool<T>.Entry> entries, Pool<T>.Entry entry, boolean reusable)\n+        {\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab7bd726b0e2412a5c1497348473dbac98d64a3"}, "originalPosition": 288}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNzk3NjU2", "url": "https://github.com/eclipse/jetty.project/pull/5218#pullrequestreview-480797656", "createdAt": "2020-09-02T13:05:07Z", "commit": {"oid": "6ab7bd726b0e2412a5c1497348473dbac98d64a3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzowNTowN1rOHLuI0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzoxNDo0M1rOHLuhow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA1MjMwNg==", "bodyText": "LinearSearchStrategy?", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r482052306", "createdAt": "2020-09-02T13:05:07Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -559,4 +574,222 @@ public String toString()\n                 pooled);\n         }\n     }\n+\n+    /** A pluggable strategy to optimize pool acquisition\n+     * @param <T> The type of the items in the pool\n+     */\n+    public interface Cache<T>\n+    {\n+        /** Acquire an entry\n+         * @param entries The list of entries known to the pool. This may be concurrently modified.\n+         * @return An acquired entry or null if none can be acquired by this strategy\n+         */\n+        Pool<T>.Entry acquire(List<Pool<T>.Entry> entries);\n+\n+        /**\n+         * Notification an entry has been release.  The notification comes after the entry\n+         * has been put back in the pool and it may already have been reacquired before or during this call.\n+         * @param entries The list of entries known to the pool. This may be concurrently modified.\n+         * @param entry The entry to be release\n+         * @param reusable true if the entry is reusable and will be put back in the pool.\n+         */\n+        default void released(List<Pool<T>.Entry> entries, Pool<T>.Entry entry, boolean reusable)\n+        {\n+        }\n+    }\n+\n+    public interface Strategy<T> extends Cache<T>\n+    {\n+    }\n+\n+    public static class CacheStrategy<T> implements Strategy<T>\n+    {\n+        final Cache<T> cache;\n+        final Strategy<T> strategy;\n+\n+        public CacheStrategy(Cache<T> cache, Strategy<T> planB)\n+        {\n+            Objects.requireNonNull(cache);\n+            Objects.requireNonNull(planB);\n+            this.cache = cache;\n+            this.strategy = planB;\n+        }\n+\n+        @Override\n+        public Pool<T>.Entry acquire(List<Pool<T>.Entry> entries)\n+        {\n+            Pool<T>.Entry entry = cache.acquire(entries);\n+            return entry == null ? strategy.acquire(entries) : entry;\n+        }\n+\n+        @Override\n+        public void released(List<Pool<T>.Entry> entries, Pool<T>.Entry entry, boolean reusable)\n+        {\n+            cache.released(entries, entry, reusable);\n+            strategy.released(entries, entry, reusable);\n+        }\n+    }\n+\n+    public static class SearchStrategy<T> implements Strategy<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab7bd726b0e2412a5c1497348473dbac98d64a3"}, "originalPosition": 322}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA1Mjc1MA==", "bodyText": "private final?", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r482052750", "createdAt": "2020-09-02T13:05:49Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -559,4 +574,222 @@ public String toString()\n                 pooled);\n         }\n     }\n+\n+    /** A pluggable strategy to optimize pool acquisition\n+     * @param <T> The type of the items in the pool\n+     */\n+    public interface Cache<T>\n+    {\n+        /** Acquire an entry\n+         * @param entries The list of entries known to the pool. This may be concurrently modified.\n+         * @return An acquired entry or null if none can be acquired by this strategy\n+         */\n+        Pool<T>.Entry acquire(List<Pool<T>.Entry> entries);\n+\n+        /**\n+         * Notification an entry has been release.  The notification comes after the entry\n+         * has been put back in the pool and it may already have been reacquired before or during this call.\n+         * @param entries The list of entries known to the pool. This may be concurrently modified.\n+         * @param entry The entry to be release\n+         * @param reusable true if the entry is reusable and will be put back in the pool.\n+         */\n+        default void released(List<Pool<T>.Entry> entries, Pool<T>.Entry entry, boolean reusable)\n+        {\n+        }\n+    }\n+\n+    public interface Strategy<T> extends Cache<T>\n+    {\n+    }\n+\n+    public static class CacheStrategy<T> implements Strategy<T>\n+    {\n+        final Cache<T> cache;\n+        final Strategy<T> strategy;\n+\n+        public CacheStrategy(Cache<T> cache, Strategy<T> planB)\n+        {\n+            Objects.requireNonNull(cache);\n+            Objects.requireNonNull(planB);\n+            this.cache = cache;\n+            this.strategy = planB;\n+        }\n+\n+        @Override\n+        public Pool<T>.Entry acquire(List<Pool<T>.Entry> entries)\n+        {\n+            Pool<T>.Entry entry = cache.acquire(entries);\n+            return entry == null ? strategy.acquire(entries) : entry;\n+        }\n+\n+        @Override\n+        public void released(List<Pool<T>.Entry> entries, Pool<T>.Entry entry, boolean reusable)\n+        {\n+            cache.released(entries, entry, reusable);\n+            strategy.released(entries, entry, reusable);\n+        }\n+    }\n+\n+    public static class SearchStrategy<T> implements Strategy<T>\n+    {\n+        @Override\n+        public Pool<T>.Entry acquire(List<Pool<T>.Entry> entries)\n+        {\n+            for (Pool<T>.Entry e : entries)\n+            {\n+                if (e.tryAcquire())\n+                    return e;\n+            }\n+            return null;\n+        }\n+    }\n+\n+    public static class ThreadLocalCache<T> implements Cache<T>\n+    {\n+        private final ThreadLocal<Pool<T>.Entry> last;\n+\n+        ThreadLocalCache()\n+        {\n+            last = new ThreadLocal<>();\n+        }\n+\n+        @Override\n+        public Pool<T>.Entry acquire(List<Pool<T>.Entry> entries)\n+        {\n+            Pool<T>.Entry entry = last.get();\n+            if (entry != null && entry.tryAcquire())\n+                return entry;\n+            return null;\n+        }\n+\n+        @Override\n+        public void released(List<Pool<T>.Entry> entries, Pool<T>.Entry entry, boolean reusable)\n+        {\n+            if (reusable)\n+                last.set(entry);\n+        }\n+    }\n+\n+    public static class ThreadLocalListCache<T> implements Cache<T>\n+    {\n+        private final ThreadLocal<List<Pool<T>.Entry>> cache;\n+        private final int cacheSize;\n+\n+        ThreadLocalListCache(int size)\n+        {\n+            this.cacheSize = size;\n+            this.cache = ThreadLocal.withInitial(() -> new ArrayList<>(cacheSize));\n+        }\n+\n+        @Override\n+        public Pool<T>.Entry acquire(List<Pool<T>.Entry> entries)\n+        {\n+            List<Pool<T>.Entry> cachedList = cache.get();\n+            while (!cachedList.isEmpty())\n+            {\n+                Pool<T>.Entry cachedEntry = cachedList.remove(cachedList.size() - 1);\n+                if (cachedEntry.tryAcquire())\n+                    return cachedEntry;\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public void released(List<Pool<T>.Entry> entries, Pool<T>.Entry entry, boolean reusable)\n+        {\n+            if (reusable)\n+            {\n+                List<Pool<T>.Entry> cachedList = cache.get();\n+                if (cachedList.size() < cacheSize)\n+                    cachedList.add(entry);\n+            }\n+        }\n+    }\n+\n+    private abstract static class IndexedCached<T> implements Cache<T>\n+    {\n+        @Override\n+        public Pool<T>.Entry acquire(List<Pool<T>.Entry> entries)\n+        {\n+            int size = entries.size();\n+            if (size == 0)\n+                return null;\n+            int i = nextIndex(size);\n+            try\n+            {\n+                Pool<T>.Entry entry = entries.get(i);\n+                if (entry != null && entry.tryAcquire())\n+                    return entry;\n+            }\n+            catch (Exception e)\n+            {\n+                // Could be out of bounds\n+                LOGGER.ignore(e);\n+            }\n+            return null;\n+        }\n+\n+        protected abstract int nextIndex(int size);\n+    }\n+\n+    public static class RandomCache<T> extends IndexedCached<T>\n+    {\n+        @Override\n+        protected int nextIndex(int size)\n+        {\n+            return ThreadLocalRandom.current().nextInt(size);\n+        }\n+    }\n+\n+    public static class RoundRobinCache<T> extends IndexedCached<T>\n+    {\n+        AtomicInteger index = new AtomicInteger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab7bd726b0e2412a5c1497348473dbac98d64a3"}, "originalPosition": 435}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA1MzAwOQ==", "bodyText": "do we want to keep this strategy?", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r482053009", "createdAt": "2020-09-02T13:06:13Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -559,4 +574,222 @@ public String toString()\n                 pooled);\n         }\n     }\n+\n+    /** A pluggable strategy to optimize pool acquisition\n+     * @param <T> The type of the items in the pool\n+     */\n+    public interface Cache<T>\n+    {\n+        /** Acquire an entry\n+         * @param entries The list of entries known to the pool. This may be concurrently modified.\n+         * @return An acquired entry or null if none can be acquired by this strategy\n+         */\n+        Pool<T>.Entry acquire(List<Pool<T>.Entry> entries);\n+\n+        /**\n+         * Notification an entry has been release.  The notification comes after the entry\n+         * has been put back in the pool and it may already have been reacquired before or during this call.\n+         * @param entries The list of entries known to the pool. This may be concurrently modified.\n+         * @param entry The entry to be release\n+         * @param reusable true if the entry is reusable and will be put back in the pool.\n+         */\n+        default void released(List<Pool<T>.Entry> entries, Pool<T>.Entry entry, boolean reusable)\n+        {\n+        }\n+    }\n+\n+    public interface Strategy<T> extends Cache<T>\n+    {\n+    }\n+\n+    public static class CacheStrategy<T> implements Strategy<T>\n+    {\n+        final Cache<T> cache;\n+        final Strategy<T> strategy;\n+\n+        public CacheStrategy(Cache<T> cache, Strategy<T> planB)\n+        {\n+            Objects.requireNonNull(cache);\n+            Objects.requireNonNull(planB);\n+            this.cache = cache;\n+            this.strategy = planB;\n+        }\n+\n+        @Override\n+        public Pool<T>.Entry acquire(List<Pool<T>.Entry> entries)\n+        {\n+            Pool<T>.Entry entry = cache.acquire(entries);\n+            return entry == null ? strategy.acquire(entries) : entry;\n+        }\n+\n+        @Override\n+        public void released(List<Pool<T>.Entry> entries, Pool<T>.Entry entry, boolean reusable)\n+        {\n+            cache.released(entries, entry, reusable);\n+            strategy.released(entries, entry, reusable);\n+        }\n+    }\n+\n+    public static class SearchStrategy<T> implements Strategy<T>\n+    {\n+        @Override\n+        public Pool<T>.Entry acquire(List<Pool<T>.Entry> entries)\n+        {\n+            for (Pool<T>.Entry e : entries)\n+            {\n+                if (e.tryAcquire())\n+                    return e;\n+            }\n+            return null;\n+        }\n+    }\n+\n+    public static class ThreadLocalCache<T> implements Cache<T>\n+    {\n+        private final ThreadLocal<Pool<T>.Entry> last;\n+\n+        ThreadLocalCache()\n+        {\n+            last = new ThreadLocal<>();\n+        }\n+\n+        @Override\n+        public Pool<T>.Entry acquire(List<Pool<T>.Entry> entries)\n+        {\n+            Pool<T>.Entry entry = last.get();\n+            if (entry != null && entry.tryAcquire())\n+                return entry;\n+            return null;\n+        }\n+\n+        @Override\n+        public void released(List<Pool<T>.Entry> entries, Pool<T>.Entry entry, boolean reusable)\n+        {\n+            if (reusable)\n+                last.set(entry);\n+        }\n+    }\n+\n+    public static class ThreadLocalListCache<T> implements Cache<T>\n+    {\n+        private final ThreadLocal<List<Pool<T>.Entry>> cache;\n+        private final int cacheSize;\n+\n+        ThreadLocalListCache(int size)\n+        {\n+            this.cacheSize = size;\n+            this.cache = ThreadLocal.withInitial(() -> new ArrayList<>(cacheSize));\n+        }\n+\n+        @Override\n+        public Pool<T>.Entry acquire(List<Pool<T>.Entry> entries)\n+        {\n+            List<Pool<T>.Entry> cachedList = cache.get();\n+            while (!cachedList.isEmpty())\n+            {\n+                Pool<T>.Entry cachedEntry = cachedList.remove(cachedList.size() - 1);\n+                if (cachedEntry.tryAcquire())\n+                    return cachedEntry;\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public void released(List<Pool<T>.Entry> entries, Pool<T>.Entry entry, boolean reusable)\n+        {\n+            if (reusable)\n+            {\n+                List<Pool<T>.Entry> cachedList = cache.get();\n+                if (cachedList.size() < cacheSize)\n+                    cachedList.add(entry);\n+            }\n+        }\n+    }\n+\n+    private abstract static class IndexedCached<T> implements Cache<T>\n+    {\n+        @Override\n+        public Pool<T>.Entry acquire(List<Pool<T>.Entry> entries)\n+        {\n+            int size = entries.size();\n+            if (size == 0)\n+                return null;\n+            int i = nextIndex(size);\n+            try\n+            {\n+                Pool<T>.Entry entry = entries.get(i);\n+                if (entry != null && entry.tryAcquire())\n+                    return entry;\n+            }\n+            catch (Exception e)\n+            {\n+                // Could be out of bounds\n+                LOGGER.ignore(e);\n+            }\n+            return null;\n+        }\n+\n+        protected abstract int nextIndex(int size);\n+    }\n+\n+    public static class RandomCache<T> extends IndexedCached<T>\n+    {\n+        @Override\n+        protected int nextIndex(int size)\n+        {\n+            return ThreadLocalRandom.current().nextInt(size);\n+        }\n+    }\n+\n+    public static class RoundRobinCache<T> extends IndexedCached<T>\n+    {\n+        AtomicInteger index = new AtomicInteger();\n+\n+        @Override\n+        protected int nextIndex(int size)\n+        {\n+            return index.getAndUpdate(c -> Math.max(0, c + 1)) % size;\n+        }\n+    }\n+\n+    public static class RoundRobinStrategy<T> extends RoundRobinCache<T> implements Strategy<T>\n+    {\n+        @Override\n+        public Pool<T>.Entry acquire(List<Pool<T>.Entry> entries)\n+        {\n+            int tries = entries.size();\n+            while (tries-- > 0)\n+            {\n+                Pool<T>.Entry entry = super.acquire(entries);\n+                if (entry != null)\n+                    return entry;\n+            }\n+            return null;\n+        }\n+    }\n+\n+    public static class LeastRecentlyUsedStrategy<T> implements Strategy<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab7bd726b0e2412a5c1497348473dbac98d64a3"}, "originalPosition": 460}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA1NTkxNA==", "bodyText": "I second @sbordet; and wouldn't the following signature be better?\nvoid release(Pool<T>.Entry entry);\nwithout a list of entries (I can't see why it would be needed) and no default impl?", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r482055914", "createdAt": "2020-09-02T13:10:36Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -559,4 +574,222 @@ public String toString()\n                 pooled);\n         }\n     }\n+\n+    /** A pluggable strategy to optimize pool acquisition\n+     * @param <T> The type of the items in the pool\n+     */\n+    public interface Cache<T>\n+    {\n+        /** Acquire an entry\n+         * @param entries The list of entries known to the pool. This may be concurrently modified.\n+         * @return An acquired entry or null if none can be acquired by this strategy\n+         */\n+        Pool<T>.Entry acquire(List<Pool<T>.Entry> entries);\n+\n+        /**\n+         * Notification an entry has been release.  The notification comes after the entry\n+         * has been put back in the pool and it may already have been reacquired before or during this call.\n+         * @param entries The list of entries known to the pool. This may be concurrently modified.\n+         * @param entry The entry to be release\n+         * @param reusable true if the entry is reusable and will be put back in the pool.\n+         */\n+        default void released(List<Pool<T>.Entry> entries, Pool<T>.Entry entry, boolean reusable)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA0NzMzMw=="}, "originalCommit": {"oid": "6ab7bd726b0e2412a5c1497348473dbac98d64a3"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA1NjMzMg==", "bodyText": "Are both Strategy and Cache needed?", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r482056332", "createdAt": "2020-09-02T13:11:12Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -559,4 +574,222 @@ public String toString()\n                 pooled);\n         }\n     }\n+\n+    /** A pluggable strategy to optimize pool acquisition\n+     * @param <T> The type of the items in the pool\n+     */\n+    public interface Cache<T>\n+    {\n+        /** Acquire an entry\n+         * @param entries The list of entries known to the pool. This may be concurrently modified.\n+         * @return An acquired entry or null if none can be acquired by this strategy\n+         */\n+        Pool<T>.Entry acquire(List<Pool<T>.Entry> entries);\n+\n+        /**\n+         * Notification an entry has been release.  The notification comes after the entry\n+         * has been put back in the pool and it may already have been reacquired before or during this call.\n+         * @param entries The list of entries known to the pool. This may be concurrently modified.\n+         * @param entry The entry to be release\n+         * @param reusable true if the entry is reusable and will be put back in the pool.\n+         */\n+        default void released(List<Pool<T>.Entry> entries, Pool<T>.Entry entry, boolean reusable)\n+        {\n+        }\n+    }\n+\n+    public interface Strategy<T> extends Cache<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab7bd726b0e2412a5c1497348473dbac98d64a3"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA1NzEyOA==", "bodyText": "If we go with this design, the RR connection pool should be rewritten to use the RR strategy and this method should be removed.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r482057128", "createdAt": "2020-09-02T13:12:22Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -176,14 +213,15 @@ public Entry reserve(int allotment)\n      * @param idx the index of the entry to acquire.\n      * @return the specified entry or null if there is none at the specified index or if it is not available.\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab7bd726b0e2412a5c1497348473dbac98d64a3"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA1Nzg1OA==", "bodyText": "this.cache = Objects.requireNonNull(cache);", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r482057858", "createdAt": "2020-09-02T13:13:32Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -559,4 +574,222 @@ public String toString()\n                 pooled);\n         }\n     }\n+\n+    /** A pluggable strategy to optimize pool acquisition\n+     * @param <T> The type of the items in the pool\n+     */\n+    public interface Cache<T>\n+    {\n+        /** Acquire an entry\n+         * @param entries The list of entries known to the pool. This may be concurrently modified.\n+         * @return An acquired entry or null if none can be acquired by this strategy\n+         */\n+        Pool<T>.Entry acquire(List<Pool<T>.Entry> entries);\n+\n+        /**\n+         * Notification an entry has been release.  The notification comes after the entry\n+         * has been put back in the pool and it may already have been reacquired before or during this call.\n+         * @param entries The list of entries known to the pool. This may be concurrently modified.\n+         * @param entry The entry to be release\n+         * @param reusable true if the entry is reusable and will be put back in the pool.\n+         */\n+        default void released(List<Pool<T>.Entry> entries, Pool<T>.Entry entry, boolean reusable)\n+        {\n+        }\n+    }\n+\n+    public interface Strategy<T> extends Cache<T>\n+    {\n+    }\n+\n+    public static class CacheStrategy<T> implements Strategy<T>\n+    {\n+        final Cache<T> cache;\n+        final Strategy<T> strategy;\n+\n+        public CacheStrategy(Cache<T> cache, Strategy<T> planB)\n+        {\n+            Objects.requireNonNull(cache);\n+            Objects.requireNonNull(planB);\n+            this.cache = cache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab7bd726b0e2412a5c1497348473dbac98d64a3"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA1ODAyNw==", "bodyText": "this.strategy = Objects.requireNonNull(planB);", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r482058027", "createdAt": "2020-09-02T13:13:49Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -559,4 +574,222 @@ public String toString()\n                 pooled);\n         }\n     }\n+\n+    /** A pluggable strategy to optimize pool acquisition\n+     * @param <T> The type of the items in the pool\n+     */\n+    public interface Cache<T>\n+    {\n+        /** Acquire an entry\n+         * @param entries The list of entries known to the pool. This may be concurrently modified.\n+         * @return An acquired entry or null if none can be acquired by this strategy\n+         */\n+        Pool<T>.Entry acquire(List<Pool<T>.Entry> entries);\n+\n+        /**\n+         * Notification an entry has been release.  The notification comes after the entry\n+         * has been put back in the pool and it may already have been reacquired before or during this call.\n+         * @param entries The list of entries known to the pool. This may be concurrently modified.\n+         * @param entry The entry to be release\n+         * @param reusable true if the entry is reusable and will be put back in the pool.\n+         */\n+        default void released(List<Pool<T>.Entry> entries, Pool<T>.Entry entry, boolean reusable)\n+        {\n+        }\n+    }\n+\n+    public interface Strategy<T> extends Cache<T>\n+    {\n+    }\n+\n+    public static class CacheStrategy<T> implements Strategy<T>\n+    {\n+        final Cache<T> cache;\n+        final Strategy<T> strategy;\n+\n+        public CacheStrategy(Cache<T> cache, Strategy<T> planB)\n+        {\n+            Objects.requireNonNull(cache);\n+            Objects.requireNonNull(planB);\n+            this.cache = cache;\n+            this.strategy = planB;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab7bd726b0e2412a5c1497348473dbac98d64a3"}, "originalPosition": 304}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA1ODY1OQ==", "bodyText": "This comment isn't accurate anymore as the iteration is also part of the strategy.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r482058659", "createdAt": "2020-09-02T13:14:43Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -197,32 +235,14 @@ public Entry acquireAt(int idx)\n     /**\n      * Acquire an entry from the pool.\n      * Only enabled entries will be returned from this method and their enable method must not be called.\n+     * The implementation first tries the pool strategy and then a brute force iteration over entries.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ab7bd726b0e2412a5c1497348473dbac98d64a3"}, "originalPosition": 170}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e250a4966d93eeb9117b93c6a9030ca7537a8443", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/e250a4966d93eeb9117b93c6a9030ca7537a8443", "committedDate": "2020-09-02T13:57:26Z", "message": "Feedback from review\n\n + Added reserve and release"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "505321687c6ad3e7bcc6e64e6d1d0b183167b419", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/505321687c6ad3e7bcc6e64e6d1d0b183167b419", "committedDate": "2020-09-07T17:30:07Z", "message": "Improved Pool Strategies:\n\n+ reverted to post notifications for removed, reserved and released.\n+ Added a few more strategies that need to be benchmarked, that use the list iterator.\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9abdeb3cd71f0405b9b95f8d288baccb2edbf8c", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/d9abdeb3cd71f0405b9b95f8d288baccb2edbf8c", "committedDate": "2020-09-08T10:39:07Z", "message": "Testing all the different strategies\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aa6bc92110ade8c4c96b26e8c074620447857ee", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/0aa6bc92110ade8c4c96b26e8c074620447857ee", "committedDate": "2020-09-08T10:51:13Z", "message": "More simplifications and made LRU work (ish)\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15ab22647b3e1bc8e791d9a4e6bd16a9d1ed61e8", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/15ab22647b3e1bc8e791d9a4e6bd16a9d1ed61e8", "committedDate": "2020-09-08T12:38:01Z", "message": "javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c18a77e8135047393ba289ca3179693b5af4ffad", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/c18a77e8135047393ba289ca3179693b5af4ffad", "committedDate": "2020-09-08T12:54:40Z", "message": "More javadoc\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8906678227cc6ab9bc6feadbd0e0bb3533f9781c", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/8906678227cc6ab9bc6feadbd0e0bb3533f9781c", "committedDate": "2020-09-09T10:01:25Z", "message": "JMH Test\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "feda65d15aa906a1c0689ea45b26e15a17906beb", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/feda65d15aa906a1c0689ea45b26e15a17906beb", "committedDate": "2020-09-10T06:10:02Z", "message": "one strategy\n\nSigned-off-by: gregw <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b0030d9897ce8d95e3167e35b72855cd57db0fd", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/0b0030d9897ce8d95e3167e35b72855cd57db0fd", "committedDate": "2020-09-10T07:18:36Z", "message": "test\n\nSigned-off-by: gregw <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf520b4d8b559c5ed8551573d780dced775bcc06", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/bf520b4d8b559c5ed8551573d780dced775bcc06", "committedDate": "2020-09-10T07:35:11Z", "message": "Split implementations:\n\n + pluggable strategies\n + hard coded\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e91578457bbc36b8db01006b3a821d5185ecac1c", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/e91578457bbc36b8db01006b3a821d5185ecac1c", "committedDate": "2020-09-10T09:40:03Z", "message": "More benchmarks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db00126abd11f5734e499bb8a7ab795bc769b879", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/db00126abd11f5734e499bb8a7ab795bc769b879", "committedDate": "2020-09-10T12:41:48Z", "message": "Built in strategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69fe8f669bcf89607c5da6f4a39964585e2dc0b9", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/69fe8f669bcf89607c5da6f4a39964585e2dc0b9", "committedDate": "2020-09-10T13:40:12Z", "message": "removed strategies version and simplified to single configurable solution.\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTA4ODIx", "url": "https://github.com/eclipse/jetty.project/pull/5218#pullrequestreview-486108821", "createdAt": "2020-09-10T16:25:47Z", "commit": {"oid": "69fe8f669bcf89607c5da6f4a39964585e2dc0b9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjoyNTo0N1rOHP8Glg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjo0MDowNlrOHP8qBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3NTQxNA==", "bodyText": "You should move this comment around since you also moved the ThreadLocal variable it speaks about.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r486475414", "createdAt": "2020-09-10T16:25:47Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -65,29 +75,74 @@\n      * When an entry can't be found in the cache, the global list is iterated\n      * normally so the cache has no visible effect besides performance.\n      */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fe8f669bcf89607c5da6f4a39964585e2dc0b9"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3Nzk2NQ==", "bodyText": "This method should go and any caller should be replaced with a Pool using the RR strategy.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r486477965", "createdAt": "2020-09-10T16:29:46Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -176,14 +231,15 @@ public Entry reserve(int allotment)\n      * @param idx the index of the entry to acquire.\n      * @return the specified entry or null if there is none at the specified index or if it is not available.\n      */\n+    @Deprecated\n     public Entry acquireAt(int idx)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fe8f669bcf89607c5da6f4a39964585e2dc0b9"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3ODY3OQ==", "bodyText": "I'd add a message to the exception, something like\nthrow new IllegalArgumentException(\"Invalid strategy : \" + strategy);", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r486478679", "createdAt": "2020-09-10T16:30:54Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -204,25 +260,51 @@ public Entry acquire()\n         if (closed)\n             return null;\n \n-        // first check the thread-local cache\n+        int size = entries.size();\n+        if (size == 0)\n+            return null;\n+\n         if (cache != null)\n         {\n-            List<Entry> cachedList = cache.get();\n-            while (!cachedList.isEmpty())\n+            Pool<T>.Entry entry = cache.get();\n+            if (entry != null && entry.tryAcquire())\n+                return entry;\n+        }\n+\n+        int index = startIndex(size);\n+\n+        for (int tries = size; tries-- > 0;)\n+        {\n+            try\n+            {\n+                Pool<T>.Entry entry = entries.get(index);\n+                if (entry != null && entry.tryAcquire())\n+                    return entry;\n+            }\n+            catch (IndexOutOfBoundsException e)\n             {\n-                Entry cachedEntry = cachedList.remove(cachedList.size() - 1);\n-                if (cachedEntry.tryAcquire())\n-                    return cachedEntry;\n+                LOGGER.ignore(e);\n             }\n+            index = (index + 1) % size;\n         }\n+        return null;\n+    }\n \n-        // then iterate the shared list\n-        for (Entry entry : sharedList)\n+    private int startIndex(int size)\n+    {\n+        switch (strategy)\n         {\n-            if (entry.tryAcquire())\n-                return entry;\n+            case LINEAR:\n+                return 0;\n+            case RANDOM:\n+                return ThreadLocalRandom.current().nextInt(size);\n+            case ROUND_ROBIN:\n+                return next.getAndUpdate(c -> Math.max(0, c + 1)) % size;\n+            case THREAD_ID:\n+                return (int)(Thread.currentThread().getId() % size);\n+            default:\n+                throw new IllegalArgumentException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fe8f669bcf89607c5da6f4a39964585e2dc0b9"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3OTY1Ng==", "bodyText": "This doesn't seem to be used.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r486479656", "createdAt": "2020-09-10T16:32:25Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -500,6 +575,13 @@ boolean tryRelease()\n             return !(overUsed && newMultiplexingCount == 0);\n         }\n \n+        public boolean isOverUsed()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fe8f669bcf89607c5da6f4a39964585e2dc0b9"}, "originalPosition": 376}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3OTgyOQ==", "bodyText": "This doesn't have to be public.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r486479829", "createdAt": "2020-09-10T16:32:40Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -452,7 +527,7 @@ public boolean remove()\n          * the multiplex count is maxMultiplex and the entry is not closed,\n          * false otherwise.\n          */\n-        boolean tryAcquire()\n+        public boolean tryAcquire()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fe8f669bcf89607c5da6f4a39964585e2dc0b9"}, "originalPosition": 368}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4MDAzOA==", "bodyText": "This index doesn't seem to be used.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r486480038", "createdAt": "2020-09-10T16:33:00Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -345,45 +417,48 @@ public void close()\n \n     public int size()\n     {\n-        return sharedList.size();\n+        return entries.size();\n     }\n \n     public Collection<Entry> values()\n     {\n-        return Collections.unmodifiableCollection(sharedList);\n+        return Collections.unmodifiableCollection(entries);\n     }\n \n     @Override\n     public void dump(Appendable out, String indent) throws IOException\n     {\n-        Dumpable.dumpObjects(out, indent, this);\n+        Dumpable.dumpObjects(out, indent, this,\n+            new DumpableCollection(\"entries\", entries));\n     }\n \n     @Override\n     public String toString()\n     {\n-        return String.format(\"%s@%x[size=%d closed=%s entries=%s]\",\n+        return String.format(\"%s@%x[size=%d closed=%s pending=%d]\",\n             getClass().getSimpleName(),\n             hashCode(),\n-            sharedList.size(),\n+            entries.size(),\n             closed,\n-            sharedList);\n+            pending.get());\n     }\n \n     public class Entry\n     {\n         // hi: positive=open/maxUsage counter; negative=closed; MIN_VALUE pending\n         // lo: multiplexing counter\n         private final AtomicBiInteger state;\n+        private final int index;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fe8f669bcf89607c5da6f4a39964585e2dc0b9"}, "originalPosition": 348}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4MTA1MA==", "bodyText": "I would rename these variables to the actual name of their value: usageCount and multiplexingCount.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r486481050", "createdAt": "2020-09-10T16:34:37Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -549,12 +631,17 @@ public int getUsageCount()\n         public String toString()\n         {\n             long encoded = state.get();\n-            return String.format(\"%s@%x{usage=%d/%d,multiplex=%d/%d,pooled=%s}\",\n+            int hi = AtomicBiInteger.getHi(encoded);\n+            int lo = AtomicBiInteger.getLo(encoded);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fe8f669bcf89607c5da6f4a39964585e2dc0b9"}, "originalPosition": 392}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4MzQ3MA==", "bodyText": "Since all the other names of this enum describe the starting index, I'd rename this one to something like INDEX_ZERO.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r486483470", "createdAt": "2020-09-10T16:38:37Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -65,29 +75,74 @@\n      * When an entry can't be found in the cache, the global list is iterated\n      * normally so the cache has no visible effect besides performance.\n      */\n-    private final ThreadLocal<List<Entry>> cache;\n+\n     private final Locker locker = new Locker();\n     private final int maxEntries;\n-    private final int cacheSize;\n     private final AtomicInteger pending = new AtomicInteger();\n+    private final Strategy strategy;\n+    private final ThreadLocal<Entry> cache;\n+    private final AtomicInteger next;\n     private volatile boolean closed;\n     private volatile int maxMultiplex = 1;\n     private volatile int maxUsageCount = -1;\n \n+    public enum Strategy\n+    {\n+        /**\n+         * The Linear strategy looks for an entry always starting from the first entry.\n+         * It will favour the early entries in the pool, but may contend on them more.\n+         */\n+        LINEAR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fe8f669bcf89607c5da6f4a39964585e2dc0b9"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzk4OQ==", "bodyText": "AtomicInteger nextIndex?", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r486483989", "createdAt": "2020-09-10T16:39:21Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -65,29 +75,74 @@\n      * When an entry can't be found in the cache, the global list is iterated\n      * normally so the cache has no visible effect besides performance.\n      */\n-    private final ThreadLocal<List<Entry>> cache;\n+\n     private final Locker locker = new Locker();\n     private final int maxEntries;\n-    private final int cacheSize;\n     private final AtomicInteger pending = new AtomicInteger();\n+    private final Strategy strategy;\n+    private final ThreadLocal<Entry> cache;\n+    private final AtomicInteger next;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fe8f669bcf89607c5da6f4a39964585e2dc0b9"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4NDQ4NQ==", "bodyText": "new ThreadLocal<>()?", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r486484485", "createdAt": "2020-09-10T16:40:06Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -65,29 +75,74 @@\n      * When an entry can't be found in the cache, the global list is iterated\n      * normally so the cache has no visible effect besides performance.\n      */\n-    private final ThreadLocal<List<Entry>> cache;\n+\n     private final Locker locker = new Locker();\n     private final int maxEntries;\n-    private final int cacheSize;\n     private final AtomicInteger pending = new AtomicInteger();\n+    private final Strategy strategy;\n+    private final ThreadLocal<Entry> cache;\n+    private final AtomicInteger next;\n     private volatile boolean closed;\n     private volatile int maxMultiplex = 1;\n     private volatile int maxUsageCount = -1;\n \n+    public enum Strategy\n+    {\n+        /**\n+         * The Linear strategy looks for an entry always starting from the first entry.\n+         * It will favour the early entries in the pool, but may contend on them more.\n+         */\n+        LINEAR,\n+\n+        /**\n+         * The Random strategy looks for an entry by iterating from a random starting\n+         * index.  No entries are favoured and contention is reduced.\n+         */\n+        RANDOM,\n+\n+        /**\n+         * The Thread ID strategy uses the {@link Thread#getId()} of the current thread\n+         * to select a starting point for an entry search.  Whilst not as performant as\n+         * using the {@link ThreadLocal} cache, it may be suitable when the pool is substantially smaller\n+         * than the number of available threads.\n+         * No entries are favoured and contention is reduced.\n+         */\n+        THREAD_ID,\n+\n+        /**\n+         * The Round Robin strategy looks for an entry by iterating from a starting point\n+         * that is incremented on every search. This gives similar results to the\n+         * random strategy but with more predictable behaviour.\n+         * No entries are favoured and contention is reduced.\n+         */\n+        ROUND_ROBIN,\n+    }\n+\n     /**\n-     * Construct a Pool with the specified thread-local cache size.\n+     * Construct a Pool with a specified lookup strategy and no\n+     * {@link ThreadLocal} cache.\n      *\n+     * @param strategy The strategy to used for looking up entries.\n      * @param maxEntries the maximum amount of entries that the pool will accept.\n-     * @param cacheSize the thread-local cache size. A value less than 1 means the cache is disabled.\n      */\n-    public Pool(int maxEntries, int cacheSize)\n+    public Pool(Strategy strategy, int maxEntries)\n+    {\n+        this(strategy, maxEntries, false);\n+    }\n+\n+    /**\n+     * Construct a Pool with the specified thread-local cache size and\n+     * an optional {@link ThreadLocal} cache.\n+     * @param strategy The strategy to used for looking up entries.\n+     * @param maxEntries the maximum amount of entries that the pool will accept.\n+     * @param cache True if a {@link ThreadLocal} cache should be used to try the most recently released entry.\n+     */\n+    public Pool(Strategy strategy, int maxEntries, boolean cache)\n     {\n         this.maxEntries = maxEntries;\n-        this.cacheSize = cacheSize;\n-        if (cacheSize > 0)\n-            this.cache = ThreadLocal.withInitial(() -> new ArrayList<Entry>(cacheSize));\n-        else\n-            this.cache = null;\n+        this.strategy = strategy;\n+        this.cache = cache ? new ThreadLocal() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fe8f669bcf89607c5da6f4a39964585e2dc0b9"}, "originalPosition": 138}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68bf2b508004b214483b598314490b0c000c2f8a", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/68bf2b508004b214483b598314490b0c000c2f8a", "committedDate": "2020-09-10T17:24:16Z", "message": "updates from review\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "225b096122977e3a0c8576559288aa1ba34839b1", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/225b096122977e3a0c8576559288aa1ba34839b1", "committedDate": "2020-09-10T17:26:14Z", "message": "better javadoc\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46d18190d1acff0fe13e727d7ce219cc4b19aaa8", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/46d18190d1acff0fe13e727d7ce219cc4b19aaa8", "committedDate": "2020-09-15T09:55:33Z", "message": "Merge branch 'jetty-9.4.x' into jetty-9.4.x-PoolStrategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ef761ed10d5d818a7c3e63a0d5769a00e6630af", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/1ef761ed10d5d818a7c3e63a0d5769a00e6630af", "committedDate": "2020-09-15T10:57:02Z", "message": "Updated ConnectionPool classes to use Pool strategies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MzQxMjM1", "url": "https://github.com/eclipse/jetty.project/pull/5218#pullrequestreview-489341235", "createdAt": "2020-09-16T07:21:18Z", "commit": {"oid": "1ef761ed10d5d818a7c3e63a0d5769a00e6630af"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzoyMToxOFrOHSje1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzozODoxOVrOHSkEXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNzc1MA==", "bodyText": "Revert this, it was a search/replace gone wrong.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r489217750", "createdAt": "2020-09-16T07:21:18Z", "author": {"login": "sbordet"}, "path": "VERSION.txt", "diffHunk": "@@ -1198,7 +1198,7 @@ jetty-9.4.4.v20170414 - 14 April 2017\n    encoding\n  + 1436 NullPointerException when calling changeSessionId\n  + 1439 Allow UNC paths to function as Resource bases\n- + 1440 Improve lock contention for low resources scheduling strategy\n+ + 1440 Improve lock contention for low resources scheduling strategyType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef761ed10d5d818a7c3e63a0d5769a00e6630af"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMTE0NQ==", "bodyText": "Revert, bad search/replace.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r489221145", "createdAt": "2020-09-16T07:27:11Z", "author": {"login": "sbordet"}, "path": "jetty-documentation/src/main/asciidoc/administration/logging/jetty-server-dump.adoc", "diffHunk": "@@ -105,10 +105,10 @@ Server@59906517{STARTED}[9.4.32-SNAPSHOT] - STARTED\n |  |  |  +> app//org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)\n |  |  |  +> app//org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)\n |  |  |  +> app//org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)\n-|  |  |  +> app//org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)\n-|  |  |  +> app//org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)\n-|  |  |  +> app//org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)\n-|  |  |  +> app//org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)\n+|  |  |  +> app//org.eclipse.jetty.util.thread.strategyType.EatWhatYouKill.runTask(EatWhatYouKill.java:336)\n+|  |  |  +> app//org.eclipse.jetty.util.thread.strategyType.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)\n+|  |  |  +> app//org.eclipse.jetty.util.thread.strategyType.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)\n+|  |  |  +> app//org.eclipse.jetty.util.thread.strategyType.EatWhatYouKill.run(EatWhatYouKill.java:129)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef761ed10d5d818a7c3e63a0d5769a00e6630af"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMTI0MQ==", "bodyText": "Revert, bad search/replace.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r489221241", "createdAt": "2020-09-16T07:27:22Z", "author": {"login": "sbordet"}, "path": "jetty-documentation/src/main/asciidoc/configuring/jsp/configuring-jsp.adoc", "diffHunk": "@@ -163,7 +163,7 @@ Set all parameters on the `org.apache.jasper.servlet.JspServlet` instance define\n \n ____\n [NOTE]\n-Be careful: for all of these parameters, if the value you set doesn't take effect, try using all lower case instead of camel case, or capitalizing only some of the words in the name, as JSP is inconsistent in its parameter naming strategy.\n+Be careful: for all of these parameters, if the value you set doesn't take effect, try using all lower case instead of camel case, or capitalizing only some of the words in the name, as JSP is inconsistent in its parameter naming strategyType.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef761ed10d5d818a7c3e63a0d5769a00e6630af"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMjE3Nw==", "bodyText": "Overriding listIterator(int) is not necessary anymore, since we never use it, and we don't leak the entries field.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r489222177", "createdAt": "2020-09-16T07:29:02Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -56,38 +51,98 @@\n {\n     private static final Logger LOGGER = Log.getLogger(Pool.class);\n \n-    private final List<Entry> sharedList = new CopyOnWriteArrayList<>();\n+    private final List<Entry> entries = new CopyOnWriteArrayList<Entry>()\n+    {\n+        @Override\n+        public ListIterator<Entry> listIterator(int index)\n+        {\n+            try\n+            {\n+                return super.listIterator(index);\n+            }\n+            catch (IndexOutOfBoundsException e)\n+            {\n+                return listIterator();\n+            }\n+        }\n+    };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef761ed10d5d818a7c3e63a0d5769a00e6630af"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMzE0OA==", "bodyText": "There is no \"normal\" strategy, I would rephrase: \"is iterated with the configured StrategyType\".", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r489223148", "createdAt": "2020-09-16T07:30:37Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -56,38 +51,98 @@\n {\n     private static final Logger LOGGER = Log.getLogger(Pool.class);\n \n-    private final List<Entry> sharedList = new CopyOnWriteArrayList<>();\n+    private final List<Entry> entries = new CopyOnWriteArrayList<Entry>()\n+    {\n+        @Override\n+        public ListIterator<Entry> listIterator(int index)\n+        {\n+            try\n+            {\n+                return super.listIterator(index);\n+            }\n+            catch (IndexOutOfBoundsException e)\n+            {\n+                return listIterator();\n+            }\n+        }\n+    };\n+\n+    private final int maxEntries;\n+    private final AtomicInteger pending = new AtomicInteger();\n+    private final StrategyType strategyType;\n+\n     /*\n      * The cache is used to avoid hammering on the first index of the entry list.\n      * Caches can become poisoned (i.e.: containing entries that are in use) when\n      * the release isn't done by the acquiring thread or when the entry pool is\n      * undersized compared to the load applied on it.\n      * When an entry can't be found in the cache, the global list is iterated\n-     * normally so the cache has no visible effect besides performance.\n+     * with the normal strategy so the cache has no visible effect besides performance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef761ed10d5d818a7c3e63a0d5769a00e6630af"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMzMzMw==", "bodyText": "Javadocs.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r489223333", "createdAt": "2020-09-16T07:30:59Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -56,38 +51,98 @@\n {\n     private static final Logger LOGGER = Log.getLogger(Pool.class);\n \n-    private final List<Entry> sharedList = new CopyOnWriteArrayList<>();\n+    private final List<Entry> entries = new CopyOnWriteArrayList<Entry>()\n+    {\n+        @Override\n+        public ListIterator<Entry> listIterator(int index)\n+        {\n+            try\n+            {\n+                return super.listIterator(index);\n+            }\n+            catch (IndexOutOfBoundsException e)\n+            {\n+                return listIterator();\n+            }\n+        }\n+    };\n+\n+    private final int maxEntries;\n+    private final AtomicInteger pending = new AtomicInteger();\n+    private final StrategyType strategyType;\n+\n     /*\n      * The cache is used to avoid hammering on the first index of the entry list.\n      * Caches can become poisoned (i.e.: containing entries that are in use) when\n      * the release isn't done by the acquiring thread or when the entry pool is\n      * undersized compared to the load applied on it.\n      * When an entry can't be found in the cache, the global list is iterated\n-     * normally so the cache has no visible effect besides performance.\n+     * with the normal strategy so the cache has no visible effect besides performance.\n      */\n-    private final ThreadLocal<List<Entry>> cache;\n     private final Locker locker = new Locker();\n-    private final int maxEntries;\n-    private final int cacheSize;\n-    private final AtomicInteger pending = new AtomicInteger();\n+    private final ThreadLocal<Entry> cache;\n+    private final AtomicInteger nextIndex;\n     private volatile boolean closed;\n     private volatile int maxMultiplex = 1;\n     private volatile int maxUsageCount = -1;\n \n+    public enum StrategyType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef761ed10d5d818a7c3e63a0d5769a00e6630af"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMzkwNg==", "bodyText": "Add @deprecated javadoc too.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r489223906", "createdAt": "2020-09-16T07:31:56Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -176,14 +231,15 @@ public Entry reserve(int allotment)\n      * @param idx the index of the entry to acquire.\n      * @return the specified entry or null if there is none at the specified index or if it is not available.\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef761ed10d5d818a7c3e63a0d5769a00e6630af"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyNDYwMg==", "bodyText": "+1 for keeping the method for JMX and such.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r489224602", "createdAt": "2020-09-16T07:33:14Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -500,6 +575,13 @@ boolean tryRelease()\n             return !(overUsed && newMultiplexingCount == 0);\n         }\n \n+        public boolean isOverUsed()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3OTY1Ng=="}, "originalCommit": {"oid": "69fe8f669bcf89607c5da6f4a39964585e2dc0b9"}, "originalPosition": 376}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyNTM3Mw==", "bodyText": "new Pool<>(...) is enough, remove type parameter.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r489225373", "createdAt": "2020-09-16T07:34:39Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/test/java/org/eclipse/jetty/util/PoolTest.java", "diffHunk": "@@ -40,20 +50,27 @@\n \n public class PoolTest\n {\n-    public static Stream<Object[]> cacheSize()\n+\n+    interface Factory\n+    {\n+        Pool<String> getPool(int maxSize);\n+    }\n+\n+    public static Stream<Object[]> strategy()\n     {\n         List<Object[]> data = new ArrayList<>();\n-        data.add(new Object[]{0});\n-        data.add(new Object[]{1});\n-        data.add(new Object[]{2});\n+        data.add(new Object[]{(Factory)s -> new Pool<String>(FIRST, s)});\n+        data.add(new Object[]{(Factory)s -> new Pool<String>(RANDOM, s)});\n+        data.add(new Object[]{(Factory)s -> new Pool<String>(FIRST, s, true)});\n+        data.add(new Object[]{(Factory)s -> new Pool<String>(ROUND_ROBIN, s)});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef761ed10d5d818a7c3e63a0d5769a00e6630af"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyNjQxNQ==", "bodyText": "This test contains an unused e2 variable that I would instead add to the asserts, for example, to confirm that it is in use even after removing e1, or that e2 == e1, etc.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r489226415", "createdAt": "2020-09-16T07:36:34Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/test/java/org/eclipse/jetty/util/PoolTest.java", "diffHunk": "@@ -331,34 +347,44 @@ public void testMaxUsageCount(int cacheSize)\n     }\n \n     @ParameterizedTest\n-    @MethodSource(value = \"cacheSize\")\n-    public void testMaxMultiplex(int cacheSize)\n+    @MethodSource(value = \"strategy\")\n+    public void testMaxMultiplex(Factory factory)\n     {\n-        Pool<String> pool = new Pool<>(2, cacheSize);\n+        Pool<String> pool = factory.getPool(2);\n         pool.setMaxMultiplex(3);\n-        pool.reserve(-1).enable(\"aaa\", false);\n-        pool.reserve(-1).enable(\"bbb\", false);\n \n-        Pool<String>.Entry e1 = pool.acquire();\n-        Pool<String>.Entry e2 = pool.acquire();\n-        Pool<String>.Entry e3 = pool.acquire();\n-        Pool<String>.Entry e4 = pool.acquire();\n-        assertThat(e1.getPooled(), equalTo(\"aaa\"));\n-        assertThat(e1, sameInstance(e2));\n-        assertThat(e1, sameInstance(e3));\n-        assertThat(e4.getPooled(), equalTo(\"bbb\"));\n-        assertThat(pool.release(e1), is(true));\n-        Pool<String>.Entry e5 = pool.acquire();\n-        assertThat(e2, sameInstance(e5));\n-        Pool<String>.Entry e6 = pool.acquire();\n-        assertThat(e4, sameInstance(e6));\n+        Map<String, AtomicInteger> counts = new HashMap<>();\n+        AtomicInteger a = new AtomicInteger();\n+        AtomicInteger b = new AtomicInteger();\n+        counts.put(\"a\", a);\n+        counts.put(\"b\", b);\n+        pool.reserve(-1).enable(\"a\", false);\n+        pool.reserve(-1).enable(\"b\", false);\n+\n+        counts.get(pool.acquire().getPooled()).incrementAndGet();\n+        counts.get(pool.acquire().getPooled()).incrementAndGet();\n+        counts.get(pool.acquire().getPooled()).incrementAndGet();\n+        counts.get(pool.acquire().getPooled()).incrementAndGet();\n+\n+        assertThat(a.get(), greaterThan(0));\n+        assertThat(a.get(), lessThanOrEqualTo(3));\n+        assertThat(b.get(), greaterThan(0));\n+        assertThat(b.get(), lessThanOrEqualTo(3));\n+\n+        counts.get(pool.acquire().getPooled()).incrementAndGet();\n+        counts.get(pool.acquire().getPooled()).incrementAndGet();\n+\n+        assertThat(a.get(), is(3));\n+        assertThat(b.get(), is(3));\n+\n+        assertNull(pool.acquire());\n     }\n \n     @ParameterizedTest\n-    @MethodSource(value = \"cacheSize\")\n-    public void testRemoveMultiplexed(int cacheSize)\n+    @MethodSource(value = \"strategy\")\n+    public void testRemoveMultiplexed(Factory factory)\n     {\n-        Pool<String> pool = new Pool<>(1, cacheSize);\n+        Pool<String> pool = factory.getPool(1);\n         pool.setMaxMultiplex(2);\n         pool.reserve(-1).enable(\"aaa\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef761ed10d5d818a7c3e63a0d5769a00e6630af"}, "originalPosition": 310}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyNzM1Ng==", "bodyText": "This test contains an unused variable e2 that I would use in asserts, at least to verify that e2 == e1.", "url": "https://github.com/eclipse/jetty.project/pull/5218#discussion_r489227356", "createdAt": "2020-09-16T07:38:19Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/test/java/org/eclipse/jetty/util/PoolTest.java", "diffHunk": "@@ -506,10 +532,10 @@ public void testMultiplexMaxUsageReachedAcquireThenReleaseThenRemove(int cacheSi\n     }\n \n     @ParameterizedTest\n-    @MethodSource(value = \"cacheSize\")\n-    public void testUsageCountAfterReachingMaxMultiplexLimit(int cacheSize)\n+    @MethodSource(value = \"strategy\")\n+    public void testUsageCountAfterReachingMaxMultiplexLimit(Factory factory)\n     {\n-        Pool<String> pool = new Pool<>(1, cacheSize);\n+        Pool<String> pool = factory.getPool(1);\n         pool.setMaxMultiplex(2);\n         pool.setMaxUsageCount(10);\n         pool.reserve(-1).enable(\"aaa\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef761ed10d5d818a7c3e63a0d5769a00e6630af"}, "originalPosition": 426}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9773d5ae3ab72c189fae474bd138951b5b5e73a", "author": {"user": {"login": "sbordet", "name": "Simone Bordet"}}, "url": "https://github.com/eclipse/jetty.project/commit/f9773d5ae3ab72c189fae474bd138951b5b5e73a", "committedDate": "2020-09-16T07:40:14Z", "message": "Small javadocs fixes.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4504fee50b8ebd30becb0e402a7d831bded3e1ea", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/4504fee50b8ebd30becb0e402a7d831bded3e1ea", "committedDate": "2020-09-16T10:00:27Z", "message": "Merge branch 'jetty-9.4.x' into jetty-9.4.x-PoolStrategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c90442d5b368d3d6274acfd81893d37d6755951", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/6c90442d5b368d3d6274acfd81893d37d6755951", "committedDate": "2020-09-16T10:13:12Z", "message": "Updates from review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NzYzNTQ0", "url": "https://github.com/eclipse/jetty.project/pull/5218#pullrequestreview-489763544", "createdAt": "2020-09-16T15:46:58Z", "commit": {"oid": "6c90442d5b368d3d6274acfd81893d37d6755951"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21f93c6df1faf2612fa510fa8df28de25877ac8e", "author": {"user": {"login": "gregw", "name": "Greg Wilkins"}}, "url": "https://github.com/eclipse/jetty.project/commit/21f93c6df1faf2612fa510fa8df28de25877ac8e", "committedDate": "2020-09-16T16:24:44Z", "message": "javadoc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 320, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}