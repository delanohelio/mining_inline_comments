{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyODcyOTc0", "number": 5117, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo1NjowOVrOEVZrQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzowMzowNFrOEW4a2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODc2MjI3OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo1NjowOVrOG8IbvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo1NjowOVrOG8IbvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwNTkxNw==", "bodyText": "Nit: \"AtomicInt\" -> \"AtomicInteger\" or it would seem like we have created our own class AtomicInt.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465705917", "createdAt": "2020-08-05T12:56:09Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -128,35 +130,42 @@ public final void setMaxUsageCount(int maxUsageCount)\n     }\n \n     /**\n-     * Create a new disabled slot into the pool. The returned entry\n-     * won't be acquirable as long as {@link Entry#enable(Object)}\n-     * has not been called.\n+     * Create a new disabled slot into the pool.\n+     * The returned Reservation holds an entry that will not\n+     * be acquirable until {@link Reservation#enable(Object)} is called.\n+     * Alternately {@link Reservation#acquire(Object)} can be called to\n+     * atomically enable and acquire the entry.\n+     * If a value cannot be created for the slot, then {@link Reservation#remove()}\n+     * must be called to free the slot.\n      *\n      * @param maxReservations the max desired number of reserved entries,\n      * or a negative number to always trigger the reservation of a new entry.\n      * @return a disabled entry that is contained in the pool,\n      * or null if the pool is closed or if the pool already contains\n      * {@link #getMaxEntries()} entries.\n      */\n-    public Entry reserve(int maxReservations)\n+    public Reservation reserve(int maxReservations)\n     {\n-        if (maxReservations >= 0 && getPendingConnectionCount() >= maxReservations)\n-            return null;\n-\n-        lock.lock();\n-        try\n-        {\n-            if (!closed && sharedList.size() < maxEntries)\n-            {\n-                Entry entry = new Entry();\n-                sharedList.add(entry);\n-                return entry;\n-            }\n-            return null;\n-        }\n-        finally\n+        try (Locker.Lock l = locker.lock())\n         {\n-            lock.unlock();\n+            if (closed)\n+                return null;\n+\n+            int space = maxEntries - sharedList.size();\n+            if (space <= 0)\n+                return null;\n+\n+            // The pending count is an AtomicInt that is only ever incremented here with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODgzMDc4OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzoxMzo1N1rOG8JGFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODowMDowN1rOG9QaDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxNjc1OA==", "bodyText": "This method is never used, so remove it.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465716758", "createdAt": "2020-08-05T13:13:57Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -332,29 +372,105 @@ public String toString()\n         return getClass().getSimpleName() + \" size=\" + sharedList.size() + \" closed=\" + closed + \" entries=\" + sharedList;\n     }\n \n+    /**\n+     * A Reservation of a slot in the Pool\n+     */\n+    public class Reservation\n+    {\n+        private final Entry entry = new Entry();\n+\n+        /**\n+         * @return The reserved {@link Entry}, which will be closed until enabled.\n+         */\n+        public Pool<T>.Entry getEntry()\n+        {\n+            return entry;\n+        }\n+\n+        /** Enable the reserved {@link Entry}.\n+         * Once enabled, the entry is immediately available to be acquired, potentially by\n+         * another thread.  If the caller wishes to acquire the associated entry, they should\n+         * use {@link #acquire(Object)} to atomically enable and acquire.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public void enable(T pooled)\n+        {\n+            enable(pooled, false);\n+        }\n+\n+        /** Enable and acquire the reserved {@link Entry}.\n+         * The associated entry is atomically enabled and acquired, so that no other thread can acquire it and\n+         * the {@link #getEntry()} value may be used by the caller.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public Pool<T>.Entry acquire(T pooled)\n+        {\n+            enable(pooled, true);\n+            return entry;\n+        }\n+\n+        private void enable(T pooled, boolean acquire)\n+        {\n+            Objects.requireNonNull(pooled);\n+            if (entry.state.getHi() != Integer.MIN_VALUE)\n+                throw new IllegalStateException(\"Open entries cannot be enabled : \" + this);\n+            entry.pooled = pooled;\n+            int usage = acquire ? 1 : 0;\n+            if (!entry.state.compareAndSet(Integer.MIN_VALUE, usage, 0, usage))\n+            {\n+                entry.pooled = null;\n+                throw new IllegalStateException(\"Entry cannot be enabled : \" + this);\n+            }\n+            pending.decrementAndGet();\n+        }\n+\n+        /**\n+         * Remove the reservation without enabling.\n+         */\n+        public void remove()\n+        {\n+            Pool.this.remove(entry);\n+        }\n+\n+        @Override\n+        public String toString()\n+        {\n+            return String.format(\"%s@%x{%s}\",\n+                getClass().getName(),\n+                hashCode(),\n+                entry);\n+        }\n+    }\n+\n     public class Entry\n     {\n-        // hi: positive=open/maxUsage counter,negative=closed lo: multiplexing counter\n+        // hi: positive=open/maxUsage counter; negative=closed; MIN_VALUE pending\n+        // lo: multiplexing counter\n         private final AtomicBiInteger state;\n-        private volatile T pooled;\n \n-        public Entry()\n+        // The pooled item.  This is not volatile as it is set once and then never changed.\n+        // Other threads accessing must check the state field above first, so a good before/after\n+        // relationship exists to make a memory barrier.\n+        private T pooled;\n+\n+        Entry()\n         {\n-            this.state = new AtomicBiInteger(-1, 0);\n+            this.state = new AtomicBiInteger(Integer.MIN_VALUE, 0);\n         }\n \n         public T getPooled()\n         {\n             return pooled;\n         }\n \n-        public void enable(T pooled)\n+        /**\n+         * Release the entry.\n+         * This is equivalent to calling {@link Pool#release(Pool.Entry)} passing this entry.\n+         * @return true if released.\n+         */\n+        public boolean release()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwMzY3MQ==", "bodyText": "It will be once I do my XmlConfiguration PR.\nIt makes sense that an item in the pool that has a reference to it's own entry can release itself without needing to keep a reference to the pool.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465803671", "createdAt": "2020-08-05T15:16:32Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -332,29 +372,105 @@ public String toString()\n         return getClass().getSimpleName() + \" size=\" + sharedList.size() + \" closed=\" + closed + \" entries=\" + sharedList;\n     }\n \n+    /**\n+     * A Reservation of a slot in the Pool\n+     */\n+    public class Reservation\n+    {\n+        private final Entry entry = new Entry();\n+\n+        /**\n+         * @return The reserved {@link Entry}, which will be closed until enabled.\n+         */\n+        public Pool<T>.Entry getEntry()\n+        {\n+            return entry;\n+        }\n+\n+        /** Enable the reserved {@link Entry}.\n+         * Once enabled, the entry is immediately available to be acquired, potentially by\n+         * another thread.  If the caller wishes to acquire the associated entry, they should\n+         * use {@link #acquire(Object)} to atomically enable and acquire.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public void enable(T pooled)\n+        {\n+            enable(pooled, false);\n+        }\n+\n+        /** Enable and acquire the reserved {@link Entry}.\n+         * The associated entry is atomically enabled and acquired, so that no other thread can acquire it and\n+         * the {@link #getEntry()} value may be used by the caller.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public Pool<T>.Entry acquire(T pooled)\n+        {\n+            enable(pooled, true);\n+            return entry;\n+        }\n+\n+        private void enable(T pooled, boolean acquire)\n+        {\n+            Objects.requireNonNull(pooled);\n+            if (entry.state.getHi() != Integer.MIN_VALUE)\n+                throw new IllegalStateException(\"Open entries cannot be enabled : \" + this);\n+            entry.pooled = pooled;\n+            int usage = acquire ? 1 : 0;\n+            if (!entry.state.compareAndSet(Integer.MIN_VALUE, usage, 0, usage))\n+            {\n+                entry.pooled = null;\n+                throw new IllegalStateException(\"Entry cannot be enabled : \" + this);\n+            }\n+            pending.decrementAndGet();\n+        }\n+\n+        /**\n+         * Remove the reservation without enabling.\n+         */\n+        public void remove()\n+        {\n+            Pool.this.remove(entry);\n+        }\n+\n+        @Override\n+        public String toString()\n+        {\n+            return String.format(\"%s@%x{%s}\",\n+                getClass().getName(),\n+                hashCode(),\n+                entry);\n+        }\n+    }\n+\n     public class Entry\n     {\n-        // hi: positive=open/maxUsage counter,negative=closed lo: multiplexing counter\n+        // hi: positive=open/maxUsage counter; negative=closed; MIN_VALUE pending\n+        // lo: multiplexing counter\n         private final AtomicBiInteger state;\n-        private volatile T pooled;\n \n-        public Entry()\n+        // The pooled item.  This is not volatile as it is set once and then never changed.\n+        // Other threads accessing must check the state field above first, so a good before/after\n+        // relationship exists to make a memory barrier.\n+        private T pooled;\n+\n+        Entry()\n         {\n-            this.state = new AtomicBiInteger(-1, 0);\n+            this.state = new AtomicBiInteger(Integer.MIN_VALUE, 0);\n         }\n \n         public T getPooled()\n         {\n             return pooled;\n         }\n \n-        public void enable(T pooled)\n+        /**\n+         * Release the entry.\n+         * This is equivalent to calling {@link Pool#release(Pool.Entry)} passing this entry.\n+         * @return true if released.\n+         */\n+        public boolean release()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxNjc1OA=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQyMTkwMQ==", "bodyText": "I'm not sure. Entry is not really an API class now that you have introduced Reservation.\nIt's an opaque mechanism that needs to be exposed, but I think it's more correct to force people to use Pool and Reservationand Attachable rather than Entry.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r466421901", "createdAt": "2020-08-06T13:43:34Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -332,29 +372,105 @@ public String toString()\n         return getClass().getSimpleName() + \" size=\" + sharedList.size() + \" closed=\" + closed + \" entries=\" + sharedList;\n     }\n \n+    /**\n+     * A Reservation of a slot in the Pool\n+     */\n+    public class Reservation\n+    {\n+        private final Entry entry = new Entry();\n+\n+        /**\n+         * @return The reserved {@link Entry}, which will be closed until enabled.\n+         */\n+        public Pool<T>.Entry getEntry()\n+        {\n+            return entry;\n+        }\n+\n+        /** Enable the reserved {@link Entry}.\n+         * Once enabled, the entry is immediately available to be acquired, potentially by\n+         * another thread.  If the caller wishes to acquire the associated entry, they should\n+         * use {@link #acquire(Object)} to atomically enable and acquire.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public void enable(T pooled)\n+        {\n+            enable(pooled, false);\n+        }\n+\n+        /** Enable and acquire the reserved {@link Entry}.\n+         * The associated entry is atomically enabled and acquired, so that no other thread can acquire it and\n+         * the {@link #getEntry()} value may be used by the caller.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public Pool<T>.Entry acquire(T pooled)\n+        {\n+            enable(pooled, true);\n+            return entry;\n+        }\n+\n+        private void enable(T pooled, boolean acquire)\n+        {\n+            Objects.requireNonNull(pooled);\n+            if (entry.state.getHi() != Integer.MIN_VALUE)\n+                throw new IllegalStateException(\"Open entries cannot be enabled : \" + this);\n+            entry.pooled = pooled;\n+            int usage = acquire ? 1 : 0;\n+            if (!entry.state.compareAndSet(Integer.MIN_VALUE, usage, 0, usage))\n+            {\n+                entry.pooled = null;\n+                throw new IllegalStateException(\"Entry cannot be enabled : \" + this);\n+            }\n+            pending.decrementAndGet();\n+        }\n+\n+        /**\n+         * Remove the reservation without enabling.\n+         */\n+        public void remove()\n+        {\n+            Pool.this.remove(entry);\n+        }\n+\n+        @Override\n+        public String toString()\n+        {\n+            return String.format(\"%s@%x{%s}\",\n+                getClass().getName(),\n+                hashCode(),\n+                entry);\n+        }\n+    }\n+\n     public class Entry\n     {\n-        // hi: positive=open/maxUsage counter,negative=closed lo: multiplexing counter\n+        // hi: positive=open/maxUsage counter; negative=closed; MIN_VALUE pending\n+        // lo: multiplexing counter\n         private final AtomicBiInteger state;\n-        private volatile T pooled;\n \n-        public Entry()\n+        // The pooled item.  This is not volatile as it is set once and then never changed.\n+        // Other threads accessing must check the state field above first, so a good before/after\n+        // relationship exists to make a memory barrier.\n+        private T pooled;\n+\n+        Entry()\n         {\n-            this.state = new AtomicBiInteger(-1, 0);\n+            this.state = new AtomicBiInteger(Integer.MIN_VALUE, 0);\n         }\n \n         public T getPooled()\n         {\n             return pooled;\n         }\n \n-        public void enable(T pooled)\n+        /**\n+         * Release the entry.\n+         * This is equivalent to calling {@link Pool#release(Pool.Entry)} passing this entry.\n+         * @return true if released.\n+         */\n+        public boolean release()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxNjc1OA=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg4NTEzNQ==", "bodyText": "Entry most definitely is an API class and I have code that pools objects that remember their own Entry.  It is pointless to force them to also remember the pool they came from just so they can call release.... as the Entry already knows its own pool.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r466885135", "createdAt": "2020-08-07T08:00:07Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -332,29 +372,105 @@ public String toString()\n         return getClass().getSimpleName() + \" size=\" + sharedList.size() + \" closed=\" + closed + \" entries=\" + sharedList;\n     }\n \n+    /**\n+     * A Reservation of a slot in the Pool\n+     */\n+    public class Reservation\n+    {\n+        private final Entry entry = new Entry();\n+\n+        /**\n+         * @return The reserved {@link Entry}, which will be closed until enabled.\n+         */\n+        public Pool<T>.Entry getEntry()\n+        {\n+            return entry;\n+        }\n+\n+        /** Enable the reserved {@link Entry}.\n+         * Once enabled, the entry is immediately available to be acquired, potentially by\n+         * another thread.  If the caller wishes to acquire the associated entry, they should\n+         * use {@link #acquire(Object)} to atomically enable and acquire.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public void enable(T pooled)\n+        {\n+            enable(pooled, false);\n+        }\n+\n+        /** Enable and acquire the reserved {@link Entry}.\n+         * The associated entry is atomically enabled and acquired, so that no other thread can acquire it and\n+         * the {@link #getEntry()} value may be used by the caller.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public Pool<T>.Entry acquire(T pooled)\n+        {\n+            enable(pooled, true);\n+            return entry;\n+        }\n+\n+        private void enable(T pooled, boolean acquire)\n+        {\n+            Objects.requireNonNull(pooled);\n+            if (entry.state.getHi() != Integer.MIN_VALUE)\n+                throw new IllegalStateException(\"Open entries cannot be enabled : \" + this);\n+            entry.pooled = pooled;\n+            int usage = acquire ? 1 : 0;\n+            if (!entry.state.compareAndSet(Integer.MIN_VALUE, usage, 0, usage))\n+            {\n+                entry.pooled = null;\n+                throw new IllegalStateException(\"Entry cannot be enabled : \" + this);\n+            }\n+            pending.decrementAndGet();\n+        }\n+\n+        /**\n+         * Remove the reservation without enabling.\n+         */\n+        public void remove()\n+        {\n+            Pool.this.remove(entry);\n+        }\n+\n+        @Override\n+        public String toString()\n+        {\n+            return String.format(\"%s@%x{%s}\",\n+                getClass().getName(),\n+                hashCode(),\n+                entry);\n+        }\n+    }\n+\n     public class Entry\n     {\n-        // hi: positive=open/maxUsage counter,negative=closed lo: multiplexing counter\n+        // hi: positive=open/maxUsage counter; negative=closed; MIN_VALUE pending\n+        // lo: multiplexing counter\n         private final AtomicBiInteger state;\n-        private volatile T pooled;\n \n-        public Entry()\n+        // The pooled item.  This is not volatile as it is set once and then never changed.\n+        // Other threads accessing must check the state field above first, so a good before/after\n+        // relationship exists to make a memory barrier.\n+        private T pooled;\n+\n+        Entry()\n         {\n-            this.state = new AtomicBiInteger(-1, 0);\n+            this.state = new AtomicBiInteger(Integer.MIN_VALUE, 0);\n         }\n \n         public T getPooled()\n         {\n             return pooled;\n         }\n \n-        public void enable(T pooled)\n+        /**\n+         * Release the entry.\n+         * This is equivalent to calling {@link Pool#release(Pool.Entry)} passing this entry.\n+         * @return true if released.\n+         */\n+        public boolean release()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxNjc1OA=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 267}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODg2MTIzOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzoyMToyOVrOG8JY2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzo1ODozNFrOG9QW5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyMTU2MA==", "bodyText": "A Reservation may be concurrently removed while it's being enabled.\nThis code should be converted to the classic while (true) loop and retry in case of failures.\nFurthermore, it needs to account for the closed state (hi==-1) and not enable if it's already closed.\nWhich means enable() should return a boolean that tells whether the enabling could be done.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465721560", "createdAt": "2020-08-05T13:21:29Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -332,29 +372,105 @@ public String toString()\n         return getClass().getSimpleName() + \" size=\" + sharedList.size() + \" closed=\" + closed + \" entries=\" + sharedList;\n     }\n \n+    /**\n+     * A Reservation of a slot in the Pool\n+     */\n+    public class Reservation\n+    {\n+        private final Entry entry = new Entry();\n+\n+        /**\n+         * @return The reserved {@link Entry}, which will be closed until enabled.\n+         */\n+        public Pool<T>.Entry getEntry()\n+        {\n+            return entry;\n+        }\n+\n+        /** Enable the reserved {@link Entry}.\n+         * Once enabled, the entry is immediately available to be acquired, potentially by\n+         * another thread.  If the caller wishes to acquire the associated entry, they should\n+         * use {@link #acquire(Object)} to atomically enable and acquire.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public void enable(T pooled)\n+        {\n+            enable(pooled, false);\n+        }\n+\n+        /** Enable and acquire the reserved {@link Entry}.\n+         * The associated entry is atomically enabled and acquired, so that no other thread can acquire it and\n+         * the {@link #getEntry()} value may be used by the caller.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public Pool<T>.Entry acquire(T pooled)\n+        {\n+            enable(pooled, true);\n+            return entry;\n+        }\n+\n+        private void enable(T pooled, boolean acquire)\n+        {\n+            Objects.requireNonNull(pooled);\n+            if (entry.state.getHi() != Integer.MIN_VALUE)\n+                throw new IllegalStateException(\"Open entries cannot be enabled : \" + this);\n+            entry.pooled = pooled;\n+            int usage = acquire ? 1 : 0;\n+            if (!entry.state.compareAndSet(Integer.MIN_VALUE, usage, 0, usage))\n+            {\n+                entry.pooled = null;\n+                throw new IllegalStateException(\"Entry cannot be enabled : \" + this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwMjE2Mg==", "bodyText": "Unfortunately this code is just not threadsafe and I can't see how we can make it so without adding a lock.\nThe problem is that if we allow multiple threads to call enable on the reservation, both may pass the MIN_VALUE check and then both will try to set the entry.pooled value.  Only one will win and it may not be the one that wins the CaS race.\nSo currently enable will ISE atomically if anybody else messes with state (of the reserved entry or by closing the pool).  The state of the pooled field is not so well defined for multiple threads.... but I think any app that is racing itself to call enable is just wrong anyway.\nI think ISE is OK for -1 state.... but are you saying that if it is -1, we should noop?       If so, I can do that after a failed CaS, but not in a loop, which will never work because of the pooled field problem.\nI've gone back on forth on this method a lot... I don't like it, but I like it more than a big lock.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465802162", "createdAt": "2020-08-05T15:14:29Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -332,29 +372,105 @@ public String toString()\n         return getClass().getSimpleName() + \" size=\" + sharedList.size() + \" closed=\" + closed + \" entries=\" + sharedList;\n     }\n \n+    /**\n+     * A Reservation of a slot in the Pool\n+     */\n+    public class Reservation\n+    {\n+        private final Entry entry = new Entry();\n+\n+        /**\n+         * @return The reserved {@link Entry}, which will be closed until enabled.\n+         */\n+        public Pool<T>.Entry getEntry()\n+        {\n+            return entry;\n+        }\n+\n+        /** Enable the reserved {@link Entry}.\n+         * Once enabled, the entry is immediately available to be acquired, potentially by\n+         * another thread.  If the caller wishes to acquire the associated entry, they should\n+         * use {@link #acquire(Object)} to atomically enable and acquire.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public void enable(T pooled)\n+        {\n+            enable(pooled, false);\n+        }\n+\n+        /** Enable and acquire the reserved {@link Entry}.\n+         * The associated entry is atomically enabled and acquired, so that no other thread can acquire it and\n+         * the {@link #getEntry()} value may be used by the caller.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public Pool<T>.Entry acquire(T pooled)\n+        {\n+            enable(pooled, true);\n+            return entry;\n+        }\n+\n+        private void enable(T pooled, boolean acquire)\n+        {\n+            Objects.requireNonNull(pooled);\n+            if (entry.state.getHi() != Integer.MIN_VALUE)\n+                throw new IllegalStateException(\"Open entries cannot be enabled : \" + this);\n+            entry.pooled = pooled;\n+            int usage = acquire ? 1 : 0;\n+            if (!entry.state.compareAndSet(Integer.MIN_VALUE, usage, 0, usage))\n+            {\n+                entry.pooled = null;\n+                throw new IllegalStateException(\"Entry cannot be enabled : \" + this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyMTU2MA=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxOTU2OA==", "bodyText": "The problem is that if we allow multiple threads to call enable on the reservation\n\nBut we never supported that and I think it's ok - enable() has a natural race with remove() but not with itself.\nIt is possible to write the classic while (true) loop, not care about races with itself, but do care about races with remove() that are natural and should not throw.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r466419568", "createdAt": "2020-08-06T13:40:07Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -332,29 +372,105 @@ public String toString()\n         return getClass().getSimpleName() + \" size=\" + sharedList.size() + \" closed=\" + closed + \" entries=\" + sharedList;\n     }\n \n+    /**\n+     * A Reservation of a slot in the Pool\n+     */\n+    public class Reservation\n+    {\n+        private final Entry entry = new Entry();\n+\n+        /**\n+         * @return The reserved {@link Entry}, which will be closed until enabled.\n+         */\n+        public Pool<T>.Entry getEntry()\n+        {\n+            return entry;\n+        }\n+\n+        /** Enable the reserved {@link Entry}.\n+         * Once enabled, the entry is immediately available to be acquired, potentially by\n+         * another thread.  If the caller wishes to acquire the associated entry, they should\n+         * use {@link #acquire(Object)} to atomically enable and acquire.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public void enable(T pooled)\n+        {\n+            enable(pooled, false);\n+        }\n+\n+        /** Enable and acquire the reserved {@link Entry}.\n+         * The associated entry is atomically enabled and acquired, so that no other thread can acquire it and\n+         * the {@link #getEntry()} value may be used by the caller.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public Pool<T>.Entry acquire(T pooled)\n+        {\n+            enable(pooled, true);\n+            return entry;\n+        }\n+\n+        private void enable(T pooled, boolean acquire)\n+        {\n+            Objects.requireNonNull(pooled);\n+            if (entry.state.getHi() != Integer.MIN_VALUE)\n+                throw new IllegalStateException(\"Open entries cannot be enabled : \" + this);\n+            entry.pooled = pooled;\n+            int usage = acquire ? 1 : 0;\n+            if (!entry.state.compareAndSet(Integer.MIN_VALUE, usage, 0, usage))\n+            {\n+                entry.pooled = null;\n+                throw new IllegalStateException(\"Entry cannot be enabled : \" + this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyMTU2MA=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg4NDMyNw==", "bodyText": "The class while (true) loop doesn't work if we throw ISE if the state is not what we expected.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r466884327", "createdAt": "2020-08-07T07:58:34Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -332,29 +372,105 @@ public String toString()\n         return getClass().getSimpleName() + \" size=\" + sharedList.size() + \" closed=\" + closed + \" entries=\" + sharedList;\n     }\n \n+    /**\n+     * A Reservation of a slot in the Pool\n+     */\n+    public class Reservation\n+    {\n+        private final Entry entry = new Entry();\n+\n+        /**\n+         * @return The reserved {@link Entry}, which will be closed until enabled.\n+         */\n+        public Pool<T>.Entry getEntry()\n+        {\n+            return entry;\n+        }\n+\n+        /** Enable the reserved {@link Entry}.\n+         * Once enabled, the entry is immediately available to be acquired, potentially by\n+         * another thread.  If the caller wishes to acquire the associated entry, they should\n+         * use {@link #acquire(Object)} to atomically enable and acquire.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public void enable(T pooled)\n+        {\n+            enable(pooled, false);\n+        }\n+\n+        /** Enable and acquire the reserved {@link Entry}.\n+         * The associated entry is atomically enabled and acquired, so that no other thread can acquire it and\n+         * the {@link #getEntry()} value may be used by the caller.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public Pool<T>.Entry acquire(T pooled)\n+        {\n+            enable(pooled, true);\n+            return entry;\n+        }\n+\n+        private void enable(T pooled, boolean acquire)\n+        {\n+            Objects.requireNonNull(pooled);\n+            if (entry.state.getHi() != Integer.MIN_VALUE)\n+                throw new IllegalStateException(\"Open entries cannot be enabled : \" + this);\n+            entry.pooled = pooled;\n+            int usage = acquire ? 1 : 0;\n+            if (!entry.state.compareAndSet(Integer.MIN_VALUE, usage, 0, usage))\n+            {\n+                entry.pooled = null;\n+                throw new IllegalStateException(\"Entry cannot be enabled : \" + this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyMTU2MA=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODg5MzU3OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzoyOToxMlrOG8Js9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzoyOToxMlrOG8Js9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNjcwOA==", "bodyText": "Use getClass().getSimpleName() here.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465726708", "createdAt": "2020-08-05T13:29:12Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -332,29 +372,105 @@ public String toString()\n         return getClass().getSimpleName() + \" size=\" + sharedList.size() + \" closed=\" + closed + \" entries=\" + sharedList;\n     }\n \n+    /**\n+     * A Reservation of a slot in the Pool\n+     */\n+    public class Reservation\n+    {\n+        private final Entry entry = new Entry();\n+\n+        /**\n+         * @return The reserved {@link Entry}, which will be closed until enabled.\n+         */\n+        public Pool<T>.Entry getEntry()\n+        {\n+            return entry;\n+        }\n+\n+        /** Enable the reserved {@link Entry}.\n+         * Once enabled, the entry is immediately available to be acquired, potentially by\n+         * another thread.  If the caller wishes to acquire the associated entry, they should\n+         * use {@link #acquire(Object)} to atomically enable and acquire.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public void enable(T pooled)\n+        {\n+            enable(pooled, false);\n+        }\n+\n+        /** Enable and acquire the reserved {@link Entry}.\n+         * The associated entry is atomically enabled and acquired, so that no other thread can acquire it and\n+         * the {@link #getEntry()} value may be used by the caller.\n+         * @param pooled The pooled item for the entry\n+         */\n+        public Pool<T>.Entry acquire(T pooled)\n+        {\n+            enable(pooled, true);\n+            return entry;\n+        }\n+\n+        private void enable(T pooled, boolean acquire)\n+        {\n+            Objects.requireNonNull(pooled);\n+            if (entry.state.getHi() != Integer.MIN_VALUE)\n+                throw new IllegalStateException(\"Open entries cannot be enabled : \" + this);\n+            entry.pooled = pooled;\n+            int usage = acquire ? 1 : 0;\n+            if (!entry.state.compareAndSet(Integer.MIN_VALUE, usage, 0, usage))\n+            {\n+                entry.pooled = null;\n+                throw new IllegalStateException(\"Entry cannot be enabled : \" + this);\n+            }\n+            pending.decrementAndGet();\n+        }\n+\n+        /**\n+         * Remove the reservation without enabling.\n+         */\n+        public void remove()\n+        {\n+            Pool.this.remove(entry);\n+        }\n+\n+        @Override\n+        public String toString()\n+        {\n+            return String.format(\"%s@%x{%s}\",\n+                getClass().getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODkzMjc0OnYy", "diffSide": "RIGHT", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozODo1NVrOG8KFmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozODo1NVrOG8KFmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMzAxNw==", "bodyText": "Remove the TODO, as ConnectionPool does not work in this way: by the time we notify the future, the Connection could already be stolen by another thread.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465733017", "createdAt": "2020-08-05T13:38:55Z", "author": {"login": "sbordet"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "diffHunk": "@@ -223,8 +223,8 @@ public void succeeded(Connection connection)\n             {\n                 if (LOG.isDebugEnabled())\n                     LOG.debug(\"Connection {}/{} creation succeeded {}\", pool.size(), pool.getMaxEntries(), connection);\n-                adopt(entry, connection);\n-                future.complete(null);\n+                adopt(reservation, connection);\n+                future.complete(null);  // TODO could this now be a future that passes back the connection?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODkzNTM5OnYy", "diffSide": "RIGHT", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozOTozNFrOG8KHQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozOTozNFrOG8KHQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMzQ0MA==", "bodyText": "I would log the reservation here, not reservation.getEntry().", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465733440", "createdAt": "2020-08-05T13:39:34Z", "author": {"login": "sbordet"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "diffHunk": "@@ -246,16 +246,16 @@ protected void proceed()\n         requester.succeeded();\n     }\n \n-    private void adopt(Pool<Connection>.Entry entry, Connection connection)\n+    private void adopt(Pool<Connection>.Reservation reservation, Connection connection)\n     {\n         if (!(connection instanceof Attachable))\n             throw new IllegalArgumentException(\"Invalid connection object: \" + connection);\n         Attachable attachable = (Attachable)connection;\n-        attachable.setAttachment(entry);\n+        attachable.setAttachment(reservation.getEntry());\n         if (LOG.isDebugEnabled())\n-            LOG.debug(\"onCreating {}\", entry);\n+            LOG.debug(\"adopt {} {}\", reservation.getEntry(), connection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODk1Njc2OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzo0NDo0NVrOG8KVQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODowNzowM1rOG-E6qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNzAyNw==", "bodyText": "There are no tests for this new method.\nFurthermore, why does it take an Entry as parameter? I think it should just be a Supplier<T> to create the object as the creator is called within the acquisition process, so the implementation does all the plumbing with the Entry.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465737027", "createdAt": "2020-08-05T13:44:45Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +224,42 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Entry, T> creator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5MzQ1NQ==", "bodyText": "It takes an entry because it is typical (both our usages) for a two way association to be made between the pooled item and its entry.  This allows the item to pass the entry in the constructor or associate it with an attachment etc.\nI'll add some tests", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465793455", "createdAt": "2020-08-05T15:02:20Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +224,42 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Entry, T> creator)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNzAyNw=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxMDExMA==", "bodyText": "I think the two way association with Attachable should be done in this method, and not be a burden of the implementer of the creator lambda.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r466310110", "createdAt": "2020-08-06T10:12:54Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +224,42 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Entry, T> creator)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNzAyNw=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg4MzI5OQ==", "bodyText": "I don't agree.  There is currently no dependency on Attachable from Pool and nothing that says an Attachable must be used for the association... or even if something is Attachable that it may be so for another reason.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r466883299", "createdAt": "2020-08-07T07:56:28Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +224,42 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Entry, T> creator)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNzAyNw=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5OTA1OQ==", "bodyText": "Note also that with the Reservation approach, this method is not so important as the API is clear and it is probably less faff to not use this method.   So if we don't really agree on this method, it is OK to just not have it... so long as we have Reservation or something like it.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r466899059", "createdAt": "2020-08-07T08:29:02Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +224,42 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Entry, T> creator)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNzAyNw=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0NTQ0OA==", "bodyText": "With the Reservation API, it is no longer difficult to call the API directly, so this method is no longer needed.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r467745448", "createdAt": "2020-08-10T08:07:03Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +224,42 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Entry, T> creator)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNzAyNw=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODk2NDA5OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzo0NjoyN1rOG8KZ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToyMToxM1rOG8Om5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczODIxOA==", "bodyText": "Can we use IO.close() in the loop? I think a warn() here is too much.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465738218", "createdAt": "2020-08-05T13:46:27Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -281,17 +326,12 @@ public boolean isClosed()\n     public void close()\n     {\n         List<Entry> copy;\n-        lock.lock();\n-        try\n+        try (Locker.Lock l = locker.lock())\n         {\n             closed = true;\n             copy = new ArrayList<>(sharedList);\n             sharedList.clear();\n         }\n-        finally\n-        {\n-            lock.unlock();\n-        }\n \n         // iterate the copy and close its entries\n         for (Entry entry : copy)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwNzA3OA==", "bodyText": "Sure.... but should we close any Closeable when it is removed from the pool, or only when the pool is closed?  Perhaps we should close AutoCloseables that are removed from the pool.  Eitherway, need to javadoc this behavior", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465807078", "createdAt": "2020-08-05T15:21:13Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -281,17 +326,12 @@ public boolean isClosed()\n     public void close()\n     {\n         List<Entry> copy;\n-        lock.lock();\n-        try\n+        try (Locker.Lock l = locker.lock())\n         {\n             closed = true;\n             copy = new ArrayList<>(sharedList);\n             sharedList.clear();\n         }\n-        finally\n-        {\n-            lock.unlock();\n-        }\n \n         // iterate the copy and close its entries\n         for (Entry entry : copy)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczODIxOA=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODk4OTA4OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzo1MjoxOFrOG8KpOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTowMzoxOVrOG8N0nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc0MjEzOA==", "bodyText": "I think we should call reservation.remove() and rethrow here - same semantic of Map.computeIfAbsent().", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465742138", "createdAt": "2020-08-05T13:52:18Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +224,42 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Entry, T> creator)\n+    {\n+        Entry entry = acquire();\n+        if (entry != null)\n+            return entry;\n+\n+        Reservation reservation = reserve(getMaxEntries());\n+        if (reservation == null)\n+            return null;\n+\n+        T value = null;\n+        try\n+        {\n+            value = creator.apply(reservation.getEntry());\n+        }\n+        catch (Throwable th)\n+        {\n+            LOGGER.warn(th);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5NDIwNw==", "bodyText": "just throw and not warn?   I don't really like log and throw.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465794207", "createdAt": "2020-08-05T15:03:19Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +224,42 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Entry, T> creator)\n+    {\n+        Entry entry = acquire();\n+        if (entry != null)\n+            return entry;\n+\n+        Reservation reservation = reserve(getMaxEntries());\n+        if (reservation == null)\n+            return null;\n+\n+        T value = null;\n+        try\n+        {\n+            value = creator.apply(reservation.getEntry());\n+        }\n+        catch (Throwable th)\n+        {\n+            LOGGER.warn(th);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc0MjEzOA=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTAwMzgzOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzo1NTo0N1rOG8Kysg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzo1NzoyMVrOG9QUnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc0NDU2Mg==", "bodyText": "It may be possible that the pool is closed just before the call to this method, so we should return null, which means reservation.acquire() should return a boolean.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465744562", "createdAt": "2020-08-05T13:55:47Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +224,42 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Entry, T> creator)\n+    {\n+        Entry entry = acquire();\n+        if (entry != null)\n+            return entry;\n+\n+        Reservation reservation = reserve(getMaxEntries());\n+        if (reservation == null)\n+            return null;\n+\n+        T value = null;\n+        try\n+        {\n+            value = creator.apply(reservation.getEntry());\n+        }\n+        catch (Throwable th)\n+        {\n+            LOGGER.warn(th);\n+        }\n+\n+        if (value == null)\n+        {\n+            reservation.remove();\n+            return null;\n+        }\n+\n+        return reservation.acquire(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5NzU4Mg==", "bodyText": "Currently it throws an ISE, which is what enable did before.  reservation.acquire can't return a boolean because it returns the entry.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r465797582", "createdAt": "2020-08-05T15:08:15Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +224,42 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Entry, T> creator)\n+    {\n+        Entry entry = acquire();\n+        if (entry != null)\n+            return entry;\n+\n+        Reservation reservation = reserve(getMaxEntries());\n+        if (reservation == null)\n+            return null;\n+\n+        T value = null;\n+        try\n+        {\n+            value = creator.apply(reservation.getEntry());\n+        }\n+        catch (Throwable th)\n+        {\n+            LOGGER.warn(th);\n+        }\n+\n+        if (value == null)\n+        {\n+            reservation.remove();\n+            return null;\n+        }\n+\n+        return reservation.acquire(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc0NDU2Mg=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxOTQ2Mw==", "bodyText": "No, this last return statement should be:\nif (reservation.acquire(value))\n  return reservation.getEntry();\nelse\n  return null;", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r466319463", "createdAt": "2020-08-06T10:31:46Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +224,42 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Entry, T> creator)\n+    {\n+        Entry entry = acquire();\n+        if (entry != null)\n+            return entry;\n+\n+        Reservation reservation = reserve(getMaxEntries());\n+        if (reservation == null)\n+            return null;\n+\n+        T value = null;\n+        try\n+        {\n+            value = creator.apply(reservation.getEntry());\n+        }\n+        catch (Throwable th)\n+        {\n+            LOGGER.warn(th);\n+        }\n+\n+        if (value == null)\n+        {\n+            reservation.remove();\n+            return null;\n+        }\n+\n+        return reservation.acquire(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc0NDU2Mg=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg4Mzc0Mw==", "bodyText": "But the acquire will throw ISE if the pool has been closed... just as it did before.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r466883743", "createdAt": "2020-08-07T07:57:21Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +224,42 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Entry, T> creator)\n+    {\n+        Entry entry = acquire();\n+        if (entry != null)\n+            return entry;\n+\n+        Reservation reservation = reserve(getMaxEntries());\n+        if (reservation == null)\n+            return null;\n+\n+        T value = null;\n+        try\n+        {\n+            value = creator.apply(reservation.getEntry());\n+        }\n+        catch (Throwable th)\n+        {\n+            LOGGER.warn(th);\n+        }\n+\n+        if (value == null)\n+        {\n+            reservation.remove();\n+            return null;\n+        }\n+\n+        return reservation.acquire(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc0NDU2Mg=="}, "originalCommit": {"oid": "f5a35a2eac4ce20b64ba71edcc1800a926cadde4"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzk4OTYwOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo0Njo0MlrOG-UraQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo0Njo0MlrOG-UraQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwMzY4OQ==", "bodyText": "Minor nit: you probably should call reserve(-1) to make it more obvious that you do not want to be limited by the pending/disabled entries count.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r468003689", "createdAt": "2020-08-10T15:46:42Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +225,43 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Pool<T>.Entry, T> creator)\n+    {\n+        Entry entry = acquire();\n+        if (entry != null)\n+            return entry;\n+\n+        entry = reserve(getMaxEntries());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDAwMzEzOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/test/java/org/eclipse/jetty/util/PoolTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1MDowOVrOG-UzvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1MDowOVrOG-UzvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwNTgyMA==", "bodyText": "This test is useless.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r468005820", "createdAt": "2020-08-10T15:50:09Z", "author": {"login": "lorban"}, "path": "jetty-util/src/test/java/org/eclipse/jetty/util/PoolTest.java", "diffHunk": "@@ -31,16 +35,33 @@\n import static org.hamcrest.Matchers.notNullValue;\n import static org.hamcrest.Matchers.nullValue;\n import static org.hamcrest.Matchers.sameInstance;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n public class PoolTest\n {\n+    public static Stream<Object[]> cacheSize()\n+    {\n+        List<Object[]> data = new ArrayList<>();\n+        data.add(new Object[]{0});\n+        data.add(new Object[]{1});\n+        data.add(new Object[]{2});\n+        return data.stream();\n+    }\n \n-    @Test\n-    public void testAcquireRelease()\n+    @ParameterizedTest\n+    @MethodSource(value = \"cacheSize\")\n+    public void testCache(int cacheSize)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDAxOTI5OnYy", "diffSide": "LEFT", "path": "jetty-util/src/test/java/org/eclipse/jetty/util/PoolTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1Mzo1OFrOG-U9lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1Mzo1OFrOG-U9lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwODM0MA==", "bodyText": "Why did you remove this test?", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r468008340", "createdAt": "2020-08-10T15:53:58Z", "author": {"login": "lorban"}, "path": "jetty-util/src/test/java/org/eclipse/jetty/util/PoolTest.java", "diffHunk": "@@ -350,35 +419,14 @@ public void testMultiplexRemoveAfterAcquire()\n         assertThat(pool.size(), is(0));\n     }\n \n-    @Test\n-    public void testReleaseThenRemoveNonEnabledEntry()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00"}, "originalPosition": 433}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDAxOTgxOnYy", "diffSide": "LEFT", "path": "jetty-util/src/test/java/org/eclipse/jetty/util/PoolTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1NDowNFrOG-U93A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1NDowNFrOG-U93A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwODQxMg==", "bodyText": "Why did you remove this test?", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r468008412", "createdAt": "2020-08-10T15:54:04Z", "author": {"login": "lorban"}, "path": "jetty-util/src/test/java/org/eclipse/jetty/util/PoolTest.java", "diffHunk": "@@ -350,35 +419,14 @@ public void testMultiplexRemoveAfterAcquire()\n         assertThat(pool.size(), is(0));\n     }\n \n-    @Test\n-    public void testReleaseThenRemoveNonEnabledEntry()\n-    {\n-        Pool<String> pool = new Pool<>(1, 0);\n-        Pool<String>.Entry e = pool.reserve(-1);\n-        assertThat(pool.size(), is(1));\n-        assertThat(pool.release(e), is(false));\n-        assertThat(pool.size(), is(1));\n-        assertThat(pool.remove(e), is(true));\n-        assertThat(pool.size(), is(0));\n-    }\n-\n-    @Test\n-    public void testRemoveNonEnabledEntry()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00"}, "originalPosition": 445}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDAyODY0OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1NjowNlrOG-VDPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1NjowNlrOG-VDPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwOTc5MQ==", "bodyText": "I don't think the Pool.this. prefix is needed.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r468009791", "createdAt": "2020-08-10T15:56:06Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +225,43 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Pool<T>.Entry, T> creator)\n+    {\n+        Entry entry = acquire();\n+        if (entry != null)\n+            return entry;\n+\n+        entry = reserve(getMaxEntries());\n+        if (entry == null)\n+            return null;\n+\n+        T value = null;\n+        try\n+        {\n+            value = creator.apply(entry);\n+        }\n+        catch (Throwable th)\n+        {\n+            Pool.this.remove(entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDAyOTAxOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1NjoxMVrOG-VDgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1NjoxMVrOG-VDgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwOTg1OA==", "bodyText": "I don't think the Pool.this. prefix is needed.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r468009858", "createdAt": "2020-08-10T15:56:11Z", "author": {"login": "lorban"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -215,6 +225,43 @@ public Entry acquire()\n         return null;\n     }\n \n+    /**\n+     * Utility method to acquire an entry from the pool,\n+     * reserving and creating a new entry if necessary.\n+     *\n+     * @param creator a function to create the pooled value for a reserved entry.\n+     * @return an entry from the pool or null if none is available.\n+     */\n+    public Entry acquire(Function<Pool<T>.Entry, T> creator)\n+    {\n+        Entry entry = acquire();\n+        if (entry != null)\n+            return entry;\n+\n+        entry = reserve(getMaxEntries());\n+        if (entry == null)\n+            return null;\n+\n+        T value = null;\n+        try\n+        {\n+            value = creator.apply(entry);\n+        }\n+        catch (Throwable th)\n+        {\n+            Pool.this.remove(entry);\n+            throw th;\n+        }\n+\n+        if (value == null)\n+        {\n+            Pool.this.remove(entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDI2ODE4OnYy", "diffSide": "RIGHT", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNjo1ODoxMlrOG-XU2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNjo1ODoxMlrOG-XU2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0NzA2Nw==", "bodyText": "No, you can't throw from a Callback - good that adopt() was inlined because I missed it.\nCall failed(new IllegalArgumentException()), as we need to remove the Entry, notify the CF and the requester.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r468047067", "createdAt": "2020-08-10T16:58:12Z", "author": {"login": "sbordet"}, "path": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java", "diffHunk": "@@ -201,29 +201,30 @@ protected void tryCreate(int maxPending)\n \n     private CompletableFuture<Void> tryCreateReturningFuture(int maxPending)\n     {\n-        CompletableFuture<Void> future = new CompletableFuture<>();\n-\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"tryCreate {}/{} connections {}/{} pending\", pool.size(), pool.getMaxEntries(), getPendingConnectionCount(), maxPending);\n \n-        Pool<Connection>.Reservation reservation = pool.reserve(maxPending);\n-        if (reservation == null)\n-        {\n-            future.complete(null);\n-            return future;\n-        }\n+        Pool<Connection>.Entry entry = pool.reserve(maxPending);\n+        if (entry == null)\n+            return CompletableFuture.completedFuture(null);\n \n         if (LOG.isDebugEnabled())\n             LOG.debug(\"newConnection {}/{} connections {}/{} pending\", pool.size(), pool.getMaxEntries(), getPendingConnectionCount(), maxPending);\n \n+        CompletableFuture<Void> future = new CompletableFuture<>();\n         destination.newConnection(new Promise<Connection>()\n         {\n             @Override\n             public void succeeded(Connection connection)\n             {\n                 if (LOG.isDebugEnabled())\n                     LOG.debug(\"Connection {}/{} creation succeeded {}\", pool.size(), pool.getMaxEntries(), connection);\n-                adopt(reservation, connection);\n+                if (!(connection instanceof Attachable))\n+                    throw new IllegalArgumentException(\"Invalid connection object: \" + connection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDI4NTA0OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzowMzowNFrOG-XfhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzowMzowNFrOG-XfhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0OTc5Ng==", "bodyText": "Typo: acquired -> acquire.", "url": "https://github.com/eclipse/jetty.project/pull/5117#discussion_r468049796", "createdAt": "2020-08-10T17:03:04Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java", "diffHunk": "@@ -417,6 +381,40 @@ public String toString()\n             this.state = new AtomicBiInteger(Integer.MIN_VALUE, 0);\n         }\n \n+        /** Enable a reserved entry {@link Entry}.\n+         * An entry returned from the {@link #reserve(int)} method must be enabled with this method,\n+         * once and only once, before it is usable by the pool.\n+         * The entry may be enabled and not acquired, in which case it is immediately available to be\n+         * acquired, potentially by another thread; or it can be enabled and acquired atomically so that\n+         * no other thread can acquired it, although the acquire may still fail if the pool has been closed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b28e435ac41438cb18c307f6f5257934e99c00"}, "originalPosition": 202}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2284, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}