{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NTQ5NzI4", "number": 4602, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjo1NTozM1rODisMJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo1NzozNlrODo2UXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzAyMTgyOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjo1NTozM1rOFuE_XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzozODo0NFrOFuGVgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg2MDU3Mg==", "bodyText": "I think loadAll is a better name for a method that returns a list and it stresses that we are breaking the lazy load paradigm of ServiceLoader.  We could also then have loadFirst(Predicate<T>) if we wanted to avoid loading all.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r383860572", "createdAt": "2020-02-25T12:55:33Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java", "diffHunk": "@@ -0,0 +1,68 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+\n+public class ServiceLoaderUtil\n+{\n+    private static final Logger LOG = Log.getLogger(ServiceLoaderUtil.class);\n+    private static final int MAX_ERRORS = 100;\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to assemble the service providers into a list.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @return a list of the loaded service providers.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> List<T> load(ServiceLoader<T> serviceLoader)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f4d2606b3d2bd2fabfde573464857a3b4e021d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MjYyNQ==", "bodyText": "Not a fan of this, as returning a List will mean instantiating each Service even if we don't use it.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r383882625", "createdAt": "2020-02-25T13:38:44Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java", "diffHunk": "@@ -0,0 +1,68 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+\n+public class ServiceLoaderUtil\n+{\n+    private static final Logger LOG = Log.getLogger(ServiceLoaderUtil.class);\n+    private static final int MAX_ERRORS = 100;\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to assemble the service providers into a list.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @return a list of the loaded service providers.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> List<T> load(ServiceLoader<T> serviceLoader)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg2MDU3Mg=="}, "originalCommit": {"oid": "a7f4d2606b3d2bd2fabfde573464857a3b4e021d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzA0NDU0OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzowMjoyNFrOFuFMzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzowMjoyNFrOFuFMzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg2NDAxNQ==", "bodyText": "I'm not sure what I dislike more... the while(true) or a fixed number of iterations!  But I can't think of anything better... other than to perhaps not worry about infinite looping as the javadoc for the ServiceLoader iterator says:\n * If an error is thrown then subsequent invocations of the\n * iterator will make a best effort to locate and instantiate the next\n * available provider, but in general such recovery cannot be guaranteed.\n\nHmmm let's keep the MAX_ERRORs for now, but increase the value to 1000", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r383864015", "createdAt": "2020-02-25T13:02:24Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java", "diffHunk": "@@ -0,0 +1,68 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+\n+public class ServiceLoaderUtil\n+{\n+    private static final Logger LOG = Log.getLogger(ServiceLoaderUtil.class);\n+    private static final int MAX_ERRORS = 100;\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to assemble the service providers into a list.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @return a list of the loaded service providers.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> List<T> load(ServiceLoader<T> serviceLoader)\n+    {\n+        List<T> list = new ArrayList<>();\n+        Iterator<T> iterator = serviceLoader.iterator();\n+\n+        int errors = 0;\n+        while (true)\n+        {\n+            try\n+            {\n+                if (!iterator.hasNext())\n+                    break;\n+                list.add(iterator.next());\n+            }\n+            catch (ServiceConfigurationError e)\n+            {\n+                LOG.warn(e);\n+                if (++errors >= MAX_ERRORS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f4d2606b3d2bd2fabfde573464857a3b4e021d"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzA3MzE1OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzoxMTozMFrOFuFdxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzoxMTozMFrOFuFdxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg2ODM1Ng==", "bodyText": "Rather than a new util class, this could just be some method(s) on the existing TypeUtil.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r383868356", "createdAt": "2020-02-25T13:11:30Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java", "diffHunk": "@@ -0,0 +1,68 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+\n+public class ServiceLoaderUtil", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f4d2606b3d2bd2fabfde573464857a3b4e021d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTYyMTY4OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo0NTo0NVrOFuw4Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjowMzowMlrOFuxpeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3OTYzNQ==", "bodyText": "No, should return Optional<T>, not null.\nBut frankly I would just have 1 method that returns a Stream, and the caller can easily load them all into a List, or load the first, etc. using the Stream APIs.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r384579635", "createdAt": "2020-02-26T15:45:45Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +755,89 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to assemble the service providers into a list.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @return a list of the loaded service providers.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> List<T> loadAll(ServiceLoader<T> serviceLoader)\n+    {\n+        List<T> list = new ArrayList<>();\n+        Iterator<T> iterator = serviceLoader.iterator();\n+\n+        int errors = 0;\n+        while (true)\n+        {\n+            try\n+            {\n+                if (!iterator.hasNext())\n+                    break;\n+                list.add(iterator.next());\n+            }\n+            catch (ServiceConfigurationError e)\n+            {\n+                LOG.warn(e);\n+                if (++errors >= MAX_ERRORS)\n+                    throw e;\n+            }\n+        }\n+\n+        return list;\n+    }\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to get the first available service provider.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader until one is found.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @return an instance of a service provider, or null if none could be found.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> T loadFirst(ServiceLoader<T> serviceLoader)\n+    {\n+        return loadFirst(serviceLoader, t -> true);\n+    }\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to get the first service provider to match the provided predicate.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader until one is found.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @param predicate The predicate used to match a service provider.\n+     * @return an instance of a service provider, or null if none could be found.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> T loadFirst(ServiceLoader<T> serviceLoader, Predicate<T> predicate)\n+    {\n+        Iterator<T> iterator = serviceLoader.iterator();\n+\n+        int errors = 0;\n+        while (true)\n+        {\n+            try\n+            {\n+                if (!iterator.hasNext())\n+                    break;\n+\n+                T t = iterator.next();\n+                if (predicate.test(t))\n+                    return t;\n+            }\n+            catch (ServiceConfigurationError e)\n+            {\n+                LOG.warn(e);\n+                if (++errors >= MAX_ERRORS)\n+                    throw e;\n+            }\n+        }\n+\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67e88abbe912d64210b05092de1ef6937aa6e2c6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4NDk5Mg==", "bodyText": "Optional only really works if Streams are being used.   I think it is a mistake to mix styles.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r384584992", "createdAt": "2020-02-26T15:53:17Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +755,89 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to assemble the service providers into a list.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @return a list of the loaded service providers.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> List<T> loadAll(ServiceLoader<T> serviceLoader)\n+    {\n+        List<T> list = new ArrayList<>();\n+        Iterator<T> iterator = serviceLoader.iterator();\n+\n+        int errors = 0;\n+        while (true)\n+        {\n+            try\n+            {\n+                if (!iterator.hasNext())\n+                    break;\n+                list.add(iterator.next());\n+            }\n+            catch (ServiceConfigurationError e)\n+            {\n+                LOG.warn(e);\n+                if (++errors >= MAX_ERRORS)\n+                    throw e;\n+            }\n+        }\n+\n+        return list;\n+    }\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to get the first available service provider.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader until one is found.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @return an instance of a service provider, or null if none could be found.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> T loadFirst(ServiceLoader<T> serviceLoader)\n+    {\n+        return loadFirst(serviceLoader, t -> true);\n+    }\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to get the first service provider to match the provided predicate.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader until one is found.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @param predicate The predicate used to match a service provider.\n+     * @return an instance of a service provider, or null if none could be found.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> T loadFirst(ServiceLoader<T> serviceLoader, Predicate<T> predicate)\n+    {\n+        Iterator<T> iterator = serviceLoader.iterator();\n+\n+        int errors = 0;\n+        while (true)\n+        {\n+            try\n+            {\n+                if (!iterator.hasNext())\n+                    break;\n+\n+                T t = iterator.next();\n+                if (predicate.test(t))\n+                    return t;\n+            }\n+            catch (ServiceConfigurationError e)\n+            {\n+                LOG.warn(e);\n+                if (++errors >= MAX_ERRORS)\n+                    throw e;\n+            }\n+        }\n+\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3OTYzNQ=="}, "originalCommit": {"oid": "67e88abbe912d64210b05092de1ef6937aa6e2c6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4NjY3Nw==", "bodyText": "I don't think Optional is really necessary as it only is advantageous if you are using streams.\nSo I think it is a Stream API or as is, no need to mix styles.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r384586677", "createdAt": "2020-02-26T15:55:29Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +755,89 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to assemble the service providers into a list.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @return a list of the loaded service providers.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> List<T> loadAll(ServiceLoader<T> serviceLoader)\n+    {\n+        List<T> list = new ArrayList<>();\n+        Iterator<T> iterator = serviceLoader.iterator();\n+\n+        int errors = 0;\n+        while (true)\n+        {\n+            try\n+            {\n+                if (!iterator.hasNext())\n+                    break;\n+                list.add(iterator.next());\n+            }\n+            catch (ServiceConfigurationError e)\n+            {\n+                LOG.warn(e);\n+                if (++errors >= MAX_ERRORS)\n+                    throw e;\n+            }\n+        }\n+\n+        return list;\n+    }\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to get the first available service provider.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader until one is found.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @return an instance of a service provider, or null if none could be found.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> T loadFirst(ServiceLoader<T> serviceLoader)\n+    {\n+        return loadFirst(serviceLoader, t -> true);\n+    }\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to get the first service provider to match the provided predicate.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader until one is found.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @param predicate The predicate used to match a service provider.\n+     * @return an instance of a service provider, or null if none could be found.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> T loadFirst(ServiceLoader<T> serviceLoader, Predicate<T> predicate)\n+    {\n+        Iterator<T> iterator = serviceLoader.iterator();\n+\n+        int errors = 0;\n+        while (true)\n+        {\n+            try\n+            {\n+                if (!iterator.hasNext())\n+                    break;\n+\n+                T t = iterator.next();\n+                if (predicate.test(t))\n+                    return t;\n+            }\n+            catch (ServiceConfigurationError e)\n+            {\n+                LOG.warn(e);\n+                if (++errors >= MAX_ERRORS)\n+                    throw e;\n+            }\n+        }\n+\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3OTYzNQ=="}, "originalCommit": {"oid": "67e88abbe912d64210b05092de1ef6937aa6e2c6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4ODQ1NA==", "bodyText": "Optional is orthogonal to Stream.\nThe signature with Optional makes clear that you may or may not get a service. Without the Optional you have to either read the source code or the javadocs.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r384588454", "createdAt": "2020-02-26T15:57:59Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +755,89 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to assemble the service providers into a list.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @return a list of the loaded service providers.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> List<T> loadAll(ServiceLoader<T> serviceLoader)\n+    {\n+        List<T> list = new ArrayList<>();\n+        Iterator<T> iterator = serviceLoader.iterator();\n+\n+        int errors = 0;\n+        while (true)\n+        {\n+            try\n+            {\n+                if (!iterator.hasNext())\n+                    break;\n+                list.add(iterator.next());\n+            }\n+            catch (ServiceConfigurationError e)\n+            {\n+                LOG.warn(e);\n+                if (++errors >= MAX_ERRORS)\n+                    throw e;\n+            }\n+        }\n+\n+        return list;\n+    }\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to get the first available service provider.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader until one is found.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @return an instance of a service provider, or null if none could be found.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> T loadFirst(ServiceLoader<T> serviceLoader)\n+    {\n+        return loadFirst(serviceLoader, t -> true);\n+    }\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to get the first service provider to match the provided predicate.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader until one is found.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @param predicate The predicate used to match a service provider.\n+     * @return an instance of a service provider, or null if none could be found.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> T loadFirst(ServiceLoader<T> serviceLoader, Predicate<T> predicate)\n+    {\n+        Iterator<T> iterator = serviceLoader.iterator();\n+\n+        int errors = 0;\n+        while (true)\n+        {\n+            try\n+            {\n+                if (!iterator.hasNext())\n+                    break;\n+\n+                T t = iterator.next();\n+                if (predicate.test(t))\n+                    return t;\n+            }\n+            catch (ServiceConfigurationError e)\n+            {\n+                LOG.warn(e);\n+                if (++errors >= MAX_ERRORS)\n+                    throw e;\n+            }\n+        }\n+\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3OTYzNQ=="}, "originalCommit": {"oid": "67e88abbe912d64210b05092de1ef6937aa6e2c6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MjI0OA==", "bodyText": "Hmmm I can't actually find any usages of loadFirst, so I hate methods that are not actually used.\nAre there any usages that can be converted to use loadFirst?  if not, then perhaps just doing a single more flexible Stream API is best.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r384592248", "createdAt": "2020-02-26T16:03:02Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +755,89 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to assemble the service providers into a list.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @return a list of the loaded service providers.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> List<T> loadAll(ServiceLoader<T> serviceLoader)\n+    {\n+        List<T> list = new ArrayList<>();\n+        Iterator<T> iterator = serviceLoader.iterator();\n+\n+        int errors = 0;\n+        while (true)\n+        {\n+            try\n+            {\n+                if (!iterator.hasNext())\n+                    break;\n+                list.add(iterator.next());\n+            }\n+            catch (ServiceConfigurationError e)\n+            {\n+                LOG.warn(e);\n+                if (++errors >= MAX_ERRORS)\n+                    throw e;\n+            }\n+        }\n+\n+        return list;\n+    }\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to get the first available service provider.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader until one is found.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @return an instance of a service provider, or null if none could be found.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> T loadFirst(ServiceLoader<T> serviceLoader)\n+    {\n+        return loadFirst(serviceLoader, t -> true);\n+    }\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to get the first service provider to match the provided predicate.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader until one is found.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @param predicate The predicate used to match a service provider.\n+     * @return an instance of a service provider, or null if none could be found.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> T loadFirst(ServiceLoader<T> serviceLoader, Predicate<T> predicate)\n+    {\n+        Iterator<T> iterator = serviceLoader.iterator();\n+\n+        int errors = 0;\n+        while (true)\n+        {\n+            try\n+            {\n+                if (!iterator.hasNext())\n+                    break;\n+\n+                T t = iterator.next();\n+                if (predicate.test(t))\n+                    return t;\n+            }\n+            catch (ServiceConfigurationError e)\n+            {\n+                LOG.warn(e);\n+                if (++errors >= MAX_ERRORS)\n+                    throw e;\n+            }\n+        }\n+\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3OTYzNQ=="}, "originalCommit": {"oid": "67e88abbe912d64210b05092de1ef6937aa6e2c6"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTY3NDU1OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/websocket-jetty-api/src/main/java/org/eclipse/jetty/websocket/api/extensions/ExtensionConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1NzozNlrOFuxZmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1ODo0OVrOFuxdMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4ODE4NA==", "bodyText": "Why isn't this using the TypeUtil method to skip exceptions?", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r384588184", "createdAt": "2020-02-26T15:57:36Z", "author": {"login": "gregw"}, "path": "jetty-websocket/websocket-jetty-api/src/main/java/org/eclipse/jetty/websocket/api/extensions/ExtensionConfig.java", "diffHunk": "@@ -34,7 +34,7 @@\n \n     private static ExtensionConfig.Parser getParser()\n     {\n-        return ServiceLoader.load(ExtensionConfig.Parser.class).findFirst().get();\n+        return ServiceLoader.load(ExtensionConfig.Parser.class).iterator().next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67e88abbe912d64210b05092de1ef6937aa6e2c6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4OTEwNw==", "bodyText": "websocket-api does not depend on jetty-util (or any other jetty dependency for that matter)", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r384589107", "createdAt": "2020-02-26T15:58:49Z", "author": {"login": "joakime"}, "path": "jetty-websocket/websocket-jetty-api/src/main/java/org/eclipse/jetty/websocket/api/extensions/ExtensionConfig.java", "diffHunk": "@@ -34,7 +34,7 @@\n \n     private static ExtensionConfig.Parser getParser()\n     {\n-        return ServiceLoader.load(ExtensionConfig.Parser.class).findFirst().get();\n+        return ServiceLoader.load(ExtensionConfig.Parser.class).iterator().next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4ODE4NA=="}, "originalCommit": {"oid": "67e88abbe912d64210b05092de1ef6937aa6e2c6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTA4ODYzOnYy", "diffSide": "RIGHT", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/PreEncodedHttpField.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNjo1NjozMFrOFwKDJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNjo1NjozMFrOFwKDJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0MDYxMw==", "bodyText": "This can be a collect", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r386040613", "createdAt": "2020-02-29T16:56:30Z", "author": {"login": "gregw"}, "path": "jetty-http/src/main/java/org/eclipse/jetty/http/PreEncodedHttpField.java", "diffHunk": "@@ -44,20 +44,11 @@\n     static\n     {\n         List<HttpFieldPreEncoder> encoders = new ArrayList<>();\n-        Iterator<HttpFieldPreEncoder> iter = ServiceLoader.load(HttpFieldPreEncoder.class).iterator();\n-        while (iter.hasNext())\n-        {\n-            try\n-            {\n-                HttpFieldPreEncoder encoder = iter.next();\n-                if (index(encoder.getHttpVersion()) >= 0)\n-                    encoders.add(encoder);\n-            }\n-            catch (Error | RuntimeException e)\n-            {\n-                LOG.debug(e);\n-            }\n-        }\n+        ServiceLoader.load(HttpFieldPreEncoder.class).stream()\n+            .flatMap(TypeUtil::providerMap)\n+            .filter(encoder -> index(encoder.getHttpVersion()) >= 0)\n+            .forEach(encoders::add);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97c55e27cc72270a50538dfb7020fb69397e73c3"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTA4ODkyOnYy", "diffSide": "RIGHT", "path": "jetty-security/src/main/java/org/eclipse/jetty/security/SecurityHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNjo1NzowN1rOFwKDTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwNzo1NjowNlrOFwMzXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0MDY1NA==", "bodyText": "This can be a collect", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r386040654", "createdAt": "2020-02-29T16:57:07Z", "author": {"login": "gregw"}, "path": "jetty-security/src/main/java/org/eclipse/jetty/security/SecurityHandler.java", "diffHunk": "@@ -76,11 +77,8 @@\n \n     static\n     {\n-        for (Authenticator.Factory factory : ServiceLoader.load(Authenticator.Factory.class))\n-        {\n-            __knownAuthenticatorFactories.add(factory);\n-        }\n-\n+        ServiceLoader.load(Authenticator.Factory.class).stream()\n+            .flatMap(TypeUtil::providerMap).forEach(__knownAuthenticatorFactories::add);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97c55e27cc72270a50538dfb7020fb69397e73c3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA4NTcyNw==", "bodyText": "We also need to add new DefaultAuthenticatorFactory() but Collectors.toList() may return an immutable list.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r386085727", "createdAt": "2020-03-01T07:56:06Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-security/src/main/java/org/eclipse/jetty/security/SecurityHandler.java", "diffHunk": "@@ -76,11 +77,8 @@\n \n     static\n     {\n-        for (Authenticator.Factory factory : ServiceLoader.load(Authenticator.Factory.class))\n-        {\n-            __knownAuthenticatorFactories.add(factory);\n-        }\n-\n+        ServiceLoader.load(Authenticator.Factory.class).stream()\n+            .flatMap(TypeUtil::providerMap).forEach(__knownAuthenticatorFactories::add);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0MDY1NA=="}, "originalCommit": {"oid": "97c55e27cc72270a50538dfb7020fb69397e73c3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTA4OTQxOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNjo1ODozNVrOFwKDmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNjo1ODozNVrOFwKDmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0MDczMA==", "bodyText": "Give a code example of how to use it", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r386040730", "createdAt": "2020-02-29T16:58:35Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +755,25 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Used on a {@link ServiceLoader#stream()} with {@link Stream#flatMap(Function)},\n+     * so that in the case a {@link ServiceConfigurationError} is thrown it warns and\n+     * continues iterating through the service loader.\n+     * @param <T> The class of the service type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97c55e27cc72270a50538dfb7020fb69397e73c3"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDU0NDk0OnYy", "diffSide": "RIGHT", "path": "jetty-alpn/jetty-alpn-client/src/main/java/org/eclipse/jetty/alpn/client/ALPNClientConnectionFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMTowODoyN1rOF1_z6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTowOToxOVrOF2HTkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2NDMzMQ==", "bodyText": "Perhaps it would be less verbose to have two methods named:\n\nStream<T> TypeUtil.serviceStream(ServiceLoader<T>) would include in the flatMap operation and just provide a stream of services, hiding exceptions\nStream<Provider<T>> TypeUtil.serviceProviderStream(ServiceLoader<T>) would return the stream of providers with exceptions etc.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392164331", "createdAt": "2020-03-13T11:08:27Z", "author": {"login": "gregw"}, "path": "jetty-alpn/jetty-alpn-client/src/main/java/org/eclipse/jetty/alpn/client/ALPNClientConnectionFactory.java", "diffHunk": "@@ -54,21 +54,8 @@ public ALPNClientConnectionFactory(Executor executor, ClientConnectionFactory co\n         IllegalStateException failure = new IllegalStateException(\"No Client ALPNProcessors!\");\n \n         // Use a for loop on iterator so load exceptions can be caught and ignored\n-        for (Iterator<Client> i = ServiceLoader.load(Client.class).iterator(); i.hasNext(); )\n+        TypeUtil.serviceLoaderStream(ServiceLoader.load(Client.class)).flatMap(TypeUtil::providerMap).forEach((processor) ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6b2b3ff98254c8932fbaa0363d77f91bf473949"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIwNDY5Mw==", "bodyText": "What does the second option give you that the existing ServiceLoader.stream() doesn't?\nhttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ServiceLoader.html#stream()", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392204693", "createdAt": "2020-03-13T12:44:50Z", "author": {"login": "joakime"}, "path": "jetty-alpn/jetty-alpn-client/src/main/java/org/eclipse/jetty/alpn/client/ALPNClientConnectionFactory.java", "diffHunk": "@@ -54,21 +54,8 @@ public ALPNClientConnectionFactory(Executor executor, ClientConnectionFactory co\n         IllegalStateException failure = new IllegalStateException(\"No Client ALPNProcessors!\");\n \n         // Use a for loop on iterator so load exceptions can be caught and ignored\n-        for (Iterator<Client> i = ServiceLoader.load(Client.class).iterator(); i.hasNext(); )\n+        TypeUtil.serviceLoaderStream(ServiceLoader.load(Client.class)).flatMap(TypeUtil::providerMap).forEach((processor) ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2NDMzMQ=="}, "originalCommit": {"oid": "a6b2b3ff98254c8932fbaa0363d77f91bf473949"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NzEyMg==", "bodyText": "@joakime our version actually works!   The ServiceLoader stream implementation has a bug, because it uses the iterator internally and does not protect against the cases that hasNext can throw.    If the JVM folks accept this is a bug and undertake to fix it, then we can deprecate the second option and eventually replace it.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392287122", "createdAt": "2020-03-13T15:09:19Z", "author": {"login": "gregw"}, "path": "jetty-alpn/jetty-alpn-client/src/main/java/org/eclipse/jetty/alpn/client/ALPNClientConnectionFactory.java", "diffHunk": "@@ -54,21 +54,8 @@ public ALPNClientConnectionFactory(Executor executor, ClientConnectionFactory co\n         IllegalStateException failure = new IllegalStateException(\"No Client ALPNProcessors!\");\n \n         // Use a for loop on iterator so load exceptions can be caught and ignored\n-        for (Iterator<Client> i = ServiceLoader.load(Client.class).iterator(); i.hasNext(); )\n+        TypeUtil.serviceLoaderStream(ServiceLoader.load(Client.class)).flatMap(TypeUtil::providerMap).forEach((processor) ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2NDMzMQ=="}, "originalCommit": {"oid": "a6b2b3ff98254c8932fbaa0363d77f91bf473949"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTE0ODE1OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo0MjoxNlrOF2qKKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowMDoyMlrOF3n3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1ODE1Mg==", "bodyText": "I don't think this is right. The point of Provider is to not allocate the service, so calling type() should not allocate the service.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392858152", "createdAt": "2020-03-16T08:42:16Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.Iterator;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+import java.util.Spliterator;\n+import java.util.function.Consumer;\n+\n+class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<T>>\n+{\n+    private final Iterator<T> iterator;\n+\n+    public ServiceLoaderSpliterator(ServiceLoader<T> serviceLoader)\n+    {\n+        iterator = serviceLoader.iterator();\n+    }\n+\n+    @Override\n+    public boolean tryAdvance(Consumer<? super ServiceLoader.Provider<T>> action)\n+    {\n+        Provider<T> next = new Provider<>();\n+        try\n+        {\n+            if (!iterator.hasNext())\n+                return false;\n+            next.setServiceProvider(iterator.next());\n+        }\n+        catch (Throwable t)\n+        {\n+            next.setError(t);\n+        }\n+\n+        action.accept(next);\n+        return true;\n+    }\n+\n+    @Override\n+    public Spliterator<ServiceLoader.Provider<T>> trySplit()\n+    {\n+        return null;\n+    }\n+\n+    @Override\n+    public long estimateSize()\n+    {\n+        return Long.MAX_VALUE;\n+    }\n+\n+    @Override\n+    public int characteristics()\n+    {\n+        return Spliterator.ORDERED;\n+    }\n+\n+    private static class Provider<T> implements ServiceLoader.Provider<T>\n+    {\n+        private T serviceProvider;\n+        private Throwable error;\n+\n+        public void setServiceProvider(T serviceProvider)\n+        {\n+            this.serviceProvider = serviceProvider;\n+        }\n+\n+        public void setError(Throwable error)\n+        {\n+            this.error = error;\n+        }\n+\n+        @Override\n+        @SuppressWarnings(\"unchecked\")\n+        public Class<? extends T> type()\n+        {\n+            return (Class<? extends T>)get().getClass();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af220dade816ff9865708f89119dbe2bc988153"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg4OTEwMw==", "bodyText": "I'm not sure we can avoid this with a Stream<Provider<T>> implemented in terms of an Iterator<T>.  There is no way to get the type from the iterator without getting the instance.   Also for our purposes, if getting the instance throws an exception, we really want to warn and move on, rather than return a type.     I think we should probably just document the limitation and leave as is.  Ultimately we'd like to replace with a real JVM impl without the bug.\n@sbordet have your tried raising this issue with the JVM folks?", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392889103", "createdAt": "2020-03-16T09:40:34Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.Iterator;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+import java.util.Spliterator;\n+import java.util.function.Consumer;\n+\n+class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<T>>\n+{\n+    private final Iterator<T> iterator;\n+\n+    public ServiceLoaderSpliterator(ServiceLoader<T> serviceLoader)\n+    {\n+        iterator = serviceLoader.iterator();\n+    }\n+\n+    @Override\n+    public boolean tryAdvance(Consumer<? super ServiceLoader.Provider<T>> action)\n+    {\n+        Provider<T> next = new Provider<>();\n+        try\n+        {\n+            if (!iterator.hasNext())\n+                return false;\n+            next.setServiceProvider(iterator.next());\n+        }\n+        catch (Throwable t)\n+        {\n+            next.setError(t);\n+        }\n+\n+        action.accept(next);\n+        return true;\n+    }\n+\n+    @Override\n+    public Spliterator<ServiceLoader.Provider<T>> trySplit()\n+    {\n+        return null;\n+    }\n+\n+    @Override\n+    public long estimateSize()\n+    {\n+        return Long.MAX_VALUE;\n+    }\n+\n+    @Override\n+    public int characteristics()\n+    {\n+        return Spliterator.ORDERED;\n+    }\n+\n+    private static class Provider<T> implements ServiceLoader.Provider<T>\n+    {\n+        private T serviceProvider;\n+        private Throwable error;\n+\n+        public void setServiceProvider(T serviceProvider)\n+        {\n+            this.serviceProvider = serviceProvider;\n+        }\n+\n+        public void setError(Throwable error)\n+        {\n+            this.error = error;\n+        }\n+\n+        @Override\n+        @SuppressWarnings(\"unchecked\")\n+        public Class<? extends T> type()\n+        {\n+            return (Class<? extends T>)get().getClass();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1ODE1Mg=="}, "originalCommit": {"oid": "7af220dade816ff9865708f89119dbe2bc988153"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2OTExMQ==", "bodyText": "ServiceLoader.Provider.type() returns the type of the service found, before it's attempted to be loaded.  You can think of it as returning the string in the META-INF/services/<service-impl> file.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393869111", "createdAt": "2020-03-17T18:00:22Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.Iterator;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+import java.util.Spliterator;\n+import java.util.function.Consumer;\n+\n+class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<T>>\n+{\n+    private final Iterator<T> iterator;\n+\n+    public ServiceLoaderSpliterator(ServiceLoader<T> serviceLoader)\n+    {\n+        iterator = serviceLoader.iterator();\n+    }\n+\n+    @Override\n+    public boolean tryAdvance(Consumer<? super ServiceLoader.Provider<T>> action)\n+    {\n+        Provider<T> next = new Provider<>();\n+        try\n+        {\n+            if (!iterator.hasNext())\n+                return false;\n+            next.setServiceProvider(iterator.next());\n+        }\n+        catch (Throwable t)\n+        {\n+            next.setError(t);\n+        }\n+\n+        action.accept(next);\n+        return true;\n+    }\n+\n+    @Override\n+    public Spliterator<ServiceLoader.Provider<T>> trySplit()\n+    {\n+        return null;\n+    }\n+\n+    @Override\n+    public long estimateSize()\n+    {\n+        return Long.MAX_VALUE;\n+    }\n+\n+    @Override\n+    public int characteristics()\n+    {\n+        return Spliterator.ORDERED;\n+    }\n+\n+    private static class Provider<T> implements ServiceLoader.Provider<T>\n+    {\n+        private T serviceProvider;\n+        private Throwable error;\n+\n+        public void setServiceProvider(T serviceProvider)\n+        {\n+            this.serviceProvider = serviceProvider;\n+        }\n+\n+        public void setError(Throwable error)\n+        {\n+            this.error = error;\n+        }\n+\n+        @Override\n+        @SuppressWarnings(\"unchecked\")\n+        public Class<? extends T> type()\n+        {\n+            return (Class<? extends T>)get().getClass();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1ODE1Mg=="}, "originalCommit": {"oid": "7af220dade816ff9865708f89119dbe2bc988153"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTE1MzQxOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo0Mzo0N1rOF2qNRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo0Mzo0N1rOF2qNRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1ODk0OQ==", "bodyText": "Would be great if both serviceProvider and error can be made final.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392858949", "createdAt": "2020-03-16T08:43:47Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.Iterator;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+import java.util.Spliterator;\n+import java.util.function.Consumer;\n+\n+class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<T>>\n+{\n+    private final Iterator<T> iterator;\n+\n+    public ServiceLoaderSpliterator(ServiceLoader<T> serviceLoader)\n+    {\n+        iterator = serviceLoader.iterator();\n+    }\n+\n+    @Override\n+    public boolean tryAdvance(Consumer<? super ServiceLoader.Provider<T>> action)\n+    {\n+        Provider<T> next = new Provider<>();\n+        try\n+        {\n+            if (!iterator.hasNext())\n+                return false;\n+            next.setServiceProvider(iterator.next());\n+        }\n+        catch (Throwable t)\n+        {\n+            next.setError(t);\n+        }\n+\n+        action.accept(next);\n+        return true;\n+    }\n+\n+    @Override\n+    public Spliterator<ServiceLoader.Provider<T>> trySplit()\n+    {\n+        return null;\n+    }\n+\n+    @Override\n+    public long estimateSize()\n+    {\n+        return Long.MAX_VALUE;\n+    }\n+\n+    @Override\n+    public int characteristics()\n+    {\n+        return Spliterator.ORDERED;\n+    }\n+\n+    private static class Provider<T> implements ServiceLoader.Provider<T>\n+    {\n+        private T serviceProvider;\n+        private Throwable error;\n+\n+        public void setServiceProvider(T serviceProvider)\n+        {\n+            this.serviceProvider = serviceProvider;\n+        }\n+\n+        public void setError(Throwable error)\n+        {\n+            this.error = error;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af220dade816ff9865708f89119dbe2bc988153"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTE1NzQwOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo0NTowMlrOF2qPug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo0NTowMlrOF2qPug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1OTU3OA==", "bodyText": "Create the Provider instance here, rather than using a setter, so the ServiceProvider can be a final field.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392859578", "createdAt": "2020-03-16T08:45:02Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.Iterator;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+import java.util.Spliterator;\n+import java.util.function.Consumer;\n+\n+class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<T>>\n+{\n+    private final Iterator<T> iterator;\n+\n+    public ServiceLoaderSpliterator(ServiceLoader<T> serviceLoader)\n+    {\n+        iterator = serviceLoader.iterator();\n+    }\n+\n+    @Override\n+    public boolean tryAdvance(Consumer<? super ServiceLoader.Provider<T>> action)\n+    {\n+        Provider<T> next = new Provider<>();\n+        try\n+        {\n+            if (!iterator.hasNext())\n+                return false;\n+            next.setServiceProvider(iterator.next());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af220dade816ff9865708f89119dbe2bc988153"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTE1ODUxOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo0NToyM1rOF2qQaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo0NToyM1rOF2qQaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1OTc1NQ==", "bodyText": "Create the Provider instance here, rather than using a setter, so the error can be a final field.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392859755", "createdAt": "2020-03-16T08:45:23Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.Iterator;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+import java.util.Spliterator;\n+import java.util.function.Consumer;\n+\n+class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<T>>\n+{\n+    private final Iterator<T> iterator;\n+\n+    public ServiceLoaderSpliterator(ServiceLoader<T> serviceLoader)\n+    {\n+        iterator = serviceLoader.iterator();\n+    }\n+\n+    @Override\n+    public boolean tryAdvance(Consumer<? super ServiceLoader.Provider<T>> action)\n+    {\n+        Provider<T> next = new Provider<>();\n+        try\n+        {\n+            if (!iterator.hasNext())\n+                return false;\n+            next.setServiceProvider(iterator.next());\n+        }\n+        catch (Throwable t)\n+        {\n+            next.setError(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af220dade816ff9865708f89119dbe2bc988153"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTE3OTU1OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo1MTozOVrOF2qc6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo1MTozOVrOF2qc6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Mjk1NA==", "bodyText": "Type parameter <T> is not necessary.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392862954", "createdAt": "2020-03-16T08:51:39Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +756,52 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Used on a {@link ServiceLoader#stream()} with {@link Stream#flatMap(Function)},\n+     * so that in the case a {@link ServiceConfigurationError} is thrown it warns and\n+     * continues iterating through the service loader.\n+     * <br>Usage Example:\n+     * <p>{@code ServiceLoader.load(Service.class).stream().flatMap(TypeUtil::providerMap).collect(Collectors.toList());}</p>\n+     * @param <T> The class of the service type.\n+     * @param provider The service provider to instantiate.\n+     * @return a stream of the loaded service providers.\n+     */\n+    public static <T> Stream<T> providerMap(ServiceLoader.Provider<T> provider)\n+    {\n+        try\n+        {\n+            return Stream.of(provider.get());\n+        }\n+        catch (ServiceConfigurationError error)\n+        {\n+            LOG.warn(\"Service Provider failed to load\", error);\n+            return Stream.empty();\n+        }\n+    }\n+\n+    /**\n+     * Shortcut method combining {@link #serviceProviderStream(ServiceLoader)} with\n+     * with {@link #providerMap(ServiceLoader.Provider)} using {@link Stream#flatMap(Function)}.\n+     * @param serviceLoader the ServiceLoader instance to use.\n+     * @param <T> the type of the service to load.\n+     * @return a stream of the service provider type which will not throw {@link ServiceConfigurationError}.\n+     */\n+    public static <T> Stream<T> serviceStream(ServiceLoader<T> serviceLoader)\n+    {\n+        return serviceProviderStream(serviceLoader).flatMap(TypeUtil::providerMap);\n+    }\n+\n+    /**\n+     * Utility to create a stream which provides the same functionality as {@link ServiceLoader#stream()}.\n+     * However this also guards the case in which {@link Iterator#hasNext()} throws. Any exceptions\n+     * from the underlying iterator will be cached until the {@link ServiceLoader.Provider#get()} is called.\n+     * @param serviceLoader the ServiceLoader instance to use.\n+     * @param <T> the type of the service to load.\n+     * @return A stream that lazily loads providers for this loader's service\n+     */\n+    public static <T> Stream<ServiceLoader.Provider<T>> serviceProviderStream(ServiceLoader<T> serviceLoader)\n+    {\n+        return StreamSupport.stream(new ServiceLoaderSpliterator<T>(serviceLoader), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af220dade816ff9865708f89119dbe2bc988153"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTE4MTIxOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo1MjoxMlrOF2qd8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0MjozMlrOF3pZoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2MzIxOA==", "bodyText": "This method should be private.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392863218", "createdAt": "2020-03-16T08:52:12Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +756,52 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Used on a {@link ServiceLoader#stream()} with {@link Stream#flatMap(Function)},\n+     * so that in the case a {@link ServiceConfigurationError} is thrown it warns and\n+     * continues iterating through the service loader.\n+     * <br>Usage Example:\n+     * <p>{@code ServiceLoader.load(Service.class).stream().flatMap(TypeUtil::providerMap).collect(Collectors.toList());}</p>\n+     * @param <T> The class of the service type.\n+     * @param provider The service provider to instantiate.\n+     * @return a stream of the loaded service providers.\n+     */\n+    public static <T> Stream<T> providerMap(ServiceLoader.Provider<T> provider)\n+    {\n+        try\n+        {\n+            return Stream.of(provider.get());\n+        }\n+        catch (ServiceConfigurationError error)\n+        {\n+            LOG.warn(\"Service Provider failed to load\", error);\n+            return Stream.empty();\n+        }\n+    }\n+\n+    /**\n+     * Shortcut method combining {@link #serviceProviderStream(ServiceLoader)} with\n+     * with {@link #providerMap(ServiceLoader.Provider)} using {@link Stream#flatMap(Function)}.\n+     * @param serviceLoader the ServiceLoader instance to use.\n+     * @param <T> the type of the service to load.\n+     * @return a stream of the service provider type which will not throw {@link ServiceConfigurationError}.\n+     */\n+    public static <T> Stream<T> serviceStream(ServiceLoader<T> serviceLoader)\n+    {\n+        return serviceProviderStream(serviceLoader).flatMap(TypeUtil::providerMap);\n+    }\n+\n+    /**\n+     * Utility to create a stream which provides the same functionality as {@link ServiceLoader#stream()}.\n+     * However this also guards the case in which {@link Iterator#hasNext()} throws. Any exceptions\n+     * from the underlying iterator will be cached until the {@link ServiceLoader.Provider#get()} is called.\n+     * @param serviceLoader the ServiceLoader instance to use.\n+     * @param <T> the type of the service to load.\n+     * @return A stream that lazily loads providers for this loader's service\n+     */\n+    public static <T> Stream<ServiceLoader.Provider<T>> serviceProviderStream(ServiceLoader<T> serviceLoader)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af220dade816ff9865708f89119dbe2bc988153"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NDMwNA==", "bodyText": "Should be private.\nBoth mapToService() and serviceProviderStream() should be inlined in serviceStream(), there is no value in having them separate.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393894304", "createdAt": "2020-03-17T18:42:32Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +756,52 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Used on a {@link ServiceLoader#stream()} with {@link Stream#flatMap(Function)},\n+     * so that in the case a {@link ServiceConfigurationError} is thrown it warns and\n+     * continues iterating through the service loader.\n+     * <br>Usage Example:\n+     * <p>{@code ServiceLoader.load(Service.class).stream().flatMap(TypeUtil::providerMap).collect(Collectors.toList());}</p>\n+     * @param <T> The class of the service type.\n+     * @param provider The service provider to instantiate.\n+     * @return a stream of the loaded service providers.\n+     */\n+    public static <T> Stream<T> providerMap(ServiceLoader.Provider<T> provider)\n+    {\n+        try\n+        {\n+            return Stream.of(provider.get());\n+        }\n+        catch (ServiceConfigurationError error)\n+        {\n+            LOG.warn(\"Service Provider failed to load\", error);\n+            return Stream.empty();\n+        }\n+    }\n+\n+    /**\n+     * Shortcut method combining {@link #serviceProviderStream(ServiceLoader)} with\n+     * with {@link #providerMap(ServiceLoader.Provider)} using {@link Stream#flatMap(Function)}.\n+     * @param serviceLoader the ServiceLoader instance to use.\n+     * @param <T> the type of the service to load.\n+     * @return a stream of the service provider type which will not throw {@link ServiceConfigurationError}.\n+     */\n+    public static <T> Stream<T> serviceStream(ServiceLoader<T> serviceLoader)\n+    {\n+        return serviceProviderStream(serviceLoader).flatMap(TypeUtil::providerMap);\n+    }\n+\n+    /**\n+     * Utility to create a stream which provides the same functionality as {@link ServiceLoader#stream()}.\n+     * However this also guards the case in which {@link Iterator#hasNext()} throws. Any exceptions\n+     * from the underlying iterator will be cached until the {@link ServiceLoader.Provider#get()} is called.\n+     * @param serviceLoader the ServiceLoader instance to use.\n+     * @param <T> the type of the service to load.\n+     * @return A stream that lazily loads providers for this loader's service\n+     */\n+    public static <T> Stream<ServiceLoader.Provider<T>> serviceProviderStream(ServiceLoader<T> serviceLoader)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2MzIxOA=="}, "originalCommit": {"oid": "7af220dade816ff9865708f89119dbe2bc988153"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTIwNDU3OnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo1OTowNVrOF2qr7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNDoxOTo0NlrOF3NfwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Njc5Nw==", "bodyText": "This should be called mapToService(), or providerToService since it maps a provider to a service. The fact that it wraps the service into a Stream is an implementation detail, and so much so that the method should be private.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392866797", "createdAt": "2020-03-16T08:59:05Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +756,52 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Used on a {@link ServiceLoader#stream()} with {@link Stream#flatMap(Function)},\n+     * so that in the case a {@link ServiceConfigurationError} is thrown it warns and\n+     * continues iterating through the service loader.\n+     * <br>Usage Example:\n+     * <p>{@code ServiceLoader.load(Service.class).stream().flatMap(TypeUtil::providerMap).collect(Collectors.toList());}</p>\n+     * @param <T> The class of the service type.\n+     * @param provider The service provider to instantiate.\n+     * @return a stream of the loaded service providers.\n+     */\n+    public static <T> Stream<T> providerMap(ServiceLoader.Provider<T> provider)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af220dade816ff9865708f89119dbe2bc988153"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzNzEyMA==", "bodyText": "The plan was to have mapToService as public because when the JVM implementation for ServiceLoader.stream() is fixed we could change our code to instead use serviceLoader.stream().flatMap(TypeUtil::mapToService); and remove our implementations for serviceStream(ServiceLoader<T>) and serviceProviderStream(ServiceLoader<T>).", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393437120", "createdAt": "2020-03-17T04:19:46Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +756,52 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Used on a {@link ServiceLoader#stream()} with {@link Stream#flatMap(Function)},\n+     * so that in the case a {@link ServiceConfigurationError} is thrown it warns and\n+     * continues iterating through the service loader.\n+     * <br>Usage Example:\n+     * <p>{@code ServiceLoader.load(Service.class).stream().flatMap(TypeUtil::providerMap).collect(Collectors.toList());}</p>\n+     * @param <T> The class of the service type.\n+     * @param provider The service provider to instantiate.\n+     * @return a stream of the loaded service providers.\n+     */\n+    public static <T> Stream<T> providerMap(ServiceLoader.Provider<T> provider)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Njc5Nw=="}, "originalCommit": {"oid": "7af220dade816ff9865708f89119dbe2bc988153"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTMxODczOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTozMzoyN1rOF2rzWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTozMzoyN1rOF2rzWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg4NTA4MA==", "bodyText": "This is wrongly named. It is the providedService not the serviceProvider", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392885080", "createdAt": "2020-03-16T09:33:27Z", "author": {"login": "gregw"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.Iterator;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+import java.util.Spliterator;\n+import java.util.function.Consumer;\n+\n+class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<T>>\n+{\n+    private final Iterator<T> iterator;\n+\n+    public ServiceLoaderSpliterator(ServiceLoader<T> serviceLoader)\n+    {\n+        iterator = serviceLoader.iterator();\n+    }\n+\n+    @Override\n+    public boolean tryAdvance(Consumer<? super ServiceLoader.Provider<T>> action)\n+    {\n+        Provider<T> next = new Provider<>();\n+        try\n+        {\n+            if (!iterator.hasNext())\n+                return false;\n+            next.setServiceProvider(iterator.next());\n+        }\n+        catch (Throwable t)\n+        {\n+            next.setError(t);\n+        }\n+\n+        action.accept(next);\n+        return true;\n+    }\n+\n+    @Override\n+    public Spliterator<ServiceLoader.Provider<T>> trySplit()\n+    {\n+        return null;\n+    }\n+\n+    @Override\n+    public long estimateSize()\n+    {\n+        return Long.MAX_VALUE;\n+    }\n+\n+    @Override\n+    public int characteristics()\n+    {\n+        return Spliterator.ORDERED;\n+    }\n+\n+    private static class Provider<T> implements ServiceLoader.Provider<T>\n+    {\n+        private T serviceProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af220dade816ff9865708f89119dbe2bc988153"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTUzMDA1OnYy", "diffSide": "RIGHT", "path": "jetty-security/src/main/java/org/eclipse/jetty/security/SecurityHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODozNzo1MFrOF3pO_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjowMzowN1rOF5IaKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MTU4Mw==", "bodyText": "This is a different behavior. Before we were throwing if there was a problem finding an Authenticator.Factory, but now we ignore the exception and if we manage to start we won't work and we don't know why.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393891583", "createdAt": "2020-03-17T18:37:50Z", "author": {"login": "sbordet"}, "path": "jetty-security/src/main/java/org/eclipse/jetty/security/SecurityHandler.java", "diffHunk": "@@ -76,11 +77,8 @@\n \n     static\n     {\n-        for (Authenticator.Factory factory : ServiceLoader.load(Authenticator.Factory.class))\n-        {\n-            __knownAuthenticatorFactories.add(factory);\n-        }\n-\n+        TypeUtil.serviceStream(ServiceLoader.load(Authenticator.Factory.class))\n+            .forEach(__knownAuthenticatorFactories::add);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9363a3c39ae6adac229ee50d39de2a630ac55e7d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1MDkyMw==", "bodyText": "Discovering AuthenticatorFactorys with the ServiceLoader is a very recent change so I think this is okay. It will also allow jetty-jaspi to work in jetty-all.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r395450923", "createdAt": "2020-03-20T06:03:07Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-security/src/main/java/org/eclipse/jetty/security/SecurityHandler.java", "diffHunk": "@@ -76,11 +77,8 @@\n \n     static\n     {\n-        for (Authenticator.Factory factory : ServiceLoader.load(Authenticator.Factory.class))\n-        {\n-            __knownAuthenticatorFactories.add(factory);\n-        }\n-\n+        TypeUtil.serviceStream(ServiceLoader.load(Authenticator.Factory.class))\n+            .forEach(__knownAuthenticatorFactories::add);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MTU4Mw=="}, "originalCommit": {"oid": "9363a3c39ae6adac229ee50d39de2a630ac55e7d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTUzMzMwOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/security/Credential.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODozODozOVrOF3pRIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjowMzoxNFrOF5IaQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MjEyOQ==", "bodyText": "Again behavior change, I think we should keep the iterator here, rather than ignoring the exceptions.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393892129", "createdAt": "2020-03-17T18:38:39Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/security/Credential.java", "diffHunk": "@@ -42,7 +44,7 @@\n {\n     private static final long serialVersionUID = -7760551052768181572L;\n     private static final Logger LOG = LoggerFactory.getLogger(Credential.class);\n-    private static final ServiceLoader<CredentialProvider> CREDENTIAL_PROVIDER_LOADER = ServiceLoader.load(CredentialProvider.class);\n+    private static final List<CredentialProvider> CREDENTIAL_PROVIDERS = TypeUtil.serviceStream(ServiceLoader.load(CredentialProvider.class)).collect(Collectors.toList());\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9363a3c39ae6adac229ee50d39de2a630ac55e7d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1MDk0Ng==", "bodyText": "Here we were previously iterating through the ServiceLoader on every call to getCredential. I don't think we would want to keep that behaviour, but I will change it to throw on an error.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r395450946", "createdAt": "2020-03-20T06:03:14Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/security/Credential.java", "diffHunk": "@@ -42,7 +44,7 @@\n {\n     private static final long serialVersionUID = -7760551052768181572L;\n     private static final Logger LOG = LoggerFactory.getLogger(Credential.class);\n-    private static final ServiceLoader<CredentialProvider> CREDENTIAL_PROVIDER_LOADER = ServiceLoader.load(CredentialProvider.class);\n+    private static final List<CredentialProvider> CREDENTIAL_PROVIDERS = TypeUtil.serviceStream(ServiceLoader.load(CredentialProvider.class)).collect(Collectors.toList());\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MjEyOQ=="}, "originalCommit": {"oid": "9363a3c39ae6adac229ee50d39de2a630ac55e7d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTUzNDkwOnYy", "diffSide": "RIGHT", "path": "jetty-security/src/main/java/org/eclipse/jetty/security/SecurityHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODozOToxMVrOF3pSPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODozOToxMVrOF3pSPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MjQxMw==", "bodyText": "Ignoring the failure would let jetty-all with jetty-jaspi work (see #4621)\nPerhaps this should be backported to jetty 9.4.x?", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393892413", "createdAt": "2020-03-17T18:39:11Z", "author": {"login": "joakime"}, "path": "jetty-security/src/main/java/org/eclipse/jetty/security/SecurityHandler.java", "diffHunk": "@@ -76,11 +77,8 @@\n \n     static\n     {\n-        for (Authenticator.Factory factory : ServiceLoader.load(Authenticator.Factory.class))\n-        {\n-            __knownAuthenticatorFactories.add(factory);\n-        }\n-\n+        TypeUtil.serviceStream(ServiceLoader.load(Authenticator.Factory.class))\n+            .forEach(__knownAuthenticatorFactories::add);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9363a3c39ae6adac229ee50d39de2a630ac55e7d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTUzNTA3OnYy", "diffSide": "RIGHT", "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/Configurations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODozOToxN1rOF3pSZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODozOToxN1rOF3pSZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MjQ1NA==", "bodyText": "Again behavior change, do we really want to ignore exceptions here?", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393892454", "createdAt": "2020-03-17T18:39:17Z", "author": {"login": "sbordet"}, "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/Configurations.java", "diffHunk": "@@ -74,27 +75,18 @@\n     {\n         if (__known.isEmpty())\n         {\n-            ServiceLoader<Configuration> configs = ServiceLoader.load(Configuration.class);\n-            for (Iterator<Configuration> i = configs.iterator(); i.hasNext(); )\n+            TypeUtil.serviceStream(ServiceLoader.load(Configuration.class)).forEach(configuration ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9363a3c39ae6adac229ee50d39de2a630ac55e7d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTUzNjIzOnYy", "diffSide": "RIGHT", "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODozOTozN1rOF3pTIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODozOTozN1rOF3pTIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MjY0MQ==", "bodyText": "Again behavior change, is that ok?", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393892641", "createdAt": "2020-03-17T18:39:37Z", "author": {"login": "sbordet"}, "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "diffHunk": "@@ -96,7 +97,8 @@\n         {\n             ArrayList.class, HashSet.class, Queue.class, List.class, Set.class, Collection.class\n         };\n-    private static final Iterable<ConfigurationProcessorFactory> PROCESSOR_FACTORIES = ServiceLoader.load(ConfigurationProcessorFactory.class);\n+    private static final List<ConfigurationProcessorFactory> PROCESSOR_FACTORIES = TypeUtil.serviceStream(ServiceLoader.load(ConfigurationProcessorFactory.class))\n+        .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9363a3c39ae6adac229ee50d39de2a630ac55e7d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU0MzQzOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0MTo0MlrOF3pX1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0MTo0MlrOF3pX1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5Mzg0Ng==", "bodyText": "Make it private.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393893846", "createdAt": "2020-03-17T18:41:42Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +756,52 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Used on a {@link ServiceLoader#stream()} with {@link Stream#flatMap(Function)},\n+     * so that in the case a {@link ServiceConfigurationError} is thrown it warns and\n+     * continues iterating through the service loader.\n+     * <br>Usage Example:\n+     * <p>{@code ServiceLoader.load(Service.class).stream().flatMap(TypeUtil::providerMap).collect(Collectors.toList());}</p>\n+     * @param <T> The class of the service type.\n+     * @param provider The service provider to instantiate.\n+     * @return a stream of the loaded service providers.\n+     */\n+    public static <T> Stream<T> mapToService(ServiceLoader.Provider<T> provider)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9363a3c39ae6adac229ee50d39de2a630ac55e7d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU0MzkyOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0MTo1MlrOF3pYLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0MTo1MlrOF3pYLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MzkzMg==", "bodyText": "Can we have this be the only public API?\nMake the other 2 APIs be private (or even inlined into this method)", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393893932", "createdAt": "2020-03-17T18:41:52Z", "author": {"login": "joakime"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +756,52 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Used on a {@link ServiceLoader#stream()} with {@link Stream#flatMap(Function)},\n+     * so that in the case a {@link ServiceConfigurationError} is thrown it warns and\n+     * continues iterating through the service loader.\n+     * <br>Usage Example:\n+     * <p>{@code ServiceLoader.load(Service.class).stream().flatMap(TypeUtil::providerMap).collect(Collectors.toList());}</p>\n+     * @param <T> The class of the service type.\n+     * @param provider The service provider to instantiate.\n+     * @return a stream of the loaded service providers.\n+     */\n+    public static <T> Stream<T> mapToService(ServiceLoader.Provider<T> provider)\n+    {\n+        try\n+        {\n+            return Stream.of(provider.get());\n+        }\n+        catch (ServiceConfigurationError error)\n+        {\n+            LOG.warn(\"Service Provider failed to load\", error);\n+            return Stream.empty();\n+        }\n+    }\n+\n+    /**\n+     * Shortcut method combining {@link #serviceProviderStream(ServiceLoader)} with\n+     * with {@link #mapToService(ServiceLoader.Provider)} using {@link Stream#flatMap(Function)}.\n+     * @param serviceLoader the ServiceLoader instance to use.\n+     * @param <T> the type of the service to load.\n+     * @return a stream of the service provider type which will not throw {@link ServiceConfigurationError}.\n+     */\n+    public static <T> Stream<T> serviceStream(ServiceLoader<T> serviceLoader)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9363a3c39ae6adac229ee50d39de2a630ac55e7d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU5NTgxOnYy", "diffSide": "RIGHT", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo1NzozNlrOF3p6ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo1NzozNlrOF3p6ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwMjc1NQ==", "bodyText": "I don't think this is what we want.\nProvider is a layer that delays the allocation of the service. Only when get() is called the allocation of the service happens.\nThis implementation allocates the service early and then wraps it into a Provider that does not \"delay\", so it changes the semantic of using a Provider.\nIt would be the same to have a Spliterator<T> at this point.", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393902755", "createdAt": "2020-03-17T18:57:36Z", "author": {"login": "sbordet"}, "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "diffHunk": "@@ -0,0 +1,110 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.Iterator;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+import java.util.Spliterator;\n+import java.util.function.Consumer;\n+\n+class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<T>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9363a3c39ae6adac229ee50d39de2a630ac55e7d"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2643, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}