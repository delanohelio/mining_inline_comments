{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNTc1NTI2", "number": 5195, "title": "Issue #5185 - Add DoSFilter Listener to allow extensible behavior", "bodyText": "Currently there's no way to respond to rejected/throttled/delayed\nrequests that the DoSFilter impacts.\nA Listener has been added to allow for any behaviors needed\nby a user of the DoSFilter on requests that have been\nimpacted by the DoSFilter.\n\nSigned-off-by: Joakim Erdfelt joakim.erdfelt@gmail.com", "createdAt": "2020-08-24T14:51:19Z", "url": "https://github.com/eclipse/jetty.project/pull/5195", "merged": true, "mergeCommit": {"oid": "be86e66e7718c34614def6c8922e1cde373a6cf3"}, "closed": true, "closedAt": "2020-09-03T19:10:30Z", "author": {"login": "joakime"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCEtb-AFqTQ3MzYyNjY2MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFCsX2ABqjM3MjE4MDAyNDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNjI2NjYx", "url": "https://github.com/eclipse/jetty.project/pull/5195#pullrequestreview-473626661", "createdAt": "2020-08-24T15:44:52Z", "commit": {"oid": "b75fe500380cc331fbe3911ae9438bc039b0b7a4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo0NDo1M1rOHFrHqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo0NDo1M1rOHFrHqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMTQwMQ==", "bodyText": "The comment says we should fall through to throttle the request, but we are not!!   Comments should be \"break to throttle...\"", "url": "https://github.com/eclipse/jetty.project/pull/5195#discussion_r475711401", "createdAt": "2020-08-24T15:44:53Z", "author": {"login": "gregw"}, "path": "jetty-servlets/src/main/java/org/eclipse/jetty/servlets/DoSFilter.java", "diffHunk": "@@ -345,15 +347,15 @@ protected void doFilter(HttpServletRequest request, HttpServletResponse response\n                 case 0:\n                 {\n                     // Fall through to throttle the request.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b75fe500380cc331fbe3911ae9438bc039b0b7a4"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NTgxNzI5", "url": "https://github.com/eclipse/jetty.project/pull/5195#pullrequestreview-474581729", "createdAt": "2020-08-25T15:11:48Z", "commit": {"oid": "aa59124ac359790d9cd5c6b76ac050b00eb92b30"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNToxMTo0OFrOHGc2tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNToxNTowN1rOHGdASg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUyNjI2Mw==", "bodyText": "I wouldn't bother with working out a wantedAction and passing that in.\nThe default listener can be made able to see getDelayMs() and thus work out the action itself.   We should just delegate policy, not delegate a policy override.", "url": "https://github.com/eclipse/jetty.project/pull/5195#discussion_r476526263", "createdAt": "2020-08-25T15:11:48Z", "author": {"login": "gregw"}, "path": "jetty-servlets/src/main/java/org/eclipse/jetty/servlets/DoSFilter.java", "diffHunk": "@@ -305,67 +307,80 @@ protected void doFilter(HttpServletRequest request, HttpServletResponse response\n \n         // Look for the rate tracker for this request.\n         RateTracker tracker = (RateTracker)request.getAttribute(__TRACKER);\n-        if (tracker == null)\n+        if (tracker != null)\n+        {\n+            // Redispatched, RateTracker present in request attributes.\n+            throttleRequest(request, response, filterChain, tracker);\n+            return;\n+        }\n+\n+        // This is the first time we have seen this request.\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"Filtering {}\", request);\n+\n+        // Get a rate tracker associated with this request, and record one hit.\n+        tracker = getRateTracker(request);\n+\n+        // Calculate the rate and check if it is over the allowed limit\n+        final boolean overRateLimit = tracker.isRateExceeded(System.currentTimeMillis());\n+\n+        // Pass it through if we are not currently over the rate limit.\n+        if (!overRateLimit)\n         {\n-            // This is the first time we have seen this request.\n             if (LOG.isDebugEnabled())\n-                LOG.debug(\"Filtering {}\", request);\n+                LOG.debug(\"Allowing {}\", request);\n+            doFilterChain(filterChain, request, response);\n+            return;\n+        }\n \n-            // Get a rate tracker associated with this request, and record one hit.\n-            tracker = getRateTracker(request);\n+        // We are over the limit.\n \n-            // Calculate the rate and check if it is over the allowed limit\n-            final boolean overRateLimit = tracker.isRateExceeded(System.currentTimeMillis());\n+        // So either reject it, delay it or throttle it.\n+        long delayMs = getDelayMs();\n+        Action wantedAction;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa59124ac359790d9cd5c6b76ac050b00eb92b30"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUyNzU3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        case REJECT:\n          \n          \n            \n                        case ABORT\n          \n          \n            \n                            response.sendError(-1); // causes an abort\n          \n          \n            \n                            break;\n          \n          \n            \n                            \n          \n          \n            \n                        case REJECT:", "url": "https://github.com/eclipse/jetty.project/pull/5195#discussion_r476527576", "createdAt": "2020-08-25T15:13:39Z", "author": {"login": "gregw"}, "path": "jetty-servlets/src/main/java/org/eclipse/jetty/servlets/DoSFilter.java", "diffHunk": "@@ -305,67 +307,80 @@ protected void doFilter(HttpServletRequest request, HttpServletResponse response\n \n         // Look for the rate tracker for this request.\n         RateTracker tracker = (RateTracker)request.getAttribute(__TRACKER);\n-        if (tracker == null)\n+        if (tracker != null)\n+        {\n+            // Redispatched, RateTracker present in request attributes.\n+            throttleRequest(request, response, filterChain, tracker);\n+            return;\n+        }\n+\n+        // This is the first time we have seen this request.\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"Filtering {}\", request);\n+\n+        // Get a rate tracker associated with this request, and record one hit.\n+        tracker = getRateTracker(request);\n+\n+        // Calculate the rate and check if it is over the allowed limit\n+        final boolean overRateLimit = tracker.isRateExceeded(System.currentTimeMillis());\n+\n+        // Pass it through if we are not currently over the rate limit.\n+        if (!overRateLimit)\n         {\n-            // This is the first time we have seen this request.\n             if (LOG.isDebugEnabled())\n-                LOG.debug(\"Filtering {}\", request);\n+                LOG.debug(\"Allowing {}\", request);\n+            doFilterChain(filterChain, request, response);\n+            return;\n+        }\n \n-            // Get a rate tracker associated with this request, and record one hit.\n-            tracker = getRateTracker(request);\n+        // We are over the limit.\n \n-            // Calculate the rate and check if it is over the allowed limit\n-            final boolean overRateLimit = tracker.isRateExceeded(System.currentTimeMillis());\n+        // So either reject it, delay it or throttle it.\n+        long delayMs = getDelayMs();\n+        Action wantedAction;\n+        if (delayMs == -1)\n+            wantedAction = Action.REJECT;\n+        else if (delayMs == 0)\n+            wantedAction = Action.THROTTLE;\n+        else\n+            wantedAction = Action.DELAY;\n \n-            // Pass it through if we are not currently over the rate limit.\n-            if (!overRateLimit)\n-            {\n+        // Ask listener what to perform.\n+        Action action = _listener.onRequestOverLimit(wantedAction, request, this);\n+\n+        // Perform action\n+        boolean insertHeaders = isInsertHeaders();\n+        switch (action)\n+        {\n+            case NO_ACTION:\n                 if (LOG.isDebugEnabled())\n-                    LOG.debug(\"Allowing {}\", request);\n+                    LOG.debug(\"Allowing over-limit request {}\", request);\n                 doFilterChain(filterChain, request, response);\n-                return;\n-            }\n-\n-            // We are over the limit.\n-\n-            // So either reject it, delay it or throttle it.\n-            long delayMs = getDelayMs();\n-            boolean insertHeaders = isInsertHeaders();\n-            switch ((int)delayMs)\n-            {\n-                case -1:\n-                {\n-                    // Reject this request.\n-                    LOG.warn(\"DOS ALERT: Request rejected ip={}, session={}, user={}\", request.getRemoteAddr(), request.getRequestedSessionId(), request.getUserPrincipal());\n-                    if (insertHeaders)\n-                        response.addHeader(\"DoSFilter\", \"unavailable\");\n-                    response.sendError(getTooManyCode());\n-                    return;\n-                }\n-                case 0:\n-                {\n-                    // Fall through to throttle the request.\n-                    LOG.warn(\"DOS ALERT: Request throttled ip={}, session={}, user={}\", request.getRemoteAddr(), request.getRequestedSessionId(), request.getUserPrincipal());\n-                    request.setAttribute(__TRACKER, tracker);\n-                    break;\n-                }\n-                default:\n-                {\n-                    // Insert a delay before throttling the request,\n-                    // using the suspend+timeout mechanism of AsyncContext.\n-                    LOG.warn(\"DOS ALERT: Request delayed={}ms, ip={}, session={}, user={}\", delayMs, request.getRemoteAddr(), request.getRequestedSessionId(), request.getUserPrincipal());\n-                    if (insertHeaders)\n-                        response.addHeader(\"DoSFilter\", \"delayed\");\n-                    request.setAttribute(__TRACKER, tracker);\n-                    AsyncContext asyncContext = request.startAsync();\n-                    if (delayMs > 0)\n-                        asyncContext.setTimeout(delayMs);\n-                    asyncContext.addListener(new DoSTimeoutAsyncListener());\n-                    return;\n-                }\n-            }\n+                break;\n+            case REJECT:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa59124ac359790d9cd5c6b76ac050b00eb92b30"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUyODcxNA==", "bodyText": "I still think we should add ABORT.... maybe even a DELAY_THEN_ABORT action.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    NO_ACTION,\n          \n          \n            \n                    REJECT,\n          \n          \n            \n                    DELAY,\n          \n          \n            \n                    THROTTLE;\n          \n          \n            \n                    NO_ACTION,\n          \n          \n            \n                    ABORT,\n          \n          \n            \n                    REJECT,\n          \n          \n            \n                    DELAY,\n          \n          \n            \n                    THROTTLE;", "url": "https://github.com/eclipse/jetty.project/pull/5195#discussion_r476528714", "createdAt": "2020-08-25T15:15:07Z", "author": {"login": "gregw"}, "path": "jetty-servlets/src/main/java/org/eclipse/jetty/servlets/DoSFilter.java", "diffHunk": "@@ -1369,10 +1406,45 @@ public void onTimeout(AsyncEvent event) throws IOException\n         }\n     }\n \n-    private String createRemotePortId(ServletRequest request)\n+    public enum Action\n     {\n-        String addr = request.getRemoteAddr();\n-        int port = request.getRemotePort();\n-        return addr + \":\" + port;\n+        NO_ACTION,\n+        REJECT,\n+        DELAY,\n+        THROTTLE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa59124ac359790d9cd5c6b76ac050b00eb92b30"}, "originalPosition": 205}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1Mzg2OTU4", "url": "https://github.com/eclipse/jetty.project/pull/5195#pullrequestreview-475386958", "createdAt": "2020-08-26T11:14:00Z", "commit": {"oid": "48b6514ddabf99fcb9018b13127b0cf51157571b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMToxNDowMVrOHHHSog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMToyNTozMFrOHHHqGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIyMTUzOA==", "bodyText": "I think it would be good to pass in some info about the actual rate here.\nWe can't pass in the tracker, as that API is not that great.....\nI think passing in the type of the tracker, the number of requests and the period over which there were received may be useful.... even if just to put in the warnings.", "url": "https://github.com/eclipse/jetty.project/pull/5195#discussion_r477221538", "createdAt": "2020-08-26T11:14:01Z", "author": {"login": "gregw"}, "path": "jetty-servlets/src/main/java/org/eclipse/jetty/servlets/DoSFilter.java", "diffHunk": "@@ -1369,10 +1402,77 @@ public void onTimeout(AsyncEvent event) throws IOException\n         }\n     }\n \n-    private String createRemotePortId(ServletRequest request)\n+    public enum Action\n     {\n-        String addr = request.getRemoteAddr();\n-        int port = request.getRemotePort();\n-        return addr + \":\" + port;\n+        /**\n+         * No action is taken against the Request, it is allowed to be processed normally.\n+         */\n+        NO_ACTION,\n+        /**\n+         * The request and response is aborted, no response is sent.\n+         */\n+        ABORT,\n+        /**\n+         * The request is rejected by sending an error based on {@link DoSFilter#getTooManyCode()}\n+         */\n+        REJECT,\n+        /**\n+         * The request is delayed based on {@link DoSFilter#getDelayMs()}\n+         */\n+        DELAY,\n+        /**\n+         * The request is throttled.\n+         */\n+        THROTTLE;\n+\n+        /**\n+         * Obtain the Action based on configured {@link DoSFilter#getDelayMs()}\n+         *\n+         * @param delayMs the delay in milliseconds.\n+         * @return the Action proposed.\n+         */\n+        public static Action fromDelay(long delayMs)\n+        {\n+            if (delayMs < 0)\n+                return Action.REJECT;\n+\n+            if (delayMs == 0)\n+                return Action.THROTTLE;\n+\n+            return Action.DELAY;\n+        }\n+    }\n+\n+    /**\n+     * Listener for actions taken against specific requests.\n+     */\n+    public static class Listener\n+    {\n+        /**\n+         * Process the onRequestOverLimit() behavior.\n+         *\n+         * @param request the request that is over the limit\n+         * @param dosFilter the {@link DoSFilter} that this event occurred on\n+         * @return the action to actually perform.\n+         */\n+        public Action onRequestOverLimit(HttpServletRequest request, DoSFilter dosFilter)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48b6514ddabf99fcb9018b13127b0cf51157571b"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIyNzU0Nw==", "bodyText": "This looks strange.... I know it is the same behaviour as before, but now you have restructured it, I think it  is just wrong to always throttle async dispatched requests.\nI also think it is strange that we can only have a single tracker per request: session or IP or UserID.   We should probably track all three for a single request... but maybe that is another PR... and maybe in 10.", "url": "https://github.com/eclipse/jetty.project/pull/5195#discussion_r477227547", "createdAt": "2020-08-26T11:25:30Z", "author": {"login": "gregw"}, "path": "jetty-servlets/src/main/java/org/eclipse/jetty/servlets/DoSFilter.java", "diffHunk": "@@ -305,67 +307,76 @@ protected void doFilter(HttpServletRequest request, HttpServletResponse response\n \n         // Look for the rate tracker for this request.\n         RateTracker tracker = (RateTracker)request.getAttribute(__TRACKER);\n-        if (tracker == null)\n+        if (tracker != null)\n+        {\n+            // Redispatched, RateTracker present in request attributes.\n+            throttleRequest(request, response, filterChain, tracker);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48b6514ddabf99fcb9018b13127b0cf51157571b"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NjkzMDEx", "url": "https://github.com/eclipse/jetty.project/pull/5195#pullrequestreview-479693011", "createdAt": "2020-09-01T12:32:02Z", "commit": {"oid": "51145cd7cf257229e9a150745a30ad6be55a24e9"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjozMjowMlrOHK0GdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjozMjowMlrOHK0GdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEwMTQyOQ==", "bodyText": "Put '@' hashcode between the name and the '['", "url": "https://github.com/eclipse/jetty.project/pull/5195#discussion_r481101429", "createdAt": "2020-09-01T12:32:02Z", "author": {"login": "gregw"}, "path": "jetty-servlets/src/main/java/org/eclipse/jetty/servlets/DoSFilter.java", "diffHunk": "@@ -1297,17 +1346,66 @@ public String toString()\n         {\n             return \"RateTracker/\" + _id + \"/\" + _type;\n         }\n+\n+        public class Overage implements OverLimit\n+        {\n+            private final Duration duration;\n+            private final long count;\n+\n+            public Overage(Duration dur, long count)\n+            {\n+                this.duration = dur;\n+                this.count = count;\n+            }\n+\n+            @Override\n+            public RateType getRateType()\n+            {\n+                return _type;\n+            }\n+\n+            @Override\n+            public String getRateId()\n+            {\n+                return _id;\n+            }\n+\n+            @Override\n+            public Duration getDuration()\n+            {\n+                return duration;\n+            }\n+\n+            @Override\n+            public long getCount()\n+            {\n+                return count;\n+            }\n+\n+            @Override\n+            public String toString()\n+            {\n+                final StringBuilder sb = new StringBuilder(OverLimit.class.getSimpleName());\n+                sb.append(\"[\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51145cd7cf257229e9a150745a30ad6be55a24e9"}, "originalPosition": 432}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8ae3f94769fcbd6db39adb9f6bffac260ad6a39", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/a8ae3f94769fcbd6db39adb9f6bffac260ad6a39", "committedDate": "2020-09-02T21:13:56Z", "message": "Issue #5185 - Add DoSFilter Listener to allow extensible behavior\n\n+ Currently there's no way to respond to rejected/throttled/delayed\n  requests that the DoSFilter impacts.\n  A Listener has been added to allow for any behaviors needed\n  by a user of the DoSFilter on requests that have been\n  impacted by the DoSFilter.\n+ Introducing OverLimit and RateType to DoSFilter internals\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e06b3db995f8760a200b4f10d529951a12113c2d", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/e06b3db995f8760a200b4f10d529951a12113c2d", "committedDate": "2020-09-02T21:12:36Z", "message": "Issue #5185 - Correcting toString output\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}, "afterCommit": {"oid": "a8ae3f94769fcbd6db39adb9f6bffac260ad6a39", "author": {"user": {"login": "joakime", "name": "Joakim Erdfelt"}}, "url": "https://github.com/eclipse/jetty.project/commit/a8ae3f94769fcbd6db39adb9f6bffac260ad6a39", "committedDate": "2020-09-02T21:13:56Z", "message": "Issue #5185 - Add DoSFilter Listener to allow extensible behavior\n\n+ Currently there's no way to respond to rejected/throttled/delayed\n  requests that the DoSFilter impacts.\n  A Listener has been added to allow for any behaviors needed\n  by a user of the DoSFilter on requests that have been\n  impacted by the DoSFilter.\n+ Introducing OverLimit and RateType to DoSFilter internals\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 305, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}