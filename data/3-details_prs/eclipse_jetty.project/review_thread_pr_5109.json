{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxODk2MTk5", "number": 5109, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzozODowNFrOEUf9mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOTo1NjoxN1rOEUixvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTMwNjUwOnYy", "diffSide": "RIGHT", "path": "jetty-websocket/javax-websocket-client-impl/src/main/java/org/eclipse/jetty/websocket/jsr356/JsrSessionTracker.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzozODowNFrOG6vKuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODoyMzoyM1rOG6wdkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI0MzM4NA==", "bodyText": "Using a naked HashSet is way better than CopyOnWriteArraySet.\nHowever, I think you can do even better with Collections.newSetFromMap(new ConcurrentHashMap<>()).\nIn this way, we don't use a lock at all (as CHM will take care of that) and we don't need to do all the work that CopyOnWriteArraySet does.", "url": "https://github.com/eclipse/jetty.project/pull/5109#discussion_r464243384", "createdAt": "2020-08-03T07:38:04Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/javax-websocket-client-impl/src/main/java/org/eclipse/jetty/websocket/jsr356/JsrSessionTracker.java", "diffHunk": "@@ -19,37 +19,47 @@\n package org.eclipse.jetty.websocket.jsr356;\n \n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.Set;\n-import java.util.concurrent.CopyOnWriteArraySet;\n+import javax.websocket.Session;\n \n import org.eclipse.jetty.util.component.AbstractLifeCycle;\n import org.eclipse.jetty.util.component.LifeCycle;\n \n public class JsrSessionTracker extends AbstractLifeCycle implements JsrSessionListener\n {\n-    private CopyOnWriteArraySet<JsrSession> sessions = new CopyOnWriteArraySet<>();\n+    private final Set<JsrSession> sessions = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d37501dce0c32c939dbe0cdb52fad37fac73c60a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI1MDU2Ng==", "bodyText": "This could work, then we would then return a live version of the set on getSessions() instead of a copy like we do with this and CopyOnWriteArraySet.\nI was thinking in the future we might need some sort of concurrent state in the SessionTracker, so that when it is being stopped we can make sure no more sessions are added. And for that we would need something like we have here with the synchronized blocks.", "url": "https://github.com/eclipse/jetty.project/pull/5109#discussion_r464250566", "createdAt": "2020-08-03T07:53:58Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-websocket/javax-websocket-client-impl/src/main/java/org/eclipse/jetty/websocket/jsr356/JsrSessionTracker.java", "diffHunk": "@@ -19,37 +19,47 @@\n package org.eclipse.jetty.websocket.jsr356;\n \n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.Set;\n-import java.util.concurrent.CopyOnWriteArraySet;\n+import javax.websocket.Session;\n \n import org.eclipse.jetty.util.component.AbstractLifeCycle;\n import org.eclipse.jetty.util.component.LifeCycle;\n \n public class JsrSessionTracker extends AbstractLifeCycle implements JsrSessionListener\n {\n-    private CopyOnWriteArraySet<JsrSession> sessions = new CopyOnWriteArraySet<>();\n+    private final Set<JsrSession> sessions = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI0MzM4NA=="}, "originalCommit": {"oid": "d37501dce0c32c939dbe0cdb52fad37fac73c60a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI1NDI4MA==", "bodyText": "@lachlan-roberts you can still return a copy of the list of sessions, to avoid that callers have a direct reference to it - we don't want them doing Session.getSessions().clear().\nSessionTracker is a child bean of ServerContainer or WebSocketClient, so when the container is stopped, no more sessions should be added and SessionTracker could be clear()ed, no?", "url": "https://github.com/eclipse/jetty.project/pull/5109#discussion_r464254280", "createdAt": "2020-08-03T08:01:29Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/javax-websocket-client-impl/src/main/java/org/eclipse/jetty/websocket/jsr356/JsrSessionTracker.java", "diffHunk": "@@ -19,37 +19,47 @@\n package org.eclipse.jetty.websocket.jsr356;\n \n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.Set;\n-import java.util.concurrent.CopyOnWriteArraySet;\n+import javax.websocket.Session;\n \n import org.eclipse.jetty.util.component.AbstractLifeCycle;\n import org.eclipse.jetty.util.component.LifeCycle;\n \n public class JsrSessionTracker extends AbstractLifeCycle implements JsrSessionListener\n {\n-    private CopyOnWriteArraySet<JsrSession> sessions = new CopyOnWriteArraySet<>();\n+    private final Set<JsrSession> sessions = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI0MzM4NA=="}, "originalCommit": {"oid": "d37501dce0c32c939dbe0cdb52fad37fac73c60a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI2MDM4MA==", "bodyText": "@sbordet not really,  in jetty-10 we try shut down the ServerContainer using Graceful and close all the open sessions, this is before the container has been stopped and we are still accepting new requests. See PR #4931.", "url": "https://github.com/eclipse/jetty.project/pull/5109#discussion_r464260380", "createdAt": "2020-08-03T08:14:50Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-websocket/javax-websocket-client-impl/src/main/java/org/eclipse/jetty/websocket/jsr356/JsrSessionTracker.java", "diffHunk": "@@ -19,37 +19,47 @@\n package org.eclipse.jetty.websocket.jsr356;\n \n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.Set;\n-import java.util.concurrent.CopyOnWriteArraySet;\n+import javax.websocket.Session;\n \n import org.eclipse.jetty.util.component.AbstractLifeCycle;\n import org.eclipse.jetty.util.component.LifeCycle;\n \n public class JsrSessionTracker extends AbstractLifeCycle implements JsrSessionListener\n {\n-    private CopyOnWriteArraySet<JsrSession> sessions = new CopyOnWriteArraySet<>();\n+    private final Set<JsrSession> sessions = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI0MzM4NA=="}, "originalCommit": {"oid": "d37501dce0c32c939dbe0cdb52fad37fac73c60a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI2NDU5Mw==", "bodyText": "Don't worry this is an unrelated issue, I will make the changes you suggested an open an issue for this later.", "url": "https://github.com/eclipse/jetty.project/pull/5109#discussion_r464264593", "createdAt": "2020-08-03T08:23:23Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-websocket/javax-websocket-client-impl/src/main/java/org/eclipse/jetty/websocket/jsr356/JsrSessionTracker.java", "diffHunk": "@@ -19,37 +19,47 @@\n package org.eclipse.jetty.websocket.jsr356;\n \n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.Set;\n-import java.util.concurrent.CopyOnWriteArraySet;\n+import javax.websocket.Session;\n \n import org.eclipse.jetty.util.component.AbstractLifeCycle;\n import org.eclipse.jetty.util.component.LifeCycle;\n \n public class JsrSessionTracker extends AbstractLifeCycle implements JsrSessionListener\n {\n-    private CopyOnWriteArraySet<JsrSession> sessions = new CopyOnWriteArraySet<>();\n+    private final Set<JsrSession> sessions = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI0MzM4NA=="}, "originalCommit": {"oid": "d37501dce0c32c939dbe0cdb52fad37fac73c60a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTc2NzY0OnYy", "diffSide": "RIGHT", "path": "jetty-websocket/javax-websocket-client-impl/src/main/java/org/eclipse/jetty/websocket/jsr356/JsrSessionTracker.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOTo1NjoxN1rOG6zdnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOTozNTowOFrOG7Y0lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxMzc1OQ==", "bodyText": "while iterating over the set is thread safe, it doesn't prevent other sessions from being added while you are iterating.  So either you need to ensure that once you are stopping, new sessions can't be added, or you need some outer while (sessions.size()>0) loop.", "url": "https://github.com/eclipse/jetty.project/pull/5109#discussion_r464313759", "createdAt": "2020-08-03T09:56:17Z", "author": {"login": "gregw"}, "path": "jetty-websocket/javax-websocket-client-impl/src/main/java/org/eclipse/jetty/websocket/jsr356/JsrSessionTracker.java", "diffHunk": "@@ -49,7 +51,7 @@ public void onSessionClosed(JsrSession session)\n     @Override\n     protected void doStop() throws Exception\n     {\n-        for (JsrSession session : sessions)\n+        for (Session session : sessions)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85c4fc53350a8162496ed8c79dfc28215e5bb07e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQzNTkxMQ==", "bodyText": "@gregw This is a pre-existing issue and not one that was created by this PR, so maybe better for a different PR. I have reopened #4919 for this issue as well.\nWhat do you think of an approach like this:\nhttps://gist.github.com/lachlan-roberts/6c52d13874628dd3ac5b5ecaaba91123", "url": "https://github.com/eclipse/jetty.project/pull/5109#discussion_r464435911", "createdAt": "2020-08-03T14:06:22Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-websocket/javax-websocket-client-impl/src/main/java/org/eclipse/jetty/websocket/jsr356/JsrSessionTracker.java", "diffHunk": "@@ -49,7 +51,7 @@ public void onSessionClosed(JsrSession session)\n     @Override\n     protected void doStop() throws Exception\n     {\n-        for (JsrSession session : sessions)\n+        for (Session session : sessions)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxMzc1OQ=="}, "originalCommit": {"oid": "85c4fc53350a8162496ed8c79dfc28215e5bb07e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ5MTc0Mg==", "bodyText": "That approach kind of invalidates this PR which is using a concurrent set and no locking, so really need an approach that works with concurrency... hence I think that it should be done as part of this PR.", "url": "https://github.com/eclipse/jetty.project/pull/5109#discussion_r464491742", "createdAt": "2020-08-03T15:33:54Z", "author": {"login": "gregw"}, "path": "jetty-websocket/javax-websocket-client-impl/src/main/java/org/eclipse/jetty/websocket/jsr356/JsrSessionTracker.java", "diffHunk": "@@ -49,7 +51,7 @@ public void onSessionClosed(JsrSession session)\n     @Override\n     protected void doStop() throws Exception\n     {\n-        for (JsrSession session : sessions)\n+        for (Session session : sessions)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxMzc1OQ=="}, "originalCommit": {"oid": "85c4fc53350a8162496ed8c79dfc28215e5bb07e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ5MjY4MQ==", "bodyText": "I think that checking isRunning() before adding is OKish.... but a little racy... which might be able to be handled by again checking isRunning after adding and closing the session just added?", "url": "https://github.com/eclipse/jetty.project/pull/5109#discussion_r464492681", "createdAt": "2020-08-03T15:35:30Z", "author": {"login": "gregw"}, "path": "jetty-websocket/javax-websocket-client-impl/src/main/java/org/eclipse/jetty/websocket/jsr356/JsrSessionTracker.java", "diffHunk": "@@ -49,7 +51,7 @@ public void onSessionClosed(JsrSession session)\n     @Override\n     protected void doStop() throws Exception\n     {\n-        for (JsrSession session : sessions)\n+        for (Session session : sessions)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxMzc1OQ=="}, "originalCommit": {"oid": "85c4fc53350a8162496ed8c79dfc28215e5bb07e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyNDE4Ng==", "bodyText": "@gregw I think @lachlan-roberts has a point.\nIf we will need to provide a patch to the sponsor, I would rather use the small patch that this PR proposes, rather than a larger patch also encompassing graceful shutdown which is orthogonal to this PR.", "url": "https://github.com/eclipse/jetty.project/pull/5109#discussion_r464524186", "createdAt": "2020-08-03T16:29:33Z", "author": {"login": "sbordet"}, "path": "jetty-websocket/javax-websocket-client-impl/src/main/java/org/eclipse/jetty/websocket/jsr356/JsrSessionTracker.java", "diffHunk": "@@ -49,7 +51,7 @@ public void onSessionClosed(JsrSession session)\n     @Override\n     protected void doStop() throws Exception\n     {\n-        for (JsrSession session : sessions)\n+        for (Session session : sessions)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxMzc1OQ=="}, "originalCommit": {"oid": "85c4fc53350a8162496ed8c79dfc28215e5bb07e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyNTg0NQ==", "bodyText": "OK - but let's not break the sponsor again with the other PR because the approach suggested was full of locks that could cause the problem again.", "url": "https://github.com/eclipse/jetty.project/pull/5109#discussion_r464925845", "createdAt": "2020-08-04T09:35:08Z", "author": {"login": "gregw"}, "path": "jetty-websocket/javax-websocket-client-impl/src/main/java/org/eclipse/jetty/websocket/jsr356/JsrSessionTracker.java", "diffHunk": "@@ -49,7 +51,7 @@ public void onSessionClosed(JsrSession session)\n     @Override\n     protected void doStop() throws Exception\n     {\n-        for (JsrSession session : sessions)\n+        for (Session session : sessions)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxMzc1OQ=="}, "originalCommit": {"oid": "85c4fc53350a8162496ed8c79dfc28215e5bb07e"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2465, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}