{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3Mjc1OTgy", "number": 5483, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDoyMDoyOVrOEwLXYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQwNjo0NTozM1rOFok-sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTUzMzEyOnYy", "diffSide": "RIGHT", "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ServletContextTmpAttributeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDoyMDoyOVrOHlkz1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzowMTo0OVrOHxs5ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE2MjQ1Mw==", "bodyText": "Add an assert for the expected WebAppContext.isPersistentTempDirectory() value to all tests.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r509162453", "createdAt": "2020-10-21T10:20:29Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ServletContextTmpAttributeTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import javax.servlet.ServletContext;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class ServletContextTmpAttributeTest\n+{\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File tmp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext temp directory parent is java.io.tmpdir\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62b71344d72f35e41def5a1dc8388d8e5d87f202"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3Nzg2Ng==", "bodyText": "The value of isPersistentTempDirectory() will always be false, because we never change it from its default value. And then these tests are not testing the WebAppContext in a server so the tmpDir would never be deleted anyway. I'm getting a bunch of exceptions trying to start WebAppContext on its own.\nThe isPersistentTempDirectory() is tested more thoroughly in the tests that I wrote so we probably don't need to test it here as well.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r521877866", "createdAt": "2020-11-12T07:01:49Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ServletContextTmpAttributeTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import javax.servlet.ServletContext;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class ServletContextTmpAttributeTest\n+{\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File tmp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext temp directory parent is java.io.tmpdir\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE2MjQ1Mw=="}, "originalCommit": {"oid": "62b71344d72f35e41def5a1dc8388d8e5d87f202"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTU0NDM1OnYy", "diffSide": "RIGHT", "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ServletContextTmpAttributeTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDoyMzo0MlrOHlk7Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzowMToxMFrOHxs4lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE2NDMwNg==", "bodyText": "We'd have to change WebInfConfiguration - AFAIK we've never supported a Path as the value of ServletContext.TEMPDIR.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r509164306", "createdAt": "2020-10-21T10:23:42Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ServletContextTmpAttributeTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import javax.servlet.ServletContext;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class ServletContextTmpAttributeTest\n+{\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File tmp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext temp directory parent is java.io.tmpdir\",\n+                    tmp.getParentFile(),\n+                    is(new File(System.getProperty(\"java.io.tmpdir\"))));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as String to valid directory\n+     */\n+    @Test\n+    public void attributeWithStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toString());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidFileDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toFile());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as Path to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidPathDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp);\n+        // FIXME we should have an exception here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62b71344d72f35e41def5a1dc8388d8e5d87f202"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3NjM3Nw==", "bodyText": "specs says it's a java.io.File but we support String which is wrong according to the specs....\nchanging WebInfConfiguration to have an exception or to support Path?", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r509176377", "createdAt": "2020-10-21T10:44:48Z", "author": {"login": "olamy"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ServletContextTmpAttributeTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import javax.servlet.ServletContext;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class ServletContextTmpAttributeTest\n+{\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File tmp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext temp directory parent is java.io.tmpdir\",\n+                    tmp.getParentFile(),\n+                    is(new File(System.getProperty(\"java.io.tmpdir\"))));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as String to valid directory\n+     */\n+    @Test\n+    public void attributeWithStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toString());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidFileDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toFile());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as Path to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidPathDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp);\n+        // FIXME we should have an exception here", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE2NDMwNg=="}, "originalCommit": {"oid": "62b71344d72f35e41def5a1dc8388d8e5d87f202"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4NTY3Mg==", "bodyText": "Well, as we're already outside the spec, I guess we could accept Path too.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r509185672", "createdAt": "2020-10-21T11:01:22Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ServletContextTmpAttributeTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import javax.servlet.ServletContext;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class ServletContextTmpAttributeTest\n+{\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File tmp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext temp directory parent is java.io.tmpdir\",\n+                    tmp.getParentFile(),\n+                    is(new File(System.getProperty(\"java.io.tmpdir\"))));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as String to valid directory\n+     */\n+    @Test\n+    public void attributeWithStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toString());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidFileDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toFile());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as Path to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidPathDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp);\n+        // FIXME we should have an exception here", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE2NDMwNg=="}, "originalCommit": {"oid": "62b71344d72f35e41def5a1dc8388d8e5d87f202"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3NzY1NA==", "bodyText": "I have implemented this.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r521877654", "createdAt": "2020-11-12T07:01:10Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ServletContextTmpAttributeTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import javax.servlet.ServletContext;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class ServletContextTmpAttributeTest\n+{\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File tmp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext temp directory parent is java.io.tmpdir\",\n+                    tmp.getParentFile(),\n+                    is(new File(System.getProperty(\"java.io.tmpdir\"))));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as String to valid directory\n+     */\n+    @Test\n+    public void attributeWithStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toString());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidFileDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toFile());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as Path to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidPathDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp);\n+        // FIXME we should have an exception here", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE2NDMwNg=="}, "originalCommit": {"oid": "62b71344d72f35e41def5a1dc8388d8e5d87f202"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTU1MzIwOnYy", "diffSide": "RIGHT", "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ServletContextTmpAttributeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDoyNjowN1rOHllAfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDoyNjowN1rOHllAfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE2NTY5NQ==", "bodyText": "\ud83d\udcaf", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r509165695", "createdAt": "2020-10-21T10:26:07Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ServletContextTmpAttributeTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import javax.servlet.ServletContext;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class ServletContextTmpAttributeTest\n+{\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File tmp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext temp directory parent is java.io.tmpdir\",\n+                    tmp.getParentFile(),\n+                    is(new File(System.getProperty(\"java.io.tmpdir\"))));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as String to valid directory\n+     */\n+    @Test\n+    public void attributeWithStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toString());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidFileDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toFile());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as Path to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidPathDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp);\n+        // FIXME we should have an exception here\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithInvalidStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"/French/Cheese/Rocks\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62b71344d72f35e41def5a1dc8388d8e5d87f202"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTU1ODI3OnYy", "diffSide": "RIGHT", "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ServletContextTmpAttributeTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDoyNzozMFrOHllDyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTowMTo1OFrOHlmPow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE2NjUzOA==", "bodyText": "Couldn't the test create a directory, then remove user read permission from it?", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r509166538", "createdAt": "2020-10-21T10:27:30Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ServletContextTmpAttributeTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import javax.servlet.ServletContext;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class ServletContextTmpAttributeTest\n+{\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File tmp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext temp directory parent is java.io.tmpdir\",\n+                    tmp.getParentFile(),\n+                    is(new File(System.getProperty(\"java.io.tmpdir\"))));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as String to valid directory\n+     */\n+    @Test\n+    public void attributeWithStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toString());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidFileDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toFile());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as Path to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidPathDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp);\n+        // FIXME we should have an exception here\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithInvalidStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"/French/Cheese/Rocks\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value (wrong permission to write into it)\n+     * IllegalStateException\n+     */\n+    @Disabled(\"will fail if executed as root or super power user so Disabled it\")\n+    public void attributeWithInvalidPermissionStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62b71344d72f35e41def5a1dc8388d8e5d87f202"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3Njc5Mg==", "bodyText": "but then the current user/process won't be able to delete it", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r509176792", "createdAt": "2020-10-21T10:45:32Z", "author": {"login": "olamy"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ServletContextTmpAttributeTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import javax.servlet.ServletContext;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class ServletContextTmpAttributeTest\n+{\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File tmp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext temp directory parent is java.io.tmpdir\",\n+                    tmp.getParentFile(),\n+                    is(new File(System.getProperty(\"java.io.tmpdir\"))));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as String to valid directory\n+     */\n+    @Test\n+    public void attributeWithStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toString());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidFileDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toFile());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as Path to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidPathDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp);\n+        // FIXME we should have an exception here\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithInvalidStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"/French/Cheese/Rocks\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value (wrong permission to write into it)\n+     * IllegalStateException\n+     */\n+    @Disabled(\"will fail if executed as root or super power user so Disabled it\")\n+    public void attributeWithInvalidPermissionStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE2NjUzOA=="}, "originalCommit": {"oid": "62b71344d72f35e41def5a1dc8388d8e5d87f202"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4NTk1NQ==", "bodyText": "Once you've removed write permission, can't you put it back again before the test ends?", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r509185955", "createdAt": "2020-10-21T11:01:58Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ServletContextTmpAttributeTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import javax.servlet.ServletContext;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class ServletContextTmpAttributeTest\n+{\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File tmp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext temp directory parent is java.io.tmpdir\",\n+                    tmp.getParentFile(),\n+                    is(new File(System.getProperty(\"java.io.tmpdir\"))));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as String to valid directory\n+     */\n+    @Test\n+    public void attributeWithStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toString());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidFileDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp.toFile());\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        File temp = webAppContext.getTempDirectory();\n+        assertThat(\"webAppContext is the temp directory created\",\n+                   temp.toPath(),\n+                   is(tmp));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as Path to valid directory\n+     */\n+    @Test\n+    public void attributeWithValidPathDirectoryValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmp = Files.createTempDirectory(\"jetty_test\");\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, tmp);\n+        // FIXME we should have an exception here\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithInvalidStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"/French/Cheese/Rocks\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value (wrong permission to write into it)\n+     * IllegalStateException\n+     */\n+    @Disabled(\"will fail if executed as root or super power user so Disabled it\")\n+    public void attributeWithInvalidPermissionStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE2NjUzOA=="}, "originalCommit": {"oid": "62b71344d72f35e41def5a1dc8388d8e5d87f202"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTM1NjEyOnYy", "diffSide": "RIGHT", "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/TempDirTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo0Nzo1MVrOHxo7Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNToyNjoxNVrOHxrEDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMjc5OA==", "bodyText": "@olamy how is this different to the attributeWithNonExistentDirectory test?\nI don't think /French/Cheese/Rocks is  an invalid value, just a directory which doesn't exist. This could be why it was failing CI but passes for me locally, because in CI we are running as root so we do have permission to create this.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r521812798", "createdAt": "2020-11-12T03:47:51Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/TempDirTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.servlet.ServletContext;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TempDirTest\n+{\n+    private Server server;\n+    private WebAppContext webapp;\n+\n+    public void setupServer()\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        File testWebAppDir = MavenTestingUtils.getProjectDir(\"src/test/webapp\");\n+        webapp = new WebAppContext();\n+        webapp.setContextPath(\"/\");\n+        webapp.setWar(testWebAppDir.getAbsolutePath());\n+        server.setHandler(webapp);\n+    }\n+\n+    @AfterEach\n+    public void stopServer() throws Exception\n+    {\n+        if (server != null)\n+            server.stop();\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().getParent(), is(System.getProperty(\"java.io.tmpdir\")));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * Test ServletContext.TEMPDIR as valid directory with types File, String and Path.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithValidDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\");\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().toPath(), is(tmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to a non existent directory.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithNonExistentDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\").resolve(\"foo_test_tmp\");\n+        Files.deleteIfExists(tmpDir);\n+        assertFalse(Files.exists(tmpDir));\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        Path webappTmpDir = webAppContext.getTempDirectory().toPath();\n+        assertThat(webappTmpDir, is(tmpDir));\n+        assertTrue(Files.exists(webappTmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value\n+     * IllegalStateException\n+     */\n+    @Disabled\n+    @Test\n+    public void attributeWithInvalidStringValue() throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34adb9bddcb9455f7ae3381229b5e3118b40bb5a"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg0NzgyMA==", "bodyText": "yup the test fail on CI because it is executed as root so as root the random value directory /French/Cheese/Rocks can be created but the problem is I can't run the docker images as non root otherwise all the testcontainers will not works.\nboth tests  attributeWithInvalidPermissionStringValue and attributeWithInvalidStringValue do almost the same except one is using a totally random value whereas this other one try to create a directory within an existing directory /var which is not writable for non root.\nThe test attributeWithNonExistentDirectory is different because it create a directory within the java.io.tmpdir so every users can do it even non root.\nI don't mind having those tests disabled until I find a way to run them as non root in Jenkins but alas cannot find a way yet.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r521847820", "createdAt": "2020-11-12T05:26:15Z", "author": {"login": "olamy"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/TempDirTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.servlet.ServletContext;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TempDirTest\n+{\n+    private Server server;\n+    private WebAppContext webapp;\n+\n+    public void setupServer()\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        File testWebAppDir = MavenTestingUtils.getProjectDir(\"src/test/webapp\");\n+        webapp = new WebAppContext();\n+        webapp.setContextPath(\"/\");\n+        webapp.setWar(testWebAppDir.getAbsolutePath());\n+        server.setHandler(webapp);\n+    }\n+\n+    @AfterEach\n+    public void stopServer() throws Exception\n+    {\n+        if (server != null)\n+            server.stop();\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().getParent(), is(System.getProperty(\"java.io.tmpdir\")));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * Test ServletContext.TEMPDIR as valid directory with types File, String and Path.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithValidDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\");\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().toPath(), is(tmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to a non existent directory.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithNonExistentDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\").resolve(\"foo_test_tmp\");\n+        Files.deleteIfExists(tmpDir);\n+        assertFalse(Files.exists(tmpDir));\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        Path webappTmpDir = webAppContext.getTempDirectory().toPath();\n+        assertThat(webappTmpDir, is(tmpDir));\n+        assertTrue(Files.exists(webappTmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value\n+     * IllegalStateException\n+     */\n+    @Disabled\n+    @Test\n+    public void attributeWithInvalidStringValue() throws Exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMjc5OA=="}, "originalCommit": {"oid": "34adb9bddcb9455f7ae3381229b5e3118b40bb5a"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTM3MTczOnYy", "diffSide": "RIGHT", "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/TempDirTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo1MTo0NFrOHxpFHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo1MTo0NFrOHxpFHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxNTMyNw==", "bodyText": "@olamy if we can't test this in CI should we remove this test?\nIf you want I could try the docker/testcontainers approach to test this if you think its worth the effort.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r521815327", "createdAt": "2020-11-12T03:51:44Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/TempDirTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.servlet.ServletContext;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TempDirTest\n+{\n+    private Server server;\n+    private WebAppContext webapp;\n+\n+    public void setupServer()\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        File testWebAppDir = MavenTestingUtils.getProjectDir(\"src/test/webapp\");\n+        webapp = new WebAppContext();\n+        webapp.setContextPath(\"/\");\n+        webapp.setWar(testWebAppDir.getAbsolutePath());\n+        server.setHandler(webapp);\n+    }\n+\n+    @AfterEach\n+    public void stopServer() throws Exception\n+    {\n+        if (server != null)\n+            server.stop();\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().getParent(), is(System.getProperty(\"java.io.tmpdir\")));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * Test ServletContext.TEMPDIR as valid directory with types File, String and Path.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithValidDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\");\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().toPath(), is(tmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to a non existent directory.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithNonExistentDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\").resolve(\"foo_test_tmp\");\n+        Files.deleteIfExists(tmpDir);\n+        assertFalse(Files.exists(tmpDir));\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        Path webappTmpDir = webAppContext.getTempDirectory().toPath();\n+        assertThat(webappTmpDir, is(tmpDir));\n+        assertTrue(Files.exists(webappTmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value\n+     * IllegalStateException\n+     */\n+    @Disabled\n+    @Test\n+    public void attributeWithInvalidStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"/French/Cheese/Rocks\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value (wrong permission to write into it)\n+     * IllegalStateException\n+     */\n+    @Disabled(\"will fail if executed as root or super power user so Disabled it\")\n+    public void attributeWithInvalidPermissionStringValue() throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34adb9bddcb9455f7ae3381229b5e3118b40bb5a"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc4MDgwNjc3OnYy", "diffSide": "RIGHT", "path": "jetty-deploy/src/test/java/org/eclipse/jetty/deploy/DeploymentTempDirTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQwNTo1MDo0NlrOI6t4AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNFQwNDoxMjoxOVrOI8WUew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQzOTkzNg==", "bodyText": "Isn't this going to add yet another connector for every test? The Server instance is durable across every test ...", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r598439936", "createdAt": "2021-03-22T05:50:46Z", "author": {"login": "janbartel"}, "path": "jetty-deploy/src/test/java/org/eclipse/jetty/deploy/DeploymentTempDirTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.deploy;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jetty.deploy.providers.WebAppProvider;\n+import org.eclipse.jetty.server.Handler;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.handler.ContextHandlerCollection;\n+import org.eclipse.jetty.server.handler.DefaultHandler;\n+import org.eclipse.jetty.server.handler.HandlerCollection;\n+import org.eclipse.jetty.toolchain.test.FS;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.eclipse.jetty.util.Scanner;\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DeploymentTempDirTest\n+{\n+    private static final Logger LOG = Log.getLogger(DeploymentTempDirTest.class);\n+\n+    private final WebAppProvider webAppProvider = new WebAppProvider();\n+    private final ContextHandlerCollection contexts = new ContextHandlerCollection();\n+    private final Path testDir = MavenTestingUtils.getTargetTestingPath(DeploymentTempDirTest.class.getSimpleName());\n+    private final Path tmpDir = testDir.resolve(\"tmpDir\");\n+    private final Path webapps = testDir.resolve(\"webapps\");\n+    private final Server server = new Server();\n+\n+    @BeforeEach\n+    public void setup() throws Exception\n+    {\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDE1MTE2Mw==", "bodyText": "The server instance would only be durable across  every test if it was static.\nA new instance of DeploymentTempDirTest is created before every test.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r600151163", "createdAt": "2021-03-24T04:12:19Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-deploy/src/test/java/org/eclipse/jetty/deploy/DeploymentTempDirTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.deploy;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jetty.deploy.providers.WebAppProvider;\n+import org.eclipse.jetty.server.Handler;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.handler.ContextHandlerCollection;\n+import org.eclipse.jetty.server.handler.DefaultHandler;\n+import org.eclipse.jetty.server.handler.HandlerCollection;\n+import org.eclipse.jetty.toolchain.test.FS;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.eclipse.jetty.util.Scanner;\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DeploymentTempDirTest\n+{\n+    private static final Logger LOG = Log.getLogger(DeploymentTempDirTest.class);\n+\n+    private final WebAppProvider webAppProvider = new WebAppProvider();\n+    private final ContextHandlerCollection contexts = new ContextHandlerCollection();\n+    private final Path testDir = MavenTestingUtils.getTargetTestingPath(DeploymentTempDirTest.class.getSimpleName());\n+    private final Path tmpDir = testDir.resolve(\"tmpDir\");\n+    private final Path webapps = testDir.resolve(\"webapps\");\n+    private final Server server = new Server();\n+\n+    @BeforeEach\n+    public void setup() throws Exception\n+    {\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQzOTkzNg=="}, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc4MDg1NDQ1OnYy", "diffSide": "RIGHT", "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQwNjoxMTo1NFrOI6uS3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0zMVQwMzozNjo1NFrOJAkF8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ0NjgxNQ==", "bodyText": "Need to update the javadoc for this method to say it supports Path type.\nI'm not convinced about throwing ISE - the behaviour of this method has always been to return null as the fall through, and the resolveTempDirectory method would go on to make a custom tmp directory. If you throw ISE this will stop the deployment. Maybe just LOG.WARN instead?", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r598446815", "createdAt": "2021-03-22T06:11:54Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java", "diffHunk": "@@ -478,18 +478,15 @@ public void resolveTempDirectory(WebAppContext context)\n     private File asFile(Object fileattr)\n     {\n         if (fileattr == null)\n-        {\n             return null;\n-        }\n         if (fileattr instanceof File)\n-        {\n             return (File)fileattr;\n-        }\n         if (fileattr instanceof String)\n-        {\n             return new File((String)fileattr);\n-        }\n-        return null;\n+        if (fileattr instanceof Path)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDE1MTQyNQ==", "bodyText": "I think this really should be ISE. There is a big difference between not specifying a temp directory, and specifying one with a random object type that we don't recognise.\nLike if someone were to do\nwebAppContext.setAttribute(ServletContext.TEMPDIR, new MappedByteBufferPool());\nshould we really ignore this? to me it just seems like a bad configuration that should stop the deployment.\nJust like if we get a File object but the directory isn't writeable or has some permission issue, we will throw ISE and not just ignore and warn. So why should we do something different for this case.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r600151425", "createdAt": "2021-03-24T04:13:24Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java", "diffHunk": "@@ -478,18 +478,15 @@ public void resolveTempDirectory(WebAppContext context)\n     private File asFile(Object fileattr)\n     {\n         if (fileattr == null)\n-        {\n             return null;\n-        }\n         if (fileattr instanceof File)\n-        {\n             return (File)fileattr;\n-        }\n         if (fileattr instanceof String)\n-        {\n             return new File((String)fileattr);\n-        }\n-        return null;\n+        if (fileattr instanceof Path)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ0NjgxNQ=="}, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzc5NjE3MA==", "bodyText": "Well, the title of this PR is to add extra tests for the tmp directory, not to change behaviour of the tmp directory.  Also, I would add that you should definitely not change the behaviour in jetty-9.4. So only add tests in 9.4, but when you make a separate PR for the merge to 10, you could introduce your behaviour change then (with a better PR title).", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r603796170", "createdAt": "2021-03-30T05:42:01Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java", "diffHunk": "@@ -478,18 +478,15 @@ public void resolveTempDirectory(WebAppContext context)\n     private File asFile(Object fileattr)\n     {\n         if (fileattr == null)\n-        {\n             return null;\n-        }\n         if (fileattr instanceof File)\n-        {\n             return (File)fileattr;\n-        }\n         if (fileattr instanceof String)\n-        {\n             return new File((String)fileattr);\n-        }\n-        return null;\n+        if (fileattr instanceof Path)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ0NjgxNQ=="}, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzgxNjkyNg==", "bodyText": "The title of the PR can easily be edited so that is not an issue. The only case this would break someone is if they have tried to configure a temp directory to be used but it was the wrong type and is being silently ignored.\nBut anyway I can remove this change from this PR. Should I remove or disable the tests for this? or should I change them to verify that invalid object types for the temp directory are ignored?", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r603816926", "createdAt": "2021-03-30T06:32:17Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java", "diffHunk": "@@ -478,18 +478,15 @@ public void resolveTempDirectory(WebAppContext context)\n     private File asFile(Object fileattr)\n     {\n         if (fileattr == null)\n-        {\n             return null;\n-        }\n         if (fileattr instanceof File)\n-        {\n             return (File)fileattr;\n-        }\n         if (fileattr instanceof String)\n-        {\n             return new File((String)fileattr);\n-        }\n-        return null;\n+        if (fileattr instanceof Path)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ0NjgxNQ=="}, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDUwMzAyNA==", "bodyText": "Your call about the tests for 9.4.  Change the behaviour and the tests for 10/11.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r604503024", "createdAt": "2021-03-30T23:49:44Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java", "diffHunk": "@@ -478,18 +478,15 @@ public void resolveTempDirectory(WebAppContext context)\n     private File asFile(Object fileattr)\n     {\n         if (fileattr == null)\n-        {\n             return null;\n-        }\n         if (fileattr instanceof File)\n-        {\n             return (File)fileattr;\n-        }\n         if (fileattr instanceof String)\n-        {\n             return new File((String)fileattr);\n-        }\n-        return null;\n+        if (fileattr instanceof Path)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ0NjgxNQ=="}, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDU3MTEyMg==", "bodyText": "I have reverted the behaviour of this and removed the tests.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r604571122", "createdAt": "2021-03-31T03:36:54Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java", "diffHunk": "@@ -478,18 +478,15 @@ public void resolveTempDirectory(WebAppContext context)\n     private File asFile(Object fileattr)\n     {\n         if (fileattr == null)\n-        {\n             return null;\n-        }\n         if (fileattr instanceof File)\n-        {\n             return (File)fileattr;\n-        }\n         if (fileattr instanceof String)\n-        {\n             return new File((String)fileattr);\n-        }\n-        return null;\n+        if (fileattr instanceof Path)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ0NjgxNQ=="}, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc4MDg1NjM3OnYy", "diffSide": "RIGHT", "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/TempDirTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQwNjoxMjo0NlrOI6uT-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQwNjoxMjo0NlrOI6uT-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ0NzA5Ng==", "bodyText": "It's not \"but\" but \"so\" or \"therefore\".", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r598447096", "createdAt": "2021-03-22T06:12:46Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/TempDirTest.java", "diffHunk": "@@ -0,0 +1,265 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.servlet.ServletContext;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TempDirTest\n+{\n+    private Server server;\n+    private WebAppContext webapp;\n+\n+    public void setupServer()\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        File testWebAppDir = MavenTestingUtils.getProjectDir(\"src/test/webapp\");\n+        webapp = new WebAppContext();\n+        webapp.setContextPath(\"/\");\n+        webapp.setWar(testWebAppDir.getAbsolutePath());\n+        server.setHandler(webapp);\n+    }\n+\n+    @AfterEach\n+    public void stopServer() throws Exception\n+    {\n+        if (server != null)\n+            server.stop();\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc4MDg3NTM0OnYy", "diffSide": "RIGHT", "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/TempDirTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQwNjoyMTowOVrOI6uezQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0zMVQwMzozNzo0OVrOJAkHBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ0OTg2OQ==", "bodyText": "Need tests for using the WebAppContext.BASETEMPDIR, and for using $jetty.base/work dir.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r598449869", "createdAt": "2021-03-22T06:21:09Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/TempDirTest.java", "diffHunk": "@@ -0,0 +1,265 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.servlet.ServletContext;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TempDirTest\n+{\n+    private Server server;\n+    private WebAppContext webapp;\n+\n+    public void setupServer()\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        File testWebAppDir = MavenTestingUtils.getProjectDir(\"src/test/webapp\");\n+        webapp = new WebAppContext();\n+        webapp.setContextPath(\"/\");\n+        webapp.setWar(testWebAppDir.getAbsolutePath());\n+        server.setHandler(webapp);\n+    }\n+\n+    @AfterEach\n+    public void stopServer() throws Exception\n+    {\n+        if (server != null)\n+            server.stop();\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().getParent(), is(System.getProperty(\"java.io.tmpdir\")));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has value which is not a known type.\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithInvalidValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, new Object());\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * Test ServletContext.TEMPDIR as valid directory with types File, String and Path.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithValidDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\");\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().toPath(), is(tmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to a non existent directory.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithNonExistentDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\").resolve(\"foo_test_tmp\");\n+        Files.deleteIfExists(tmpDir);\n+        assertFalse(Files.exists(tmpDir));\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        Path webappTmpDir = webAppContext.getTempDirectory().toPath();\n+        assertThat(webappTmpDir, is(tmpDir));\n+        assertTrue(Files.exists(webappTmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value (wrong permission to write into it)\n+     * IllegalStateException\n+     */\n+    @Disabled(\"Jenkins will run as root so we do have permission to write to this directory.\")\n+    public void attributeWithInvalidPermissions() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"/var/foo_jetty\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void testDefaultTempDirectory(boolean persistTempDir) throws Exception\n+    {\n+        setupServer();\n+        webapp.setPersistTempDirectory(persistTempDir);\n+\n+        // Temp Directory Initially isn't set until started.\n+        File tempDirectory = webapp.getTempDirectory();\n+        assertNull(tempDirectory);\n+\n+        // Once server is started the WebApp temp directory exists and is valid directory.\n+        server.start();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertNotNull(tempDirectory);\n+        assertTrue(tempDirectory.exists());\n+        assertTrue(tempDirectory.isDirectory());\n+\n+        // Once server is stopped the WebApp temp should be deleted if persistTempDir is false.\n+        server.stop();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertThat(tempDirectory != null && tempDirectory.exists(), is(persistTempDir));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void testPreDefinedTempDirectory(boolean persistTempDir) throws Exception\n+    {\n+        setupServer();\n+        webapp.setPersistTempDirectory(persistTempDir);\n+\n+        // The temp directory is defined but has not been created.\n+        File webappTempDir = MavenTestingUtils.getTargetTestingPath(\"webappTempDir\").toFile();\n+        IO.delete(webappTempDir);\n+        webapp.setTempDirectory(webappTempDir);\n+        assertThat(webapp.getTempDirectory(), is(webappTempDir));\n+        assertFalse(webappTempDir.exists());\n+\n+        // Once server is started the WebApp temp directory exists and is valid directory.\n+        server.start();\n+        File tempDirectory = webapp.getTempDirectory();\n+        assertNotNull(tempDirectory);\n+        assertTrue(tempDirectory.exists());\n+        assertTrue(tempDirectory.isDirectory());\n+\n+        // Once server is stopped the WebApp temp should be deleted if persistTempDir is false.\n+        server.stop();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertThat(tempDirectory != null && tempDirectory.exists(), is(persistTempDir));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void testPreExistingTempDirectory(boolean persistTempDir) throws Exception\n+    {\n+        setupServer();\n+        webapp.setPersistTempDirectory(persistTempDir);\n+\n+        // The temp directory is defined and has already been created.\n+        File webappTempDir = MavenTestingUtils.getTargetTestingPath(\"webappTempDir\").toFile();\n+        IO.delete(webappTempDir);\n+        if (!webappTempDir.exists())\n+            assertTrue(webappTempDir.mkdir());\n+        webapp.setTempDirectory(webappTempDir);\n+        assertThat(webapp.getTempDirectory(), is(webappTempDir));\n+        assertTrue(webappTempDir.exists());\n+\n+        // Once server is started the WebApp temp directory exists and is valid directory.\n+        server.start();\n+        File tempDirectory = webapp.getTempDirectory();\n+        assertNotNull(tempDirectory);\n+        assertTrue(tempDirectory.exists());\n+        assertTrue(tempDirectory.isDirectory());\n+\n+        // Once server is stopped the WebApp temp should be deleted if persistTempDir is false.\n+        server.stop();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertThat(tempDirectory != null && tempDirectory.exists(), is(persistTempDir));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDUwMzkwNw==", "bodyText": "Did you add tests for these 2 cases yet?", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r604503907", "createdAt": "2021-03-30T23:52:20Z", "author": {"login": "janbartel"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/TempDirTest.java", "diffHunk": "@@ -0,0 +1,265 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.servlet.ServletContext;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TempDirTest\n+{\n+    private Server server;\n+    private WebAppContext webapp;\n+\n+    public void setupServer()\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        File testWebAppDir = MavenTestingUtils.getProjectDir(\"src/test/webapp\");\n+        webapp = new WebAppContext();\n+        webapp.setContextPath(\"/\");\n+        webapp.setWar(testWebAppDir.getAbsolutePath());\n+        server.setHandler(webapp);\n+    }\n+\n+    @AfterEach\n+    public void stopServer() throws Exception\n+    {\n+        if (server != null)\n+            server.stop();\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().getParent(), is(System.getProperty(\"java.io.tmpdir\")));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has value which is not a known type.\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithInvalidValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, new Object());\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * Test ServletContext.TEMPDIR as valid directory with types File, String and Path.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithValidDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\");\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().toPath(), is(tmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to a non existent directory.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithNonExistentDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\").resolve(\"foo_test_tmp\");\n+        Files.deleteIfExists(tmpDir);\n+        assertFalse(Files.exists(tmpDir));\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        Path webappTmpDir = webAppContext.getTempDirectory().toPath();\n+        assertThat(webappTmpDir, is(tmpDir));\n+        assertTrue(Files.exists(webappTmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value (wrong permission to write into it)\n+     * IllegalStateException\n+     */\n+    @Disabled(\"Jenkins will run as root so we do have permission to write to this directory.\")\n+    public void attributeWithInvalidPermissions() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"/var/foo_jetty\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void testDefaultTempDirectory(boolean persistTempDir) throws Exception\n+    {\n+        setupServer();\n+        webapp.setPersistTempDirectory(persistTempDir);\n+\n+        // Temp Directory Initially isn't set until started.\n+        File tempDirectory = webapp.getTempDirectory();\n+        assertNull(tempDirectory);\n+\n+        // Once server is started the WebApp temp directory exists and is valid directory.\n+        server.start();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertNotNull(tempDirectory);\n+        assertTrue(tempDirectory.exists());\n+        assertTrue(tempDirectory.isDirectory());\n+\n+        // Once server is stopped the WebApp temp should be deleted if persistTempDir is false.\n+        server.stop();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertThat(tempDirectory != null && tempDirectory.exists(), is(persistTempDir));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void testPreDefinedTempDirectory(boolean persistTempDir) throws Exception\n+    {\n+        setupServer();\n+        webapp.setPersistTempDirectory(persistTempDir);\n+\n+        // The temp directory is defined but has not been created.\n+        File webappTempDir = MavenTestingUtils.getTargetTestingPath(\"webappTempDir\").toFile();\n+        IO.delete(webappTempDir);\n+        webapp.setTempDirectory(webappTempDir);\n+        assertThat(webapp.getTempDirectory(), is(webappTempDir));\n+        assertFalse(webappTempDir.exists());\n+\n+        // Once server is started the WebApp temp directory exists and is valid directory.\n+        server.start();\n+        File tempDirectory = webapp.getTempDirectory();\n+        assertNotNull(tempDirectory);\n+        assertTrue(tempDirectory.exists());\n+        assertTrue(tempDirectory.isDirectory());\n+\n+        // Once server is stopped the WebApp temp should be deleted if persistTempDir is false.\n+        server.stop();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertThat(tempDirectory != null && tempDirectory.exists(), is(persistTempDir));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void testPreExistingTempDirectory(boolean persistTempDir) throws Exception\n+    {\n+        setupServer();\n+        webapp.setPersistTempDirectory(persistTempDir);\n+\n+        // The temp directory is defined and has already been created.\n+        File webappTempDir = MavenTestingUtils.getTargetTestingPath(\"webappTempDir\").toFile();\n+        IO.delete(webappTempDir);\n+        if (!webappTempDir.exists())\n+            assertTrue(webappTempDir.mkdir());\n+        webapp.setTempDirectory(webappTempDir);\n+        assertThat(webapp.getTempDirectory(), is(webappTempDir));\n+        assertTrue(webappTempDir.exists());\n+\n+        // Once server is started the WebApp temp directory exists and is valid directory.\n+        server.start();\n+        File tempDirectory = webapp.getTempDirectory();\n+        assertNotNull(tempDirectory);\n+        assertTrue(tempDirectory.exists());\n+        assertTrue(tempDirectory.isDirectory());\n+\n+        // Once server is stopped the WebApp temp should be deleted if persistTempDir is false.\n+        server.stop();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertThat(tempDirectory != null && tempDirectory.exists(), is(persistTempDir));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ0OTg2OQ=="}, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDU3MTM5Nw==", "bodyText": "There are now tests for both WebAppContext.BASETEMPDIR and $jetty.base/work.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r604571397", "createdAt": "2021-03-31T03:37:49Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/TempDirTest.java", "diffHunk": "@@ -0,0 +1,265 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.servlet.ServletContext;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TempDirTest\n+{\n+    private Server server;\n+    private WebAppContext webapp;\n+\n+    public void setupServer()\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        File testWebAppDir = MavenTestingUtils.getProjectDir(\"src/test/webapp\");\n+        webapp = new WebAppContext();\n+        webapp.setContextPath(\"/\");\n+        webapp.setWar(testWebAppDir.getAbsolutePath());\n+        server.setHandler(webapp);\n+    }\n+\n+    @AfterEach\n+    public void stopServer() throws Exception\n+    {\n+        if (server != null)\n+            server.stop();\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>null</code> value\n+     * but webappContent#tempDirectory is created under <code>java.io.tmpdir</code>\n+     */\n+    @Test\n+    public void attributeWithNullValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, null);\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().getParent(), is(System.getProperty(\"java.io.tmpdir\")));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has <code>\"\"</code> value\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithEmptyStringValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has value which is not a known type.\n+     * IllegalStateException\n+     */\n+    @Test\n+    public void attributeWithInvalidValue() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, new Object());\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    /**\n+     * Test ServletContext.TEMPDIR as valid directory with types File, String and Path.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithValidDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\");\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        assertThat(webAppContext.getTempDirectory().toPath(), is(tmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR as File to a non existent directory.\n+     */\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"File\", \"String\", \"Path\"})\n+    public void attributeWithNonExistentDirectory(String type) throws Exception\n+    {\n+        WebAppContext webAppContext = new WebAppContext();\n+        Path tmpDir = Files.createTempDirectory(\"jetty_test\").resolve(\"foo_test_tmp\");\n+        Files.deleteIfExists(tmpDir);\n+        assertFalse(Files.exists(tmpDir));\n+        switch (type)\n+        {\n+            case \"File\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toFile());\n+                break;\n+            case \"String\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir.toString());\n+                break;\n+            case \"Path\":\n+                webAppContext.setAttribute(ServletContext.TEMPDIR, tmpDir);\n+                break;\n+            default:\n+                throw new IllegalStateException();\n+        }\n+\n+        // Test we have correct value as the webapp temp directory.\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        webInfConfiguration.resolveTempDirectory(webAppContext);\n+        Path webappTmpDir = webAppContext.getTempDirectory().toPath();\n+        assertThat(webappTmpDir, is(tmpDir));\n+        assertTrue(Files.exists(webappTmpDir));\n+    }\n+\n+    /**\n+     * ServletContext.TEMPDIR has invalid <code>String</code> directory value (wrong permission to write into it)\n+     * IllegalStateException\n+     */\n+    @Disabled(\"Jenkins will run as root so we do have permission to write to this directory.\")\n+    public void attributeWithInvalidPermissions() throws Exception\n+    {\n+        WebInfConfiguration webInfConfiguration = new WebInfConfiguration();\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setAttribute(ServletContext.TEMPDIR, \"/var/foo_jetty\");\n+        assertThrows(IllegalStateException.class, () -> webInfConfiguration.resolveTempDirectory(webAppContext));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void testDefaultTempDirectory(boolean persistTempDir) throws Exception\n+    {\n+        setupServer();\n+        webapp.setPersistTempDirectory(persistTempDir);\n+\n+        // Temp Directory Initially isn't set until started.\n+        File tempDirectory = webapp.getTempDirectory();\n+        assertNull(tempDirectory);\n+\n+        // Once server is started the WebApp temp directory exists and is valid directory.\n+        server.start();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertNotNull(tempDirectory);\n+        assertTrue(tempDirectory.exists());\n+        assertTrue(tempDirectory.isDirectory());\n+\n+        // Once server is stopped the WebApp temp should be deleted if persistTempDir is false.\n+        server.stop();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertThat(tempDirectory != null && tempDirectory.exists(), is(persistTempDir));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void testPreDefinedTempDirectory(boolean persistTempDir) throws Exception\n+    {\n+        setupServer();\n+        webapp.setPersistTempDirectory(persistTempDir);\n+\n+        // The temp directory is defined but has not been created.\n+        File webappTempDir = MavenTestingUtils.getTargetTestingPath(\"webappTempDir\").toFile();\n+        IO.delete(webappTempDir);\n+        webapp.setTempDirectory(webappTempDir);\n+        assertThat(webapp.getTempDirectory(), is(webappTempDir));\n+        assertFalse(webappTempDir.exists());\n+\n+        // Once server is started the WebApp temp directory exists and is valid directory.\n+        server.start();\n+        File tempDirectory = webapp.getTempDirectory();\n+        assertNotNull(tempDirectory);\n+        assertTrue(tempDirectory.exists());\n+        assertTrue(tempDirectory.isDirectory());\n+\n+        // Once server is stopped the WebApp temp should be deleted if persistTempDir is false.\n+        server.stop();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertThat(tempDirectory != null && tempDirectory.exists(), is(persistTempDir));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void testPreExistingTempDirectory(boolean persistTempDir) throws Exception\n+    {\n+        setupServer();\n+        webapp.setPersistTempDirectory(persistTempDir);\n+\n+        // The temp directory is defined and has already been created.\n+        File webappTempDir = MavenTestingUtils.getTargetTestingPath(\"webappTempDir\").toFile();\n+        IO.delete(webappTempDir);\n+        if (!webappTempDir.exists())\n+            assertTrue(webappTempDir.mkdir());\n+        webapp.setTempDirectory(webappTempDir);\n+        assertThat(webapp.getTempDirectory(), is(webappTempDir));\n+        assertTrue(webappTempDir.exists());\n+\n+        // Once server is started the WebApp temp directory exists and is valid directory.\n+        server.start();\n+        File tempDirectory = webapp.getTempDirectory();\n+        assertNotNull(tempDirectory);\n+        assertTrue(tempDirectory.exists());\n+        assertTrue(tempDirectory.isDirectory());\n+\n+        // Once server is stopped the WebApp temp should be deleted if persistTempDir is false.\n+        server.stop();\n+        tempDirectory = webapp.getTempDirectory();\n+        assertThat(tempDirectory != null && tempDirectory.exists(), is(persistTempDir));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ0OTg2OQ=="}, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc4MDg3NjkyOnYy", "diffSide": "RIGHT", "path": "jetty-deploy/src/test/resources/jetty-logging.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQwNjoyMjowMFrOI6ufwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNFQwNDoxMzo0MFrOI8WV3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ1MDExMw==", "bodyText": "Does default INFO level output too much logging?", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r598450113", "createdAt": "2021-03-22T06:22:00Z", "author": {"login": "janbartel"}, "path": "jetty-deploy/src/test/resources/jetty-logging.properties", "diffHunk": "@@ -1,3 +1,4 @@\n org.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.StdErrLog\n-org.eclipse.jetty.deploy.LEVEL=WARN\n-org.eclipse.jetty.util.Scanner=WARN\n+#org.eclipse.jetty.deploy.DeploymentTempDirTest.LEVEL=DEBUG\n+#org.eclipse.jetty.deploy.LEVEL=DEBUG\n+#org.eclipse.jetty.util.Scanner=DEBUG", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDE1MTUxOQ==", "bodyText": "No there is not that much logging on INFO level.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r600151519", "createdAt": "2021-03-24T04:13:40Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-deploy/src/test/resources/jetty-logging.properties", "diffHunk": "@@ -1,3 +1,4 @@\n org.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.StdErrLog\n-org.eclipse.jetty.deploy.LEVEL=WARN\n-org.eclipse.jetty.util.Scanner=WARN\n+#org.eclipse.jetty.deploy.DeploymentTempDirTest.LEVEL=DEBUG\n+#org.eclipse.jetty.deploy.LEVEL=DEBUG\n+#org.eclipse.jetty.util.Scanner=DEBUG", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ1MDExMw=="}, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc4MDg4NjIzOnYy", "diffSide": "RIGHT", "path": "jetty-deploy/src/test/java/org/eclipse/jetty/deploy/DeploymentTempDirTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQwNjoyNTo1OFrOI6ulIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNFQwNDoxMzo0OFrOI8WWCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ1MTQ5MA==", "bodyText": "The name of the war file and the name of the context xml file must be the same, otherwise the deployer thinks they are 2 different deployables.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r598451490", "createdAt": "2021-03-22T06:25:58Z", "author": {"login": "janbartel"}, "path": "jetty-deploy/src/test/java/org/eclipse/jetty/deploy/DeploymentTempDirTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.deploy;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jetty.deploy.providers.WebAppProvider;\n+import org.eclipse.jetty.server.Handler;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.handler.ContextHandlerCollection;\n+import org.eclipse.jetty.server.handler.DefaultHandler;\n+import org.eclipse.jetty.server.handler.HandlerCollection;\n+import org.eclipse.jetty.toolchain.test.FS;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.eclipse.jetty.util.Scanner;\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DeploymentTempDirTest\n+{\n+    private static final Logger LOG = Log.getLogger(DeploymentTempDirTest.class);\n+\n+    private final WebAppProvider webAppProvider = new WebAppProvider();\n+    private final ContextHandlerCollection contexts = new ContextHandlerCollection();\n+    private final Path testDir = MavenTestingUtils.getTargetTestingPath(DeploymentTempDirTest.class.getSimpleName());\n+    private final Path tmpDir = testDir.resolve(\"tmpDir\");\n+    private final Path webapps = testDir.resolve(\"webapps\");\n+    private final Server server = new Server();\n+\n+    @BeforeEach\n+    public void setup() throws Exception\n+    {\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        FS.ensureEmpty(testDir);\n+        FS.ensureEmpty(tmpDir);\n+        FS.ensureEmpty(webapps);\n+\n+        webAppProvider.setMonitoredDirName(webapps.toString());\n+        DeploymentManager deploymentManager = new DeploymentManager();\n+        deploymentManager.addAppProvider(webAppProvider);\n+        server.addBean(deploymentManager);\n+\n+        HandlerCollection handlerCollection = new HandlerCollection();\n+        handlerCollection.addHandler(contexts);\n+        handlerCollection.addHandler(new DefaultHandler());\n+        deploymentManager.setContexts(contexts);\n+        server.setHandler(handlerCollection);\n+    }\n+\n+    @AfterEach\n+    public void stop() throws Exception\n+    {\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testTmpDirectory() throws Exception\n+    {\n+        Path warPath = MavenTestingUtils.getTestResourcePath(\"webapps/foo-webapp-1.war\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDE1MTU2MA==", "bodyText": "warPath is not pointing to something inside of the monitored directory. So it doesn't really matter what the name is.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r600151560", "createdAt": "2021-03-24T04:13:48Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-deploy/src/test/java/org/eclipse/jetty/deploy/DeploymentTempDirTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.deploy;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jetty.deploy.providers.WebAppProvider;\n+import org.eclipse.jetty.server.Handler;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.handler.ContextHandlerCollection;\n+import org.eclipse.jetty.server.handler.DefaultHandler;\n+import org.eclipse.jetty.server.handler.HandlerCollection;\n+import org.eclipse.jetty.toolchain.test.FS;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.eclipse.jetty.util.Scanner;\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DeploymentTempDirTest\n+{\n+    private static final Logger LOG = Log.getLogger(DeploymentTempDirTest.class);\n+\n+    private final WebAppProvider webAppProvider = new WebAppProvider();\n+    private final ContextHandlerCollection contexts = new ContextHandlerCollection();\n+    private final Path testDir = MavenTestingUtils.getTargetTestingPath(DeploymentTempDirTest.class.getSimpleName());\n+    private final Path tmpDir = testDir.resolve(\"tmpDir\");\n+    private final Path webapps = testDir.resolve(\"webapps\");\n+    private final Server server = new Server();\n+\n+    @BeforeEach\n+    public void setup() throws Exception\n+    {\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        FS.ensureEmpty(testDir);\n+        FS.ensureEmpty(tmpDir);\n+        FS.ensureEmpty(webapps);\n+\n+        webAppProvider.setMonitoredDirName(webapps.toString());\n+        DeploymentManager deploymentManager = new DeploymentManager();\n+        deploymentManager.addAppProvider(webAppProvider);\n+        server.addBean(deploymentManager);\n+\n+        HandlerCollection handlerCollection = new HandlerCollection();\n+        handlerCollection.addHandler(contexts);\n+        handlerCollection.addHandler(new DefaultHandler());\n+        deploymentManager.setContexts(contexts);\n+        server.setHandler(handlerCollection);\n+    }\n+\n+    @AfterEach\n+    public void stop() throws Exception\n+    {\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testTmpDirectory() throws Exception\n+    {\n+        Path warPath = MavenTestingUtils.getTestResourcePath(\"webapps/foo-webapp-1.war\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ1MTQ5MA=="}, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc4MDkxMTMxOnYy", "diffSide": "RIGHT", "path": "jetty-deploy/src/test/java/org/eclipse/jetty/deploy/DeploymentTempDirTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQwNjozNjo0NFrOI6uzng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNFQwNDoxNDo1MVrOI8WXBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ1NTE5OA==", "bodyText": "Why are there explicit calls to scan()? The DeploymentManager was added to the server, and the WebAppProvider added to it, so both will start when the server starts and start scanning at the default interval of 10. You should either set the interval to 0 and do your own calls to scan() or remove them and change the scan interval to what you want.\nAlso, I don't  think you should rely on the order of the scanner listeners: it could be the case that your listener gets called back before the WebAppProvider's listener - I don't think the scanner makes any promises as to the ordering of the calls (although from code inspection you can see what is implemented, but I think that's a fragile way to do it).", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r598455198", "createdAt": "2021-03-22T06:36:44Z", "author": {"login": "janbartel"}, "path": "jetty-deploy/src/test/java/org/eclipse/jetty/deploy/DeploymentTempDirTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.deploy;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jetty.deploy.providers.WebAppProvider;\n+import org.eclipse.jetty.server.Handler;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.handler.ContextHandlerCollection;\n+import org.eclipse.jetty.server.handler.DefaultHandler;\n+import org.eclipse.jetty.server.handler.HandlerCollection;\n+import org.eclipse.jetty.toolchain.test.FS;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.eclipse.jetty.util.Scanner;\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DeploymentTempDirTest\n+{\n+    private static final Logger LOG = Log.getLogger(DeploymentTempDirTest.class);\n+\n+    private final WebAppProvider webAppProvider = new WebAppProvider();\n+    private final ContextHandlerCollection contexts = new ContextHandlerCollection();\n+    private final Path testDir = MavenTestingUtils.getTargetTestingPath(DeploymentTempDirTest.class.getSimpleName());\n+    private final Path tmpDir = testDir.resolve(\"tmpDir\");\n+    private final Path webapps = testDir.resolve(\"webapps\");\n+    private final Server server = new Server();\n+\n+    @BeforeEach\n+    public void setup() throws Exception\n+    {\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        FS.ensureEmpty(testDir);\n+        FS.ensureEmpty(tmpDir);\n+        FS.ensureEmpty(webapps);\n+\n+        webAppProvider.setMonitoredDirName(webapps.toString());\n+        DeploymentManager deploymentManager = new DeploymentManager();\n+        deploymentManager.addAppProvider(webAppProvider);\n+        server.addBean(deploymentManager);\n+\n+        HandlerCollection handlerCollection = new HandlerCollection();\n+        handlerCollection.addHandler(contexts);\n+        handlerCollection.addHandler(new DefaultHandler());\n+        deploymentManager.setContexts(contexts);\n+        server.setHandler(handlerCollection);\n+    }\n+\n+    @AfterEach\n+    public void stop() throws Exception\n+    {\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testTmpDirectory() throws Exception\n+    {\n+        Path warPath = MavenTestingUtils.getTestResourcePath(\"webapps/foo-webapp-1.war\");\n+        String deploymentXml = \"<Configure class=\\\"org.eclipse.jetty.webapp.WebAppContext\\\">\\n\" +\n+            \"<Set name=\\\"war\\\">\" + warPath + \"</Set>\\n\" +\n+            \"<Set name=\\\"tempDirectory\\\">\" + tmpDir + \"</Set>\\n\" +\n+            \"<Set name=\\\"persistTempDirectory\\\">false</Set>\\n\" +\n+            \"</Configure>\";\n+\n+        server.start();\n+        WaitScannerListener listener = new WaitScannerListener();\n+        webAppProvider.addScannerListener(listener);\n+\n+        // Add the webapp xml which will will be detected after scan.\n+        listener.reset();\n+        createNewFile(webapps, \"foo-webapp.xml\", deploymentXml);\n+        webAppProvider.scan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDE1MTgxNQ==", "bodyText": "I will change the interval to 0 as I don't want to wait for the automatic scan. The test isn't relying on the order of the listeners, the test calls scan manually so assuming the listeners aren't notified in a separate thread then it is all good.\nI just added the test with the listener as a debugging thing to ensure the listeners were actually called. Now that I fixed the problem I can remove it and the test will remain the same without it.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r600151815", "createdAt": "2021-03-24T04:14:51Z", "author": {"login": "lachlan-roberts"}, "path": "jetty-deploy/src/test/java/org/eclipse/jetty/deploy/DeploymentTempDirTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.deploy;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jetty.deploy.providers.WebAppProvider;\n+import org.eclipse.jetty.server.Handler;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.handler.ContextHandlerCollection;\n+import org.eclipse.jetty.server.handler.DefaultHandler;\n+import org.eclipse.jetty.server.handler.HandlerCollection;\n+import org.eclipse.jetty.toolchain.test.FS;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.eclipse.jetty.util.Scanner;\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DeploymentTempDirTest\n+{\n+    private static final Logger LOG = Log.getLogger(DeploymentTempDirTest.class);\n+\n+    private final WebAppProvider webAppProvider = new WebAppProvider();\n+    private final ContextHandlerCollection contexts = new ContextHandlerCollection();\n+    private final Path testDir = MavenTestingUtils.getTargetTestingPath(DeploymentTempDirTest.class.getSimpleName());\n+    private final Path tmpDir = testDir.resolve(\"tmpDir\");\n+    private final Path webapps = testDir.resolve(\"webapps\");\n+    private final Server server = new Server();\n+\n+    @BeforeEach\n+    public void setup() throws Exception\n+    {\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        FS.ensureEmpty(testDir);\n+        FS.ensureEmpty(tmpDir);\n+        FS.ensureEmpty(webapps);\n+\n+        webAppProvider.setMonitoredDirName(webapps.toString());\n+        DeploymentManager deploymentManager = new DeploymentManager();\n+        deploymentManager.addAppProvider(webAppProvider);\n+        server.addBean(deploymentManager);\n+\n+        HandlerCollection handlerCollection = new HandlerCollection();\n+        handlerCollection.addHandler(contexts);\n+        handlerCollection.addHandler(new DefaultHandler());\n+        deploymentManager.setContexts(contexts);\n+        server.setHandler(handlerCollection);\n+    }\n+\n+    @AfterEach\n+    public void stop() throws Exception\n+    {\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testTmpDirectory() throws Exception\n+    {\n+        Path warPath = MavenTestingUtils.getTestResourcePath(\"webapps/foo-webapp-1.war\");\n+        String deploymentXml = \"<Configure class=\\\"org.eclipse.jetty.webapp.WebAppContext\\\">\\n\" +\n+            \"<Set name=\\\"war\\\">\" + warPath + \"</Set>\\n\" +\n+            \"<Set name=\\\"tempDirectory\\\">\" + tmpDir + \"</Set>\\n\" +\n+            \"<Set name=\\\"persistTempDirectory\\\">false</Set>\\n\" +\n+            \"</Configure>\";\n+\n+        server.start();\n+        WaitScannerListener listener = new WaitScannerListener();\n+        webAppProvider.addScannerListener(listener);\n+\n+        // Add the webapp xml which will will be detected after scan.\n+        listener.reset();\n+        createNewFile(webapps, \"foo-webapp.xml\", deploymentXml);\n+        webAppProvider.scan();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ1NTE5OA=="}, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc4MDkzMjM0OnYy", "diffSide": "RIGHT", "path": "jetty-deploy/src/test/java/org/eclipse/jetty/deploy/DeploymentTempDirTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQwNjo0NTozM1rOI6vADw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQwNjo0NTozM1rOI6vADw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ1ODM4Mw==", "bodyText": "Put a comment in here that we expect that on a redeploy, as persist == false, we expect the tmp directory to be deleted and re-created, so therefore this marker file should disappear.", "url": "https://github.com/eclipse/jetty.project/pull/5483#discussion_r598458383", "createdAt": "2021-03-22T06:45:33Z", "author": {"login": "janbartel"}, "path": "jetty-deploy/src/test/java/org/eclipse/jetty/deploy/DeploymentTempDirTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.deploy;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jetty.deploy.providers.WebAppProvider;\n+import org.eclipse.jetty.server.Handler;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.handler.ContextHandlerCollection;\n+import org.eclipse.jetty.server.handler.DefaultHandler;\n+import org.eclipse.jetty.server.handler.HandlerCollection;\n+import org.eclipse.jetty.toolchain.test.FS;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.IO;\n+import org.eclipse.jetty.util.Scanner;\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DeploymentTempDirTest\n+{\n+    private static final Logger LOG = Log.getLogger(DeploymentTempDirTest.class);\n+\n+    private final WebAppProvider webAppProvider = new WebAppProvider();\n+    private final ContextHandlerCollection contexts = new ContextHandlerCollection();\n+    private final Path testDir = MavenTestingUtils.getTargetTestingPath(DeploymentTempDirTest.class.getSimpleName());\n+    private final Path tmpDir = testDir.resolve(\"tmpDir\");\n+    private final Path webapps = testDir.resolve(\"webapps\");\n+    private final Server server = new Server();\n+\n+    @BeforeEach\n+    public void setup() throws Exception\n+    {\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        FS.ensureEmpty(testDir);\n+        FS.ensureEmpty(tmpDir);\n+        FS.ensureEmpty(webapps);\n+\n+        webAppProvider.setMonitoredDirName(webapps.toString());\n+        DeploymentManager deploymentManager = new DeploymentManager();\n+        deploymentManager.addAppProvider(webAppProvider);\n+        server.addBean(deploymentManager);\n+\n+        HandlerCollection handlerCollection = new HandlerCollection();\n+        handlerCollection.addHandler(contexts);\n+        handlerCollection.addHandler(new DefaultHandler());\n+        deploymentManager.setContexts(contexts);\n+        server.setHandler(handlerCollection);\n+    }\n+\n+    @AfterEach\n+    public void stop() throws Exception\n+    {\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testTmpDirectory() throws Exception\n+    {\n+        Path warPath = MavenTestingUtils.getTestResourcePath(\"webapps/foo-webapp-1.war\");\n+        String deploymentXml = \"<Configure class=\\\"org.eclipse.jetty.webapp.WebAppContext\\\">\\n\" +\n+            \"<Set name=\\\"war\\\">\" + warPath + \"</Set>\\n\" +\n+            \"<Set name=\\\"tempDirectory\\\">\" + tmpDir + \"</Set>\\n\" +\n+            \"<Set name=\\\"persistTempDirectory\\\">false</Set>\\n\" +\n+            \"</Configure>\";\n+\n+        server.start();\n+        WaitScannerListener listener = new WaitScannerListener();\n+        webAppProvider.addScannerListener(listener);\n+\n+        // Add the webapp xml which will will be detected after scan.\n+        listener.reset();\n+        createNewFile(webapps, \"foo-webapp.xml\", deploymentXml);\n+        webAppProvider.scan();\n+        webAppProvider.scan();\n+        listener.future.get(5, TimeUnit.SECONDS);\n+        WebAppContext webAppContext = getWebAppContext();\n+        assertThat(webAppContext.getTempDirectory(), is(tmpDir.toFile()));\n+\n+        // Add a known file to the temp directory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab3ae4f6ed7145336e96a2455102661733a41c1"}, "originalPosition": 117}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2182, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}