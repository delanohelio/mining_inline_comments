{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MjgzNjE1", "number": 5363, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDoxMTo1NVrOEoPc7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDoxMTo1NVrOEoPc7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjMxNjYzOnYy", "diffSide": "RIGHT", "path": "tests/test-webapps/test-proxy-webapp/src/test/java/org/eclipse/jetty/TestTransparentProxyServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDoxMTo1NVrOHZN78A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDoxMTo1NVrOHZN78A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwNDc4NA==", "bodyText": "Typo for ss.?", "url": "https://github.com/eclipse/jetty.project/pull/5363#discussion_r496204784", "createdAt": "2020-09-28T20:11:55Z", "author": {"login": "sbordet"}, "path": "tests/test-webapps/test-proxy-webapp/src/test/java/org/eclipse/jetty/TestTransparentProxyServer.java", "diffHunk": "@@ -18,118 +18,78 @@\n \n package org.eclipse.jetty;\n \n-import java.lang.management.ManagementFactory;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n \n-import org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory;\n-import org.eclipse.jetty.http2.HTTP2Cipher;\n-import org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory;\n-import org.eclipse.jetty.jmx.MBeanContainer;\n-import org.eclipse.jetty.server.ForwardedRequestCustomizer;\n-import org.eclipse.jetty.server.Handler;\n-import org.eclipse.jetty.server.HttpConfiguration;\n-import org.eclipse.jetty.server.HttpConnectionFactory;\n-import org.eclipse.jetty.server.SecureRequestCustomizer;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpStatus;\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.server.ServerConnector;\n-import org.eclipse.jetty.server.SslConnectionFactory;\n-import org.eclipse.jetty.server.handler.ContextHandlerCollection;\n-import org.eclipse.jetty.server.handler.DefaultHandler;\n-import org.eclipse.jetty.server.handler.HandlerCollection;\n-import org.eclipse.jetty.util.log.Log;\n-import org.eclipse.jetty.util.log.StdErrLog;\n-import org.eclipse.jetty.util.ssl.SslContextFactory;\n-import org.eclipse.jetty.util.thread.QueuedThreadPool;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.eclipse.jetty.util.resource.PathResource;\n import org.eclipse.jetty.webapp.WebAppContext;\n-import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n \n-@Disabled(\"Not a test case\")\n public class TestTransparentProxyServer\n {\n-    public static void main(String[] args) throws Exception\n-    {\n-        ((StdErrLog)Log.getLog()).setSource(false);\n-\n-        String jettyRoot = \"../../..\";\n-\n-        // Setup Threadpool\n-        QueuedThreadPool threadPool = new QueuedThreadPool();\n-        threadPool.setMaxThreads(100);\n-\n-        // Setup server\n-        Server server = new Server(threadPool);\n-        server.manage(threadPool);\n-\n-        // Setup JMX\n-        MBeanContainer mbContainer = new MBeanContainer(ManagementFactory.getPlatformMBeanServer());\n-        server.addBean(mbContainer);\n-        server.addBean(Log.getLog());\n-\n-        // Common HTTP configuration\n-        HttpConfiguration config = new HttpConfiguration();\n-        config.setSecurePort(8443);\n-        config.addCustomizer(new ForwardedRequestCustomizer());\n-        config.setSendDateHeader(true);\n-        config.setSendServerVersion(true);\n-\n-        // Http Connector\n-        HttpConnectionFactory http = new HttpConnectionFactory(config);\n-        ServerConnector httpConnector = new ServerConnector(server, http);\n-        httpConnector.setPort(8080);\n-        httpConnector.setIdleTimeout(30000);\n-        server.addConnector(httpConnector);\n-\n-        // SSL configurations\n-        SslContextFactory sslContextFactory = new SslContextFactory.Server();\n-        sslContextFactory.setKeyStorePath(jettyRoot + \"/jetty-server/src/main/config/etc/keystore\");\n-        sslContextFactory.setKeyStorePassword(\"OBF:1vny1zlo1x8e1vnw1vn61x8g1zlu1vn4\");\n-        sslContextFactory.setKeyManagerPassword(\"OBF:1u2u1wml1z7s1z7a1wnl1u2g\");\n-        sslContextFactory.setTrustStorePath(jettyRoot + \"/jetty-server/src/main/config/etc/keystore\");\n-        sslContextFactory.setTrustStorePassword(\"OBF:1vny1zlo1x8e1vnw1vn61x8g1zlu1vn4\");\n-        sslContextFactory.setExcludeCipherSuites(\n-            \"SSL_RSA_WITH_DES_CBC_SHA\",\n-            \"SSL_DHE_RSA_WITH_DES_CBC_SHA\",\n-            \"SSL_DHE_DSS_WITH_DES_CBC_SHA\",\n-            \"SSL_RSA_EXPORT_WITH_RC4_40_MD5\",\n-            \"SSL_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n-            \"SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA\",\n-            \"SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA\");\n-        sslContextFactory.setCipherComparator(new HTTP2Cipher.CipherComparator());\n+    private Server server;\n+    private HttpClient client;\n \n-        // HTTPS Configuration\n-        HttpConfiguration httpsConfig = new HttpConfiguration(config);\n-        httpsConfig.addCustomizer(new SecureRequestCustomizer());\n+    @BeforeEach\n+    public void setup() throws Exception\n+    {\n+        server = new Server();\n \n-        // HTTP2 factory\n-        HTTP2ServerConnectionFactory h2 = new HTTP2ServerConnectionFactory(httpsConfig);\n-        ALPNServerConnectionFactory alpn = new ALPNServerConnectionFactory();\n-        alpn.setDefaultProtocol(h2.getProtocol());\n+        ServerConnector connector = new ServerConnector(server);\n+        connector.setPort(0);\n+        server.addConnector(connector);\n \n-        // SSL Factory\n-        SslConnectionFactory ssl = new SslConnectionFactory(sslContextFactory, alpn.getProtocol());\n+        WebAppContext webapp = new WebAppContext();\n+        // This is a pieced together WebApp.\n+        // We don't have a valid WEB-INF/lib to rely on at this point.\n+        // So, open up server classes here, for purposes of this testcase.\n+        webapp.getServerClasspathPattern().add(\n+            \"-org.eclipse.jetty.proxy.\",\n+            \"-org.eclipse.jetty.client.\",\n+            \"-org.eclipse.jetty.util.ssl.\");\n+        webapp.getSystemClasspathPattern().add(\n+            \"org.eclipse.jetty.proxy.\",\n+            \"org.eclipse.jetty.client.\",\n+            \"org.eclipse.jetty.util.ss.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31e0f768722b30d694afc511502a9143d2647273"}, "originalPosition": 127}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2245, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}