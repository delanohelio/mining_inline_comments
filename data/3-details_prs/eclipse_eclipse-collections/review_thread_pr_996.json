{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5OTk0NzM0", "number": 996, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMTowNTo0NVrOEghbaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzozMDozNVrOEhcwIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTM3NTc5OnYy", "diffSide": "RIGHT", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/Bag.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMTowNTo0NVrOHNbevA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMTowNTo0NVrOHNbevA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0Mzc3Mg==", "bodyText": "This should be 11.0.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483843772", "createdAt": "2020-09-04T21:05:45Z", "author": {"login": "donraab"}, "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/Bag.java", "diffHunk": "@@ -107,6 +108,37 @@\n      */\n     void forEachWithOccurrences(ObjectIntProcedure<? super T> procedure);\n \n+    /**\n+     * Returns true if the predicate evaluates to true for any element of the Bag.\n+     * Returns false if the Bag is empty or if no element returns true for the predicate.\n+     *\n+     * @since 10.5", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTg3MDg2OnYy", "diffSide": "RIGHT", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/bag/sorted/immutable/ImmutableEmptySortedBag.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNDo0MjozMlrOHNfiKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNDo0MjozMlrOHNfiKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMDE4Nw==", "bodyText": "This should return true.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483910187", "createdAt": "2020-09-05T04:42:32Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/bag/sorted/immutable/ImmutableEmptySortedBag.java", "diffHunk": "@@ -117,6 +118,30 @@ public void forEachWithOccurrences(ObjectIntProcedure<? super T> procedure)\n     {\n     }\n \n+    @Override\n+    public boolean anySatisfyWithOccurrences(ObjectIntPredicate<? super T> predicate)\n+    {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean allSatisfyWithOccurrences(ObjectIntPredicate<? super T> predicate)\n+    {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTg4MTM4OnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTowMDowOVrOHNfm_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTowMDowOVrOHNfm_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMTQyMA==", "bodyText": "Please drop the test prefix in the name.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483911420", "createdAt": "2020-09-05T05:00:09Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java", "diffHunk": "@@ -121,6 +121,41 @@ public void equalsAndHashCode()\n         Assert.assertNotEquals(immutable, mutable.with(\"5\").without(\"1\"));\n     }\n \n+    @Test\n+    public void testAnySatisfyWithOccurrences()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTg4MTQ5OnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTowMDoxN1rOHNfnCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTowMDoxN1rOHNfnCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMTQzMg==", "bodyText": "Please drop the test prefix in the name.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483911432", "createdAt": "2020-09-05T05:00:17Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java", "diffHunk": "@@ -121,6 +121,41 @@ public void equalsAndHashCode()\n         Assert.assertNotEquals(immutable, mutable.with(\"5\").without(\"1\"));\n     }\n \n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\")));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\") && value == 2));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\") && value == 6));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"20\")));\n+    }\n+\n+    @Test\n+    public void testAllSatisfyWithOccurrences()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTg4MTU2OnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTowMDozMVrOHNfnEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTowMDozMVrOHNfnEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMTQ0MQ==", "bodyText": "Please drop the test prefix in the name.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483911441", "createdAt": "2020-09-05T05:00:31Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java", "diffHunk": "@@ -121,6 +121,41 @@ public void equalsAndHashCode()\n         Assert.assertNotEquals(immutable, mutable.with(\"5\").without(\"1\"));\n     }\n \n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\")));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\") && value == 2));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\") && value == 6));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"20\")));\n+    }\n+\n+    @Test\n+    public void testAllSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> Integer.parseInt(object) > 0));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(\"1\") && value == 1));\n+    }\n+\n+    @Test\n+    public void testNoneSatisfyWithOccurrences()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTg4MTcwOnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTowMDozOVrOHNfnIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTowMDozOVrOHNfnIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMTQ1OA==", "bodyText": "Please drop the test prefix in the name.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483911458", "createdAt": "2020-09-05T05:00:39Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java", "diffHunk": "@@ -121,6 +121,41 @@ public void equalsAndHashCode()\n         Assert.assertNotEquals(immutable, mutable.with(\"5\").without(\"1\"));\n     }\n \n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\")));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\") && value == 2));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\") && value == 6));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"20\")));\n+    }\n+\n+    @Test\n+    public void testAllSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> Integer.parseInt(object) > 0));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(\"1\") && value == 1));\n+    }\n+\n+    @Test\n+    public void testNoneSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> Integer.parseInt(object) > 100));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(\"1\") && value == 1));\n+    }\n+\n+    @Test\n+    public void testDetectWithOccurrences()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTg4MzQzOnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTowMzozMVrOHNfn5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTowMzozMVrOHNfn5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMTY1Mw==", "bodyText": "Please drop the test prefix in the name.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483911653", "createdAt": "2020-09-05T05:03:31Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java", "diffHunk": "@@ -81,6 +81,42 @@ public void testFactory()\n         Verify.assertInstanceOf(ImmutableEmptyBag.class, Bags.immutable.of());\n     }\n \n+    @Override\n+    @Test\n+    public void testAnySatisfyWithOccurrences()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTg4NTA1OnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTowNjoxOFrOHNfonQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTowNjoxOFrOHNfonQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMTgzNw==", "bodyText": "Please drop the test prefix in the name.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483911837", "createdAt": "2020-09-05T05:06:18Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java", "diffHunk": "@@ -81,6 +81,42 @@ public void testFactory()\n         Verify.assertInstanceOf(ImmutableEmptyBag.class, Bags.immutable.of());\n     }\n \n+    @Override\n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> true));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> false));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testAllSatisfyWithOccurrences()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTg4NTI0OnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTowNjo0MVrOHNfosw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTowNjo0MVrOHNfosw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMTg1OQ==", "bodyText": "These tests should assertTrue for empty.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483911859", "createdAt": "2020-09-05T05:06:41Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java", "diffHunk": "@@ -81,6 +81,42 @@ public void testFactory()\n         Verify.assertInstanceOf(ImmutableEmptyBag.class, Bags.immutable.of());\n     }\n \n+    @Override\n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> true));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> false));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testAllSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTg4NTM5OnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTowNjo1M1rOHNfoxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNTowNjo1M1rOHNfoxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMTg3Ng==", "bodyText": "Please drop the test prefix in the name.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483911876", "createdAt": "2020-09-05T05:06:53Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java", "diffHunk": "@@ -81,6 +81,42 @@ public void testFactory()\n         Verify.assertInstanceOf(ImmutableEmptyBag.class, Bags.immutable.of());\n     }\n \n+    @Override\n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> true));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> false));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testAllSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> true));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> false));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testNoneSatisfyWithOccurrences()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTg4ODA2OnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNToxMToxOFrOHNfqAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNToxMToxOFrOHNfqAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMjE5NQ==", "bodyText": "Please drop the test prefix in the name.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483912195", "createdAt": "2020-09-05T05:11:18Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java", "diffHunk": "@@ -81,6 +81,42 @@ public void testFactory()\n         Verify.assertInstanceOf(ImmutableEmptyBag.class, Bags.immutable.of());\n     }\n \n+    @Override\n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> true));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> false));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testAllSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> true));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> false));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testNoneSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> true));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> false));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testDetectWithOccurrences()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTg4ODIzOnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNToxMTozN1rOHNfqFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNToxMTozN1rOHNfqFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMjIxNA==", "bodyText": "Please drop the test prefix in the name.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483912214", "createdAt": "2020-09-05T05:11:37Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java", "diffHunk": "@@ -94,6 +94,52 @@ public void equalsAndHashCode()\n         Verify.assertEqualsAndHashCode(UnifiedMap.newWithKeysValues(1, 1), immutable.toMapOfItemToCount());\n     }\n \n+    @Override\n+    @Test\n+    public void testAnySatisfyWithOccurrences()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTg4ODM2OnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNToxMTo0NVrOHNfqJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNToxMTo0NVrOHNfqJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMjIyOA==", "bodyText": "Please drop the test prefix in the name.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483912228", "createdAt": "2020-09-05T05:11:45Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java", "diffHunk": "@@ -94,6 +94,52 @@ public void equalsAndHashCode()\n         Verify.assertEqualsAndHashCode(UnifiedMap.newWithKeysValues(1, 1), immutable.toMapOfItemToCount());\n     }\n \n+    @Override\n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL)));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 1));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 10));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL) && value == 10));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL)));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testAllSatisfyWithOccurrences()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTg4ODUwOnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNToxMTo1OVrOHNfqMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNToxMTo1OVrOHNfqMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMjI0Mg==", "bodyText": "Please drop the test prefix in the name.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483912242", "createdAt": "2020-09-05T05:11:59Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java", "diffHunk": "@@ -94,6 +94,52 @@ public void equalsAndHashCode()\n         Verify.assertEqualsAndHashCode(UnifiedMap.newWithKeysValues(1, 1), immutable.toMapOfItemToCount());\n     }\n \n+    @Override\n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL)));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 1));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 10));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL) && value == 10));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL)));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testAllSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(VAL)));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 1));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 10));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL) && value == 10));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL)));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testNoneSatisfyWithOccurrences()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTg4ODY5OnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNToxMjowN1rOHNfqRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNToxMjowN1rOHNfqRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMjI2Mw==", "bodyText": "Please drop the test prefix in the name.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483912263", "createdAt": "2020-09-05T05:12:07Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java", "diffHunk": "@@ -94,6 +94,52 @@ public void equalsAndHashCode()\n         Verify.assertEqualsAndHashCode(UnifiedMap.newWithKeysValues(1, 1), immutable.toMapOfItemToCount());\n     }\n \n+    @Override\n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL)));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 1));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 10));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL) && value == 10));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL)));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testAllSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(VAL)));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 1));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 10));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL) && value == 10));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL)));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testNoneSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(VAL)));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 1));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL)));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL) && value == 1));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testDetectWithOccurrences()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTA5MDkxOnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoyODozMlrOHOxTAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoyODozMlrOHOxTAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0OTc5Mw==", "bodyText": "The object tests should use .equals() not ==.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r485249793", "createdAt": "2020-09-08T23:28:32Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java", "diffHunk": "@@ -122,6 +122,41 @@ public void equalsAndHashCode()\n         Assert.assertNotEquals(bag1, bag2);\n     }\n \n+    @Test\n+    public void anySatisfyWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773875f17ef60c2f42e2d4fb4242a4729d6da59a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTA5Mjg1OnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoyOTozMFrOHOxUEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoyOTozMFrOHOxUEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MDA2Ng==", "bodyText": "The object tests should use .equals() not ==.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r485250066", "createdAt": "2020-09-08T23:29:30Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java", "diffHunk": "@@ -122,6 +122,41 @@ public void equalsAndHashCode()\n         Assert.assertNotEquals(bag1, bag2);\n     }\n \n+    @Test\n+    public void anySatisfyWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 1));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 6));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 20));\n+    }\n+\n+    @Test\n+    public void allSatisfyWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object > 0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773875f17ef60c2f42e2d4fb4242a4729d6da59a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTA5Mjk4OnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoyOTozNlrOHOxUKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoyOTozNlrOHOxUKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MDA5MQ==", "bodyText": "The object tests should use .equals() not ==.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r485250091", "createdAt": "2020-09-08T23:29:36Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java", "diffHunk": "@@ -122,6 +122,41 @@ public void equalsAndHashCode()\n         Assert.assertNotEquals(bag1, bag2);\n     }\n \n+    @Test\n+    public void anySatisfyWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 1));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 6));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 20));\n+    }\n+\n+    @Test\n+    public void allSatisfyWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object > 0));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 1 && value == 1));\n+    }\n+\n+    @Test\n+    public void noneSatisfyWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object > 100));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773875f17ef60c2f42e2d4fb4242a4729d6da59a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTA5MzQzOnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoyOTo0NVrOHOxUYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoyOTo0NVrOHOxUYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MDE0NQ==", "bodyText": "The object tests should use .equals() not ==.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r485250145", "createdAt": "2020-09-08T23:29:45Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java", "diffHunk": "@@ -122,6 +122,41 @@ public void equalsAndHashCode()\n         Assert.assertNotEquals(bag1, bag2);\n     }\n \n+    @Test\n+    public void anySatisfyWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 1));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 6));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 20));\n+    }\n+\n+    @Test\n+    public void allSatisfyWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object > 0));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 1 && value == 1));\n+    }\n+\n+    @Test\n+    public void noneSatisfyWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object > 100));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 1 && value == 1));\n+    }\n+\n+    @Test\n+    public void detectWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertEquals((Integer) 1, bag.detectWithOccurrences((object, value) -> object == 1 && value == 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773875f17ef60c2f42e2d4fb4242a4729d6da59a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTA5NDYyOnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzozMDoxM1rOHOxVBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzozMDoxM1rOHOxVBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MDMwOA==", "bodyText": "The object tests should use .equals() not ==.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r485250308", "createdAt": "2020-09-08T23:30:13Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java", "diffHunk": "@@ -482,6 +482,57 @@ public void topOccurrences()\n         Verify.assertThrows(IllegalArgumentException.class, () -> this.newWith().topOccurrences(-1));\n     }\n \n+    @Test\n+    public void anySatisfyWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3 && value == 3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773875f17ef60c2f42e2d4fb4242a4729d6da59a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTA5NDkzOnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzozMDoyMFrOHOxVLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzozMDoyMFrOHOxVLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MDM0OA==", "bodyText": "The object tests should use .equals() not ==.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r485250348", "createdAt": "2020-09-08T23:30:20Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java", "diffHunk": "@@ -482,6 +482,57 @@ public void topOccurrences()\n         Verify.assertThrows(IllegalArgumentException.class, () -> this.newWith().topOccurrences(-1));\n     }\n \n+    @Test\n+    public void anySatisfyWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3));\n+\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 5));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 1 && value == 7));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 10));\n+    }\n+\n+    @Test\n+    public void noneSatisfyWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 3 && value == 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773875f17ef60c2f42e2d4fb4242a4729d6da59a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTA5NTEzOnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzozMDoyN1rOHOxVSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzozMDoyN1rOHOxVSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MDM3OA==", "bodyText": "The object tests should use .equals() not ==.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r485250378", "createdAt": "2020-09-08T23:30:27Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java", "diffHunk": "@@ -482,6 +482,57 @@ public void topOccurrences()\n         Verify.assertThrows(IllegalArgumentException.class, () -> this.newWith().topOccurrences(-1));\n     }\n \n+    @Test\n+    public void anySatisfyWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3));\n+\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 5));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 1 && value == 7));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 10));\n+    }\n+\n+    @Test\n+    public void noneSatisfyWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 3 && value == 1));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 30));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 1 && value == 0));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 1 && value == 1));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 2));\n+    }\n+\n+    @Test\n+    public void allSatisfyWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3);\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773875f17ef60c2f42e2d4fb4242a4729d6da59a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTA5NTM3OnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzozMDozNVrOHOxVaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzozMDozNVrOHOxVaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MDQxMQ==", "bodyText": "The object tests should use .equals() not ==.", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r485250411", "createdAt": "2020-09-08T23:30:35Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java", "diffHunk": "@@ -482,6 +482,57 @@ public void topOccurrences()\n         Verify.assertThrows(IllegalArgumentException.class, () -> this.newWith().topOccurrences(-1));\n     }\n \n+    @Test\n+    public void anySatisfyWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3));\n+\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 5));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 1 && value == 7));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 10));\n+    }\n+\n+    @Test\n+    public void noneSatisfyWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 3 && value == 1));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 30));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 1 && value == 0));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 1 && value == 1));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 2));\n+    }\n+\n+    @Test\n+    public void allSatisfyWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3);\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 4 && value == 3));\n+        bag = this.newWith(3, 3, 3, 1);\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 1 && value == 3));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3 || object == 1));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 300 || object == 1));\n+    }\n+\n+    @Test\n+    public void detectWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        Assert.assertEquals((Integer) 3, bag.detectWithOccurrences((object, value) -> object == 3 && value == 3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773875f17ef60c2f42e2d4fb4242a4729d6da59a"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3711, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}