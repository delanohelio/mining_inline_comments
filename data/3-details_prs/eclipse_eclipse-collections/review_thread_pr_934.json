{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNjYxNjcy", "number": 934, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMjoyMDo0N1rOEXB3lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMjoyNDoxNlrOEXB5_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTgzMzE2OnYy", "diffSide": "LEFT", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/map/ordered/mutable/UnmodifiableMutableOrderedMap.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMjoyMDo0N1rOG-mCfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMToyMzo0NVrOG_4n-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI4ODEyNA==", "bodyText": "Why remove this implementation?", "url": "https://github.com/eclipse/eclipse-collections/pull/934#discussion_r468288124", "createdAt": "2020-08-11T02:20:47Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/map/ordered/mutable/UnmodifiableMutableOrderedMap.java", "diffHunk": "@@ -1566,12 +1565,6 @@ public void forEachWithIndex(\n         this.delegate.forEachWithIndex(fromIndex, toIndex, objectIntProcedure);\n     }\n \n-    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2aff2d433f6c3a927fcb38ab3f75acd9b820d536"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0MjU3NQ==", "bodyText": "This is a philosophical thing where we should just decide/agree what we're going to do. Real mutations are always concrete. There are some composite methods that mutate, like MutableMapIterable.putPair() but they always delegate to another concrete method like put(). So it's always safe to delete methods from Unmodifiable wrappers; I've yet to see any counter-example. On the other hand, it would be super-consistent to delegate all read-only methods to the delegate. But we don't do that either. UnmodifiableMutableOrderedMap is missing overrides of all sorts of things.\n\nOur own mutating methods, like putPair\nJDK mutating methods, like replaceAll\nOur own read-only methods, like countByEach\nJDK read-only methods, like forEach(BiConsumer)\n\nThere are something like ~20 methods that you might expect to be overridden and are not. Given the current state of affairs, I think I've made things more consistent with this change, even if we choose to go in a different direction later.", "url": "https://github.com/eclipse/eclipse-collections/pull/934#discussion_r468642575", "createdAt": "2020-08-11T14:51:43Z", "author": {"login": "motlin"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/map/ordered/mutable/UnmodifiableMutableOrderedMap.java", "diffHunk": "@@ -1566,12 +1565,6 @@ public void forEachWithIndex(\n         this.delegate.forEachWithIndex(fromIndex, toIndex, objectIntProcedure);\n     }\n \n-    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI4ODEyNA=="}, "originalCommit": {"oid": "2aff2d433f6c3a927fcb38ab3f75acd9b820d536"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0MTIwOA==", "bodyText": "Thanks for the clarification. I'm good with this.", "url": "https://github.com/eclipse/eclipse-collections/pull/934#discussion_r469641208", "createdAt": "2020-08-13T01:23:45Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/map/ordered/mutable/UnmodifiableMutableOrderedMap.java", "diffHunk": "@@ -1566,12 +1565,6 @@ public void forEachWithIndex(\n         this.delegate.forEachWithIndex(fromIndex, toIndex, objectIntProcedure);\n     }\n \n-    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI4ODEyNA=="}, "originalCommit": {"oid": "2aff2d433f6c3a927fcb38ab3f75acd9b820d536"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTgzNDMyOnYy", "diffSide": "LEFT", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/set/sorted/mutable/UnmodifiableSortedSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMjoyMToyNlrOG-mDLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMjoyMToyNlrOG-mDLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI4ODMwMw==", "bodyText": "Why remove this implementation?", "url": "https://github.com/eclipse/eclipse-collections/pull/934#discussion_r468288303", "createdAt": "2020-08-11T02:21:26Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/set/sorted/mutable/UnmodifiableSortedSet.java", "diffHunk": "@@ -452,12 +451,6 @@ public int compareTo(SortedSetIterable<T> o)\n         return this.getSortedSet().compareTo(o);\n     }\n \n-    @Override\n-    public MutableStack<T> toStack()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2aff2d433f6c3a927fcb38ab3f75acd9b820d536"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTgzOTM0OnYy", "diffSide": "LEFT", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/stack/immutable/ImmutableArrayStack.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMjoyNDoxNlrOG-mGAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMToyNDoyN1rOG_4qWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI4OTAyNw==", "bodyText": "Do you recall why we did this? Is this safe to replace with the default method?", "url": "https://github.com/eclipse/eclipse-collections/pull/934#discussion_r468289027", "createdAt": "2020-08-11T02:24:16Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/stack/immutable/ImmutableArrayStack.java", "diffHunk": "@@ -299,12 +297,6 @@ public boolean containsAllArguments(Object... elements)\n         return this.delegate.asReversed().containsAllArguments(elements);\n     }\n \n-    @Override\n-    public MutableStack<T> toStack()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2aff2d433f6c3a927fcb38ab3f75acd9b820d536"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0NTIyMA==", "bodyText": "The default implementation lives in StackIterable and is:\n    @Override\n    default MutableStack<T> toStack()\n    {\n        return Stacks.mutable.withAllReversed(this);\n    }\nWhich is implemented in MutableStackFactoryImpl\n    @Override\n    public <T> MutableStack<T> withAllReversed(Iterable<? extends T> items)\n    {\n        return ArrayStack.newStackFromTopToBottom(items);\n    }\nSo yes it's safe. I don't remember why we wrote this. Sometimes we've created patterns like this as an optimization, but I rarely want to do that. It would have to be for one of the most common iteration patterns and one of the most common collections to make it worth even performance testing.", "url": "https://github.com/eclipse/eclipse-collections/pull/934#discussion_r468645220", "createdAt": "2020-08-11T14:55:17Z", "author": {"login": "motlin"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/stack/immutable/ImmutableArrayStack.java", "diffHunk": "@@ -299,12 +297,6 @@ public boolean containsAllArguments(Object... elements)\n         return this.delegate.asReversed().containsAllArguments(elements);\n     }\n \n-    @Override\n-    public MutableStack<T> toStack()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI4OTAyNw=="}, "originalCommit": {"oid": "2aff2d433f6c3a927fcb38ab3f75acd9b820d536"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0MTgxNg==", "bodyText": "Great, didn't release it was overriding a default method on StackIterable. I'm good with this.", "url": "https://github.com/eclipse/eclipse-collections/pull/934#discussion_r469641816", "createdAt": "2020-08-13T01:24:27Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/stack/immutable/ImmutableArrayStack.java", "diffHunk": "@@ -299,12 +297,6 @@ public boolean containsAllArguments(Object... elements)\n         return this.delegate.asReversed().containsAllArguments(elements);\n     }\n \n-    @Override\n-    public MutableStack<T> toStack()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI4OTAyNw=="}, "originalCommit": {"oid": "2aff2d433f6c3a927fcb38ab3f75acd9b820d536"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3692, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}