{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMzY2OTE1", "number": 853, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODo0ODo1MVrODxWE1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxOTozMToxN1rOD2K5iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDY4NTAwOnYy", "diffSide": "RIGHT", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/list/Interval.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODo0ODo1MVrOGEw46A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMToyODo1NVrOGK86GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0ODQ4OA==", "bodyText": "should the name be fromToExclusive()?", "url": "https://github.com/eclipse/eclipse-collections/pull/853#discussion_r407648488", "createdAt": "2020-04-13T18:48:51Z", "author": {"login": "nikhilnanivadekar"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/list/Interval.java", "diffHunk": "@@ -176,6 +176,26 @@ public static Interval fromTo(int from, int to)\n         return Interval.fromToBy(from, to, -1);\n     }\n \n+    /**\n+     * Returns an Interval starting from the value from until the specified value to (exclusive) with a step value of 1\n+     */\n+    public static Interval fromUntilTo(int from, int to)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc6ef44b4aa41873cf67bbfdc261f0c67475e798"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyNTQ0OA==", "bodyText": "I thought you were okay with some other signature for the API. Let me use fromToExclusive", "url": "https://github.com/eclipse/eclipse-collections/pull/853#discussion_r407725448", "createdAt": "2020-04-13T21:14:41Z", "author": {"login": "sendilkumarn"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/list/Interval.java", "diffHunk": "@@ -176,6 +176,26 @@ public static Interval fromTo(int from, int to)\n         return Interval.fromToBy(from, to, -1);\n     }\n \n+    /**\n+     * Returns an Interval starting from the value from until the specified value to (exclusive) with a step value of 1\n+     */\n+    public static Interval fromUntilTo(int from, int to)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0ODQ4OA=="}, "originalCommit": {"oid": "cc6ef44b4aa41873cf67bbfdc261f0c67475e798"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczMzAyNw==", "bodyText": "I am fine with the naming. Naming is hard, so I\u2019ll let others also opine on naming", "url": "https://github.com/eclipse/eclipse-collections/pull/853#discussion_r407733027", "createdAt": "2020-04-13T21:30:13Z", "author": {"login": "nikhilnanivadekar"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/list/Interval.java", "diffHunk": "@@ -176,6 +176,26 @@ public static Interval fromTo(int from, int to)\n         return Interval.fromToBy(from, to, -1);\n     }\n \n+    /**\n+     * Returns an Interval starting from the value from until the specified value to (exclusive) with a step value of 1\n+     */\n+    public static Interval fromUntilTo(int from, int to)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0ODQ4OA=="}, "originalCommit": {"oid": "cc6ef44b4aa41873cf67bbfdc261f0c67475e798"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQzNDM2OA==", "bodyText": "I like fromToExclusive better.  @motlin what's your opinion here?", "url": "https://github.com/eclipse/eclipse-collections/pull/853#discussion_r413434368", "createdAt": "2020-04-23T01:02:17Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/list/Interval.java", "diffHunk": "@@ -176,6 +176,26 @@ public static Interval fromTo(int from, int to)\n         return Interval.fromToBy(from, to, -1);\n     }\n \n+    /**\n+     * Returns an Interval starting from the value from until the specified value to (exclusive) with a step value of 1\n+     */\n+    public static Interval fromUntilTo(int from, int to)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0ODQ4OA=="}, "originalCommit": {"oid": "cc6ef44b4aa41873cf67bbfdc261f0c67475e798"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEzNjg1Nw==", "bodyText": "Took the until inspiration from the Kotlin. Changed the API to fromToExclusive to align with other APIs. :)", "url": "https://github.com/eclipse/eclipse-collections/pull/853#discussion_r414136857", "createdAt": "2020-04-23T21:28:55Z", "author": {"login": "sendilkumarn"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/list/Interval.java", "diffHunk": "@@ -176,6 +176,26 @@ public static Interval fromTo(int from, int to)\n         return Interval.fromToBy(from, to, -1);\n     }\n \n+    /**\n+     * Returns an Interval starting from the value from until the specified value to (exclusive) with a step value of 1\n+     */\n+    public static Interval fromUntilTo(int from, int to)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0ODQ4OA=="}, "originalCommit": {"oid": "cc6ef44b4aa41873cf67bbfdc261f0c67475e798"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDY5MTc0OnYy", "diffSide": "RIGHT", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/list/Interval.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODo1MDo0NFrOGEw88g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMTo1Njo0OVrOGL66EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0OTUyMg==", "bodyText": "This will not work for negatives. For negatives it needs to be to+1", "url": "https://github.com/eclipse/eclipse-collections/pull/853#discussion_r407649522", "createdAt": "2020-04-13T18:50:44Z", "author": {"login": "nikhilnanivadekar"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/list/Interval.java", "diffHunk": "@@ -176,6 +176,26 @@ public static Interval fromTo(int from, int to)\n         return Interval.fromToBy(from, to, -1);\n     }\n \n+    /**\n+     * Returns an Interval starting from the value from until the specified value to (exclusive) with a step value of 1\n+     */\n+    public static Interval fromUntilTo(int from, int to)\n+    {\n+        if (to == Integer.MIN_VALUE)\n+        {\n+            throw new IllegalArgumentException(\"to cannot be the Integer minimum value \" + Integer.MIN_VALUE);\n+        }\n+\n+        int until = to - 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc6ef44b4aa41873cf67bbfdc261f0c67475e798"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyNDc1NA==", "bodyText": "I think this should be to - 1 even for negatives.\n// For example this is what will happen in the Kotlin's until\nfor (i in -10 until -1) {   \n    print(i) // -10-9-8-7-6-5-4-3-2\n}", "url": "https://github.com/eclipse/eclipse-collections/pull/853#discussion_r407724754", "createdAt": "2020-04-13T21:13:20Z", "author": {"login": "sendilkumarn"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/list/Interval.java", "diffHunk": "@@ -176,6 +176,26 @@ public static Interval fromTo(int from, int to)\n         return Interval.fromToBy(from, to, -1);\n     }\n \n+    /**\n+     * Returns an Interval starting from the value from until the specified value to (exclusive) with a step value of 1\n+     */\n+    public static Interval fromUntilTo(int from, int to)\n+    {\n+        if (to == Integer.MIN_VALUE)\n+        {\n+            throw new IllegalArgumentException(\"to cannot be the Integer minimum value \" + Integer.MIN_VALUE);\n+        }\n+\n+        int until = to - 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0OTUyMg=="}, "originalCommit": {"oid": "cc6ef44b4aa41873cf67bbfdc261f0c67475e798"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzMDU0OA==", "bodyText": "Hi @sendilkumarn , I think @nikhilnanivadekar comment above is why Interval.fromToExclusive(0, -9) is returning a size of 11.", "url": "https://github.com/eclipse/eclipse-collections/pull/853#discussion_r415130548", "createdAt": "2020-04-25T19:45:31Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/list/Interval.java", "diffHunk": "@@ -176,6 +176,26 @@ public static Interval fromTo(int from, int to)\n         return Interval.fromToBy(from, to, -1);\n     }\n \n+    /**\n+     * Returns an Interval starting from the value from until the specified value to (exclusive) with a step value of 1\n+     */\n+    public static Interval fromUntilTo(int from, int to)\n+    {\n+        if (to == Integer.MIN_VALUE)\n+        {\n+            throw new IllegalArgumentException(\"to cannot be the Integer minimum value \" + Integer.MIN_VALUE);\n+        }\n+\n+        int until = to - 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0OTUyMg=="}, "originalCommit": {"oid": "cc6ef44b4aa41873cf67bbfdc261f0c67475e798"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzMzUxOA==", "bodyText": "This is tricky especially because we support both forward and reverse interval generation in the same API.\nHow about this,\nif (to < 0) {\n    if (from <  to) {\n        to = to - 1;\n    } else {\n       to = to + 1;\n    }\n} \n\nInterval.fromToExclusive(0, -9)  => 0, -1, -2, -3, -4, -5, -6, -7, -8 \n\nInterval.fromToExclusive(-10, -5)  => -10, -9, -8, -7, -6\n\n\nWhat do you think? I guess this is how range in python works", "url": "https://github.com/eclipse/eclipse-collections/pull/853#discussion_r415133518", "createdAt": "2020-04-25T20:03:12Z", "author": {"login": "sendilkumarn"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/list/Interval.java", "diffHunk": "@@ -176,6 +176,26 @@ public static Interval fromTo(int from, int to)\n         return Interval.fromToBy(from, to, -1);\n     }\n \n+    /**\n+     * Returns an Interval starting from the value from until the specified value to (exclusive) with a step value of 1\n+     */\n+    public static Interval fromUntilTo(int from, int to)\n+    {\n+        if (to == Integer.MIN_VALUE)\n+        {\n+            throw new IllegalArgumentException(\"to cannot be the Integer minimum value \" + Integer.MIN_VALUE);\n+        }\n+\n+        int until = to - 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0OTUyMg=="}, "originalCommit": {"oid": "cc6ef44b4aa41873cf67bbfdc261f0c67475e798"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzNTEzOQ==", "bodyText": "What about the following?\nInterval.fromToExclusive(10, 0)\nInterval.fromToExclusive(100, 50)", "url": "https://github.com/eclipse/eclipse-collections/pull/853#discussion_r415135139", "createdAt": "2020-04-25T20:13:02Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/list/Interval.java", "diffHunk": "@@ -176,6 +176,26 @@ public static Interval fromTo(int from, int to)\n         return Interval.fromToBy(from, to, -1);\n     }\n \n+    /**\n+     * Returns an Interval starting from the value from until the specified value to (exclusive) with a step value of 1\n+     */\n+    public static Interval fromUntilTo(int from, int to)\n+    {\n+        if (to == Integer.MIN_VALUE)\n+        {\n+            throw new IllegalArgumentException(\"to cannot be the Integer minimum value \" + Integer.MIN_VALUE);\n+        }\n+\n+        int until = to - 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0OTUyMg=="}, "originalCommit": {"oid": "cc6ef44b4aa41873cf67bbfdc261f0c67475e798"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1MjY1Nw==", "bodyText": "Interval.fromToExclusive(10, 0) // 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nInterval.fromToExclusive(100, 50)  // 100, 99, ..... 51", "url": "https://github.com/eclipse/eclipse-collections/pull/853#discussion_r415152657", "createdAt": "2020-04-25T21:56:49Z", "author": {"login": "sendilkumarn"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/list/Interval.java", "diffHunk": "@@ -176,6 +176,26 @@ public static Interval fromTo(int from, int to)\n         return Interval.fromToBy(from, to, -1);\n     }\n \n+    /**\n+     * Returns an Interval starting from the value from until the specified value to (exclusive) with a step value of 1\n+     */\n+    public static Interval fromUntilTo(int from, int to)\n+    {\n+        if (to == Integer.MIN_VALUE)\n+        {\n+            throw new IllegalArgumentException(\"to cannot be the Integer minimum value \" + Integer.MIN_VALUE);\n+        }\n+\n+        int until = to - 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0OTUyMg=="}, "originalCommit": {"oid": "cc6ef44b4aa41873cf67bbfdc261f0c67475e798"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDY5NjcyOnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/list/IntervalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODo1MjoxM1rOGExAHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODo1MjoxM1rOGExAHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY1MDMzMg==", "bodyText": "Please add tests for:\n\nnegative numbers\npositive to negative numbers\nnegative to positive numbers\nInteger.MIN to Integer.MAX\nInteger.MAX to Integer.MIN\nTests to show parity with IntStream().range()", "url": "https://github.com/eclipse/eclipse-collections/pull/853#discussion_r407650332", "createdAt": "2020-04-13T18:52:13Z", "author": {"login": "nikhilnanivadekar"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/list/IntervalTest.java", "diffHunk": "@@ -53,6 +53,21 @@ public void into()\n         Assert.assertEquals(10, sum);\n     }\n \n+    @Test\n+    public void fromUntilTo()\n+    {\n+        Interval interval = Interval.from(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc6ef44b4aa41873cf67bbfdc261f0c67475e798"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTI4MjY0OnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/list/IntervalTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxOTozMToxN1rOGL5aGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo0MTozOVrOGMEAjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEyODA4OQ==", "bodyText": "This looks incorrect. Interval.fromTo(0, -10) has a size of 11 right above. I would expect Interval.fromToExclusive(0, -9) to return a size of 9.", "url": "https://github.com/eclipse/eclipse-collections/pull/853#discussion_r415128089", "createdAt": "2020-04-25T19:31:17Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/list/IntervalTest.java", "diffHunk": "@@ -467,8 +506,10 @@ public void size()\n         Verify.assertSize(12, Interval.fromToBy(1, 100, 9));\n         Verify.assertSize(10, Interval.fromToBy(1, 100, 10));\n         Verify.assertSize(11, Interval.fromTo(0, 10));\n+        Verify.assertSize(11, Interval.fromToExclusive(0, 11));\n         Verify.assertSize(1, Interval.zero());\n         Verify.assertSize(11, Interval.fromTo(0, -10));\n+        Verify.assertSize(11, Interval.fromToExclusive(0, -9));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bff57989a389ecefb87fb932bb8f786898b099b"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMTc3Mg==", "bodyText": "Updated", "url": "https://github.com/eclipse/eclipse-collections/pull/853#discussion_r415301772", "createdAt": "2020-04-26T12:41:39Z", "author": {"login": "sendilkumarn"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/list/IntervalTest.java", "diffHunk": "@@ -467,8 +506,10 @@ public void size()\n         Verify.assertSize(12, Interval.fromToBy(1, 100, 9));\n         Verify.assertSize(10, Interval.fromToBy(1, 100, 10));\n         Verify.assertSize(11, Interval.fromTo(0, 10));\n+        Verify.assertSize(11, Interval.fromToExclusive(0, 11));\n         Verify.assertSize(1, Interval.zero());\n         Verify.assertSize(11, Interval.fromTo(0, -10));\n+        Verify.assertSize(11, Interval.fromToExclusive(0, -9));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEyODA4OQ=="}, "originalCommit": {"oid": "9bff57989a389ecefb87fb932bb8f786898b099b"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3774, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}