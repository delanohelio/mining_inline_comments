{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NzU2ODU0", "number": 881, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoyNzoxMFrOD6f2kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDo0NTozNlrOD6qo4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjY1ODcyOnYy", "diffSide": "RIGHT", "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoyNzoxMFrOGSXtZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoyNzoxMFrOGSXtZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxNjAwNw==", "bodyText": "If you implement this as a default method, then we can release in a minor version.", "url": "https://github.com/eclipse/eclipse-collections/pull/881#discussion_r421916007", "createdAt": "2020-05-08T03:27:10Z", "author": {"login": "donraab"}, "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "diffHunk": "@@ -63,6 +63,13 @@ public interface <name>Iterable extends PrimitiveIterable\n      */\n     <type>[] toArray();\n \n+    /**\n+     * Converts the <name>Iterable to a primitive <type> array. If the collection fits into the provided array it is used\n+     * to store its elements and is returned from the method, otherwise a new array of the appropriate size is allocated\n+     * and returned. If the iterable is empty, the target array is returned unchanged.\n+     */\n+    <type>[] toArray(<type>[] target);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f07d21838beb50baacd3aca5b57fb774edf67a30"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODQyMjUyOnYy", "diffSide": "RIGHT", "path": "eclipse-collections-code-generator/src/main/resources/impl/bag/mutable/primitiveHashBag.stg", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDo0NDo0MFrOGSoGWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDo0NDo0MFrOGSoGWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4NDUzNg==", "bodyText": "Nitpick: I don't see much advantage of using forEachWithOccurrences when the output is of size size(). Might as well delegate to forEachWithIndex or forEach?", "url": "https://github.com/eclipse/eclipse-collections/pull/881#discussion_r422184536", "createdAt": "2020-05-08T14:44:40Z", "author": {"login": "motlin"}, "path": "eclipse-collections-code-generator/src/main/resources/impl/bag/mutable/primitiveHashBag.stg", "diffHunk": "@@ -745,6 +745,28 @@ public class <name>HashBag\n         return array;\n     }\n \n+    @Override\n+    public <type>[] toArray(<type>[] array)\n+    {\n+        if (array.length \\< this.size())\n+        {\n+            array = new <type>[this.size()];\n+        }\n+\n+        int[] index = {0};\n+\n+        <type>[] finalBypass = array;\n+        this.forEachWithOccurrences((<type> each, int occurrences) ->\n+        {\n+            for (int i = 0; i \\< occurrences; i++)\n+            {\n+                finalBypass[index[0]] = each;\n+                index[0]++;\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f07d21838beb50baacd3aca5b57fb774edf67a30"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODQyNTk0OnYy", "diffSide": "RIGHT", "path": "eclipse-collections-code-generator/src/main/resources/impl/list/immutable/immutablePrimitiveArrayList.stg", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDo0NTozNlrOGSoIXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNTozMToxNFrOGSpsOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4NTA1NQ==", "bodyText": "Is this an unrelated change that snuck in?", "url": "https://github.com/eclipse/eclipse-collections/pull/881#discussion_r422185055", "createdAt": "2020-05-08T14:45:36Z", "author": {"login": "motlin"}, "path": "eclipse-collections-code-generator/src/main/resources/impl/list/immutable/immutablePrimitiveArrayList.stg", "diffHunk": "@@ -92,6 +92,12 @@ final class Immutable<name>ArrayList\n         return new Immutable<name>ArrayList(newArray);\n     }\n \n+    public static Immutable<name>ArrayList newListFrom(<name>List itemList)\n+    {\n+        <type>[] newArray = itemList.toArray(new <type>[itemList.size()]);\n+        return new Immutable<name>ArrayList(newArray);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f07d21838beb50baacd3aca5b57fb774edf67a30"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5MzQ4MQ==", "bodyText": "It's actually the reason for the change I believe. I was going to comment but then thought this is probably a good use case validation that the behavior is working. I believe this was the only use case I saw other than tests.", "url": "https://github.com/eclipse/eclipse-collections/pull/881#discussion_r422193481", "createdAt": "2020-05-08T14:59:38Z", "author": {"login": "donraab"}, "path": "eclipse-collections-code-generator/src/main/resources/impl/list/immutable/immutablePrimitiveArrayList.stg", "diffHunk": "@@ -92,6 +92,12 @@ final class Immutable<name>ArrayList\n         return new Immutable<name>ArrayList(newArray);\n     }\n \n+    public static Immutable<name>ArrayList newListFrom(<name>List itemList)\n+    {\n+        <type>[] newArray = itemList.toArray(new <type>[itemList.size()]);\n+        return new Immutable<name>ArrayList(newArray);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4NTA1NQ=="}, "originalCommit": {"oid": "f07d21838beb50baacd3aca5b57fb774edf67a30"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5NjkwNg==", "bodyText": "This could be clarified in the commit message or be a separate commit to split the use case from the change.", "url": "https://github.com/eclipse/eclipse-collections/pull/881#discussion_r422196906", "createdAt": "2020-05-08T15:05:50Z", "author": {"login": "donraab"}, "path": "eclipse-collections-code-generator/src/main/resources/impl/list/immutable/immutablePrimitiveArrayList.stg", "diffHunk": "@@ -92,6 +92,12 @@ final class Immutable<name>ArrayList\n         return new Immutable<name>ArrayList(newArray);\n     }\n \n+    public static Immutable<name>ArrayList newListFrom(<name>List itemList)\n+    {\n+        <type>[] newArray = itemList.toArray(new <type>[itemList.size()]);\n+        return new Immutable<name>ArrayList(newArray);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4NTA1NQ=="}, "originalCommit": {"oid": "f07d21838beb50baacd3aca5b57fb774edf67a30"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxMDYxNg==", "bodyText": "@motlin - a related change that snuck in. I will take it out from this PR.  @donraab is correct, there will be a separate change to take advantage of the toArray(target) in factory methods.", "url": "https://github.com/eclipse/eclipse-collections/pull/881#discussion_r422210616", "createdAt": "2020-05-08T15:31:14Z", "author": {"login": "vmzakharov"}, "path": "eclipse-collections-code-generator/src/main/resources/impl/list/immutable/immutablePrimitiveArrayList.stg", "diffHunk": "@@ -92,6 +92,12 @@ final class Immutable<name>ArrayList\n         return new Immutable<name>ArrayList(newArray);\n     }\n \n+    public static Immutable<name>ArrayList newListFrom(<name>List itemList)\n+    {\n+        <type>[] newArray = itemList.toArray(new <type>[itemList.size()]);\n+        return new Immutable<name>ArrayList(newArray);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4NTA1NQ=="}, "originalCommit": {"oid": "f07d21838beb50baacd3aca5b57fb774edf67a30"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3659, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}