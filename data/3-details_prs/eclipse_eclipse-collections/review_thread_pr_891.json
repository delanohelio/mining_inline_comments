{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwOTUwNTUw", "number": 891, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxOToxMDowMlrOD-WzaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxOToxMDozNFrOD-W0Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzExOTEyOnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/block/factory/ComparatorsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxOToxMDowMlrOGYaJ8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxOToxMDowMlrOGYaJ8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI0NzUzOA==", "bodyText": "Why not just use Assert.assertEqual()?", "url": "https://github.com/eclipse/eclipse-collections/pull/891#discussion_r428247538", "createdAt": "2020-05-20T19:10:02Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/block/factory/ComparatorsTest.java", "diffHunk": "@@ -196,6 +197,44 @@ public void fromFunctions()\n         Verify.assertZero(personComparator.compare(raab, raab));\n     }\n \n+    @Test\n+    public void fromFunctionsSafeNullsHigh()\n+    {\n+        Person bob = new Person(\"Bob\", null, 0);\n+        Person dan = new Person(\"Dan\", \"Witwicky\", 0);\n+        Person alice = new Person(\"Alice\", \"Liddell\", 0);\n+        Person carol = new Person(\"Carol\", null, 0);\n+\n+        Comparator<Person> personComparator = Comparators.byFunctionNullsLast(Person::getLastName);\n+        Verify.assertNegative(personComparator.compare(alice, bob));\n+        Verify.assertPositive(personComparator.compare(carol, alice));\n+        Verify.assertNegative(personComparator.compare(alice, dan));\n+        Verify.assertZero(personComparator.compare(bob, carol));\n+\n+        MutableList<Person> people = Lists.mutable.of(bob, dan, carol, alice);\n+        people.sortThis(personComparator);\n+        Verify.assertIterablesEqual(Lists.immutable.of(alice, dan, bob, carol), people);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fb82c57a3ece3798a4097450f9450bd6c8b96c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzEyMTAzOnYy", "diffSide": "RIGHT", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/block/factory/ComparatorsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxOToxMDozNFrOGYaLFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDoxMzo0NlrOGYcMWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI0NzgyOA==", "bodyText": "Just use Assert.assertEqual().", "url": "https://github.com/eclipse/eclipse-collections/pull/891#discussion_r428247828", "createdAt": "2020-05-20T19:10:34Z", "author": {"login": "donraab"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/block/factory/ComparatorsTest.java", "diffHunk": "@@ -196,6 +197,44 @@ public void fromFunctions()\n         Verify.assertZero(personComparator.compare(raab, raab));\n     }\n \n+    @Test\n+    public void fromFunctionsSafeNullsHigh()\n+    {\n+        Person bob = new Person(\"Bob\", null, 0);\n+        Person dan = new Person(\"Dan\", \"Witwicky\", 0);\n+        Person alice = new Person(\"Alice\", \"Liddell\", 0);\n+        Person carol = new Person(\"Carol\", null, 0);\n+\n+        Comparator<Person> personComparator = Comparators.byFunctionNullsLast(Person::getLastName);\n+        Verify.assertNegative(personComparator.compare(alice, bob));\n+        Verify.assertPositive(personComparator.compare(carol, alice));\n+        Verify.assertNegative(personComparator.compare(alice, dan));\n+        Verify.assertZero(personComparator.compare(bob, carol));\n+\n+        MutableList<Person> people = Lists.mutable.of(bob, dan, carol, alice);\n+        people.sortThis(personComparator);\n+        Verify.assertIterablesEqual(Lists.immutable.of(alice, dan, bob, carol), people);\n+    }\n+\n+    @Test\n+    public void fromFunctionsSafeNullsLow()\n+    {\n+        Person bob = new Person(\"Bob\", null, 0);\n+        Person dan = new Person(\"Dan\", \"Witwicky\", 0);\n+        Person alice = new Person(\"Alice\", \"Liddell\", 0);\n+        Person carol = new Person(\"Carol\", null, 0);\n+\n+        Comparator<Person> personComparator = Comparators.byFunctionNullsFirst(Person::getLastName);\n+        Verify.assertPositive(personComparator.compare(alice, bob));\n+        Verify.assertNegative(personComparator.compare(carol, alice));\n+        Verify.assertNegative(personComparator.compare(alice, dan));\n+        Verify.assertZero(personComparator.compare(bob, carol));\n+\n+        MutableList<Person> people = Lists.mutable.of(bob, dan, carol, alice);\n+        people.sortThis(personComparator);\n+        Verify.assertIterablesEqual(Lists.immutable.of(bob, carol, alice, dan), people);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fb82c57a3ece3798a4097450f9450bd6c8b96c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4MDkyMQ==", "bodyText": "As discussed, also added serialization tests", "url": "https://github.com/eclipse/eclipse-collections/pull/891#discussion_r428280921", "createdAt": "2020-05-20T20:13:46Z", "author": {"login": "vmzakharov"}, "path": "unit-tests/src/test/java/org/eclipse/collections/impl/block/factory/ComparatorsTest.java", "diffHunk": "@@ -196,6 +197,44 @@ public void fromFunctions()\n         Verify.assertZero(personComparator.compare(raab, raab));\n     }\n \n+    @Test\n+    public void fromFunctionsSafeNullsHigh()\n+    {\n+        Person bob = new Person(\"Bob\", null, 0);\n+        Person dan = new Person(\"Dan\", \"Witwicky\", 0);\n+        Person alice = new Person(\"Alice\", \"Liddell\", 0);\n+        Person carol = new Person(\"Carol\", null, 0);\n+\n+        Comparator<Person> personComparator = Comparators.byFunctionNullsLast(Person::getLastName);\n+        Verify.assertNegative(personComparator.compare(alice, bob));\n+        Verify.assertPositive(personComparator.compare(carol, alice));\n+        Verify.assertNegative(personComparator.compare(alice, dan));\n+        Verify.assertZero(personComparator.compare(bob, carol));\n+\n+        MutableList<Person> people = Lists.mutable.of(bob, dan, carol, alice);\n+        people.sortThis(personComparator);\n+        Verify.assertIterablesEqual(Lists.immutable.of(alice, dan, bob, carol), people);\n+    }\n+\n+    @Test\n+    public void fromFunctionsSafeNullsLow()\n+    {\n+        Person bob = new Person(\"Bob\", null, 0);\n+        Person dan = new Person(\"Dan\", \"Witwicky\", 0);\n+        Person alice = new Person(\"Alice\", \"Liddell\", 0);\n+        Person carol = new Person(\"Carol\", null, 0);\n+\n+        Comparator<Person> personComparator = Comparators.byFunctionNullsFirst(Person::getLastName);\n+        Verify.assertPositive(personComparator.compare(alice, bob));\n+        Verify.assertNegative(personComparator.compare(carol, alice));\n+        Verify.assertNegative(personComparator.compare(alice, dan));\n+        Verify.assertZero(personComparator.compare(bob, carol));\n+\n+        MutableList<Person> people = Lists.mutable.of(bob, dan, carol, alice);\n+        people.sortThis(personComparator);\n+        Verify.assertIterablesEqual(Lists.immutable.of(bob, carol, alice, dan), people);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI0NzgyOA=="}, "originalCommit": {"oid": "d8fb82c57a3ece3798a4097450f9450bd6c8b96c"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3669, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}