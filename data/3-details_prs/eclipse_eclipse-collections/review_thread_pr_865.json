{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDA5MjU0", "number": 865, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMToyNTowNVrOD4twMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMzoyNDoxOVrOD418Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzk2NDY0OnYy", "diffSide": "LEFT", "path": "eclipse-collections-code-generator/src/main/resources/impl/map/immutable/immutablePrimitiveObjectEmptyMap.stg", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMToyNTowNVrOGPnn8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMToyNTowNVrOGPnn8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTAyNg==", "bodyText": "Why remove this?", "url": "https://github.com/eclipse/eclipse-collections/pull/865#discussion_r419031026", "createdAt": "2020-05-03T01:25:05Z", "author": {"login": "donraab"}, "path": "eclipse-collections-code-generator/src/main/resources/impl/map/immutable/immutablePrimitiveObjectEmptyMap.stg", "diffHunk": "@@ -854,12 +854,6 @@ final class Immutable<name>ObjectEmptyMap\\<V> implements Immutable<name>ObjectMa\n         return Lists.immutable.of();\n     }\n \n-    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a65de54a3aa134d939b413664c81a02adfcd335"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzk2NjY5OnYy", "diffSide": "LEFT", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/AbstractMutableBiMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMToyODowM1rOGPno0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMToyODowM1rOGPno0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTI1MQ==", "bodyText": "Similar to the other pull request that was pulling up default methods, I would prefer to remove only purely structural code.", "url": "https://github.com/eclipse/eclipse-collections/pull/865#discussion_r419031251", "createdAt": "2020-05-03T01:28:03Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/AbstractMutableBiMap.java", "diffHunk": "@@ -657,18 +655,6 @@ public void forEachValue(Procedure<? super V> procedure)\n         return new HashBiMap<>(this.delegate.groupByUniqueKey(function));\n     }\n \n-    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a65de54a3aa134d939b413664c81a02adfcd335"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzk2Nzk3OnYy", "diffSide": "LEFT", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/map/mutable/UnmodifiableMutableMap.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMToyOTozOFrOGPnpYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMTo1OToyMFrOGPxTAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTM5Mg==", "bodyText": "Similar to the comment above. This is the more standard pattern for implementing unmodifiable behavior.", "url": "https://github.com/eclipse/eclipse-collections/pull/865#discussion_r419031392", "createdAt": "2020-05-03T01:29:38Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/map/mutable/UnmodifiableMutableMap.java", "diffHunk": "@@ -1148,22 +1148,4 @@ public MutableShortBag collectShort(ShortFunction<? super V> shortFunction)\n     {\n         return this.getMutableMap().zipWithIndex();\n     }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a65de54a3aa134d939b413664c81a02adfcd335"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE4NTU1MA==", "bodyText": "Catching up on your other comments, I take the point about it being more difficult to perform the code review when I remove methods, and it requires reasoning about whether that's ok. I have to point out that this is not that much of a standard pattern for implementing unmodifiable behavior. I just tried going into UnmodifiableMutableMap and pressing Cmd+I (to implement, not override) and I see many methods implemented that are otherwise not implemented using this pattern.\n\nflatCollectWith\nflatCollectWith (target)\ncountBy\ncountBy(target)\ncountByWith\ncountByWith(target)\ncountByEach\ncountByEach(target)\nforEach(Procedure)\nforEach(Consumer)\ngetAny\nminOptional()\nmaxOptional()\nminOptional(Comparator)\nmaxOptional(Comparator)\nminByOptional\nmaxByOptional\nsummarizeInt\nsummarizeFloat\nsummarizeLong\nsummarizeDouble\nreduceInPlace(Collector)\nreduceInPlace(Supplier, BiConsumer)\nreduce\ngroupByAndCollect", "url": "https://github.com/eclipse/eclipse-collections/pull/865#discussion_r419185550", "createdAt": "2020-05-04T01:24:23Z", "author": {"login": "motlin"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/map/mutable/UnmodifiableMutableMap.java", "diffHunk": "@@ -1148,22 +1148,4 @@ public MutableShortBag collectShort(ShortFunction<? super V> shortFunction)\n     {\n         return this.getMutableMap().zipWithIndex();\n     }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTM5Mg=="}, "originalCommit": {"oid": "7a65de54a3aa134d939b413664c81a02adfcd335"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE4NzEwNQ==", "bodyText": "Looking at this list of methods, most of them were probably added as default methods, which we started doing after the 8.0 release. I saw a few since 9.0 and 10.0 marks in the JavaDoc. It's an interesting question whether their behavior should be overridden in UnmodifiableMutableMap. If you pull this method up, then you should probably pull all of the API's up. If we agree this makes sense, I would rather this be done as a separate PR for UnmodifiableMutableMap.\nAll of these older methods are implemented directly in UnmodifiableMutableMap, just as aggregateBy is today.\n    public <R> MutableBagMultimap<R, V> groupBy(Function<? super V, ? extends R> function)\n    public <R, C extends MutableMultimap<R, V>> C groupBy(Function<? super V, ? extends R> function, C target)\n    public <R> MutableBagMultimap<R, V> groupByEach(Function<? super V, ? extends Iterable<R>> function)\n    public <R, C extends MutableMultimap<R, V>> C groupByEach(Function<? super V, ? extends Iterable<R>> function, C target)\n    public <VV> MutableMap<VV, V> groupByUniqueKey(Function<? super V, ? extends VV> function)\n    public <VV, R extends MutableMapIterable<VV, V>> R groupByUniqueKey(Function<? super V, ? extends VV> function, R target)", "url": "https://github.com/eclipse/eclipse-collections/pull/865#discussion_r419187105", "createdAt": "2020-05-04T01:38:51Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/map/mutable/UnmodifiableMutableMap.java", "diffHunk": "@@ -1148,22 +1148,4 @@ public MutableShortBag collectShort(ShortFunction<? super V> shortFunction)\n     {\n         return this.getMutableMap().zipWithIndex();\n     }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTM5Mg=="}, "originalCommit": {"oid": "7a65de54a3aa134d939b413664c81a02adfcd335"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE4ODQ4Mg==", "bodyText": "Yes, I plan on pulling all those up and more. I started with a few \"easy\" methods to see how it goes.", "url": "https://github.com/eclipse/eclipse-collections/pull/865#discussion_r419188482", "createdAt": "2020-05-04T01:51:06Z", "author": {"login": "motlin"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/map/mutable/UnmodifiableMutableMap.java", "diffHunk": "@@ -1148,22 +1148,4 @@ public MutableShortBag collectShort(ShortFunction<? super V> shortFunction)\n     {\n         return this.getMutableMap().zipWithIndex();\n     }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTM5Mg=="}, "originalCommit": {"oid": "7a65de54a3aa134d939b413664c81a02adfcd335"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE4OTUwNQ==", "bodyText": "Ok, I think I can get comfortable with the unmodifiable moves here.", "url": "https://github.com/eclipse/eclipse-collections/pull/865#discussion_r419189505", "createdAt": "2020-05-04T01:59:20Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/map/mutable/UnmodifiableMutableMap.java", "diffHunk": "@@ -1148,22 +1148,4 @@ public MutableShortBag collectShort(ShortFunction<? super V> shortFunction)\n     {\n         return this.getMutableMap().zipWithIndex();\n     }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTM5Mg=="}, "originalCommit": {"oid": "7a65de54a3aa134d939b413664c81a02adfcd335"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzk2ODI1OnYy", "diffSide": "LEFT", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/stack/mutable/UnmodifiableStack.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMTozMDoxMlrOGPnphw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMTozMDoxMlrOGPnphw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTQzMQ==", "bodyText": "Same as the other unmodifiable comment above.", "url": "https://github.com/eclipse/eclipse-collections/pull/865#discussion_r419031431", "createdAt": "2020-05-03T01:30:12Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/stack/mutable/UnmodifiableStack.java", "diffHunk": "@@ -951,24 +951,6 @@ public int hashCode()\n         return this.mutableStack.hashCode();\n     }\n \n-    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a65de54a3aa134d939b413664c81a02adfcd335"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTMwNTg5OnYy", "diffSide": "LEFT", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMzoyNDowNVrOGPx9DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMzoyNDowNVrOGPx9DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIwMDI2OQ==", "bodyText": "I think this might be able to be deleted as it inherits from MutableMapIterable which has the same implementation.", "url": "https://github.com/eclipse/eclipse-collections/pull/865#discussion_r419200269", "createdAt": "2020-05-04T03:24:05Z", "author": {"login": "donraab"}, "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMap.java", "diffHunk": "@@ -184,16 +184,35 @@\n     }\n \n     @Override\n-    <K2, V2> MutableMap<K2, V2> aggregateInPlaceBy(\n-            Function<? super V, ? extends K2> groupBy,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2817e2338eb7cad5514b33f0f97043ce77ad7ed"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTMwNjI2OnYy", "diffSide": "RIGHT", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMzoyNDoxOVrOGPx9Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMzoyNDoxOVrOGPx9Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIwMDMxNQ==", "bodyText": "Same as above.", "url": "https://github.com/eclipse/eclipse-collections/pull/865#discussion_r419200315", "createdAt": "2020-05-04T03:24:19Z", "author": {"login": "donraab"}, "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMap.java", "diffHunk": "@@ -184,16 +184,35 @@\n     }\n \n     @Override\n-    <K2, V2> MutableMap<K2, V2> aggregateInPlaceBy(\n-            Function<? super V, ? extends K2> groupBy,\n-            Function0<? extends V2> zeroValueFactory,\n-            Procedure2<? super V2, ? super V> mutatingAggregator);\n+    default <KK, VV> MutableMap<KK, VV> aggregateInPlaceBy(\n+            Function<? super V, ? extends KK> groupBy,\n+            Function0<? extends VV> zeroValueFactory,\n+            Procedure2<? super VV, ? super V> mutatingAggregator)\n+    {\n+        MutableMap<KK, VV> map = Maps.mutable.empty();\n+        this.forEach(each ->\n+        {\n+            KK key = groupBy.valueOf(each);\n+            VV value = map.getIfAbsentPut(key, zeroValueFactory);\n+            mutatingAggregator.value(value, each);\n+        });\n+        return map;\n+    }\n \n     @Override\n-    <K2, V2> MutableMap<K2, V2> aggregateBy(\n-            Function<? super V, ? extends K2> groupBy,\n-            Function0<? extends V2> zeroValueFactory,\n-            Function2<? super V2, ? super V, ? extends V2> nonMutatingAggregator);\n+    default <KK, VV> MutableMap<KK, VV> aggregateBy(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2817e2338eb7cad5514b33f0f97043ce77ad7ed"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3793, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}