{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1NTAwNjY5", "number": 1016, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTozOTo1NVrOEv8pOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMjoyNjowNVrOE_bCLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzEyMTIwOnYy", "diffSide": "RIGHT", "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTozOTo1NVrOHlOHgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMjowNjoyN1rOH9HcFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5MDY1OQ==", "bodyText": "change this to an indexed for loop", "url": "https://github.com/eclipse/eclipse-collections/pull/1016#discussion_r508790659", "createdAt": "2020-10-20T19:39:55Z", "author": {"login": "nikhilnanivadekar"}, "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "diffHunk": "@@ -79,17 +79,75 @@ public interface <name>Iterable extends PrimitiveIterable\n     boolean contains(<type> value);\n \n     /**\n-     * Returns true if the all of the values specified in the source array are contained\n+     * Returns true if all of the values specified in the source array are contained\n      * in the <name>Iterable, and false if they are not.\n      */\n     boolean containsAll(<type>... source);\n \n     /**\n-     * Returns true if the all of the values specified in the source <name>Iterable are contained\n+     * Returns true if all of the values specified in the source <name>Iterable are contained\n      * in the <name>Iterable, and false if they are not.\n      */\n     boolean containsAll(<name>Iterable source);\n \n+    /**\n+     * Returns true if any of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<type>... source)\n+    {\n+        for (<type> item : source)\n+        {\n+            if (this.contains(item))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns true if any of the values specified in the source <name>Iterable are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<name>Iterable source)\n+    {\n+        return source.anySatisfy(this::contains);\n+    }\n+\n+    /**\n+     * Returns true if none of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsNone(<type>... source)\n+    {\n+        for (<type> item : source)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e368ee59b89b7b314414ad7129b5149931535b9f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5MzI2OA==", "bodyText": "why? Arrays are the only types where the non-indexed for-loop has no overhead.", "url": "https://github.com/eclipse/eclipse-collections/pull/1016#discussion_r508793268", "createdAt": "2020-10-20T19:44:36Z", "author": {"login": "mohrezaei"}, "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "diffHunk": "@@ -79,17 +79,75 @@ public interface <name>Iterable extends PrimitiveIterable\n     boolean contains(<type> value);\n \n     /**\n-     * Returns true if the all of the values specified in the source array are contained\n+     * Returns true if all of the values specified in the source array are contained\n      * in the <name>Iterable, and false if they are not.\n      */\n     boolean containsAll(<type>... source);\n \n     /**\n-     * Returns true if the all of the values specified in the source <name>Iterable are contained\n+     * Returns true if all of the values specified in the source <name>Iterable are contained\n      * in the <name>Iterable, and false if they are not.\n      */\n     boolean containsAll(<name>Iterable source);\n \n+    /**\n+     * Returns true if any of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<type>... source)\n+    {\n+        for (<type> item : source)\n+        {\n+            if (this.contains(item))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns true if any of the values specified in the source <name>Iterable are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<name>Iterable source)\n+    {\n+        return source.anySatisfy(this::contains);\n+    }\n+\n+    /**\n+     * Returns true if none of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsNone(<type>... source)\n+    {\n+        for (<type> item : source)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5MDY1OQ=="}, "originalCommit": {"oid": "e368ee59b89b7b314414ad7129b5149931535b9f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5NDMxMA==", "bodyText": "I was thinking to keep it consistent in the entire codebase. Throughout we tend to prefer indexed for loops", "url": "https://github.com/eclipse/eclipse-collections/pull/1016#discussion_r508794310", "createdAt": "2020-10-20T19:46:24Z", "author": {"login": "nikhilnanivadekar"}, "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "diffHunk": "@@ -79,17 +79,75 @@ public interface <name>Iterable extends PrimitiveIterable\n     boolean contains(<type> value);\n \n     /**\n-     * Returns true if the all of the values specified in the source array are contained\n+     * Returns true if all of the values specified in the source array are contained\n      * in the <name>Iterable, and false if they are not.\n      */\n     boolean containsAll(<type>... source);\n \n     /**\n-     * Returns true if the all of the values specified in the source <name>Iterable are contained\n+     * Returns true if all of the values specified in the source <name>Iterable are contained\n      * in the <name>Iterable, and false if they are not.\n      */\n     boolean containsAll(<name>Iterable source);\n \n+    /**\n+     * Returns true if any of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<type>... source)\n+    {\n+        for (<type> item : source)\n+        {\n+            if (this.contains(item))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns true if any of the values specified in the source <name>Iterable are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<name>Iterable source)\n+    {\n+        return source.anySatisfy(this::contains);\n+    }\n+\n+    /**\n+     * Returns true if none of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsNone(<type>... source)\n+    {\n+        for (<type> item : source)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5MDY1OQ=="}, "originalCommit": {"oid": "e368ee59b89b7b314414ad7129b5149931535b9f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg0NzA2Mg==", "bodyText": "Changed to an indexed for loop.", "url": "https://github.com/eclipse/eclipse-collections/pull/1016#discussion_r533847062", "createdAt": "2020-12-02T02:06:27Z", "author": {"login": "rinatigati"}, "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "diffHunk": "@@ -79,17 +79,75 @@ public interface <name>Iterable extends PrimitiveIterable\n     boolean contains(<type> value);\n \n     /**\n-     * Returns true if the all of the values specified in the source array are contained\n+     * Returns true if all of the values specified in the source array are contained\n      * in the <name>Iterable, and false if they are not.\n      */\n     boolean containsAll(<type>... source);\n \n     /**\n-     * Returns true if the all of the values specified in the source <name>Iterable are contained\n+     * Returns true if all of the values specified in the source <name>Iterable are contained\n      * in the <name>Iterable, and false if they are not.\n      */\n     boolean containsAll(<name>Iterable source);\n \n+    /**\n+     * Returns true if any of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<type>... source)\n+    {\n+        for (<type> item : source)\n+        {\n+            if (this.contains(item))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns true if any of the values specified in the source <name>Iterable are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<name>Iterable source)\n+    {\n+        return source.anySatisfy(this::contains);\n+    }\n+\n+    /**\n+     * Returns true if none of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsNone(<type>... source)\n+    {\n+        for (<type> item : source)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5MDY1OQ=="}, "originalCommit": {"oid": "e368ee59b89b7b314414ad7129b5149931535b9f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjcxMTQyOnYy", "diffSide": "RIGHT", "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwNDoxMzo1M1rOH3znZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwNToyNjoxOFrOH3z9QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI3OTM5Ng==", "bodyText": "can be simplified to:\n<name>Iterable inside = this;\nif (this.size() \\> 32 && source.length \\> 32 && !this instanceof <name>Set)\n{\n    inside = this.toSet();\n}\nfor (<type> item : source)\n{\n        if (inside.contains(item))\n        {\n            return true;\n        }\n}\nreturn false;\nOther 3 methods can be simplified similarly.", "url": "https://github.com/eclipse/eclipse-collections/pull/1016#discussion_r528279396", "createdAt": "2020-11-22T04:13:53Z", "author": {"login": "mohrezaei"}, "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "diffHunk": "@@ -127,6 +127,140 @@ public interface <name>Iterable extends PrimitiveIterable\n         }\n     }\n \n+    /**\n+     * Returns true if any of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<type>... source)\n+    {\n+        if (this.size() \\<= 32 || source.length \\<= 32)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8748816f91c160d18eb5bc9be3f47a83af730637"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4NDk5Mw==", "bodyText": "Good point! I simplified all 4 methods and updated the PR.", "url": "https://github.com/eclipse/eclipse-collections/pull/1016#discussion_r528284993", "createdAt": "2020-11-22T05:26:18Z", "author": {"login": "rinatigati"}, "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "diffHunk": "@@ -127,6 +127,140 @@ public interface <name>Iterable extends PrimitiveIterable\n         }\n     }\n \n+    /**\n+     * Returns true if any of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<type>... source)\n+    {\n+        if (this.size() \\<= 32 || source.length \\<= 32)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI3OTM5Ng=="}, "originalCommit": {"oid": "8748816f91c160d18eb5bc9be3f47a83af730637"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjc2NTc2OnYy", "diffSide": "RIGHT", "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwNTozMzo0NFrOH3z_Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwNTo0NjozNVrOH30DPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4NTUwNg==", "bodyText": "at this point inside is guaranteed to be the smaller of the two. Therefore, inside.size() > 32 implies outside.size() > 32. We can drop outside.size() > 32. Same for noneSatisfy", "url": "https://github.com/eclipse/eclipse-collections/pull/1016#discussion_r528285506", "createdAt": "2020-11-22T05:33:44Z", "author": {"login": "mohrezaei"}, "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "diffHunk": "@@ -127,6 +127,96 @@ public interface <name>Iterable extends PrimitiveIterable\n         }\n     }\n \n+    /**\n+     * Returns true if any of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<type>... source)\n+    {\n+        <name>Iterable inside = this;\n+        if (this.size() > 32 && source.length > 32 && !(this instanceof <name>Set))\n+        {\n+            inside = this.toSet();\n+        }\n+        for (<type> item : source)\n+        {\n+            if (inside.contains(item))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns true if any of the values specified in the source <name>Iterable are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<name>Iterable source)\n+    {\n+        <name>Iterable outside = this;\n+        <name>Iterable inside = source;\n+        if (this.size() \\< source.size())\n+        {\n+            outside = source;\n+            inside = this;\n+        }\n+        if (outside.size() > 32 && inside.size() > 32 && !(inside instanceof <name>Set))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bebe79a3c599ebd06c6fb012a549bbfa89645d0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4NjUyNg==", "bodyText": "Updated. \ud83d\ude04", "url": "https://github.com/eclipse/eclipse-collections/pull/1016#discussion_r528286526", "createdAt": "2020-11-22T05:46:35Z", "author": {"login": "rinatigati"}, "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "diffHunk": "@@ -127,6 +127,96 @@ public interface <name>Iterable extends PrimitiveIterable\n         }\n     }\n \n+    /**\n+     * Returns true if any of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<type>... source)\n+    {\n+        <name>Iterable inside = this;\n+        if (this.size() > 32 && source.length > 32 && !(this instanceof <name>Set))\n+        {\n+            inside = this.toSet();\n+        }\n+        for (<type> item : source)\n+        {\n+            if (inside.contains(item))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns true if any of the values specified in the source <name>Iterable are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<name>Iterable source)\n+    {\n+        <name>Iterable outside = this;\n+        <name>Iterable inside = source;\n+        if (this.size() \\< source.size())\n+        {\n+            outside = source;\n+            inside = this;\n+        }\n+        if (outside.size() > 32 && inside.size() > 32 && !(inside instanceof <name>Set))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4NTUwNg=="}, "originalCommit": {"oid": "1bebe79a3c599ebd06c6fb012a549bbfa89645d0"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzU1NzI5OnYy", "diffSide": "RIGHT", "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDozODoxM1rOH4edRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMjowNTo0OFrOH9HbXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4MTMxNw==", "bodyText": "I've been thinking about two special cases in the containsAny/None situation:\ncase 1:\nthis: large list, say 1M entries\nother: large set, larger than this, say 2 M entries\nOur logic will create a 1M entry set to do the operation. This is not necessary.\ncase 2:\nthis: large set, say 1M entries\nother: large set, larger than this, say 2 M entries\nWe won't create a set in this case, but the loop order is wrong: this should be on the outside.\nBoth can be fixed by changing this code to:\n        if (outside instance of <name>Set)\n        {\n            <name>Iterable tmp = outside;\n            outside = inside;\n            inside = tmp;\n        }\n        else if (inside.size() > 32 && !(inside instanceof <name>Set))\n        {\n            inside = inside.toSet();\n        }", "url": "https://github.com/eclipse/eclipse-collections/pull/1016#discussion_r528981317", "createdAt": "2020-11-23T20:38:13Z", "author": {"login": "mohrezaei"}, "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "diffHunk": "@@ -127,6 +127,96 @@ public interface <name>Iterable extends PrimitiveIterable\n         }\n     }\n \n+    /**\n+     * Returns true if any of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<type>... source)\n+    {\n+        <name>Iterable inside = this;\n+        if (this.size() > 32 && source.length > 32 && !(this instanceof <name>Set))\n+        {\n+            inside = this.toSet();\n+        }\n+        for (<type> item : source)\n+        {\n+            if (inside.contains(item))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns true if any of the values specified in the source <name>Iterable are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<name>Iterable source)\n+    {\n+        <name>Iterable outside = this;\n+        <name>Iterable inside = source;\n+        if (this.size() \\< source.size())\n+        {\n+            outside = source;\n+            inside = this;\n+        }\n+        if (inside.size() > 32 && !(inside instanceof <name>Set))\n+        {\n+            inside = inside.toSet();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2741889c9c0c23244f64ea683c3be4fb73dc3f4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0NjIwNA==", "bodyText": "Hi @rinatigati, any questions or updates on the suggestion from @mohrezaei above?", "url": "https://github.com/eclipse/eclipse-collections/pull/1016#discussion_r533546204", "createdAt": "2020-12-01T16:24:46Z", "author": {"login": "donraab"}, "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "diffHunk": "@@ -127,6 +127,96 @@ public interface <name>Iterable extends PrimitiveIterable\n         }\n     }\n \n+    /**\n+     * Returns true if any of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<type>... source)\n+    {\n+        <name>Iterable inside = this;\n+        if (this.size() > 32 && source.length > 32 && !(this instanceof <name>Set))\n+        {\n+            inside = this.toSet();\n+        }\n+        for (<type> item : source)\n+        {\n+            if (inside.contains(item))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns true if any of the values specified in the source <name>Iterable are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<name>Iterable source)\n+    {\n+        <name>Iterable outside = this;\n+        <name>Iterable inside = source;\n+        if (this.size() \\< source.size())\n+        {\n+            outside = source;\n+            inside = this;\n+        }\n+        if (inside.size() > 32 && !(inside instanceof <name>Set))\n+        {\n+            inside = inside.toSet();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4MTMxNw=="}, "originalCommit": {"oid": "e2741889c9c0c23244f64ea683c3be4fb73dc3f4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg0Njg3Nw==", "bodyText": "@donraab Nope! Sounded good to me. I updated the PR with @mohrezaei's suggestions.\nLooks like there were artifact transfer failures/connection problems with a couple of the checks. Will have to re-run those somehow.", "url": "https://github.com/eclipse/eclipse-collections/pull/1016#discussion_r533846877", "createdAt": "2020-12-02T02:05:48Z", "author": {"login": "rinatigati"}, "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "diffHunk": "@@ -127,6 +127,96 @@ public interface <name>Iterable extends PrimitiveIterable\n         }\n     }\n \n+    /**\n+     * Returns true if any of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<type>... source)\n+    {\n+        <name>Iterable inside = this;\n+        if (this.size() > 32 && source.length > 32 && !(this instanceof <name>Set))\n+        {\n+            inside = this.toSet();\n+        }\n+        for (<type> item : source)\n+        {\n+            if (inside.contains(item))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns true if any of the values specified in the source <name>Iterable are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<name>Iterable source)\n+    {\n+        <name>Iterable outside = this;\n+        <name>Iterable inside = source;\n+        if (this.size() \\< source.size())\n+        {\n+            outside = source;\n+            inside = this;\n+        }\n+        if (inside.size() > 32 && !(inside instanceof <name>Set))\n+        {\n+            inside = inside.toSet();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4MTMxNw=="}, "originalCommit": {"oid": "e2741889c9c0c23244f64ea683c3be4fb73dc3f4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTM4NjY5OnYy", "diffSide": "RIGHT", "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMjoyNjowNVrOH9H0QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxNzo1MTozM1rOILPYUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1MzI0OA==", "bodyText": "Sorry, I just re-read this and I think it needs some adjustment, specifically, when source.length == 32 (or bigger than maybe 2, less than 33). In those cases, the logic should essentially be like Iterable case. Can we write an acceptance test with source.length==32, this.size() == 1M, not a set (as a rough benchmark)? I think the following would do better:\nif (source.length \\< 3 || this instanceof <name>Set) || this.size() \\< 32) \n{\n        for (int i = 0; i \\< source.length; i++)\n        {\n            if (this.contains(source[i]))\n            {\n                return true;\n            }\n        }\n        return false;\n}\nreturn this.containsAny(Arrays.asList(source)); // we have to create some garbage in this case, so let's not worry about the small wrapper", "url": "https://github.com/eclipse/eclipse-collections/pull/1016#discussion_r533853248", "createdAt": "2020-12-02T02:26:05Z", "author": {"login": "mohrezaei"}, "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "diffHunk": "@@ -127,6 +127,108 @@ public interface <name>Iterable extends PrimitiveIterable\n         }\n     }\n \n+    /**\n+     * Returns true if any of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<type>... source)\n+    {\n+        <name>Iterable inside = this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19e19c52b50dbb7538a2da6f7483f9d72ca03123"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk1NDg4NQ==", "bodyText": "No worries!\nAdded acceptance tests for containsAny and containsNone with source.length == 32 and this.size() == 1M. Runtime of those on my Macbook is ~50ms with the current implementation.\nTried changing it to what you provided above but containsAny can't take the output of Arrays.asList() and gives me the following error:\nerror: no suitable method found for containsAny(List<int[]>)\n    method IntIterable.containsAny(int...) is not applicable\n      (varargs mismatch; no instance(s) of type variable(s) T exist so that List<T> conforms to int)\n    method IntIterable.containsAny(IntIterable) is not applicable\n      (argument mismatch; no instance(s) of type variable(s) T exist so that List<T> conforms to IntIterable)\n  where T is a type-variable:\n    T extends Object declared in method <T>asList(T...)\n\nI also can't use either IntSets or IntLists to make a primitive iterable since these are default methods in org.eclipse.collections.api and those are in org.eclipse.collections.impl. \ud83e\udd37 Not sure where to go from here but I did push the acceptance tests I added.", "url": "https://github.com/eclipse/eclipse-collections/pull/1016#discussion_r536954885", "createdAt": "2020-12-06T04:43:35Z", "author": {"login": "rinatigati"}, "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "diffHunk": "@@ -127,6 +127,108 @@ public interface <name>Iterable extends PrimitiveIterable\n         }\n     }\n \n+    /**\n+     * Returns true if any of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<type>... source)\n+    {\n+        <name>Iterable inside = this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1MzI0OA=="}, "originalCommit": {"oid": "19e19c52b50dbb7538a2da6f7483f9d72ca03123"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA1ODQ1Nw==", "bodyText": "You can\u2019t use the factories in API because of the packages and primitives are not onboarded to classloaders like the object side. You cannot use Arrays.asList() as you need to remain in primitive collections.\nAn option which you have is to move this optimization down to implementations where you can use the factories and keep the unoptimized default method in the interface.", "url": "https://github.com/eclipse/eclipse-collections/pull/1016#discussion_r537058457", "createdAt": "2020-12-06T15:17:02Z", "author": {"login": "nikhilnanivadekar"}, "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "diffHunk": "@@ -127,6 +127,108 @@ public interface <name>Iterable extends PrimitiveIterable\n         }\n     }\n \n+    /**\n+     * Returns true if any of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<type>... source)\n+    {\n+        <name>Iterable inside = this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1MzI0OA=="}, "originalCommit": {"oid": "19e19c52b50dbb7538a2da6f7483f9d72ca03123"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE0ODI4OA==", "bodyText": "before we go down that route, let's figure out the performance impact. Run the proposed new code and compare the timing with the older one.", "url": "https://github.com/eclipse/eclipse-collections/pull/1016#discussion_r537148288", "createdAt": "2020-12-06T23:23:01Z", "author": {"login": "mohrezaei"}, "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "diffHunk": "@@ -127,6 +127,108 @@ public interface <name>Iterable extends PrimitiveIterable\n         }\n     }\n \n+    /**\n+     * Returns true if any of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<type>... source)\n+    {\n+        <name>Iterable inside = this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1MzI0OA=="}, "originalCommit": {"oid": "19e19c52b50dbb7538a2da6f7483f9d72ca03123"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODY0NjY1NA==", "bodyText": "The older (current) code completes containsAny and containsNone with source of size 32 and the Iterable of size 1M in 50-60ms on my macbook.\nTo try out the proposed new code I overrode containsAny(int... source) and containsNone(int.. source) on AbstractIntIterable with it. I did change Arrays.asList(source) to IntLists.mutable.with(source) since I couldn't use Arrays.asList there.\nWith the same acceptance test (size.length == 32 and this.size() == 1M), the proposed new code completes containsAny and containsNone in 100-120ms on my macbook. It actually seems slower.", "url": "https://github.com/eclipse/eclipse-collections/pull/1016#discussion_r548646654", "createdAt": "2020-12-24T17:37:00Z", "author": {"login": "rinatigati"}, "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "diffHunk": "@@ -127,6 +127,108 @@ public interface <name>Iterable extends PrimitiveIterable\n         }\n     }\n \n+    /**\n+     * Returns true if any of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<type>... source)\n+    {\n+        <name>Iterable inside = this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1MzI0OA=="}, "originalCommit": {"oid": "19e19c52b50dbb7538a2da6f7483f9d72ca03123"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODY1NzIzMg==", "bodyText": "ok, great. We're done then.", "url": "https://github.com/eclipse/eclipse-collections/pull/1016#discussion_r548657232", "createdAt": "2020-12-24T17:51:33Z", "author": {"login": "mohrezaei"}, "path": "eclipse-collections-code-generator/src/main/resources/api/primitiveIterable.stg", "diffHunk": "@@ -127,6 +127,108 @@ public interface <name>Iterable extends PrimitiveIterable\n         }\n     }\n \n+    /**\n+     * Returns true if any of the values specified in the source array are contained\n+     * in the <name>Iterable, and false if they are not.\n+     *\n+     * @since 11.0\n+     */\n+    default boolean containsAny(<type>... source)\n+    {\n+        <name>Iterable inside = this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1MzI0OA=="}, "originalCommit": {"oid": "19e19c52b50dbb7538a2da6f7483f9d72ca03123"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3736, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}