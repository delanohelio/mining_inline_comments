{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NTc4MjI1", "number": 887, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjoxMzoyNlrOD9do2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwMzo1Nzo1OVrOEDNPqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Nzc1MzIyOnYy", "diffSide": "LEFT", "path": "eclipse-collections-code-generator/src/main/resources/api/map/immutableObjectPrimitiveMap.stg", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjoxMzoyNlrOGW-P-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODowMjowNFrOGY9IWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0MTc1Mw==", "bodyText": "Hi @jdimeo, why is this method being removed?", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r426741753", "createdAt": "2020-05-18T16:13:26Z", "author": {"login": "donraab"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/immutableObjectPrimitiveMap.stg", "diffHunk": "@@ -39,22 +38,33 @@ public interface ImmutableObject<name>Map\\<K> extends Object<name>Map\\<K>\n     @Override\n     Immutable<name>Collection reject(<name>Predicate predicate);\n \n-    /**\n-     * @since 9.0.\n-     */\n-    default ImmutableObject<name>Map\\<K> tap(<name>Procedure procedure)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cea83f2f420cc513edfea70b6084030e977b51d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0MzM4MQ==", "bodyText": "@donraab it's redundant with/trivially overrides tap() that is also declared in the parent interface objectPrimitiveMap.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r426743381", "createdAt": "2020-05-18T16:15:53Z", "author": {"login": "jdimeo"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/immutableObjectPrimitiveMap.stg", "diffHunk": "@@ -39,22 +38,33 @@ public interface ImmutableObject<name>Map\\<K> extends Object<name>Map\\<K>\n     @Override\n     Immutable<name>Collection reject(<name>Predicate predicate);\n \n-    /**\n-     * @since 9.0.\n-     */\n-    default ImmutableObject<name>Map\\<K> tap(<name>Procedure procedure)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0MTc1Mw=="}, "originalCommit": {"oid": "9cea83f2f420cc513edfea70b6084030e977b51d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0ODcxNA==", "bodyText": "Is the type that is returned here different then in the parent interface? If so, this is a breaking change. This should also not be grouped together with the great JavaDoc work you are doing here as it is unrelated.\nPlease revert it and if it is truly a duplicate we can remove it in a separate PR.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r426748714", "createdAt": "2020-05-18T16:24:28Z", "author": {"login": "donraab"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/immutableObjectPrimitiveMap.stg", "diffHunk": "@@ -39,22 +38,33 @@ public interface ImmutableObject<name>Map\\<K> extends Object<name>Map\\<K>\n     @Override\n     Immutable<name>Collection reject(<name>Predicate predicate);\n \n-    /**\n-     * @since 9.0.\n-     */\n-    default ImmutableObject<name>Map\\<K> tap(<name>Procedure procedure)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0MTc1Mw=="}, "originalCommit": {"oid": "9cea83f2f420cc513edfea70b6084030e977b51d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1MDIyNA==", "bodyText": "@donraab sounds good I've reverted it. Even if the return type is changing, I think we should implement it by calling the super default impl with an @Override instead of reimplementing", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r426750224", "createdAt": "2020-05-18T16:26:51Z", "author": {"login": "jdimeo"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/immutableObjectPrimitiveMap.stg", "diffHunk": "@@ -39,22 +38,33 @@ public interface ImmutableObject<name>Map\\<K> extends Object<name>Map\\<K>\n     @Override\n     Immutable<name>Collection reject(<name>Predicate predicate);\n \n-    /**\n-     * @since 9.0.\n-     */\n-    default ImmutableObject<name>Map\\<K> tap(<name>Procedure procedure)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0MTc1Mw=="}, "originalCommit": {"oid": "9cea83f2f420cc513edfea70b6084030e977b51d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ4MzUxMA==", "bodyText": "Thanks @jdimeo. We've had some discussion on how best to address issues like this. While I agree that calling super is conceptually the better thing to do, in practice for a single method call implementation like forEach, it winds up being less verbose duplicating the method call. This is non-obvious at first. I had to try it to see myself. If there is more than a single method call then calling super is definitely the only reasonable option. It bothers me to have even a single line of duplicate code, but this is a case where I've learned to deal with it.\nThis is certainly a best practice that would be worth us capturing in documentation @motlin @nikhilnanivadekar.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r427483510", "createdAt": "2020-05-19T17:41:43Z", "author": {"login": "donraab"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/immutableObjectPrimitiveMap.stg", "diffHunk": "@@ -39,22 +38,33 @@ public interface ImmutableObject<name>Map\\<K> extends Object<name>Map\\<K>\n     @Override\n     Immutable<name>Collection reject(<name>Predicate predicate);\n \n-    /**\n-     * @since 9.0.\n-     */\n-    default ImmutableObject<name>Map\\<K> tap(<name>Procedure procedure)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0MTc1Mw=="}, "originalCommit": {"oid": "9cea83f2f420cc513edfea70b6084030e977b51d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0Mjk4MQ==", "bodyText": "Thanks @donraab - I see it differently, because if down the road if I change the default implementation in the super interface, I would expect all subclasses/sub-interfaces to use my new implementation (unless they meaningfully overrode it) and not want to have to track down every duplicated re-implementation. Verbosity (or lack thereof) isn't at all what I was going for. But of course I'm happy to defer to you all as maintainers of this code base!", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r427542981", "createdAt": "2020-05-19T19:20:34Z", "author": {"login": "jdimeo"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/immutableObjectPrimitiveMap.stg", "diffHunk": "@@ -39,22 +38,33 @@ public interface ImmutableObject<name>Map\\<K> extends Object<name>Map\\<K>\n     @Override\n     Immutable<name>Collection reject(<name>Predicate predicate);\n \n-    /**\n-     * @since 9.0.\n-     */\n-    default ImmutableObject<name>Map\\<K> tap(<name>Procedure procedure)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0MTc1Mw=="}, "originalCommit": {"oid": "9cea83f2f420cc513edfea70b6084030e977b51d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYwMTUzNQ==", "bodyText": "We see things quite similarly I think. I've just allowed myself some flexibility in the cases of single method default methods where the likelihood of there ever being a change is as close to zero as possible, and the cost in verbosity or worse, casting is non zero. I sometimes save my argument points. I'll see if I can dig up the discussion thread we recently had on this and I'll link it here and extract the approach into some docs.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r427601535", "createdAt": "2020-05-19T21:09:42Z", "author": {"login": "donraab"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/immutableObjectPrimitiveMap.stg", "diffHunk": "@@ -39,22 +38,33 @@ public interface ImmutableObject<name>Map\\<K> extends Object<name>Map\\<K>\n     @Override\n     Immutable<name>Collection reject(<name>Predicate predicate);\n \n-    /**\n-     * @since 9.0.\n-     */\n-    default ImmutableObject<name>Map\\<K> tap(<name>Procedure procedure)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0MTc1Mw=="}, "originalCommit": {"oid": "9cea83f2f420cc513edfea70b6084030e977b51d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1OTY1NQ==", "bodyText": "@jdimeo @motlin @nikhilnanivadekar Here's the recent discussion on this topic of one line duplication vs. super calls for reference here: #862 (review)", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r427659655", "createdAt": "2020-05-19T23:37:56Z", "author": {"login": "donraab"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/immutableObjectPrimitiveMap.stg", "diffHunk": "@@ -39,22 +38,33 @@ public interface ImmutableObject<name>Map\\<K> extends Object<name>Map\\<K>\n     @Override\n     Immutable<name>Collection reject(<name>Predicate predicate);\n \n-    /**\n-     * @since 9.0.\n-     */\n-    default ImmutableObject<name>Map\\<K> tap(<name>Procedure procedure)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0MTc1Mw=="}, "originalCommit": {"oid": "9cea83f2f420cc513edfea70b6084030e977b51d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNDA0NQ==", "bodyText": "@jdimeo I will try and read through all of the Javadoc additions in your PR by the weekend. Thank you for this terrific contribution, it is much appreciated.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r428434045", "createdAt": "2020-05-21T04:07:55Z", "author": {"login": "donraab"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/immutableObjectPrimitiveMap.stg", "diffHunk": "@@ -39,22 +38,33 @@ public interface ImmutableObject<name>Map\\<K> extends Object<name>Map\\<K>\n     @Override\n     Immutable<name>Collection reject(<name>Predicate predicate);\n \n-    /**\n-     * @since 9.0.\n-     */\n-    default ImmutableObject<name>Map\\<K> tap(<name>Procedure procedure)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0MTc1Mw=="}, "originalCommit": {"oid": "9cea83f2f420cc513edfea70b6084030e977b51d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyMDU3MQ==", "bodyText": "Thanks @donraab - no rush as it took me over 3 years to do this much ;-) you and others have been very responsive. thank you!", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r428820571", "createdAt": "2020-05-21T18:02:04Z", "author": {"login": "jdimeo"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/immutableObjectPrimitiveMap.stg", "diffHunk": "@@ -39,22 +38,33 @@ public interface ImmutableObject<name>Map\\<K> extends Object<name>Map\\<K>\n     @Override\n     Immutable<name>Collection reject(<name>Predicate predicate);\n \n-    /**\n-     * @since 9.0.\n-     */\n-    default ImmutableObject<name>Map\\<K> tap(<name>Procedure procedure)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0MTc1Mw=="}, "originalCommit": {"oid": "9cea83f2f420cc513edfea70b6084030e977b51d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjY2NDU5OnYy", "diffSide": "LEFT", "path": "checkstyle-configuration.xml", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNTo0MjowN1rOGZ1O9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNzo0NjoyM1rOGc6Tvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczOTc2NQ==", "bodyText": "@motlin @nikhilnanivadekar Are you both ok with this removal?", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r429739765", "createdAt": "2020-05-25T05:42:07Z", "author": {"login": "donraab"}, "path": "checkstyle-configuration.xml", "diffHunk": "@@ -334,9 +334,4 @@\n         <property name=\"format\" value=\"\\n\\n\\n\" />\n         <property name=\"message\" value=\"Extra newline.\" />\n     </module>\n-\n-    <module name=\"RegexpMultiline\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36ca664abb49ed5fc49f24d1744bc582e03fbdc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3MDYyNg==", "bodyText": "Is this for windows development? I'm confused because even when I used to develop on windows, this rule didn't fire for me. I don't feel like digging into why, so I'm ok with removing it.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r430070626", "createdAt": "2020-05-25T20:46:16Z", "author": {"login": "motlin"}, "path": "checkstyle-configuration.xml", "diffHunk": "@@ -334,9 +334,4 @@\n         <property name=\"format\" value=\"\\n\\n\\n\" />\n         <property name=\"message\" value=\"Extra newline.\" />\n     </module>\n-\n-    <module name=\"RegexpMultiline\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczOTc2NQ=="}, "originalCommit": {"oid": "e36ca664abb49ed5fc49f24d1744bc582e03fbdc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3OTE0Mw==", "bodyText": "@motlin I think it's because a) I'm on Windows and b) my Git is configured to check out files with platform-specific line endings. However, c) my Git is also configured to check in Linux \\n line endings, hence my commits pass on the server/didn't change anything. I feel like explicitly blacklisting \\r makes development more difficult for new contributors and/or Windows users when they have the experience that I had where the build failed after cloning and doing nothing", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r430079143", "createdAt": "2020-05-25T21:29:24Z", "author": {"login": "jdimeo"}, "path": "checkstyle-configuration.xml", "diffHunk": "@@ -334,9 +334,4 @@\n         <property name=\"format\" value=\"\\n\\n\\n\" />\n         <property name=\"message\" value=\"Extra newline.\" />\n     </module>\n-\n-    <module name=\"RegexpMultiline\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczOTc2NQ=="}, "originalCommit": {"oid": "e36ca664abb49ed5fc49f24d1744bc582e03fbdc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEwMDQ0Mg==", "bodyText": "@motlin @jdimeo Someone else was complaining on collections-dev mail group they were having issues with checkstyle on Windows. Maybe related. I'm ok with this change.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r430100442", "createdAt": "2020-05-25T23:58:38Z", "author": {"login": "donraab"}, "path": "checkstyle-configuration.xml", "diffHunk": "@@ -334,9 +334,4 @@\n         <property name=\"format\" value=\"\\n\\n\\n\" />\n         <property name=\"message\" value=\"Extra newline.\" />\n     </module>\n-\n-    <module name=\"RegexpMultiline\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczOTc2NQ=="}, "originalCommit": {"oid": "e36ca664abb49ed5fc49f24d1744bc582e03fbdc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2ODYzOQ==", "bodyText": "I tried to fix this checkstyle configuration in my local. After numerous attempts I am at a dead-end to have something work predictable. I am fine removing this change. Thanks @jdimeo\nTagging @motlin and @donraab for transparency.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r432968639", "createdAt": "2020-05-31T17:46:23Z", "author": {"login": "nikhilnanivadekar"}, "path": "checkstyle-configuration.xml", "diffHunk": "@@ -334,9 +334,4 @@\n         <property name=\"format\" value=\"\\n\\n\\n\" />\n         <property name=\"message\" value=\"Extra newline.\" />\n     </module>\n-\n-    <module name=\"RegexpMultiline\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczOTc2NQ=="}, "originalCommit": {"oid": "e36ca664abb49ed5fc49f24d1744bc582e03fbdc"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODkyNzI3OnYy", "diffSide": "RIGHT", "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitiveObjectMap.stg", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzowMjo0OFrOGaKyKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzoyNDoyNFrOGaK9fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5Mjg0MA==", "bodyText": "This sentence fragment looks like it might be superfluous.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r430092840", "createdAt": "2020-05-25T23:02:48Z", "author": {"login": "donraab"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitiveObjectMap.stg", "diffHunk": "@@ -45,20 +53,71 @@ public interface Mutable<name>ObjectMap\\<V> extends <name>ObjectMap\\<V>, Mutable\n     }\n \n     /**\n+     * Puts all of the key/value mappings from the specified map into this map. If this\n+     * map already has a value associated with one of the keys in the map, it will be\n+     * replaced with the value in {@code map}.\n+     * @param map the map to copy into this map\n      * @since 5.0.\n      */\n     void putAll(<name>ObjectMap\\<? extends V> map);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #remove(<type>)\n+     */\n     V removeKey(<type> key);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #removeKey(<type>)\n+     */\n     V remove(<type> key);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates a value with the key.\n+     * a new value with they key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36ca664abb49ed5fc49f24d1744bc582e03fbdc"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5NTc0MA==", "bodyText": "Good catch! I'll fix it.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r430095740", "createdAt": "2020-05-25T23:24:24Z", "author": {"login": "jdimeo"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitiveObjectMap.stg", "diffHunk": "@@ -45,20 +53,71 @@ public interface Mutable<name>ObjectMap\\<V> extends <name>ObjectMap\\<V>, Mutable\n     }\n \n     /**\n+     * Puts all of the key/value mappings from the specified map into this map. If this\n+     * map already has a value associated with one of the keys in the map, it will be\n+     * replaced with the value in {@code map}.\n+     * @param map the map to copy into this map\n      * @since 5.0.\n      */\n     void putAll(<name>ObjectMap\\<? extends V> map);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #remove(<type>)\n+     */\n     V removeKey(<type> key);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #removeKey(<type>)\n+     */\n     V remove(<type> key);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates a value with the key.\n+     * a new value with they key", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5Mjg0MA=="}, "originalCommit": {"oid": "e36ca664abb49ed5fc49f24d1744bc582e03fbdc"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODkyODEwOnYy", "diffSide": "RIGHT", "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitiveObjectMap.stg", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzowNDowMVrOGaKypw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzoyMjo0MlrOGaK8jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5Mjk2Nw==", "bodyText": "I don't believe the key is passed to the function, as it is a Function0 which means it takes no parameters.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r430092967", "createdAt": "2020-05-25T23:04:01Z", "author": {"login": "donraab"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitiveObjectMap.stg", "diffHunk": "@@ -45,20 +53,71 @@ public interface Mutable<name>ObjectMap\\<V> extends <name>ObjectMap\\<V>, Mutable\n     }\n \n     /**\n+     * Puts all of the key/value mappings from the specified map into this map. If this\n+     * map already has a value associated with one of the keys in the map, it will be\n+     * replaced with the value in {@code map}.\n+     * @param map the map to copy into this map\n      * @since 5.0.\n      */\n     void putAll(<name>ObjectMap\\<? extends V> map);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #remove(<type>)\n+     */\n     V removeKey(<type> key);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #removeKey(<type>)\n+     */\n     V remove(<type> key);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates a value with the key.\n+     * a new value with they key\n+     * @param key the key\n+     * @param value the value to associate with {@code key} if no such mapping exists\n+     * @return the value associated with key, if one exists, or {@code value} if not\n+     */\n     V getIfAbsentPut(<type> key, V value);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value supplier with the key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36ca664abb49ed5fc49f24d1744bc582e03fbdc"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5NTUwMA==", "bodyText": "That is what I meant, but I agree it's a bit confusing. By saying \"value supplier\" I was hoping that readers would realize a Function0 == Supplier<> from Java 8.  I was trying to say \"associates ... with the key\" not \"associates ... invoking ... with the key\". I'll try to word it more clearly.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r430095500", "createdAt": "2020-05-25T23:22:42Z", "author": {"login": "jdimeo"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitiveObjectMap.stg", "diffHunk": "@@ -45,20 +53,71 @@ public interface Mutable<name>ObjectMap\\<V> extends <name>ObjectMap\\<V>, Mutable\n     }\n \n     /**\n+     * Puts all of the key/value mappings from the specified map into this map. If this\n+     * map already has a value associated with one of the keys in the map, it will be\n+     * replaced with the value in {@code map}.\n+     * @param map the map to copy into this map\n      * @since 5.0.\n      */\n     void putAll(<name>ObjectMap\\<? extends V> map);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #remove(<type>)\n+     */\n     V removeKey(<type> key);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #removeKey(<type>)\n+     */\n     V remove(<type> key);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates a value with the key.\n+     * a new value with they key\n+     * @param key the key\n+     * @param value the value to associate with {@code key} if no such mapping exists\n+     * @return the value associated with key, if one exists, or {@code value} if not\n+     */\n     V getIfAbsentPut(<type> key, V value);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value supplier with the key.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5Mjk2Nw=="}, "originalCommit": {"oid": "e36ca664abb49ed5fc49f24d1744bc582e03fbdc"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODkyOTA3OnYy", "diffSide": "RIGHT", "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitiveObjectMap.stg", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzowNTowOFrOGaKzPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNzo0OTo1NFrOGc6Uxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5MzExOQ==", "bodyText": "The value function is invoked with the additional parameter here, not the key.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r430093119", "createdAt": "2020-05-25T23:05:08Z", "author": {"login": "donraab"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitiveObjectMap.stg", "diffHunk": "@@ -45,20 +53,71 @@ public interface Mutable<name>ObjectMap\\<V> extends <name>ObjectMap\\<V>, Mutable\n     }\n \n     /**\n+     * Puts all of the key/value mappings from the specified map into this map. If this\n+     * map already has a value associated with one of the keys in the map, it will be\n+     * replaced with the value in {@code map}.\n+     * @param map the map to copy into this map\n      * @since 5.0.\n      */\n     void putAll(<name>ObjectMap\\<? extends V> map);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #remove(<type>)\n+     */\n     V removeKey(<type> key);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #removeKey(<type>)\n+     */\n     V remove(<type> key);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates a value with the key.\n+     * a new value with they key\n+     * @param key the key\n+     * @param value the value to associate with {@code key} if no such mapping exists\n+     * @return the value associated with key, if one exists, or {@code value} if not\n+     */\n     V getIfAbsentPut(<type> key, V value);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value supplier with the key.\n+     * @param key the key\n+     * @param function the supplier that provides the value if no mapping exists for {@code key}\n+     * @return the value associated with the key, if one exists, or the result of\n+     * invoking {@code function} if not\n+     */\n     V getIfAbsentPut(<type> key, Function0\\<? extends V> function);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value function with the key.\n+     * @param key the key\n+     * @param function the function that provides the value if no mapping exists.\n+     * The {@code key} will be passed as the argument to the function.\n+     * @return the value associated with the key, if one exists, or the result of\n+     * invoking {@code function} with {@code key} if not\n+     */\n     V getIfAbsentPutWithKey(<type> key, <name>ToObjectFunction\\<? extends V> function);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value function with the key.\n+     * @param key the key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36ca664abb49ed5fc49f24d1744bc582e03fbdc"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5NTY4Mw==", "bodyText": "P.S. I feel like those parameters/methods overloads are largely unnecessary because a function with a fixed parameter is basically the same thing as a consumer.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r430095683", "createdAt": "2020-05-25T23:23:54Z", "author": {"login": "jdimeo"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitiveObjectMap.stg", "diffHunk": "@@ -45,20 +53,71 @@ public interface Mutable<name>ObjectMap\\<V> extends <name>ObjectMap\\<V>, Mutable\n     }\n \n     /**\n+     * Puts all of the key/value mappings from the specified map into this map. If this\n+     * map already has a value associated with one of the keys in the map, it will be\n+     * replaced with the value in {@code map}.\n+     * @param map the map to copy into this map\n      * @since 5.0.\n      */\n     void putAll(<name>ObjectMap\\<? extends V> map);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #remove(<type>)\n+     */\n     V removeKey(<type> key);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #removeKey(<type>)\n+     */\n     V remove(<type> key);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates a value with the key.\n+     * a new value with they key\n+     * @param key the key\n+     * @param value the value to associate with {@code key} if no such mapping exists\n+     * @return the value associated with key, if one exists, or {@code value} if not\n+     */\n     V getIfAbsentPut(<type> key, V value);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value supplier with the key.\n+     * @param key the key\n+     * @param function the supplier that provides the value if no mapping exists for {@code key}\n+     * @return the value associated with the key, if one exists, or the result of\n+     * invoking {@code function} if not\n+     */\n     V getIfAbsentPut(<type> key, Function0\\<? extends V> function);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value function with the key.\n+     * @param key the key\n+     * @param function the function that provides the value if no mapping exists.\n+     * The {@code key} will be passed as the argument to the function.\n+     * @return the value associated with the key, if one exists, or the result of\n+     * invoking {@code function} with {@code key} if not\n+     */\n     V getIfAbsentPutWithKey(<type> key, <name>ToObjectFunction\\<? extends V> function);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value function with the key.\n+     * @param key the key", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5MzExOQ=="}, "originalCommit": {"oid": "e36ca664abb49ed5fc49f24d1744bc582e03fbdc"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2NjU1Mg==", "bodyText": "@jdimeo while that is true, this is a part of micro-optimization. Basically, when you pass in a parameter, you can cache it for that loop and avoid things like finality and reassignment issues. Secondly, the *with patterns help us use Method References.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r432966552", "createdAt": "2020-05-31T17:18:27Z", "author": {"login": "nikhilnanivadekar"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitiveObjectMap.stg", "diffHunk": "@@ -45,20 +53,71 @@ public interface Mutable<name>ObjectMap\\<V> extends <name>ObjectMap\\<V>, Mutable\n     }\n \n     /**\n+     * Puts all of the key/value mappings from the specified map into this map. If this\n+     * map already has a value associated with one of the keys in the map, it will be\n+     * replaced with the value in {@code map}.\n+     * @param map the map to copy into this map\n      * @since 5.0.\n      */\n     void putAll(<name>ObjectMap\\<? extends V> map);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #remove(<type>)\n+     */\n     V removeKey(<type> key);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #removeKey(<type>)\n+     */\n     V remove(<type> key);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates a value with the key.\n+     * a new value with they key\n+     * @param key the key\n+     * @param value the value to associate with {@code key} if no such mapping exists\n+     * @return the value associated with key, if one exists, or {@code value} if not\n+     */\n     V getIfAbsentPut(<type> key, V value);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value supplier with the key.\n+     * @param key the key\n+     * @param function the supplier that provides the value if no mapping exists for {@code key}\n+     * @return the value associated with the key, if one exists, or the result of\n+     * invoking {@code function} if not\n+     */\n     V getIfAbsentPut(<type> key, Function0\\<? extends V> function);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value function with the key.\n+     * @param key the key\n+     * @param function the function that provides the value if no mapping exists.\n+     * The {@code key} will be passed as the argument to the function.\n+     * @return the value associated with the key, if one exists, or the result of\n+     * invoking {@code function} with {@code key} if not\n+     */\n     V getIfAbsentPutWithKey(<type> key, <name>ToObjectFunction\\<? extends V> function);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value function with the key.\n+     * @param key the key", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5MzExOQ=="}, "originalCommit": {"oid": "e36ca664abb49ed5fc49f24d1744bc582e03fbdc"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2ODkwMw==", "bodyText": "Understood. In general, I'm a big fan of how your APIs are not super spartan and provide some \"unnecessary\" conveniences like these, so \ud83d\udc4d", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r432968903", "createdAt": "2020-05-31T17:49:54Z", "author": {"login": "jdimeo"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitiveObjectMap.stg", "diffHunk": "@@ -45,20 +53,71 @@ public interface Mutable<name>ObjectMap\\<V> extends <name>ObjectMap\\<V>, Mutable\n     }\n \n     /**\n+     * Puts all of the key/value mappings from the specified map into this map. If this\n+     * map already has a value associated with one of the keys in the map, it will be\n+     * replaced with the value in {@code map}.\n+     * @param map the map to copy into this map\n      * @since 5.0.\n      */\n     void putAll(<name>ObjectMap\\<? extends V> map);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #remove(<type>)\n+     */\n     V removeKey(<type> key);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #removeKey(<type>)\n+     */\n     V remove(<type> key);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates a value with the key.\n+     * a new value with they key\n+     * @param key the key\n+     * @param value the value to associate with {@code key} if no such mapping exists\n+     * @return the value associated with key, if one exists, or {@code value} if not\n+     */\n     V getIfAbsentPut(<type> key, V value);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value supplier with the key.\n+     * @param key the key\n+     * @param function the supplier that provides the value if no mapping exists for {@code key}\n+     * @return the value associated with the key, if one exists, or the result of\n+     * invoking {@code function} if not\n+     */\n     V getIfAbsentPut(<type> key, Function0\\<? extends V> function);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value function with the key.\n+     * @param key the key\n+     * @param function the function that provides the value if no mapping exists.\n+     * The {@code key} will be passed as the argument to the function.\n+     * @return the value associated with the key, if one exists, or the result of\n+     * invoking {@code function} with {@code key} if not\n+     */\n     V getIfAbsentPutWithKey(<type> key, <name>ToObjectFunction\\<? extends V> function);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value function with the key.\n+     * @param key the key", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5MzExOQ=="}, "originalCommit": {"oid": "e36ca664abb49ed5fc49f24d1744bc582e03fbdc"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODk2Mjc5OnYy", "diffSide": "RIGHT", "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitivePrimitiveMap.stg", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzo0MTowOVrOGaLG0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzo0MTowOVrOGaLG0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5ODEyOA==", "bodyText": "A sentence fragment.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r430098128", "createdAt": "2020-05-25T23:41:09Z", "author": {"login": "donraab"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitivePrimitiveMap.stg", "diffHunk": "@@ -56,20 +68,88 @@ public interface Mutable<name1><name2>Map extends <name1><name2>Map, Mutable<nam\n      */\n     void updateValues(<name1><name2>To<name2>Function function);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #remove(<type1>)\n+     */\n     void removeKey(<type1> key);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #removeKey(<type1>)\n+     */\n     void remove(<type1> key);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map,\n+     * returning the previously associated value with the key. If no mapping\n+     * existed for the key, the specified default value is returned.\n+     * @param key the key to remove\n+     * @param value the default value to return if no mapping for the key exists\n+     * @return the value previously associated with the key, if one existed,\n+     * or {@code value} if not\n+     */\n     <type2> removeKeyIfAbsent(<type1> key, <type2> value);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates a value with the key.\n+     * a new value with they key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36ca664abb49ed5fc49f24d1744bc582e03fbdc"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODk2MzU5OnYy", "diffSide": "RIGHT", "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitivePrimitiveMap.stg", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzo0MjoyNFrOGaLHTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzo0MjoyNFrOGaLHTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5ODI1Mg==", "bodyText": "I understand this better after reading your comment from before but could still be confusing.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r430098252", "createdAt": "2020-05-25T23:42:24Z", "author": {"login": "donraab"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitivePrimitiveMap.stg", "diffHunk": "@@ -56,20 +68,88 @@ public interface Mutable<name1><name2>Map extends <name1><name2>Map, Mutable<nam\n      */\n     void updateValues(<name1><name2>To<name2>Function function);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #remove(<type1>)\n+     */\n     void removeKey(<type1> key);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #removeKey(<type1>)\n+     */\n     void remove(<type1> key);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map,\n+     * returning the previously associated value with the key. If no mapping\n+     * existed for the key, the specified default value is returned.\n+     * @param key the key to remove\n+     * @param value the default value to return if no mapping for the key exists\n+     * @return the value previously associated with the key, if one existed,\n+     * or {@code value} if not\n+     */\n     <type2> removeKeyIfAbsent(<type1> key, <type2> value);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates a value with the key.\n+     * a new value with they key\n+     * @param key the key\n+     * @param value the value to associate with {@code key} if no such mapping exists\n+     * @return the value associated with key, if one exists, or {@code value} if not\n+     */\n     <type2> getIfAbsentPut(<type1> key, <type2> value);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value supplier with the key.\n+     * @param key the key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36ca664abb49ed5fc49f24d1744bc582e03fbdc"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODk2NTI4OnYy", "diffSide": "RIGHT", "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitivePrimitiveMap.stg", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzo0Mzo1M1rOGaLIKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzo0Mzo1M1rOGaLIKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5ODQ3Mw==", "bodyText": "Interestingly, with \"with the key\" has dual meaning as the value is associated with the key, and they key is passed as a parameter to the function. I think this is ok here.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r430098473", "createdAt": "2020-05-25T23:43:53Z", "author": {"login": "donraab"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitivePrimitiveMap.stg", "diffHunk": "@@ -56,20 +68,88 @@ public interface Mutable<name1><name2>Map extends <name1><name2>Map, Mutable<nam\n      */\n     void updateValues(<name1><name2>To<name2>Function function);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #remove(<type1>)\n+     */\n     void removeKey(<type1> key);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #removeKey(<type1>)\n+     */\n     void remove(<type1> key);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map,\n+     * returning the previously associated value with the key. If no mapping\n+     * existed for the key, the specified default value is returned.\n+     * @param key the key to remove\n+     * @param value the default value to return if no mapping for the key exists\n+     * @return the value previously associated with the key, if one existed,\n+     * or {@code value} if not\n+     */\n     <type2> removeKeyIfAbsent(<type1> key, <type2> value);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates a value with the key.\n+     * a new value with they key\n+     * @param key the key\n+     * @param value the value to associate with {@code key} if no such mapping exists\n+     * @return the value associated with key, if one exists, or {@code value} if not\n+     */\n     <type2> getIfAbsentPut(<type1> key, <type2> value);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value supplier with the key.\n+     * @param key the key\n+     * @param function the supplier that provides the value if no mapping exists for {@code key}\n+     * @return the value associated with the key, if one exists, or the result of\n+     * invoking {@code function} if not\n+     */\n     <type2> getIfAbsentPut(<type1> key, <name2>Function0 function);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value function with the key.\n+     * @param key the key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36ca664abb49ed5fc49f24d1744bc582e03fbdc"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODk2NTk3OnYy", "diffSide": "RIGHT", "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitivePrimitiveMap.stg", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzo0NDo0MVrOGaLIjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzo0NDo0MVrOGaLIjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5ODU3Mw==", "bodyText": "This is where it gets confusing. The calculated value is associated with the key, but the parameter is passed to the function.", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r430098573", "createdAt": "2020-05-25T23:44:41Z", "author": {"login": "donraab"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/mutablePrimitivePrimitiveMap.stg", "diffHunk": "@@ -56,20 +68,88 @@ public interface Mutable<name1><name2>Map extends <name1><name2>Map, Mutable<nam\n      */\n     void updateValues(<name1><name2>To<name2>Function function);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #remove(<type1>)\n+     */\n     void removeKey(<type1> key);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map.\n+     * @param key the key to remove\n+     * @see #removeKey(<type1>)\n+     */\n     void remove(<type1> key);\n \n+    /**\n+     * Removes the mapping associated with the key, if one exists, from the map,\n+     * returning the previously associated value with the key. If no mapping\n+     * existed for the key, the specified default value is returned.\n+     * @param key the key to remove\n+     * @param value the default value to return if no mapping for the key exists\n+     * @return the value previously associated with the key, if one existed,\n+     * or {@code value} if not\n+     */\n     <type2> removeKeyIfAbsent(<type1> key, <type2> value);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates a value with the key.\n+     * a new value with they key\n+     * @param key the key\n+     * @param value the value to associate with {@code key} if no such mapping exists\n+     * @return the value associated with key, if one exists, or {@code value} if not\n+     */\n     <type2> getIfAbsentPut(<type1> key, <type2> value);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value supplier with the key.\n+     * @param key the key\n+     * @param function the supplier that provides the value if no mapping exists for {@code key}\n+     * @return the value associated with the key, if one exists, or the result of\n+     * invoking {@code function} if not\n+     */\n     <type2> getIfAbsentPut(<type1> key, <name2>Function0 function);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value function with the key.\n+     * @param key the key\n+     * @param function the function that provides the value if no mapping exists.\n+     * The {@code key} will be passed as the argument to the function.\n+     * @return the value associated with the key, if one exists, or the result of\n+     * invoking {@code function} with {@code key} if not\n+     */\n     <type2> getIfAbsentPutWithKey(<type1> key, <name1>To<name2>Function function);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * associates the result of invoking the value function with the key.\n+     * @param key the key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36ca664abb49ed5fc49f24d1744bc582e03fbdc"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzk4MDE4OnYy", "diffSide": "RIGHT", "path": "eclipse-collections-code-generator/src/main/resources/api/map/primitiveObjectMap.stg", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwMzo1MzoyMVrOGgG-jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwMzo1MzoyMVrOGgG-jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyMTkzMw==", "bodyText": "We might want to update the wording a bit in a future iteration. But it is not super important.\nkeysView() keyValueView() essentially all *View() APIs are supposed to be lazy. So, the idea of changes in the map reflecting in the view might be a bit awkward.\nIt is ok for now", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r436321933", "createdAt": "2020-06-07T03:53:21Z", "author": {"login": "nikhilnanivadekar"}, "path": "eclipse-collections-code-generator/src/main/resources/api/map/primitiveObjectMap.stg", "diffHunk": "@@ -32,33 +32,92 @@ import org.eclipse.collections.api.tuple.primitive.<name>ObjectPair;\n  */\n public interface <name>ObjectMap\\<V> extends PrimitiveObjectMap\\<V>\n {\n+    /**\n+     * Retrieves the value associated with the key. If no mapping exists for the key,\n+     * {@code null} is returned.\n+     * @param key the key\n+     * @return the value associated with the key, or the default value if no such\n+     * mapping exists\n+     */\n     V get(<type> key);\n \n+    /**\n+     * Retrieves the value associated with the key if one exists; if it does not,\n+     * returns the result of invoking the value supplier.\n+     * @param key the key\n+     * @param function the supplier that provides the value if no mapping exists for {@code key}\n+     * @return the value associated with the key, if one exists, or the result of\n+     * invoking {@code ifAbsent} if not\n+     */\n     V getIfAbsent(<type> key, Function0\\<? extends V> ifAbsent);\n \n+    /**\n+     * Returns whether or not the key is present in the map.\n+     * @param key the key\n+     * @return if a mapping exists in this map for the key\n+     */\n     boolean containsKey(<type> key);\n \n     @Override\n     <name>ObjectMap\\<V> tap(Procedure\\<? super V> procedure);\n \n+    /**\n+     * Iterates through each key in the map, invoking the procedure for each.\n+     * @param procedure the procedure to invoke for each key\n+     */\n     void forEachKey(<name>Procedure procedure);\n \n+    /**\n+     * Iterates through each key/value pair in the map, invoking the procedure for each.\n+     * @param procedure the procedure to invoke for each key/value pair\n+     */\n     void forEachKeyValue(<name>ObjectProcedure\\<? super V> procedure);\n \n+    /**\n+     * Return a copy of this map containing only the key/value pairs that match the predicate.\n+     * @param predicate the predicate to determine which key/value pairs in this map should be\n+     * included in the returned map\n+     * @return a copy of this map with the matching key/value pairs\n+     */\n     <name>ObjectMap\\<V> select(<name>ObjectPredicate\\<? super V> predicate);\n \n+    /**\n+     * Return a copy of this map containing only the key/value pairs that do not match the\n+     * predicate.\n+     * @param predicate the predicate to determine which key/value pairs in this map should be\n+     * excluded from the returned map\n+     * @return a copy of this map without the matching key/value pairs\n+     */\n     <name>ObjectMap\\<V> reject(<name>ObjectPredicate\\<? super V> predicate);\n \n+    /**\n+     * Returns a copy of this map that is immutable (if this map is mutable) or\n+     * itself if it is already immutable.\n+     * @return an immutable map that is equivalent to this one\n+     */\n     Immutable<name>ObjectMap\\<V> toImmutable();\n \n+    /**\n+     * Returns a set containing all the keys in this map. The set is backed by the\n+     * map, so any modifications to the returned set will affect this map.\n+     * @return a mutable set containing the keys in this map\n+     */\n     Mutable<name>Set keySet();\n \n     /**\n+     * Returns a view of the keys in this map. This iterable is backed by the map, so\n+     * any modifications to the underlying map will be reflected in the keys returned", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b5f01ee1fe63ef0bd325b22dbc52429e80cca3"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzk4MTg1OnYy", "diffSide": "RIGHT", "path": "eclipse-collections-code-generator/src/test/java/org/eclipse/collections/codegenerator/tools/JavadocUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwMzo1Nzo1OVrOGgG_Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQyMTo0MjozNlrOIgzUsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyMjE0Mw==", "bodyText": "This utility is awesome! May be if it is possible, can you contribute another utility which will move code to the template? It will be super useful to be able to write code in one of the primitive files and reverse engineer it to a template. It need not be fully polished and working, but should provide a starting point. Thoughts?", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r436322143", "createdAt": "2020-06-07T03:57:59Z", "author": {"login": "nikhilnanivadekar"}, "path": "eclipse-collections-code-generator/src/test/java/org/eclipse/collections/codegenerator/tools/JavadocUtil.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Goldman Sachs and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * and Eclipse Distribution License v. 1.0 which accompany this distribution.\n+ * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html\n+ * and the Eclipse Distribution License is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ */\n+\n+package org.eclipse.collections.codegenerator.tools;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Deque;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.collections.codegenerator.EclipseCollectionsCodeGenerator;\n+import org.eclipse.collections.codegenerator.model.Primitive;\n+\n+/**\n+ * <p>This class copies the Javadocs from a generated class back to the template.\n+ * This is helpful for writing the Javadocs on a \"real\" class to benefit from IDE\n+ * support (auto complete of parameter names, for example) that you don't get\n+ * when directly editing the template.</p>\n+ *\n+ * <p>This class is in the test classpath to keep it out of public API, but it is\n+ * not a test.</p>\n+ *\n+ * <p>This assumes it is running in the same folder as the code generator and the\n+ * API folder with the templates is a sibling folder. You can specify any number\n+ * of pairs of arguments, for example:\n+ * <blockquote><code>\n+ * org.eclipse.collections.api.map.primitive.IntValuesMap\n+ * api/map/primitiveValuesMap\n+ * org.eclipse.collections.api.map.primitive.CharIntMap\n+ * api/map/primitivePrimitiveMap\n+ * </code></blockquote>\n+ * </p>\n+ *\n+ * @author <a href=\"dimeo@elderresearch.com\">John Dimeo</a>\n+ * @since May 8, 2020\n+ */\n+public class JavadocUtil\n+{\n+    private static final Path TEMPLATE_ROOT = Paths.get(\"src\", \"main\", \"resources\");\n+    private static final Path API_ROOT = Paths.get(\"..\", \"eclipse-collections-api\");\n+\n+    private String generatedClass;\n+    private String template;\n+\n+    public JavadocUtil generatedClass(String gc)\n+    {\n+        this.generatedClass = gc;\n+        return this;\n+    }\n+\n+    public JavadocUtil template(String t)\n+    {\n+        this.template = t;\n+        return this;\n+    }\n+\n+    public void process() throws IOException\n+    {\n+        generatedClass = generatedClass.replace('.', File.separatorChar);\n+        if (!generatedClass.endsWith(\".java\"))\n+        {\n+            generatedClass += \".java\";\n+        }\n+        if (!template.endsWith(\".stg\"))\n+        {\n+            template  += \".stg\";\n+        }\n+\n+        Path src = API_ROOT.resolve(EclipseCollectionsCodeGenerator.GENERATED_SOURCES_LOCATION.replace('/', File.separatorChar) + generatedClass);\n+        Path dest = TEMPLATE_ROOT.resolve(template.replace('/', File.separatorChar));\n+\n+        if (!Files.isRegularFile(src) || !Files.isRegularFile(dest))\n+        {\n+            throw new IllegalArgumentException(\"Specified files are not readable\");\n+        }\n+\n+        List<String> srcLines = Files.readAllLines(src);\n+        List<String> destLines = Files.readAllLines(dest);\n+        Deque<String> javadocLines = new LinkedList<>();\n+\n+        boolean inJavadoc = false;\n+        boolean matchNextLine = false;\n+        for (String srcLine : srcLines)\n+        {\n+            String srcLineNorm = normalizeGeneratedClassLine(srcLine);\n+            String srcLineTrimmed = srcLineNorm.trim();\n+            if (srcLineTrimmed.isEmpty())\n+            {\n+                continue;\n+            }\n+\n+            // Annotations belong with the javadoc\n+            if (srcLineTrimmed.startsWith(\"@\"))\n+            {\n+                javadocLines.add(srcLineNorm);\n+                continue;\n+            }\n+\n+            if (matchNextLine)\n+            {\n+                findLineReplacingJavadoc(destLines, srcLineTrimmed, javadocLines);\n+                matchNextLine = false;\n+                continue;\n+            }\n+\n+            if (srcLineTrimmed.startsWith(\"/**\"))\n+            {\n+                inJavadoc = true;\n+                javadocLines.clear();\n+            }\n+            if (inJavadoc)\n+            {\n+                javadocLines.add(srcLineNorm);\n+                if (srcLineTrimmed.startsWith(\"*/\") || srcLineTrimmed.endsWith(\"*/\"))\n+                {\n+                    inJavadoc = false;\n+                    matchNextLine = true;\n+                }\n+            }\n+        }\n+\n+        Files.write(dest, destLines);\n+\n+        System.out.println(\"Copied Javadocs from \" + generatedClass + \" back to \" + template);\n+    }\n+\n+    private static void findLineReplacingJavadoc(List<String> lines, String matchLine, Deque<String> javadoc)\n+    {\n+        ListIterator<String> iter = lines.listIterator();\n+        while (iter.hasNext())\n+        {\n+            String line = normalizeTemplateLine(iter.next().trim());\n+            // Definitions aren't candidates for matches\n+            if (line.isEmpty() || line.contains(\"::=\"))\n+            {\n+                continue;\n+            }\n+\n+            if (line.equals(matchLine))\n+            {\n+                // Remove existing javadoc\n+                iter.previous();\n+                while (iter.hasPrevious()\n+                    && (line = iter.previous().trim()).startsWith(\"@\")\n+                    || line.startsWith(\"*/\")\n+                    || line.startsWith(\"*\")\n+                    || line.startsWith(\"/**\"))\n+                {\n+                    iter.remove();\n+                }\n+                iter.next();\n+                javadoc.forEach(iter::add);\n+                return;\n+            }\n+        }\n+        System.err.println(\"Could not match line \" + matchLine);\n+        return;\n+    }\n+\n+    // Remove all types and type placeholders so lines will exactly match\n+    private static String normalizeTemplateLine(String s)\n+    {\n+        s = s.replace(\"<type1>\", \"<type>\").replace(\"<type2>\", \"<type>\");\n+        s = s.replace(\"<name1>\", \"<name>\").replace(\"<name2>\", \"<name>\");\n+        // boolean is a common return value for is...() methods - normalize\n+        // it to match normalized lines from the generated class. Also remove \\\n+        return s.replace(\"boolean\", \"<type>\").replaceAll(Pattern.quote(\"\\\\\"), \"\");\n+    }\n+\n+    // TODO: Multiple types/names not properly supported\n+    private static String normalizeGeneratedClassLine(String s)\n+    {\n+        for (Primitive p : Primitive.values())\n+        {\n+            s = s.replace(p.type, \"<type>\").replace(p.getName(), \"<name>\");\n+        }\n+        // ... but \"interface\" gets erroneously replaced\n+        return s.replace(\"<type>erface\", \"interface\");\n+    }\n+\n+    public static void main(String... args) throws IOException\n+    {\n+        if (args.length < 2 || args.length % 2 > 0)\n+        {\n+            throw new IllegalArgumentException(\"You must specify pairs of file paths: a generated class followed by its template\");\n+        }\n+\n+        for (int i = 0; i < args.length; i += 2)\n+        {\n+            new JavadocUtil().generatedClass(args[i]).template(args[i + 1]).process();\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b5f01ee1fe63ef0bd325b22dbc52429e80cca3"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTI2NjIyNw==", "bodyText": "@nikhilnanivadekar I haven't forgotten about this request, but regretfully I'm not sure when I'll have the time to tackle it!", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r571266227", "createdAt": "2021-02-05T21:42:36Z", "author": {"login": "jdimeo"}, "path": "eclipse-collections-code-generator/src/test/java/org/eclipse/collections/codegenerator/tools/JavadocUtil.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Goldman Sachs and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * and Eclipse Distribution License v. 1.0 which accompany this distribution.\n+ * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html\n+ * and the Eclipse Distribution License is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ */\n+\n+package org.eclipse.collections.codegenerator.tools;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Deque;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.collections.codegenerator.EclipseCollectionsCodeGenerator;\n+import org.eclipse.collections.codegenerator.model.Primitive;\n+\n+/**\n+ * <p>This class copies the Javadocs from a generated class back to the template.\n+ * This is helpful for writing the Javadocs on a \"real\" class to benefit from IDE\n+ * support (auto complete of parameter names, for example) that you don't get\n+ * when directly editing the template.</p>\n+ *\n+ * <p>This class is in the test classpath to keep it out of public API, but it is\n+ * not a test.</p>\n+ *\n+ * <p>This assumes it is running in the same folder as the code generator and the\n+ * API folder with the templates is a sibling folder. You can specify any number\n+ * of pairs of arguments, for example:\n+ * <blockquote><code>\n+ * org.eclipse.collections.api.map.primitive.IntValuesMap\n+ * api/map/primitiveValuesMap\n+ * org.eclipse.collections.api.map.primitive.CharIntMap\n+ * api/map/primitivePrimitiveMap\n+ * </code></blockquote>\n+ * </p>\n+ *\n+ * @author <a href=\"dimeo@elderresearch.com\">John Dimeo</a>\n+ * @since May 8, 2020\n+ */\n+public class JavadocUtil\n+{\n+    private static final Path TEMPLATE_ROOT = Paths.get(\"src\", \"main\", \"resources\");\n+    private static final Path API_ROOT = Paths.get(\"..\", \"eclipse-collections-api\");\n+\n+    private String generatedClass;\n+    private String template;\n+\n+    public JavadocUtil generatedClass(String gc)\n+    {\n+        this.generatedClass = gc;\n+        return this;\n+    }\n+\n+    public JavadocUtil template(String t)\n+    {\n+        this.template = t;\n+        return this;\n+    }\n+\n+    public void process() throws IOException\n+    {\n+        generatedClass = generatedClass.replace('.', File.separatorChar);\n+        if (!generatedClass.endsWith(\".java\"))\n+        {\n+            generatedClass += \".java\";\n+        }\n+        if (!template.endsWith(\".stg\"))\n+        {\n+            template  += \".stg\";\n+        }\n+\n+        Path src = API_ROOT.resolve(EclipseCollectionsCodeGenerator.GENERATED_SOURCES_LOCATION.replace('/', File.separatorChar) + generatedClass);\n+        Path dest = TEMPLATE_ROOT.resolve(template.replace('/', File.separatorChar));\n+\n+        if (!Files.isRegularFile(src) || !Files.isRegularFile(dest))\n+        {\n+            throw new IllegalArgumentException(\"Specified files are not readable\");\n+        }\n+\n+        List<String> srcLines = Files.readAllLines(src);\n+        List<String> destLines = Files.readAllLines(dest);\n+        Deque<String> javadocLines = new LinkedList<>();\n+\n+        boolean inJavadoc = false;\n+        boolean matchNextLine = false;\n+        for (String srcLine : srcLines)\n+        {\n+            String srcLineNorm = normalizeGeneratedClassLine(srcLine);\n+            String srcLineTrimmed = srcLineNorm.trim();\n+            if (srcLineTrimmed.isEmpty())\n+            {\n+                continue;\n+            }\n+\n+            // Annotations belong with the javadoc\n+            if (srcLineTrimmed.startsWith(\"@\"))\n+            {\n+                javadocLines.add(srcLineNorm);\n+                continue;\n+            }\n+\n+            if (matchNextLine)\n+            {\n+                findLineReplacingJavadoc(destLines, srcLineTrimmed, javadocLines);\n+                matchNextLine = false;\n+                continue;\n+            }\n+\n+            if (srcLineTrimmed.startsWith(\"/**\"))\n+            {\n+                inJavadoc = true;\n+                javadocLines.clear();\n+            }\n+            if (inJavadoc)\n+            {\n+                javadocLines.add(srcLineNorm);\n+                if (srcLineTrimmed.startsWith(\"*/\") || srcLineTrimmed.endsWith(\"*/\"))\n+                {\n+                    inJavadoc = false;\n+                    matchNextLine = true;\n+                }\n+            }\n+        }\n+\n+        Files.write(dest, destLines);\n+\n+        System.out.println(\"Copied Javadocs from \" + generatedClass + \" back to \" + template);\n+    }\n+\n+    private static void findLineReplacingJavadoc(List<String> lines, String matchLine, Deque<String> javadoc)\n+    {\n+        ListIterator<String> iter = lines.listIterator();\n+        while (iter.hasNext())\n+        {\n+            String line = normalizeTemplateLine(iter.next().trim());\n+            // Definitions aren't candidates for matches\n+            if (line.isEmpty() || line.contains(\"::=\"))\n+            {\n+                continue;\n+            }\n+\n+            if (line.equals(matchLine))\n+            {\n+                // Remove existing javadoc\n+                iter.previous();\n+                while (iter.hasPrevious()\n+                    && (line = iter.previous().trim()).startsWith(\"@\")\n+                    || line.startsWith(\"*/\")\n+                    || line.startsWith(\"*\")\n+                    || line.startsWith(\"/**\"))\n+                {\n+                    iter.remove();\n+                }\n+                iter.next();\n+                javadoc.forEach(iter::add);\n+                return;\n+            }\n+        }\n+        System.err.println(\"Could not match line \" + matchLine);\n+        return;\n+    }\n+\n+    // Remove all types and type placeholders so lines will exactly match\n+    private static String normalizeTemplateLine(String s)\n+    {\n+        s = s.replace(\"<type1>\", \"<type>\").replace(\"<type2>\", \"<type>\");\n+        s = s.replace(\"<name1>\", \"<name>\").replace(\"<name2>\", \"<name>\");\n+        // boolean is a common return value for is...() methods - normalize\n+        // it to match normalized lines from the generated class. Also remove \\\n+        return s.replace(\"boolean\", \"<type>\").replaceAll(Pattern.quote(\"\\\\\"), \"\");\n+    }\n+\n+    // TODO: Multiple types/names not properly supported\n+    private static String normalizeGeneratedClassLine(String s)\n+    {\n+        for (Primitive p : Primitive.values())\n+        {\n+            s = s.replace(p.type, \"<type>\").replace(p.getName(), \"<name>\");\n+        }\n+        // ... but \"interface\" gets erroneously replaced\n+        return s.replace(\"<type>erface\", \"interface\");\n+    }\n+\n+    public static void main(String... args) throws IOException\n+    {\n+        if (args.length < 2 || args.length % 2 > 0)\n+        {\n+            throw new IllegalArgumentException(\"You must specify pairs of file paths: a generated class followed by its template\");\n+        }\n+\n+        for (int i = 0; i < args.length; i += 2)\n+        {\n+            new JavadocUtil().generatedClass(args[i]).template(args[i + 1]).process();\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyMjE0Mw=="}, "originalCommit": {"oid": "80b5f01ee1fe63ef0bd325b22dbc52429e80cca3"}, "originalPosition": 206}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3663, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}