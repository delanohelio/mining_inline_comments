{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMTM4MjU3", "number": 877, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzoxMToyNlrOD4PO3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzoxMzoxNlrOD4PQXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjk2NDEzOnYy", "diffSide": "RIGHT", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/collection/mutable/AbstractMultiReaderMutableCollection.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzoxMToyNlrOGO9a2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMTozNDozNlrOGPanGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzOTU0NQ==", "bodyText": "Why is it ok to remove transient here?", "url": "https://github.com/eclipse/eclipse-collections/pull/877#discussion_r418339545", "createdAt": "2020-04-30T23:11:26Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/collection/mutable/AbstractMultiReaderMutableCollection.java", "diffHunk": "@@ -77,10 +77,11 @@\n  * AbstractMultiReaderMutableCollection is a common abstraction that provides thread-safe collection behaviors.\n  * Subclasses of this class must provide implementations of getDelegate() and getLock().\n  */\n+@SuppressWarnings(\"unused\")\n public abstract class AbstractMultiReaderMutableCollection<T> implements MutableCollection<T>\n {\n-    protected transient ReadWriteLock lock;\n-    protected transient ReadWriteLockWrapper lockWrapper;\n+    protected ReadWriteLock lock;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98b54952128325306e4c7aa57e46cbad594539c9"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxMzUyOA==", "bodyText": "transient only affects Serializable classes. AbstractMultiReaderMutableCollection and its subclasses are not Serializable. Its subclasses are Externalizable\nIn theory, someone could write a new serializable subclass of AbstractMultiReaderMutableCollection. If you would prefer, I could bring back the keyword and suppress the warning.", "url": "https://github.com/eclipse/eclipse-collections/pull/877#discussion_r418613528", "createdAt": "2020-05-01T16:15:04Z", "author": {"login": "motlin"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/collection/mutable/AbstractMultiReaderMutableCollection.java", "diffHunk": "@@ -77,10 +77,11 @@\n  * AbstractMultiReaderMutableCollection is a common abstraction that provides thread-safe collection behaviors.\n  * Subclasses of this class must provide implementations of getDelegate() and getLock().\n  */\n+@SuppressWarnings(\"unused\")\n public abstract class AbstractMultiReaderMutableCollection<T> implements MutableCollection<T>\n {\n-    protected transient ReadWriteLock lock;\n-    protected transient ReadWriteLockWrapper lockWrapper;\n+    protected ReadWriteLock lock;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzOTU0NQ=="}, "originalCommit": {"oid": "98b54952128325306e4c7aa57e46cbad594539c9"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODgxNzgxOQ==", "bodyText": "Yes, bring back the keyword and suppress the warning.", "url": "https://github.com/eclipse/eclipse-collections/pull/877#discussion_r418817819", "createdAt": "2020-05-02T01:34:36Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/collection/mutable/AbstractMultiReaderMutableCollection.java", "diffHunk": "@@ -77,10 +77,11 @@\n  * AbstractMultiReaderMutableCollection is a common abstraction that provides thread-safe collection behaviors.\n  * Subclasses of this class must provide implementations of getDelegate() and getLock().\n  */\n+@SuppressWarnings(\"unused\")\n public abstract class AbstractMultiReaderMutableCollection<T> implements MutableCollection<T>\n {\n-    protected transient ReadWriteLock lock;\n-    protected transient ReadWriteLockWrapper lockWrapper;\n+    protected ReadWriteLock lock;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzOTU0NQ=="}, "originalCommit": {"oid": "98b54952128325306e4c7aa57e46cbad594539c9"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjk2Nzk3OnYy", "diffSide": "LEFT", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/collection/mutable/AbstractMultiReaderMutableCollection.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzoxMzoxNlrOGO9dGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMTo0MToxNFrOGPaxEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0MDEyMw==", "bodyText": "Is readWriteLock is not used?", "url": "https://github.com/eclipse/eclipse-collections/pull/877#discussion_r418340123", "createdAt": "2020-04-30T23:13:16Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/collection/mutable/AbstractMultiReaderMutableCollection.java", "diffHunk": "@@ -1981,13 +1982,11 @@ public void appendString(Appendable appendable, String start, String separator,\n \n     public static class ReadWriteLockWrapper\n     {\n-        private final ReadWriteLock readWriteLock;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98b54952128325306e4c7aa57e46cbad594539c9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxMzkzMA==", "bodyText": "Correct, the field is not used. The parameter is still used in the constructor.\n    public static class ReadWriteLockWrapper\n    {\n        private final ReadWriteLock readWriteLock;\n        private final LockWrapper readLock;\n        private final LockWrapper writeLock;\n\n        public ReadWriteLockWrapper(ReadWriteLock readWriteLock)\n        {\n            this.readWriteLock = readWriteLock;\n            this.readLock = new LockWrapper(readWriteLock.readLock());\n            this.writeLock = new LockWrapper(readWriteLock.writeLock());\n        }\n...", "url": "https://github.com/eclipse/eclipse-collections/pull/877#discussion_r418613930", "createdAt": "2020-05-01T16:16:06Z", "author": {"login": "motlin"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/collection/mutable/AbstractMultiReaderMutableCollection.java", "diffHunk": "@@ -1981,13 +1982,11 @@ public void appendString(Appendable appendable, String start, String separator,\n \n     public static class ReadWriteLockWrapper\n     {\n-        private final ReadWriteLock readWriteLock;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0MDEyMw=="}, "originalCommit": {"oid": "98b54952128325306e4c7aa57e46cbad594539c9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODgyMDM2OQ==", "bodyText": "Ok", "url": "https://github.com/eclipse/eclipse-collections/pull/877#discussion_r418820369", "createdAt": "2020-05-02T01:41:14Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/collection/mutable/AbstractMultiReaderMutableCollection.java", "diffHunk": "@@ -1981,13 +1982,11 @@ public void appendString(Appendable appendable, String start, String separator,\n \n     public static class ReadWriteLockWrapper\n     {\n-        private final ReadWriteLock readWriteLock;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0MDEyMw=="}, "originalCommit": {"oid": "98b54952128325306e4c7aa57e46cbad594539c9"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3655, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}