{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNzAyNjY4", "number": 860, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzo1NjowNFrOD9IijQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxODoxOTowMVrOD9L_xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI5NjQ1OnYy", "diffSide": "RIGHT", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/UnmodifiableRichIterable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzo1NjowNFrOGWeD3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzo1NjowNFrOGWeD3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNDM2NA==", "bodyText": "This is a minor formatting inconsistency. All of the other instances have target on the same line as function.", "url": "https://github.com/eclipse/eclipse-collections/pull/860#discussion_r426214364", "createdAt": "2020-05-17T03:56:04Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/UnmodifiableRichIterable.java", "diffHunk": "@@ -370,6 +405,14 @@ public IntIterable collectInt(IntFunction<? super T> intFunction)\n         return this.iterable.collectInt(intFunction, target);\n     }\n \n+    @Override\n+    public <R extends MutableIntCollection> R flatCollectInt(\n+            Function<? super T, ? extends IntIterable> function,\n+            R target)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e679946c490ad27565c913b00c7277200a4141"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI5Njg2OnYy", "diffSide": "RIGHT", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/bag/AbstractBag.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzo1NzoyNlrOGWeEEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzo1NzoyNlrOGWeEEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNDQxNg==", "bodyText": "Is the cast really necessary here?", "url": "https://github.com/eclipse/eclipse-collections/pull/860#discussion_r426214416", "createdAt": "2020-05-17T03:57:26Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/bag/AbstractBag.java", "diffHunk": "@@ -335,6 +351,31 @@ public int count(Predicate<? super T> predicate)\n         return target;\n     }\n \n+    @Override\n+    public <R extends MutableBooleanCollection> R flatCollectBoolean(\n+            Function<? super T, ? extends BooleanIterable> function, R target)\n+    {\n+        if (target instanceof MutableBooleanBag)\n+        {\n+            MutableBooleanBag targetBag = (MutableBooleanBag) target;\n+            this.forEachWithOccurrences((each, occurrences) -> {\n+                BooleanIterable values = function.valueOf(each);\n+                values.forEach((BooleanProcedure) value -> targetBag.addOccurrences(value, occurrences));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e679946c490ad27565c913b00c7277200a4141"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI5NzI0OnYy", "diffSide": "RIGHT", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/bag/AbstractBag.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzo1Nzo1MFrOGWeEOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzo1Nzo1MFrOGWeEOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNDQ1OA==", "bodyText": "Is the cast necessary here?", "url": "https://github.com/eclipse/eclipse-collections/pull/860#discussion_r426214458", "createdAt": "2020-05-17T03:57:50Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/bag/AbstractBag.java", "diffHunk": "@@ -335,6 +351,31 @@ public int count(Predicate<? super T> predicate)\n         return target;\n     }\n \n+    @Override\n+    public <R extends MutableBooleanCollection> R flatCollectBoolean(\n+            Function<? super T, ? extends BooleanIterable> function, R target)\n+    {\n+        if (target instanceof MutableBooleanBag)\n+        {\n+            MutableBooleanBag targetBag = (MutableBooleanBag) target;\n+            this.forEachWithOccurrences((each, occurrences) -> {\n+                BooleanIterable values = function.valueOf(each);\n+                values.forEach((BooleanProcedure) value -> targetBag.addOccurrences(value, occurrences));\n+            });\n+        }\n+        else\n+        {\n+            this.forEachWithOccurrences((each, occurrences) -> {\n+                BooleanIterable value = function.valueOf(each);\n+                for (int i = 0; i < occurrences; i++)\n+                {\n+                    value.forEach((BooleanProcedure) target::add);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e679946c490ad27565c913b00c7277200a4141"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDMwMDM4OnYy", "diffSide": "RIGHT", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/collection/AbstractSynchronizedRichIterable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDowNTo1N1rOGWeFug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDowNTo1N1rOGWeFug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNDg0Mg==", "bodyText": "Minor formatting inconsistency.", "url": "https://github.com/eclipse/eclipse-collections/pull/860#discussion_r426214842", "createdAt": "2020-05-17T04:05:57Z", "author": {"login": "donraab"}, "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/collection/AbstractSynchronizedRichIterable.java", "diffHunk": "@@ -423,6 +473,17 @@ public BooleanIterable collectBoolean(BooleanFunction<? super T> booleanFunction\n         }\n     }\n \n+    @Override\n+    public <R extends MutableIntCollection> R flatCollectInt(\n+            Function<? super T, ? extends IntIterable> function,\n+            R target)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e679946c490ad27565c913b00c7277200a4141"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDMwNTA3OnYy", "diffSide": "RIGHT", "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/RichIterableTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoxNzo0MlrOGWeIDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoxNzo0MlrOGWeIDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTQzNw==", "bodyText": "Is the cast necessary?", "url": "https://github.com/eclipse/eclipse-collections/pull/860#discussion_r426215437", "createdAt": "2020-05-17T04:17:42Z", "author": {"login": "donraab"}, "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/RichIterableTestCase.java", "diffHunk": "@@ -381,6 +400,137 @@ default void RichIterable_containsAllIterable()\n         assertTrue(iterable0.containsAllIterable(Lists.immutable.empty()));\n     }\n \n+    @Test\n+    default void RichIterable_flatCollectBoolean()\n+    {\n+        RichIterable<BooleanBooleanPair> iterable = this.newWith(\n+                PrimitiveTuples.pair(true, false),\n+                PrimitiveTuples.pair(false, true));\n+\n+        BooleanArrayList target = new BooleanArrayList();\n+        iterable.flatCollectBoolean((Function<BooleanBooleanPair, BooleanIterable>) each -> BooleanArrayList.newListWith(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e679946c490ad27565c913b00c7277200a4141"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDMwNTQ2OnYy", "diffSide": "RIGHT", "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/RichIterableTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoxODo1OVrOGWeIPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoxODo1OVrOGWeIPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTQ4Ng==", "bodyText": "Use a bag instead so order doesn't matter.", "url": "https://github.com/eclipse/eclipse-collections/pull/860#discussion_r426215486", "createdAt": "2020-05-17T04:18:59Z", "author": {"login": "donraab"}, "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/RichIterableTestCase.java", "diffHunk": "@@ -381,6 +400,137 @@ default void RichIterable_containsAllIterable()\n         assertTrue(iterable0.containsAllIterable(Lists.immutable.empty()));\n     }\n \n+    @Test\n+    default void RichIterable_flatCollectBoolean()\n+    {\n+        RichIterable<BooleanBooleanPair> iterable = this.newWith(\n+                PrimitiveTuples.pair(true, false),\n+                PrimitiveTuples.pair(false, true));\n+\n+        BooleanArrayList target = new BooleanArrayList();\n+        iterable.flatCollectBoolean((Function<BooleanBooleanPair, BooleanIterable>) each -> BooleanArrayList.newListWith(\n+                each.getOne(),\n+                each.getTwo()), target);\n+\n+        assertSize(4, target);\n+        assertTrue(target.containsAll(true, false, false, true));\n+    }\n+\n+    @Test\n+    default void RichIterable_flatCollectByte()\n+    {\n+        RichIterable<ByteBytePair> iterable =\n+                this.newWith(\n+                        PrimitiveTuples.pair((byte) 1, (byte) 2),\n+                        PrimitiveTuples.pair((byte) 3, (byte) 4));\n+\n+        ByteArrayList target = new ByteArrayList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e679946c490ad27565c913b00c7277200a4141"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDMwNjY3OnYy", "diffSide": "RIGHT", "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/RichIterableTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoyMjoxNlrOGWeI4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoyMjoxNlrOGWeI4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTY0OQ==", "bodyText": "Use an equality test with the target bag, which will cover size and containsAll.", "url": "https://github.com/eclipse/eclipse-collections/pull/860#discussion_r426215649", "createdAt": "2020-05-17T04:22:16Z", "author": {"login": "donraab"}, "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/RichIterableTestCase.java", "diffHunk": "@@ -381,6 +400,137 @@ default void RichIterable_containsAllIterable()\n         assertTrue(iterable0.containsAllIterable(Lists.immutable.empty()));\n     }\n \n+    @Test\n+    default void RichIterable_flatCollectBoolean()\n+    {\n+        RichIterable<BooleanBooleanPair> iterable = this.newWith(\n+                PrimitiveTuples.pair(true, false),\n+                PrimitiveTuples.pair(false, true));\n+\n+        BooleanArrayList target = new BooleanArrayList();\n+        iterable.flatCollectBoolean((Function<BooleanBooleanPair, BooleanIterable>) each -> BooleanArrayList.newListWith(\n+                each.getOne(),\n+                each.getTwo()), target);\n+\n+        assertSize(4, target);\n+        assertTrue(target.containsAll(true, false, false, true));\n+    }\n+\n+    @Test\n+    default void RichIterable_flatCollectByte()\n+    {\n+        RichIterable<ByteBytePair> iterable =\n+                this.newWith(\n+                        PrimitiveTuples.pair((byte) 1, (byte) 2),\n+                        PrimitiveTuples.pair((byte) 3, (byte) 4));\n+\n+        ByteArrayList target = new ByteArrayList();\n+        iterable.flatCollectByte((Function<ByteBytePair, ByteIterable>) each -> ByteArrayList.newListWith(\n+                each.getOne(),\n+                each.getTwo()), target);\n+\n+        assertSize(4, target);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e679946c490ad27565c913b00c7277200a4141"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDMwNzIxOnYy", "diffSide": "RIGHT", "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/bag/BagTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoyMzoxM1rOGWeJJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoyMzoxM1rOGWeJJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTcxOA==", "bodyText": "Use a bag for the target so order doesn't matter.", "url": "https://github.com/eclipse/eclipse-collections/pull/860#discussion_r426215718", "createdAt": "2020-05-17T04:23:13Z", "author": {"login": "donraab"}, "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/bag/BagTestCase.java", "diffHunk": "@@ -42,6 +69,141 @@\n         return forEach;\n     }\n \n+    @Override\n+    default void RichIterable_flatCollectInt()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        IntArrayList target = new IntArrayList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e679946c490ad27565c913b00c7277200a4141"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDMwNzI3OnYy", "diffSide": "RIGHT", "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/bag/BagTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoyMzo0NVrOGWeJNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoyMzo0NVrOGWeJNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTczNA==", "bodyText": "Use an equality test with the target which covers size and containsAll.", "url": "https://github.com/eclipse/eclipse-collections/pull/860#discussion_r426215734", "createdAt": "2020-05-17T04:23:45Z", "author": {"login": "donraab"}, "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/bag/BagTestCase.java", "diffHunk": "@@ -42,6 +69,141 @@\n         return forEach;\n     }\n \n+    @Override\n+    default void RichIterable_flatCollectInt()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        IntArrayList target = new IntArrayList();\n+        bag.flatCollectInt((Function<Integer, IntIterable>) IntArrayList::newListWith, target);\n+        Verify.assertSize(6, target);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e679946c490ad27565c913b00c7277200a4141"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDMwNzg2OnYy", "diffSide": "RIGHT", "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/stack/StackIterableTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoyNToxMVrOGWeJgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoyNToxMVrOGWeJgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTgwOQ==", "bodyText": "Why is this using an anonymous inner class?", "url": "https://github.com/eclipse/eclipse-collections/pull/860#discussion_r426215809", "createdAt": "2020-05-17T04:25:11Z", "author": {"login": "donraab"}, "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/stack/StackIterableTestCase.java", "diffHunk": "@@ -60,6 +89,143 @@ default void InternalIterable_forEach()\n         assertEquals(this.newWith(1, 2, 2, 3, 3, 3), result);\n     }\n \n+    @Override\n+    default void RichIterable_flatCollectBoolean()\n+    {\n+        RichIterable<Twin<Boolean>> booleans = this.newWith(Tuples.twin(true, true), Tuples.twin(false, false));\n+        BooleanArrayList target = new BooleanArrayList();\n+        booleans.flatCollectBoolean(new Function<Twin<Boolean>, BooleanIterable>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e679946c490ad27565c913b00c7277200a4141"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDMwNzkxOnYy", "diffSide": "RIGHT", "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/stack/StackIterableTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoyNToyN1rOGWeJig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoyNToyN1rOGWeJig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTgxOA==", "bodyText": "Use a bag as a target so order doesn't matter.", "url": "https://github.com/eclipse/eclipse-collections/pull/860#discussion_r426215818", "createdAt": "2020-05-17T04:25:27Z", "author": {"login": "donraab"}, "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/stack/StackIterableTestCase.java", "diffHunk": "@@ -60,6 +89,143 @@ default void InternalIterable_forEach()\n         assertEquals(this.newWith(1, 2, 2, 3, 3, 3), result);\n     }\n \n+    @Override\n+    default void RichIterable_flatCollectBoolean()\n+    {\n+        RichIterable<Twin<Boolean>> booleans = this.newWith(Tuples.twin(true, true), Tuples.twin(false, false));\n+        BooleanArrayList target = new BooleanArrayList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e679946c490ad27565c913b00c7277200a4141"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDMwODE5OnYy", "diffSide": "RIGHT", "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/stack/StackIterableTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoyNTo1MFrOGWeJqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxODoyMToyNVrOGWiqoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTg0OQ==", "bodyText": "Use an equality test with the target which covers size and containsAll.", "url": "https://github.com/eclipse/eclipse-collections/pull/860#discussion_r426215849", "createdAt": "2020-05-17T04:25:50Z", "author": {"login": "donraab"}, "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/stack/StackIterableTestCase.java", "diffHunk": "@@ -60,6 +89,143 @@ default void InternalIterable_forEach()\n         assertEquals(this.newWith(1, 2, 2, 3, 3, 3), result);\n     }\n \n+    @Override\n+    default void RichIterable_flatCollectBoolean()\n+    {\n+        RichIterable<Twin<Boolean>> booleans = this.newWith(Tuples.twin(true, true), Tuples.twin(false, false));\n+        BooleanArrayList target = new BooleanArrayList();\n+        booleans.flatCollectBoolean(new Function<Twin<Boolean>, BooleanIterable>()\n+        {\n+            @Override\n+            public BooleanIterable valueOf(Twin<Boolean> each)\n+            {\n+                return BooleanArrayList.newListWith(each.getOne(), each.getTwo());\n+            }\n+        }, target);\n+        assertSize(4, target);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e679946c490ad27565c913b00c7277200a4141"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4OTgyNQ==", "bodyText": "Same pattern here as well with \"target\" and \"result\".", "url": "https://github.com/eclipse/eclipse-collections/pull/860#discussion_r426289825", "createdAt": "2020-05-17T18:21:25Z", "author": {"login": "prathasirisha"}, "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/stack/StackIterableTestCase.java", "diffHunk": "@@ -60,6 +89,143 @@ default void InternalIterable_forEach()\n         assertEquals(this.newWith(1, 2, 2, 3, 3, 3), result);\n     }\n \n+    @Override\n+    default void RichIterable_flatCollectBoolean()\n+    {\n+        RichIterable<Twin<Boolean>> booleans = this.newWith(Tuples.twin(true, true), Tuples.twin(false, false));\n+        BooleanArrayList target = new BooleanArrayList();\n+        booleans.flatCollectBoolean(new Function<Twin<Boolean>, BooleanIterable>()\n+        {\n+            @Override\n+            public BooleanIterable valueOf(Twin<Boolean> each)\n+            {\n+                return BooleanArrayList.newListWith(each.getOne(), each.getTwo());\n+            }\n+        }, target);\n+        assertSize(4, target);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTg0OQ=="}, "originalCommit": {"oid": "c1e679946c490ad27565c913b00c7277200a4141"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDg1MDM1OnYy", "diffSide": "RIGHT", "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/bag/BagTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNzo1OTo1N1rOGWijcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNzo1OTo1N1rOGWijcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4Nzk4Nw==", "bodyText": "Please use \"actual\" and \"expected\" to be consistent with the rest of the class.\nSame comment for the rest of this class.", "url": "https://github.com/eclipse/eclipse-collections/pull/860#discussion_r426287987", "createdAt": "2020-05-17T17:59:57Z", "author": {"login": "prathasirisha"}, "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/bag/BagTestCase.java", "diffHunk": "@@ -42,6 +69,141 @@\n         return forEach;\n     }\n \n+    @Override\n+    default void RichIterable_flatCollectInt()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        IntArrayList target = new IntArrayList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e679946c490ad27565c913b00c7277200a4141"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDg2MjQ5OnYy", "diffSide": "RIGHT", "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/RichIterableTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxODoxODoyMFrOGWipsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxODoxODoyMFrOGWipsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4OTU4Ng==", "bodyText": "It seems like \"target\" is the equivalent of \"expected\" in this class (see example method: RichIterable_select_reject). But the usage in here makes me believe that \"target\" is \"actual\".\nIn short,  you would want this to be \"result\" and not \"target\" to be consistent with the rest of the class.\n\"result\" -> \"actual\"\n\"target\" -> \"expected\"\ne.g. assertEquals( expected, actual)", "url": "https://github.com/eclipse/eclipse-collections/pull/860#discussion_r426289586", "createdAt": "2020-05-17T18:18:20Z", "author": {"login": "prathasirisha"}, "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/RichIterableTestCase.java", "diffHunk": "@@ -381,6 +400,137 @@ default void RichIterable_containsAllIterable()\n         assertTrue(iterable0.containsAllIterable(Lists.immutable.empty()));\n     }\n \n+    @Test\n+    default void RichIterable_flatCollectBoolean()\n+    {\n+        RichIterable<BooleanBooleanPair> iterable = this.newWith(\n+                PrimitiveTuples.pair(true, false),\n+                PrimitiveTuples.pair(false, true));\n+\n+        BooleanArrayList target = new BooleanArrayList();\n+        iterable.flatCollectBoolean((Function<BooleanBooleanPair, BooleanIterable>) each -> BooleanArrayList.newListWith(\n+                each.getOne(),\n+                each.getTwo()), target);\n+\n+        assertSize(4, target);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e679946c490ad27565c913b00c7277200a4141"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDg2Mjc3OnYy", "diffSide": "RIGHT", "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/RichIterableTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxODoxOTowMVrOGWip4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxODoxOTowMVrOGWip4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4OTYzMg==", "bodyText": "same comment as above and in the rest of this class.", "url": "https://github.com/eclipse/eclipse-collections/pull/860#discussion_r426289632", "createdAt": "2020-05-17T18:19:01Z", "author": {"login": "prathasirisha"}, "path": "unit-tests-java8/src/test/java/org/eclipse/collections/test/RichIterableTestCase.java", "diffHunk": "@@ -381,6 +400,137 @@ default void RichIterable_containsAllIterable()\n         assertTrue(iterable0.containsAllIterable(Lists.immutable.empty()));\n     }\n \n+    @Test\n+    default void RichIterable_flatCollectBoolean()\n+    {\n+        RichIterable<BooleanBooleanPair> iterable = this.newWith(\n+                PrimitiveTuples.pair(true, false),\n+                PrimitiveTuples.pair(false, true));\n+\n+        BooleanArrayList target = new BooleanArrayList();\n+        iterable.flatCollectBoolean((Function<BooleanBooleanPair, BooleanIterable>) each -> BooleanArrayList.newListWith(\n+                each.getOne(),\n+                each.getTwo()), target);\n+\n+        assertSize(4, target);\n+        assertTrue(target.containsAll(true, false, false, true));\n+    }\n+\n+    @Test\n+    default void RichIterable_flatCollectByte()\n+    {\n+        RichIterable<ByteBytePair> iterable =\n+                this.newWith(\n+                        PrimitiveTuples.pair((byte) 1, (byte) 2),\n+                        PrimitiveTuples.pair((byte) 3, (byte) 4));\n+\n+        ByteArrayList target = new ByteArrayList();\n+        iterable.flatCollectByte((Function<ByteBytePair, ByteIterable>) each -> ByteArrayList.newListWith(\n+                each.getOne(),\n+                each.getTwo()), target);\n+\n+        assertSize(4, target);\n+        assertTrue(target.containsAll((byte) 1, (byte) 2, (byte) 3, (byte) 4));\n+    }\n+\n+    @Test\n+    default void RichIterable_flatCollectShort()\n+    {\n+        RichIterable<ShortShortPair> iterable =\n+                this.newWith(\n+                        PrimitiveTuples.pair((short) 1, (short) 2),\n+                        PrimitiveTuples.pair((short) 3, (short) 4));\n+\n+        ShortArrayList target = new ShortArrayList();\n+        iterable.flatCollectShort((Function<ShortShortPair, ShortIterable>) each -> ShortArrayList.newListWith(each.getOne(), each.getTwo()), target);\n+        assertSize(4, target);\n+        assertTrue(target.containsAll((short) 1, (short) 2, (short) 3, (short) 4));\n+    }\n+\n+    @Test\n+    default void RichIterable_flatCollectInt()\n+    {\n+        RichIterable<IntIntPair> iterable =\n+                this.newWith(\n+                        PrimitiveTuples.pair(1, 2),\n+                        PrimitiveTuples.pair(3, 4));\n+\n+        IntArrayList target = new IntArrayList();\n+        iterable.flatCollectInt((Function<IntIntPair, IntIterable>) each -> IntArrayList.newListWith(\n+                each.getOne(),\n+                each.getTwo()), target);\n+\n+        assertSize(4, target);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e679946c490ad27565c913b00c7277200a4141"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3783, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}