{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxOTQyODY5", "number": 2676, "title": "Allow specifying PropagationPolicy when using deleteExisting", "bodyText": "Description\nAs the title says, this is something the API supports but kubernetes-client's generics were just not set up properly to allow crafting such a request. This updates the generics to support that use-case. Added an IT and unit test for the new functionality.\nType of change\n\n Bug fix (non-breaking change which fixes an issue)\n Feature (non-breaking change which adds functionality)\n Breaking change (fix or feature that would cause existing functionality to change\n Chore (non-breaking change which doesn't affect codebase;\ntest, version modification, documentation, etc.)\n\nChecklist\n\n Code contributed by me aligns with current project license: Apache 2.0\n I Added CHANGELOG entry regarding this change\n I have implemented unit tests to cover my changes\n I have added/updated the javadocs and other documentation accordingly\n No new bugs, code smells, etc. in SonarCloud report\n I tested my code in Kubernetes\n I tested my code in OpenShift", "createdAt": "2020-12-17T15:30:50Z", "url": "https://github.com/fabric8io/kubernetes-client/pull/2676", "merged": true, "mergeCommit": {"oid": "ac1c6048379355e00c567c496d6252b1726c5fb1"}, "closed": true, "closedAt": "2020-12-21T16:02:28Z", "author": {"login": "bbeaudreault"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnFwSagBqjQxMjU4Mzg3ODU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoU7bSgFqTU1NjMzNzgxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2553561b271da4b8f0e0a3dd53224cbbe7d3944", "author": {"user": {"login": "bbeaudreault", "name": "Bryan Beaudreault"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/c2553561b271da4b8f0e0a3dd53224cbbe7d3944", "committedDate": "2020-12-17T15:29:52Z", "message": "changelog"}, "afterCommit": {"oid": "49d2eae7dbde5f871066ed5098498a162d5d11f1", "author": {"user": {"login": "bbeaudreault", "name": "Bryan Beaudreault"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/49d2eae7dbde5f871066ed5098498a162d5d11f1", "committedDate": "2020-12-17T16:02:06Z", "message": "Make PropagationPolicy configurable when deletingExisting is configured"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0ODcxNjE4", "url": "https://github.com/fabric8io/kubernetes-client/pull/2676#pullrequestreview-554871618", "createdAt": "2020-12-17T18:23:37Z", "commit": {"oid": "63d9f26fd266db032addc26d4823746a184fff19"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODoyMzozOFrOIIC1VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODoyMzozOFrOIIC1VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwNTk0MA==", "bodyText": "I don't think this is related to my original change to support PropagationPolicy, but my new integration test caught this issue. The default grace period is 30s, so unless you explicitly specify 0 seconds (which we don't here and probably shouldn't if we could) it's possible that the DELETE call returns a 202 instead of 200, meaning it hasn't actually been deleted yet.\nBaseOperation/OperationSupport/etc assume that a non-error response means the item was deleted. This is sort of true, but not really since it may have actually been queued for asynchronous deletion (per the 202 response). I looked into whether I could pipe the response Status through as the return value of the various delete() functions, but that proved to be a significant change (and probably a breaking one, since right now we expect to return a simple Boolean).\nThe simpler fix here seems to be to add a waiting period as I did here. Alternatively we could continually retry createTask for a period of time, but this might be less impactful on API servers?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2676#discussion_r545305940", "createdAt": "2020-12-17T18:23:38Z", "author": {"login": "bbeaudreault"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/utils/DeleteAndCreateHelper.java", "diffHunk": "@@ -40,15 +50,40 @@ public T deleteAndCreate(T item) {\n     if (Boolean.FALSE.equals(deleted)) {\n       throw new KubernetesClientException(\"Failed to delete existing item:\" + item.getMetadata().getName());\n     }\n-    return createTask.apply(item);\n+    try {\n+      return createTask.apply(item);\n+    } catch (KubernetesClientException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63d9f26fd266db032addc26d4823746a184fff19"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "173ab63c4a711bfff3a3ad1f5254d366a38176f8", "author": {"user": {"login": "bbeaudreault", "name": "Bryan Beaudreault"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/173ab63c4a711bfff3a3ad1f5254d366a38176f8", "committedDate": "2020-12-17T21:12:00Z", "message": "Make PropagationPolicy configurable when deletingExisting is configured\n\nawait for deletion if the just-deleted resource still exists when trying to create"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63d9f26fd266db032addc26d4823746a184fff19", "author": {"user": {"login": "bbeaudreault", "name": "Bryan Beaudreault"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/63d9f26fd266db032addc26d4823746a184fff19", "committedDate": "2020-12-17T17:57:21Z", "message": "use foreground"}, "afterCommit": {"oid": "173ab63c4a711bfff3a3ad1f5254d366a38176f8", "author": {"user": {"login": "bbeaudreault", "name": "Bryan Beaudreault"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/173ab63c4a711bfff3a3ad1f5254d366a38176f8", "committedDate": "2020-12-17T21:12:00Z", "message": "Make PropagationPolicy configurable when deletingExisting is configured\n\nawait for deletion if the just-deleted resource still exists when trying to create"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7ae84f3cdd9bba65c0a9ec370069cbbea0b79dd", "author": {"user": {"login": "bbeaudreault", "name": "Bryan Beaudreault"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/c7ae84f3cdd9bba65c0a9ec370069cbbea0b79dd", "committedDate": "2020-12-18T12:04:01Z", "message": "Merge branch 'master' into propagation-policy-delete-existing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7903ebee2d26a83bf8481fa6a5c5a5a258eb9289", "author": {"user": {"login": "bbeaudreault", "name": "Bryan Beaudreault"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/7903ebee2d26a83bf8481fa6a5c5a5a258eb9289", "committedDate": "2020-12-18T13:06:36Z", "message": "trigger build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2703800ee7b9a7b535e79fb4195d367050074d12", "author": {"user": {"login": "bbeaudreault", "name": "Bryan Beaudreault"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/2703800ee7b9a7b535e79fb4195d367050074d12", "committedDate": "2020-12-18T23:08:05Z", "message": "fix resource test. fix DeleteAndCreateHelper so we don't fail on deleted=false, and update tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTIwNDky", "url": "https://github.com/fabric8io/kubernetes-client/pull/2676#pullrequestreview-555920492", "createdAt": "2020-12-19T06:21:00Z", "commit": {"oid": "2703800ee7b9a7b535e79fb4195d367050074d12"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwNjoyMTowMFrOII5W-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwNjoyMTowMFrOII5W-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE5OTI5MA==", "bodyText": "Is this comment still accurate?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2676#discussion_r546199290", "createdAt": "2020-12-19T06:21:00Z", "author": {"login": "metacosm"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/utils/DeleteAndCreateHelper.java", "diffHunk": "@@ -23,32 +23,75 @@\n import io.fabric8.kubernetes.client.ResourceHandler;\n import okhttp3.OkHttpClient;\n \n+import java.net.HttpURLConnection;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n import java.util.function.Function;\n import java.util.function.UnaryOperator;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n public class DeleteAndCreateHelper<T extends HasMetadata> {\n+  private static final Logger LOG = LoggerFactory.getLogger(DeleteAndCreateHelper.class);\n+\n   private final UnaryOperator<T> createTask;\n+  private final Function<T, Boolean> awaitDeleteTask;\n   private final Function<T, Boolean> deleteTask;\n \n-  public DeleteAndCreateHelper(UnaryOperator<T> createTask, Function<T, Boolean> deleteTask) {\n+  public DeleteAndCreateHelper(UnaryOperator<T> createTask, Function<T, Boolean> deleteTask, Function<T, Boolean> awaitDeleteTask) {\n     this.createTask = createTask;\n+    this.awaitDeleteTask = awaitDeleteTask;\n     this.deleteTask = deleteTask;\n   }\n \n   public T deleteAndCreate(T item) {\n     Boolean deleted = deleteTask.apply(item);\n-    if (Boolean.FALSE.equals(deleted)) {\n-      throw new KubernetesClientException(\"Failed to delete existing item:\" + item.getMetadata().getName());\n+    if (!deleted) {\n+      LOG.debug(\"did not delete because item did not exist, continuing to create {}\", item.getMetadata().getName());\n+    }\n+\n+    try {\n+      return createTask.apply(item);\n+    } catch (KubernetesClientException e) {\n+      // depending on the grace period, the object might not actually be deleted by the time we try to create\n+      // if that's the case, give it some time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2703800ee7b9a7b535e79fb4195d367050074d12"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MzA4NTkx", "url": "https://github.com/fabric8io/kubernetes-client/pull/2676#pullrequestreview-556308591", "createdAt": "2020-12-21T11:21:03Z", "commit": {"oid": "2703800ee7b9a7b535e79fb4195d367050074d12"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMToyMTowM1rOIJU9KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMToyMTowM1rOIJU9KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1MTQzMg==", "bodyText": "It would make sense to at least declare 30 as a static constant.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2676#discussion_r546651432", "createdAt": "2020-12-21T11:21:03Z", "author": {"login": "manusa"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/utils/DeleteAndCreateHelper.java", "diffHunk": "@@ -23,32 +23,75 @@\n import io.fabric8.kubernetes.client.ResourceHandler;\n import okhttp3.OkHttpClient;\n \n+import java.net.HttpURLConnection;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n import java.util.function.Function;\n import java.util.function.UnaryOperator;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n public class DeleteAndCreateHelper<T extends HasMetadata> {\n+  private static final Logger LOG = LoggerFactory.getLogger(DeleteAndCreateHelper.class);\n+\n   private final UnaryOperator<T> createTask;\n+  private final Function<T, Boolean> awaitDeleteTask;\n   private final Function<T, Boolean> deleteTask;\n \n-  public DeleteAndCreateHelper(UnaryOperator<T> createTask, Function<T, Boolean> deleteTask) {\n+  public DeleteAndCreateHelper(UnaryOperator<T> createTask, Function<T, Boolean> deleteTask, Function<T, Boolean> awaitDeleteTask) {\n     this.createTask = createTask;\n+    this.awaitDeleteTask = awaitDeleteTask;\n     this.deleteTask = deleteTask;\n   }\n \n   public T deleteAndCreate(T item) {\n     Boolean deleted = deleteTask.apply(item);\n-    if (Boolean.FALSE.equals(deleted)) {\n-      throw new KubernetesClientException(\"Failed to delete existing item:\" + item.getMetadata().getName());\n+    if (!deleted) {\n+      LOG.debug(\"did not delete because item did not exist, continuing to create {}\", item.getMetadata().getName());\n+    }\n+\n+    try {\n+      return createTask.apply(item);\n+    } catch (KubernetesClientException e) {\n+      // depending on the grace period, the object might not actually be deleted by the time we try to create\n+      // if that's the case, give it some time.\n+      if (e.getCode() == HttpURLConnection.HTTP_CONFLICT) {\n+        if (!deleted) {\n+          LOG.error(\"there was no item to delete, but received HTTP_CONFLICT response upon creation of item {}\", item.getMetadata().getName(), e);\n+          throw e;\n+        }\n+\n+        if (Boolean.FALSE.equals(awaitDeleteTask.apply(item))) {\n+          throw new KubernetesClientException(\"Timed out waiting for item to be deleted before recreating: \" + item.getMetadata().getName(), e);\n+        }\n+\n+        return createTask.apply(item);\n+      }\n+\n+      throw e;\n     }\n-    return createTask.apply(item);\n   }\n \n   public static HasMetadata deleteAndCreateItem(OkHttpClient client, Config config, HasMetadata meta, ResourceHandler<HasMetadata, HasMetadataVisitiableBuilder> h, String namespaceToUse, DeletionPropagation propagationPolicy) {\n     DeleteAndCreateHelper<HasMetadata> deleteAndCreateHelper = new DeleteAndCreateHelper<>(\n       m -> h.create(client, config, namespaceToUse, m),\n-      m -> h.delete(client, config, namespaceToUse, propagationPolicy, m)\n+      m -> h.delete(client, config, namespaceToUse, propagationPolicy, m),\n+      waitUntilDeletedOrInterrupted(client, config, h, namespaceToUse)\n     );\n \n     return deleteAndCreateHelper.deleteAndCreate(meta);\n   }\n+\n+  private static <T extends HasMetadata> Function<T, Boolean> waitUntilDeletedOrInterrupted(OkHttpClient client, Config config, ResourceHandler<HasMetadata, HasMetadataVisitiableBuilder> h, String namespaceToUse) {\n+    return m -> {\n+      try {\n+        return h.waitUntilCondition(client, config, namespaceToUse, m, Objects::isNull, 30 , TimeUnit.SECONDS) == null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2703800ee7b9a7b535e79fb4195d367050074d12"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MzA4ODQw", "url": "https://github.com/fabric8io/kubernetes-client/pull/2676#pullrequestreview-556308840", "createdAt": "2020-12-21T11:21:32Z", "commit": {"oid": "2703800ee7b9a7b535e79fb4195d367050074d12"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d3a46e9f22eddf2bb39432f7f86d2f66336f3b2", "author": {"user": {"login": "bbeaudreault", "name": "Bryan Beaudreault"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/7d3a46e9f22eddf2bb39432f7f86d2f66336f3b2", "committedDate": "2020-12-21T12:00:36Z", "message": "Make it a constant"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MzM3ODEz", "url": "https://github.com/fabric8io/kubernetes-client/pull/2676#pullrequestreview-556337813", "createdAt": "2020-12-21T12:17:13Z", "commit": {"oid": "7d3a46e9f22eddf2bb39432f7f86d2f66336f3b2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3579, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}