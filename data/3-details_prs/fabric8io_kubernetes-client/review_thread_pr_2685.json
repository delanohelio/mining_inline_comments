{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNjMzNzUy", "number": 2685, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjo1NToxMVrOFIC6SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDozMzoxNFrOFIG5Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTgwNjE2OnYy", "diffSide": "RIGHT", "path": "kubernetes-itests/src/test/java/io/fabric8/crd/PetSpec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjo1NToxMVrOIJwZ9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjo1NToxMVrOIJwZ9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwMTE3Mg==", "bodyText": "Not necessary", "url": "https://github.com/fabric8io/kubernetes-client/pull/2685#discussion_r547101172", "createdAt": "2020-12-22T06:55:11Z", "author": {"login": "manusa"}, "path": "kubernetes-itests/src/test/java/io/fabric8/crd/PetSpec.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.crd;\n+\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+\n+@JsonDeserialize(\n+  using = JsonDeserializer.None.class\n+)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28add10c644037aafb09cafc301f0a7641dad7c5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTgwNjY4OnYy", "diffSide": "RIGHT", "path": "kubernetes-itests/src/test/java/io/fabric8/crd/PetSpec.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjo1NToyOFrOIJwaQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwODo0MTozMVrOIJy9Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwMTI0OA==", "bodyText": "Don't implement KubernetesResource (unless there is a strong reason to)", "url": "https://github.com/fabric8io/kubernetes-client/pull/2685#discussion_r547101248", "createdAt": "2020-12-22T06:55:28Z", "author": {"login": "manusa"}, "path": "kubernetes-itests/src/test/java/io/fabric8/crd/PetSpec.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.crd;\n+\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+\n+@JsonDeserialize(\n+  using = JsonDeserializer.None.class\n+)\n+public class PetSpec implements KubernetesResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28add10c644037aafb09cafc301f0a7641dad7c5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzExMjM1NA==", "bodyText": "ohk, We should update our tests[0] and examples[1] too to remove this\n[0] https://github.com/fabric8io/kubernetes-client/tree/master/kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/crd\n[1] https://github.com/fabric8io/kubernetes-client/blob/master/kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/crds/DummySpec.java#L24", "url": "https://github.com/fabric8io/kubernetes-client/pull/2685#discussion_r547112354", "createdAt": "2020-12-22T07:27:24Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-itests/src/test/java/io/fabric8/crd/PetSpec.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.crd;\n+\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+\n+@JsonDeserialize(\n+  using = JsonDeserializer.None.class\n+)\n+public class PetSpec implements KubernetesResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwMTI0OA=="}, "originalCommit": {"oid": "28add10c644037aafb09cafc301f0a7641dad7c5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE0Mjk3NA==", "bodyText": "I'm dealing with the examples. Most of them are completely outdated.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2685#discussion_r547142974", "createdAt": "2020-12-22T08:41:31Z", "author": {"login": "manusa"}, "path": "kubernetes-itests/src/test/java/io/fabric8/crd/PetSpec.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.crd;\n+\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+\n+@JsonDeserialize(\n+  using = JsonDeserializer.None.class\n+)\n+public class PetSpec implements KubernetesResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwMTI0OA=="}, "originalCommit": {"oid": "28add10c644037aafb09cafc301f0a7641dad7c5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTgwNzYyOnYy", "diffSide": "RIGHT", "path": "kubernetes-itests/src/test/java/io/fabric8/crd/PetStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjo1NTo1MVrOIJwaxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjo1NTo1MVrOIJwaxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwMTM4MQ==", "bodyText": "Same as with spec, remove deserializer config and don't implement KubernetesResource", "url": "https://github.com/fabric8io/kubernetes-client/pull/2685#discussion_r547101381", "createdAt": "2020-12-22T06:55:51Z", "author": {"login": "manusa"}, "path": "kubernetes-itests/src/test/java/io/fabric8/crd/PetStatus.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.crd;\n+\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+\n+@JsonDeserialize(\n+  using = JsonDeserializer.None.class\n+)\n+public class PetStatus implements KubernetesResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28add10c644037aafb09cafc301f0a7641dad7c5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTgzMjM2OnYy", "diffSide": "RIGHT", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/TypedCustomResourceIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNzowNjoyM1rOIJwosQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNzowNjoyM1rOIJwosQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwNDk0NQ==", "bodyText": "Why don't we declare the CRD using Java instead?\nI really think we should push our users to think in Java instead of YAML.\nIt works against us to mix unnecessary YAMLs, this sends the wrong message. I've seen this in many of the open issues when users post examples of infrastructure defined in YAML resources and then pushed to k8s using our client. \"Why are they using YAML in the first place?\".\nWe should really be working our way with our own types and try to send this message: https://www.youtube.com/watch?v=QFn_H_LmMfQ\nThis point should be true for test suites too unless we're either testing serialization/deserialization, or we're actually testing the given k8s resource and we want to prepare it using YAML first (but then that should use other means of deployment aka kubectl).\nFor this case we're testing CRs, so defining the CRD using our Java API should be perfectly fine and IMO preferred.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2685#discussion_r547104945", "createdAt": "2020-12-22T07:06:23Z", "author": {"login": "manusa"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/TypedCustomResourceIT.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes;\n+\n+import io.fabric8.commons.AssumingK8sVersionAtLeast;\n+import io.fabric8.commons.ClusterEntity;\n+import io.fabric8.crd.Pet;\n+import io.fabric8.crd.PetSpec;\n+import io.fabric8.crd.PetStatus;\n+import io.fabric8.kubernetes.api.model.KubernetesResourceList;\n+import io.fabric8.kubernetes.api.model.ObjectMetaBuilder;\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.fabric8.kubernetes.client.Watch;\n+import io.fabric8.kubernetes.client.Watcher;\n+import io.fabric8.kubernetes.client.WatcherException;\n+import io.fabric8.kubernetes.client.dsl.MixedOperation;\n+import io.fabric8.kubernetes.client.dsl.Resource;\n+import org.arquillian.cube.kubernetes.api.Session;\n+import org.arquillian.cube.kubernetes.impl.requirement.RequiresKubernetes;\n+import org.arquillian.cube.requirement.ArquillianConditionalRunner;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(ArquillianConditionalRunner.class)\n+@RequiresKubernetes\n+public class TypedCustomResourceIT {\n+  @ArquillianResource\n+  KubernetesClient client;\n+\n+  @ArquillianResource\n+  Session session;\n+\n+  private String currentNamespace;\n+\n+  private MixedOperation<Pet, KubernetesResourceList<Pet>, Resource<Pet>> petClient;\n+\n+  @ClassRule\n+  public static final AssumingK8sVersionAtLeast assumingK8sVersion = new AssumingK8sVersionAtLeast(\"1\", \"16\");\n+\n+  @BeforeClass\n+  public static void init() {\n+    ClusterEntity.apply(TypedCustomResourceIT.class.getResourceAsStream(\"/pet-crd.yml\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28add10c644037aafb09cafc301f0a7641dad7c5"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTgzNDc5OnYy", "diffSide": "RIGHT", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/TypedCustomResourceIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNzowNzoyNFrOIJwqBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNzowNzoyNFrOIJwqBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwNTI4Ng==", "bodyText": "nit: We are not getting a pet from a store, we are creating a new Pet from scratch createNewPet.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2685#discussion_r547105286", "createdAt": "2020-12-22T07:07:24Z", "author": {"login": "manusa"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/TypedCustomResourceIT.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes;\n+\n+import io.fabric8.commons.AssumingK8sVersionAtLeast;\n+import io.fabric8.commons.ClusterEntity;\n+import io.fabric8.crd.Pet;\n+import io.fabric8.crd.PetSpec;\n+import io.fabric8.crd.PetStatus;\n+import io.fabric8.kubernetes.api.model.KubernetesResourceList;\n+import io.fabric8.kubernetes.api.model.ObjectMetaBuilder;\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.fabric8.kubernetes.client.Watch;\n+import io.fabric8.kubernetes.client.Watcher;\n+import io.fabric8.kubernetes.client.WatcherException;\n+import io.fabric8.kubernetes.client.dsl.MixedOperation;\n+import io.fabric8.kubernetes.client.dsl.Resource;\n+import org.arquillian.cube.kubernetes.api.Session;\n+import org.arquillian.cube.kubernetes.impl.requirement.RequiresKubernetes;\n+import org.arquillian.cube.requirement.ArquillianConditionalRunner;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(ArquillianConditionalRunner.class)\n+@RequiresKubernetes\n+public class TypedCustomResourceIT {\n+  @ArquillianResource\n+  KubernetesClient client;\n+\n+  @ArquillianResource\n+  Session session;\n+\n+  private String currentNamespace;\n+\n+  private MixedOperation<Pet, KubernetesResourceList<Pet>, Resource<Pet>> petClient;\n+\n+  @ClassRule\n+  public static final AssumingK8sVersionAtLeast assumingK8sVersion = new AssumingK8sVersionAtLeast(\"1\", \"16\");\n+\n+  @BeforeClass\n+  public static void init() {\n+    ClusterEntity.apply(TypedCustomResourceIT.class.getResourceAsStream(\"/pet-crd.yml\"));\n+  }\n+\n+  @Before\n+  public void initPetClientAndCurrentNamespace() {\n+    petClient = client.customResources(Pet.class);\n+    currentNamespace = session.getNamespace();\n+  }\n+\n+  @Test\n+  public void create() {\n+    // Given\n+    Pet pet = getNewPet(\"pet-create\", \"Dog\", null);\n+\n+    // When\n+    Pet createdPet = petClient.inNamespace(currentNamespace).create(pet);\n+\n+    // Then\n+    assertPet(createdPet, \"pet-create\", \"Dog\", null);\n+  }\n+\n+  @Test\n+  public void createOrReplace() {\n+    // Given\n+    Pet pet = getNewPet(\"pet-createorreplace\", \"Dog\", null);\n+\n+    // When\n+    Pet createdPet = petClient.inNamespace(currentNamespace).create(pet);\n+    createdPet.getSpec().setType(\"Buffalo\");\n+    Pet replacedPet = petClient.inNamespace(currentNamespace).createOrReplace(createdPet);\n+\n+    // Then\n+    assertPet(replacedPet, \"pet-createorreplace\", \"Buffalo\", null);\n+  }\n+\n+  @Test\n+  public void get() {\n+    // Given\n+    Pet pet = getNewPet(\"pet-get\", \"Cow\", null);\n+\n+    // When\n+    petClient.inNamespace(currentNamespace).create(pet);\n+    Pet petFromServer = petClient.inNamespace(currentNamespace).withName(\"pet-get\").get();\n+\n+    // Then\n+    assertPet(petFromServer, \"pet-get\", \"Cow\", null);\n+  }\n+\n+  @Test\n+  public void list() {\n+    // Given\n+    Pet pet = getNewPet(\"pet-list\", \"Parrot\", null);\n+\n+    // When\n+    petClient.inNamespace(currentNamespace).create(pet);\n+    KubernetesResourceList<Pet> petList = petClient.inNamespace(currentNamespace).list();\n+\n+    // Then\n+    assertNotNull(petList);\n+    assertNotNull(petList.getItems());\n+    assertTrue(petList.getItems().size() >= 1);\n+  }\n+\n+  @Test\n+  public void update() {\n+    // Given\n+    Pet pet = getNewPet(\"pet-update\", \"Pigeon\", null);\n+\n+    // When\n+    petClient.inNamespace(currentNamespace).create(pet);\n+    await().atMost(5, TimeUnit.SECONDS)\n+      .until(() -> petClient.inNamespace(currentNamespace).withName(\"pet-update\").get() != null);\n+    Pet updatedPet = petClient.inNamespace(currentNamespace).withName(\"pet-update\").edit(pet1 -> {\n+      pet1.getMetadata().setAnnotations(Collections.singletonMap(\"first\", \"1\"));\n+      return pet1;\n+    });\n+\n+    // Then\n+    assertPet(updatedPet, \"pet-update\", \"Pigeon\", null);\n+    assertNotNull(updatedPet.getMetadata().getAnnotations());\n+    assertEquals(1, updatedPet.getMetadata().getAnnotations().size());\n+    assertEquals(\"1\", updatedPet.getMetadata().getAnnotations().get(\"first\"));\n+  }\n+\n+  @Test\n+  public void updateStatusSubresource() {\n+    // Given\n+    Pet pet = getNewPet(\"pet-updatestatus\", \"Pigeon\", null);\n+    PetStatus petStatusToUpdate = new PetStatus();\n+    petStatusToUpdate.setCurrentStatus(\"Sleeping\");\n+\n+    // When\n+    pet = petClient.inNamespace(currentNamespace).create(pet);\n+    await().atMost(5, TimeUnit.SECONDS)\n+      .until(() -> petClient.inNamespace(currentNamespace).withName(\"pet-updatestatus\").get() != null);\n+    pet.setStatus(petStatusToUpdate);\n+    Pet updatedPet = petClient.inNamespace(currentNamespace).updateStatus(pet);\n+\n+    // Then\n+    assertPet(updatedPet, \"pet-updatestatus\", \"Pigeon\", \"Sleeping\");\n+  }\n+\n+  @Test\n+  public void watch() throws InterruptedException {\n+    // Given\n+    Pet pet = getNewPet(\"pet-watch\", \"Hamster\", null);\n+\n+    // When\n+    CountDownLatch creationEventReceived = new CountDownLatch(1);\n+    Watch petWatch = petClient.inNamespace(currentNamespace).watch(new Watcher<Pet>() {\n+      @Override\n+      public void eventReceived(Action action, Pet resource) {\n+        if (resource.getMetadata().getName().equals(\"pet-watch\")) {\n+          creationEventReceived.countDown();\n+        }\n+      }\n+\n+      @Override\n+      public void onClose(WatcherException cause) { }\n+    });\n+    petClient.inNamespace(currentNamespace).createOrReplace(pet);\n+\n+    // Then\n+    assertTrue(creationEventReceived.await(1, TimeUnit.SECONDS));\n+    petWatch.close();\n+  }\n+\n+  @Test\n+  public void delete() {\n+    // Given\n+    Pet pet = getNewPet(\"pet-delete\", \"Cow\", \"Eating\");\n+\n+    // When\n+    petClient.inNamespace(currentNamespace).create(pet);\n+    Boolean isDeleted = petClient.inNamespace(currentNamespace).withName(\"pet-delete\").delete();\n+\n+    // Then\n+    assertNotNull(isDeleted);\n+    assertTrue(isDeleted);\n+  }\n+\n+  private void assertPet(Pet pet, String name, String type, String currentStatus) {\n+    assertNotNull(pet);\n+    assertEquals(name, pet.getMetadata().getName());\n+    assertEquals(type, pet.getSpec().getType());\n+    if (currentStatus != null) {\n+      assertEquals(currentStatus, pet.getStatus().getCurrentStatus());\n+    }\n+  }\n+\n+  @AfterClass\n+  public static void cleanup() {\n+    ClusterEntity.remove(TypedCustomResourceIT.class.getResourceAsStream(\"/pet-crd.yml\"));\n+  }\n+\n+  private Pet getNewPet(String name, String type, String currentStatus) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28add10c644037aafb09cafc301f0a7641dad7c5"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDQ1OTA3OnYy", "diffSide": "RIGHT", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/TypedCustomResourceIT.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDozMzoxNFrOIJ2X4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMTowNDoyN1rOIJ3Sog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5ODk0NA==", "bodyText": "Most of the boilerplate can be skipped, see https://github.com/fabric8io/kubernetes-client/blob/22e2e6fe942b9a740812ba2d45968a31e0e045da/kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/CustomResourceV1Example.java as reference", "url": "https://github.com/fabric8io/kubernetes-client/pull/2685#discussion_r547198944", "createdAt": "2020-12-22T10:33:14Z", "author": {"login": "manusa"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/TypedCustomResourceIT.java", "diffHunk": "@@ -59,14 +62,53 @@\n \n   private String currentNamespace;\n \n+  private static final CustomResourceDefinition petCrd = new CustomResourceDefinitionBuilder()\n+    .withNewMetadata().withName(\"pets.testing.fabric8.io\").endMetadata()\n+    .withNewSpec()\n+    .withGroup(\"testing.fabric8.io\")\n+    .addNewVersion()\n+    .withName(\"v1alpha1\")\n+    .withServed(true)\n+    .withStorage(true)\n+    .withNewSubresources()\n+    .withNewStatus().endStatus()\n+    .endSubresources()\n+    .withNewSchema()\n+    .withNewOpenAPIV3Schema()\n+    .withType(\"object\")\n+    .addToProperties(Collections.singletonMap(\"spec\", new JSONSchemaPropsBuilder()\n+      .withType(\"object\")\n+      .withProperties(Collections.singletonMap(\"type\", new JSONSchemaPropsBuilder()\n+        .withType(\"string\")\n+        .build()))\n+      .build()))\n+    .addToProperties(Collections.singletonMap(\"status\", new JSONSchemaPropsBuilder()\n+      .withType(\"object\")\n+      .withProperties(Collections.singletonMap(\"currentStatus\", new JSONSchemaPropsBuilder()\n+        .withType(\"string\")\n+        .build()))\n+      .build()))\n+    .endOpenAPIV3Schema()\n+    .endSchema()\n+    .endVersion()\n+    .withScope(\"Namespaced\")\n+    .withNewNames()\n+    .withPlural(\"pets\")\n+    .withSingular(\"pet\")\n+    .withKind(\"Pet\")\n+    .withShortNames(\"pt\")\n+    .endNames()\n+    .endSpec()\n+    .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "892ffc188ac07d3eb340337e8531116d2d5404c7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNjM5NA==", "bodyText": "Umm, strange. Why is this method part of CustomResourceDefinitionContext? It doesn't seem to be related to CustomResourceDefinitionContext", "url": "https://github.com/fabric8io/kubernetes-client/pull/2685#discussion_r547206394", "createdAt": "2020-12-22T10:48:29Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/TypedCustomResourceIT.java", "diffHunk": "@@ -59,14 +62,53 @@\n \n   private String currentNamespace;\n \n+  private static final CustomResourceDefinition petCrd = new CustomResourceDefinitionBuilder()\n+    .withNewMetadata().withName(\"pets.testing.fabric8.io\").endMetadata()\n+    .withNewSpec()\n+    .withGroup(\"testing.fabric8.io\")\n+    .addNewVersion()\n+    .withName(\"v1alpha1\")\n+    .withServed(true)\n+    .withStorage(true)\n+    .withNewSubresources()\n+    .withNewStatus().endStatus()\n+    .endSubresources()\n+    .withNewSchema()\n+    .withNewOpenAPIV3Schema()\n+    .withType(\"object\")\n+    .addToProperties(Collections.singletonMap(\"spec\", new JSONSchemaPropsBuilder()\n+      .withType(\"object\")\n+      .withProperties(Collections.singletonMap(\"type\", new JSONSchemaPropsBuilder()\n+        .withType(\"string\")\n+        .build()))\n+      .build()))\n+    .addToProperties(Collections.singletonMap(\"status\", new JSONSchemaPropsBuilder()\n+      .withType(\"object\")\n+      .withProperties(Collections.singletonMap(\"currentStatus\", new JSONSchemaPropsBuilder()\n+        .withType(\"string\")\n+        .build()))\n+      .build()))\n+    .endOpenAPIV3Schema()\n+    .endSchema()\n+    .endVersion()\n+    .withScope(\"Namespaced\")\n+    .withNewNames()\n+    .withPlural(\"pets\")\n+    .withSingular(\"pet\")\n+    .withKind(\"Pet\")\n+    .withShortNames(\"pt\")\n+    .endNames()\n+    .endSpec()\n+    .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5ODk0NA=="}, "originalCommit": {"oid": "892ffc188ac07d3eb340337e8531116d2d5404c7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxMDI3OQ==", "bodyText": "It's not, this was discussed in scope #266 #2661 .\nIIRC we all agreed these methods had to live somewhere for now.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2685#discussion_r547210279", "createdAt": "2020-12-22T10:56:34Z", "author": {"login": "manusa"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/TypedCustomResourceIT.java", "diffHunk": "@@ -59,14 +62,53 @@\n \n   private String currentNamespace;\n \n+  private static final CustomResourceDefinition petCrd = new CustomResourceDefinitionBuilder()\n+    .withNewMetadata().withName(\"pets.testing.fabric8.io\").endMetadata()\n+    .withNewSpec()\n+    .withGroup(\"testing.fabric8.io\")\n+    .addNewVersion()\n+    .withName(\"v1alpha1\")\n+    .withServed(true)\n+    .withStorage(true)\n+    .withNewSubresources()\n+    .withNewStatus().endStatus()\n+    .endSubresources()\n+    .withNewSchema()\n+    .withNewOpenAPIV3Schema()\n+    .withType(\"object\")\n+    .addToProperties(Collections.singletonMap(\"spec\", new JSONSchemaPropsBuilder()\n+      .withType(\"object\")\n+      .withProperties(Collections.singletonMap(\"type\", new JSONSchemaPropsBuilder()\n+        .withType(\"string\")\n+        .build()))\n+      .build()))\n+    .addToProperties(Collections.singletonMap(\"status\", new JSONSchemaPropsBuilder()\n+      .withType(\"object\")\n+      .withProperties(Collections.singletonMap(\"currentStatus\", new JSONSchemaPropsBuilder()\n+        .withType(\"string\")\n+        .build()))\n+      .build()))\n+    .endOpenAPIV3Schema()\n+    .endSchema()\n+    .endVersion()\n+    .withScope(\"Namespaced\")\n+    .withNewNames()\n+    .withPlural(\"pets\")\n+    .withSingular(\"pet\")\n+    .withKind(\"Pet\")\n+    .withShortNames(\"pt\")\n+    .endNames()\n+    .endSpec()\n+    .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5ODk0NA=="}, "originalCommit": {"oid": "892ffc188ac07d3eb340337e8531116d2d5404c7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxMTk0MA==", "bodyText": "Maybe you linked the wrong issue... When I looked at your example, it seemed a bit weird. I thought maybe CustomResource is the right place for that method", "url": "https://github.com/fabric8io/kubernetes-client/pull/2685#discussion_r547211940", "createdAt": "2020-12-22T10:59:55Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/TypedCustomResourceIT.java", "diffHunk": "@@ -59,14 +62,53 @@\n \n   private String currentNamespace;\n \n+  private static final CustomResourceDefinition petCrd = new CustomResourceDefinitionBuilder()\n+    .withNewMetadata().withName(\"pets.testing.fabric8.io\").endMetadata()\n+    .withNewSpec()\n+    .withGroup(\"testing.fabric8.io\")\n+    .addNewVersion()\n+    .withName(\"v1alpha1\")\n+    .withServed(true)\n+    .withStorage(true)\n+    .withNewSubresources()\n+    .withNewStatus().endStatus()\n+    .endSubresources()\n+    .withNewSchema()\n+    .withNewOpenAPIV3Schema()\n+    .withType(\"object\")\n+    .addToProperties(Collections.singletonMap(\"spec\", new JSONSchemaPropsBuilder()\n+      .withType(\"object\")\n+      .withProperties(Collections.singletonMap(\"type\", new JSONSchemaPropsBuilder()\n+        .withType(\"string\")\n+        .build()))\n+      .build()))\n+    .addToProperties(Collections.singletonMap(\"status\", new JSONSchemaPropsBuilder()\n+      .withType(\"object\")\n+      .withProperties(Collections.singletonMap(\"currentStatus\", new JSONSchemaPropsBuilder()\n+        .withType(\"string\")\n+        .build()))\n+      .build()))\n+    .endOpenAPIV3Schema()\n+    .endSchema()\n+    .endVersion()\n+    .withScope(\"Namespaced\")\n+    .withNewNames()\n+    .withPlural(\"pets\")\n+    .withSingular(\"pet\")\n+    .withKind(\"Pet\")\n+    .withShortNames(\"pt\")\n+    .endNames()\n+    .endSpec()\n+    .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5ODk0NA=="}, "originalCommit": {"oid": "892ffc188ac07d3eb340337e8531116d2d5404c7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxMzk4Ng==", "bodyText": "Wrong issue indeed. I don't see CustomResource a good fit either for that, I think it might even be worse since it will add even more confusion to the CustomResource vs. CustomResourceDefinition situation.\nThe helper is used to create a CustomResourceDefinition from a CustomResource pojo. It might make sense to make it part of CustomResourceDefinition class, but of course that's a generated model, and there are (as of now) 2 of them.\nIMHO it makes sense to have these in an utils class. I'm positive CustomResourceDefinitionContext isn't a good place either.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2685#discussion_r547213986", "createdAt": "2020-12-22T11:04:27Z", "author": {"login": "manusa"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/TypedCustomResourceIT.java", "diffHunk": "@@ -59,14 +62,53 @@\n \n   private String currentNamespace;\n \n+  private static final CustomResourceDefinition petCrd = new CustomResourceDefinitionBuilder()\n+    .withNewMetadata().withName(\"pets.testing.fabric8.io\").endMetadata()\n+    .withNewSpec()\n+    .withGroup(\"testing.fabric8.io\")\n+    .addNewVersion()\n+    .withName(\"v1alpha1\")\n+    .withServed(true)\n+    .withStorage(true)\n+    .withNewSubresources()\n+    .withNewStatus().endStatus()\n+    .endSubresources()\n+    .withNewSchema()\n+    .withNewOpenAPIV3Schema()\n+    .withType(\"object\")\n+    .addToProperties(Collections.singletonMap(\"spec\", new JSONSchemaPropsBuilder()\n+      .withType(\"object\")\n+      .withProperties(Collections.singletonMap(\"type\", new JSONSchemaPropsBuilder()\n+        .withType(\"string\")\n+        .build()))\n+      .build()))\n+    .addToProperties(Collections.singletonMap(\"status\", new JSONSchemaPropsBuilder()\n+      .withType(\"object\")\n+      .withProperties(Collections.singletonMap(\"currentStatus\", new JSONSchemaPropsBuilder()\n+        .withType(\"string\")\n+        .build()))\n+      .build()))\n+    .endOpenAPIV3Schema()\n+    .endSchema()\n+    .endVersion()\n+    .withScope(\"Namespaced\")\n+    .withNewNames()\n+    .withPlural(\"pets\")\n+    .withSingular(\"pet\")\n+    .withKind(\"Pet\")\n+    .withShortNames(\"pt\")\n+    .endNames()\n+    .endSpec()\n+    .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5ODk0NA=="}, "originalCommit": {"oid": "892ffc188ac07d3eb340337e8531116d2d5404c7"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3654, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}