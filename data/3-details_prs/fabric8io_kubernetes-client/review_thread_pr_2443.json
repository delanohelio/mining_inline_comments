{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NDU4NjE3", "number": 2443, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo0OToxNFrOEeQVtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1ODoyMVrOEeQhgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTYwNDM3OnYy", "diffSide": "RIGHT", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/internal/ClusterOperationsImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo0OToxNFrOHJzs-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo0OToxNFrOHJzs-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0NjMzMQ==", "bodyText": "We should remove this mapper and either user Serialization.jsonMapper or any of the appropriate helper methods in that class.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2443#discussion_r480046331", "createdAt": "2020-08-31T10:49:14Z", "author": {"login": "manusa"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/internal/ClusterOperationsImpl.java", "diffHunk": "@@ -17,29 +17,24 @@\n package io.fabric8.kubernetes.client.dsl.internal;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n-import io.fabric8.kubernetes.client.Version;\n import io.fabric8.kubernetes.client.VersionInfo;\n import io.fabric8.kubernetes.client.Config;\n import io.fabric8.kubernetes.client.KubernetesClientException;\n import io.fabric8.kubernetes.client.dsl.base.OperationContext;\n import io.fabric8.kubernetes.client.dsl.base.OperationSupport;\n import io.fabric8.kubernetes.client.utils.URLUtils;\n-import io.fabric8.openshift.api.model.ClusterVersionList;\n import okhttp3.OkHttpClient;\n import okhttp3.Request;\n import okhttp3.Response;\n \n import java.io.IOException;\n-import java.net.HttpURLConnection;\n import java.text.ParseException;\n import java.util.HashMap;\n import java.util.Map;\n \n public class ClusterOperationsImpl extends OperationSupport {\n-  private String versionEndpoint;\n+  protected final String versionEndpoint;\n   public static final String KUBERNETES_VERSION_ENDPOINT = \"version\";\n-  public static final String OPENSHIFT_VERSION_ENDPOINT = \"version/openshift\";\n-  public static final String OPENSHIFT4_VERSION_ENDPOINT = \"apis/config.openshift.io/v1/clusterversions\";\n   public static final ObjectMapper objectMapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75ca9b007aa483c5296f4164076e0d5cf2c557f3"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTYwOTg5OnYy", "diffSide": "RIGHT", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/internal/ClusterOperationsImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1MDo0OVrOHJzwEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1MDo0OVrOHJzwEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0NzEyMA==", "bodyText": "This one can be static", "url": "https://github.com/fabric8io/kubernetes-client/pull/2443#discussion_r480047120", "createdAt": "2020-08-31T10:50:49Z", "author": {"login": "manusa"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/internal/ClusterOperationsImpl.java", "diffHunk": "@@ -50,48 +45,34 @@ public ClusterOperationsImpl(OkHttpClient client, Config config, String item) {\n   public VersionInfo fetchVersion() {\n     try {\n       Response response = handleVersionGet(versionEndpoint);\n-      // Handle Openshift 4 version case\n-      if (HttpURLConnection.HTTP_NOT_FOUND == response.code() && versionEndpoint.equals(OPENSHIFT_VERSION_ENDPOINT)) {\n-        response.close();\n-        return fetchOpenshift4Version();\n-      }\n+      Map<String, String> myMap = new HashMap<>();\n \n-      Map<String, String> myMap = objectMapper.readValue(response.body().string(), HashMap.class);\n+      if (response.body() != null) {\n+        myMap = objectMapper.readValue(response.body().string(), HashMap.class);\n+      }\n       return fetchVersionInfoFromResponse(myMap);\n     } catch(Exception e) {\n-      KubernetesClientException.launderThrowable(e);\n+      throw KubernetesClientException.launderThrowable(e);\n     }\n-    return null;\n   }\n \n-  private Response handleVersionGet(String versionEndpointToBeUsed) throws IOException {\n+  protected Response handleVersionGet(String versionEndpointToBeUsed) throws IOException {\n     Request.Builder requestBuilder = new Request.Builder()\n       .get()\n       .url(URLUtils.join(config.getMasterUrl(), versionEndpointToBeUsed));\n     return client.newCall(requestBuilder.build()).execute();\n   }\n \n-  private VersionInfo fetchOpenshift4Version() throws IOException, ParseException {\n-    Response response = handleVersionGet(OPENSHIFT4_VERSION_ENDPOINT);\n-    if (response.isSuccessful() && response.body() != null) {\n-      ClusterVersionList clusterVersionList = objectMapper.readValue(response.body().string(), ClusterVersionList.class);\n-      if (!clusterVersionList.getItems().isEmpty()) {\n-        return VersionInfo.parseVersionInfoFromClusterVersion(clusterVersionList.getItems().get(0));\n-      }\n-    }\n-    return null;\n-  }\n-\n-  private VersionInfo fetchVersionInfoFromResponse(Map<String, String> responseAsMap) throws ParseException {\n-    return new VersionInfo.Builder().withBuildDate(responseAsMap.get(VersionInfo.VERSION_KEYS.BUILD_DATE))\n-      .withGitCommit(responseAsMap.get(VersionInfo.VERSION_KEYS.GIT_COMMIT))\n-      .withGitVersion(responseAsMap.get(VersionInfo.VERSION_KEYS.GIT_VERSION))\n-      .withMajor(responseAsMap.get(VersionInfo.VERSION_KEYS.MAJOR))\n-      .withMinor(responseAsMap.get(VersionInfo.VERSION_KEYS.MINOR))\n-      .withGitTreeState(responseAsMap.get(VersionInfo.VERSION_KEYS.GIT_TREE_STATE))\n-      .withPlatform(responseAsMap.get(VersionInfo.VERSION_KEYS.PLATFORM))\n-      .withGoVersion(responseAsMap.get(VersionInfo.VERSION_KEYS.GO_VERSION))\n-      .withCompiler(responseAsMap.get(VersionInfo.VERSION_KEYS.COMPILER))\n+  protected VersionInfo fetchVersionInfoFromResponse(Map<String, String> responseAsMap) throws ParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75ca9b007aa483c5296f4164076e0d5cf2c557f3"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTYzNDU4OnYy", "diffSide": "RIGHT", "path": "openshift-client/src/main/java/io/fabric8/openshift/client/internal/OpenShiftClusterOperationsImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1ODoyMVrOHJz-1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1ODoyMVrOHJz-1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1MDkwMA==", "bodyText": "Can we make this private?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2443#discussion_r480050900", "createdAt": "2020-08-31T10:58:21Z", "author": {"login": "manusa"}, "path": "openshift-client/src/main/java/io/fabric8/openshift/client/internal/OpenShiftClusterOperationsImpl.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.openshift.client.internal;\n+\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+import io.fabric8.kubernetes.client.Config;\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.VersionInfo;\n+import io.fabric8.kubernetes.client.dsl.internal.ClusterOperationsImpl;\n+import io.fabric8.openshift.api.model.ClusterVersion;\n+import io.fabric8.openshift.api.model.ClusterVersionList;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Response;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+\n+public class OpenShiftClusterOperationsImpl extends ClusterOperationsImpl {\n+  public static final String OPENSHIFT_VERSION_ENDPOINT = \"version/openshift\";\n+  public static final String OPENSHIFT4_VERSION_ENDPOINT = \"apis/config.openshift.io/v1/clusterversions\";\n+\n+  public OpenShiftClusterOperationsImpl(OkHttpClient client, Config config, String item) {\n+    super(client, config, item);\n+  }\n+\n+  @Override\n+  public VersionInfo fetchVersion() {\n+    try {\n+      return super.fetchVersion();\n+    } catch (KubernetesClientException exception) {\n+      // Checking if exception was due to no content returned\n+      if (exception.getCause() instanceof MismatchedInputException) {\n+        try {\n+          // Handle Openshift 4 version case\n+          return fetchOpenshift4Version();\n+        } catch (Exception e) {\n+          throw KubernetesClientException.launderThrowable(e);\n+        }\n+      }\n+    }\n+\n+    return null;\n+  }\n+\n+  private VersionInfo fetchOpenshift4Version() throws IOException, ParseException {\n+    Response response = handleVersionGet(OPENSHIFT4_VERSION_ENDPOINT);\n+    if (response.isSuccessful() && response.body() != null) {\n+      ClusterVersionList clusterVersionList = objectMapper.readValue(response.body().string(), ClusterVersionList.class);\n+      if (!clusterVersionList.getItems().isEmpty()) {\n+        return parseVersionInfoFromClusterVersion(clusterVersionList.getItems().get(0));\n+      }\n+    }\n+    return null;\n+  }\n+\n+  public static VersionInfo parseVersionInfoFromClusterVersion(ClusterVersion clusterVersion) throws ParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75ca9b007aa483c5296f4164076e0d5cf2c557f3"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3682, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}