{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MTgyNTE0", "number": 2660, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNjo1MToyOVrOFE1BNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNzowMToxOVrOFE1MNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjA3Mjg2OnYy", "diffSide": "RIGHT", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/cache/Reflector.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNjo1MToyOVrOIFCKrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNzowMzowOVrOIFCcqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0OTI5NQ==", "bodyText": "Is this ever not a Executors.newSingleThreadScheduledExecutor() ?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2660#discussion_r542149295", "createdAt": "2020-12-14T06:51:29Z", "author": {"login": "manusa"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/cache/Reflector.java", "diffHunk": "@@ -48,18 +47,18 @@\n   private final AtomicBoolean isWatcherStarted;\n   private final AtomicReference<Watch> watch;\n \n-  public Reflector(Class<T> apiTypeClass, ListerWatcher<T, L> listerWatcher, Store store, OperationContext operationContext, long resyncPeriodMillis) {\n+  public Reflector(Class<T> apiTypeClass, ListerWatcher<T, L> listerWatcher, Store store, OperationContext operationContext, long resyncPeriodMillis, ScheduledExecutorService resyncExecutor) {\n     this.apiTypeClass = apiTypeClass;\n     this.listerWatcher = listerWatcher;\n     this.store = store;\n     this.operationContext = operationContext;\n     this.resyncPeriodMillis = resyncPeriodMillis;\n-    lastSyncResourceVersion = new AtomicReference<>();\n-    resyncExecutor = Executors.newSingleThreadScheduledExecutor();\n-    watcher = new ReflectorWatcher<>(store, lastSyncResourceVersion, this::startWatcher, this::reListAndSync);\n-    isActive = new AtomicBoolean(true);\n-    isWatcherStarted = new AtomicBoolean(false);\n-    watch = new AtomicReference<>(null);\n+    this.lastSyncResourceVersion = new AtomicReference<>();\n+    this.resyncExecutor = resyncExecutor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f3d9ec7da126fb5b2209607fc4974c2f0ad2421"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0OTkyOQ==", "bodyText": "Or maybe you forgot to pass the variable in Controller.java in lines 171 & 173?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2660#discussion_r542149929", "createdAt": "2020-12-14T06:53:02Z", "author": {"login": "manusa"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/cache/Reflector.java", "diffHunk": "@@ -48,18 +47,18 @@\n   private final AtomicBoolean isWatcherStarted;\n   private final AtomicReference<Watch> watch;\n \n-  public Reflector(Class<T> apiTypeClass, ListerWatcher<T, L> listerWatcher, Store store, OperationContext operationContext, long resyncPeriodMillis) {\n+  public Reflector(Class<T> apiTypeClass, ListerWatcher<T, L> listerWatcher, Store store, OperationContext operationContext, long resyncPeriodMillis, ScheduledExecutorService resyncExecutor) {\n     this.apiTypeClass = apiTypeClass;\n     this.listerWatcher = listerWatcher;\n     this.store = store;\n     this.operationContext = operationContext;\n     this.resyncPeriodMillis = resyncPeriodMillis;\n-    lastSyncResourceVersion = new AtomicReference<>();\n-    resyncExecutor = Executors.newSingleThreadScheduledExecutor();\n-    watcher = new ReflectorWatcher<>(store, lastSyncResourceVersion, this::startWatcher, this::reListAndSync);\n-    isActive = new AtomicBoolean(true);\n-    isWatcherStarted = new AtomicBoolean(false);\n-    watch = new AtomicReference<>(null);\n+    this.lastSyncResourceVersion = new AtomicReference<>();\n+    this.resyncExecutor = resyncExecutor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0OTI5NQ=="}, "originalCommit": {"oid": "6f3d9ec7da126fb5b2209607fc4974c2f0ad2421"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE1MDk2OQ==", "bodyText": "I exposed this so that I could mock this variable for testing. Do you want me to revert to old behavior?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2660#discussion_r542150969", "createdAt": "2020-12-14T06:55:47Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/cache/Reflector.java", "diffHunk": "@@ -48,18 +47,18 @@\n   private final AtomicBoolean isWatcherStarted;\n   private final AtomicReference<Watch> watch;\n \n-  public Reflector(Class<T> apiTypeClass, ListerWatcher<T, L> listerWatcher, Store store, OperationContext operationContext, long resyncPeriodMillis) {\n+  public Reflector(Class<T> apiTypeClass, ListerWatcher<T, L> listerWatcher, Store store, OperationContext operationContext, long resyncPeriodMillis, ScheduledExecutorService resyncExecutor) {\n     this.apiTypeClass = apiTypeClass;\n     this.listerWatcher = listerWatcher;\n     this.store = store;\n     this.operationContext = operationContext;\n     this.resyncPeriodMillis = resyncPeriodMillis;\n-    lastSyncResourceVersion = new AtomicReference<>();\n-    resyncExecutor = Executors.newSingleThreadScheduledExecutor();\n-    watcher = new ReflectorWatcher<>(store, lastSyncResourceVersion, this::startWatcher, this::reListAndSync);\n-    isActive = new AtomicBoolean(true);\n-    isWatcherStarted = new AtomicBoolean(false);\n-    watch = new AtomicReference<>(null);\n+    this.lastSyncResourceVersion = new AtomicReference<>();\n+    this.resyncExecutor = resyncExecutor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0OTI5NQ=="}, "originalCommit": {"oid": "6f3d9ec7da126fb5b2209607fc4974c2f0ad2421"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE1Mzg5OA==", "bodyText": "Ok, then maybe provide an extra constructor with the default value instead so we can simplify initialization in Controller method.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2660#discussion_r542153898", "createdAt": "2020-12-14T07:03:09Z", "author": {"login": "manusa"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/cache/Reflector.java", "diffHunk": "@@ -48,18 +47,18 @@\n   private final AtomicBoolean isWatcherStarted;\n   private final AtomicReference<Watch> watch;\n \n-  public Reflector(Class<T> apiTypeClass, ListerWatcher<T, L> listerWatcher, Store store, OperationContext operationContext, long resyncPeriodMillis) {\n+  public Reflector(Class<T> apiTypeClass, ListerWatcher<T, L> listerWatcher, Store store, OperationContext operationContext, long resyncPeriodMillis, ScheduledExecutorService resyncExecutor) {\n     this.apiTypeClass = apiTypeClass;\n     this.listerWatcher = listerWatcher;\n     this.store = store;\n     this.operationContext = operationContext;\n     this.resyncPeriodMillis = resyncPeriodMillis;\n-    lastSyncResourceVersion = new AtomicReference<>();\n-    resyncExecutor = Executors.newSingleThreadScheduledExecutor();\n-    watcher = new ReflectorWatcher<>(store, lastSyncResourceVersion, this::startWatcher, this::reListAndSync);\n-    isActive = new AtomicBoolean(true);\n-    isWatcherStarted = new AtomicBoolean(false);\n-    watch = new AtomicReference<>(null);\n+    this.lastSyncResourceVersion = new AtomicReference<>();\n+    this.resyncExecutor = resyncExecutor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0OTI5NQ=="}, "originalCommit": {"oid": "6f3d9ec7da126fb5b2209607fc4974c2f0ad2421"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjEwMTAxOnYy", "diffSide": "RIGHT", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/cache/Reflector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNzowMToxOVrOIFCZuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDoxNTowOVrOIFJRmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE1MzE0Nw==", "bodyText": "Given the fact that resync period is expected to be positive, maybe we should add a check+IllegalArgumentException here so that users won't remain clueless in case for some reason this class was instantiated directly (not through Controller.java)", "url": "https://github.com/fabric8io/kubernetes-client/pull/2660#discussion_r542153147", "createdAt": "2020-12-14T07:01:19Z", "author": {"login": "manusa"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/cache/Reflector.java", "diffHunk": "@@ -48,18 +47,18 @@\n   private final AtomicBoolean isWatcherStarted;\n   private final AtomicReference<Watch> watch;\n \n-  public Reflector(Class<T> apiTypeClass, ListerWatcher<T, L> listerWatcher, Store store, OperationContext operationContext, long resyncPeriodMillis) {\n+  public Reflector(Class<T> apiTypeClass, ListerWatcher<T, L> listerWatcher, Store store, OperationContext operationContext, long resyncPeriodMillis, ScheduledExecutorService resyncExecutor) {\n     this.apiTypeClass = apiTypeClass;\n     this.listerWatcher = listerWatcher;\n     this.store = store;\n     this.operationContext = operationContext;\n     this.resyncPeriodMillis = resyncPeriodMillis;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f3d9ec7da126fb5b2209607fc4974c2f0ad2421"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI2NTc1Mw==", "bodyText": "ohk, right now we were using a Default resync period of 5 seconds upon invalid resync period. But throwing IllegalArgumentException sounds better to me. Let me update", "url": "https://github.com/fabric8io/kubernetes-client/pull/2660#discussion_r542265753", "createdAt": "2020-12-14T10:15:09Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/cache/Reflector.java", "diffHunk": "@@ -48,18 +47,18 @@\n   private final AtomicBoolean isWatcherStarted;\n   private final AtomicReference<Watch> watch;\n \n-  public Reflector(Class<T> apiTypeClass, ListerWatcher<T, L> listerWatcher, Store store, OperationContext operationContext, long resyncPeriodMillis) {\n+  public Reflector(Class<T> apiTypeClass, ListerWatcher<T, L> listerWatcher, Store store, OperationContext operationContext, long resyncPeriodMillis, ScheduledExecutorService resyncExecutor) {\n     this.apiTypeClass = apiTypeClass;\n     this.listerWatcher = listerWatcher;\n     this.store = store;\n     this.operationContext = operationContext;\n     this.resyncPeriodMillis = resyncPeriodMillis;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE1MzE0Nw=="}, "originalCommit": {"oid": "6f3d9ec7da126fb5b2209607fc4974c2f0ad2421"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3630, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}