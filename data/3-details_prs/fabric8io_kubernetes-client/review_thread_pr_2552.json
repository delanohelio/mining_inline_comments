{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MDg3NTIx", "number": 2552, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNTowNzowNVrOEwmPOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjoxNzowN1rOEyMmYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzkzNTkyOnYy", "diffSide": "RIGHT", "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/utils/PodStatusUtilTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNTowNzowNVrOHmQv0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNTowNzowNVrOHmQv0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg4MjMyMg==", "bodyText": "\u2764\ufe0f so clear and legible", "url": "https://github.com/fabric8io/kubernetes-client/pull/2552#discussion_r509882322", "createdAt": "2020-10-22T05:07:05Z", "author": {"login": "manusa"}, "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/utils/PodStatusUtilTest.java", "diffHunk": "@@ -0,0 +1,360 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.fabric8.kubernetes.client.utils;\n+\n+import io.fabric8.kubernetes.api.model.ContainerStatus;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import lombok.val;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static io.fabric8.kubernetes.client.utils.PodMockUtils.condition;\n+import static io.fabric8.kubernetes.client.utils.PodMockUtils.containerState;\n+import static io.fabric8.kubernetes.client.utils.PodMockUtils.containerStateRunning;\n+import static io.fabric8.kubernetes.client.utils.PodMockUtils.containerStateTerminated;\n+import static io.fabric8.kubernetes.client.utils.PodMockUtils.containerStateWaiting;\n+import static io.fabric8.kubernetes.client.utils.PodMockUtils.containerStatus;\n+import static io.fabric8.kubernetes.client.utils.PodMockUtils.pod;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class PodStatusUtilTest {\n+\n+    private ContainerStatus runningReady = containerStatus(\n+        true,\n+        containerState(\n+            null,\n+            null,\n+            containerStateRunning()\n+        )\n+    );\n+\n+    @Test\n+    public void isRunning_should_return_true_if_pod_is_in_phase_running() {\n+        // given\n+        Pod pod = pod(\"starwars\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e55d0b197f45229b11983e1ab0c0c84607ec2eb"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDcwNjkxOnYy", "diffSide": "RIGHT", "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/utils/PodMockUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjoxNzowN1rOHoszoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDowMjoxM1rOHoz_0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzOTIwMA==", "bodyText": "Just a minor comment, Could you please add some javadocs for this class?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2552#discussion_r512439200", "createdAt": "2020-10-27T06:17:07Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/utils/PodMockUtils.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.fabric8.kubernetes.client.utils;\n+\n+import io.fabric8.kubernetes.api.model.ContainerState;\n+import io.fabric8.kubernetes.api.model.ContainerStateRunning;\n+import io.fabric8.kubernetes.api.model.ContainerStateTerminated;\n+import io.fabric8.kubernetes.api.model.ContainerStateWaiting;\n+import io.fabric8.kubernetes.api.model.ContainerStatus;\n+import io.fabric8.kubernetes.api.model.ObjectMeta;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.fabric8.kubernetes.api.model.PodCondition;\n+import io.fabric8.kubernetes.api.model.PodStatus;\n+import org.mockito.Mockito;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class PodMockUtils {\n+\n+    public static PodMockBuilder pod(String name) {\n+        return new PodMockBuilder(name);\n+    }\n+\n+    public static PodCondition condition(String type, String status) {\n+        PodCondition mock = mock(PodCondition.class);\n+        when(mock.getType())\n+                .thenReturn(type);\n+        when(mock.getStatus())\n+                .thenReturn(status);\n+        return mock;\n+    }\n+\n+    public static ContainerStatus containerStatus(ContainerState state) {\n+        return containerStatus(false, state);\n+    }\n+\n+    public static ContainerStatus containerStatus(Boolean ready, ContainerState state) {\n+        ContainerStatus mock = mock(ContainerStatus.class);\n+        when(mock.getReady())\n+                .thenReturn(ready);\n+        when(mock.getState())\n+                .thenReturn(state);\n+        return mock;\n+    }\n+\n+    public static ContainerState containerState(ContainerStateTerminated terminated, ContainerStateWaiting waiting, ContainerStateRunning running) {\n+        ContainerState mock = mock(ContainerState.class);\n+        when(mock.getTerminated())\n+                .thenReturn(terminated);\n+        when(mock.getWaiting())\n+                .thenReturn(waiting);\n+        when(mock.getRunning())\n+                .thenReturn(running);\n+        return mock;\n+    }\n+\n+    public static ContainerStateTerminated containerStateTerminated(Integer exitCode, String reason) {\n+        ContainerStateTerminated mock = mock(ContainerStateTerminated.class);\n+        when(mock.getExitCode())\n+                .thenReturn(exitCode);\n+        when(mock.getReason())\n+                .thenReturn(reason);\n+        return mock;\n+    }\n+\n+    public static ContainerStateWaiting containerStateWaiting(String reason) {\n+        ContainerStateWaiting mock = mock(ContainerStateWaiting.class);\n+        when(mock.getReason())\n+                .thenReturn(reason);\n+        return mock;\n+    }\n+\n+    public static ContainerStateRunning containerStateRunning() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e55d0b197f45229b11983e1ab0c0c84607ec2eb"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1NzAxMQ==", "bodyText": "This is a class that holds utils to create a pod mock. I added extensive javadocs.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2552#discussion_r512557011", "createdAt": "2020-10-27T10:02:13Z", "author": {"login": "adietish"}, "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/utils/PodMockUtils.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.fabric8.kubernetes.client.utils;\n+\n+import io.fabric8.kubernetes.api.model.ContainerState;\n+import io.fabric8.kubernetes.api.model.ContainerStateRunning;\n+import io.fabric8.kubernetes.api.model.ContainerStateTerminated;\n+import io.fabric8.kubernetes.api.model.ContainerStateWaiting;\n+import io.fabric8.kubernetes.api.model.ContainerStatus;\n+import io.fabric8.kubernetes.api.model.ObjectMeta;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.fabric8.kubernetes.api.model.PodCondition;\n+import io.fabric8.kubernetes.api.model.PodStatus;\n+import org.mockito.Mockito;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class PodMockUtils {\n+\n+    public static PodMockBuilder pod(String name) {\n+        return new PodMockBuilder(name);\n+    }\n+\n+    public static PodCondition condition(String type, String status) {\n+        PodCondition mock = mock(PodCondition.class);\n+        when(mock.getType())\n+                .thenReturn(type);\n+        when(mock.getStatus())\n+                .thenReturn(status);\n+        return mock;\n+    }\n+\n+    public static ContainerStatus containerStatus(ContainerState state) {\n+        return containerStatus(false, state);\n+    }\n+\n+    public static ContainerStatus containerStatus(Boolean ready, ContainerState state) {\n+        ContainerStatus mock = mock(ContainerStatus.class);\n+        when(mock.getReady())\n+                .thenReturn(ready);\n+        when(mock.getState())\n+                .thenReturn(state);\n+        return mock;\n+    }\n+\n+    public static ContainerState containerState(ContainerStateTerminated terminated, ContainerStateWaiting waiting, ContainerStateRunning running) {\n+        ContainerState mock = mock(ContainerState.class);\n+        when(mock.getTerminated())\n+                .thenReturn(terminated);\n+        when(mock.getWaiting())\n+                .thenReturn(waiting);\n+        when(mock.getRunning())\n+                .thenReturn(running);\n+        return mock;\n+    }\n+\n+    public static ContainerStateTerminated containerStateTerminated(Integer exitCode, String reason) {\n+        ContainerStateTerminated mock = mock(ContainerStateTerminated.class);\n+        when(mock.getExitCode())\n+                .thenReturn(exitCode);\n+        when(mock.getReason())\n+                .thenReturn(reason);\n+        return mock;\n+    }\n+\n+    public static ContainerStateWaiting containerStateWaiting(String reason) {\n+        ContainerStateWaiting mock = mock(ContainerStateWaiting.class);\n+        when(mock.getReason())\n+                .thenReturn(reason);\n+        return mock;\n+    }\n+\n+    public static ContainerStateRunning containerStateRunning() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzOTIwMA=="}, "originalCommit": {"oid": "3e55d0b197f45229b11983e1ab0c0c84607ec2eb"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3580, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}