{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNTc3MjY3", "number": 2584, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNjowNjo0MFrOE0Pgrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyODo0OFrOE3QHoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjE1NTM0OnYy", "diffSide": "RIGHT", "path": "kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/ListCustomResourceDefinitions.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNjowNjo0MFrOHr3PZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyMTowOFrOHweyZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTg3Ng==", "bodyText": "Please reuse this try-catch block to init your resources", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r515755876", "createdAt": "2020-11-02T06:06:40Z", "author": {"login": "manusa"}, "path": "kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/ListCustomResourceDefinitions.java", "diffHunk": "@@ -28,19 +28,20 @@\n public class ListCustomResourceDefinitions {\n   public static void main(String[] args) {\n     try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e344f76dd8da343bbcc77396d4cf447582d20214"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTkxMg==", "bodyText": "(same for the rest)", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r515755912", "createdAt": "2020-11-02T06:06:49Z", "author": {"login": "manusa"}, "path": "kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/ListCustomResourceDefinitions.java", "diffHunk": "@@ -28,19 +28,20 @@\n public class ListCustomResourceDefinitions {\n   public static void main(String[] args) {\n     try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTg3Ng=="}, "originalCommit": {"oid": "e344f76dd8da343bbcc77396d4cf447582d20214"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2MzA3MQ==", "bodyText": "@manusa Does this look good now or something else was expected?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r515763071", "createdAt": "2020-11-02T06:32:42Z", "author": {"login": "HeroicHitesh"}, "path": "kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/ListCustomResourceDefinitions.java", "diffHunk": "@@ -28,19 +28,20 @@\n public class ListCustomResourceDefinitions {\n   public static void main(String[] args) {\n     try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTg3Ng=="}, "originalCommit": {"oid": "e344f76dd8da343bbcc77396d4cf447582d20214"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2NTA1Ng==", "bodyText": "Just asking so that I can make similar changes to the rest of the files", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r515765056", "createdAt": "2020-11-02T06:39:32Z", "author": {"login": "HeroicHitesh"}, "path": "kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/ListCustomResourceDefinitions.java", "diffHunk": "@@ -28,19 +28,20 @@\n public class ListCustomResourceDefinitions {\n   public static void main(String[] args) {\n     try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTg3Ng=="}, "originalCommit": {"oid": "e344f76dd8da343bbcc77396d4cf447582d20214"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU5NzM3NA==", "bodyText": "Yes, the point is to keep a single try-catch-finally block and reduce complexity.\nIn these examples it doesn't make any sense to add those nested blocks.\nPlease also squash your commits once your changes are done, thx.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r518597374", "createdAt": "2020-11-06T08:36:52Z", "author": {"login": "manusa"}, "path": "kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/ListCustomResourceDefinitions.java", "diffHunk": "@@ -28,19 +28,20 @@\n public class ListCustomResourceDefinitions {\n   public static void main(String[] args) {\n     try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTg3Ng=="}, "originalCommit": {"oid": "e344f76dd8da343bbcc77396d4cf447582d20214"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5ODExNw==", "bodyText": "@manusa Did the required changes and squashed the commits", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520598117", "createdAt": "2020-11-10T14:21:08Z", "author": {"login": "HeroicHitesh"}, "path": "kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/ListCustomResourceDefinitions.java", "diffHunk": "@@ -28,19 +28,20 @@\n public class ListCustomResourceDefinitions {\n   public static void main(String[] args) {\n     try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTg3Ng=="}, "originalCommit": {"oid": "e344f76dd8da343bbcc77396d4cf447582d20214"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjQzOTA2OnYy", "diffSide": "RIGHT", "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwODoxMDoyOFrOHr5zxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwODo1NDo0NVrOHr7L_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5Nzk1Nw==", "bodyText": "Maybe you copied this accidentally???", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r515797957", "createdAt": "2020-11-02T08:10:28Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java", "diffHunk": "@@ -37,106 +37,244 @@\n \n   public static void main(String[] args) throws InterruptedException {\n     Config config = new ConfigBuilder().build();\n-    KubernetesClient kubernetesClient = new DefaultKubernetesClient(config);\n-    OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n-\n-    try {\n-      // Create a namespace for all our stuff\n-      Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n-      log(\"Created namespace\", client.namespaces().create(ns));\n-\n-      ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n-\n-      client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n-\n-      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"example-camel-cdi\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .addNewTag()\n-        .withName(\"latest\")\n-        .endTag()\n-        .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n-        .endSpec()\n-        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-        .done());\n-\n-      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"java-sti\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .addNewTag()\n-        .withName(\"latest\")\n-        .endTag()\n-        .withDockerImageRepository(\"fabric8/java-sti\")\n-        .endSpec()\n-        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-        .done());\n-\n-      log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"custom-build-config\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .withServiceAccount(\"fabric8\")\n-        .withNewSource()\n-        .withType(\"Git\")\n-        .withNewGit()\n-        .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n-        .endGit()\n-        .endSource()\n-        .withNewResources()\n-          .addToLimits(\"mykey\", new Quantity(\"10\"))\n-          .addToRequests(\"mykey\", new Quantity(\"10\"))\n-        .endResources()\n-        .withNewStrategy()\n-        .withType(\"Source\")\n-        .withNewSourceStrategy()\n-        .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n-        .endSourceStrategy()\n-        .endStrategy()\n-        .withNewOutput()\n-        .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n-        .endOutput()\n-        .addNewTrigger()\n-        .withType(\"GitHub\")\n-        .withNewGithub()\n-        .withSecret(\"secret101\")\n-        .endGithub()\n-        .endTrigger()\n-        .endSpec()\n-        .done());\n-\n-      Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n-        .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n-        .build());\n-      log(\"Build:\", build.getMetadata().getName());\n-\n-      client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n-        .withSecret(\"secret101\")\n-        .withType(\"github\")\n-        .trigger(new WebHookTriggerBuilder()\n+    try(KubernetesClient kubernetesClient = new DefaultKubernetesClient(config)){\n+      OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n+\n+      try {\n+        // Create a namespace for all our stuff\n+        Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n+        log(\"Created namespace\", client.namespaces().create(ns));\n+\n+        ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n+\n+        client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n+\n+        log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n+          .withNewMetadata()\n+          .withName(\"example-camel-cdi\")\n+          .endMetadata()\n+          .withNewSpec()\n+          .addNewTag()\n+          .withName(\"latest\")\n+          .endTag()\n+          .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n+          .endSpec()\n+          .withNewStatus().withDockerImageRepository(\"\").endStatus()\n+          .done());\n+\n+        log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n+          .withNewMetadata()\n+          .withName(\"java-sti\")\n+          .endMetadata()\n+          .withNewSpec()\n+          .addNewTag()\n+          .withName(\"latest\")\n+          .endTag()\n+          .withDockerImageRepository(\"fabric8/java-sti\")\n+          .endSpec()\n+          .withNewStatus().withDockerImageRepository(\"\").endStatus()\n+          .done());\n+\n+        log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n+          .withNewMetadata()\n+          .withName(\"custom-build-config\")\n+          .endMetadata()\n+          .withNewSpec()\n+          .withServiceAccount(\"fabric8\")\n+          .withNewSource()\n+          .withType(\"Git\")\n+          .withNewGit()\n+          .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n+          .endGit()\n+          .endSource()\n+          .withNewResources()\n+            .addToLimits(\"mykey\", new Quantity(\"10\"))\n+            .addToRequests(\"mykey\", new Quantity(\"10\"))\n+          .endResources()\n+          .withNewStrategy()\n+          .withType(\"Source\")\n+          .withNewSourceStrategy()\n+          .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n+          .endSourceStrategy()\n+          .endStrategy()\n+          .withNewOutput()\n+          .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n+          .endOutput()\n+          .addNewTrigger()\n+          .withType(\"GitHub\")\n+          .withNewGithub()\n           .withSecret(\"secret101\")\n+          .endGithub()\n+          .endTrigger()\n+          .endSpec()\n+          .done());\n+\n+        Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n+          .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n           .build());\n+        log(\"Build:\", build.getMetadata().getName());\n+\n+        client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n+          .withSecret(\"secret101\")\n+          .withType(\"github\")\n+          .trigger(new WebHookTriggerBuilder()\n+            .withSecret(\"secret101\")\n+            .build());\n+\n+\n+        Thread.sleep(6000);\n+\n+        log(\"Builds:\");\n+        for (Build b: client.builds().inNamespace(\"thisisatest\").list().getItems()) {\n+          log(\"\\t\\t\\t\"+b.getMetadata().getName());\n \n+          log(\"\\t\\t\\t\\t\\t Log:\");client.builds().inNamespace(\"thisisatest\").withName(b.getMetadata().getName()).watchLog(System.out);\n+        }\n \n-      Thread.sleep(6000);\n \n-      log(\"Builds:\");\n-      for (Build b: client.builds().inNamespace(\"thisisatest\").list().getItems()) {\n-        log(\"\\t\\t\\t\"+b.getMetadata().getName());\n \n-        log(\"\\t\\t\\t\\t\\t Log:\");client.builds().inNamespace(\"thisisatest\").withName(b.getMetadata().getName()).watchLog(System.out);\n+        log(\"Done.\");\n+      }finally {\n+        client.namespaces().withName(\"thisisatest\").delete();\n+        client.close();\n       }\n+  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+  * you may not use this file except in compliance with the License.\n+  * You may obtain a copy of the License at\n+  *\n+  *         http://www.apache.org/licenses/LICENSE-2.0\n+  *\n+  * Unless required by applicable law or agreed to in writing, software\n+  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d5098d0e8c9dfe8e79345c467f5db3a12b3b8a"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgwOTc2MQ==", "bodyText": "@rohanKanojia These comment lines were already there in the file. I just added a try block. What is expected now? Should I remove the commented lines?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r515809761", "createdAt": "2020-11-02T08:34:43Z", "author": {"login": "HeroicHitesh"}, "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java", "diffHunk": "@@ -37,106 +37,244 @@\n \n   public static void main(String[] args) throws InterruptedException {\n     Config config = new ConfigBuilder().build();\n-    KubernetesClient kubernetesClient = new DefaultKubernetesClient(config);\n-    OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n-\n-    try {\n-      // Create a namespace for all our stuff\n-      Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n-      log(\"Created namespace\", client.namespaces().create(ns));\n-\n-      ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n-\n-      client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n-\n-      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"example-camel-cdi\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .addNewTag()\n-        .withName(\"latest\")\n-        .endTag()\n-        .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n-        .endSpec()\n-        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-        .done());\n-\n-      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"java-sti\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .addNewTag()\n-        .withName(\"latest\")\n-        .endTag()\n-        .withDockerImageRepository(\"fabric8/java-sti\")\n-        .endSpec()\n-        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-        .done());\n-\n-      log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"custom-build-config\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .withServiceAccount(\"fabric8\")\n-        .withNewSource()\n-        .withType(\"Git\")\n-        .withNewGit()\n-        .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n-        .endGit()\n-        .endSource()\n-        .withNewResources()\n-          .addToLimits(\"mykey\", new Quantity(\"10\"))\n-          .addToRequests(\"mykey\", new Quantity(\"10\"))\n-        .endResources()\n-        .withNewStrategy()\n-        .withType(\"Source\")\n-        .withNewSourceStrategy()\n-        .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n-        .endSourceStrategy()\n-        .endStrategy()\n-        .withNewOutput()\n-        .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n-        .endOutput()\n-        .addNewTrigger()\n-        .withType(\"GitHub\")\n-        .withNewGithub()\n-        .withSecret(\"secret101\")\n-        .endGithub()\n-        .endTrigger()\n-        .endSpec()\n-        .done());\n-\n-      Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n-        .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n-        .build());\n-      log(\"Build:\", build.getMetadata().getName());\n-\n-      client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n-        .withSecret(\"secret101\")\n-        .withType(\"github\")\n-        .trigger(new WebHookTriggerBuilder()\n+    try(KubernetesClient kubernetesClient = new DefaultKubernetesClient(config)){\n+      OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n+\n+      try {\n+        // Create a namespace for all our stuff\n+        Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n+        log(\"Created namespace\", client.namespaces().create(ns));\n+\n+        ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n+\n+        client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n+\n+        log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n+          .withNewMetadata()\n+          .withName(\"example-camel-cdi\")\n+          .endMetadata()\n+          .withNewSpec()\n+          .addNewTag()\n+          .withName(\"latest\")\n+          .endTag()\n+          .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n+          .endSpec()\n+          .withNewStatus().withDockerImageRepository(\"\").endStatus()\n+          .done());\n+\n+        log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n+          .withNewMetadata()\n+          .withName(\"java-sti\")\n+          .endMetadata()\n+          .withNewSpec()\n+          .addNewTag()\n+          .withName(\"latest\")\n+          .endTag()\n+          .withDockerImageRepository(\"fabric8/java-sti\")\n+          .endSpec()\n+          .withNewStatus().withDockerImageRepository(\"\").endStatus()\n+          .done());\n+\n+        log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n+          .withNewMetadata()\n+          .withName(\"custom-build-config\")\n+          .endMetadata()\n+          .withNewSpec()\n+          .withServiceAccount(\"fabric8\")\n+          .withNewSource()\n+          .withType(\"Git\")\n+          .withNewGit()\n+          .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n+          .endGit()\n+          .endSource()\n+          .withNewResources()\n+            .addToLimits(\"mykey\", new Quantity(\"10\"))\n+            .addToRequests(\"mykey\", new Quantity(\"10\"))\n+          .endResources()\n+          .withNewStrategy()\n+          .withType(\"Source\")\n+          .withNewSourceStrategy()\n+          .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n+          .endSourceStrategy()\n+          .endStrategy()\n+          .withNewOutput()\n+          .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n+          .endOutput()\n+          .addNewTrigger()\n+          .withType(\"GitHub\")\n+          .withNewGithub()\n           .withSecret(\"secret101\")\n+          .endGithub()\n+          .endTrigger()\n+          .endSpec()\n+          .done());\n+\n+        Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n+          .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n           .build());\n+        log(\"Build:\", build.getMetadata().getName());\n+\n+        client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n+          .withSecret(\"secret101\")\n+          .withType(\"github\")\n+          .trigger(new WebHookTriggerBuilder()\n+            .withSecret(\"secret101\")\n+            .build());\n+\n+\n+        Thread.sleep(6000);\n+\n+        log(\"Builds:\");\n+        for (Build b: client.builds().inNamespace(\"thisisatest\").list().getItems()) {\n+          log(\"\\t\\t\\t\"+b.getMetadata().getName());\n \n+          log(\"\\t\\t\\t\\t\\t Log:\");client.builds().inNamespace(\"thisisatest\").withName(b.getMetadata().getName()).watchLog(System.out);\n+        }\n \n-      Thread.sleep(6000);\n \n-      log(\"Builds:\");\n-      for (Build b: client.builds().inNamespace(\"thisisatest\").list().getItems()) {\n-        log(\"\\t\\t\\t\"+b.getMetadata().getName());\n \n-        log(\"\\t\\t\\t\\t\\t Log:\");client.builds().inNamespace(\"thisisatest\").withName(b.getMetadata().getName()).watchLog(System.out);\n+        log(\"Done.\");\n+      }finally {\n+        client.namespaces().withName(\"thisisatest\").delete();\n+        client.close();\n       }\n+  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+  * you may not use this file except in compliance with the License.\n+  * You may obtain a copy of the License at\n+  *\n+  *         http://www.apache.org/licenses/LICENSE-2.0\n+  *\n+  * Unless required by applicable law or agreed to in writing, software\n+  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5Nzk1Nw=="}, "originalCommit": {"oid": "f2d5098d0e8c9dfe8e79345c467f5db3a12b3b8a"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgxNzUwNA==", "bodyText": "Are you sure about that? I don't see it in master revision:\nhttps://github.com/fabric8io/kubernetes-client/blob/master/kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r515817504", "createdAt": "2020-11-02T08:49:01Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java", "diffHunk": "@@ -37,106 +37,244 @@\n \n   public static void main(String[] args) throws InterruptedException {\n     Config config = new ConfigBuilder().build();\n-    KubernetesClient kubernetesClient = new DefaultKubernetesClient(config);\n-    OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n-\n-    try {\n-      // Create a namespace for all our stuff\n-      Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n-      log(\"Created namespace\", client.namespaces().create(ns));\n-\n-      ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n-\n-      client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n-\n-      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"example-camel-cdi\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .addNewTag()\n-        .withName(\"latest\")\n-        .endTag()\n-        .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n-        .endSpec()\n-        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-        .done());\n-\n-      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"java-sti\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .addNewTag()\n-        .withName(\"latest\")\n-        .endTag()\n-        .withDockerImageRepository(\"fabric8/java-sti\")\n-        .endSpec()\n-        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-        .done());\n-\n-      log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"custom-build-config\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .withServiceAccount(\"fabric8\")\n-        .withNewSource()\n-        .withType(\"Git\")\n-        .withNewGit()\n-        .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n-        .endGit()\n-        .endSource()\n-        .withNewResources()\n-          .addToLimits(\"mykey\", new Quantity(\"10\"))\n-          .addToRequests(\"mykey\", new Quantity(\"10\"))\n-        .endResources()\n-        .withNewStrategy()\n-        .withType(\"Source\")\n-        .withNewSourceStrategy()\n-        .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n-        .endSourceStrategy()\n-        .endStrategy()\n-        .withNewOutput()\n-        .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n-        .endOutput()\n-        .addNewTrigger()\n-        .withType(\"GitHub\")\n-        .withNewGithub()\n-        .withSecret(\"secret101\")\n-        .endGithub()\n-        .endTrigger()\n-        .endSpec()\n-        .done());\n-\n-      Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n-        .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n-        .build());\n-      log(\"Build:\", build.getMetadata().getName());\n-\n-      client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n-        .withSecret(\"secret101\")\n-        .withType(\"github\")\n-        .trigger(new WebHookTriggerBuilder()\n+    try(KubernetesClient kubernetesClient = new DefaultKubernetesClient(config)){\n+      OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n+\n+      try {\n+        // Create a namespace for all our stuff\n+        Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n+        log(\"Created namespace\", client.namespaces().create(ns));\n+\n+        ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n+\n+        client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n+\n+        log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n+          .withNewMetadata()\n+          .withName(\"example-camel-cdi\")\n+          .endMetadata()\n+          .withNewSpec()\n+          .addNewTag()\n+          .withName(\"latest\")\n+          .endTag()\n+          .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n+          .endSpec()\n+          .withNewStatus().withDockerImageRepository(\"\").endStatus()\n+          .done());\n+\n+        log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n+          .withNewMetadata()\n+          .withName(\"java-sti\")\n+          .endMetadata()\n+          .withNewSpec()\n+          .addNewTag()\n+          .withName(\"latest\")\n+          .endTag()\n+          .withDockerImageRepository(\"fabric8/java-sti\")\n+          .endSpec()\n+          .withNewStatus().withDockerImageRepository(\"\").endStatus()\n+          .done());\n+\n+        log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n+          .withNewMetadata()\n+          .withName(\"custom-build-config\")\n+          .endMetadata()\n+          .withNewSpec()\n+          .withServiceAccount(\"fabric8\")\n+          .withNewSource()\n+          .withType(\"Git\")\n+          .withNewGit()\n+          .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n+          .endGit()\n+          .endSource()\n+          .withNewResources()\n+            .addToLimits(\"mykey\", new Quantity(\"10\"))\n+            .addToRequests(\"mykey\", new Quantity(\"10\"))\n+          .endResources()\n+          .withNewStrategy()\n+          .withType(\"Source\")\n+          .withNewSourceStrategy()\n+          .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n+          .endSourceStrategy()\n+          .endStrategy()\n+          .withNewOutput()\n+          .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n+          .endOutput()\n+          .addNewTrigger()\n+          .withType(\"GitHub\")\n+          .withNewGithub()\n           .withSecret(\"secret101\")\n+          .endGithub()\n+          .endTrigger()\n+          .endSpec()\n+          .done());\n+\n+        Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n+          .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n           .build());\n+        log(\"Build:\", build.getMetadata().getName());\n+\n+        client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n+          .withSecret(\"secret101\")\n+          .withType(\"github\")\n+          .trigger(new WebHookTriggerBuilder()\n+            .withSecret(\"secret101\")\n+            .build());\n+\n+\n+        Thread.sleep(6000);\n+\n+        log(\"Builds:\");\n+        for (Build b: client.builds().inNamespace(\"thisisatest\").list().getItems()) {\n+          log(\"\\t\\t\\t\"+b.getMetadata().getName());\n \n+          log(\"\\t\\t\\t\\t\\t Log:\");client.builds().inNamespace(\"thisisatest\").withName(b.getMetadata().getName()).watchLog(System.out);\n+        }\n \n-      Thread.sleep(6000);\n \n-      log(\"Builds:\");\n-      for (Build b: client.builds().inNamespace(\"thisisatest\").list().getItems()) {\n-        log(\"\\t\\t\\t\"+b.getMetadata().getName());\n \n-        log(\"\\t\\t\\t\\t\\t Log:\");client.builds().inNamespace(\"thisisatest\").withName(b.getMetadata().getName()).watchLog(System.out);\n+        log(\"Done.\");\n+      }finally {\n+        client.namespaces().withName(\"thisisatest\").delete();\n+        client.close();\n       }\n+  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+  * you may not use this file except in compliance with the License.\n+  * You may obtain a copy of the License at\n+  *\n+  *         http://www.apache.org/licenses/LICENSE-2.0\n+  *\n+  * Unless required by applicable law or agreed to in writing, software\n+  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5Nzk1Nw=="}, "originalCommit": {"oid": "f2d5098d0e8c9dfe8e79345c467f5db3a12b3b8a"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyMDU0Mw==", "bodyText": "Sorry, I was looking at initial lines, didn't noticed repetition in later lines before commenting. I have removed those lines now.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r515820543", "createdAt": "2020-11-02T08:54:45Z", "author": {"login": "HeroicHitesh"}, "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java", "diffHunk": "@@ -37,106 +37,244 @@\n \n   public static void main(String[] args) throws InterruptedException {\n     Config config = new ConfigBuilder().build();\n-    KubernetesClient kubernetesClient = new DefaultKubernetesClient(config);\n-    OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n-\n-    try {\n-      // Create a namespace for all our stuff\n-      Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n-      log(\"Created namespace\", client.namespaces().create(ns));\n-\n-      ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n-\n-      client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n-\n-      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"example-camel-cdi\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .addNewTag()\n-        .withName(\"latest\")\n-        .endTag()\n-        .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n-        .endSpec()\n-        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-        .done());\n-\n-      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"java-sti\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .addNewTag()\n-        .withName(\"latest\")\n-        .endTag()\n-        .withDockerImageRepository(\"fabric8/java-sti\")\n-        .endSpec()\n-        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-        .done());\n-\n-      log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"custom-build-config\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .withServiceAccount(\"fabric8\")\n-        .withNewSource()\n-        .withType(\"Git\")\n-        .withNewGit()\n-        .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n-        .endGit()\n-        .endSource()\n-        .withNewResources()\n-          .addToLimits(\"mykey\", new Quantity(\"10\"))\n-          .addToRequests(\"mykey\", new Quantity(\"10\"))\n-        .endResources()\n-        .withNewStrategy()\n-        .withType(\"Source\")\n-        .withNewSourceStrategy()\n-        .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n-        .endSourceStrategy()\n-        .endStrategy()\n-        .withNewOutput()\n-        .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n-        .endOutput()\n-        .addNewTrigger()\n-        .withType(\"GitHub\")\n-        .withNewGithub()\n-        .withSecret(\"secret101\")\n-        .endGithub()\n-        .endTrigger()\n-        .endSpec()\n-        .done());\n-\n-      Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n-        .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n-        .build());\n-      log(\"Build:\", build.getMetadata().getName());\n-\n-      client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n-        .withSecret(\"secret101\")\n-        .withType(\"github\")\n-        .trigger(new WebHookTriggerBuilder()\n+    try(KubernetesClient kubernetesClient = new DefaultKubernetesClient(config)){\n+      OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n+\n+      try {\n+        // Create a namespace for all our stuff\n+        Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n+        log(\"Created namespace\", client.namespaces().create(ns));\n+\n+        ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n+\n+        client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n+\n+        log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n+          .withNewMetadata()\n+          .withName(\"example-camel-cdi\")\n+          .endMetadata()\n+          .withNewSpec()\n+          .addNewTag()\n+          .withName(\"latest\")\n+          .endTag()\n+          .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n+          .endSpec()\n+          .withNewStatus().withDockerImageRepository(\"\").endStatus()\n+          .done());\n+\n+        log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n+          .withNewMetadata()\n+          .withName(\"java-sti\")\n+          .endMetadata()\n+          .withNewSpec()\n+          .addNewTag()\n+          .withName(\"latest\")\n+          .endTag()\n+          .withDockerImageRepository(\"fabric8/java-sti\")\n+          .endSpec()\n+          .withNewStatus().withDockerImageRepository(\"\").endStatus()\n+          .done());\n+\n+        log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n+          .withNewMetadata()\n+          .withName(\"custom-build-config\")\n+          .endMetadata()\n+          .withNewSpec()\n+          .withServiceAccount(\"fabric8\")\n+          .withNewSource()\n+          .withType(\"Git\")\n+          .withNewGit()\n+          .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n+          .endGit()\n+          .endSource()\n+          .withNewResources()\n+            .addToLimits(\"mykey\", new Quantity(\"10\"))\n+            .addToRequests(\"mykey\", new Quantity(\"10\"))\n+          .endResources()\n+          .withNewStrategy()\n+          .withType(\"Source\")\n+          .withNewSourceStrategy()\n+          .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n+          .endSourceStrategy()\n+          .endStrategy()\n+          .withNewOutput()\n+          .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n+          .endOutput()\n+          .addNewTrigger()\n+          .withType(\"GitHub\")\n+          .withNewGithub()\n           .withSecret(\"secret101\")\n+          .endGithub()\n+          .endTrigger()\n+          .endSpec()\n+          .done());\n+\n+        Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n+          .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n           .build());\n+        log(\"Build:\", build.getMetadata().getName());\n+\n+        client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n+          .withSecret(\"secret101\")\n+          .withType(\"github\")\n+          .trigger(new WebHookTriggerBuilder()\n+            .withSecret(\"secret101\")\n+            .build());\n+\n+\n+        Thread.sleep(6000);\n+\n+        log(\"Builds:\");\n+        for (Build b: client.builds().inNamespace(\"thisisatest\").list().getItems()) {\n+          log(\"\\t\\t\\t\"+b.getMetadata().getName());\n \n+          log(\"\\t\\t\\t\\t\\t Log:\");client.builds().inNamespace(\"thisisatest\").withName(b.getMetadata().getName()).watchLog(System.out);\n+        }\n \n-      Thread.sleep(6000);\n \n-      log(\"Builds:\");\n-      for (Build b: client.builds().inNamespace(\"thisisatest\").list().getItems()) {\n-        log(\"\\t\\t\\t\"+b.getMetadata().getName());\n \n-        log(\"\\t\\t\\t\\t\\t Log:\");client.builds().inNamespace(\"thisisatest\").withName(b.getMetadata().getName()).watchLog(System.out);\n+        log(\"Done.\");\n+      }finally {\n+        client.namespaces().withName(\"thisisatest\").delete();\n+        client.close();\n       }\n+  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+  * you may not use this file except in compliance with the License.\n+  * You may obtain a copy of the License at\n+  *\n+  *         http://www.apache.org/licenses/LICENSE-2.0\n+  *\n+  * Unless required by applicable law or agreed to in writing, software\n+  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5Nzk1Nw=="}, "originalCommit": {"oid": "f2d5098d0e8c9dfe8e79345c467f5db3a12b3b8a"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTkwMjEwOnYy", "diffSide": "RIGHT", "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjozMDoyNVrOHwN5Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjo1OTo1N1rOHwOmNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMTMzOA==", "bodyText": "It's the same for every example.\nPlease reuse the try-catch block and remove the finally clause (if applicable) where the client is closed.\ntry (KubernetesClient kubernetesClient = new DefaultKubernetesClient(config)) {\n  OpenShiftClient ifNecessary = kubernetesClient.adapt(OpenShiftClient.class);\n  /* ... your code with no extra try-catch blocks (unless strictly necessary) ... */\n}", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520321338", "createdAt": "2020-11-10T06:30:25Z", "author": {"login": "manusa"}, "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java", "diffHunk": "@@ -37,106 +37,107 @@\n \n   public static void main(String[] args) throws InterruptedException {\n     Config config = new ConfigBuilder().build();\n-    KubernetesClient kubernetesClient = new DefaultKubernetesClient(config);\n-    OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n-\n-    try {\n-      // Create a namespace for all our stuff\n-      Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n-      log(\"Created namespace\", client.namespaces().create(ns));\n-\n-      ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n-\n-      client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n-\n-      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"example-camel-cdi\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .addNewTag()\n-        .withName(\"latest\")\n-        .endTag()\n-        .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n-        .endSpec()\n-        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-        .done());\n-\n-      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"java-sti\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .addNewTag()\n-        .withName(\"latest\")\n-        .endTag()\n-        .withDockerImageRepository(\"fabric8/java-sti\")\n-        .endSpec()\n-        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-        .done());\n-\n-      log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"custom-build-config\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .withServiceAccount(\"fabric8\")\n-        .withNewSource()\n-        .withType(\"Git\")\n-        .withNewGit()\n-        .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n-        .endGit()\n-        .endSource()\n-        .withNewResources()\n-          .addToLimits(\"mykey\", new Quantity(\"10\"))\n-          .addToRequests(\"mykey\", new Quantity(\"10\"))\n-        .endResources()\n-        .withNewStrategy()\n-        .withType(\"Source\")\n-        .withNewSourceStrategy()\n-        .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n-        .endSourceStrategy()\n-        .endStrategy()\n-        .withNewOutput()\n-        .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n-        .endOutput()\n-        .addNewTrigger()\n-        .withType(\"GitHub\")\n-        .withNewGithub()\n-        .withSecret(\"secret101\")\n-        .endGithub()\n-        .endTrigger()\n-        .endSpec()\n-        .done());\n-\n-      Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n-        .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n-        .build());\n-      log(\"Build:\", build.getMetadata().getName());\n-\n-      client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n-        .withSecret(\"secret101\")\n-        .withType(\"github\")\n-        .trigger(new WebHookTriggerBuilder()\n+    try(KubernetesClient kubernetesClient = new DefaultKubernetesClient(config)){\n+      OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n+\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49cc7223518347573d907333ac51e0c5bfaae15d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMzMDE2Ng==", "bodyText": "@manusa Sorry for not responding earlier, I have an exam today at 1 pm IST. I'll do the required changes after that exam gets over.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520330166", "createdAt": "2020-11-10T06:52:40Z", "author": {"login": "HeroicHitesh"}, "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java", "diffHunk": "@@ -37,106 +37,107 @@\n \n   public static void main(String[] args) throws InterruptedException {\n     Config config = new ConfigBuilder().build();\n-    KubernetesClient kubernetesClient = new DefaultKubernetesClient(config);\n-    OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n-\n-    try {\n-      // Create a namespace for all our stuff\n-      Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n-      log(\"Created namespace\", client.namespaces().create(ns));\n-\n-      ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n-\n-      client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n-\n-      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"example-camel-cdi\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .addNewTag()\n-        .withName(\"latest\")\n-        .endTag()\n-        .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n-        .endSpec()\n-        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-        .done());\n-\n-      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"java-sti\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .addNewTag()\n-        .withName(\"latest\")\n-        .endTag()\n-        .withDockerImageRepository(\"fabric8/java-sti\")\n-        .endSpec()\n-        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-        .done());\n-\n-      log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"custom-build-config\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .withServiceAccount(\"fabric8\")\n-        .withNewSource()\n-        .withType(\"Git\")\n-        .withNewGit()\n-        .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n-        .endGit()\n-        .endSource()\n-        .withNewResources()\n-          .addToLimits(\"mykey\", new Quantity(\"10\"))\n-          .addToRequests(\"mykey\", new Quantity(\"10\"))\n-        .endResources()\n-        .withNewStrategy()\n-        .withType(\"Source\")\n-        .withNewSourceStrategy()\n-        .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n-        .endSourceStrategy()\n-        .endStrategy()\n-        .withNewOutput()\n-        .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n-        .endOutput()\n-        .addNewTrigger()\n-        .withType(\"GitHub\")\n-        .withNewGithub()\n-        .withSecret(\"secret101\")\n-        .endGithub()\n-        .endTrigger()\n-        .endSpec()\n-        .done());\n-\n-      Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n-        .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n-        .build());\n-      log(\"Build:\", build.getMetadata().getName());\n-\n-      client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n-        .withSecret(\"secret101\")\n-        .withType(\"github\")\n-        .trigger(new WebHookTriggerBuilder()\n+    try(KubernetesClient kubernetesClient = new DefaultKubernetesClient(config)){\n+      OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n+\n+      try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMTMzOA=="}, "originalCommit": {"oid": "49cc7223518347573d907333ac51e0c5bfaae15d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMzMjg1Mg==", "bodyText": ":) take your time", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520332852", "createdAt": "2020-11-10T06:59:57Z", "author": {"login": "manusa"}, "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java", "diffHunk": "@@ -37,106 +37,107 @@\n \n   public static void main(String[] args) throws InterruptedException {\n     Config config = new ConfigBuilder().build();\n-    KubernetesClient kubernetesClient = new DefaultKubernetesClient(config);\n-    OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n-\n-    try {\n-      // Create a namespace for all our stuff\n-      Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n-      log(\"Created namespace\", client.namespaces().create(ns));\n-\n-      ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n-\n-      client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n-\n-      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"example-camel-cdi\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .addNewTag()\n-        .withName(\"latest\")\n-        .endTag()\n-        .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n-        .endSpec()\n-        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-        .done());\n-\n-      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"java-sti\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .addNewTag()\n-        .withName(\"latest\")\n-        .endTag()\n-        .withDockerImageRepository(\"fabric8/java-sti\")\n-        .endSpec()\n-        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-        .done());\n-\n-      log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"custom-build-config\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .withServiceAccount(\"fabric8\")\n-        .withNewSource()\n-        .withType(\"Git\")\n-        .withNewGit()\n-        .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n-        .endGit()\n-        .endSource()\n-        .withNewResources()\n-          .addToLimits(\"mykey\", new Quantity(\"10\"))\n-          .addToRequests(\"mykey\", new Quantity(\"10\"))\n-        .endResources()\n-        .withNewStrategy()\n-        .withType(\"Source\")\n-        .withNewSourceStrategy()\n-        .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n-        .endSourceStrategy()\n-        .endStrategy()\n-        .withNewOutput()\n-        .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n-        .endOutput()\n-        .addNewTrigger()\n-        .withType(\"GitHub\")\n-        .withNewGithub()\n-        .withSecret(\"secret101\")\n-        .endGithub()\n-        .endTrigger()\n-        .endSpec()\n-        .done());\n-\n-      Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n-        .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n-        .build());\n-      log(\"Build:\", build.getMetadata().getName());\n-\n-      client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n-        .withSecret(\"secret101\")\n-        .withType(\"github\")\n-        .trigger(new WebHookTriggerBuilder()\n+    try(KubernetesClient kubernetesClient = new DefaultKubernetesClient(config)){\n+      OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n+\n+      try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMTMzOA=="}, "originalCommit": {"oid": "49cc7223518347573d907333ac51e0c5bfaae15d"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzY5OTA3OnYy", "diffSide": "RIGHT", "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/DeploymentConfigExamples.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyNTo1N1rOHwfBfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1MDowNFrOHwoYYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk4Mw==", "bodyText": "@manusa I think finally block can be removed from here as we are closing client in try block only, but I am not sure if doing that is correct or not, so asking here.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520601983", "createdAt": "2020-11-10T14:25:57Z", "author": {"login": "HeroicHitesh"}, "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/DeploymentConfigExamples.java", "diffHunk": "@@ -94,7 +93,7 @@ public static void main(String[] args) throws InterruptedException {\n \n       log(\"Done.\");\n     }finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11e8e1c2dde0ff54ce6b3ff3d5296815860e8af"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY4MzIxMg==", "bodyText": "There is no need to explicitly close client in finally block since try with resources handles it.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520683212", "createdAt": "2020-11-10T16:09:01Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/DeploymentConfigExamples.java", "diffHunk": "@@ -94,7 +93,7 @@ public static void main(String[] args) throws InterruptedException {\n \n       log(\"Done.\");\n     }finally {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk4Mw=="}, "originalCommit": {"oid": "e11e8e1c2dde0ff54ce6b3ff3d5296815860e8af"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5MDMyMA==", "bodyText": "So, do I remove the finally block or just the line that closes the client?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520690320", "createdAt": "2020-11-10T16:18:23Z", "author": {"login": "HeroicHitesh"}, "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/DeploymentConfigExamples.java", "diffHunk": "@@ -94,7 +93,7 @@ public static void main(String[] args) throws InterruptedException {\n \n       log(\"Done.\");\n     }finally {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk4Mw=="}, "originalCommit": {"oid": "e11e8e1c2dde0ff54ce6b3ff3d5296815860e8af"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5NTM0MQ==", "bodyText": "As I already said in my previous comment, you need to remove line which closes the client. You should try to read about how try with resources work in Java", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520695341", "createdAt": "2020-11-10T16:24:58Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/DeploymentConfigExamples.java", "diffHunk": "@@ -94,7 +93,7 @@ public static void main(String[] args) throws InterruptedException {\n \n       log(\"Done.\");\n     }finally {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk4Mw=="}, "originalCommit": {"oid": "e11e8e1c2dde0ff54ce6b3ff3d5296815860e8af"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxNjEzNQ==", "bodyText": "No, actually I got your point about removing the line which closes the client, I was asking that is there any need for an empty finally block? I think we can remove that too.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520716135", "createdAt": "2020-11-10T16:53:12Z", "author": {"login": "HeroicHitesh"}, "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/DeploymentConfigExamples.java", "diffHunk": "@@ -94,7 +93,7 @@ public static void main(String[] args) throws InterruptedException {\n \n       log(\"Done.\");\n     }finally {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk4Mw=="}, "originalCommit": {"oid": "e11e8e1c2dde0ff54ce6b3ff3d5296815860e8af"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1NTI5OQ==", "bodyText": "Yes, you're right. You can go ahead and remove finally block if it's empty.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520755299", "createdAt": "2020-11-10T17:50:04Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/DeploymentConfigExamples.java", "diffHunk": "@@ -94,7 +93,7 @@ public static void main(String[] args) throws InterruptedException {\n \n       log(\"Done.\");\n     }finally {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk4Mw=="}, "originalCommit": {"oid": "e11e8e1c2dde0ff54ce6b3ff3d5296815860e8af"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzcxMjMyOnYy", "diffSide": "RIGHT", "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyODo0OFrOHwfJxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjoyODoyNVrOHwk4bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwNDEwMw==", "bodyText": "@manusa or is the issue caused because we have moved this client variable inside the try block?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520604103", "createdAt": "2020-11-10T14:28:48Z", "author": {"login": "HeroicHitesh"}, "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java", "diffHunk": "@@ -37,10 +37,8 @@\n \n   public static void main(String[] args) throws InterruptedException {\n     Config config = new ConfigBuilder().build();\n-    KubernetesClient kubernetesClient = new DefaultKubernetesClient(config);\n-    OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n-\n-    try {\n+    try(KubernetesClient kubernetesClient = new DefaultKubernetesClient(config)){\n+      OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11e8e1c2dde0ff54ce6b3ff3d5296815860e8af"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5NzcyNg==", "bodyText": "As rohan menitoned, you don't need to explicitly close the client now that it is in a try-with-resources block", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520697726", "createdAt": "2020-11-10T16:28:04Z", "author": {"login": "manusa"}, "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java", "diffHunk": "@@ -37,10 +37,8 @@\n \n   public static void main(String[] args) throws InterruptedException {\n     Config config = new ConfigBuilder().build();\n-    KubernetesClient kubernetesClient = new DefaultKubernetesClient(config);\n-    OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n-\n-    try {\n+    try(KubernetesClient kubernetesClient = new DefaultKubernetesClient(config)){\n+      OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwNDEwMw=="}, "originalCommit": {"oid": "e11e8e1c2dde0ff54ce6b3ff3d5296815860e8af"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5Nzk2NA==", "bodyText": "https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520697964", "createdAt": "2020-11-10T16:28:25Z", "author": {"login": "manusa"}, "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java", "diffHunk": "@@ -37,10 +37,8 @@\n \n   public static void main(String[] args) throws InterruptedException {\n     Config config = new ConfigBuilder().build();\n-    KubernetesClient kubernetesClient = new DefaultKubernetesClient(config);\n-    OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n-\n-    try {\n+    try(KubernetesClient kubernetesClient = new DefaultKubernetesClient(config)){\n+      OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwNDEwMw=="}, "originalCommit": {"oid": "e11e8e1c2dde0ff54ce6b3ff3d5296815860e8af"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3587, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}