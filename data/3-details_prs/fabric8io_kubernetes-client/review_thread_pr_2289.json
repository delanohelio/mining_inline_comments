{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0Nzk4ODky", "number": 2289, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDoxNToxM1rOEF9WPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDoxNToxM1rOEF9WPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjgzNDUzOnYy", "diffSide": "RIGHT", "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/RawCustomResourceOperationsImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDoxNToxM1rOGkdeFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo0NTo0NlrOGke6Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4NDc1Nw==", "bodyText": "nit, maybe use HttpUrlConnection for status codes:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                when(mockResponse.isSuccessful()).thenReturn(code < 400);\n          \n          \n            \n                when(mockResponse.isSuccessful()).thenReturn(code < HttpURLConnection.HTTP_BAD_REQUEST);", "url": "https://github.com/fabric8io/kubernetes-client/pull/2289#discussion_r440884757", "createdAt": "2020-06-16T14:15:13Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/RawCustomResourceOperationsImplTest.java", "diffHunk": "@@ -75,15 +76,42 @@ void testCreateOrReplaceUrl() throws IOException {\n     String resourceAsString = \"{\\\"metadata\\\":{\\\"name\\\":\\\"myresource\\\",\\\"namespace\\\":\\\"myns\\\"}, \\\"kind\\\":\\\"raw\\\", \\\"apiVersion\\\":\\\"v1\\\"}\";\n     ArgumentCaptor<Request> captor = ArgumentCaptor.forClass(Request.class);\n \n+    Call mockCall = mock(Call.class);\n+    Response mockErrorResponse = mockResponse(500);\n+    Response mockConflictResponse = mockResponse(409);\n+    when(mockCall.execute())\n+      .thenReturn(mockErrorResponse, mockConflictResponse, mockSuccessResponse);\n+    when(mockClient.newCall(any())).thenReturn(mockCall);\n+\n     // When\n+    try {\n+      rawCustomResourceOperations.createOrReplace(resourceAsString);\n+      fail(\"expected first call to createOrReplace to throw exception due to 500 response\");\n+    } catch (KubernetesClientException e) {\n+      assertEquals(500, e.getCode());\n+    }\n     rawCustomResourceOperations.createOrReplace(resourceAsString);\n     rawCustomResourceOperations.createOrReplace(\"myns\", resourceAsString);\n \n     // Then\n-    verify(mockClient, times(2)).newCall(captor.capture());\n-    assertEquals(2, captor.getAllValues().size());\n+    verify(mockClient, times(4)).newCall(captor.capture());\n+    assertEquals(4, captor.getAllValues().size());\n     assertEquals(\"/apis/test.fabric8.io/v1alpha1/hellos\", captor.getAllValues().get(0).url().encodedPath());\n-    assertEquals(\"/apis/test.fabric8.io/v1alpha1/namespaces/myns/hellos\", captor.getAllValues().get(1).url().encodedPath());\n+    assertEquals(\"POST\", captor.getAllValues().get(0).method());\n+    assertEquals(\"/apis/test.fabric8.io/v1alpha1/hellos\", captor.getAllValues().get(1).url().encodedPath());\n+    assertEquals(\"POST\", captor.getAllValues().get(1).method());\n+    assertEquals(\"/apis/test.fabric8.io/v1alpha1/hellos/myresource\", captor.getAllValues().get(2).url().encodedPath());\n+    assertEquals(\"PUT\", captor.getAllValues().get(2).method());\n+    assertEquals(\"/apis/test.fabric8.io/v1alpha1/namespaces/myns/hellos\", captor.getAllValues().get(3).url().encodedPath());\n+    assertEquals(\"POST\", captor.getAllValues().get(3).method());\n+  }\n+\n+  private Response mockResponse(int code) {\n+    Response mockResponse = mock(Response.class);\n+    when(mockResponse.isSuccessful()).thenReturn(code < 400);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5360e896dc773a0bdcffe892e80b376c741cabe0"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwODM1NA==", "bodyText": "Instead I updated to just build a Response object directly so we can re-use the internal isSuccessful method which does this comparison for us. I updated the other codes to use HttpURLConnection though.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2289#discussion_r440908354", "createdAt": "2020-06-16T14:45:46Z", "author": {"login": "bbeaudreault"}, "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/RawCustomResourceOperationsImplTest.java", "diffHunk": "@@ -75,15 +76,42 @@ void testCreateOrReplaceUrl() throws IOException {\n     String resourceAsString = \"{\\\"metadata\\\":{\\\"name\\\":\\\"myresource\\\",\\\"namespace\\\":\\\"myns\\\"}, \\\"kind\\\":\\\"raw\\\", \\\"apiVersion\\\":\\\"v1\\\"}\";\n     ArgumentCaptor<Request> captor = ArgumentCaptor.forClass(Request.class);\n \n+    Call mockCall = mock(Call.class);\n+    Response mockErrorResponse = mockResponse(500);\n+    Response mockConflictResponse = mockResponse(409);\n+    when(mockCall.execute())\n+      .thenReturn(mockErrorResponse, mockConflictResponse, mockSuccessResponse);\n+    when(mockClient.newCall(any())).thenReturn(mockCall);\n+\n     // When\n+    try {\n+      rawCustomResourceOperations.createOrReplace(resourceAsString);\n+      fail(\"expected first call to createOrReplace to throw exception due to 500 response\");\n+    } catch (KubernetesClientException e) {\n+      assertEquals(500, e.getCode());\n+    }\n     rawCustomResourceOperations.createOrReplace(resourceAsString);\n     rawCustomResourceOperations.createOrReplace(\"myns\", resourceAsString);\n \n     // Then\n-    verify(mockClient, times(2)).newCall(captor.capture());\n-    assertEquals(2, captor.getAllValues().size());\n+    verify(mockClient, times(4)).newCall(captor.capture());\n+    assertEquals(4, captor.getAllValues().size());\n     assertEquals(\"/apis/test.fabric8.io/v1alpha1/hellos\", captor.getAllValues().get(0).url().encodedPath());\n-    assertEquals(\"/apis/test.fabric8.io/v1alpha1/namespaces/myns/hellos\", captor.getAllValues().get(1).url().encodedPath());\n+    assertEquals(\"POST\", captor.getAllValues().get(0).method());\n+    assertEquals(\"/apis/test.fabric8.io/v1alpha1/hellos\", captor.getAllValues().get(1).url().encodedPath());\n+    assertEquals(\"POST\", captor.getAllValues().get(1).method());\n+    assertEquals(\"/apis/test.fabric8.io/v1alpha1/hellos/myresource\", captor.getAllValues().get(2).url().encodedPath());\n+    assertEquals(\"PUT\", captor.getAllValues().get(2).method());\n+    assertEquals(\"/apis/test.fabric8.io/v1alpha1/namespaces/myns/hellos\", captor.getAllValues().get(3).url().encodedPath());\n+    assertEquals(\"POST\", captor.getAllValues().get(3).method());\n+  }\n+\n+  private Response mockResponse(int code) {\n+    Response mockResponse = mock(Response.class);\n+    when(mockResponse.isSuccessful()).thenReturn(code < 400);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4NDc1Nw=="}, "originalCommit": {"oid": "5360e896dc773a0bdcffe892e80b376c741cabe0"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3745, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}