{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNzgzMzg4", "number": 2472, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1NTo1MlrOEj9RBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQyMDowNzo0N1rOFgB2Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTM5Mzk5OnYy", "diffSide": "RIGHT", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1NTo1MlrOHSnDLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTozODozNFrOHSotpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NjIwNA==", "bodyText": "No assertion for ClusterIP ?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489276204", "createdAt": "2020-09-16T08:55:52Z", "author": {"login": "dev-gaur"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwMzQ2Mw==", "bodyText": "Services of type ExternalName don't need ClusterIP, API Servers enforces the ClusterIP field to be empty when editing the 'type' field from ClusterIP to ExternalName", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489303463", "createdAt": "2020-09-16T09:38:34Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NjIwNA=="}, "originalCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQwMTAxOnYy", "diffSide": "RIGHT", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1NzozNlrOHSnHeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTo0MDowNVrOHSoxjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NzMwNg==", "bodyText": "The name is a bit misleading.. can we change it to testClusterIpServiceCreateOrReplace ?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489277306", "createdAt": "2020-09-16T08:57:36Z", "author": {"login": "dev-gaur"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");\n+    svc = client.services().inNamespace(session.getNamespace()).createOrReplace(svc);\n+\n+    // Then\n+    assertNotNull(svc);\n+    assertEquals(\"ExternalName\", svc.getSpec().getType());\n+    assertEquals(\"my.database.example.com\", svc.getSpec().getExternalName());\n+  }\n+\n+  @Test\n+  public void testClusterIPCreateOrReplace() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwNDQ2MA==", "bodyText": "Yes, I'll create a follow up PR with your suggested changes", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489304460", "createdAt": "2020-09-16T09:40:05Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");\n+    svc = client.services().inNamespace(session.getNamespace()).createOrReplace(svc);\n+\n+    // Then\n+    assertNotNull(svc);\n+    assertEquals(\"ExternalName\", svc.getSpec().getType());\n+    assertEquals(\"my.database.example.com\", svc.getSpec().getExternalName());\n+  }\n+\n+  @Test\n+  public void testClusterIPCreateOrReplace() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NzMwNg=="}, "originalCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQwMzA4OnYy", "diffSide": "RIGHT", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1ODowNVrOHSnIpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1ODowNVrOHSnIpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NzYwNg==", "bodyText": "same thing with the name", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489277606", "createdAt": "2020-09-16T08:58:05Z", "author": {"login": "dev-gaur"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");\n+    svc = client.services().inNamespace(session.getNamespace()).createOrReplace(svc);\n+\n+    // Then\n+    assertNotNull(svc);\n+    assertEquals(\"ExternalName\", svc.getSpec().getType());\n+    assertEquals(\"my.database.example.com\", svc.getSpec().getExternalName());\n+  }\n+\n+  @Test\n+  public void testClusterIPCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-clusterip-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withName(\"http\")\n+      .withProtocol(\"TCP\")\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(9376))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(9380));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"ClusterIP\", clusterIPSvc.getSpec().getType());\n+    assertEquals(9380, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testNodePortCreateOrReplace() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQwNjg1OnYy", "diffSide": "RIGHT", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1OTowNFrOHSnK-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTo0MTowM1rOHSo0Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODIwMw==", "bodyText": "We should also check for the NodePort value created.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489278203", "createdAt": "2020-09-16T08:59:04Z", "author": {"login": "dev-gaur"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");\n+    svc = client.services().inNamespace(session.getNamespace()).createOrReplace(svc);\n+\n+    // Then\n+    assertNotNull(svc);\n+    assertEquals(\"ExternalName\", svc.getSpec().getType());\n+    assertEquals(\"my.database.example.com\", svc.getSpec().getExternalName());\n+  }\n+\n+  @Test\n+  public void testClusterIPCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-clusterip-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withName(\"http\")\n+      .withProtocol(\"TCP\")\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(9376))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(9380));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"ClusterIP\", clusterIPSvc.getSpec().getType());\n+    assertEquals(9380, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testNodePortCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-nodeport-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .withType(\"NodePort\")\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(80))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(81));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"NodePort\", clusterIPSvc.getSpec().getType());\n+    assertEquals(81, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwNTA5MQ==", "bodyText": "I added this assertion to check whether what I modified in When phase is actually reflected or not. But yes, I can try doing something with NodePort too", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489305091", "createdAt": "2020-09-16T09:41:03Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");\n+    svc = client.services().inNamespace(session.getNamespace()).createOrReplace(svc);\n+\n+    // Then\n+    assertNotNull(svc);\n+    assertEquals(\"ExternalName\", svc.getSpec().getType());\n+    assertEquals(\"my.database.example.com\", svc.getSpec().getExternalName());\n+  }\n+\n+  @Test\n+  public void testClusterIPCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-clusterip-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withName(\"http\")\n+      .withProtocol(\"TCP\")\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(9376))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(9380));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"ClusterIP\", clusterIPSvc.getSpec().getType());\n+    assertEquals(9380, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testNodePortCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-nodeport-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .withType(\"NodePort\")\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(80))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(81));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"NodePort\", clusterIPSvc.getSpec().getType());\n+    assertEquals(81, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODIwMw=="}, "originalCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQwODAwOnYy", "diffSide": "RIGHT", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1OToyNVrOHSnLtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1OToyNVrOHSnLtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODM4OQ==", "bodyText": "name", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489278389", "createdAt": "2020-09-16T08:59:25Z", "author": {"login": "dev-gaur"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");\n+    svc = client.services().inNamespace(session.getNamespace()).createOrReplace(svc);\n+\n+    // Then\n+    assertNotNull(svc);\n+    assertEquals(\"ExternalName\", svc.getSpec().getType());\n+    assertEquals(\"my.database.example.com\", svc.getSpec().getExternalName());\n+  }\n+\n+  @Test\n+  public void testClusterIPCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-clusterip-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withName(\"http\")\n+      .withProtocol(\"TCP\")\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(9376))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(9380));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"ClusterIP\", clusterIPSvc.getSpec().getType());\n+    assertEquals(9380, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testNodePortCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-nodeport-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .withType(\"NodePort\")\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(80))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(81));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"NodePort\", clusterIPSvc.getSpec().getType());\n+    assertEquals(81, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testLoadBalancerCreateOrReplace() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQwOTIzOnYy", "diffSide": "RIGHT", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1OTo0MVrOHSnMaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1OTo0MVrOHSnMaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODU3MQ==", "bodyText": "name", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489278571", "createdAt": "2020-09-16T08:59:41Z", "author": {"login": "dev-gaur"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");\n+    svc = client.services().inNamespace(session.getNamespace()).createOrReplace(svc);\n+\n+    // Then\n+    assertNotNull(svc);\n+    assertEquals(\"ExternalName\", svc.getSpec().getType());\n+    assertEquals(\"my.database.example.com\", svc.getSpec().getExternalName());\n+  }\n+\n+  @Test\n+  public void testClusterIPCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-clusterip-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withName(\"http\")\n+      .withProtocol(\"TCP\")\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(9376))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(9380));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"ClusterIP\", clusterIPSvc.getSpec().getType());\n+    assertEquals(9380, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testNodePortCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-nodeport-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .withType(\"NodePort\")\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(80))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(81));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"NodePort\", clusterIPSvc.getSpec().getType());\n+    assertEquals(81, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testLoadBalancerCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-loadbalancer-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .withType(\"LoadBalancer\")\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withProtocol(\"TCP\")\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(9376))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(9380));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"LoadBalancer\", clusterIPSvc.getSpec().getType());\n+    assertEquals(9380, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testExternalNameCreateOrReplace() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MTI4OTc5OnYy", "diffSide": "RIGHT", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/internal/core/v1/ServiceOperationsImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQyMDowNzo0N1rOIt6dtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNjozODo1M1rOIuLtug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAxNDcxMA==", "bodyText": "Shouldn't the patch also work with ExternalName?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r585014710", "createdAt": "2021-03-01T20:07:47Z", "author": {"login": "jorsol"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/internal/core/v1/ServiceOperationsImpl.java", "diffHunk": "@@ -58,30 +60,21 @@ public ServiceOperationsImpl newInstance(OperationContext context) {\n \n   @Override\n   public Service replace(Service item) {\n-      try {\n-        Service old = fromServer().get();\n-        return super.replace(new ServiceBuilder(item)\n-          .editSpec()\n-          .withClusterIP(old.getSpec().getClusterIP())\n-          .endSpec()\n-          .build());\n-      } catch (Exception e) {\n-        throw KubernetesClientException.launderThrowable(forOperationType(\"replace\"), e);\n-      }\n+    return super.replace(patchClusterIpIntoServiceAndReplace(item));\n   }\n \n   @Override\n   public Service patch(Service item) {\n-      try {\n-        Service old = getMandatory();\n-        return super.patch(new ServiceBuilder(item)\n-          .editSpec()\n-          .withClusterIP(old.getSpec().getClusterIP())\n-          .endSpec()\n-          .build());\n-      } catch (Exception e) {\n-        throw KubernetesClientException.launderThrowable(forOperationType(\"patch\"), e);\n-      }\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTI5NzMzOA==", "bodyText": "I think you're right. Could you please create an issue for this?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r585297338", "createdAt": "2021-03-02T06:38:53Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/internal/core/v1/ServiceOperationsImpl.java", "diffHunk": "@@ -58,30 +60,21 @@ public ServiceOperationsImpl newInstance(OperationContext context) {\n \n   @Override\n   public Service replace(Service item) {\n-      try {\n-        Service old = fromServer().get();\n-        return super.replace(new ServiceBuilder(item)\n-          .editSpec()\n-          .withClusterIP(old.getSpec().getClusterIP())\n-          .endSpec()\n-          .build());\n-      } catch (Exception e) {\n-        throw KubernetesClientException.launderThrowable(forOperationType(\"replace\"), e);\n-      }\n+    return super.replace(patchClusterIpIntoServiceAndReplace(item));\n   }\n \n   @Override\n   public Service patch(Service item) {\n-      try {\n-        Service old = getMandatory();\n-        return super.patch(new ServiceBuilder(item)\n-          .editSpec()\n-          .withClusterIP(old.getSpec().getClusterIP())\n-          .endSpec()\n-          .build());\n-      } catch (Exception e) {\n-        throw KubernetesClientException.launderThrowable(forOperationType(\"patch\"), e);\n-      }\n+    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAxNDcxMA=="}, "originalCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3690, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}