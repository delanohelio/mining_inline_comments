{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NzMxNTc4", "number": 2234, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDowMToyMlrOD9U3xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDowMToyMlrOD9U3xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjMxNjg1OnYy", "diffSide": "RIGHT", "path": "uberjar/src/test/java/io/fabric8/kubernetes/clnt/UberJarTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDowMToyMlrOGWwMMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDowMToyMlrOGWwMMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxMTQwOQ==", "bodyText": "This method is quite dangerous as it is it, you can replace by something more deterministic (e.g. unmarshal pom.xml and access specific node):\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String getProjectVersion() throws IOException {\n          \n          \n            \n                List<String> pomLines = readPomLines();\n          \n          \n            \n                for (String line : pomLines) {\n          \n          \n            \n                  if (line.contains(\"<version>\")) {\n          \n          \n            \n                    line = line.replaceAll(\"version>\", \"\");\n          \n          \n            \n                    line = line.replaceAll(\"/\", \"\");\n          \n          \n            \n                    line = line.replaceAll(\"<\", \"\");\n          \n          \n            \n                    line = line.replaceAll(\" \", \"\");\n          \n          \n            \n                    return line;\n          \n          \n            \n                  }\n          \n          \n            \n                }\n          \n          \n            \n                return null;\n          \n          \n            \n              }\n          \n          \n            \n              private String getProjectVersion() throws Exception {\n          \n          \n            \n                final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n          \n          \n            \n                final DocumentBuilder builder = factory.newDocumentBuilder();\n          \n          \n            \n                try (final FileInputStream fis = new FileInputStream(pomFile)) {\n          \n          \n            \n                  final Document pom = builder.parse(fis);\n          \n          \n            \n                  final XPath xPath = XPathFactory.newInstance().newXPath();\n          \n          \n            \n                  return xPath.compile(\"/project/parent/version\").evaluate(pom);\n          \n          \n            \n                }\n          \n          \n            \n              }", "url": "https://github.com/fabric8io/kubernetes-client/pull/2234#discussion_r426511409", "createdAt": "2020-05-18T10:01:22Z", "author": {"login": "manusa"}, "path": "uberjar/src/test/java/io/fabric8/kubernetes/clnt/UberJarTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes.clnt;\n+\n+import org.junit.Rule;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.migrationsupport.rules.EnableRuleMigrationSupport;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@EnableRuleMigrationSupport\n+public class UberJarTest {\n+  private static final String OUTPUT_DIR = System.getProperty(\"user.dir\") + File.separator + \"target\";\n+  private static final File pomFile = new File(System.getProperty(\"user.dir\") + File.separator + \"pom.xml\");\n+  private static final String JAR_NAME_SEPARATOR = \"-\";\n+  private static final String JAR_SUFFIX = \".jar\";\n+  private static final String ARTIFACT_ID = \"kubernetes-openshift-uberjar\";\n+\n+  @Rule\n+  public TemporaryFolder folder = new TemporaryFolder();\n+\n+  @Test\n+  @DisplayName(\"UberJar should be generated and should contain necessary files\")\n+  public void testUberJar() throws IOException {\n+    // Given\n+    String projectVersion = getProjectVersion();\n+    assertNotNull(projectVersion);\n+    String uberJarFilePath = OUTPUT_DIR + File.separator + ARTIFACT_ID + JAR_NAME_SEPARATOR + projectVersion + JAR_SUFFIX;\n+\n+    // When\n+    File uberJar = new File(uberJarFilePath);\n+    File jarExtractedDir = folder.newFolder(\"extractedJar\");\n+    unzip(uberJar.getAbsolutePath(), jarExtractedDir.getAbsolutePath());\n+\n+    // Then\n+    assertTrue(uberJar.exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/builder/Builder.class\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/builder/Visitor.class\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/admission\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/apps\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/autoscaling\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/coordination\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/extensions\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/policy\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/settings\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/admissionregistration\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/authentication\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/batch\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/discovery\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/metrics\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/rbac\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/storage\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/authorization\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/client/dsl\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/client/handlers\").exists());\n+    File resourceHandlerServiceFile = getFileInDirectory(jarExtractedDir, \"META-INF/services/io.fabric8.kubernetes.client.ResourceHandler\");\n+    assertTrue(resourceHandlerServiceFile.exists());\n+    assertTrue(containsOpenShiftKubernetesResources(resourceHandlerServiceFile, null, null));\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"META-INF/services/io.fabric8.kubernetes.client.ExtensionAdapter\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"META-INF/services/io.fabric8.kubernetes.client.ServiceToURLProvider\").exists());\n+  }\n+\n+  @Test\n+  public void testUberJarVersioned() throws IOException {\n+    // Given\n+    String projectVersion = getProjectVersion();\n+    assertNotNull(projectVersion);\n+    String majorVersion = getMajorVersion(projectVersion);\n+    String minorVersion = getMinorVersion(projectVersion);\n+    String versionedJarFilePath = OUTPUT_DIR + File.separator + ARTIFACT_ID + JAR_NAME_SEPARATOR + projectVersion + JAR_NAME_SEPARATOR + \"versioned\" + JAR_SUFFIX;\n+\n+    // When\n+    File uberJarVersioned = new File(versionedJarFilePath);\n+    File jarExtractedDir = folder.newFolder(\"extractedJar\");\n+    unzip(uberJarVersioned.getAbsolutePath(), jarExtractedDir.getAbsolutePath());\n+\n+    // Then\n+    assertTrue(uberJarVersioned.exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/builder/v\" + majorVersion + \"_\" + minorVersion + \"/Builder.class\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/builder/v\" + majorVersion + \"_\" + minorVersion + \"/Visitor.class\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/v\" + majorVersion + \"_\" + minorVersion + \"/admission\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/v\" + majorVersion + \"_\" + minorVersion + \"/apps\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/v\" + majorVersion + \"_\" + minorVersion + \"/autoscaling\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/v\" + majorVersion + \"_\" + minorVersion + \"/coordination\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/v\" + majorVersion + \"_\" + minorVersion + \"/extensions\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/v\" + majorVersion + \"_\" + minorVersion + \"/policy\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/v\" + majorVersion + \"_\" + minorVersion + \"/settings\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/v\" + majorVersion + \"_\" + minorVersion + \"/admissionregistration\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/v\" + majorVersion + \"_\" + minorVersion + \"/authentication\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/v\" + majorVersion + \"_\" + minorVersion + \"/batch\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/v\" + majorVersion + \"_\" + minorVersion + \"/discovery\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/v\" + majorVersion + \"_\" + minorVersion + \"/metrics\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/v\" + majorVersion + \"_\" + minorVersion + \"/rbac\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/v\" + majorVersion + \"_\" + minorVersion + \"/storage\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/api/model/v\" + majorVersion + \"_\" + minorVersion + \"/authorization\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/clnt/v\" + majorVersion + \"_\" + minorVersion + \"/dsl\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"io/fabric8/kubernetes/clnt/v\" + majorVersion + \"_\" + minorVersion + \"/handlers\").exists());\n+    File resourceHandlerServiceFile = getFileInDirectory(jarExtractedDir, \"META-INF/services/io.fabric8.kubernetes.clnt.v\" + majorVersion + \"_\" + minorVersion + \".ResourceHandler\");\n+    assertTrue(resourceHandlerServiceFile.exists());\n+    assertTrue(containsOpenShiftKubernetesResources(resourceHandlerServiceFile, majorVersion, minorVersion));\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"META-INF/services/io.fabric8.kubernetes.clnt.v\" + majorVersion + \"_\" + minorVersion + \".ExtensionAdapter\").exists());\n+    assertTrue(getFileInDirectory(jarExtractedDir, \"META-INF/services/io.fabric8.kubernetes.clnt.v\" + majorVersion + \"_\" + minorVersion + \".ServiceToURLProvider\").exists());\n+  }\n+\n+  private boolean containsOpenShiftKubernetesResources(File resourceHandlerServiceFile, String majorVersion, String minorVersion) throws IOException {\n+    List<String> lines = Files.readAllLines(resourceHandlerServiceFile.toPath());\n+    final String deploymentConfigOpenShiftHandler = (majorVersion != null && minorVersion != null) ?\n+      \"io.fabric8.openshift.clnt.v\" + majorVersion + \"_\" + minorVersion + \".handlers.DeploymentConfigHandler\" :\n+      \"io.fabric8.openshift.client.handlers.DeploymentConfigHandler\";\n+    final String deploymentKubernetesHandler = (majorVersion != null && minorVersion != null) ?\n+      \"io.fabric8.kubernetes.clnt.v\" + majorVersion + \"_\" + minorVersion + \".handlers.apps.v1.DeploymentHandler\" :\n+      \"io.fabric8.kubernetes.client.handlers.apps.v1.DeploymentHandler\";\n+\n+    return lines.stream().anyMatch(line -> line.contains(deploymentConfigOpenShiftHandler)) &&\n+      lines.stream().anyMatch(line -> line.contains(deploymentKubernetesHandler));\n+  }\n+\n+  private String getMajorVersion(String projectVersion) {\n+    return projectVersion.split(\"\\\\.\")[0];\n+  }\n+\n+  private String getMinorVersion(String projectVersion) {\n+    String[] versionParts = projectVersion.split(\"\\\\.\");\n+    String minorPatchVersion = projectVersion.substring(versionParts[0].length() + 1);\n+    if (minorPatchVersion.contains(\"-\")) { // SNAPSHOT VERSION\n+      return minorPatchVersion.split(\"-\")[0];\n+    } else { // RELEASE VERSION\n+      return versionParts[1];\n+    }\n+  }\n+\n+  private File getFileInDirectory(File parentFile, String pathToFile) {\n+    pathToFile = pathToFile.replaceAll(\"/\", File.separator);\n+    return new File(parentFile, pathToFile);\n+  }\n+\n+  private String getProjectVersion() throws IOException {\n+    List<String> pomLines = readPomLines();\n+    for (String line : pomLines) {\n+      if (line.contains(\"<version>\")) {\n+        line = line.replaceAll(\"version>\", \"\");\n+        line = line.replaceAll(\"/\", \"\");\n+        line = line.replaceAll(\"<\", \"\");\n+        line = line.replaceAll(\" \", \"\");\n+        return line;\n+      }\n+    }\n+    return null;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80bbd0aeeb000a62cac8c39c2fae9ab29a390c21"}, "originalPosition": 175}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3731, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}