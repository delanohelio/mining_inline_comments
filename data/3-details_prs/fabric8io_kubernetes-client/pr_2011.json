{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MjQ4MDkx", "number": 2011, "title": "fix: apiVersion and kind from CRD in registration", "bodyText": "In CustomResourceOperationsImpl construction\nKubernetesDeserializer::registerCustomKind is invoked without\napiVersion and with kind set to the class name. This could lead to\nissues when deserializing custom resources, in my example:\ncom.fasterxml.jackson.databind.JsonMappingException: No resource type found for:camel.apache.org/v1alpha1#Integration\n at [Source: (String)\"{\"type\":\"DELETED\",\"object\":{\"apiVersion\":\"camel.apache.org/v1alpha1\",\"kind\":\"Integration\",\"metadata\":{\"annotations\":{\"prometheus.io/port\":\"9779\",\"prometheus.io/scrape\":\"true\",\"syndesis.io/deploy-id\":\"i-M0SZstrdU_fCuujYkqGz:2\",\"syndesis.io/deployment-version\":\"2\",\"syndesis.io/integration-id\":\"i-M0SZstrdU_fCuujYkqGz\",\"syndesis.io/integration-name\":\"t2l\"},\"creationTimestamp\":\"2020-02-19T13:14:10Z\",\"generation\":1,\"labels\":{\"syndesis.io/app\":\"syndesis\",\"syndesis.io/component\":\"integration\",\"syndesis.\"[truncated 3644 chars]; line: 1, column: 4142] (through reference chain: io.fabric8.kubernetes.api.model.WatchEvent[\"object\"])\n\tat com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:271) ~[jackson-databind-2.10.2.jar:2.10.2]\n\tat io.fabric8.kubernetes.internal.KubernetesDeserializer.deserialize(KubernetesDeserializer.java:78) ~[kubernetes-model-4.6.1.jar:4.6.1]\n\tat io.fabric8.kubernetes.internal.KubernetesDeserializer.deserialize(KubernetesDeserializer.java:33) ~[kubernetes-model-4.6.1.jar:4.6.1]\n\nBecause only \"Integration\" would be registered, whereas type lookup is\nusing apiVersion and `kind.\nThis changes that to specify the apiVersion and kind based on the\ndefinition given in the CustomResource.", "createdAt": "2020-02-19T16:08:57Z", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011", "merged": true, "mergeCommit": {"oid": "dd69b7f1a0b941fa368899f138ac5263880357ae"}, "closed": true, "closedAt": "2020-02-22T08:31:58Z", "author": {"login": "zregvart"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcF5JVIgFqTM2MTI0MTE4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGHyU6AFqTM2MTc1MTExMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjQxMTg4", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011#pullrequestreview-361241188", "createdAt": "2020-02-19T16:30:29Z", "commit": {"oid": "8cc843ee42270d2b99fe3b1a025f689ced613032"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNjQ0ODU5", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011#pullrequestreview-361644859", "createdAt": "2020-02-20T05:42:59Z", "commit": {"oid": "8cc843ee42270d2b99fe3b1a025f689ced613032"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNjU4NzU5", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011#pullrequestreview-361658759", "createdAt": "2020-02-20T06:29:19Z", "commit": {"oid": "8cc843ee42270d2b99fe3b1a025f689ced613032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjoyOToxOVrOFsHNdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjoyOToxOVrOFsHNdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc5OTc5OA==", "bodyText": "I'd probably add an assertion validation the content of a field in order to verify deserialization worked.\n(e.g. assertThat(((MyCustomResource)resource).getApiVersion(), equalTo(\"custom.group/v1alpha1\")))", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011#discussion_r381799798", "createdAt": "2020-02-20T06:29:19Z", "author": {"login": "manusa"}, "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes.client.dsl.internal;\n+\n+import java.io.IOException;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinitionBuilder;\n+import io.fabric8.kubernetes.client.CustomResource;\n+import io.fabric8.kubernetes.client.CustomResourceList;\n+import io.fabric8.kubernetes.internal.KubernetesDeserializer;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.MappingJsonFactory;\n+\n+import static org.hamcrest.core.IsInstanceOf.instanceOf;\n+import static org.junit.Assert.assertThat;\n+\n+public class CustomResourceOperationsImplTest {\n+\n+\tpublic static class MyCustomResource extends CustomResource {\n+    }\n+\n+\tpublic static class MyCustomResourceList extends CustomResourceList<MyCustomResource> {\n+    }\n+\n+    CustomResourceDefinition crd = new CustomResourceDefinitionBuilder()\n+        .withApiVersion(\"custom.group/v1alpha1\")\n+        .withKind(\"MyCustomResource\")\n+        .withNewMetadata()\n+            .withName(\"custom.name\")\n+        .endMetadata()\n+        .withNewSpec()\n+            .withGroup(\"custom.group\")\n+            .withVersion(\"v1alpha1\")\n+            .withNewNames()\n+                .withKind(\"MyCustomResource\")\n+                .withListKind(\"MyCustomResourceList\")\n+                .withPlural(\"mycustomresources\")\n+                .withSingular(\"mycustomresource\")\n+            .endNames()\n+        .endSpec()\n+    .build();\n+\n+    CustomResourceOperationContext context = new CustomResourceOperationContext()\n+        .withCrd(crd)\n+        .withType(MyCustomResource.class)\n+        .withListType(MyCustomResourceList.class);\n+\n+    @Test\n+\tpublic void shouldRegisterWithKubernetesDeserializer() throws IOException {\n+\t\t// CustomResourceOperationsImpl constructor invokes KubernetesDeserializer::registerCustomKind\n+\t\tnew CustomResourceOperationsImpl<>(context);\n+\n+\t\tJsonFactory factory = new MappingJsonFactory();\n+\t\tJsonParser parser = factory.createParser(\"{\\n\" + \n+\t\t    \"    \\\"apiVersion\\\": \\\"custom.group/v1alpha1\\\",\\n\" + \n+\t\t    \"    \\\"kind\\\": \\\"MyCustomResource\\\"\\n\" + \n+\t\t    \"}\");\n+\n+\t\tKubernetesDeserializer deserializer = new KubernetesDeserializer();\n+\t\tKubernetesResource resource = deserializer.deserialize(parser, null);\n+\n+\t\tassertThat(resource, instanceOf(MyCustomResource.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cc843ee42270d2b99fe3b1a025f689ced613032"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNjU5MTQx", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011#pullrequestreview-361659141", "createdAt": "2020-02-20T06:30:29Z", "commit": {"oid": "8cc843ee42270d2b99fe3b1a025f689ced613032"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNjU5NTc4", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011#pullrequestreview-361659578", "createdAt": "2020-02-20T06:31:51Z", "commit": {"oid": "8cc843ee42270d2b99fe3b1a025f689ced613032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjozMTo1MVrOFsHSpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjozMTo1MVrOFsHSpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwMTEyNQ==", "bodyText": "Please add access modifiers to these fields (crd+context > private)\nIdeally field instantiation should happen inside a test setup method (@BeforeEach) in order to avoid side effects when new tests are added to the suite.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011#discussion_r381801125", "createdAt": "2020-02-20T06:31:51Z", "author": {"login": "manusa"}, "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes.client.dsl.internal;\n+\n+import java.io.IOException;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinitionBuilder;\n+import io.fabric8.kubernetes.client.CustomResource;\n+import io.fabric8.kubernetes.client.CustomResourceList;\n+import io.fabric8.kubernetes.internal.KubernetesDeserializer;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.MappingJsonFactory;\n+\n+import static org.hamcrest.core.IsInstanceOf.instanceOf;\n+import static org.junit.Assert.assertThat;\n+\n+public class CustomResourceOperationsImplTest {\n+\n+\tpublic static class MyCustomResource extends CustomResource {\n+    }\n+\n+\tpublic static class MyCustomResourceList extends CustomResourceList<MyCustomResource> {\n+    }\n+\n+    CustomResourceDefinition crd = new CustomResourceDefinitionBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cc843ee42270d2b99fe3b1a025f689ced613032"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bf70bd0308c7f5c6b89254f7d7f3432275c41ff", "author": {"user": {"login": "zregvart", "name": "Zoran Regvart"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/8bf70bd0308c7f5c6b89254f7d7f3432275c41ff", "committedDate": "2020-02-20T08:45:03Z", "message": "fix: apiVersion and kind from CRD in registration\n\nIn `CustomResourceOperationsImpl` construction\n`KubernetesDeserializer::registerCustomKind` is invoked without\n`apiVersion` and with `kind` set to the class name. This could lead to\nissues when deserializing custom resources, in my example:\n\n```\ncom.fasterxml.jackson.databind.JsonMappingException: No resource type found for:camel.apache.org/v1alpha1#Integration\n at [Source: (String)\"{\"type\":\"DELETED\",\"object\":{\"apiVersion\":\"camel.apache.org/v1alpha1\",\"kind\":\"Integration\",\"metadata\":{\"annotations\":{\"prometheus.io/port\":\"9779\",\"prometheus.io/scrape\":\"true\",\"syndesis.io/deploy-id\":\"i-M0SZstrdU_fCuujYkqGz:2\",\"syndesis.io/deployment-version\":\"2\",\"syndesis.io/integration-id\":\"i-M0SZstrdU_fCuujYkqGz\",\"syndesis.io/integration-name\":\"t2l\"},\"creationTimestamp\":\"2020-02-19T13:14:10Z\",\"generation\":1,\"labels\":{\"syndesis.io/app\":\"syndesis\",\"syndesis.io/component\":\"integration\",\"syndesis.\"[truncated 3644 chars]; line: 1, column: 4142] (through reference chain: io.fabric8.kubernetes.api.model.WatchEvent[\"object\"])\n\tat com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:271) ~[jackson-databind-2.10.2.jar:2.10.2]\n\tat io.fabric8.kubernetes.internal.KubernetesDeserializer.deserialize(KubernetesDeserializer.java:78) ~[kubernetes-model-4.6.1.jar:4.6.1]\n\tat io.fabric8.kubernetes.internal.KubernetesDeserializer.deserialize(KubernetesDeserializer.java:33) ~[kubernetes-model-4.6.1.jar:4.6.1]\n```\n\nBecause only `\"Integration\"` would be registered, whereas type lookup is\nusing `apiVersion` and `kind.\n\nThis changes that to specify the `apiVersion` and `kind` based on the\ndefinition given in the `CustomResource`."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8cc843ee42270d2b99fe3b1a025f689ced613032", "author": {"user": {"login": "zregvart", "name": "Zoran Regvart"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/8cc843ee42270d2b99fe3b1a025f689ced613032", "committedDate": "2020-02-19T15:59:04Z", "message": "fix: apiVersion and kind from CRD in registration\n\nIn `CustomResourceOperationsImpl` construction\n`KubernetesDeserializer::registerCustomKind` is invoked without\n`apiVersion` and with `kind` set to the class name. This could lead to\nissues when deserializing custom resources, in my example:\n\n```\ncom.fasterxml.jackson.databind.JsonMappingException: No resource type found for:camel.apache.org/v1alpha1#Integration\n at [Source: (String)\"{\"type\":\"DELETED\",\"object\":{\"apiVersion\":\"camel.apache.org/v1alpha1\",\"kind\":\"Integration\",\"metadata\":{\"annotations\":{\"prometheus.io/port\":\"9779\",\"prometheus.io/scrape\":\"true\",\"syndesis.io/deploy-id\":\"i-M0SZstrdU_fCuujYkqGz:2\",\"syndesis.io/deployment-version\":\"2\",\"syndesis.io/integration-id\":\"i-M0SZstrdU_fCuujYkqGz\",\"syndesis.io/integration-name\":\"t2l\"},\"creationTimestamp\":\"2020-02-19T13:14:10Z\",\"generation\":1,\"labels\":{\"syndesis.io/app\":\"syndesis\",\"syndesis.io/component\":\"integration\",\"syndesis.\"[truncated 3644 chars]; line: 1, column: 4142] (through reference chain: io.fabric8.kubernetes.api.model.WatchEvent[\"object\"])\n\tat com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:271) ~[jackson-databind-2.10.2.jar:2.10.2]\n\tat io.fabric8.kubernetes.internal.KubernetesDeserializer.deserialize(KubernetesDeserializer.java:78) ~[kubernetes-model-4.6.1.jar:4.6.1]\n\tat io.fabric8.kubernetes.internal.KubernetesDeserializer.deserialize(KubernetesDeserializer.java:33) ~[kubernetes-model-4.6.1.jar:4.6.1]\n```\n\nBecause only `\"Integration\"` would be registered, whereas type lookup is\nusing `apiVersion` and `kind.\n\nThis changes that to specify the `apiVersion` and `kind` based on the\ndefinition given in the `CustomResource`."}, "afterCommit": {"oid": "8bf70bd0308c7f5c6b89254f7d7f3432275c41ff", "author": {"user": {"login": "zregvart", "name": "Zoran Regvart"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/8bf70bd0308c7f5c6b89254f7d7f3432275c41ff", "committedDate": "2020-02-20T08:45:03Z", "message": "fix: apiVersion and kind from CRD in registration\n\nIn `CustomResourceOperationsImpl` construction\n`KubernetesDeserializer::registerCustomKind` is invoked without\n`apiVersion` and with `kind` set to the class name. This could lead to\nissues when deserializing custom resources, in my example:\n\n```\ncom.fasterxml.jackson.databind.JsonMappingException: No resource type found for:camel.apache.org/v1alpha1#Integration\n at [Source: (String)\"{\"type\":\"DELETED\",\"object\":{\"apiVersion\":\"camel.apache.org/v1alpha1\",\"kind\":\"Integration\",\"metadata\":{\"annotations\":{\"prometheus.io/port\":\"9779\",\"prometheus.io/scrape\":\"true\",\"syndesis.io/deploy-id\":\"i-M0SZstrdU_fCuujYkqGz:2\",\"syndesis.io/deployment-version\":\"2\",\"syndesis.io/integration-id\":\"i-M0SZstrdU_fCuujYkqGz\",\"syndesis.io/integration-name\":\"t2l\"},\"creationTimestamp\":\"2020-02-19T13:14:10Z\",\"generation\":1,\"labels\":{\"syndesis.io/app\":\"syndesis\",\"syndesis.io/component\":\"integration\",\"syndesis.\"[truncated 3644 chars]; line: 1, column: 4142] (through reference chain: io.fabric8.kubernetes.api.model.WatchEvent[\"object\"])\n\tat com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:271) ~[jackson-databind-2.10.2.jar:2.10.2]\n\tat io.fabric8.kubernetes.internal.KubernetesDeserializer.deserialize(KubernetesDeserializer.java:78) ~[kubernetes-model-4.6.1.jar:4.6.1]\n\tat io.fabric8.kubernetes.internal.KubernetesDeserializer.deserialize(KubernetesDeserializer.java:33) ~[kubernetes-model-4.6.1.jar:4.6.1]\n```\n\nBecause only `\"Integration\"` would be registered, whereas type lookup is\nusing `apiVersion` and `kind.\n\nThis changes that to specify the `apiVersion` and `kind` based on the\ndefinition given in the `CustomResource`."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNzUxMTEz", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011#pullrequestreview-361751113", "createdAt": "2020-02-20T09:33:57Z", "commit": {"oid": "8bf70bd0308c7f5c6b89254f7d7f3432275c41ff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3484, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}