{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MjQ4MDkx", "number": 2011, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjoyOToxOVrODhZo-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjozMTo1MVrODhZs0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzQ5Njg4OnYy", "diffSide": "RIGHT", "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjoyOToxOVrOFsHNdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwODo1MzozNFrOFsK0og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc5OTc5OA==", "bodyText": "I'd probably add an assertion validation the content of a field in order to verify deserialization worked.\n(e.g. assertThat(((MyCustomResource)resource).getApiVersion(), equalTo(\"custom.group/v1alpha1\")))", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011#discussion_r381799798", "createdAt": "2020-02-20T06:29:19Z", "author": {"login": "manusa"}, "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes.client.dsl.internal;\n+\n+import java.io.IOException;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinitionBuilder;\n+import io.fabric8.kubernetes.client.CustomResource;\n+import io.fabric8.kubernetes.client.CustomResourceList;\n+import io.fabric8.kubernetes.internal.KubernetesDeserializer;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.MappingJsonFactory;\n+\n+import static org.hamcrest.core.IsInstanceOf.instanceOf;\n+import static org.junit.Assert.assertThat;\n+\n+public class CustomResourceOperationsImplTest {\n+\n+\tpublic static class MyCustomResource extends CustomResource {\n+    }\n+\n+\tpublic static class MyCustomResourceList extends CustomResourceList<MyCustomResource> {\n+    }\n+\n+    CustomResourceDefinition crd = new CustomResourceDefinitionBuilder()\n+        .withApiVersion(\"custom.group/v1alpha1\")\n+        .withKind(\"MyCustomResource\")\n+        .withNewMetadata()\n+            .withName(\"custom.name\")\n+        .endMetadata()\n+        .withNewSpec()\n+            .withGroup(\"custom.group\")\n+            .withVersion(\"v1alpha1\")\n+            .withNewNames()\n+                .withKind(\"MyCustomResource\")\n+                .withListKind(\"MyCustomResourceList\")\n+                .withPlural(\"mycustomresources\")\n+                .withSingular(\"mycustomresource\")\n+            .endNames()\n+        .endSpec()\n+    .build();\n+\n+    CustomResourceOperationContext context = new CustomResourceOperationContext()\n+        .withCrd(crd)\n+        .withType(MyCustomResource.class)\n+        .withListType(MyCustomResourceList.class);\n+\n+    @Test\n+\tpublic void shouldRegisterWithKubernetesDeserializer() throws IOException {\n+\t\t// CustomResourceOperationsImpl constructor invokes KubernetesDeserializer::registerCustomKind\n+\t\tnew CustomResourceOperationsImpl<>(context);\n+\n+\t\tJsonFactory factory = new MappingJsonFactory();\n+\t\tJsonParser parser = factory.createParser(\"{\\n\" + \n+\t\t    \"    \\\"apiVersion\\\": \\\"custom.group/v1alpha1\\\",\\n\" + \n+\t\t    \"    \\\"kind\\\": \\\"MyCustomResource\\\"\\n\" + \n+\t\t    \"}\");\n+\n+\t\tKubernetesDeserializer deserializer = new KubernetesDeserializer();\n+\t\tKubernetesResource resource = deserializer.deserialize(parser, null);\n+\n+\t\tassertThat(resource, instanceOf(MyCustomResource.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cc843ee42270d2b99fe3b1a025f689ced613032"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg1ODk3OA==", "bodyText": "Added https://github.com/fabric8io/kubernetes-client/pull/2011/files#diff-1500b8672a6f6391abfa76c29b8128cfR83", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011#discussion_r381858978", "createdAt": "2020-02-20T08:53:34Z", "author": {"login": "zregvart"}, "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes.client.dsl.internal;\n+\n+import java.io.IOException;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinitionBuilder;\n+import io.fabric8.kubernetes.client.CustomResource;\n+import io.fabric8.kubernetes.client.CustomResourceList;\n+import io.fabric8.kubernetes.internal.KubernetesDeserializer;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.MappingJsonFactory;\n+\n+import static org.hamcrest.core.IsInstanceOf.instanceOf;\n+import static org.junit.Assert.assertThat;\n+\n+public class CustomResourceOperationsImplTest {\n+\n+\tpublic static class MyCustomResource extends CustomResource {\n+    }\n+\n+\tpublic static class MyCustomResourceList extends CustomResourceList<MyCustomResource> {\n+    }\n+\n+    CustomResourceDefinition crd = new CustomResourceDefinitionBuilder()\n+        .withApiVersion(\"custom.group/v1alpha1\")\n+        .withKind(\"MyCustomResource\")\n+        .withNewMetadata()\n+            .withName(\"custom.name\")\n+        .endMetadata()\n+        .withNewSpec()\n+            .withGroup(\"custom.group\")\n+            .withVersion(\"v1alpha1\")\n+            .withNewNames()\n+                .withKind(\"MyCustomResource\")\n+                .withListKind(\"MyCustomResourceList\")\n+                .withPlural(\"mycustomresources\")\n+                .withSingular(\"mycustomresource\")\n+            .endNames()\n+        .endSpec()\n+    .build();\n+\n+    CustomResourceOperationContext context = new CustomResourceOperationContext()\n+        .withCrd(crd)\n+        .withType(MyCustomResource.class)\n+        .withListType(MyCustomResourceList.class);\n+\n+    @Test\n+\tpublic void shouldRegisterWithKubernetesDeserializer() throws IOException {\n+\t\t// CustomResourceOperationsImpl constructor invokes KubernetesDeserializer::registerCustomKind\n+\t\tnew CustomResourceOperationsImpl<>(context);\n+\n+\t\tJsonFactory factory = new MappingJsonFactory();\n+\t\tJsonParser parser = factory.createParser(\"{\\n\" + \n+\t\t    \"    \\\"apiVersion\\\": \\\"custom.group/v1alpha1\\\",\\n\" + \n+\t\t    \"    \\\"kind\\\": \\\"MyCustomResource\\\"\\n\" + \n+\t\t    \"}\");\n+\n+\t\tKubernetesDeserializer deserializer = new KubernetesDeserializer();\n+\t\tKubernetesResource resource = deserializer.deserialize(parser, null);\n+\n+\t\tassertThat(resource, instanceOf(MyCustomResource.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc5OTc5OA=="}, "originalCommit": {"oid": "8cc843ee42270d2b99fe3b1a025f689ced613032"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzUwNjczOnYy", "diffSide": "RIGHT", "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjozMTo1MVrOFsHSpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOTozMzozN1rOFsMLBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwMTEyNQ==", "bodyText": "Please add access modifiers to these fields (crd+context > private)\nIdeally field instantiation should happen inside a test setup method (@BeforeEach) in order to avoid side effects when new tests are added to the suite.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011#discussion_r381801125", "createdAt": "2020-02-20T06:31:51Z", "author": {"login": "manusa"}, "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes.client.dsl.internal;\n+\n+import java.io.IOException;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinitionBuilder;\n+import io.fabric8.kubernetes.client.CustomResource;\n+import io.fabric8.kubernetes.client.CustomResourceList;\n+import io.fabric8.kubernetes.internal.KubernetesDeserializer;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.MappingJsonFactory;\n+\n+import static org.hamcrest.core.IsInstanceOf.instanceOf;\n+import static org.junit.Assert.assertThat;\n+\n+public class CustomResourceOperationsImplTest {\n+\n+\tpublic static class MyCustomResource extends CustomResource {\n+    }\n+\n+\tpublic static class MyCustomResourceList extends CustomResourceList<MyCustomResource> {\n+    }\n+\n+    CustomResourceDefinition crd = new CustomResourceDefinitionBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cc843ee42270d2b99fe3b1a025f689ced613032"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg1OTUwMA==", "bodyText": "Changed to private final this should cause no side effects that I can think of.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011#discussion_r381859500", "createdAt": "2020-02-20T08:54:29Z", "author": {"login": "zregvart"}, "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes.client.dsl.internal;\n+\n+import java.io.IOException;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinitionBuilder;\n+import io.fabric8.kubernetes.client.CustomResource;\n+import io.fabric8.kubernetes.client.CustomResourceList;\n+import io.fabric8.kubernetes.internal.KubernetesDeserializer;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.MappingJsonFactory;\n+\n+import static org.hamcrest.core.IsInstanceOf.instanceOf;\n+import static org.junit.Assert.assertThat;\n+\n+public class CustomResourceOperationsImplTest {\n+\n+\tpublic static class MyCustomResource extends CustomResource {\n+    }\n+\n+\tpublic static class MyCustomResourceList extends CustomResourceList<MyCustomResource> {\n+    }\n+\n+    CustomResourceDefinition crd = new CustomResourceDefinitionBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwMTEyNQ=="}, "originalCommit": {"oid": "8cc843ee42270d2b99fe3b1a025f689ced613032"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg4MTA5NQ==", "bodyText": "Making it final doesn't make it immutable which may lead to some side-effects:\nSo if one of the test cases (not at the moment, and probably not ever) does something like crd.setApiVersion(\"bar\") in order to do some corner-case test and some other test asserts on this field, it will fail. It will also fail in a non-deterministic way depending on how the system computes the test execution order.\nThat's why it's always recommended to use setup and tear down methods in tests.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011#discussion_r381881095", "createdAt": "2020-02-20T09:33:37Z", "author": {"login": "manusa"}, "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes.client.dsl.internal;\n+\n+import java.io.IOException;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinitionBuilder;\n+import io.fabric8.kubernetes.client.CustomResource;\n+import io.fabric8.kubernetes.client.CustomResourceList;\n+import io.fabric8.kubernetes.internal.KubernetesDeserializer;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.MappingJsonFactory;\n+\n+import static org.hamcrest.core.IsInstanceOf.instanceOf;\n+import static org.junit.Assert.assertThat;\n+\n+public class CustomResourceOperationsImplTest {\n+\n+\tpublic static class MyCustomResource extends CustomResource {\n+    }\n+\n+\tpublic static class MyCustomResourceList extends CustomResourceList<MyCustomResource> {\n+    }\n+\n+    CustomResourceDefinition crd = new CustomResourceDefinitionBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwMTEyNQ=="}, "originalCommit": {"oid": "8cc843ee42270d2b99fe3b1a025f689ced613032"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3818, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}