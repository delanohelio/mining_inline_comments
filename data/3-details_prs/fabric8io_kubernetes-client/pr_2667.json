{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwNjcwNDk1", "number": 2667, "title": "Fix #2666: Align SharedIndexInformer API with Custom Resource Improvements", "bodyText": "Fix #2666\nAdd support for autodetecting CustomResourceDefinitionContext and *List\ntypes in SharedIndexInformer API just like we do in our improved\nCustomResource APIs.\nMigration guide reference\nhttps://github.com/rohanKanojia/kubernetes-client/blob/pr/sharedinformer-customresource/doc/MIGRATION-v5.md#sharedindexinformer-api-improvements\nShared Informers API changes\n\nNo List type required in order to create SharedIndexInformers from SharedInformerFactory\nHelper methods like inNamespace to create Namespaced informers\nSharedInformerFactory.sharedIndexInformerForCustomResource now uses CustomResource as base type rather than HasMetadata\nRemoval of CustomResourceDefinitionContext from SharedInformerFactory.sharedIndexInformerForCustomResource. CustomResourceDefinition related configuration now gets automatically detected or configured from @Group, @Version, @Plural annotations.\n\nDescription\n\nType of change\n\n\n Bug fix (non-breaking change which fixes an issue)\n Feature (non-breaking change which adds functionality)\n Breaking change (fix or feature that would cause existing functionality to change\n Chore (non-breaking change which doesn't affect codebase;\ntest, version modification, documentation, etc.)\n\nChecklist\n\n Code contributed by me aligns with current project license: Apache 2.0\n I Added CHANGELOG entry regarding this change\n I have implemented unit tests to cover my changes\n I have added/updated the javadocs and other documentation accordingly\n No new bugs, code smells, etc. in SonarCloud report\n I tested my code in Kubernetes\n I tested my code in OpenShift", "createdAt": "2020-12-15T20:16:44Z", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667", "merged": true, "mergeCommit": {"oid": "5af64095ccaa9b2a8fed79bc1b313432fd650336"}, "closed": true, "closedAt": "2021-02-16T06:12:48Z", "author": {"login": "rohanKanojia"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnERi8ABqjQxMjUzMjkxMjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd6YYM-AFqTU5MDUyMzc2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6628132b9829867cbce7572776c6f863f562613", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/d6628132b9829867cbce7572776c6f863f562613", "committedDate": "2020-12-15T20:14:35Z", "message": "Fix #2666: Align SharedIndexInformer API with Custom Resource Improvements\n\nAdd support for autodetecting CustomResourceDefinitionContext and *List\ntypes in SharedIndexInformer API just like we do in our improved\nCustomResource APIs."}, "afterCommit": {"oid": "bfe683b2f56e3c7740be4489ce1deb93e1f900f9", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/bfe683b2f56e3c7740be4489ce1deb93e1f900f9", "committedDate": "2020-12-17T14:15:06Z", "message": "Update KubernetesResourceUtil.inferListType and Animal CRD with new CRD improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NzUwNzYy", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#pullrequestreview-554750762", "createdAt": "2020-12-17T16:05:11Z", "commit": {"oid": "bfe683b2f56e3c7740be4489ce1deb93e1f900f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjowNToxMVrOIH81Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjowNToxMVrOIH81Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIwNzU1OA==", "bodyText": "These invocations should be added to a test setup method", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r545207558", "createdAt": "2020-12-17T16:05:11Z", "author": {"login": "manusa"}, "path": "kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/DefaultSharedIndexInformerTest.java", "diffHunk": "@@ -617,6 +635,285 @@ public void onDelete(Star star, boolean deletedFinalStateUnknown) { }\n     sharedInformerFactory.stopAllRegisteredInformers();\n   }\n \n+  @Test\n+  @DisplayName(\"Pod Informer should without list type should watch in all namespaces\")\n+  void testPodInformerWithNoOperationContextAndNoListType() throws InterruptedException {\n+    // Given\n+    String startResourceVersion = \"1000\", endResourceVersion = \"1001\";\n+    server.expect().withPath(\"/api/v1/pods\")\n+      .andReturn(200, new PodListBuilder().withNewMetadata().withResourceVersion(startResourceVersion).endMetadata().withItems(Collections.emptyList()).build()).once();\n+    server.expect().withPath(\"/api/v1/pods?resourceVersion=\" + startResourceVersion + \"&watch=true\")\n+      .andUpgradeToWebSocket()\n+      .open()\n+      .waitFor(WATCH_EVENT_EMIT_TIME)\n+      .andEmit(new WatchEvent(new PodBuilder().withNewMetadata().withNamespace(\"test\").withName(\"pod1\").withResourceVersion(endResourceVersion).endMetadata().build(), \"ADDED\"))\n+      .waitFor(OUTDATED_WATCH_EVENT_EMIT_TIME)\n+      .andEmit(outdatedEvent).done().always();\n+    KubernetesClient client = server.getClient();\n+\n+    // When\n+    SharedInformerFactory factory = client.informers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfe683b2f56e3c7740be4489ce1deb93e1f900f9"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NzUxMDA5", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#pullrequestreview-554751009", "createdAt": "2020-12-17T16:05:28Z", "commit": {"oid": "bfe683b2f56e3c7740be4489ce1deb93e1f900f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjowNToyOFrOIH81xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjowNToyOFrOIH81xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIwNzc0OA==", "bodyText": "These invocations should be added to a test teardown method", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r545207748", "createdAt": "2020-12-17T16:05:28Z", "author": {"login": "manusa"}, "path": "kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/DefaultSharedIndexInformerTest.java", "diffHunk": "@@ -617,6 +635,285 @@ public void onDelete(Star star, boolean deletedFinalStateUnknown) { }\n     sharedInformerFactory.stopAllRegisteredInformers();\n   }\n \n+  @Test\n+  @DisplayName(\"Pod Informer should without list type should watch in all namespaces\")\n+  void testPodInformerWithNoOperationContextAndNoListType() throws InterruptedException {\n+    // Given\n+    String startResourceVersion = \"1000\", endResourceVersion = \"1001\";\n+    server.expect().withPath(\"/api/v1/pods\")\n+      .andReturn(200, new PodListBuilder().withNewMetadata().withResourceVersion(startResourceVersion).endMetadata().withItems(Collections.emptyList()).build()).once();\n+    server.expect().withPath(\"/api/v1/pods?resourceVersion=\" + startResourceVersion + \"&watch=true\")\n+      .andUpgradeToWebSocket()\n+      .open()\n+      .waitFor(WATCH_EVENT_EMIT_TIME)\n+      .andEmit(new WatchEvent(new PodBuilder().withNewMetadata().withNamespace(\"test\").withName(\"pod1\").withResourceVersion(endResourceVersion).endMetadata().build(), \"ADDED\"))\n+      .waitFor(OUTDATED_WATCH_EVENT_EMIT_TIME)\n+      .andEmit(outdatedEvent).done().always();\n+    KubernetesClient client = server.getClient();\n+\n+    // When\n+    SharedInformerFactory factory = client.informers();\n+    SharedIndexInformer<Pod> podInformer = factory.sharedIndexInformerFor(Pod.class, RESYNC_PERIOD);\n+    CountDownLatch foundExistingPod = new CountDownLatch(1);\n+    podInformer.addEventHandler(new TestResourceHandler<>(foundExistingPod, \"pod1\"));\n+    factory.startAllRegisteredInformers();\n+    foundExistingPod.await(LATCH_AWAIT_PERIOD_IN_SECONDS, TimeUnit.SECONDS);\n+\n+    // Then\n+    assertEquals(0, foundExistingPod.getCount());\n+    factory.stopAllRegisteredInformers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfe683b2f56e3c7740be4489ce1deb93e1f900f9"}, "originalPosition": 87}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bfe683b2f56e3c7740be4489ce1deb93e1f900f9", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/bfe683b2f56e3c7740be4489ce1deb93e1f900f9", "committedDate": "2020-12-17T14:15:06Z", "message": "Update KubernetesResourceUtil.inferListType and Animal CRD with new CRD improvements"}, "afterCommit": {"oid": "df8bcd4e4c3448005061b1bf6c2d7aedff0fb302", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/df8bcd4e4c3448005061b1bf6c2d7aedff0fb302", "committedDate": "2020-12-17T17:35:47Z", "message": "Refactor DefaultSharedIndexInformerTest to use @BeforeEach/@AfterEach\n\nReduce code duplication by adding setup/teardown methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MTgxNzc0", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#pullrequestreview-555181774", "createdAt": "2020-12-18T05:30:00Z", "commit": {"oid": "df8bcd4e4c3448005061b1bf6c2d7aedff0fb302"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MzA1NDQ2", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#pullrequestreview-555305446", "createdAt": "2020-12-18T08:54:33Z", "commit": {"oid": "df8bcd4e4c3448005061b1bf6c2d7aedff0fb302"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MzY2NDA3", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#pullrequestreview-555366407", "createdAt": "2020-12-18T10:22:28Z", "commit": {"oid": "dde65ab3998ba12c2534f3c88299f073369a5f1a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDoyMjoyOFrOIIdM8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDoyMzo1NFrOIIdQCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczNzk2OA==", "bodyText": "Shouldn't this use the new HasMetadata#getApiVersion instead? Is there a scenario where the the apiVersion derived from the OperationContext would clash with the version provided by the class itself?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r545737968", "createdAt": "2020-12-18T10:22:28Z", "author": {"login": "metacosm"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java", "diffHunk": "@@ -266,4 +385,12 @@ private void initOperationContext(Config configuration) {\n       context = context.withIsNamespaceConfiguredFromGlobalConfig(true);\n     }\n   }\n+\n+  private <T extends HasMetadata> void  registerKindToKubernetesDeserializer(OperationContext context, Class<T> apiTypeClass) {\n+    if (context.getApiGroupName() != null && context.getApiGroupVersion() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde65ab3998ba12c2534f3c88299f073369a5f1a"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczODM5NA==", "bodyText": "What should be done when the information provided by the CRDContext clashes with what could be derived from the api type class?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r545738394", "createdAt": "2020-12-18T10:23:15Z", "author": {"login": "metacosm"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java", "diffHunk": "@@ -89,10 +86,134 @@ public SharedInformerFactory(ExecutorService threadPool, OkHttpClient okHttpClie\n    * @return the shared index informer\n    */\n   public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n-    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, context.withApiGroupName(Utils.getAnnotationValue(apiTypeClass, Group.class))\n-      .withApiGroupVersion(Utils.getAnnotationValue(apiTypeClass, Version.class))\n-      .withPlural(getPluralFromKind(apiTypeClass.getSimpleName()))\n-      .withIsNamespaceConfiguredFromGlobalConfig(context.isNamespaceFromGlobalConfig()), resyncPeriodInMillis);\n+    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, null, resyncPeriodInMillis);\n+  }\n+\n+  /**\n+   * Constructs and returns a shared index informer with resync period specified. And the\n+   * informer cache will be overwritten.\n+   *\n+   * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n+   *\n+   * @param apiTypeClass apiType class\n+   * @param resyncPeriodInMillis resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced}) if Namespace scoped resource\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, KubernetesResourceUtil.inferListType(apiTypeClass), resyncPeriodInMillis);\n+  }\n+\n+  /**\n+   * Constructs and returns a shared index informer with resync period specified. And the\n+   * informer cache will be overwritten.\n+   *\n+   * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n+   *\n+   * @param apiTypeClass apiType class\n+   * @param operationContext {@link OperationContext} Operation Context\n+   * @param resyncPeriodInMillis resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced}) if Namespace scoped resource\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, OperationContext operationContext, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, KubernetesResourceUtil.inferListType(apiTypeClass), operationContext, resyncPeriodInMillis);\n+  }\n+\n+  /**\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. Note that\n+   * {@link CustomResourceDefinitionContext} would be build using opinionated defaults by inspecting the ApiType\n+   * POJO\n+   *\n+   * @param apiTypeClass apiType class\n+   * @param operationContext operation context\n+   * @param resyncPeriodInMillis resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link CustomResource} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerForCustomResource(Class<T> apiTypeClass, OperationContext operationContext, long resyncPeriodInMillis) {\n+    return sharedIndexInformerForCustomResource(CustomResourceDefinitionContext.fromCustomResourceType(apiTypeClass), apiTypeClass, CustomResourceOperationsImpl.inferListType(apiTypeClass), operationContext, resyncPeriodInMillis);\n+  }\n+\n+  /**\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. Note that\n+   * {@link CustomResourceDefinitionContext} would be build using opinionated defaults by inspecting the ApiType\n+   * POJO\n+   *\n+   * @param apiTypeClass apiType class\n+   * @param resyncPeriodInMillis  resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerForCustomResource(Class<T> apiTypeClass, long resyncPeriodInMillis) {\n+    return sharedIndexInformerForCustomResource(CustomResourceDefinitionContext.fromCustomResourceType(apiTypeClass), apiTypeClass, CustomResourceOperationsImpl.inferListType(apiTypeClass), resyncPeriodInMillis);\n+  }\n+\n+  /**\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. Note that\n+   * {@link CustomResourceDefinitionContext} would be build using opinionated defaults by inspecting the ApiType\n+   * POJO\n+   *\n+   * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n+   *\n+   * @param apiTypeClass apiType class\n+   * @param apiListTypeClass api list type class\n+   * @param resyncPeriodInMillis resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n+   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerForCustomResource(Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n+    return sharedIndexInformerForCustomResource(CustomResourceDefinitionContext.fromCustomResourceType(apiTypeClass), apiTypeClass, apiListTypeClass, resyncPeriodInMillis);\n+  }\n+\n+  /**\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. You can use this\n+   * method to specify namespace in {@link OperationContext} if you want to monitor for events in a dedicated namespace\n+   * only or provide other filtering options. Note that {@link CustomResourceDefinitionContext} would be build using\n+   * opinionated defaults by inspecting the ApiType POJO\n+   *\n+   * @param apiTypeClass apiType class\n+   * @param apiListTypeClass api list type class\n+   * @param operationContext operation context\n+   * @param resyncPeriodInMillis resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n+   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerForCustomResource(Class<T> apiTypeClass, Class<L> apiListTypeClass, OperationContext operationContext, long resyncPeriodInMillis) {\n+    return sharedIndexInformerForCustomResource(CustomResourceDefinitionContext.fromCustomResourceType(apiTypeClass), apiTypeClass, apiListTypeClass, operationContext, resyncPeriodInMillis);\n+  }\n+\n+  /**\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. You can use this\n+   * method to specify namespace in {@link OperationContext} if you want to monitor for events in a dedicated namespace\n+   * only or provide other filtering options.\n+   *\n+   * @param crdContext {@link CustomResourceDefinitionContext} Context for CustomResourceDefinition\n+   * @param apiTypeClass apiType class\n+   * @param resyncPeriodInMillis resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerForCustomResource(CustomResourceDefinitionContext crdContext, Class<T> apiTypeClass, long resyncPeriodInMillis) {\n+    return sharedIndexInformerForCustomResource(crdContext, apiTypeClass, CustomResourceOperationsImpl.inferListType(apiTypeClass), resyncPeriodInMillis);\n+  }\n+\n+  /**\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. You can use this\n+   * method to specify namespace in {@link OperationContext} if you want to monitor for events in a dedicated namespace\n+   * only or provide other filtering options.\n+   *\n+   * @param crdContext {@link CustomResourceDefinitionContext} Context for CustomResourceDefinition\n+   * @param apiTypeClass apiType class\n+   * @param operationContext operation context\n+   * @param resyncPeriodInMillis resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerForCustomResource(CustomResourceDefinitionContext crdContext, Class<T> apiTypeClass, OperationContext operationContext, long resyncPeriodInMillis) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde65ab3998ba12c2534f3c88299f073369a5f1a"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczODc2Mg==", "bodyText": "Maybe that should be moved to HasMetadata?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r545738762", "createdAt": "2020-12-18T10:23:54Z", "author": {"login": "metacosm"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/utils/KubernetesResourceUtil.java", "diffHunk": "@@ -367,4 +369,16 @@ public static Duration getAge(HasMetadata kubernetesResource) {\n     Instant instant = Instant.parse(kubernetesResource.getMetadata().getCreationTimestamp());\n     return Duration.between(instant, Instant.now()).abs();\n   }\n+\n+  public static <T extends HasMetadata> Class<? extends KubernetesResourceList> inferListType(Class<T> type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde65ab3998ba12c2534f3c88299f073369a5f1a"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dde65ab3998ba12c2534f3c88299f073369a5f1a", "author": {"user": {"login": "metacosm", "name": "Chris Laprun"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/dde65ab3998ba12c2534f3c88299f073369a5f1a", "committedDate": "2020-12-18T10:18:55Z", "message": "refactor: try to chain more methods, use HasMetadata methods"}, "afterCommit": {"oid": "7402c0f984552b94018e72ebce7c20fcbd2d8c4f", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/7402c0f984552b94018e72ebce7c20fcbd2d8c4f", "committedDate": "2020-12-18T17:35:39Z", "message": "Remove old Informer methods and replace with more readable methods\n\nNow with CustomResource improvements we no longer need informer methods\nin SharedInformerFactory to require list types and\nCustomResourceDefinitionContext"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7402c0f984552b94018e72ebce7c20fcbd2d8c4f", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/7402c0f984552b94018e72ebce7c20fcbd2d8c4f", "committedDate": "2020-12-18T17:35:39Z", "message": "Remove old Informer methods and replace with more readable methods\n\nNow with CustomResource improvements we no longer need informer methods\nin SharedInformerFactory to require list types and\nCustomResourceDefinitionContext"}, "afterCommit": {"oid": "6c59d31042431b4a0c73ad0f06ff65e894c2319a", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/6c59d31042431b4a0c73ad0f06ff65e894c2319a", "committedDate": "2020-12-18T17:40:48Z", "message": "Remove old Informer methods and replace with more readable methods\n\nNow with CustomResource improvements we no longer need informer methods\nin SharedInformerFactory to require list types and\nCustomResourceDefinitionContext"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8822fd44b472ebc413509cc76dcc51f00ef51b6f", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/8822fd44b472ebc413509cc76dcc51f00ef51b6f", "committedDate": "2020-12-18T18:18:28Z", "message": "Refactor SharedInformerFactory#registerKindToKubernetesDeserializer\n\nSharedInformerFactory#registerKindToKubernetesDeserializer should infer\napiVersion from POJO itself. We only need to register in case of custom\nresources"}, "afterCommit": {"oid": "31ca3a338f9bd753c426d586693b493b00338193", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/31ca3a338f9bd753c426d586693b493b00338193", "committedDate": "2020-12-18T18:42:15Z", "message": "Refactor SharedInformerFactory#registerKindToKubernetesDeserializer\n\nSharedInformerFactory#registerKindToKubernetesDeserializer should infer\napiVersion from POJO itself. We only need to register in case of custom\nresources"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1ODAwNTAw", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#pullrequestreview-555800500", "createdAt": "2020-12-18T20:40:43Z", "commit": {"oid": "31ca3a338f9bd753c426d586693b493b00338193"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDo0MDo0M1rOIIyGIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTowMDowNFrOIIyk4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA4MDI5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Kubernetes Client also provides `SharedInformer` support in order to stay updated to events happening to your resource inside Kubernetes. It's implementation is just list and watch operations after a certain interval of time. Here are some of the common usages:\n          \n          \n            \n            Kubernetes Client also provides `SharedInformer` support in order to stay updated to events happening to your resource inside Kubernetes. Its implementation is simply list and watch operations after a certain interval of time. Here are some of the common usages:", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546080291", "createdAt": "2020-12-18T20:40:43Z", "author": {"login": "metacosm"}, "path": "doc/CHEATSHEET.md", "diffHunk": "@@ -2019,12 +2019,12 @@ try (KubernetesClient client = new DefaultKubernetesClient()) {\n ### SharedInformers\n Kubernetes Client also provides `SharedInformer` support in order to stay updated to events happening to your resource inside Kubernetes. It's implementation is just list and watch operations after a certain interval of time. Here are some of the common usages:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ca3a338f9bd753c426d586693b493b00338193"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA4MDUzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Create `SharedIndexInformer` for some Kubernetes Resource(requires resource's class, resource's list class, and resync period(when to check with server again while watching something).  By default it watches in all namespaces.:\n          \n          \n            \n            - Create `SharedIndexInformer` for some Kubernetes Resource(requires resource's class and resync period(when to check with server again while watching something).  By default it watches in all namespaces:", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546080536", "createdAt": "2020-12-18T20:41:20Z", "author": {"login": "metacosm"}, "path": "doc/CHEATSHEET.md", "diffHunk": "@@ -2019,12 +2019,12 @@ try (KubernetesClient client = new DefaultKubernetesClient()) {\n ### SharedInformers\n Kubernetes Client also provides `SharedInformer` support in order to stay updated to events happening to your resource inside Kubernetes. It's implementation is just list and watch operations after a certain interval of time. Here are some of the common usages:\n - Get `SharedInformerFactory`:\n-```\n+```java\n SharedInformerFactory sharedInformerFactory = client.informers();\n ```\n - Create `SharedIndexInformer` for some Kubernetes Resource(requires resource's class, resource's list class, and resync period(when to check with server again while watching something).  By default it watches in all namespaces.:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ca3a338f9bd753c426d586693b493b00338193"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA4MDg4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Create `SharedIndexInformer` for some Custom Resource(in our case, `Dummy` resource provided in our [examples](https://github.com/fabric8io/kubernetes-client/tree/master/kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/crds) . By default it watches in all namespaces.\n          \n          \n            \n            - Create `SharedIndexInformer` for some Custom Resource(in our case, `Dummy` resource provided in our [examples](https://github.com/fabric8io/kubernetes-client/tree/master/kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/crds). By default it watches in all namespaces.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546080880", "createdAt": "2020-12-18T20:42:14Z", "author": {"login": "metacosm"}, "path": "doc/CHEATSHEET.md", "diffHunk": "@@ -2043,14 +2043,8 @@ podInformer.addEventHandler(new ResourceEventHandler<Pod>() {\n });\n ```\n - Create `SharedIndexInformer` for some Custom Resource(in our case, `Dummy` resource provided in our [examples](https://github.com/fabric8io/kubernetes-client/tree/master/kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/crds) . By default it watches in all namespaces.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ca3a338f9bd753c426d586693b493b00338193"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA4MTU2OQ==", "bodyText": "This feels kinda weird\u2026", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546081569", "createdAt": "2020-12-18T20:43:59Z", "author": {"login": "metacosm"}, "path": "doc/CHEATSHEET.md", "diffHunk": "@@ -2069,11 +2063,10 @@ dummyInformer.addEventHandler(new ResourceEventHandler<Dummy>() {\n });\n ```\n - Create namespaced `SharedIndexInformer` (informers specific to a particular `Namespace`):\n-```\n+```java\n SharedInformerFactory sharedInformerFactory = client.informers();\n SharedIndexInformer<Pod> podInformer = sharedInformerFactory.sharedIndexInformerFor(\n         Pod.class,\n-        PodList.class,\n         new OperationContext().withNamespace(\"default\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ca3a338f9bd753c426d586693b493b00338193"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA4MjIxNw==", "bodyText": "Plural is not required. It can be automatically computed based on the singular version. It's only required if the plural is uncommon. For example, Dummies should work automatically.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546082217", "createdAt": "2020-12-18T20:45:41Z", "author": {"login": "metacosm"}, "path": "doc/CHEATSHEET.md", "diffHunk": "@@ -2094,18 +2087,27 @@ podInformer.addEventHandler(new ResourceEventHandler<Pod>() {\n         logger.info(\"Pod \" + pod.getMetadata().getName() + \" got deleted\");\n     }\n });\n+}\n ```\n - Create Namespaced Informer for a Custom Resource(**Note:** Your CustomResource POJO must implement `Namespaced` interface like the one used in this example: [Dummy.java](https://github.com/fabric8io/kubernetes-client/blob/master/kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/crds/Dummy.java))\n+You should have your CustomResource type POJO annotated with group, version and plural fields with respect to your CRD:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ca3a338f9bd753c426d586693b493b00338193"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA4MzEyOA==", "bodyText": "What do you mean by informer cache will be overwritten? Is that needed information to specify in the javadoc?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546083128", "createdAt": "2020-12-18T20:47:46Z", "author": {"login": "metacosm"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java", "diffHunk": "@@ -82,58 +79,57 @@ public SharedInformerFactory(ExecutorService threadPool, OkHttpClient okHttpClie\n    * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n    *\n    * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n    * @param resyncPeriodInMillis resync period in milliseconds\n-   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n-   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced}) if Namespace scoped resource\n    * @return the shared index informer\n    */\n-  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n-    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, context.withApiGroupName(Utils.getAnnotationValue(apiTypeClass, Group.class))\n-      .withApiGroupVersion(Utils.getAnnotationValue(apiTypeClass, Version.class))\n-      .withPlural(getPluralFromKind(apiTypeClass.getSimpleName()))\n-      .withIsNamespaceConfiguredFromGlobalConfig(context.isNamespaceFromGlobalConfig()), resyncPeriodInMillis);\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, KubernetesResourceUtil.inferListType(apiTypeClass), null, resyncPeriodInMillis);\n   }\n \n   /**\n-   * Constructs and returns a shared index informer with resync period specified for custom resources.\n+   * Constructs and returns a shared index informer with resync period specified. And the\n+   * informer cache will be overwritten.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ca3a338f9bd753c426d586693b493b00338193"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA4MzY5NA==", "bodyText": "I don't think we need to mention how things are implemented here.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546083694", "createdAt": "2020-12-18T20:49:05Z", "author": {"login": "metacosm"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java", "diffHunk": "@@ -82,58 +79,57 @@ public SharedInformerFactory(ExecutorService threadPool, OkHttpClient okHttpClie\n    * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n    *\n    * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n    * @param resyncPeriodInMillis resync period in milliseconds\n-   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n-   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced}) if Namespace scoped resource\n    * @return the shared index informer\n    */\n-  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n-    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, context.withApiGroupName(Utils.getAnnotationValue(apiTypeClass, Group.class))\n-      .withApiGroupVersion(Utils.getAnnotationValue(apiTypeClass, Version.class))\n-      .withPlural(getPluralFromKind(apiTypeClass.getSimpleName()))\n-      .withIsNamespaceConfiguredFromGlobalConfig(context.isNamespaceFromGlobalConfig()), resyncPeriodInMillis);\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, KubernetesResourceUtil.inferListType(apiTypeClass), null, resyncPeriodInMillis);\n   }\n \n   /**\n-   * Constructs and returns a shared index informer with resync period specified for custom resources.\n+   * Constructs and returns a shared index informer with resync period specified. And the\n+   * informer cache will be overwritten.\n    *\n    * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n    *\n-   * @param customResourceContext basic information about the Custom Resource Definition corresponding to that custom resource\n    * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n+   * @param operationContext {@link OperationContext} Operation Context\n    * @param resyncPeriodInMillis resync period in milliseconds\n-   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n-   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced}) if Namespace scoped resource\n    * @return the shared index informer\n    */\n-  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerForCustomResource(CustomResourceDefinitionContext customResourceContext, Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n-    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, context.withApiGroupVersion(customResourceContext.getVersion())\n-      .withApiGroupName(customResourceContext.getGroup())\n-      .withPlural(customResourceContext.getPlural())\n-      .withIsNamespaceConfiguredFromGlobalConfig(context.isNamespaceFromGlobalConfig()), resyncPeriodInMillis);\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, OperationContext operationContext, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, KubernetesResourceUtil.inferListType(apiTypeClass), operationContext, resyncPeriodInMillis);\n   }\n \n   /**\n-   * Constructs and returns a shared index informer with resync period specified for custom resources. You can use this\n-   * method to specify namespace in {@link OperationContext} if you want to monitor for events in a dedicated namespace\n-   * only or provide other filtering options.\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. Note that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ca3a338f9bd753c426d586693b493b00338193"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA4NTU2NQ==", "bodyText": "Why is the plural set here and not in other instances?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546085565", "createdAt": "2020-12-18T20:53:51Z", "author": {"login": "metacosm"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java", "diffHunk": "@@ -82,58 +79,57 @@ public SharedInformerFactory(ExecutorService threadPool, OkHttpClient okHttpClie\n    * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n    *\n    * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n    * @param resyncPeriodInMillis resync period in milliseconds\n-   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n-   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced}) if Namespace scoped resource\n    * @return the shared index informer\n    */\n-  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n-    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, context.withApiGroupName(Utils.getAnnotationValue(apiTypeClass, Group.class))\n-      .withApiGroupVersion(Utils.getAnnotationValue(apiTypeClass, Version.class))\n-      .withPlural(getPluralFromKind(apiTypeClass.getSimpleName()))\n-      .withIsNamespaceConfiguredFromGlobalConfig(context.isNamespaceFromGlobalConfig()), resyncPeriodInMillis);\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, KubernetesResourceUtil.inferListType(apiTypeClass), null, resyncPeriodInMillis);\n   }\n \n   /**\n-   * Constructs and returns a shared index informer with resync period specified for custom resources.\n+   * Constructs and returns a shared index informer with resync period specified. And the\n+   * informer cache will be overwritten.\n    *\n    * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n    *\n-   * @param customResourceContext basic information about the Custom Resource Definition corresponding to that custom resource\n    * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n+   * @param operationContext {@link OperationContext} Operation Context\n    * @param resyncPeriodInMillis resync period in milliseconds\n-   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n-   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced}) if Namespace scoped resource\n    * @return the shared index informer\n    */\n-  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerForCustomResource(CustomResourceDefinitionContext customResourceContext, Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n-    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, context.withApiGroupVersion(customResourceContext.getVersion())\n-      .withApiGroupName(customResourceContext.getGroup())\n-      .withPlural(customResourceContext.getPlural())\n-      .withIsNamespaceConfiguredFromGlobalConfig(context.isNamespaceFromGlobalConfig()), resyncPeriodInMillis);\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, OperationContext operationContext, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, KubernetesResourceUtil.inferListType(apiTypeClass), operationContext, resyncPeriodInMillis);\n   }\n \n   /**\n-   * Constructs and returns a shared index informer with resync period specified for custom resources. You can use this\n-   * method to specify namespace in {@link OperationContext} if you want to monitor for events in a dedicated namespace\n-   * only or provide other filtering options.\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. Note that\n+   * {@link CustomResourceDefinitionContext} would be build using opinionated defaults by inspecting the ApiType\n+   * POJO\n    *\n-   * @param customResourceContext basic information about the Custom Resource Definition corresponding to that custom resource\n    * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n    * @param operationContext operation context\n    * @param resyncPeriodInMillis resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link CustomResource} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerForCustomResource(Class<T> apiTypeClass, OperationContext operationContext, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, CustomResourceOperationsImpl.inferListType(apiTypeClass), operationContext.withPlural(CustomResourceDefinitionContext.fromCustomResourceType(apiTypeClass).getPlural()), resyncPeriodInMillis);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ca3a338f9bd753c426d586693b493b00338193"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA4NTc0MA==", "bodyText": "Same as above: not sure we need to detail the implementation here.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546085740", "createdAt": "2020-12-18T20:54:20Z", "author": {"login": "metacosm"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java", "diffHunk": "@@ -82,58 +79,57 @@ public SharedInformerFactory(ExecutorService threadPool, OkHttpClient okHttpClie\n    * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n    *\n    * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n    * @param resyncPeriodInMillis resync period in milliseconds\n-   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n-   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced}) if Namespace scoped resource\n    * @return the shared index informer\n    */\n-  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n-    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, context.withApiGroupName(Utils.getAnnotationValue(apiTypeClass, Group.class))\n-      .withApiGroupVersion(Utils.getAnnotationValue(apiTypeClass, Version.class))\n-      .withPlural(getPluralFromKind(apiTypeClass.getSimpleName()))\n-      .withIsNamespaceConfiguredFromGlobalConfig(context.isNamespaceFromGlobalConfig()), resyncPeriodInMillis);\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, KubernetesResourceUtil.inferListType(apiTypeClass), null, resyncPeriodInMillis);\n   }\n \n   /**\n-   * Constructs and returns a shared index informer with resync period specified for custom resources.\n+   * Constructs and returns a shared index informer with resync period specified. And the\n+   * informer cache will be overwritten.\n    *\n    * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n    *\n-   * @param customResourceContext basic information about the Custom Resource Definition corresponding to that custom resource\n    * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n+   * @param operationContext {@link OperationContext} Operation Context\n    * @param resyncPeriodInMillis resync period in milliseconds\n-   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n-   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced}) if Namespace scoped resource\n    * @return the shared index informer\n    */\n-  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerForCustomResource(CustomResourceDefinitionContext customResourceContext, Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n-    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, context.withApiGroupVersion(customResourceContext.getVersion())\n-      .withApiGroupName(customResourceContext.getGroup())\n-      .withPlural(customResourceContext.getPlural())\n-      .withIsNamespaceConfiguredFromGlobalConfig(context.isNamespaceFromGlobalConfig()), resyncPeriodInMillis);\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, OperationContext operationContext, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, KubernetesResourceUtil.inferListType(apiTypeClass), operationContext, resyncPeriodInMillis);\n   }\n \n   /**\n-   * Constructs and returns a shared index informer with resync period specified for custom resources. You can use this\n-   * method to specify namespace in {@link OperationContext} if you want to monitor for events in a dedicated namespace\n-   * only or provide other filtering options.\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. Note that\n+   * {@link CustomResourceDefinitionContext} would be build using opinionated defaults by inspecting the ApiType\n+   * POJO\n    *\n-   * @param customResourceContext basic information about the Custom Resource Definition corresponding to that custom resource\n    * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n    * @param operationContext operation context\n    * @param resyncPeriodInMillis resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link CustomResource} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerForCustomResource(Class<T> apiTypeClass, OperationContext operationContext, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, CustomResourceOperationsImpl.inferListType(apiTypeClass), operationContext.withPlural(CustomResourceDefinitionContext.fromCustomResourceType(apiTypeClass).getPlural()), resyncPeriodInMillis);\n+  }\n+\n+  /**\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. Note that\n+   * {@link CustomResourceDefinitionContext} would be build using opinionated defaults by inspecting the ApiType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ca3a338f9bd753c426d586693b493b00338193"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA4ODE2Mw==", "bodyText": "Is that needed?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546088163", "createdAt": "2020-12-18T21:00:04Z", "author": {"login": "metacosm"}, "path": "kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/crds/Dummy.java", "diffHunk": "@@ -20,10 +20,13 @@\n import io.fabric8.kubernetes.client.CustomResource;\n import io.fabric8.kubernetes.model.annotation.Group;\n import io.fabric8.kubernetes.model.annotation.Version;\n+import io.fabric8.kubernetes.model.annotation.Plural;\n \n @Version(Dummy.VERSION)\n @Group(Dummy.GROUP)\n+@Plural(Dummy.PLURAL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ca3a338f9bd753c426d586693b493b00338193"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76c587a78b23d8775386855ab58beda2f464858b", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/76c587a78b23d8775386855ab58beda2f464858b", "committedDate": "2020-12-19T16:19:39Z", "message": "Add inNamespace() and withName() methods in SharedInformerFactory\n\nSharedInformerFactory should provide inNamespace() and withName()\nmethods to configure namespace and name of resource rather than\nmaking user provide OperationContext for namespace/name configuration"}, "afterCommit": {"oid": "39bf5f195197396cf565b52af734b2ca51546354", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/39bf5f195197396cf565b52af734b2ca51546354", "committedDate": "2020-12-21T06:34:10Z", "message": "Add inNamespace() and withName() methods in SharedInformerFactory\n\nSharedInformerFactory should provide inNamespace() and withName()\nmethods to configure namespace and name of resource rather than\nmaking user provide OperationContext for namespace/name configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MjM2ODU5", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#pullrequestreview-556236859", "createdAt": "2020-12-21T09:21:36Z", "commit": {"oid": "a9bda082fe43e77f0552e687a3392b9ec9513cfc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToyMTozNlrOIJRgnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToyMTozNlrOIJRgnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5NDk3Mw==", "bodyText": "That should really be: CustomResource.getPlural(apiTypeClass). The problem, though, is that this requires apiTypeClass to extend CustomResource, which is why I tend to think that the logic for these methods should maybe be moved to HasMetadata. Either that, or make these informers methods take a CustomResource instance?\nThe problem with the logic above is that potentially the class has been annotated with @Singular which means that the singular version might not be equal to kind. The class might also have been annotated with @Plural in which case, that value should be used and not some other computation\u2026", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546594973", "createdAt": "2020-12-21T09:21:36Z", "author": {"login": "metacosm"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java", "diffHunk": "@@ -275,6 +268,6 @@ private void initOperationContext(Config configuration) {\n     if (CustomResource.class.isAssignableFrom(apiTypeClass)) {\n       return CustomResourceDefinitionContext.fromCustomResourceType(apiTypeClass).getPlural();\n     }\n-    return getPluralFromKind(HasMetadata.getKind(apiTypeClass));\n+    return Pluralize.toPlural(HasMetadata.getKind(apiTypeClass)).toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9bda082fe43e77f0552e687a3392b9ec9513cfc"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MjM5NjY3", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#pullrequestreview-556239667", "createdAt": "2020-12-21T09:25:59Z", "commit": {"oid": "39bf5f195197396cf565b52af734b2ca51546354"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToyNjowMFrOIJRpQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToyNjowMFrOIJRpQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5NzE4NQ==", "bodyText": "Feels better, indeed but then all methods taking an OperationContext should be removed, right?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546597185", "createdAt": "2020-12-21T09:26:00Z", "author": {"login": "metacosm"}, "path": "doc/CHEATSHEET.md", "diffHunk": "@@ -2065,9 +2065,8 @@ dummyInformer.addEventHandler(new ResourceEventHandler<Dummy>() {\n - Create namespaced `SharedIndexInformer` (informers specific to a particular `Namespace`):\n ```java\n SharedInformerFactory sharedInformerFactory = client.informers();\n-SharedIndexInformer<Pod> podInformer = sharedInformerFactory.sharedIndexInformerFor(\n+SharedIndexInformer<Pod> podInformer = sharedInformerFactory.inNamespace(\"default\").sharedIndexInformerFor(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf5f195197396cf565b52af734b2ca51546354"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "04c9e79a85ce425c31d5c55b3343b79dbe25b7b8", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/04c9e79a85ce425c31d5c55b3343b79dbe25b7b8", "committedDate": "2020-12-21T11:51:00Z", "message": "SharedInformerFactory custom resource methods use CustomResource\n\n+ Update SharedInformerFactory.sharedIndexInformerForCustomResource to\n  use CustomResource rather than HasMetadata\n+ Use CustomResource.getPlural method for resolving CustomResource\n  plurals from type\n+ Revert removal of sharedIndexInformerForCustomResource List type\n  methods"}, "afterCommit": {"oid": "f28b2ad3c9454b663306b7f777b2b03aae9abb7e", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/f28b2ad3c9454b663306b7f777b2b03aae9abb7e", "committedDate": "2020-12-21T12:46:23Z", "message": "SharedInformerFactory custom resource methods use CustomResource\n\n+ Update SharedInformerFactory.sharedIndexInformerForCustomResource to\n  use CustomResource rather than HasMetadata\n+ Use CustomResource.getPlural method for resolving CustomResource\n  plurals from type\n+ Revert removal of sharedIndexInformerForCustomResource List type\n  methods\n+ Document changes in SharedInformer API in migration guide"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6423bb939cbbb632f17c48d5919f731b01dd6490", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/6423bb939cbbb632f17c48d5919f731b01dd6490", "committedDate": "2021-02-11T16:56:27Z", "message": "Fix #2666: Align SharedIndexInformer API with Custom Resource Improvements\n\nAdd support for autodetecting CustomResourceDefinitionContext and *List\ntypes in SharedIndexInformer API just like we do in our improved\nCustomResource APIs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b676228a4b5db73b0c9adb5393b6c8bf0de8a2f8", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/b676228a4b5db73b0c9adb5393b6c8bf0de8a2f8", "committedDate": "2021-02-11T16:56:27Z", "message": "Update KubernetesResourceUtil.inferListType and Animal CRD with new CRD improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ebc28a54993a8a5420ae5d70bc0d800316623a5", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/6ebc28a54993a8a5420ae5d70bc0d800316623a5", "committedDate": "2021-02-11T16:56:27Z", "message": "Refactor DefaultSharedIndexInformerTest to use @BeforeEach/@AfterEach\n\nReduce code duplication by adding setup/teardown methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "496f0b7d39071dbb9ce9646c757c0fad20259534", "author": {"user": {"login": "metacosm", "name": "Chris Laprun"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/496f0b7d39071dbb9ce9646c757c0fad20259534", "committedDate": "2021-02-11T16:59:11Z", "message": "refactor: try to chain more methods, use HasMetadata methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f960a6ce25737847c39faccdcdce1eba9739a16", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/4f960a6ce25737847c39faccdcdce1eba9739a16", "committedDate": "2021-02-11T17:00:08Z", "message": "Remove old Informer methods and replace with more readable methods\n\nNow with CustomResource improvements we no longer need informer methods\nin SharedInformerFactory to require list types and\nCustomResourceDefinitionContext"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33626fd7d86661615d3cbffc9517957a2d0ecd41", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/33626fd7d86661615d3cbffc9517957a2d0ecd41", "committedDate": "2021-02-11T17:00:12Z", "message": "Refactor SharedInformerFactory#registerKindToKubernetesDeserializer\n\nSharedInformerFactory#registerKindToKubernetesDeserializer should infer\napiVersion from POJO itself. We only need to register in case of custom\nresources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c665fc7484697039aae592142f51b6baf5a7aed", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/6c665fc7484697039aae592142f51b6baf5a7aed", "committedDate": "2021-02-11T17:00:38Z", "message": "Improve Informer Docs and remove plural from Dummy CRD POJO\n\n+ Address Informer Docs suggestions\n+ Use Pluralize.toPlural() to resolving plural instead\n+ Remove implementation details from javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d235d72d7cf4a7f6330c0cd1ba1e1465f2275c23", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/d235d72d7cf4a7f6330c0cd1ba1e1465f2275c23", "committedDate": "2021-02-11T17:00:40Z", "message": "Add inNamespace() and withName() methods in SharedInformerFactory\n\nSharedInformerFactory should provide inNamespace() and withName()\nmethods to configure namespace and name of resource rather than\nmaking user provide OperationContext for namespace/name configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f50f5420d66934d91db4c3b090d33af23006105", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/9f50f5420d66934d91db4c3b090d33af23006105", "committedDate": "2021-02-11T17:02:50Z", "message": "SharedInformerFactory custom resource methods use CustomResource\n\n+ Update SharedInformerFactory.sharedIndexInformerForCustomResource to\n  use CustomResource rather than HasMetadata\n+ Use CustomResource.getPlural method for resolving CustomResource\n  plurals from type\n+ Revert removal of sharedIndexInformerForCustomResource List type\n  methods\n+ Document changes in SharedInformer API in migration guide"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f28b2ad3c9454b663306b7f777b2b03aae9abb7e", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/f28b2ad3c9454b663306b7f777b2b03aae9abb7e", "committedDate": "2020-12-21T12:46:23Z", "message": "SharedInformerFactory custom resource methods use CustomResource\n\n+ Update SharedInformerFactory.sharedIndexInformerForCustomResource to\n  use CustomResource rather than HasMetadata\n+ Use CustomResource.getPlural method for resolving CustomResource\n  plurals from type\n+ Revert removal of sharedIndexInformerForCustomResource List type\n  methods\n+ Document changes in SharedInformer API in migration guide"}, "afterCommit": {"oid": "9f50f5420d66934d91db4c3b090d33af23006105", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/9f50f5420d66934d91db4c3b090d33af23006105", "committedDate": "2021-02-11T17:02:50Z", "message": "SharedInformerFactory custom resource methods use CustomResource\n\n+ Update SharedInformerFactory.sharedIndexInformerForCustomResource to\n  use CustomResource rather than HasMetadata\n+ Use CustomResource.getPlural method for resolving CustomResource\n  plurals from type\n+ Revert removal of sharedIndexInformerForCustomResource List type\n  methods\n+ Document changes in SharedInformer API in migration guide"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e80b5093e36d509beccd7aede323a08b00e3ae3d", "author": {"user": {"login": "metacosm", "name": "Chris Laprun"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/e80b5093e36d509beccd7aede323a08b00e3ae3d", "committedDate": "2021-02-11T17:20:37Z", "message": "refactor: make getPlural/Singular work with HasMetadata classes\n\nThere is really no need to restrict these methods to CustomResource only\nand maybe we should consider moving them to HasMetadata?"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffc66d3aa2ef9e8b2e071e7ef3b09035e90b427a", "author": {"user": {"login": "metacosm", "name": "Chris Laprun"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/ffc66d3aa2ef9e8b2e071e7ef3b09035e90b427a", "committedDate": "2021-02-11T19:23:45Z", "message": "refactor: unify inferListType methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "becf84d3181a29b34788b1113b3b26206a6ad167", "author": {"user": {"login": "metacosm", "name": "Chris Laprun"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/becf84d3181a29b34788b1113b3b26206a6ad167", "committedDate": "2021-02-11T20:28:51Z", "message": "refactor: remove unneeded list classes, simplify tests setup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62ae8d3fc921ce17f9bc8dff74e8ea23ae272b32", "author": {"user": {"login": "metacosm", "name": "Chris Laprun"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/62ae8d3fc921ce17f9bc8dff74e8ea23ae272b32", "committedDate": "2021-02-11T21:14:31Z", "message": "refactor: simplify informers for custom resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e319a6b08a5835c78dcc23750518640ea4d56ccf", "author": {"user": {"login": "metacosm", "name": "Chris Laprun"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/e319a6b08a5835c78dcc23750518640ea4d56ccf", "committedDate": "2021-02-11T21:53:45Z", "message": "fix: missing changes after merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c94d7cdc1e5e5e5d076ba222f8871294e3704b1e", "author": {"user": {"login": "metacosm", "name": "Chris Laprun"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/c94d7cdc1e5e5e5d076ba222f8871294e3704b1e", "committedDate": "2021-02-12T16:32:43Z", "message": "fix: return CustomResourceList if no specific list is found\n\nReturning KubernetesResourceList results in the list type not being\nregistered by KubernetesDeserializer and thus, generic lists not being\ndeserialized."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cd6618c45993a53b2b0be31ce95a89c3dd33c57", "author": {"user": {"login": "metacosm", "name": "Chris Laprun"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/6cd6618c45993a53b2b0be31ce95a89c3dd33c57", "committedDate": "2021-02-12T17:03:49Z", "message": "fix: merge errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9814fd9a81d274588410bea2c82655e103d19947", "author": {"user": {"login": "metacosm", "name": "Chris Laprun"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/9814fd9a81d274588410bea2c82655e103d19947", "committedDate": "2021-02-12T17:36:01Z", "message": "fix: test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkwNTIzNzYw", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#pullrequestreview-590523760", "createdAt": "2021-02-15T14:29:00Z", "commit": {"oid": "9814fd9a81d274588410bea2c82655e103d19947"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3576, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}