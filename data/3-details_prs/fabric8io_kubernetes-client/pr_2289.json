{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0Nzk4ODky", "number": 2289, "title": "Update createOrReplace to work more like BaseOperation", "bodyText": "This fixes #2285\nRather than try to actually handle exception propagation for create-then-replace, I decided to mirror the BaseOperation implementation which does a get then branch accordingly. I added a couple tests.", "createdAt": "2020-06-15T21:11:07Z", "url": "https://github.com/fabric8io/kubernetes-client/pull/2289", "merged": true, "mergeCommit": {"oid": "1ebaf2fae020a65da0f1fedeb0de735286192581"}, "closed": true, "closedAt": "2020-06-19T08:47:39Z", "author": {"login": "bbeaudreault"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcr175WgFqTQzMTU1MDgxNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsuu0HgFqTQzMzg5NTYyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTUwODE1", "url": "https://github.com/fabric8io/kubernetes-client/pull/2289#pullrequestreview-431550815", "createdAt": "2020-06-16T14:15:13Z", "commit": {"oid": "5360e896dc773a0bdcffe892e80b376c741cabe0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDoxNToxM1rOGkdeFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDoxNToxM1rOGkdeFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4NDc1Nw==", "bodyText": "nit, maybe use HttpUrlConnection for status codes:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                when(mockResponse.isSuccessful()).thenReturn(code < 400);\n          \n          \n            \n                when(mockResponse.isSuccessful()).thenReturn(code < HttpURLConnection.HTTP_BAD_REQUEST);", "url": "https://github.com/fabric8io/kubernetes-client/pull/2289#discussion_r440884757", "createdAt": "2020-06-16T14:15:13Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/RawCustomResourceOperationsImplTest.java", "diffHunk": "@@ -75,15 +76,42 @@ void testCreateOrReplaceUrl() throws IOException {\n     String resourceAsString = \"{\\\"metadata\\\":{\\\"name\\\":\\\"myresource\\\",\\\"namespace\\\":\\\"myns\\\"}, \\\"kind\\\":\\\"raw\\\", \\\"apiVersion\\\":\\\"v1\\\"}\";\n     ArgumentCaptor<Request> captor = ArgumentCaptor.forClass(Request.class);\n \n+    Call mockCall = mock(Call.class);\n+    Response mockErrorResponse = mockResponse(500);\n+    Response mockConflictResponse = mockResponse(409);\n+    when(mockCall.execute())\n+      .thenReturn(mockErrorResponse, mockConflictResponse, mockSuccessResponse);\n+    when(mockClient.newCall(any())).thenReturn(mockCall);\n+\n     // When\n+    try {\n+      rawCustomResourceOperations.createOrReplace(resourceAsString);\n+      fail(\"expected first call to createOrReplace to throw exception due to 500 response\");\n+    } catch (KubernetesClientException e) {\n+      assertEquals(500, e.getCode());\n+    }\n     rawCustomResourceOperations.createOrReplace(resourceAsString);\n     rawCustomResourceOperations.createOrReplace(\"myns\", resourceAsString);\n \n     // Then\n-    verify(mockClient, times(2)).newCall(captor.capture());\n-    assertEquals(2, captor.getAllValues().size());\n+    verify(mockClient, times(4)).newCall(captor.capture());\n+    assertEquals(4, captor.getAllValues().size());\n     assertEquals(\"/apis/test.fabric8.io/v1alpha1/hellos\", captor.getAllValues().get(0).url().encodedPath());\n-    assertEquals(\"/apis/test.fabric8.io/v1alpha1/namespaces/myns/hellos\", captor.getAllValues().get(1).url().encodedPath());\n+    assertEquals(\"POST\", captor.getAllValues().get(0).method());\n+    assertEquals(\"/apis/test.fabric8.io/v1alpha1/hellos\", captor.getAllValues().get(1).url().encodedPath());\n+    assertEquals(\"POST\", captor.getAllValues().get(1).method());\n+    assertEquals(\"/apis/test.fabric8.io/v1alpha1/hellos/myresource\", captor.getAllValues().get(2).url().encodedPath());\n+    assertEquals(\"PUT\", captor.getAllValues().get(2).method());\n+    assertEquals(\"/apis/test.fabric8.io/v1alpha1/namespaces/myns/hellos\", captor.getAllValues().get(3).url().encodedPath());\n+    assertEquals(\"POST\", captor.getAllValues().get(3).method());\n+  }\n+\n+  private Response mockResponse(int code) {\n+    Response mockResponse = mock(Response.class);\n+    when(mockResponse.isSuccessful()).thenReturn(code < 400);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5360e896dc773a0bdcffe892e80b376c741cabe0"}, "originalPosition": 87}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17b0ad32fb10c04a2aa25ea519c9d8f839a74ca1", "author": {"user": {"login": "bbeaudreault", "name": "Bryan Beaudreault"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/17b0ad32fb10c04a2aa25ea519c9d8f839a74ca1", "committedDate": "2020-06-16T14:44:40Z", "message": "just build a response object rather than literally mock it"}, "afterCommit": {"oid": "646531ebfbbd0925fda0e0c23e87faed480e2cae", "author": {"user": {"login": "bbeaudreault", "name": "Bryan Beaudreault"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/646531ebfbbd0925fda0e0c23e87faed480e2cae", "committedDate": "2020-06-16T15:56:32Z", "message": "Update createOrReplace to properly propagate non-conflict exceptions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "646531ebfbbd0925fda0e0c23e87faed480e2cae", "author": {"user": {"login": "bbeaudreault", "name": "Bryan Beaudreault"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/646531ebfbbd0925fda0e0c23e87faed480e2cae", "committedDate": "2020-06-16T15:56:32Z", "message": "Update createOrReplace to properly propagate non-conflict exceptions"}, "afterCommit": {"oid": "1fb9e2b68b7493b89d7982627cc1eebbddfbd6f4", "author": {"user": {"login": "bbeaudreault", "name": "Bryan Beaudreault"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/1fb9e2b68b7493b89d7982627cc1eebbddfbd6f4", "committedDate": "2020-06-17T15:46:21Z", "message": "Update createOrReplace to properly propagate non-conflict exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38f6ec4946c639090ccd17007e461a2fdb7f7b86", "author": {"user": {"login": "bbeaudreault", "name": "Bryan Beaudreault"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/38f6ec4946c639090ccd17007e461a2fdb7f7b86", "committedDate": "2020-06-17T15:48:54Z", "message": "Update createOrReplace to properly propagate non-conflict exceptions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fb9e2b68b7493b89d7982627cc1eebbddfbd6f4", "author": {"user": {"login": "bbeaudreault", "name": "Bryan Beaudreault"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/1fb9e2b68b7493b89d7982627cc1eebbddfbd6f4", "committedDate": "2020-06-17T15:46:21Z", "message": "Update createOrReplace to properly propagate non-conflict exceptions"}, "afterCommit": {"oid": "38f6ec4946c639090ccd17007e461a2fdb7f7b86", "author": {"user": {"login": "bbeaudreault", "name": "Bryan Beaudreault"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/38f6ec4946c639090ccd17007e461a2fdb7f7b86", "committedDate": "2020-06-17T15:48:54Z", "message": "Update createOrReplace to properly propagate non-conflict exceptions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMDA5MTgy", "url": "https://github.com/fabric8io/kubernetes-client/pull/2289#pullrequestreview-433009182", "createdAt": "2020-06-18T07:27:21Z", "commit": {"oid": "38f6ec4946c639090ccd17007e461a2fdb7f7b86"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODk1NjIz", "url": "https://github.com/fabric8io/kubernetes-client/pull/2289#pullrequestreview-433895623", "createdAt": "2020-06-19T08:25:31Z", "commit": {"oid": "38f6ec4946c639090ccd17007e461a2fdb7f7b86"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3701, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}