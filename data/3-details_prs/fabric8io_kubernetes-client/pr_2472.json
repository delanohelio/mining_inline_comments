{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNzgzMzg4", "number": 2472, "title": "Fix #2399: Cannot change the type of the Service from ClusterIP to ExternalName", "bodyText": "Description\n\nFix #2399\nRemoves overridden replace() method in ServiceOperationsImpl\nType of change\n\n\n Bug fix (non-breaking change which fixes an issue)\n Feature (non-breaking change which adds functionality)\n Breaking change (fix or feature that would cause existing functionality to change\n Chore (non-breaking change which doesn't affect codebase;\ntest, version modification, documentation, etc.)\n\nChecklist\n\n Code contributed by me aligns with current project license: Apache 2.0\n I Added CHANGELOG entry regarding this change\n I have implemented unit tests to cover my changes\n I have added/updated the javadocs and other documentation accordingly\n No new bugs, code smells, etc. in SonarCloud report\n I tested my code in Kubernetes\n I tested my code in OpenShift", "createdAt": "2020-09-09T11:44:34Z", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472", "merged": true, "mergeCommit": {"oid": "fd6f17f49deb5345649725c085264b76b7da3035"}, "closed": true, "closedAt": "2020-09-16T09:02:30Z", "author": {"login": "rohanKanojia"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHKzhhAFqTQ4NDkyNjM1Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd-9nZjgFqTYwMTEyMDg1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0OTI2MzU3", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#pullrequestreview-484926357", "createdAt": "2020-09-09T11:50:02Z", "commit": {"oid": "6f8cc090c710963854b9fea0bbf6d60d47c1daf3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0OTI4NDQ4", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#pullrequestreview-484928448", "createdAt": "2020-09-09T11:53:06Z", "commit": {"oid": "6f8cc090c710963854b9fea0bbf6d60d47c1daf3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f8cc090c710963854b9fea0bbf6d60d47c1daf3", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/6f8cc090c710963854b9fea0bbf6d60d47c1daf3", "committedDate": "2020-09-09T11:37:50Z", "message": "Fix #2399: Cannot change the type of the Service from ClusterIP to ExternalName"}, "afterCommit": {"oid": "87d288aae4f24418fa9596931a1ffacf93be6d27", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/87d288aae4f24418fa9596931a1ffacf93be6d27", "committedDate": "2020-09-09T15:21:11Z", "message": "Fix #2399: Cannot change the type of the Service from ClusterIP to ExternalName"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NzAyMjc3", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#pullrequestreview-485702277", "createdAt": "2020-09-10T08:30:10Z", "commit": {"oid": "87d288aae4f24418fa9596931a1ffacf93be6d27"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87d288aae4f24418fa9596931a1ffacf93be6d27", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/87d288aae4f24418fa9596931a1ffacf93be6d27", "committedDate": "2020-09-09T15:21:11Z", "message": "Fix #2399: Cannot change the type of the Service from ClusterIP to ExternalName"}, "afterCommit": {"oid": "03f942aef3b40f6c70746906f65cbff8a3f26f41", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/03f942aef3b40f6c70746906f65cbff8a3f26f41", "committedDate": "2020-09-16T04:28:10Z", "message": "Fix #2399: Cannot change the type of the Service from ClusterIP to ExternalName"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/44ee47c201c0080d16377d6608d85faeac2aa343", "committedDate": "2020-09-16T07:30:49Z", "message": "Fix #2399: Cannot change the type of the Service from ClusterIP to ExternalName"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03f942aef3b40f6c70746906f65cbff8a3f26f41", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/03f942aef3b40f6c70746906f65cbff8a3f26f41", "committedDate": "2020-09-16T04:28:10Z", "message": "Fix #2399: Cannot change the type of the Service from ClusterIP to ExternalName"}, "afterCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/44ee47c201c0080d16377d6608d85faeac2aa343", "committedDate": "2020-09-16T07:30:49Z", "message": "Fix #2399: Cannot change the type of the Service from ClusterIP to ExternalName"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NDE1ODM5", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#pullrequestreview-489415839", "createdAt": "2020-09-16T08:55:52Z", "commit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1NTo1MlrOHSnDLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1OTo0MVrOHSnMaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NjIwNA==", "bodyText": "No assertion for ClusterIP ?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489276204", "createdAt": "2020-09-16T08:55:52Z", "author": {"login": "dev-gaur"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NzMwNg==", "bodyText": "The name is a bit misleading.. can we change it to testClusterIpServiceCreateOrReplace ?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489277306", "createdAt": "2020-09-16T08:57:36Z", "author": {"login": "dev-gaur"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");\n+    svc = client.services().inNamespace(session.getNamespace()).createOrReplace(svc);\n+\n+    // Then\n+    assertNotNull(svc);\n+    assertEquals(\"ExternalName\", svc.getSpec().getType());\n+    assertEquals(\"my.database.example.com\", svc.getSpec().getExternalName());\n+  }\n+\n+  @Test\n+  public void testClusterIPCreateOrReplace() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NzYwNg==", "bodyText": "same thing with the name", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489277606", "createdAt": "2020-09-16T08:58:05Z", "author": {"login": "dev-gaur"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");\n+    svc = client.services().inNamespace(session.getNamespace()).createOrReplace(svc);\n+\n+    // Then\n+    assertNotNull(svc);\n+    assertEquals(\"ExternalName\", svc.getSpec().getType());\n+    assertEquals(\"my.database.example.com\", svc.getSpec().getExternalName());\n+  }\n+\n+  @Test\n+  public void testClusterIPCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-clusterip-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withName(\"http\")\n+      .withProtocol(\"TCP\")\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(9376))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(9380));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"ClusterIP\", clusterIPSvc.getSpec().getType());\n+    assertEquals(9380, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testNodePortCreateOrReplace() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODIwMw==", "bodyText": "We should also check for the NodePort value created.", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489278203", "createdAt": "2020-09-16T08:59:04Z", "author": {"login": "dev-gaur"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");\n+    svc = client.services().inNamespace(session.getNamespace()).createOrReplace(svc);\n+\n+    // Then\n+    assertNotNull(svc);\n+    assertEquals(\"ExternalName\", svc.getSpec().getType());\n+    assertEquals(\"my.database.example.com\", svc.getSpec().getExternalName());\n+  }\n+\n+  @Test\n+  public void testClusterIPCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-clusterip-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withName(\"http\")\n+      .withProtocol(\"TCP\")\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(9376))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(9380));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"ClusterIP\", clusterIPSvc.getSpec().getType());\n+    assertEquals(9380, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testNodePortCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-nodeport-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .withType(\"NodePort\")\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(80))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(81));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"NodePort\", clusterIPSvc.getSpec().getType());\n+    assertEquals(81, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODM4OQ==", "bodyText": "name", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489278389", "createdAt": "2020-09-16T08:59:25Z", "author": {"login": "dev-gaur"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");\n+    svc = client.services().inNamespace(session.getNamespace()).createOrReplace(svc);\n+\n+    // Then\n+    assertNotNull(svc);\n+    assertEquals(\"ExternalName\", svc.getSpec().getType());\n+    assertEquals(\"my.database.example.com\", svc.getSpec().getExternalName());\n+  }\n+\n+  @Test\n+  public void testClusterIPCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-clusterip-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withName(\"http\")\n+      .withProtocol(\"TCP\")\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(9376))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(9380));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"ClusterIP\", clusterIPSvc.getSpec().getType());\n+    assertEquals(9380, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testNodePortCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-nodeport-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .withType(\"NodePort\")\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(80))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(81));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"NodePort\", clusterIPSvc.getSpec().getType());\n+    assertEquals(81, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testLoadBalancerCreateOrReplace() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODU3MQ==", "bodyText": "name", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489278571", "createdAt": "2020-09-16T08:59:41Z", "author": {"login": "dev-gaur"}, "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");\n+    svc = client.services().inNamespace(session.getNamespace()).createOrReplace(svc);\n+\n+    // Then\n+    assertNotNull(svc);\n+    assertEquals(\"ExternalName\", svc.getSpec().getType());\n+    assertEquals(\"my.database.example.com\", svc.getSpec().getExternalName());\n+  }\n+\n+  @Test\n+  public void testClusterIPCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-clusterip-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withName(\"http\")\n+      .withProtocol(\"TCP\")\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(9376))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(9380));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"ClusterIP\", clusterIPSvc.getSpec().getType());\n+    assertEquals(9380, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testNodePortCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-nodeport-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .withType(\"NodePort\")\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(80))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(81));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"NodePort\", clusterIPSvc.getSpec().getType());\n+    assertEquals(81, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testLoadBalancerCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-loadbalancer-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .withType(\"LoadBalancer\")\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withProtocol(\"TCP\")\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(9376))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(9380));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"LoadBalancer\", clusterIPSvc.getSpec().getType());\n+    assertEquals(9380, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testExternalNameCreateOrReplace() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAxMTIwODU5", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#pullrequestreview-601120859", "createdAt": "2021-03-01T20:07:47Z", "commit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQyMDowNzo0N1rOIt6dtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQyMDowNzo0N1rOIt6dtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAxNDcxMA==", "bodyText": "Shouldn't the patch also work with ExternalName?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r585014710", "createdAt": "2021-03-01T20:07:47Z", "author": {"login": "jorsol"}, "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/internal/core/v1/ServiceOperationsImpl.java", "diffHunk": "@@ -58,30 +60,21 @@ public ServiceOperationsImpl newInstance(OperationContext context) {\n \n   @Override\n   public Service replace(Service item) {\n-      try {\n-        Service old = fromServer().get();\n-        return super.replace(new ServiceBuilder(item)\n-          .editSpec()\n-          .withClusterIP(old.getSpec().getClusterIP())\n-          .endSpec()\n-          .build());\n-      } catch (Exception e) {\n-        throw KubernetesClientException.launderThrowable(forOperationType(\"replace\"), e);\n-      }\n+    return super.replace(patchClusterIpIntoServiceAndReplace(item));\n   }\n \n   @Override\n   public Service patch(Service item) {\n-      try {\n-        Service old = getMandatory();\n-        return super.patch(new ServiceBuilder(item)\n-          .editSpec()\n-          .withClusterIP(old.getSpec().getClusterIP())\n-          .endSpec()\n-          .build());\n-      } catch (Exception e) {\n-        throw KubernetesClientException.launderThrowable(forOperationType(\"patch\"), e);\n-      }\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3626, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}