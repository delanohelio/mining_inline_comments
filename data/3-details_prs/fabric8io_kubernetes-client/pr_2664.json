{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NDE5MDg3", "number": 2664, "title": "test: Added specific verification for issue #1109", "bodyText": "Description\ntest: Added specific verification for issue #1109\nRelates to #2658\nType of change\n\n\n Bug fix (non-breaking change which fixes an issue)\n Feature (non-breaking change which adds functionality)\n Breaking change (fix or feature that would cause existing functionality to change\n Chore (non-breaking change which doesn't affect codebase;\ntest, version modification, documentation, etc.)\n\nChecklist\n\n Code contributed by me aligns with current project license: Apache 2.0\n I Added CHANGELOG entry regarding this change\n I have implemented unit tests to cover my changes\n I have added/updated the javadocs and other documentation accordingly\n No new bugs, code smells, etc. in SonarCloud report\n I tested my code in Kubernetes\n I tested my code in OpenShift", "createdAt": "2020-12-14T12:37:22Z", "url": "https://github.com/fabric8io/kubernetes-client/pull/2664", "merged": true, "mergeCommit": {"oid": "bdae53fe2ef658131d7267e504fdb7f9bc9365d0"}, "closed": true, "closedAt": "2020-12-14T17:32:20Z", "author": {"login": "manusa"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmFEQgAFqTU1MTMyNzQxNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmIf_AAFqTU1MTU2ODY3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMzI3NDE2", "url": "https://github.com/fabric8io/kubernetes-client/pull/2664#pullrequestreview-551327416", "createdAt": "2020-12-14T12:40:32Z", "commit": {"oid": "f46b715327037fd8dc56815e88c78c6d8557973a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79570183f9d4aceb9d7efee36898bac8d41e5311", "author": {"user": {"login": "manusa", "name": "Marc Nuri"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/79570183f9d4aceb9d7efee36898bac8d41e5311", "committedDate": "2020-12-14T13:45:37Z", "message": "test: Added specific verification for issue #1109"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f46b715327037fd8dc56815e88c78c6d8557973a", "author": {"user": {"login": "manusa", "name": "Marc Nuri"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/f46b715327037fd8dc56815e88c78c6d8557973a", "committedDate": "2020-12-14T12:36:55Z", "message": "test: Added specific verification for issue #1109"}, "afterCommit": {"oid": "79570183f9d4aceb9d7efee36898bac8d41e5311", "author": {"user": {"login": "manusa", "name": "Marc Nuri"}}, "url": "https://github.com/fabric8io/kubernetes-client/commit/79570183f9d4aceb9d7efee36898bac8d41e5311", "committedDate": "2020-12-14T13:45:37Z", "message": "test: Added specific verification for issue #1109"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNTY4Njc0", "url": "https://github.com/fabric8io/kubernetes-client/pull/2664#pullrequestreview-551568674", "createdAt": "2020-12-14T16:34:27Z", "commit": {"oid": "79570183f9d4aceb9d7efee36898bac8d41e5311"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjozNDoyOFrOIFZMvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjozOTowNVrOIFZbRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyNjY1Mw==", "bodyText": "Maybe we should use apiextensions().v1() CustomResourceDefinition instead?", "url": "https://github.com/fabric8io/kubernetes-client/pull/2664#discussion_r542526653", "createdAt": "2020-12-14T16:34:28Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/CustomResourceCrud1109Test.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes.client.mock;\n+\n+import io.fabric8.kubernetes.api.model.apiextensions.v1beta1.CustomResourceDefinition;\n+import io.fabric8.kubernetes.api.model.apiextensions.v1beta1.CustomResourceDefinitionBuilder;\n+import io.fabric8.kubernetes.client.dsl.MixedOperation;\n+import io.fabric8.kubernetes.client.dsl.Resource;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import io.fabric8.kubernetes.client.mock.crd.FooBar;\n+import io.fabric8.kubernetes.client.mock.crd.FooBarList;\n+import io.fabric8.kubernetes.client.server.mock.KubernetesServer;\n+import org.junit.Rule;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.migrationsupport.rules.EnableRuleMigrationSupport;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+@EnableRuleMigrationSupport\n+class CustomResourceCrud1109Test {\n+  @Rule\n+  public KubernetesServer server = new KubernetesServer(true,true);\n+\n+  private CustomResourceDefinition customResourceDefinition;\n+\n+  @BeforeEach\n+  void setUp() {\n+    customResourceDefinition = server.getClient().apiextensions().v1beta1().customResourceDefinitions()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79570183f9d4aceb9d7efee36898bac8d41e5311"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMDM3Mg==", "bodyText": "What do you think about using the single argument customResource method? I think it's more readable and will avoid creation of FooBarList.\nfinal MixedOperation<FooBar, KubernetesResourceList<FooBar>, Resource<FooBar>> fooBarClient = server.getClient().customResources(FooBar.class);", "url": "https://github.com/fabric8io/kubernetes-client/pull/2664#discussion_r542530372", "createdAt": "2020-12-14T16:39:05Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/CustomResourceCrud1109Test.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes.client.mock;\n+\n+import io.fabric8.kubernetes.api.model.apiextensions.v1beta1.CustomResourceDefinition;\n+import io.fabric8.kubernetes.api.model.apiextensions.v1beta1.CustomResourceDefinitionBuilder;\n+import io.fabric8.kubernetes.client.dsl.MixedOperation;\n+import io.fabric8.kubernetes.client.dsl.Resource;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import io.fabric8.kubernetes.client.mock.crd.FooBar;\n+import io.fabric8.kubernetes.client.mock.crd.FooBarList;\n+import io.fabric8.kubernetes.client.server.mock.KubernetesServer;\n+import org.junit.Rule;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.migrationsupport.rules.EnableRuleMigrationSupport;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+@EnableRuleMigrationSupport\n+class CustomResourceCrud1109Test {\n+  @Rule\n+  public KubernetesServer server = new KubernetesServer(true,true);\n+\n+  private CustomResourceDefinition customResourceDefinition;\n+\n+  @BeforeEach\n+  void setUp() {\n+    customResourceDefinition = server.getClient().apiextensions().v1beta1().customResourceDefinitions()\n+      .create(new CustomResourceDefinitionBuilder()\n+      .withNewMetadata()\n+      .withName(\"foo-bar.baz.example.com\")\n+      .endMetadata()\n+      .withNewSpec()\n+      .withGroup(\"baz.example.com\")\n+      .addNewVersion().withName(\"v1alpha1\").endVersion()\n+      .withScope(\"Namespaced\")\n+      .withNewNames()\n+      .withKind(\"FooBar\")\n+      .withPlural(\"foo-bars\")\n+      .withSingular(\"foo-bar\")\n+      .endNames()\n+      .endSpec()\n+      .build());\n+  }\n+\n+  @Test\n+  @DisplayName(\"Fix for issue 1109, verifies resources with dashes can be retrieved\")\n+  void test1109() {\n+    // Given\n+    final MixedOperation<FooBar, FooBarList, Resource<FooBar>> fooBarClient =\n+      server.getClient().customResources(CustomResourceDefinitionContext.fromCrd(customResourceDefinition), FooBar.class, FooBarList.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79570183f9d4aceb9d7efee36898bac8d41e5311"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3569, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}