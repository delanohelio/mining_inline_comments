{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNTc1OTAy", "number": 4825, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTozMzo1NFrOEN31kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDowMjowMlrOERmKBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTgxNzc3OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/jenkins/fingerprints/FingerprintStorageTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTozMzo1NFrOGwt-qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMTozNzo1NlrOG0k9ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczODE1Mw==", "bodyText": "Shouldn't this be private? I'm curious why not have a mock for this object.", "url": "https://github.com/jenkinsci/jenkins/pull/4825#discussion_r453738153", "createdAt": "2020-07-13T15:33:54Z", "author": {"login": "afalko"}, "path": "test/src/test/java/jenkins/fingerprints/FingerprintStorageTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.Util;\n+import hudson.model.Fingerprint;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.jvnet.hudson.test.JenkinsRule;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.hamcrest.core.Is.is;\n+import static org.hamcrest.core.IsNot.not;\n+\n+public class FingerprintStorageTest {\n+\n+    @Rule\n+    public JenkinsRule jenkinsRule = new JenkinsRule();\n+\n+    @Test\n+    public void testLoadingAndSavingLocalStorageFingerprintWithExternalStorage() throws IOException {\n+        String id = Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n+        Fingerprint fingerprintSaved = new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n+        Fingerprint fingerprintLoaded = Fingerprint.load(id);\n+        assertThat(fingerprintLoaded, is(not(nullValue())));\n+        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n+\n+        // After external storage is configured, check if local storage fingerprint is still accessible.\n+        configureExternalStorage();\n+        fingerprintLoaded = Fingerprint.load(id);\n+        assertThat(fingerprintLoaded, is(not(nullValue())));\n+        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n+\n+        // After loading the fingerprint, ensure it was moved to external storage.\n+        fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(TestExternalFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(not(nullValue())));\n+        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n+\n+        // Ensure that the loaded fingerprint was deleted from local storage after being loaded.\n+        fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(FileFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(nullValue()));\n+    }\n+\n+    @Test\n+    public void testLoadingAndSavingFingerprintWithExternalStorage() throws IOException {\n+        configureExternalStorage();\n+        String id = Util.getDigestOf(\"testLoadingAndSavingFingerprintWithExternalStorage\");\n+        Fingerprint fingerprintSaved = new Fingerprint(null, \"bar.jar\", Util.fromHexString(id));\n+        Fingerprint fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(TestExternalFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(not(nullValue())));\n+        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n+    }\n+\n+    @Test\n+    public void testDeletingLocalStorageFingerprintWithExternalStorageBeforeMigration() throws IOException {\n+        String id = Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n+        new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n+        configureExternalStorage();\n+        Fingerprint.delete(id);\n+        Fingerprint fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(FileFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(nullValue()));\n+    }\n+\n+    @Test\n+    public void testDeletingLocalStorageFingerprintWithExternalStorageAfterMigration() throws IOException {\n+        String id = Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n+        new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n+        configureExternalStorage();\n+        Fingerprint.load(id);\n+        Fingerprint.delete(id);\n+        Fingerprint fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(TestExternalFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(nullValue()));\n+    }\n+\n+    @Test\n+    public void testDeletingFingerprintWithExternalStorage() throws IOException {\n+        configureExternalStorage();\n+        String id = Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n+        configureExternalStorage();\n+        new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n+        Fingerprint.delete(id);\n+        Fingerprint fingerprintLoaded = Fingerprint.load(id);\n+        assertThat(fingerprintLoaded, is(nullValue()));\n+    }\n+\n+    private void configureExternalStorage() {\n+        ExtensionList.lookup(FingerprintStorage.class).add(0, new TestExternalFingerprintStorage());\n+    }\n+\n+    public static class TestExternalFingerprintStorage extends FingerprintStorage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6080a6ea4beee3ca8a1fbbb61f601126ea5b463e"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyOTc3NQ==", "bodyText": "I want to re-use this class in another test also. Would you suggest creating this in a separate file? I think that would be better.\nSo would you suggest using something like Mockito for this?", "url": "https://github.com/jenkinsci/jenkins/pull/4825#discussion_r453829775", "createdAt": "2020-07-13T17:58:34Z", "author": {"login": "stellargo"}, "path": "test/src/test/java/jenkins/fingerprints/FingerprintStorageTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.Util;\n+import hudson.model.Fingerprint;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.jvnet.hudson.test.JenkinsRule;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.hamcrest.core.Is.is;\n+import static org.hamcrest.core.IsNot.not;\n+\n+public class FingerprintStorageTest {\n+\n+    @Rule\n+    public JenkinsRule jenkinsRule = new JenkinsRule();\n+\n+    @Test\n+    public void testLoadingAndSavingLocalStorageFingerprintWithExternalStorage() throws IOException {\n+        String id = Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n+        Fingerprint fingerprintSaved = new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n+        Fingerprint fingerprintLoaded = Fingerprint.load(id);\n+        assertThat(fingerprintLoaded, is(not(nullValue())));\n+        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n+\n+        // After external storage is configured, check if local storage fingerprint is still accessible.\n+        configureExternalStorage();\n+        fingerprintLoaded = Fingerprint.load(id);\n+        assertThat(fingerprintLoaded, is(not(nullValue())));\n+        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n+\n+        // After loading the fingerprint, ensure it was moved to external storage.\n+        fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(TestExternalFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(not(nullValue())));\n+        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n+\n+        // Ensure that the loaded fingerprint was deleted from local storage after being loaded.\n+        fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(FileFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(nullValue()));\n+    }\n+\n+    @Test\n+    public void testLoadingAndSavingFingerprintWithExternalStorage() throws IOException {\n+        configureExternalStorage();\n+        String id = Util.getDigestOf(\"testLoadingAndSavingFingerprintWithExternalStorage\");\n+        Fingerprint fingerprintSaved = new Fingerprint(null, \"bar.jar\", Util.fromHexString(id));\n+        Fingerprint fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(TestExternalFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(not(nullValue())));\n+        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n+    }\n+\n+    @Test\n+    public void testDeletingLocalStorageFingerprintWithExternalStorageBeforeMigration() throws IOException {\n+        String id = Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n+        new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n+        configureExternalStorage();\n+        Fingerprint.delete(id);\n+        Fingerprint fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(FileFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(nullValue()));\n+    }\n+\n+    @Test\n+    public void testDeletingLocalStorageFingerprintWithExternalStorageAfterMigration() throws IOException {\n+        String id = Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n+        new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n+        configureExternalStorage();\n+        Fingerprint.load(id);\n+        Fingerprint.delete(id);\n+        Fingerprint fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(TestExternalFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(nullValue()));\n+    }\n+\n+    @Test\n+    public void testDeletingFingerprintWithExternalStorage() throws IOException {\n+        configureExternalStorage();\n+        String id = Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n+        configureExternalStorage();\n+        new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n+        Fingerprint.delete(id);\n+        Fingerprint fingerprintLoaded = Fingerprint.load(id);\n+        assertThat(fingerprintLoaded, is(nullValue()));\n+    }\n+\n+    private void configureExternalStorage() {\n+        ExtensionList.lookup(FingerprintStorage.class).add(0, new TestExternalFingerprintStorage());\n+    }\n+\n+    public static class TestExternalFingerprintStorage extends FingerprintStorage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczODE1Mw=="}, "originalCommit": {"oid": "6080a6ea4beee3ca8a1fbbb61f601126ea5b463e"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzNjMzMg==", "bodyText": "I think using Mockito might be better (you get coverage on the actual class instead of your test class) and lighter-weight, no?", "url": "https://github.com/jenkinsci/jenkins/pull/4825#discussion_r453836332", "createdAt": "2020-07-13T18:10:05Z", "author": {"login": "afalko"}, "path": "test/src/test/java/jenkins/fingerprints/FingerprintStorageTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.Util;\n+import hudson.model.Fingerprint;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.jvnet.hudson.test.JenkinsRule;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.hamcrest.core.Is.is;\n+import static org.hamcrest.core.IsNot.not;\n+\n+public class FingerprintStorageTest {\n+\n+    @Rule\n+    public JenkinsRule jenkinsRule = new JenkinsRule();\n+\n+    @Test\n+    public void testLoadingAndSavingLocalStorageFingerprintWithExternalStorage() throws IOException {\n+        String id = Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n+        Fingerprint fingerprintSaved = new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n+        Fingerprint fingerprintLoaded = Fingerprint.load(id);\n+        assertThat(fingerprintLoaded, is(not(nullValue())));\n+        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n+\n+        // After external storage is configured, check if local storage fingerprint is still accessible.\n+        configureExternalStorage();\n+        fingerprintLoaded = Fingerprint.load(id);\n+        assertThat(fingerprintLoaded, is(not(nullValue())));\n+        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n+\n+        // After loading the fingerprint, ensure it was moved to external storage.\n+        fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(TestExternalFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(not(nullValue())));\n+        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n+\n+        // Ensure that the loaded fingerprint was deleted from local storage after being loaded.\n+        fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(FileFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(nullValue()));\n+    }\n+\n+    @Test\n+    public void testLoadingAndSavingFingerprintWithExternalStorage() throws IOException {\n+        configureExternalStorage();\n+        String id = Util.getDigestOf(\"testLoadingAndSavingFingerprintWithExternalStorage\");\n+        Fingerprint fingerprintSaved = new Fingerprint(null, \"bar.jar\", Util.fromHexString(id));\n+        Fingerprint fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(TestExternalFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(not(nullValue())));\n+        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n+    }\n+\n+    @Test\n+    public void testDeletingLocalStorageFingerprintWithExternalStorageBeforeMigration() throws IOException {\n+        String id = Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n+        new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n+        configureExternalStorage();\n+        Fingerprint.delete(id);\n+        Fingerprint fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(FileFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(nullValue()));\n+    }\n+\n+    @Test\n+    public void testDeletingLocalStorageFingerprintWithExternalStorageAfterMigration() throws IOException {\n+        String id = Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n+        new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n+        configureExternalStorage();\n+        Fingerprint.load(id);\n+        Fingerprint.delete(id);\n+        Fingerprint fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(TestExternalFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(nullValue()));\n+    }\n+\n+    @Test\n+    public void testDeletingFingerprintWithExternalStorage() throws IOException {\n+        configureExternalStorage();\n+        String id = Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n+        configureExternalStorage();\n+        new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n+        Fingerprint.delete(id);\n+        Fingerprint fingerprintLoaded = Fingerprint.load(id);\n+        assertThat(fingerprintLoaded, is(nullValue()));\n+    }\n+\n+    private void configureExternalStorage() {\n+        ExtensionList.lookup(FingerprintStorage.class).add(0, new TestExternalFingerprintStorage());\n+    }\n+\n+    public static class TestExternalFingerprintStorage extends FingerprintStorage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczODE1Mw=="}, "originalCommit": {"oid": "6080a6ea4beee3ca8a1fbbb61f601126ea5b463e"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc4NDc3MQ==", "bodyText": "The only problem I think is that I want to test the functionality too. IIUC Mockito will give me a placeholder, but it cannot act as an external storage, which I want to test if it is working or not.", "url": "https://github.com/jenkinsci/jenkins/pull/4825#discussion_r457784771", "createdAt": "2020-07-21T01:37:56Z", "author": {"login": "stellargo"}, "path": "test/src/test/java/jenkins/fingerprints/FingerprintStorageTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.Util;\n+import hudson.model.Fingerprint;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.jvnet.hudson.test.JenkinsRule;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.hamcrest.core.Is.is;\n+import static org.hamcrest.core.IsNot.not;\n+\n+public class FingerprintStorageTest {\n+\n+    @Rule\n+    public JenkinsRule jenkinsRule = new JenkinsRule();\n+\n+    @Test\n+    public void testLoadingAndSavingLocalStorageFingerprintWithExternalStorage() throws IOException {\n+        String id = Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n+        Fingerprint fingerprintSaved = new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n+        Fingerprint fingerprintLoaded = Fingerprint.load(id);\n+        assertThat(fingerprintLoaded, is(not(nullValue())));\n+        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n+\n+        // After external storage is configured, check if local storage fingerprint is still accessible.\n+        configureExternalStorage();\n+        fingerprintLoaded = Fingerprint.load(id);\n+        assertThat(fingerprintLoaded, is(not(nullValue())));\n+        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n+\n+        // After loading the fingerprint, ensure it was moved to external storage.\n+        fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(TestExternalFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(not(nullValue())));\n+        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n+\n+        // Ensure that the loaded fingerprint was deleted from local storage after being loaded.\n+        fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(FileFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(nullValue()));\n+    }\n+\n+    @Test\n+    public void testLoadingAndSavingFingerprintWithExternalStorage() throws IOException {\n+        configureExternalStorage();\n+        String id = Util.getDigestOf(\"testLoadingAndSavingFingerprintWithExternalStorage\");\n+        Fingerprint fingerprintSaved = new Fingerprint(null, \"bar.jar\", Util.fromHexString(id));\n+        Fingerprint fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(TestExternalFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(not(nullValue())));\n+        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n+    }\n+\n+    @Test\n+    public void testDeletingLocalStorageFingerprintWithExternalStorageBeforeMigration() throws IOException {\n+        String id = Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n+        new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n+        configureExternalStorage();\n+        Fingerprint.delete(id);\n+        Fingerprint fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(FileFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(nullValue()));\n+    }\n+\n+    @Test\n+    public void testDeletingLocalStorageFingerprintWithExternalStorageAfterMigration() throws IOException {\n+        String id = Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n+        new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n+        configureExternalStorage();\n+        Fingerprint.load(id);\n+        Fingerprint.delete(id);\n+        Fingerprint fingerprintLoaded = ExtensionList.lookup(FingerprintStorage.class).get(TestExternalFingerprintStorage.class).load(id);\n+        assertThat(fingerprintLoaded, is(nullValue()));\n+    }\n+\n+    @Test\n+    public void testDeletingFingerprintWithExternalStorage() throws IOException {\n+        configureExternalStorage();\n+        String id = Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n+        configureExternalStorage();\n+        new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n+        Fingerprint.delete(id);\n+        Fingerprint fingerprintLoaded = Fingerprint.load(id);\n+        assertThat(fingerprintLoaded, is(nullValue()));\n+    }\n+\n+    private void configureExternalStorage() {\n+        ExtensionList.lookup(FingerprintStorage.class).add(0, new TestExternalFingerprintStorage());\n+    }\n+\n+    public static class TestExternalFingerprintStorage extends FingerprintStorage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczODE1Mw=="}, "originalCommit": {"oid": "6080a6ea4beee3ca8a1fbbb61f601126ea5b463e"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTgyODk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTozNjoxNFrOGwuFOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTozNjoxNFrOGwuFOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczOTgzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * In case an external storage is configured on top of a file system based storage, first external storage is\n          \n          \n            \n                 * In case an external storage is configured on top of a file system based storage: \n          \n          \n            \n            \n          \n          \n            \n                 1) External storage is...\n          \n          \n            \n                 2) If not found and fingerprint is present...\n          \n      \n    \n    \n  \n\nThis description is difficult to read, see above suggestion on how to refactor it (basically don't have one long run-on sentence here :))", "url": "https://github.com/jenkinsci/jenkins/pull/4825#discussion_r453739832", "createdAt": "2020-07-13T15:36:14Z", "author": {"login": "afalko"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1316,6 +1316,10 @@ public Api getApi() {\n      * Loads a {@link Fingerprint} from the Storage with the given unique id.\n      * @return Loaded {@link Fingerprint}. {@code null} if the config file does not exist or\n      * malformed.\n+     *\n+     * In case an external storage is configured on top of a file system based storage, first external storage is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6080a6ea4beee3ca8a1fbbb61f601126ea5b463e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODg2MDk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDowMDo1NlrOG2ZjhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMzo1MjoxMVrOG2iaZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5NDk4MA==", "bodyText": "Would be better to cache the storage implementations as local variables (current storage and then the Filesystem one). Apart from performance benefits, it reduces the chance of the logic exploding in unlikely case when the Storage gets reconfigured in the middle of the load() operation. Multi-threading \ud83e\udd37", "url": "https://github.com/jenkinsci/jenkins/pull/4825#discussion_r459694980", "createdAt": "2020-07-23T20:00:56Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1324,7 +1328,17 @@ public Api getApi() {\n         }\n \n         Fingerprint loaded = FingerprintStorage.get().load(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a4e30d15dd0297bb7f2bb8f6860931d48b6063"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0MDEwMg==", "bodyText": "I agree, thanks for pointing it out :) Done!", "url": "https://github.com/jenkinsci/jenkins/pull/4825#discussion_r459840102", "createdAt": "2020-07-24T03:52:11Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1324,7 +1328,17 @@ public Api getApi() {\n         }\n \n         Fingerprint loaded = FingerprintStorage.get().load(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5NDk4MA=="}, "originalCommit": {"oid": "e7a4e30d15dd0297bb7f2bb8f6860931d48b6063"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODg2NDA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDowMjowMlrOG2ZluA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDowMjowMlrOG2ZluA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5NTU0NA==", "bodyText": "Same as above", "url": "https://github.com/jenkinsci/jenkins/pull/4825#discussion_r459695544", "createdAt": "2020-07-23T20:02:02Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1357,12 +1371,17 @@ public Api getApi() {\n     }\n \n     /**\n-     * Deletes the {@link Fingerprint} in the Storage with the given unique id.\n+     * Deletes the {@link Fingerprint} in the configured storage with the given unique id.\n      *\n      * @since TODO\n      */\n     public static void delete(@NonNull String id) throws IOException {\n         FingerprintStorage.get().delete(id);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a4e30d15dd0297bb7f2bb8f6860931d48b6063"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 264, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}