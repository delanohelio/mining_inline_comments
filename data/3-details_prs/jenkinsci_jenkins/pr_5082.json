{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NzA2NzIz", "number": 5082, "title": "[JENKINS-58101] Cache blockage reasons when considering parked executors", "bodyText": "See JENKINS-58101.\nLooking to reduce the lock contention on the queue.\nPerhaps we should cache it for the entire loop \n  \n    \n      jenkins/core/src/main/java/hudson/model/Queue.java\n    \n    \n        Lines 1607 to 1685\n      in\n      a36ac5f\n    \n    \n    \n    \n\n        \n          \n           for (BuildableItem p : new ArrayList<>( \n        \n\n        \n          \n                   buildables)) {// copy as we'll mutate the list in the loop \n        \n\n        \n          \n               // one last check to make sure this build is not blocked. \n        \n\n        \n          \n               CauseOfBlockage causeOfBlockage = getCauseOfBlockageForItem(p); \n        \n\n        \n          \n               if (causeOfBlockage != null) { \n        \n\n        \n          \n                   p.leave(this); \n        \n\n        \n          \n                   new BlockedItem(p, causeOfBlockage).enter(this); \n        \n\n        \n          \n                   LOGGER.log(Level.FINE, \"Catching that {0} is blocked in the last minute\", p); \n        \n\n        \n          \n                   // JENKINS-28926 we have moved an unblocked task into the blocked state, update snapshot \n        \n\n        \n          \n                   // so that other buildables which might have been blocked by this can see the state change \n        \n\n        \n          \n                   updateSnapshot(); \n        \n\n        \n          \n                   continue; \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               String taskDisplayName = LOGGER.isLoggable(Level.FINEST) ? p.task.getFullDisplayName() : null; \n        \n\n        \n          \n            \n        \n\n        \n          \n               if (p.task instanceof FlyweightTask) { \n        \n\n        \n          \n                   Runnable r = makeFlyWeightTaskBuildable(new BuildableItem(p)); \n        \n\n        \n          \n                   if (r != null) { \n        \n\n        \n          \n                       p.leave(this); \n        \n\n        \n          \n                       LOGGER.log(Level.FINEST, \"Executing flyweight task {0}\", taskDisplayName); \n        \n\n        \n          \n                       r.run(); \n        \n\n        \n          \n                       updateSnapshot(); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n               } else { \n        \n\n        \n          \n            \n        \n\n        \n          \n                   List<JobOffer> candidates = new ArrayList<>(parked.size()); \n        \n\n        \n          \n                   List<CauseOfBlockage> reasons = new ArrayList<>(parked.size()); \n        \n\n        \n          \n                   for (JobOffer j : parked.values()) { \n        \n\n        \n          \n                       CauseOfBlockage reason = j.getCauseOfBlockage(p); \n        \n\n        \n          \n                       if (reason == null) { \n        \n\n        \n          \n                           LOGGER.log(Level.FINEST, \n        \n\n        \n          \n                                   \"{0} is a potential candidate for task {1}\", \n        \n\n        \n          \n                                   new Object[]{j, taskDisplayName}); \n        \n\n        \n          \n                           candidates.add(j); \n        \n\n        \n          \n                       } else { \n        \n\n        \n          \n                           LOGGER.log(Level.FINEST, \"{0} rejected {1}: {2}\", new Object[] {j, taskDisplayName, reason}); \n        \n\n        \n          \n                           reasons.add(reason); \n        \n\n        \n          \n                       } \n        \n\n        \n          \n                   } \n        \n\n        \n          \n            \n        \n\n        \n          \n                   MappingWorksheet ws = new MappingWorksheet(p, candidates); \n        \n\n        \n          \n                   Mapping m = loadBalancer.map(p.task, ws); \n        \n\n        \n          \n                   if (m == null) { \n        \n\n        \n          \n                       // if we couldn't find the executor that fits, \n        \n\n        \n          \n                       // just leave it in the buildables list and \n        \n\n        \n          \n                       // check if we can execute other projects \n        \n\n        \n          \n                       LOGGER.log(Level.FINER, \"Failed to map {0} to executors. candidates={1} parked={2}\", \n        \n\n        \n          \n                               new Object[]{p, candidates, parked.values()}); \n        \n\n        \n          \n                       p.transientCausesOfBlockage = reasons.isEmpty() ? null : reasons; \n        \n\n        \n          \n                       continue; \n        \n\n        \n          \n                   } \n        \n\n        \n          \n            \n        \n\n        \n          \n                   // found a matching executor. use it. \n        \n\n        \n          \n                   WorkUnitContext wuc = new WorkUnitContext(p); \n        \n\n        \n          \n                   LOGGER.log(Level.FINEST, \"Found a matching executor for {0}. Using it.\", taskDisplayName); \n        \n\n        \n          \n                   m.execute(wuc); \n        \n\n        \n          \n            \n        \n\n        \n          \n                   p.leave(this); \n        \n\n        \n          \n                   if (!wuc.getWorkUnits().isEmpty()) { \n        \n\n        \n          \n                       LOGGER.log(Level.FINEST, \"BuildableItem {0} marked as pending.\", taskDisplayName); \n        \n\n        \n          \n                       makePending(p); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n                   else \n        \n\n        \n          \n                       LOGGER.log(Level.FINEST, \"BuildableItem {0} with empty work units!?\", p); \n        \n\n        \n          \n            \n        \n\n        \n          \n                   // Ensure that identification of blocked tasks is using the live state: JENKINS-27708 & JENKINS-27871 \n        \n\n        \n          \n                   // The creation of a snapshot itself should be relatively cheap given the expected rate of \n        \n\n        \n          \n                   // job execution. You probably would need 100's of jobs starting execution every iteration \n        \n\n        \n          \n                   // of maintain() before this could even start to become an issue and likely the calculation \n        \n\n        \n          \n                   // of getCauseOfBlockageForItem(p) will become a bottleneck before updateSnapshot() will. Additionally \n        \n\n        \n          \n                   // since the snapshot itself only ever has at most one reference originating outside of the stack \n        \n\n        \n          \n                   // it should remain in the eden space and thus be cheap to GC. \n        \n\n        \n          \n                   // See https://jenkins-ci.org/issue/27708?focusedCommentId=225819&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-225819 \n        \n\n        \n          \n                   // or https://jenkins-ci.org/issue/27708?focusedCommentId=225906&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-225906 \n        \n\n        \n          \n                   // for alternative fixes of this issue. \n        \n\n        \n          \n                   updateSnapshot(); \n        \n\n        \n          \n               } \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nBut the cause of blockage does change between items due to \n  \n    \n      jenkins/core/src/main/java/hudson/model/Queue.java\n    \n    \n         Line 277\n      in\n      a36ac5f\n    \n    \n    \n    \n\n        \n          \n           CauseOfBlockage reason = node.canTake(item); \n        \n    \n  \n\n\nProposed changelog entries\n\nEntry 1: JENKINS-58101, Reduce lock contention around jenkins queue\n...\n\n\nProposed upgrade guidelines\nN/A\nSubmitter checklist\n\n (If applicable) Jira issue is well described\n Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). Examples\n\nFill-in the Proposed changelog entries section only if there are breaking changes or other changes which may require extra steps from users during the upgrade\n\n\n Appropriate autotests or explanation to why this change has no tests\n For dependency updates: links to external changelogs and, if possible, full diffs\n\n\nDesired reviewers\n@mention\n\nMaintainer checklist\nBefore the changes are marked as ready-for-merge:\n\n There are at least 2 approvals for the pull request and no outstanding requests for change\n Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n Changelog entries in the PR title and/or Proposed changelog entries are correct\n Proper changelog labels are set so that the changelog can be generated automatically\n If the change needs additional upgrade steps from users, upgrade-guide-needed label is set and there is a Proposed upgrade guidelines section in the PR title. (example)\n If it would make sense to backport the change to LTS, a Jira issue must exist, be a Bug or Improvement, and be labeled as lts-candidate to be considered (see query).", "createdAt": "2020-11-27T16:38:07Z", "url": "https://github.com/jenkinsci/jenkins/pull/5082", "merged": true, "mergeCommit": {"oid": "86f6bb31d959097113ad35c439fe2fa285d14ad3"}, "closed": true, "closedAt": "2021-01-02T17:21:55Z", "author": {"login": "res0nance"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgqJUOAH2gAyNTI4NzA2NzIzOjE2OGZlMTg1Nzc5OWYxMGVlZjI0M2Q1OTk2ZTg5NGE3MWI5ODA3Mjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnyxZCgFqTU1NTk2NjU0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "168fe1857799f10eef243d5996e894a71b980728", "author": {"user": {"login": "res0nance", "name": "Raihaan Shouhell"}}, "url": "https://github.com/jenkinsci/jenkins/commit/168fe1857799f10eef243d5996e894a71b980728", "committedDate": "2020-11-27T16:29:00Z", "message": "Cache blockage reasons"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMjAyNTE2", "url": "https://github.com/jenkinsci/jenkins/pull/5082#pullrequestreview-540202516", "createdAt": "2020-11-27T22:15:15Z", "commit": {"oid": "168fe1857799f10eef243d5996e894a71b980728"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjoxNToxNVrOH7KVHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjoxNToxNVrOH7KVHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5NzI3Ng==", "bodyText": "Putting null to reasonMap is expected IIUC\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    CauseOfBlockage reason;\n          \n          \n            \n                                    if (reasonMap.containsKey(offerNode)) {\n          \n          \n            \n                                        reason = reasonMap.get(offerNode);\n          \n          \n            \n                                    } else {\n          \n          \n            \n                                        reason = j.getCauseOfBlockage(p);\n          \n          \n            \n                                        reasonMap.put(offerNode, reason);\n          \n          \n            \n                                    }\n          \n          \n            \n                                    CauseOfBlockage reason = reasonMap.get(offerNode);\n          \n          \n            \n                                    if (reason == null) {\n          \n          \n            \n                                        reason = j.getCauseOfBlockage(p);\n          \n          \n            \n                                        reasonMap.put(offerNode, reason);\n          \n          \n            \n                                    }", "url": "https://github.com/jenkinsci/jenkins/pull/5082#discussion_r531797276", "createdAt": "2020-11-27T22:15:15Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Queue.java", "diffHunk": "@@ -1631,17 +1632,23 @@ public void maintain() {\n                 } else {\n \n                     List<JobOffer> candidates = new ArrayList<>(parked.size());\n-                    List<CauseOfBlockage> reasons = new ArrayList<>(parked.size());\n+                    Map<Node, CauseOfBlockage> reasonMap = new HashMap<>();\n                     for (JobOffer j : parked.values()) {\n-                        CauseOfBlockage reason = j.getCauseOfBlockage(p);\n+                        Node offerNode = j.getNode();\n+                        CauseOfBlockage reason;\n+                        if (reasonMap.containsKey(offerNode)) {\n+                            reason = reasonMap.get(offerNode);\n+                        } else {\n+                            reason = j.getCauseOfBlockage(p);\n+                            reasonMap.put(offerNode, reason);\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "168fe1857799f10eef243d5996e894a71b980728"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTY2NTQ3", "url": "https://github.com/jenkinsci/jenkins/pull/5082#pullrequestreview-555966547", "createdAt": "2020-12-19T20:29:29Z", "commit": {"oid": "168fe1857799f10eef243d5996e894a71b980728"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1867, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}