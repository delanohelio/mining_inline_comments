{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDMzMzg0", "number": 4655, "title": "[JENKINS-61841] Limit the number of exceptions stored by CompositeIOException", "bodyText": "See JENKINS-61841.\nThis PR truncates the list of exceptions passed to CompositeIOException to only contain the first 10 exceptions. I expect that the only callers of new CompositeIOException() that will be affected by this limit in practice are PathRemover.forceRemoveDirectoryContents and PathRemover.forceRemoveRecursive, but LogRotator.perform could potentially run into this issue as well, so I thought it made sense to perform the truncation in CompositeIOException itself. 10 was my rough guess for the point where additional exceptions are probably going to contain mostly redundant information. Right now, this value is not configurable by users, but I am happy to make it configurable as a system property or change the default value if desired.\n\nProposed changelog entries\n\nRobustness: Limit the number of exceptions thrown by some operations such as recursive directory deletion. Previously, in rare cases, exceptions thrown when failing to delete large directories could consume significant amounts of memory.\n\n\nProposed upgrade guidelines\nN/A\nSubmitter checklist\n\n JIRA issue is well described\n Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). Examples\n\nFill-in the Proposed changelog entries section only if there are breaking changes or other changes which may require extra steps from users during the upgrade\n\n\n Appropriate autotests or explanation to why this change has no tests\n For dependency updates: links to external changelogs and, if possible, full diffs\n\n\nDesired reviewers\n\nMaintainer checklist\nBefore the changes are marked as ready-for-merge:\n\n There are at least 2 approvals for the pull request and no outstanding requests for change\n Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n Changelog entries in the PR title and/or Proposed changelog entries are correct\n Proper changelog labels are set so that the changelog can be generated automatically\n If the change needs additional upgrade steps from users, upgrade-guide-needed label is set and there is a Proposed upgrade guidelines section in the PR title. (example)\n If it would make sense to backport the change to LTS, a JIRA issue should exist and be labeled as lts-candidate", "createdAt": "2020-04-14T21:53:55Z", "url": "https://github.com/jenkinsci/jenkins/pull/4655", "merged": true, "mergeCommit": {"oid": "c3e2f20d4caf7159d93db52665e5ec72930c6d02"}, "closed": true, "closedAt": "2020-04-29T11:00:39Z", "author": {"login": "dwnusbaum"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXqqBRgH2gAyNDAzNDMzMzg0OmFjYjJmZjAwZGU1MGY0ZTJhZDdjOWNmZTVhOWI1Mjk3YWE2NGU4ZDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaad1fAFqTM5ODk3MzU2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7", "author": {"user": {"login": "dwnusbaum", "name": "Devin Nusbaum"}}, "url": "https://github.com/jenkinsci/jenkins/commit/acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7", "committedDate": "2020-04-14T21:48:15Z", "message": "[JENKINS-61841] Limit the number of exceptions stored by CompositeIOException"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMzIzNjcz", "url": "https://github.com/jenkinsci/jenkins/pull/4655#pullrequestreview-393323673", "createdAt": "2020-04-14T21:54:52Z", "commit": {"oid": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTo1NDo1MlrOGFiYQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTo1OTozMlrOGFigew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1OTMyOA==", "bodyText": "Not strictly necessary, but seemed better to be safe than sorry in case someone makes a change that affects the auto-computed serialVersionUID in the future.", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r408459328", "createdAt": "2020-04-14T21:54:52Z", "author": {"login": "dwnusbaum"}, "path": "core/src/main/java/jenkins/util/io/CompositeIOException.java", "diffHunk": "@@ -30,19 +30,52 @@\n import edu.umd.cs.findbugs.annotations.NonNull;\n import java.io.IOException;\n import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n @Restricted(NoExternalUse.class)\n public class CompositeIOException extends IOException {\n+    private static final long serialVersionUID = 121943141387608148L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1OTU3OQ==", "bodyText": "Not sure about naming, maybe EXCEPTIONS_LIMIT or MAX_REPORTED_EXCEPTIONS would be better. Same with the limit, maybe 15 or 20 would be a better default?", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r408459579", "createdAt": "2020-04-14T21:55:26Z", "author": {"login": "dwnusbaum"}, "path": "core/src/main/java/jenkins/util/io/CompositeIOException.java", "diffHunk": "@@ -30,19 +30,52 @@\n import edu.umd.cs.findbugs.annotations.NonNull;\n import java.io.IOException;\n import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n @Restricted(NoExternalUse.class)\n public class CompositeIOException extends IOException {\n+    private static final long serialVersionUID = 121943141387608148L;\n+\n+    /**\n+     * The maximum number of exceptions that can be reported by a single\n+     * {@code CompositeIOException}.\n+     * <p>\n+     * The number of exceptions is limited to avoid pathological cases where\n+     * where a huge number of exceptions could lead to excessive memory usage.\n+     * For example, if the number of exceptions was unlimited, a call to\n+     * {@code Util.deleteRecursive} could fail with a\n+     * {@code CompositeIOException} that contains an exception for every\n+     * single file inside of the directory.\n+     */\n+    public static final int EXCEPTION_LIMIT = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MDA3Ng==", "bodyText": "I think that it is important to show users that there were more errors that are not being reported, but IDK if this is the best way to do it. We could also append a message to the message of the CompositeIOException itself.", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r408460076", "createdAt": "2020-04-14T21:56:36Z", "author": {"login": "dwnusbaum"}, "path": "core/src/main/java/jenkins/util/io/CompositeIOException.java", "diffHunk": "@@ -30,19 +30,52 @@\n import edu.umd.cs.findbugs.annotations.NonNull;\n import java.io.IOException;\n import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n @Restricted(NoExternalUse.class)\n public class CompositeIOException extends IOException {\n+    private static final long serialVersionUID = 121943141387608148L;\n+\n+    /**\n+     * The maximum number of exceptions that can be reported by a single\n+     * {@code CompositeIOException}.\n+     * <p>\n+     * The number of exceptions is limited to avoid pathological cases where\n+     * where a huge number of exceptions could lead to excessive memory usage.\n+     * For example, if the number of exceptions was unlimited, a call to\n+     * {@code Util.deleteRecursive} could fail with a\n+     * {@code CompositeIOException} that contains an exception for every\n+     * single file inside of the directory.\n+     */\n+    public static final int EXCEPTION_LIMIT = 10;\n+\n     private final List<IOException> exceptions;\n \n+    /**\n+     * Construct a new {@code CompositeIOException} where the given list of\n+     * exceptions are added as suppressed exceptions to the new exception.\n+     * <p>\n+     * If the given list of exceptions is longer than {@link #EXCEPTION_LIMIT},\n+     * the list will be truncated to that length, and an exception whose message\n+     * contains the number of exceptions that were removed will be added as a\n+     * suppressed exception to the new exception.\n+     */\n     public CompositeIOException(String message, @NonNull List<IOException> exceptions) {\n         super(message);\n-        this.exceptions = exceptions;\n-        exceptions.forEach(this::addSuppressed);\n+        if (exceptions.size() > EXCEPTION_LIMIT) {\n+            this.exceptions = new ArrayList<>(exceptions.subList(0, EXCEPTION_LIMIT));\n+            this.exceptions.add(new ExceptionLimitReached(exceptions.size() - EXCEPTION_LIMIT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MDI4NQ==", "bodyText": "Not sure how to test this on other platforms without a ton of mocking, which I wanted to avoid.", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r408460285", "createdAt": "2020-04-14T21:57:05Z", "author": {"login": "dwnusbaum"}, "path": "core/src/test/java/jenkins/util/io/PathRemoverTest.java", "diffHunk": "@@ -418,6 +424,34 @@ public void testForceRemoveRecursive_ParentIsSymbolicLink() throws IOException {\n         assertFalse(d1.exists());\n     }\n \n+    @Test\n+    @Issue(\"JENKINS-55448\")\n+    public void testForceRemoveRecursive_TruncatesNumberOfExceptions() throws IOException {\n+        assumeTrue(Functions.isWindows());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MTQzNQ==", "bodyText": "Now that org.junit.Assert.assertThat is deprecated, we have to import all of the methods individually so that we can import and use org.hamcrest.MatcherAssert.assertThat to avoid deprecation warnings without having to write that out fully-qualified every time.", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r408461435", "createdAt": "2020-04-14T21:59:32Z", "author": {"login": "dwnusbaum"}, "path": "core/src/test/java/jenkins/util/io/PathRemoverTest.java", "diffHunk": "@@ -51,10 +51,16 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.arrayWithSize;\n import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.hasItem;\n-import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzODAyNzAz", "url": "https://github.com/jenkinsci/jenkins/pull/4655#pullrequestreview-393802703", "createdAt": "2020-04-15T14:01:02Z", "commit": {"oid": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDowMTowMlrOGF7Kng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDowMTowMlrOGF7Kng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2NTQzOA==", "bodyText": "Notably in this case, the suppressed exceptions in the outer CompositeIOException are actually instances of CompositeIOException themselves because of the fallback behavior in PathRemover.removeOrMakeRemovableThenRemove, each with two suppressed instances of FileSystemException. That means that the worst-case number of exceptions in a single CompositeIOException for the deletion operations in PathRemover with this patch is actually CompositeIOException.EXCEPTION_LIMIT * 3.", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r408865438", "createdAt": "2020-04-15T14:01:02Z", "author": {"login": "dwnusbaum"}, "path": "core/src/test/java/jenkins/util/io/PathRemoverTest.java", "diffHunk": "@@ -418,6 +424,34 @@ public void testForceRemoveRecursive_ParentIsSymbolicLink() throws IOException {\n         assertFalse(d1.exists());\n     }\n \n+    @Test\n+    @Issue(\"JENKINS-55448\")\n+    public void testForceRemoveRecursive_TruncatesNumberOfExceptions() throws IOException {\n+        assumeTrue(Functions.isWindows());\n+        final int maxExceptions = CompositeIOException.EXCEPTION_LIMIT;\n+        final int lockedFiles = maxExceptions + 5;\n+        final int totalFiles = lockedFiles + 5;\n+        File dir = tmp.newFolder();\n+        File[] files = new File[totalFiles];\n+        for (int i = 0; i < totalFiles; i++) {\n+            files[i] = new File(dir, \"f\" + i);\n+        }\n+        touchWithFileName(files);\n+        for (int i = 0; i < lockedFiles; i++) {\n+            locker.acquireLock(files[i]);\n+        }\n+        try {\n+            PathRemover.newSimpleRemover().forceRemoveRecursive(dir.toPath());\n+            fail(\"Deletion should have failed\");\n+        } catch (CompositeIOException e) {\n+            assertThat(e.getSuppressed(), arrayWithSize(maxExceptions + 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTA0MTQ3", "url": "https://github.com/jenkinsci/jenkins/pull/4655#pullrequestreview-394504147", "createdAt": "2020-04-16T10:31:52Z", "commit": {"oid": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDozMTo1MlrOGGfA_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDozNDo0NlrOGGfH_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1Mjc5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * where a huge number of exceptions could lead to excessive memory usage.\n          \n          \n            \n                 * a huge number of exceptions could lead to excessive memory usage.", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r409452798", "createdAt": "2020-04-16T10:31:52Z", "author": {"login": "varyvol"}, "path": "core/src/main/java/jenkins/util/io/CompositeIOException.java", "diffHunk": "@@ -30,19 +30,52 @@\n import edu.umd.cs.findbugs.annotations.NonNull;\n import java.io.IOException;\n import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n @Restricted(NoExternalUse.class)\n public class CompositeIOException extends IOException {\n+    private static final long serialVersionUID = 121943141387608148L;\n+\n+    /**\n+     * The maximum number of exceptions that can be reported by a single\n+     * {@code CompositeIOException}.\n+     * <p>\n+     * The number of exceptions is limited to avoid pathological cases where\n+     * where a huge number of exceptions could lead to excessive memory usage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1NDU5MA==", "bodyText": "Seems reasonable!", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r409454590", "createdAt": "2020-04-16T10:34:46Z", "author": {"login": "varyvol"}, "path": "core/src/main/java/jenkins/util/io/CompositeIOException.java", "diffHunk": "@@ -30,19 +30,52 @@\n import edu.umd.cs.findbugs.annotations.NonNull;\n import java.io.IOException;\n import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n @Restricted(NoExternalUse.class)\n public class CompositeIOException extends IOException {\n+    private static final long serialVersionUID = 121943141387608148L;\n+\n+    /**\n+     * The maximum number of exceptions that can be reported by a single\n+     * {@code CompositeIOException}.\n+     * <p>\n+     * The number of exceptions is limited to avoid pathological cases where\n+     * where a huge number of exceptions could lead to excessive memory usage.\n+     * For example, if the number of exceptions was unlimited, a call to\n+     * {@code Util.deleteRecursive} could fail with a\n+     * {@code CompositeIOException} that contains an exception for every\n+     * single file inside of the directory.\n+     */\n+    public static final int EXCEPTION_LIMIT = 10;\n+\n     private final List<IOException> exceptions;\n \n+    /**\n+     * Construct a new {@code CompositeIOException} where the given list of\n+     * exceptions are added as suppressed exceptions to the new exception.\n+     * <p>\n+     * If the given list of exceptions is longer than {@link #EXCEPTION_LIMIT},\n+     * the list will be truncated to that length, and an exception whose message\n+     * contains the number of exceptions that were removed will be added as a\n+     * suppressed exception to the new exception.\n+     */\n     public CompositeIOException(String message, @NonNull List<IOException> exceptions) {\n         super(message);\n-        this.exceptions = exceptions;\n-        exceptions.forEach(this::addSuppressed);\n+        if (exceptions.size() > EXCEPTION_LIMIT) {\n+            this.exceptions = new ArrayList<>(exceptions.subList(0, EXCEPTION_LIMIT));\n+            this.exceptions.add(new ExceptionLimitReached(exceptions.size() - EXCEPTION_LIMIT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MDA3Ng=="}, "originalCommit": {"oid": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTA1NzU4", "url": "https://github.com/jenkinsci/jenkins/pull/4655#pullrequestreview-394505758", "createdAt": "2020-04-16T10:34:05Z", "commit": {"oid": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDozNDowNVrOGGfGJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDozNDowNVrOGGfGJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1NDExNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * where a huge number of exceptions could lead to excessive memory usage.\n          \n          \n            \n                 * a huge number of exceptions could lead to excessive memory usage.", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r409454117", "createdAt": "2020-04-16T10:34:05Z", "author": {"login": "MRamonLeon"}, "path": "core/src/main/java/jenkins/util/io/CompositeIOException.java", "diffHunk": "@@ -30,19 +30,52 @@\n import edu.umd.cs.findbugs.annotations.NonNull;\n import java.io.IOException;\n import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n @Restricted(NoExternalUse.class)\n public class CompositeIOException extends IOException {\n+    private static final long serialVersionUID = 121943141387608148L;\n+\n+    /**\n+     * The maximum number of exceptions that can be reported by a single\n+     * {@code CompositeIOException}.\n+     * <p>\n+     * The number of exceptions is limited to avoid pathological cases where\n+     * where a huge number of exceptions could lead to excessive memory usage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "341ffa9f115fce24e94db295f9291d69a1ecb4e5", "author": {"user": {"login": "dwnusbaum", "name": "Devin Nusbaum"}}, "url": "https://github.com/jenkinsci/jenkins/commit/341ffa9f115fce24e94db295f9291d69a1ecb4e5", "committedDate": "2020-04-16T21:01:54Z", "message": "[JENKINS-61481] Note the number of discarded exceptions in the message of the CompositeIOException"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDA5OTE1", "url": "https://github.com/jenkinsci/jenkins/pull/4655#pullrequestreview-395009915", "createdAt": "2020-04-16T21:24:22Z", "commit": {"oid": "341ffa9f115fce24e94db295f9291d69a1ecb4e5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MzUzODI3", "url": "https://github.com/jenkinsci/jenkins/pull/4655#pullrequestreview-395353827", "createdAt": "2020-04-17T10:50:34Z", "commit": {"oid": "341ffa9f115fce24e94db295f9291d69a1ecb4e5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MzU4ODQ1", "url": "https://github.com/jenkinsci/jenkins/pull/4655#pullrequestreview-395358845", "createdAt": "2020-04-17T10:59:09Z", "commit": {"oid": "341ffa9f115fce24e94db295f9291d69a1ecb4e5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f9550468f49fc12cd3abcdc1e650ef982e2318a", "author": {"user": {"login": "dwnusbaum", "name": "Devin Nusbaum"}}, "url": "https://github.com/jenkinsci/jenkins/commit/3f9550468f49fc12cd3abcdc1e650ef982e2318a", "committedDate": "2020-04-17T14:31:08Z", "message": "[JENKINS-61841] Fix testForceRemoveRecursive_TruncatesNumberOfExceptions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4OTczNTY3", "url": "https://github.com/jenkinsci/jenkins/pull/4655#pullrequestreview-398973567", "createdAt": "2020-04-23T10:38:14Z", "commit": {"oid": "3f9550468f49fc12cd3abcdc1e650ef982e2318a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1065, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}