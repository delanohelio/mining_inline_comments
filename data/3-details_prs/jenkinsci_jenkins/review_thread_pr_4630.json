{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NjA3NzM1", "number": 4630, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoyMTozOFrODvufBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTo1ODoxOVrOD4L51A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzcxMjcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/hudson/model/PasswordParameterValue/value.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoyMTozOFrOGCUmvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoyMTozOFrOGCUmvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NzkzMw==", "bodyText": "This page intentionally left blank", "url": "https://github.com/jenkinsci/jenkins/pull/4630#discussion_r405087933", "createdAt": "2020-04-07T20:21:38Z", "author": {"login": "jvz"}, "path": "core/src/main/resources/hudson/model/PasswordParameterValue/value.properties", "diffHunk": "@@ -0,0 +1 @@\n+hidden=(password value not shown)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13d242af0472e99757770846dc9a0022df40ada2"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQxODc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/Functions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTo1ODoxOVrOGO4OGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo1OToxMVrOGO6Hiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NDM2Mg==", "bodyText": "shouldn't this redirect be pointing here https://www.jenkins.io/doc/developer/security/secrets/ instead of the wiki?", "url": "https://github.com/jenkinsci/jenkins/pull/4630#discussion_r418254362", "createdAt": "2020-04-30T19:58:19Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -2013,21 +2014,66 @@ public static String generateConsoleAnnotationScriptAndStylesheet() {\n      * Used by {@code <f:password/>} so that we send an encrypted value to the client.\n      */\n     public String getPasswordValue(Object o) {\n-        if (o==null)    return null;\n-        if (o instanceof Secret) {\n-            StaplerRequest req = Stapler.getCurrentRequest();\n+        if (o == null) {\n+            return null;\n+        }\n+\n+        /*\n+         Return plain value if it's the default value for PasswordParameterDefinition.\n+         This needs to work even when the user doesn't have CONFIGURE permission\n+         */\n+        if (o.equals(PasswordParameterDefinition.DEFAULT_VALUE)) {\n+            return o.toString();\n+        }\n+\n+        /* Mask from Extended Read */\n+        StaplerRequest req = Stapler.getCurrentRequest();\n+        if (o instanceof Secret || Secret.BLANK_NONSECRET_PASSWORD_FIELDS_WITHOUT_ITEM_CONFIGURE) {\n             if (req != null) {\n                 Item item = req.findAncestorObject(Item.class);\n                 if (item != null && !item.hasPermission(Item.CONFIGURE)) {\n                     return \"********\";\n                 }\n             }\n+        }\n+\n+        /* Return encrypted value if it's a Secret */\n+        if (o instanceof Secret) {\n             return ((Secret) o).getEncryptedValue();\n         }\n-        if (getIsUnitTest() && !o.equals(PasswordParameterDefinition.DEFAULT_VALUE)) {\n-            throw new SecurityException(\"attempted to render plaintext \u2018\" + o + \"\u2019 in password field; use a getter of type Secret instead\");\n+\n+        /* Log a warning if we're in development mode (core or plugin): There's an f:password backed by a non-Secret */\n+        if (req != null && (Boolean.getBoolean(\"hudson.hpi.run\") || Boolean.getBoolean(\"hudson.Main.development\"))) {\n+            LOGGER.log(Level.WARNING, () -> \"<f:password/> form control in \" + getJellyViewsInformationForCurrentRequest() +\n+                    \" is not backed by hudson.util.Secret. Learn more: https://jenkins.io/redirect/hudson.util.Secret\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13d242af0472e99757770846dc9a0022df40ada2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4NTQ1MQ==", "bodyText": "Yup, the redirect target is terrible, needs to be changed. But not worth doing another redirect for it. We probably need a new docs page to talk about this + toString.", "url": "https://github.com/jenkinsci/jenkins/pull/4630#discussion_r418285451", "createdAt": "2020-04-30T20:59:11Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -2013,21 +2014,66 @@ public static String generateConsoleAnnotationScriptAndStylesheet() {\n      * Used by {@code <f:password/>} so that we send an encrypted value to the client.\n      */\n     public String getPasswordValue(Object o) {\n-        if (o==null)    return null;\n-        if (o instanceof Secret) {\n-            StaplerRequest req = Stapler.getCurrentRequest();\n+        if (o == null) {\n+            return null;\n+        }\n+\n+        /*\n+         Return plain value if it's the default value for PasswordParameterDefinition.\n+         This needs to work even when the user doesn't have CONFIGURE permission\n+         */\n+        if (o.equals(PasswordParameterDefinition.DEFAULT_VALUE)) {\n+            return o.toString();\n+        }\n+\n+        /* Mask from Extended Read */\n+        StaplerRequest req = Stapler.getCurrentRequest();\n+        if (o instanceof Secret || Secret.BLANK_NONSECRET_PASSWORD_FIELDS_WITHOUT_ITEM_CONFIGURE) {\n             if (req != null) {\n                 Item item = req.findAncestorObject(Item.class);\n                 if (item != null && !item.hasPermission(Item.CONFIGURE)) {\n                     return \"********\";\n                 }\n             }\n+        }\n+\n+        /* Return encrypted value if it's a Secret */\n+        if (o instanceof Secret) {\n             return ((Secret) o).getEncryptedValue();\n         }\n-        if (getIsUnitTest() && !o.equals(PasswordParameterDefinition.DEFAULT_VALUE)) {\n-            throw new SecurityException(\"attempted to render plaintext \u2018\" + o + \"\u2019 in password field; use a getter of type Secret instead\");\n+\n+        /* Log a warning if we're in development mode (core or plugin): There's an f:password backed by a non-Secret */\n+        if (req != null && (Boolean.getBoolean(\"hudson.hpi.run\") || Boolean.getBoolean(\"hudson.Main.development\"))) {\n+            LOGGER.log(Level.WARNING, () -> \"<f:password/> form control in \" + getJellyViewsInformationForCurrentRequest() +\n+                    \" is not backed by hudson.util.Secret. Learn more: https://jenkins.io/redirect/hudson.util.Secret\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NDM2Mg=="}, "originalCommit": {"oid": "13d242af0472e99757770846dc9a0022df40ada2"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 697, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}