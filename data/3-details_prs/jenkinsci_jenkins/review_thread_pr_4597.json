{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMDczODQ4", "number": 4597, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoyNzo0OFrODsxv0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODoxODoxMlrODsy9pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjc4OTkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/hudson/PluginManager/installed.jelly", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoyNzo0OFrOF90bfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODoxMTozNFrOF92Hew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2NjQ2Mg==", "bodyText": "Not sure I follow what this PR is doing at a user level, but from a code review perspective it is very confusing since it is leaving a CSS class detached which no longer corresponds to whether a plugin is in fact detached.", "url": "https://github.com/jenkinsci/jenkins/pull/4597#discussion_r400366462", "createdAt": "2020-03-30T17:27:48Z", "author": {"login": "jglick"}, "path": "core/src/main/resources/hudson/PluginManager/installed.jelly", "diffHunk": "@@ -70,7 +70,7 @@ THE SOFTWARE.\n                 <th width=\"1\">${%Uninstall}</th>\n               </tr>\n               <j:forEach var=\"p\" items=\"${app.pluginManager.plugins}\">\n-                <tr class=\"plugin ${p.hasMandatoryDependents()?'has-dependents':''} ${(p.hasMandatoryDependents() and !p.enabled)?'has-dependents-but-disabled':''} ${p.isDeleted()?'deleted':''} ${p.detached and p.enabled ? 'detached' : ''}\" data-plugin-id=\"${p.shortName}\" data-plugin-name=\"${p.displayName}\">\n+                <tr class=\"plugin ${p.hasMandatoryDependents()?'has-dependents':''} ${(p.hasMandatoryDependents() and !p.enabled)?'has-dependents-but-disabled':''} ${p.isDeleted()?'deleted':''} ${p.hasImpliedDependents() and p.enabled ? 'detached' : ''}\" data-plugin-id=\"${p.shortName}\" data-plugin-name=\"${p.displayName}\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f035ecae2fc20ed092da5419bd1b6a3633d40674"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5NDEwNw==", "bodyText": "Not sure I follow what this PR is doing at a user level\n\nFor every plugin X, I check whether any plugin Y is installed that depends on a core older than the core in which X was detached. Only then can it be an implied dependency.\n\nit is very confusing since it is leaving a CSS class\n\nGood point, fixing.", "url": "https://github.com/jenkinsci/jenkins/pull/4597#discussion_r400394107", "createdAt": "2020-03-30T18:11:34Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/resources/hudson/PluginManager/installed.jelly", "diffHunk": "@@ -70,7 +70,7 @@ THE SOFTWARE.\n                 <th width=\"1\">${%Uninstall}</th>\n               </tr>\n               <j:forEach var=\"p\" items=\"${app.pluginManager.plugins}\">\n-                <tr class=\"plugin ${p.hasMandatoryDependents()?'has-dependents':''} ${(p.hasMandatoryDependents() and !p.enabled)?'has-dependents-but-disabled':''} ${p.isDeleted()?'deleted':''} ${p.detached and p.enabled ? 'detached' : ''}\" data-plugin-id=\"${p.shortName}\" data-plugin-name=\"${p.displayName}\">\n+                <tr class=\"plugin ${p.hasMandatoryDependents()?'has-dependents':''} ${(p.hasMandatoryDependents() and !p.enabled)?'has-dependents-but-disabled':''} ${p.isDeleted()?'deleted':''} ${p.hasImpliedDependents() and p.enabled ? 'detached' : ''}\" data-plugin-id=\"${p.shortName}\" data-plugin-name=\"${p.displayName}\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2NjQ2Mg=="}, "originalCommit": {"oid": "f035ecae2fc20ed092da5419bd1b6a3633d40674"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjk4OTE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/PluginWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODoxODoxMlrOF92XSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODozMzo1MlrOF928aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5ODE1Mw==", "bodyText": "Do you not need to check that p.enabled?", "url": "https://github.com/jenkinsci/jenkins/pull/4597#discussion_r400398153", "createdAt": "2020-03-30T18:18:12Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/PluginWrapper.java", "diffHunk": "@@ -1026,6 +1026,21 @@ public boolean isDetached() {\n         return DetachedPluginsUtil.isDetachedPlugin(shortName);\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public boolean hasImpliedDependents() {\n+        if (!isDetached()) {\n+            return false;\n+        }\n+        for (PluginWrapper p : Jenkins.get().getPluginManager().getPlugins()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f035ecae2fc20ed092da5419bd1b6a3633d40674"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNzY1Ng==", "bodyText": "I thought about it, but didn't for two reasons:\n\nWe're currently not live-updating the list when the enabled status of entries is changed. Disable all possible dependents and the message still exists; same with enabling without reload.\nI didn't think it was worth it to figure out what happens when you re-enable a disabled plugin. IIRC this can even happen in a running instance when you install a plugin with a dependency on the disabled plugin.\n\nAll of this seemed like too much effort for too little gain (not showing this message in few cases).", "url": "https://github.com/jenkinsci/jenkins/pull/4597#discussion_r400407656", "createdAt": "2020-03-30T18:33:52Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/PluginWrapper.java", "diffHunk": "@@ -1026,6 +1026,21 @@ public boolean isDetached() {\n         return DetachedPluginsUtil.isDetachedPlugin(shortName);\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public boolean hasImpliedDependents() {\n+        if (!isDetached()) {\n+            return false;\n+        }\n+        for (PluginWrapper p : Jenkins.get().getPluginManager().getPlugins()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5ODE1Mw=="}, "originalCommit": {"oid": "f035ecae2fc20ed092da5419bd1b6a3633d40674"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 661, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}