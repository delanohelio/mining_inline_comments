{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3OTk4MjA3", "number": 5051, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo1MDoyMFrOE27XoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowNjo0NlrOE9Uh0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDMxMjY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/UpdateCenter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo1MDoyMFrOHv_Ffg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo1MDoyMFrOHv_Ffg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3ODcxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Restricted(Beta.class)\n          \n          \n            \n                @Restricted(NoExternalUse.class)", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r520078718", "createdAt": "2020-11-09T19:50:20Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/model/UpdateCenter.java", "diffHunk": "@@ -971,6 +976,119 @@ private XmlFile getConfigFile() {\n                                     UpdateCenter.class.getName()+\".xml\"));\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public static boolean isNonMetaLabel(String label) {\n+        return !(\"adopt-this-plugin\".equals(label) || \"deprecated\".equals(label));\n+    }\n+\n+    @Restricted(NoExternalUse.class)\n+    public static boolean hasAdoptThisPluginLabel(UpdateSite.Plugin plugin) {\n+        final String[] categories = plugin.categories;\n+        if (categories == null) {\n+            return false;\n+        }\n+        return Arrays.asList(categories).contains(\"adopt-this-plugin\");\n+    }\n+\n+    @Restricted(NoExternalUse.class)\n+    public static boolean hasLatestVersionNewerThanOffered(UpdateSite.Plugin plugin) {\n+        if (plugin.latest == null) {\n+            return false;\n+        }\n+        return !plugin.latest.equalsIgnoreCase(plugin.version); // we can assume that any defined 'latest' will be newer than the actual offered version\n+    }\n+    \n+    @JavaScriptMethod\n+    @Restricted(Beta.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDMyMzUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/hudson/PluginManager/_table.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo1MzozNlrOHv_Meg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo1MzozNlrOHv_Meg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4MDUwNg==", "bodyText": "I think I got all of the relevant warnings, some of them are only on the updates page", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r520080506", "createdAt": "2020-11-09T19:53:36Z", "author": {"login": "timja"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki\n+                            htmlAnchorElement.text = plugin.displayName\n+                            htmlAnchorElement.target = '_blank'\n+                            htmlAnchorElement.rel = 'noopener noreferrer'\n+                            htmlDivElement.append(htmlAnchorElement)\n+                            htmlTableDataCellElement.append(htmlDivElement)\n+\n+                            if (plugin.categories) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('plugin-manager__categories');\n+                                plugin.categories.forEach(function (category) {\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = '?filter=' + category;\n+                                    htmlAnchorElement.classList.add('plugin-manager__category-label')\n+                                    htmlAnchorElement.text = category\n+                                    htmlDivElement.append(htmlAnchorElement)\n+                                })\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            if (plugin.excerpt) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('excerpt');\n+                                htmlDivElement.innerHTML = plugin.excerpt\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                            \n+                            if (plugin.newerCoreRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerCoreRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerJavaRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerJavaRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.dependenciesNewerJava) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.dependenciesNewerJava\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.unresolvedSecurityWarnings) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerText = plugin.unresolvedSecurityWarnings.text\n+                                var listElement = document.createElement('ul');\n+                                plugin.unresolvedSecurityWarnings.warnings.forEach(function(warning) {\n+                                    var li = document.createElement('li');\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = warning.url\n+                                    htmlAnchorElement.text = warning.message\n+                                    htmlAnchorElement.target = '_blank'\n+                                    htmlAnchorElement.rel = 'noopener noreferrer'\n+                                    li.append(htmlAnchorElement)\n+                                    listElement.append(li)\n+                                })\n+                                htmlDivElement.append(listElement)\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.deprecated) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-warning');\n+                                htmlDivElement.innerHTML = plugin.deprecated\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.adoptMe) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-warning');\n+                                htmlDivElement.innerHTML = plugin.adoptMe\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerVersionAvailableNotOffered) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDMyNTc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/hudson/PluginManager/_table.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo1NDoxNlrOHv_N4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo1NDoxNlrOHv_N4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4MDg2NQ==", "bodyText": "shout if any one knows a more Jenkins' way to do this.\nIt's not very nice, but huge performance gain", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r520080865", "createdAt": "2020-11-09T19:54:16Z", "author": {"login": "timja"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDMzNDE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/hudson/PluginManager/_table.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo1NjoxNVrOHv_S8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo1NjoxNVrOHv_S8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4MjE2MA==", "bodyText": "this code is just moved and not used on the available page", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r520082160", "createdAt": "2020-11-09T19:56:15Z", "author": {"login": "timja"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki\n+                            htmlAnchorElement.text = plugin.displayName\n+                            htmlAnchorElement.target = '_blank'\n+                            htmlAnchorElement.rel = 'noopener noreferrer'\n+                            htmlDivElement.append(htmlAnchorElement)\n+                            htmlTableDataCellElement.append(htmlDivElement)\n+\n+                            if (plugin.categories) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('plugin-manager__categories');\n+                                plugin.categories.forEach(function (category) {\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = '?filter=' + category;\n+                                    htmlAnchorElement.classList.add('plugin-manager__category-label')\n+                                    htmlAnchorElement.text = category\n+                                    htmlDivElement.append(htmlAnchorElement)\n+                                })\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            if (plugin.excerpt) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('excerpt');\n+                                htmlDivElement.innerHTML = plugin.excerpt\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                            \n+                            if (plugin.newerCoreRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerCoreRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerJavaRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerJavaRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.dependenciesNewerJava) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.dependenciesNewerJava\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.unresolvedSecurityWarnings) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerText = plugin.unresolvedSecurityWarnings.text\n+                                var listElement = document.createElement('ul');\n+                                plugin.unresolvedSecurityWarnings.warnings.forEach(function(warning) {\n+                                    var li = document.createElement('li');\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = warning.url\n+                                    htmlAnchorElement.text = warning.message\n+                                    htmlAnchorElement.target = '_blank'\n+                                    htmlAnchorElement.rel = 'noopener noreferrer'\n+                                    li.append(htmlAnchorElement)\n+                                    listElement.append(li)\n+                                })\n+                                htmlDivElement.append(listElement)\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.deprecated) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-warning');\n+                                htmlDivElement.innerHTML = plugin.deprecated\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.adoptMe) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-warning');\n+                                htmlDivElement.innerHTML = plugin.adoptMe\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerVersionAvailableNotOffered) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-info');\n+                                htmlDivElement.innerHTML = plugin.newerVersionAvailableNotOffered\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                        }\n+\n+                        function createVersionEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            htmlTableDataCellElement.append(document.createTextNode(plugin.version));\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createReleasedAgo() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            if (plugin.releaseTimestamp) {\n+                                var htmlTimeElement = document.createElement('time');\n+                                htmlTimeElement.dateTime = plugin.releaseTimestamp.iso8601;\n+                                htmlTimeElement.textContent = plugin.releaseTimestamp.displayValue;\n+                                htmlTableDataCellElement.append(htmlTimeElement);\n+                            }\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        if (pluginsTable.dataset.hasadmin === 'true') {\n+                            createCheckBox();\n+                        }\n+                        createNameEntry();\n+                        createVersionEntry();\n+                        createReleasedAgo();\n+\n+                        tbody.append(htmlTableRowElement);\n+                    })\n+                })\n             } else {\n-                items[i].addClassName(\"hidden\");\n+                var filter = e.value.toLowerCase().trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDMzNzM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/hudson/model/Messages.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo1NzowNFrOHv_Uyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo1NzowNFrOHv_Uyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4MjYzNQ==", "bodyText": "these are all duplicated with table.properties so that I can access them in java. \ud83d\ude22", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r520082635", "createdAt": "2020-11-09T19:57:04Z", "author": {"login": "timja"}, "path": "core/src/main/resources/hudson/model/Messages.properties", "diffHunk": "@@ -333,6 +333,49 @@ UpdateCenter.PluginCategory.view=Views\n UpdateCenter.PluginCategory.must-be-labeled=Uncategorized\n UpdateCenter.PluginCategory.unrecognized=Misc ({0})\n \n+UpdateCenter.compatWarning=\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDMzODY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/hudson/model/Messages_bg.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo1NzoyMlrOHv_VmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo1NzoyMlrOHv_VmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4Mjg0MQ==", "bodyText": "there's more to copy / move if the approach is validated", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r520082841", "createdAt": "2020-11-09T19:57:22Z", "author": {"login": "timja"}, "path": "core/src/main/resources/hudson/model/Messages_bg.properties", "diffHunk": "@@ -700,6 +700,10 @@ Hudson.NoParamsSpecified=\\\n # Update Center\n UpdateCenter.DisplayName=\\\n  \\u0426\\u0435\\u043d\\u0442\\u044a\\u0440 \\u0437\\u0430 \\u043e\\u0431\\u043d\\u043e\\u0432\\u044f\\u0432\\u0430\\u043d\\u0435\n+# Warning: This plugin version may not be safe to use. Please review the following security notices:\n+UpdateCenter.securityWarning=\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDM0MTA2OnYy", "diffSide": "RIGHT", "path": "war/src/main/webapp/scripts/polyfills.js", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo1ODowM1rOHv_XJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDo1NTowMFrOHxIKQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4MzIzOA==", "bodyText": "haven't tested the functionality in IE 11, but this would be needed at least", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r520083238", "createdAt": "2020-11-09T19:58:03Z", "author": {"login": "timja"}, "path": "war/src/main/webapp/scripts/polyfills.js", "diffHunk": "@@ -18,3 +18,13 @@ if (!Element.prototype.closest) {\n }\n \n // end closest / matches polyfill\n+\n+// https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach#Polyfill\n+if (window.NodeList && !NodeList.prototype.forEach) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA4ODU3NQ==", "bodyText": "saucelabs will surely give you an open source account if your request it though it looks pretty good, so I can't imagine it failing.", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521088575", "createdAt": "2020-11-11T03:37:46Z", "author": {"login": "halkeye"}, "path": "war/src/main/webapp/scripts/polyfills.js", "diffHunk": "@@ -18,3 +18,13 @@ if (!Element.prototype.closest) {\n }\n \n // end closest / matches polyfill\n+\n+// https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach#Polyfill\n+if (window.NodeList && !NodeList.prototype.forEach) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4MzIzOA=="}, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI0MDc2NA==", "bodyText": "Just tested it out on a IE11 developer machine and it breaks on calls .append on nodes. It's not supported on IE11 https://caniuse.com/mdn-api_parentnode_append and .appendChild should be used instead.", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521240764", "createdAt": "2020-11-11T09:52:34Z", "author": {"login": "fqueiruga"}, "path": "war/src/main/webapp/scripts/polyfills.js", "diffHunk": "@@ -18,3 +18,13 @@ if (!Element.prototype.closest) {\n }\n \n // end closest / matches polyfill\n+\n+// https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach#Polyfill\n+if (window.NodeList && !NodeList.prototype.forEach) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4MzIzOA=="}, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI0MzI1Nw==", "bodyText": "pushed (untested though)", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521243257", "createdAt": "2020-11-11T09:56:48Z", "author": {"login": "timja"}, "path": "war/src/main/webapp/scripts/polyfills.js", "diffHunk": "@@ -18,3 +18,13 @@ if (!Element.prototype.closest) {\n }\n \n // end closest / matches polyfill\n+\n+// https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach#Polyfill\n+if (window.NodeList && !NodeList.prototype.forEach) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4MzIzOA=="}, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI3NTMyMQ==", "bodyText": "Now it works. No other outstanding console errors on IE11", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521275321", "createdAt": "2020-11-11T10:53:51Z", "author": {"login": "fqueiruga"}, "path": "war/src/main/webapp/scripts/polyfills.js", "diffHunk": "@@ -18,3 +18,13 @@ if (!Element.prototype.closest) {\n }\n \n // end closest / matches polyfill\n+\n+// https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach#Polyfill\n+if (window.NodeList && !NodeList.prototype.forEach) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4MzIzOA=="}, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI3NTk2OA==", "bodyText": "thanks!", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521275968", "createdAt": "2020-11-11T10:55:00Z", "author": {"login": "timja"}, "path": "war/src/main/webapp/scripts/polyfills.js", "diffHunk": "@@ -18,3 +18,13 @@ if (!Element.prototype.closest) {\n }\n \n // end closest / matches polyfill\n+\n+// https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach#Polyfill\n+if (window.NodeList && !NodeList.prototype.forEach) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4MzIzOA=="}, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njc0NzAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/hudson/PluginManager/_table.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo0NDoxMFrOHw8-EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNzozODo0MVrOHxBtPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5MjYyNQ==", "bodyText": "hasClassName and addClassName seem to be prototypejs funcitons.\nclassList is the official one - https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\nitems[i].classList.contains('hidden-by-default')\nitems[i].classList.add('hidden')\n(or even use toggle)", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521092625", "createdAt": "2020-11-11T03:44:10Z", "author": {"login": "halkeye"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki\n+                            htmlAnchorElement.text = plugin.displayName\n+                            htmlAnchorElement.target = '_blank'\n+                            htmlAnchorElement.rel = 'noopener noreferrer'\n+                            htmlDivElement.append(htmlAnchorElement)\n+                            htmlTableDataCellElement.append(htmlDivElement)\n+\n+                            if (plugin.categories) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('plugin-manager__categories');\n+                                plugin.categories.forEach(function (category) {\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = '?filter=' + category;\n+                                    htmlAnchorElement.classList.add('plugin-manager__category-label')\n+                                    htmlAnchorElement.text = category\n+                                    htmlDivElement.append(htmlAnchorElement)\n+                                })\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            if (plugin.excerpt) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('excerpt');\n+                                htmlDivElement.innerHTML = plugin.excerpt\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                            \n+                            if (plugin.newerCoreRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerCoreRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerJavaRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerJavaRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.dependenciesNewerJava) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.dependenciesNewerJava\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.unresolvedSecurityWarnings) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerText = plugin.unresolvedSecurityWarnings.text\n+                                var listElement = document.createElement('ul');\n+                                plugin.unresolvedSecurityWarnings.warnings.forEach(function(warning) {\n+                                    var li = document.createElement('li');\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = warning.url\n+                                    htmlAnchorElement.text = warning.message\n+                                    htmlAnchorElement.target = '_blank'\n+                                    htmlAnchorElement.rel = 'noopener noreferrer'\n+                                    li.append(htmlAnchorElement)\n+                                    listElement.append(li)\n+                                })\n+                                htmlDivElement.append(listElement)\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.deprecated) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-warning');\n+                                htmlDivElement.innerHTML = plugin.deprecated\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.adoptMe) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-warning');\n+                                htmlDivElement.innerHTML = plugin.adoptMe\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerVersionAvailableNotOffered) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-info');\n+                                htmlDivElement.innerHTML = plugin.newerVersionAvailableNotOffered\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                        }\n+\n+                        function createVersionEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            htmlTableDataCellElement.append(document.createTextNode(plugin.version));\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createReleasedAgo() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            if (plugin.releaseTimestamp) {\n+                                var htmlTimeElement = document.createElement('time');\n+                                htmlTimeElement.dateTime = plugin.releaseTimestamp.iso8601;\n+                                htmlTimeElement.textContent = plugin.releaseTimestamp.displayValue;\n+                                htmlTableDataCellElement.append(htmlTimeElement);\n+                            }\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        if (pluginsTable.dataset.hasadmin === 'true') {\n+                            createCheckBox();\n+                        }\n+                        createNameEntry();\n+                        createVersionEntry();\n+                        createReleasedAgo();\n+\n+                        tbody.append(htmlTableRowElement);\n+                    })\n+                })\n             } else {\n-                items[i].addClassName(\"hidden\");\n+                var filter = e.value.toLowerCase().trim();\n+                var filterParts = filter.split(/ +/).filter(function (word) {\n+                    return word.length > 0;\n+                });\n+                var items = document.getElementsBySelector(\"TR.plugin\");\n+                var anyVisible = false;\n+                for (var i = 0; i < items.length; i++) {\n+                    if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5MzIwMQ==", "bodyText": "Looks like you use classList higher up. Any chance to nix any prototypejs is super high priority to me", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521093201", "createdAt": "2020-11-11T03:44:56Z", "author": {"login": "halkeye"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki\n+                            htmlAnchorElement.text = plugin.displayName\n+                            htmlAnchorElement.target = '_blank'\n+                            htmlAnchorElement.rel = 'noopener noreferrer'\n+                            htmlDivElement.append(htmlAnchorElement)\n+                            htmlTableDataCellElement.append(htmlDivElement)\n+\n+                            if (plugin.categories) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('plugin-manager__categories');\n+                                plugin.categories.forEach(function (category) {\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = '?filter=' + category;\n+                                    htmlAnchorElement.classList.add('plugin-manager__category-label')\n+                                    htmlAnchorElement.text = category\n+                                    htmlDivElement.append(htmlAnchorElement)\n+                                })\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            if (plugin.excerpt) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('excerpt');\n+                                htmlDivElement.innerHTML = plugin.excerpt\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                            \n+                            if (plugin.newerCoreRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerCoreRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerJavaRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerJavaRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.dependenciesNewerJava) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.dependenciesNewerJava\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.unresolvedSecurityWarnings) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerText = plugin.unresolvedSecurityWarnings.text\n+                                var listElement = document.createElement('ul');\n+                                plugin.unresolvedSecurityWarnings.warnings.forEach(function(warning) {\n+                                    var li = document.createElement('li');\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = warning.url\n+                                    htmlAnchorElement.text = warning.message\n+                                    htmlAnchorElement.target = '_blank'\n+                                    htmlAnchorElement.rel = 'noopener noreferrer'\n+                                    li.append(htmlAnchorElement)\n+                                    listElement.append(li)\n+                                })\n+                                htmlDivElement.append(listElement)\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.deprecated) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-warning');\n+                                htmlDivElement.innerHTML = plugin.deprecated\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.adoptMe) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-warning');\n+                                htmlDivElement.innerHTML = plugin.adoptMe\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerVersionAvailableNotOffered) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-info');\n+                                htmlDivElement.innerHTML = plugin.newerVersionAvailableNotOffered\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                        }\n+\n+                        function createVersionEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            htmlTableDataCellElement.append(document.createTextNode(plugin.version));\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createReleasedAgo() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            if (plugin.releaseTimestamp) {\n+                                var htmlTimeElement = document.createElement('time');\n+                                htmlTimeElement.dateTime = plugin.releaseTimestamp.iso8601;\n+                                htmlTimeElement.textContent = plugin.releaseTimestamp.displayValue;\n+                                htmlTableDataCellElement.append(htmlTimeElement);\n+                            }\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        if (pluginsTable.dataset.hasadmin === 'true') {\n+                            createCheckBox();\n+                        }\n+                        createNameEntry();\n+                        createVersionEntry();\n+                        createReleasedAgo();\n+\n+                        tbody.append(htmlTableRowElement);\n+                    })\n+                })\n             } else {\n-                items[i].addClassName(\"hidden\");\n+                var filter = e.value.toLowerCase().trim();\n+                var filterParts = filter.split(/ +/).filter(function (word) {\n+                    return word.length > 0;\n+                });\n+                var items = document.getElementsBySelector(\"TR.plugin\");\n+                var anyVisible = false;\n+                for (var i = 0; i < items.length; i++) {\n+                    if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5MjYyNQ=="}, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3MDIzOQ==", "bodyText": "This is the moved code (in the else block) I haven\u2019t touched it other than disabling it on the available page.\nBut yes can clean this up", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521170239", "createdAt": "2020-11-11T07:38:41Z", "author": {"login": "timja"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki\n+                            htmlAnchorElement.text = plugin.displayName\n+                            htmlAnchorElement.target = '_blank'\n+                            htmlAnchorElement.rel = 'noopener noreferrer'\n+                            htmlDivElement.append(htmlAnchorElement)\n+                            htmlTableDataCellElement.append(htmlDivElement)\n+\n+                            if (plugin.categories) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('plugin-manager__categories');\n+                                plugin.categories.forEach(function (category) {\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = '?filter=' + category;\n+                                    htmlAnchorElement.classList.add('plugin-manager__category-label')\n+                                    htmlAnchorElement.text = category\n+                                    htmlDivElement.append(htmlAnchorElement)\n+                                })\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            if (plugin.excerpt) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('excerpt');\n+                                htmlDivElement.innerHTML = plugin.excerpt\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                            \n+                            if (plugin.newerCoreRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerCoreRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerJavaRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerJavaRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.dependenciesNewerJava) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.dependenciesNewerJava\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.unresolvedSecurityWarnings) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerText = plugin.unresolvedSecurityWarnings.text\n+                                var listElement = document.createElement('ul');\n+                                plugin.unresolvedSecurityWarnings.warnings.forEach(function(warning) {\n+                                    var li = document.createElement('li');\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = warning.url\n+                                    htmlAnchorElement.text = warning.message\n+                                    htmlAnchorElement.target = '_blank'\n+                                    htmlAnchorElement.rel = 'noopener noreferrer'\n+                                    li.append(htmlAnchorElement)\n+                                    listElement.append(li)\n+                                })\n+                                htmlDivElement.append(listElement)\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.deprecated) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-warning');\n+                                htmlDivElement.innerHTML = plugin.deprecated\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.adoptMe) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-warning');\n+                                htmlDivElement.innerHTML = plugin.adoptMe\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerVersionAvailableNotOffered) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-info');\n+                                htmlDivElement.innerHTML = plugin.newerVersionAvailableNotOffered\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                        }\n+\n+                        function createVersionEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            htmlTableDataCellElement.append(document.createTextNode(plugin.version));\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createReleasedAgo() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            if (plugin.releaseTimestamp) {\n+                                var htmlTimeElement = document.createElement('time');\n+                                htmlTimeElement.dateTime = plugin.releaseTimestamp.iso8601;\n+                                htmlTimeElement.textContent = plugin.releaseTimestamp.displayValue;\n+                                htmlTableDataCellElement.append(htmlTimeElement);\n+                            }\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        if (pluginsTable.dataset.hasadmin === 'true') {\n+                            createCheckBox();\n+                        }\n+                        createNameEntry();\n+                        createVersionEntry();\n+                        createReleasedAgo();\n+\n+                        tbody.append(htmlTableRowElement);\n+                    })\n+                })\n             } else {\n-                items[i].addClassName(\"hidden\");\n+                var filter = e.value.toLowerCase().trim();\n+                var filterParts = filter.split(/ +/).filter(function (word) {\n+                    return word.length > 0;\n+                });\n+                var items = document.getElementsBySelector(\"TR.plugin\");\n+                var anyVisible = false;\n+                for (var i = 0; i < items.length; i++) {\n+                    if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5MjYyNQ=="}, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njc2MDQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/hudson/PluginManager/_table.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo0Nzo1M1rOHw9G9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNzo0MToxNFrOHxBxuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5NDkwMA==", "bodyText": "Its probably fine, but i think textContent is safer, and from reading online, faster - https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521094900", "createdAt": "2020-11-11T03:47:53Z", "author": {"login": "halkeye"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki\n+                            htmlAnchorElement.text = plugin.displayName\n+                            htmlAnchorElement.target = '_blank'\n+                            htmlAnchorElement.rel = 'noopener noreferrer'\n+                            htmlDivElement.append(htmlAnchorElement)\n+                            htmlTableDataCellElement.append(htmlDivElement)\n+\n+                            if (plugin.categories) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('plugin-manager__categories');\n+                                plugin.categories.forEach(function (category) {\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = '?filter=' + category;\n+                                    htmlAnchorElement.classList.add('plugin-manager__category-label')\n+                                    htmlAnchorElement.text = category\n+                                    htmlDivElement.append(htmlAnchorElement)\n+                                })\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            if (plugin.excerpt) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('excerpt');\n+                                htmlDivElement.innerHTML = plugin.excerpt\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                            \n+                            if (plugin.newerCoreRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerCoreRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerJavaRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerJavaRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.dependenciesNewerJava) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.dependenciesNewerJava\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.unresolvedSecurityWarnings) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerText = plugin.unresolvedSecurityWarnings.text", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3MTM4Nw==", "bodyText": "From a quick read it seems all those differences are when reading it not setting the value but sure can change", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521171387", "createdAt": "2020-11-11T07:41:14Z", "author": {"login": "timja"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki\n+                            htmlAnchorElement.text = plugin.displayName\n+                            htmlAnchorElement.target = '_blank'\n+                            htmlAnchorElement.rel = 'noopener noreferrer'\n+                            htmlDivElement.append(htmlAnchorElement)\n+                            htmlTableDataCellElement.append(htmlDivElement)\n+\n+                            if (plugin.categories) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('plugin-manager__categories');\n+                                plugin.categories.forEach(function (category) {\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = '?filter=' + category;\n+                                    htmlAnchorElement.classList.add('plugin-manager__category-label')\n+                                    htmlAnchorElement.text = category\n+                                    htmlDivElement.append(htmlAnchorElement)\n+                                })\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            if (plugin.excerpt) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('excerpt');\n+                                htmlDivElement.innerHTML = plugin.excerpt\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                            \n+                            if (plugin.newerCoreRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerCoreRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerJavaRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerJavaRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.dependenciesNewerJava) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.dependenciesNewerJava\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.unresolvedSecurityWarnings) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerText = plugin.unresolvedSecurityWarnings.text", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5NDkwMA=="}, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njc2MjQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/hudson/PluginManager/_table.js", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo0OToxOFrOHw9IKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNToyMDozNlrOHx_wuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5NTIwOQ==", "bodyText": "so technically this is controlled by the pom right? so technically they could have a wiki link of javascript:alert(\"foo\")? do we need to sanitize this at all? make sure its a parsed url in the backend?", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521095209", "createdAt": "2020-11-11T03:49:18Z", "author": {"login": "halkeye"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3MTYzOA==", "bodyText": "Isn\u2019t that done in update center? This is just a port of the code from the jelly files", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521171638", "createdAt": "2020-11-11T07:41:50Z", "author": {"login": "timja"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5NTIwOQ=="}, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3MjA5Nw==", "bodyText": "I have no idea. I'm not super familiar with core, its a common javascript issue so I just wanted to point it out just in case.", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521172097", "createdAt": "2020-11-11T07:42:57Z", "author": {"login": "halkeye"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5NTIwOQ=="}, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE4MzI1MA==", "bodyText": "@daniel-beck ?", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521183250", "createdAt": "2020-11-11T08:08:28Z", "author": {"login": "timja"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5NTIwOQ=="}, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI5OTI0Mw==", "bodyText": "Maybe setAttribute is better?", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521299243", "createdAt": "2020-11-11T11:40:19Z", "author": {"login": "fqueiruga"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5NTIwOQ=="}, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU0MDc5NA==", "bodyText": "Not really..any time you use user values it has the potential to inject/XSS. I think the attack vector is pretty small. The best solution is to use new Uri in java and confirm the scheme is http or HTTPS. Then after that no concern.", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521540794", "createdAt": "2020-11-11T17:59:37Z", "author": {"login": "halkeye"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5NTIwOQ=="}, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4NjkzOQ==", "bodyText": "it's hardcoded in update center to plugin site: https://github.com/jenkins-infra/update-center2/blob/4c19fc6ca406abb5dc37adf7aa311d58b98d2963/src/main/java/io/jenkins/update_center/PluginUpdateCenterEntry.java#L92", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r522186939", "createdAt": "2020-11-12T15:20:36Z", "author": {"login": "timja"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5NTIwOQ=="}, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTcxMTY3OnYy", "diffSide": "RIGHT", "path": "war/src/main/js/plugin-manager-ui.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODoxNDowNFrOHy5sZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDoyMToyNVrOHy9vqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEzNjEwMQ==", "bodyText": "you can bring in lodash.debounce and use it here", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r523136101", "createdAt": "2020-11-13T18:14:04Z", "author": {"login": "fqueiruga"}, "path": "war/src/main/js/plugin-manager-ui.js", "diffHunk": "@@ -0,0 +1,59 @@\n+import pluginManagerAvailable from './templates/plugin-manager/available.hbs'\n+import pluginManager from './api/pluginManager';\n+\n+var debounce = null;\n+\n+function applyFilter(searchQuery) {\n+    clearTimeout(debounce);\n+    // debounce reduces number of server side calls while typing\n+    debounce = setTimeout(function () {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d0b1198ba0a9c33fe9970535c98ea77b35231fb"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIwMjQ3NA==", "bodyText": "thanks, done", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r523202474", "createdAt": "2020-11-13T20:21:25Z", "author": {"login": "timja"}, "path": "war/src/main/js/plugin-manager-ui.js", "diffHunk": "@@ -0,0 +1,59 @@\n+import pluginManagerAvailable from './templates/plugin-manager/available.hbs'\n+import pluginManager from './api/pluginManager';\n+\n+var debounce = null;\n+\n+function applyFilter(searchQuery) {\n+    clearTimeout(debounce);\n+    // debounce reduces number of server side calls while typing\n+    debounce = setTimeout(function () {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEzNjEwMQ=="}, "originalCommit": {"oid": "8d0b1198ba0a9c33fe9970535c98ea77b35231fb"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODU4NDYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/PluginManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzowMDoyNFrOH3Ovnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzoyNTowOVrOH3PhOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NTI5NQ==", "bodyText": "So what's the Turkish locale situation in JS?\nAre they going to search for GIT and not find git because it's not g\u0131t?", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r527675295", "createdAt": "2020-11-20T13:00:24Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -1344,6 +1346,121 @@ public void stop() {\n         LogFactory.release(uberClassLoader);\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public static boolean isNonMetaLabel(String label) {\n+        return !(\"adopt-this-plugin\".equals(label) || \"deprecated\".equals(label));\n+    }\n+    \n+    @Restricted(NoExternalUse.class)\n+    public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParameter Integer limit) {\n+        String lowerSearchQuery = query != null ? query.toLowerCase() : null;\n+        List<JSONObject> plugins = new ArrayList<>();\n+        for (UpdateSite site : Jenkins.get().getUpdateCenter().getSiteList()) {\n+            plugins = site.getAvailables().stream()\n+                .filter(plugin -> {\n+                    if (StringUtils.isBlank(query)) {\n+                        return true;\n+                    }\n+                    return plugin.name.toLowerCase().contains(lowerSearchQuery) ||\n+                        plugin.title.toLowerCase().contains(lowerSearchQuery) ||\n+                        plugin.excerpt.toLowerCase().contains(lowerSearchQuery) ||\n+                        Arrays.asList(plugin.categories).contains(query) ||\n+                        Arrays.stream(plugin.categories)\n+                            .map(UpdateCenter::getCategoryDisplayName)\n+                            .anyMatch(category -> category.toLowerCase().contains(query)) ||\n+                        plugin.hasWarnings() && lowerSearchQuery.equals(\"warning:\");\n+                })\n+                .limit(limit)\n+                .map(plugin -> {\n+                    JSONObject jsonObject = new JSONObject();\n+                    jsonObject.put(\"name\", plugin.name);\n+                    jsonObject.put(\"sourceId\", plugin.sourceId);\n+                    jsonObject.put(\"title\", plugin.title);\n+                    jsonObject.put(\"displayName\", plugin.getDisplayName());\n+                    jsonObject.put(\"wiki\", plugin.wiki);\n+                    jsonObject.put(\"categories\", Arrays.stream(plugin.categories)\n+                        .filter(PluginManager::isNonMetaLabel)\n+                        .map(UpdateCenter::getCategoryDisplayName)\n+                        .collect(toList())\n+                    );\n+\n+                    if (hasAdoptThisPluginLabel(plugin)) {\n+                        jsonObject.put(\"adoptMe\", Messages.PluginManager_adoptThisPlugin());\n+                    }\n+                    if (plugin.isDeprecated()) {\n+                        jsonObject.put(\"deprecated\", Messages.PluginManager_deprecationWarning(plugin.getDeprecation().url));\n+                    }\n+                    jsonObject.put(\"excerpt\", plugin.excerpt);\n+                    jsonObject.put(\"version\", plugin.version);\n+                    jsonObject.put(\"popularity\", plugin.popularity);\n+                    if (plugin.isForNewerHudson()) {\n+                        jsonObject.put(\"newerCoreRequired\", Messages.PluginManager_coreWarning(plugin.requiredCore));\n+                    }\n+                    if (plugin.isForNewerJava()) {\n+                        jsonObject.put(\"newerJavaRequired\", Messages.PluginManager_javaWarning(plugin.minimumJavaVersion));\n+                    }\n+                    if (plugin.isNeededDependenciesForNewerJava()) {\n+                        VersionNumber javaVersion = plugin.getNeededDependenciesMinimumJavaVersion();\n+                        if (javaVersion == null) {\n+                            throw new IllegalStateException(\"java version cannot be null here\");\n+                        }\n+                        jsonObject.put(\"dependenciesNewerJava\", Messages.PluginManager_depJavaWarning(javaVersion.toString()));\n+                    }\n+                    if (plugin.hasWarnings()) {\n+                        JSONObject unresolvedSecurityWarnings = new JSONObject();\n+                        unresolvedSecurityWarnings.put(\"text\", Messages.PluginManager_securityWarning());\n+                        Set<UpdateSite.Warning> pluginWarnings = plugin.getWarnings();\n+                        if (pluginWarnings == null) {\n+                            throw new IllegalStateException(\"warnings cannot be null here\");\n+                        }\n+                        List<JSONObject> warnings = pluginWarnings.stream()\n+                            .map(warning -> {\n+                                JSONObject jsonWarning = new JSONObject();\n+                                jsonWarning.put(\"url\", warning.url);\n+                                jsonWarning.put(\"message\", warning.message);\n+                                return jsonWarning;\n+                            }).collect(toList());\n+                        unresolvedSecurityWarnings.put(\"warnings\", warnings);\n+                        jsonObject.put(\"unresolvedSecurityWarnings\", unresolvedSecurityWarnings);\n+                    }\n+                    if (plugin.releaseTimestamp != null) {\n+                        JSONObject releaseTimestamp = new JSONObject();\n+                        releaseTimestamp.put(\"iso8601\", Functions.iso8601DateTime(plugin.releaseTimestamp));\n+                        releaseTimestamp.put(\"displayValue\", Messages.PluginManager_ago(Functions.getTimeSpanString(plugin.releaseTimestamp)));\n+                        jsonObject.put(\"releaseTimestamp\", releaseTimestamp);\n+                    }\n+                    if (hasLatestVersionNewerThanOffered(plugin)) {\n+                        jsonObject.put(\"newerVersionAvailableNotOffered\", Messages.PluginManager_newerVersionExists(plugin.latest));\n+                    }\n+                    return jsonObject;\n+                })\n+                .sorted((o1, o2) -> {\n+                    String o1DisplayName = o1.getString(\"displayName\");\n+                    if (o1.getString(\"name\").toLowerCase().equals(lowerSearchQuery) || o1DisplayName.toLowerCase().equals(lowerSearchQuery)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf635cc57aaabe67c76cf2c2e14f034e556543f0"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3ODYzMg==", "bodyText": "is this what you meant? 492a24a\nthere's no JS searching done here, it's all server side", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r527678632", "createdAt": "2020-11-20T13:07:06Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -1344,6 +1346,121 @@ public void stop() {\n         LogFactory.release(uberClassLoader);\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public static boolean isNonMetaLabel(String label) {\n+        return !(\"adopt-this-plugin\".equals(label) || \"deprecated\".equals(label));\n+    }\n+    \n+    @Restricted(NoExternalUse.class)\n+    public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParameter Integer limit) {\n+        String lowerSearchQuery = query != null ? query.toLowerCase() : null;\n+        List<JSONObject> plugins = new ArrayList<>();\n+        for (UpdateSite site : Jenkins.get().getUpdateCenter().getSiteList()) {\n+            plugins = site.getAvailables().stream()\n+                .filter(plugin -> {\n+                    if (StringUtils.isBlank(query)) {\n+                        return true;\n+                    }\n+                    return plugin.name.toLowerCase().contains(lowerSearchQuery) ||\n+                        plugin.title.toLowerCase().contains(lowerSearchQuery) ||\n+                        plugin.excerpt.toLowerCase().contains(lowerSearchQuery) ||\n+                        Arrays.asList(plugin.categories).contains(query) ||\n+                        Arrays.stream(plugin.categories)\n+                            .map(UpdateCenter::getCategoryDisplayName)\n+                            .anyMatch(category -> category.toLowerCase().contains(query)) ||\n+                        plugin.hasWarnings() && lowerSearchQuery.equals(\"warning:\");\n+                })\n+                .limit(limit)\n+                .map(plugin -> {\n+                    JSONObject jsonObject = new JSONObject();\n+                    jsonObject.put(\"name\", plugin.name);\n+                    jsonObject.put(\"sourceId\", plugin.sourceId);\n+                    jsonObject.put(\"title\", plugin.title);\n+                    jsonObject.put(\"displayName\", plugin.getDisplayName());\n+                    jsonObject.put(\"wiki\", plugin.wiki);\n+                    jsonObject.put(\"categories\", Arrays.stream(plugin.categories)\n+                        .filter(PluginManager::isNonMetaLabel)\n+                        .map(UpdateCenter::getCategoryDisplayName)\n+                        .collect(toList())\n+                    );\n+\n+                    if (hasAdoptThisPluginLabel(plugin)) {\n+                        jsonObject.put(\"adoptMe\", Messages.PluginManager_adoptThisPlugin());\n+                    }\n+                    if (plugin.isDeprecated()) {\n+                        jsonObject.put(\"deprecated\", Messages.PluginManager_deprecationWarning(plugin.getDeprecation().url));\n+                    }\n+                    jsonObject.put(\"excerpt\", plugin.excerpt);\n+                    jsonObject.put(\"version\", plugin.version);\n+                    jsonObject.put(\"popularity\", plugin.popularity);\n+                    if (plugin.isForNewerHudson()) {\n+                        jsonObject.put(\"newerCoreRequired\", Messages.PluginManager_coreWarning(plugin.requiredCore));\n+                    }\n+                    if (plugin.isForNewerJava()) {\n+                        jsonObject.put(\"newerJavaRequired\", Messages.PluginManager_javaWarning(plugin.minimumJavaVersion));\n+                    }\n+                    if (plugin.isNeededDependenciesForNewerJava()) {\n+                        VersionNumber javaVersion = plugin.getNeededDependenciesMinimumJavaVersion();\n+                        if (javaVersion == null) {\n+                            throw new IllegalStateException(\"java version cannot be null here\");\n+                        }\n+                        jsonObject.put(\"dependenciesNewerJava\", Messages.PluginManager_depJavaWarning(javaVersion.toString()));\n+                    }\n+                    if (plugin.hasWarnings()) {\n+                        JSONObject unresolvedSecurityWarnings = new JSONObject();\n+                        unresolvedSecurityWarnings.put(\"text\", Messages.PluginManager_securityWarning());\n+                        Set<UpdateSite.Warning> pluginWarnings = plugin.getWarnings();\n+                        if (pluginWarnings == null) {\n+                            throw new IllegalStateException(\"warnings cannot be null here\");\n+                        }\n+                        List<JSONObject> warnings = pluginWarnings.stream()\n+                            .map(warning -> {\n+                                JSONObject jsonWarning = new JSONObject();\n+                                jsonWarning.put(\"url\", warning.url);\n+                                jsonWarning.put(\"message\", warning.message);\n+                                return jsonWarning;\n+                            }).collect(toList());\n+                        unresolvedSecurityWarnings.put(\"warnings\", warnings);\n+                        jsonObject.put(\"unresolvedSecurityWarnings\", unresolvedSecurityWarnings);\n+                    }\n+                    if (plugin.releaseTimestamp != null) {\n+                        JSONObject releaseTimestamp = new JSONObject();\n+                        releaseTimestamp.put(\"iso8601\", Functions.iso8601DateTime(plugin.releaseTimestamp));\n+                        releaseTimestamp.put(\"displayValue\", Messages.PluginManager_ago(Functions.getTimeSpanString(plugin.releaseTimestamp)));\n+                        jsonObject.put(\"releaseTimestamp\", releaseTimestamp);\n+                    }\n+                    if (hasLatestVersionNewerThanOffered(plugin)) {\n+                        jsonObject.put(\"newerVersionAvailableNotOffered\", Messages.PluginManager_newerVersionExists(plugin.latest));\n+                    }\n+                    return jsonObject;\n+                })\n+                .sorted((o1, o2) -> {\n+                    String o1DisplayName = o1.getString(\"displayName\");\n+                    if (o1.getString(\"name\").toLowerCase().equals(lowerSearchQuery) || o1DisplayName.toLowerCase().equals(lowerSearchQuery)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NTI5NQ=="}, "originalCommit": {"oid": "bf635cc57aaabe67c76cf2c2e14f034e556543f0"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY4Nzk5NQ==", "bodyText": "Oops. Yes, then Turkish people might be unhappy.\nAlso there's String#equalsIgnoreCase which does this for us.", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r527687995", "createdAt": "2020-11-20T13:25:09Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -1344,6 +1346,121 @@ public void stop() {\n         LogFactory.release(uberClassLoader);\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public static boolean isNonMetaLabel(String label) {\n+        return !(\"adopt-this-plugin\".equals(label) || \"deprecated\".equals(label));\n+    }\n+    \n+    @Restricted(NoExternalUse.class)\n+    public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParameter Integer limit) {\n+        String lowerSearchQuery = query != null ? query.toLowerCase() : null;\n+        List<JSONObject> plugins = new ArrayList<>();\n+        for (UpdateSite site : Jenkins.get().getUpdateCenter().getSiteList()) {\n+            plugins = site.getAvailables().stream()\n+                .filter(plugin -> {\n+                    if (StringUtils.isBlank(query)) {\n+                        return true;\n+                    }\n+                    return plugin.name.toLowerCase().contains(lowerSearchQuery) ||\n+                        plugin.title.toLowerCase().contains(lowerSearchQuery) ||\n+                        plugin.excerpt.toLowerCase().contains(lowerSearchQuery) ||\n+                        Arrays.asList(plugin.categories).contains(query) ||\n+                        Arrays.stream(plugin.categories)\n+                            .map(UpdateCenter::getCategoryDisplayName)\n+                            .anyMatch(category -> category.toLowerCase().contains(query)) ||\n+                        plugin.hasWarnings() && lowerSearchQuery.equals(\"warning:\");\n+                })\n+                .limit(limit)\n+                .map(plugin -> {\n+                    JSONObject jsonObject = new JSONObject();\n+                    jsonObject.put(\"name\", plugin.name);\n+                    jsonObject.put(\"sourceId\", plugin.sourceId);\n+                    jsonObject.put(\"title\", plugin.title);\n+                    jsonObject.put(\"displayName\", plugin.getDisplayName());\n+                    jsonObject.put(\"wiki\", plugin.wiki);\n+                    jsonObject.put(\"categories\", Arrays.stream(plugin.categories)\n+                        .filter(PluginManager::isNonMetaLabel)\n+                        .map(UpdateCenter::getCategoryDisplayName)\n+                        .collect(toList())\n+                    );\n+\n+                    if (hasAdoptThisPluginLabel(plugin)) {\n+                        jsonObject.put(\"adoptMe\", Messages.PluginManager_adoptThisPlugin());\n+                    }\n+                    if (plugin.isDeprecated()) {\n+                        jsonObject.put(\"deprecated\", Messages.PluginManager_deprecationWarning(plugin.getDeprecation().url));\n+                    }\n+                    jsonObject.put(\"excerpt\", plugin.excerpt);\n+                    jsonObject.put(\"version\", plugin.version);\n+                    jsonObject.put(\"popularity\", plugin.popularity);\n+                    if (plugin.isForNewerHudson()) {\n+                        jsonObject.put(\"newerCoreRequired\", Messages.PluginManager_coreWarning(plugin.requiredCore));\n+                    }\n+                    if (plugin.isForNewerJava()) {\n+                        jsonObject.put(\"newerJavaRequired\", Messages.PluginManager_javaWarning(plugin.minimumJavaVersion));\n+                    }\n+                    if (plugin.isNeededDependenciesForNewerJava()) {\n+                        VersionNumber javaVersion = plugin.getNeededDependenciesMinimumJavaVersion();\n+                        if (javaVersion == null) {\n+                            throw new IllegalStateException(\"java version cannot be null here\");\n+                        }\n+                        jsonObject.put(\"dependenciesNewerJava\", Messages.PluginManager_depJavaWarning(javaVersion.toString()));\n+                    }\n+                    if (plugin.hasWarnings()) {\n+                        JSONObject unresolvedSecurityWarnings = new JSONObject();\n+                        unresolvedSecurityWarnings.put(\"text\", Messages.PluginManager_securityWarning());\n+                        Set<UpdateSite.Warning> pluginWarnings = plugin.getWarnings();\n+                        if (pluginWarnings == null) {\n+                            throw new IllegalStateException(\"warnings cannot be null here\");\n+                        }\n+                        List<JSONObject> warnings = pluginWarnings.stream()\n+                            .map(warning -> {\n+                                JSONObject jsonWarning = new JSONObject();\n+                                jsonWarning.put(\"url\", warning.url);\n+                                jsonWarning.put(\"message\", warning.message);\n+                                return jsonWarning;\n+                            }).collect(toList());\n+                        unresolvedSecurityWarnings.put(\"warnings\", warnings);\n+                        jsonObject.put(\"unresolvedSecurityWarnings\", unresolvedSecurityWarnings);\n+                    }\n+                    if (plugin.releaseTimestamp != null) {\n+                        JSONObject releaseTimestamp = new JSONObject();\n+                        releaseTimestamp.put(\"iso8601\", Functions.iso8601DateTime(plugin.releaseTimestamp));\n+                        releaseTimestamp.put(\"displayValue\", Messages.PluginManager_ago(Functions.getTimeSpanString(plugin.releaseTimestamp)));\n+                        jsonObject.put(\"releaseTimestamp\", releaseTimestamp);\n+                    }\n+                    if (hasLatestVersionNewerThanOffered(plugin)) {\n+                        jsonObject.put(\"newerVersionAvailableNotOffered\", Messages.PluginManager_newerVersionExists(plugin.latest));\n+                    }\n+                    return jsonObject;\n+                })\n+                .sorted((o1, o2) -> {\n+                    String o1DisplayName = o1.getString(\"displayName\");\n+                    if (o1.getString(\"name\").toLowerCase().equals(lowerSearchQuery) || o1DisplayName.toLowerCase().equals(lowerSearchQuery)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NTI5NQ=="}, "originalCommit": {"oid": "bf635cc57aaabe67c76cf2c2e14f034e556543f0"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzMxNzc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/PluginManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjo1ODo0N1rOH58bEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyMToyNFrOH-Hkxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMDg0OQ==", "bodyText": "does this not need to be reflective also?  if o2 is direct match for the search term then return +1?", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r530520849", "createdAt": "2020-11-25T16:58:47Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -1344,6 +1346,120 @@ public void stop() {\n         LogFactory.release(uberClassLoader);\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public static boolean isNonMetaLabel(String label) {\n+        return !(\"adopt-this-plugin\".equals(label) || \"deprecated\".equals(label));\n+    }\n+    \n+    @Restricted(NoExternalUse.class)\n+    public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParameter Integer limit) {\n+        List<JSONObject> plugins = new ArrayList<>();\n+        for (UpdateSite site : Jenkins.get().getUpdateCenter().getSiteList()) {\n+            plugins = site.getAvailables().stream()\n+                .filter(plugin -> {\n+                    if (StringUtils.isBlank(query)) {\n+                        return true;\n+                    }\n+                    return StringUtils.containsIgnoreCase(plugin.name, query) ||\n+                        StringUtils.containsIgnoreCase(plugin.title, query) ||\n+                        StringUtils.containsIgnoreCase(plugin.excerpt, query) ||\n+                        Arrays.asList(plugin.categories).contains(query) ||\n+                        Arrays.stream(plugin.categories)\n+                            .map(UpdateCenter::getCategoryDisplayName)\n+                            .anyMatch(category -> StringUtils.containsIgnoreCase(category, query)) ||\n+                        plugin.hasWarnings() && query.equalsIgnoreCase(\"warning:\");\n+                })\n+                .limit(limit)\n+                .map(plugin -> {\n+                    JSONObject jsonObject = new JSONObject();\n+                    jsonObject.put(\"name\", plugin.name);\n+                    jsonObject.put(\"sourceId\", plugin.sourceId);\n+                    jsonObject.put(\"title\", plugin.title);\n+                    jsonObject.put(\"displayName\", plugin.getDisplayName());\n+                    jsonObject.put(\"wiki\", plugin.wiki);\n+                    jsonObject.put(\"categories\", Arrays.stream(plugin.categories)\n+                        .filter(PluginManager::isNonMetaLabel)\n+                        .map(UpdateCenter::getCategoryDisplayName)\n+                        .collect(toList())\n+                    );\n+\n+                    if (hasAdoptThisPluginLabel(plugin)) {\n+                        jsonObject.put(\"adoptMe\", Messages.PluginManager_adoptThisPlugin());\n+                    }\n+                    if (plugin.isDeprecated()) {\n+                        jsonObject.put(\"deprecated\", Messages.PluginManager_deprecationWarning(plugin.getDeprecation().url));\n+                    }\n+                    jsonObject.put(\"excerpt\", plugin.excerpt);\n+                    jsonObject.put(\"version\", plugin.version);\n+                    jsonObject.put(\"popularity\", plugin.popularity);\n+                    if (plugin.isForNewerHudson()) {\n+                        jsonObject.put(\"newerCoreRequired\", Messages.PluginManager_coreWarning(plugin.requiredCore));\n+                    }\n+                    if (plugin.isForNewerJava()) {\n+                        jsonObject.put(\"newerJavaRequired\", Messages.PluginManager_javaWarning(plugin.minimumJavaVersion));\n+                    }\n+                    if (plugin.isNeededDependenciesForNewerJava()) {\n+                        VersionNumber javaVersion = plugin.getNeededDependenciesMinimumJavaVersion();\n+                        if (javaVersion == null) {\n+                            throw new IllegalStateException(\"java version cannot be null here\");\n+                        }\n+                        jsonObject.put(\"dependenciesNewerJava\", Messages.PluginManager_depJavaWarning(javaVersion.toString()));\n+                    }\n+                    if (plugin.hasWarnings()) {\n+                        JSONObject unresolvedSecurityWarnings = new JSONObject();\n+                        unresolvedSecurityWarnings.put(\"text\", Messages.PluginManager_securityWarning());\n+                        Set<UpdateSite.Warning> pluginWarnings = plugin.getWarnings();\n+                        if (pluginWarnings == null) {\n+                            throw new IllegalStateException(\"warnings cannot be null here\");\n+                        }\n+                        List<JSONObject> warnings = pluginWarnings.stream()\n+                            .map(warning -> {\n+                                JSONObject jsonWarning = new JSONObject();\n+                                jsonWarning.put(\"url\", warning.url);\n+                                jsonWarning.put(\"message\", warning.message);\n+                                return jsonWarning;\n+                            }).collect(toList());\n+                        unresolvedSecurityWarnings.put(\"warnings\", warnings);\n+                        jsonObject.put(\"unresolvedSecurityWarnings\", unresolvedSecurityWarnings);\n+                    }\n+                    if (plugin.releaseTimestamp != null) {\n+                        JSONObject releaseTimestamp = new JSONObject();\n+                        releaseTimestamp.put(\"iso8601\", Functions.iso8601DateTime(plugin.releaseTimestamp));\n+                        releaseTimestamp.put(\"displayValue\", Messages.PluginManager_ago(Functions.getTimeSpanString(plugin.releaseTimestamp)));\n+                        jsonObject.put(\"releaseTimestamp\", releaseTimestamp);\n+                    }\n+                    if (hasLatestVersionNewerThanOffered(plugin)) {\n+                        jsonObject.put(\"newerVersionAvailableNotOffered\", Messages.PluginManager_newerVersionExists(plugin.latest));\n+                    }\n+                    return jsonObject;\n+                })\n+                .sorted((o1, o2) -> {\n+                    String o1DisplayName = o1.getString(\"displayName\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4640102086f7c8524347f0b32432e985467772c"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg5Nzg2Mw==", "bodyText": "done", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r534897863", "createdAt": "2020-12-03T08:21:24Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -1344,6 +1346,120 @@ public void stop() {\n         LogFactory.release(uberClassLoader);\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public static boolean isNonMetaLabel(String label) {\n+        return !(\"adopt-this-plugin\".equals(label) || \"deprecated\".equals(label));\n+    }\n+    \n+    @Restricted(NoExternalUse.class)\n+    public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParameter Integer limit) {\n+        List<JSONObject> plugins = new ArrayList<>();\n+        for (UpdateSite site : Jenkins.get().getUpdateCenter().getSiteList()) {\n+            plugins = site.getAvailables().stream()\n+                .filter(plugin -> {\n+                    if (StringUtils.isBlank(query)) {\n+                        return true;\n+                    }\n+                    return StringUtils.containsIgnoreCase(plugin.name, query) ||\n+                        StringUtils.containsIgnoreCase(plugin.title, query) ||\n+                        StringUtils.containsIgnoreCase(plugin.excerpt, query) ||\n+                        Arrays.asList(plugin.categories).contains(query) ||\n+                        Arrays.stream(plugin.categories)\n+                            .map(UpdateCenter::getCategoryDisplayName)\n+                            .anyMatch(category -> StringUtils.containsIgnoreCase(category, query)) ||\n+                        plugin.hasWarnings() && query.equalsIgnoreCase(\"warning:\");\n+                })\n+                .limit(limit)\n+                .map(plugin -> {\n+                    JSONObject jsonObject = new JSONObject();\n+                    jsonObject.put(\"name\", plugin.name);\n+                    jsonObject.put(\"sourceId\", plugin.sourceId);\n+                    jsonObject.put(\"title\", plugin.title);\n+                    jsonObject.put(\"displayName\", plugin.getDisplayName());\n+                    jsonObject.put(\"wiki\", plugin.wiki);\n+                    jsonObject.put(\"categories\", Arrays.stream(plugin.categories)\n+                        .filter(PluginManager::isNonMetaLabel)\n+                        .map(UpdateCenter::getCategoryDisplayName)\n+                        .collect(toList())\n+                    );\n+\n+                    if (hasAdoptThisPluginLabel(plugin)) {\n+                        jsonObject.put(\"adoptMe\", Messages.PluginManager_adoptThisPlugin());\n+                    }\n+                    if (plugin.isDeprecated()) {\n+                        jsonObject.put(\"deprecated\", Messages.PluginManager_deprecationWarning(plugin.getDeprecation().url));\n+                    }\n+                    jsonObject.put(\"excerpt\", plugin.excerpt);\n+                    jsonObject.put(\"version\", plugin.version);\n+                    jsonObject.put(\"popularity\", plugin.popularity);\n+                    if (plugin.isForNewerHudson()) {\n+                        jsonObject.put(\"newerCoreRequired\", Messages.PluginManager_coreWarning(plugin.requiredCore));\n+                    }\n+                    if (plugin.isForNewerJava()) {\n+                        jsonObject.put(\"newerJavaRequired\", Messages.PluginManager_javaWarning(plugin.minimumJavaVersion));\n+                    }\n+                    if (plugin.isNeededDependenciesForNewerJava()) {\n+                        VersionNumber javaVersion = plugin.getNeededDependenciesMinimumJavaVersion();\n+                        if (javaVersion == null) {\n+                            throw new IllegalStateException(\"java version cannot be null here\");\n+                        }\n+                        jsonObject.put(\"dependenciesNewerJava\", Messages.PluginManager_depJavaWarning(javaVersion.toString()));\n+                    }\n+                    if (plugin.hasWarnings()) {\n+                        JSONObject unresolvedSecurityWarnings = new JSONObject();\n+                        unresolvedSecurityWarnings.put(\"text\", Messages.PluginManager_securityWarning());\n+                        Set<UpdateSite.Warning> pluginWarnings = plugin.getWarnings();\n+                        if (pluginWarnings == null) {\n+                            throw new IllegalStateException(\"warnings cannot be null here\");\n+                        }\n+                        List<JSONObject> warnings = pluginWarnings.stream()\n+                            .map(warning -> {\n+                                JSONObject jsonWarning = new JSONObject();\n+                                jsonWarning.put(\"url\", warning.url);\n+                                jsonWarning.put(\"message\", warning.message);\n+                                return jsonWarning;\n+                            }).collect(toList());\n+                        unresolvedSecurityWarnings.put(\"warnings\", warnings);\n+                        jsonObject.put(\"unresolvedSecurityWarnings\", unresolvedSecurityWarnings);\n+                    }\n+                    if (plugin.releaseTimestamp != null) {\n+                        JSONObject releaseTimestamp = new JSONObject();\n+                        releaseTimestamp.put(\"iso8601\", Functions.iso8601DateTime(plugin.releaseTimestamp));\n+                        releaseTimestamp.put(\"displayValue\", Messages.PluginManager_ago(Functions.getTimeSpanString(plugin.releaseTimestamp)));\n+                        jsonObject.put(\"releaseTimestamp\", releaseTimestamp);\n+                    }\n+                    if (hasLatestVersionNewerThanOffered(plugin)) {\n+                        jsonObject.put(\"newerVersionAvailableNotOffered\", Messages.PluginManager_newerVersionExists(plugin.latest));\n+                    }\n+                    return jsonObject;\n+                })\n+                .sorted((o1, o2) -> {\n+                    String o1DisplayName = o1.getString(\"displayName\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMDg0OQ=="}, "originalCommit": {"oid": "a4640102086f7c8524347f0b32432e985467772c"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzM0OTI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/PluginManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowNjo0NlrOH58ubQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozNDoxOVrOH61Myw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTgwNQ==", "bodyText": "missing permission check?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<JSONObject> plugins = new ArrayList<>();\n          \n          \n            \n                    Jenkins.get().checkPermission(Jenkins.SYSTEM_READ);\n          \n          \n            \n                    List<JSONObject> plugins = new ArrayList<>();", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r530525805", "createdAt": "2020-11-25T17:06:46Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -1344,6 +1346,120 @@ public void stop() {\n         LogFactory.release(uberClassLoader);\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public static boolean isNonMetaLabel(String label) {\n+        return !(\"adopt-this-plugin\".equals(label) || \"deprecated\".equals(label));\n+    }\n+    \n+    @Restricted(NoExternalUse.class)\n+    public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParameter Integer limit) {\n+        List<JSONObject> plugins = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4640102086f7c8524347f0b32432e985467772c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNjUzMw==", "bodyText": "I think already covered here:\nhttps://github.com/timja/jenkins/blob/plugin-manager/core/src/main/java/hudson/PluginManager.java#L2393\nthe other permission checks are for tightening it to ADMINISTER mostly", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r530606533", "createdAt": "2020-11-25T19:44:07Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -1344,6 +1346,120 @@ public void stop() {\n         LogFactory.release(uberClassLoader);\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public static boolean isNonMetaLabel(String label) {\n+        return !(\"adopt-this-plugin\".equals(label) || \"deprecated\".equals(label));\n+    }\n+    \n+    @Restricted(NoExternalUse.class)\n+    public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParameter Integer limit) {\n+        List<JSONObject> plugins = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTgwNQ=="}, "originalCommit": {"oid": "a4640102086f7c8524347f0b32432e985467772c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1MTA4Mw==", "bodyText": "Tested, reader is missing the Overall/SystemRead permission", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r531451083", "createdAt": "2020-11-27T08:34:19Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -1344,6 +1346,120 @@ public void stop() {\n         LogFactory.release(uberClassLoader);\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public static boolean isNonMetaLabel(String label) {\n+        return !(\"adopt-this-plugin\".equals(label) || \"deprecated\".equals(label));\n+    }\n+    \n+    @Restricted(NoExternalUse.class)\n+    public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParameter Integer limit) {\n+        List<JSONObject> plugins = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTgwNQ=="}, "originalCommit": {"oid": "a4640102086f7c8524347f0b32432e985467772c"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 95, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}