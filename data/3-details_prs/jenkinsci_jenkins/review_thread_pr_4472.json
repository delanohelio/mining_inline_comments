{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNTk1NjM3", "number": 4472, "reviewThreads": {"totalCount": 88, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzowMDozN1rODc2AIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDowMTowMFrODxqNRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTcxNDkwOnYy", "diffSide": "RIGHT", "path": ".github/PULL_REQUEST_TEMPLATE.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzowMDozN1rOFlGydg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzowMDozN1rOFlGydg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1Mjg1NA==", "bodyText": "If its required to backport maybe the wording should be clear here.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - [ ] If it would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n          \n          \n            \n            - [ ] If it would make sense to backport the change to LTS, a Jira issue must exist and be labeled as `lts-candidate` to be considered", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374452854", "createdAt": "2020-02-04T03:00:37Z", "author": {"login": "res0nance"}, "path": ".github/PULL_REQUEST_TEMPLATE.md", "diffHunk": "@@ -52,5 +52,5 @@ Before the changes are marked as `ready-for-merge`:\n - [ ] Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n - [ ] Proper changelog labels are set so that the changelog can be generated automatically\n - [ ] If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set and there is a `Proposed upgrade guidelines` section in the PR title. ([example](https://github.com/jenkinsci/jenkins/pull/4387))\n-- [ ] If it would make sense to backport the change to LTS, a JIRA issue should exist and be labeled as `lts-candidate`\n+- [ ] If it would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTcxODYzOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzowMzoxOFrOFlG0rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzowMzoxOFrOFlG0rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1MzQyMA==", "bodyText": "Perhaps this would make sense what exactly triage permissions is\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n          \n          \n            \n            They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374453420", "createdAt": "2020-02-04T03:03:18Z", "author": {"login": "res0nance"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTcyMjcyOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzowNjoxN1rOFlG3FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzowNjoxN1rOFlG3FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NDAzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n          \n          \n            \n            * Pull request is compliant with requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374454036", "createdAt": "2020-02-04T03:06:17Z", "author": {"login": "res0nance"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTcyNDM2OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzowNzo1MFrOFlG4GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNzo1MDo0OVrOFq4JKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NDI5Nw==", "bodyText": "Same as above", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374454297", "createdAt": "2020-02-04T03:07:50Z", "author": {"login": "res0nance"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwNDM2MA==", "bodyText": "@oleg-nenashev this should be as above stating that a jira should exist for backporting changes\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n          \n          \n            \n            * If it would make sense to backport the change to LTS, a Jira issue must exist, be a _Bug_ or _Improvement_, and be labeled as `lts-candidate` to be considered (see [query](https://issues.jenkins-ci.org/issues/?filter=12146)).", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r380504360", "createdAt": "2020-02-18T07:50:49Z", "author": {"login": "res0nance"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NDI5Nw=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjA2NTc0OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzoxNzoyMFrOFlKCpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzoxNzoyMFrOFlKCpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNjE1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n          \n          \n            \n            Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain the it in a good shape.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374506150", "createdAt": "2020-02-04T07:17:20Z", "author": {"login": "timja"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjA2NzE2OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzoxODowNFrOFlKDeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzoxODowNFrOFlKDeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNjM2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n          \n          \n            \n            GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374506362", "createdAt": "2020-02-04T07:18:04Z", "author": {"login": "timja"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjA3MDU5OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzoxOTo0N1rOFlKFiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzoxOTo0N1rOFlKFiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNjg5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n          \n          \n            \n            ** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374506891", "createdAt": "2020-02-04T07:19:47Z", "author": {"login": "timja"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjA3MjYzOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzoyMDo1MFrOFlKGsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzoyMDo1MFrOFlKGsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNzE4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              Example: `Thanks to all contributors! We consider this change as read to be merged towards the next weekly release. It may be merged after a 24hours if there is no negative feedback`\n          \n          \n            \n              Example: `Thanks to all contributors! We consider this change as ready to be merged towards the next weekly release. It may be merged after 24hours if there is no negative feedback`", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374507184", "createdAt": "2020-02-04T07:20:50Z", "author": {"login": "timja"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+**Step 2: Marking for merge**. Once the checklist is passed,\n+a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: `Thanks to all contributors! We consider this change as read to be merged towards the next weekly release. It may be merged after a 24hours if there is no negative feedback`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjA3NDg3OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzoyMTo1OVrOFlKH-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOTo0ODozM1rOFlN2BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNzUxMw==", "bodyText": "may not need to be stated, but possibly could add:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            ** broken master build", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374507513", "createdAt": "2020-02-04T07:21:59Z", "author": {"login": "timja"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+**Step 2: Marking for merge**. Once the checklist is passed,\n+a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: `Thanks to all contributors! We consider this change as read to be merged towards the next weekly release. It may be merged after a 24hours if there is no negative feedback`\n+\n+**Step 3: Merge!**.\n+A Core Maintainer merges the change after a timeout (if needed).\n+After that the change will be landed in the next weekly release unless it gets reverted later.\n+LTS Backporting, if needed, will be handled separately by the release team.\n+\n+=== Exceptions\n+\n+* Jenkins Security Team uses a different process for security issue fixes.\n+  They are reviewed and integrated by the Security team in private repositories.\n+  Security hardening and enhancements go through the standard process.\n+* Release Team members are permitted to bypass the review/merge process if and only if a change is needed to unblock the security release.\n+  Common review process is used otherwise.\n+* 24 hours timeout after `ready-for-merge` is not required for...\n+//TODO(oleg_nenashev): Define \"trivial\" better to avoid loopholes\n+** trivial changes like typo fixes or minor Javadoc improvements\n+** changes which do not affect the production code: Jenkinsfile tweaks, tools inside the repo, etc. \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1OTUzOQ==", "bodyText": "Agree. Cleaning up after bad merges should be expedited to unblock all other PRs and development.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374559539", "createdAt": "2020-02-04T09:31:11Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+**Step 2: Marking for merge**. Once the checklist is passed,\n+a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: `Thanks to all contributors! We consider this change as read to be merged towards the next weekly release. It may be merged after a 24hours if there is no negative feedback`\n+\n+**Step 3: Merge!**.\n+A Core Maintainer merges the change after a timeout (if needed).\n+After that the change will be landed in the next weekly release unless it gets reverted later.\n+LTS Backporting, if needed, will be handled separately by the release team.\n+\n+=== Exceptions\n+\n+* Jenkins Security Team uses a different process for security issue fixes.\n+  They are reviewed and integrated by the Security team in private repositories.\n+  Security hardening and enhancements go through the standard process.\n+* Release Team members are permitted to bypass the review/merge process if and only if a change is needed to unblock the security release.\n+  Common review process is used otherwise.\n+* 24 hours timeout after `ready-for-merge` is not required for...\n+//TODO(oleg_nenashev): Define \"trivial\" better to avoid loopholes\n+** trivial changes like typo fixes or minor Javadoc improvements\n+** changes which do not affect the production code: Jenkinsfile tweaks, tools inside the repo, etc. \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNzUxMw=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU2ODQ1Mw==", "bodyText": "I'm on board with this given that we were bitten by this exact scenario recently in #4467", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374568453", "createdAt": "2020-02-04T09:48:33Z", "author": {"login": "res0nance"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+**Step 2: Marking for merge**. Once the checklist is passed,\n+a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: `Thanks to all contributors! We consider this change as read to be merged towards the next weekly release. It may be merged after a 24hours if there is no negative feedback`\n+\n+**Step 3: Merge!**.\n+A Core Maintainer merges the change after a timeout (if needed).\n+After that the change will be landed in the next weekly release unless it gets reverted later.\n+LTS Backporting, if needed, will be handled separately by the release team.\n+\n+=== Exceptions\n+\n+* Jenkins Security Team uses a different process for security issue fixes.\n+  They are reviewed and integrated by the Security team in private repositories.\n+  Security hardening and enhancements go through the standard process.\n+* Release Team members are permitted to bypass the review/merge process if and only if a change is needed to unblock the security release.\n+  Common review process is used otherwise.\n+* 24 hours timeout after `ready-for-merge` is not required for...\n+//TODO(oleg_nenashev): Define \"trivial\" better to avoid loopholes\n+** trivial changes like typo fixes or minor Javadoc improvements\n+** changes which do not affect the production code: Jenkinsfile tweaks, tools inside the repo, etc. \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNzUxMw=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjA3NTUyOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzoyMjoyN1rOFlKIaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzoyMjoyN1rOFlKIaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNzYyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The process documented in this document is not slate in stone.\n          \n          \n            \n            The process documented in this document is not set in stone.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374507627", "createdAt": "2020-02-04T07:22:27Z", "author": {"login": "timja"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+**Step 2: Marking for merge**. Once the checklist is passed,\n+a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: `Thanks to all contributors! We consider this change as read to be merged towards the next weekly release. It may be merged after a 24hours if there is no negative feedback`\n+\n+**Step 3: Merge!**.\n+A Core Maintainer merges the change after a timeout (if needed).\n+After that the change will be landed in the next weekly release unless it gets reverted later.\n+LTS Backporting, if needed, will be handled separately by the release team.\n+\n+=== Exceptions\n+\n+* Jenkins Security Team uses a different process for security issue fixes.\n+  They are reviewed and integrated by the Security team in private repositories.\n+  Security hardening and enhancements go through the standard process.\n+* Release Team members are permitted to bypass the review/merge process if and only if a change is needed to unblock the security release.\n+  Common review process is used otherwise.\n+* 24 hours timeout after `ready-for-merge` is not required for...\n+//TODO(oleg_nenashev): Define \"trivial\" better to avoid loopholes\n+** trivial changes like typo fixes or minor Javadoc improvements\n+** changes which do not affect the production code: Jenkinsfile tweaks, tools inside the repo, etc. \n+\n+=== Squashing pull requests OR not?\n+\n+Right now we do not have a strict policy about it.\n+\n+== Tools\n+\n+* link:TODO[Core Pull Request Tester]\n+* link:TODO[Core Changelog Generator]\n+* link:/update-since-todo.sh[Javadoc @since version updater]\n+\n+== Feedback\n+\n+The process documented in this document is not slate in stone.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM0MjkxOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxMToyMVrOFlMsHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxMToyMVrOFlMsHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0OTUzMg==", "bodyText": "\"maintain the it\"?\nI don't know what the sentence should be, so no suggestion from me.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374549532", "createdAt": "2020-02-04T09:11:21Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM0NDcyOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxMTo1MlrOFlMtNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxMTo1MlrOFlMtNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0OTgxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Core components like Winstone, Extras Executable WAR, etc.\n          \n          \n            \n            * Core components like Winstone, Executable WAR, etc.\n          \n      \n    \n    \n  \n\nThat's just a GitHub repo naming convention.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374549814", "createdAt": "2020-02-04T09:11:52Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM0NTU4OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxMjoxNVrOFlMt2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDowMToxN1rOGFQGsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0OTk3Nw==", "bodyText": "No need to mention this or chat.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374549977", "createdAt": "2020-02-04T09:12:15Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxNDA3NA==", "bodyText": "I would prefer to do it so that we add contacts in the nearest future", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r377614074", "createdAt": "2020-02-11T12:50:51Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0OTk3Nw=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MTQ4Mw==", "bodyText": "It can be added when they are created?", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r377661483", "createdAt": "2020-02-11T14:18:54Z", "author": {"login": "timja"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0OTk3Nw=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNjc2Mg==", "bodyText": "I agree with adding them when we have them.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r377836762", "createdAt": "2020-02-11T19:03:59Z", "author": {"login": "jeffret-b"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0OTk3Nw=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1OTYxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Office hours: N/A, to be created\n          \n          \n            \n            * Office hours: N/A, to be created", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r408159619", "createdAt": "2020-04-14T14:00:52Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0OTk3Nw=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1OTkyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Office hours: N/A, to be created", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r408159922", "createdAt": "2020-04-14T14:01:17Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0OTk3Nw=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM0NjY0OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxMjo0MFrOFlMuiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMDoyMjozN1rOFlyoww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MDE1Mw==", "bodyText": "\ud83d\udc4e", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374550153", "createdAt": "2020-02-04T09:12:40Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3MTI2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <!--TODO: consider switching to Admin-->\n          \n      \n    \n    \n  \n\nAgreed", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r375171267", "createdAt": "2020-02-05T10:22:37Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MDE1Mw=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM1MDY3OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxNDowMFrOFlMxCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMDoxOTo1NVrOFoDi9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MDc5Mg==", "bodyText": "Except that the initial reviewers team suggestion required them to have experience with core? Doesn't seem to add up. Is this deliberate? Do we want to maintain a team with people who've never been active in this repo?", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374550792", "createdAt": "2020-02-04T09:14:00Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NDg2MQ==", "bodyText": "Daniel, this doesn't require a team to be maintained. As the line below explains anyone with a GH account can commit or review. The first level that requires special privileges or a team is Core Pull Request Reviewers.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374784861", "createdAt": "2020-02-04T16:37:04Z", "author": {"login": "jeffret-b"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MDc5Mg=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMDg0MQ==", "bodyText": "Right, got confused by the naming of this vs. the next one.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374820841", "createdAt": "2020-02-04T17:40:34Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MDc5Mg=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU0NTQ2Mw==", "bodyText": "i will just replace the first role by \"contributor\", should help", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r377545463", "createdAt": "2020-02-11T10:19:55Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MDc5Mg=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM1NDQ4OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxNToyNlrOFlMzew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxNToyNlrOFlMzew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MTQxOQ==", "bodyText": "API additions for use in plugins need to be carefully considered, however. When in doubt, @Beta or @NoExternalUse to make them effectively not real API additions.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374551419", "createdAt": "2020-02-04T09:15:26Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM1NTQ5OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxNTo0OFrOFlM0Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxNTo0OFrOFlM0Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MTU3OQ==", "bodyText": "It might not be clear what this means, so please explain.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374551579", "createdAt": "2020-02-04T09:15:48Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM1NjUwOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxNjowOFrOFlM0wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxNjowOFrOFlM0wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MTc0Ng==", "bodyText": "Unfinished sentence.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374551746", "createdAt": "2020-02-04T09:16:08Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM1ODI5OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxNjo0NVrOFlM15Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDowODo0OVrOFoKQnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MjAzNw==", "bodyText": "Honestly, if you touch it and introduce a weird coding style, you should be called out for it.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374552037", "createdAt": "2020-02-04T09:16:45Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1NTQ1NQ==", "bodyText": "Clarified it", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r377655455", "createdAt": "2020-02-11T14:08:49Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MjAzNw=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM2MDA2OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxNzoyNFrOFlM3BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxNzoyNFrOFlM3BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MjMyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               If you feel this is important, use the `squash-me-please` label\n          \n          \n            \n               If you feel this is important, use the `squash-merge-me` label", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374552325", "createdAt": "2020-02-04T09:17:24Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM2OTgxOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyMDo0MFrOFlM9Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyMDo0MFrOFlM9Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1Mzg4Nw==", "bodyText": "When would it be important though?\nNeeds some guideline. Something like \"An indicator to use merge commits would be if the PR history cleanly separates steps in developing the complete solution, that are individually useful to retain for the future. Substantial iteration after code review feedback, or a generally 'unclean' history (e.g. commits that fix compile errors, have no useful messages, or only exist to rebuild the PR) would indicate a preference for squash-merging the PR\" perhaps?", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374553887", "createdAt": "2020-02-04T09:20:40Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM3MTM5OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyMTowOVrOFlM-Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyMTowOVrOFlM-Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1NDEzOA==", "bodyText": "Don't unnecessarily write Powerpoint slides in text documents. This isn't for consumption by managers, we can handle actual paragraphs longer than one sentence.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374554138", "createdAt": "2020-02-04T09:21:09Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM3NjY5OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyMjozNlrOFlNBHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyMjozNlrOFlNBHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1NDkxMA==", "bodyText": "Needs clarification what this is about. Also tie back to keeping PRs focused.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374554910", "createdAt": "2020-02-04T09:22:36Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM4MTIwOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyNDowMVrOFlND3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyNDowMVrOFlND3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1NTYxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n          \n          \n            \n            * Conversations in the pull request are over OR it is explicit that a reviewer does not block the change (often indicated by line comments attached to an approving PR review, or by using the term \"nit\", from \"nit-picking\")", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374555613", "createdAt": "2020-02-04T09:24:01Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM4MjE1OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyNDoyM1rOFlNEiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyNDoyM1rOFlNEiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1NTc4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n          \n          \n            \n            * Changelog entries in the PR title and/or `Proposed changelog entries` are correct and reflect the current, final state of the PR", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374555787", "createdAt": "2020-02-04T09:24:23Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM4MjYzOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyNDozM1rOFlNE1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDo0OTo0MVrOFqnCFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1NTg2Mg==", "bodyText": "Which labels are changelog-relevant?", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374555862", "createdAt": "2020-02-04T09:24:33Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyMDEzMA==", "bodyText": "this should be set on the label description imo.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r378320130", "createdAt": "2020-02-12T15:22:37Z", "author": {"login": "timja"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1NTg2Mg=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMTEzMg==", "bodyText": "We need labels for labels!", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r378921132", "createdAt": "2020-02-13T15:11:17Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1NTg2Mg=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMTEyNQ==", "bodyText": "I will just reference https://github.com/jenkinsci/.github/blob/master/.github/release-drafter.yml for now to K.I.S.S", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r380221125", "createdAt": "2020-02-17T14:44:30Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1NTg2Mg=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyNDAyMg==", "bodyText": "Oooooh that a nice solution \ud83d\udc4d @oleg-nenashev", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r380224022", "createdAt": "2020-02-17T14:49:41Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1NTg2Mg=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM5NDI1OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyNzo0MFrOFlNLsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyNzo0MFrOFlNLsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1NzYxOA==", "bodyText": "I don't think this correctly describes what it takes to get an upgrade guide entry.\nHow about:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set\n          \n          \n            \n            * If the change needs administrators to be aware of it when upgrading, the `upgrade-guide-needed` label is present. This is usually the case when a data migration occurs, a feature has been removed, a significant behavior change is introduced (including when there is a way to opt out), or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374557618", "createdAt": "2020-02-04T09:27:40Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjQwNDI4OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOTozMDozMlrOFlNRzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDo1Nzo0NVrOGCp-GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1OTE4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ** trivial changes like typo fixes or minor Javadoc improvements\n          \n          \n            \n            ** changes that do not result in changes to the primary deliverables, such as minor changes to code commits, or typo fixes in local (non-parameter) variables.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374559182", "createdAt": "2020-02-04T09:30:32Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+**Step 2: Marking for merge**. Once the checklist is passed,\n+a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: `Thanks to all contributors! We consider this change as read to be merged towards the next weekly release. It may be merged after a 24hours if there is no negative feedback`\n+\n+**Step 3: Merge!**.\n+A Core Maintainer merges the change after a timeout (if needed).\n+After that the change will be landed in the next weekly release unless it gets reverted later.\n+LTS Backporting, if needed, will be handled separately by the release team.\n+\n+=== Exceptions\n+\n+* Jenkins Security Team uses a different process for security issue fixes.\n+  They are reviewed and integrated by the Security team in private repositories.\n+  Security hardening and enhancements go through the standard process.\n+* Release Team members are permitted to bypass the review/merge process if and only if a change is needed to unblock the security release.\n+  Common review process is used otherwise.\n+* 24 hours timeout after `ready-for-merge` is not required for...\n+//TODO(oleg_nenashev): Define \"trivial\" better to avoid loopholes\n+** trivial changes like typo fixes or minor Javadoc improvements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3MzQwOQ==", "bodyText": "I need to think about it. there was no intention to focus on variables only, typo fixes in WebUI also qualify IMHO", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r375173409", "createdAt": "2020-02-05T10:26:51Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+**Step 2: Marking for merge**. Once the checklist is passed,\n+a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: `Thanks to all contributors! We consider this change as read to be merged towards the next weekly release. It may be merged after a 24hours if there is no negative feedback`\n+\n+**Step 3: Merge!**.\n+A Core Maintainer merges the change after a timeout (if needed).\n+After that the change will be landed in the next weekly release unless it gets reverted later.\n+LTS Backporting, if needed, will be handled separately by the release team.\n+\n+=== Exceptions\n+\n+* Jenkins Security Team uses a different process for security issue fixes.\n+  They are reviewed and integrated by the Security team in private repositories.\n+  Security hardening and enhancements go through the standard process.\n+* Release Team members are permitted to bypass the review/merge process if and only if a change is needed to unblock the security release.\n+  Common review process is used otherwise.\n+* 24 hours timeout after `ready-for-merge` is not required for...\n+//TODO(oleg_nenashev): Define \"trivial\" better to avoid loopholes\n+** trivial changes like typo fixes or minor Javadoc improvements", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1OTE4Mg=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxOTE0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ** trivial changes like typo fixes or minor Javadoc improvements\n          \n          \n            \n            * changes that do not result in changes to the primary functionality, such as typo fixes in documentation or code which is not exposed as public API.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r386419149", "createdAt": "2020-03-02T14:20:24Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+**Step 2: Marking for merge**. Once the checklist is passed,\n+a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: `Thanks to all contributors! We consider this change as read to be merged towards the next weekly release. It may be merged after a 24hours if there is no negative feedback`\n+\n+**Step 3: Merge!**.\n+A Core Maintainer merges the change after a timeout (if needed).\n+After that the change will be landed in the next weekly release unless it gets reverted later.\n+LTS Backporting, if needed, will be handled separately by the release team.\n+\n+=== Exceptions\n+\n+* Jenkins Security Team uses a different process for security issue fixes.\n+  They are reviewed and integrated by the Security team in private repositories.\n+  Security hardening and enhancements go through the standard process.\n+* Release Team members are permitted to bypass the review/merge process if and only if a change is needed to unblock the security release.\n+  Common review process is used otherwise.\n+* 24 hours timeout after `ready-for-merge` is not required for...\n+//TODO(oleg_nenashev): Define \"trivial\" better to avoid loopholes\n+** trivial changes like typo fixes or minor Javadoc improvements", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1OTE4Mg=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQzNDkzMA==", "bodyText": "@oleg-nenashev Disagree, that would mean any internal PR (e.g. big refactorings and rewrites) is fair game to merge quickly.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r386434930", "createdAt": "2020-03-02T14:46:42Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+**Step 2: Marking for merge**. Once the checklist is passed,\n+a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: `Thanks to all contributors! We consider this change as read to be merged towards the next weekly release. It may be merged after a 24hours if there is no negative feedback`\n+\n+**Step 3: Merge!**.\n+A Core Maintainer merges the change after a timeout (if needed).\n+After that the change will be landed in the next weekly release unless it gets reverted later.\n+LTS Backporting, if needed, will be handled separately by the release team.\n+\n+=== Exceptions\n+\n+* Jenkins Security Team uses a different process for security issue fixes.\n+  They are reviewed and integrated by the Security team in private repositories.\n+  Security hardening and enhancements go through the standard process.\n+* Release Team members are permitted to bypass the review/merge process if and only if a change is needed to unblock the security release.\n+  Common review process is used otherwise.\n+* 24 hours timeout after `ready-for-merge` is not required for...\n+//TODO(oleg_nenashev): Define \"trivial\" better to avoid loopholes\n+** trivial changes like typo fixes or minor Javadoc improvements", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1OTE4Mg=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzNzk3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ** trivial changes like typo fixes or minor Javadoc improvements\n          \n          \n            \n            ** changes that do not result in changes to the primary functionality, such as typo fixes in documentation or localization files\n          \n      \n    \n    \n  \n\nWhat about that @daniel-beck ? If not, will drop the bullet entirely", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r405437976", "createdAt": "2020-04-08T10:57:45Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+**Step 2: Marking for merge**. Once the checklist is passed,\n+a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: `Thanks to all contributors! We consider this change as read to be merged towards the next weekly release. It may be merged after a 24hours if there is no negative feedback`\n+\n+**Step 3: Merge!**.\n+A Core Maintainer merges the change after a timeout (if needed).\n+After that the change will be landed in the next weekly release unless it gets reverted later.\n+LTS Backporting, if needed, will be handled separately by the release team.\n+\n+=== Exceptions\n+\n+* Jenkins Security Team uses a different process for security issue fixes.\n+  They are reviewed and integrated by the Security team in private repositories.\n+  Security hardening and enhancements go through the standard process.\n+* Release Team members are permitted to bypass the review/merge process if and only if a change is needed to unblock the security release.\n+  Common review process is used otherwise.\n+* 24 hours timeout after `ready-for-merge` is not required for...\n+//TODO(oleg_nenashev): Define \"trivial\" better to avoid loopholes\n+** trivial changes like typo fixes or minor Javadoc improvements", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1OTE4Mg=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjQwODA3OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOTozMTozMlrOFlNT9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOTozMTozMlrOFlNT9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1OTczNQ==", "bodyText": "Would reference my suggestion from above.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374559735", "createdAt": "2020-02-04T09:31:32Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to referene them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-me-please` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant wuth requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+**Step 2: Marking for merge**. Once the checklist is passed,\n+a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: `Thanks to all contributors! We consider this change as read to be merged towards the next weekly release. It may be merged after a 24hours if there is no negative feedback`\n+\n+**Step 3: Merge!**.\n+A Core Maintainer merges the change after a timeout (if needed).\n+After that the change will be landed in the next weekly release unless it gets reverted later.\n+LTS Backporting, if needed, will be handled separately by the release team.\n+\n+=== Exceptions\n+\n+* Jenkins Security Team uses a different process for security issue fixes.\n+  They are reviewed and integrated by the Security team in private repositories.\n+  Security hardening and enhancements go through the standard process.\n+* Release Team members are permitted to bypass the review/merge process if and only if a change is needed to unblock the security release.\n+  Common review process is used otherwise.\n+* 24 hours timeout after `ready-for-merge` is not required for...\n+//TODO(oleg_nenashev): Define \"trivial\" better to avoid loopholes\n+** trivial changes like typo fixes or minor Javadoc improvements\n+** changes which do not affect the production code: Jenkinsfile tweaks, tools inside the repo, etc. \n+\n+=== Squashing pull requests OR not?\n+\n+Right now we do not have a strict policy about it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjQyMDkxOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOTozNTo0NFrOFlNcDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNToxMzo0OFrOFpXnNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU2MTgwNw==", "bodyText": "This is missing that reviewers are expected to look at changes critically from a \"product management\" point of view. It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374561807", "createdAt": "2020-02-04T09:35:44Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU2NjE4NA==", "bodyText": "Also: Make it explicit that it is OK to reject changes for pretty much any reason based in the change itself, or request that they (especially in the case of complex changes) go through the JEP process first. Following these guidelines, we require consensus but do not \"allow\" reviewers to object to a PR for any non-technical reason.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374566184", "createdAt": "2020-02-04T09:44:29Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU2MTgwNw=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1NjEyMw==", "bodyText": "I mostly addressed it, except the Following these guidelines, we require consensus but do not \"allow\" reviewers to object to a PR for any non-technical reason. phrase", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r377656123", "createdAt": "2020-02-11T14:09:59Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU2MTgwNw=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMjgwNw==", "bodyText": "To clarify, that wasn't prescriptive, but rather describing a problem I saw with the guidelines. The new/updated section captures my goal very nicely.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r378922807", "createdAt": "2020-02-13T15:13:48Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,162 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and ot is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Extras Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](TODO) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:TODO[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU2MTgwNw=="}, "originalCommit": {"oid": "decc6ff9cff6bddeb0294a8f6ca9ba07c027ff18"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzgyMDA0OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjozMjoyNVrOFla4cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjozMjoyNVrOFla4cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4MjA2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain the it in a good shape.\n          \n          \n            \n            Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374782065", "createdAt": "2020-02-04T16:32:25Z", "author": {"login": "jeffret-b"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,163 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain the it in a good shape.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30adb07f6eb73c1901b4018a1ad78ff8342b4146"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzg0OTUzOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo0MDoxNlrOFlbK7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo0MDoxNlrOFlbK7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4Njc5OA==", "bodyText": "The term \"committer\" here is confusing. Perhaps something like \"PR submitter / reviewer\". \"Committer\" feels like it could describe someone who commits to master, or merges to master.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374786798", "createdAt": "2020-02-04T16:40:16Z", "author": {"login": "jeffret-b"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,163 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30adb07f6eb73c1901b4018a1ad78ff8342b4146"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzg3Mjc4OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo0NjoxOVrOFlbZmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzoxNjozNFrOFlcetQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5MDU1NA==", "bodyText": "The naming between this and the previous one is not sufficiently distinguishable. The difference between the reviewer there and this reviewer is hard to tell from the naming and hard to keep separate. I'm not sure what to suggest, though. The name for level 1 flows into the name for level 2. Alternatives that I can think of for level 2 flow into level 3.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374790554", "createdAt": "2020-02-04T16:46:19Z", "author": {"login": "jeffret-b"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,163 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30adb07f6eb73c1901b4018a1ad78ff8342b4146"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwODI0NQ==", "bodyText": "I think part of the trouble I'm having with suggesting better naming is that I'm not yet entirely clear on the different roles. The level 1 role (basic GH user) and the level 4 role (release manager) are pretty clear. I'm not finding the level 2 and 3 roles as clear so it's harder to suggest meaningfully distinctive names.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374808245", "createdAt": "2020-02-04T17:16:34Z", "author": {"login": "jeffret-b"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,163 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5MDU1NA=="}, "originalCommit": {"oid": "30adb07f6eb73c1901b4018a1ad78ff8342b4146"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzg3NzUwOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo0NzozMVrOFlbckA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo0NzozMVrOFlbckA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5MTMxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n          \n          \n            \n            ** Not every change needs to be merged into the core; many features would be better introduced as plugins.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374791312", "createdAt": "2020-02-04T16:47:31Z", "author": {"login": "jeffret-b"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,163 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30adb07f6eb73c1901b4018a1ad78ff8342b4146"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzg4NTM5OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo0OTozMlrOFlbhdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo0OTozMlrOFlbhdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5MjU2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ** There is no goal to make the code perfect tho\n          \n          \n            \n            ** There is no goal to make the code perfect though.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374792565", "createdAt": "2020-02-04T16:49:32Z", "author": {"login": "jeffret-b"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,163 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30adb07f6eb73c1901b4018a1ad78ff8342b4146"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzg5Mzk4OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo1MTo0N1rOFlbm4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTozNTozNlrOGCrHxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5Mzk1NA==", "bodyText": "I get that this is saying we don't require PR submitters to do this but it's kind of confusing.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374793954", "createdAt": "2020-02-04T16:51:47Z", "author": {"login": "jeffret-b"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,163 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30adb07f6eb73c1901b4018a1ad78ff8342b4146"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI5OTc0MA==", "bodyText": "Agree with Jeff", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r378299740", "createdAt": "2020-02-12T14:52:16Z", "author": {"login": "fcojfernandez"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,163 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5Mzk1NA=="}, "originalCommit": {"oid": "30adb07f6eb73c1901b4018a1ad78ff8342b4146"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwMjA5NQ==", "bodyText": "Needs clarification.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379002095", "createdAt": "2020-02-13T17:15:34Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,163 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5Mzk1NA=="}, "originalCommit": {"oid": "30adb07f6eb73c1901b4018a1ad78ff8342b4146"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NjgzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Breakdown the commit history or squashing PRs\n          \n          \n            \n            * Make contributors to have atomic commit history or to squash their pull request", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r405456839", "createdAt": "2020-04-08T11:35:36Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,163 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5Mzk1NA=="}, "originalCommit": {"oid": "30adb07f6eb73c1901b4018a1ad78ff8342b4146"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzkwMTU4OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo1Mzo1N1rOFlbryg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo1Mzo1N1rOFlbryg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NTIxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A Core Maintainer merges the change after a timeout (if needed).\n          \n          \n            \n            A Core Maintainer merges the change after allowing sufficient time for comment (if needed).\n          \n      \n    \n    \n  \n\nI'm really not sure what this is trying to say and when it might be needed.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374795210", "createdAt": "2020-02-04T16:53:57Z", "author": {"login": "jeffret-b"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,163 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-merge-me` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant with requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change (often indicated by line comments attached to an approving PR review, or by using the term \"nit\", from \"nit-picking\")\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct and reflect the current, final state of the PR\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs administrators to be aware of it when upgrading, the `upgrade-guide-needed` label is present. This is usually the case when a data migration occurs, a feature has been removed, a significant behavior change is introduced (including when there is a way to opt out), or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+**Step 2: Marking for merge**. Once the checklist is passed,\n+a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: `Thanks to all contributors! We consider this change as ready to be merged towards the next weekly release. It may be merged after 24hours if there is no negative feedback`\n+\n+**Step 3: Merge!**.\n+A Core Maintainer merges the change after a timeout (if needed).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30adb07f6eb73c1901b4018a1ad78ff8342b4146"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzkwNDA5OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo1NDo0MFrOFlbtcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMDoyNDo0OFrOFlys7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NTYzMg==", "bodyText": "The \"unless\" part is kind of confusing. I think it can be omitted without leaving anything important out.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374795632", "createdAt": "2020-02-04T16:54:40Z", "author": {"login": "jeffret-b"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,163 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-merge-me` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant with requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change (often indicated by line comments attached to an approving PR review, or by using the term \"nit\", from \"nit-picking\")\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct and reflect the current, final state of the PR\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs administrators to be aware of it when upgrading, the `upgrade-guide-needed` label is present. This is usually the case when a data migration occurs, a feature has been removed, a significant behavior change is introduced (including when there is a way to opt out), or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+**Step 2: Marking for merge**. Once the checklist is passed,\n+a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: `Thanks to all contributors! We consider this change as ready to be merged towards the next weekly release. It may be merged after 24hours if there is no negative feedback`\n+\n+**Step 3: Merge!**.\n+A Core Maintainer merges the change after a timeout (if needed).\n+After that the change will be landed in the next weekly release unless it gets reverted later.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30adb07f6eb73c1901b4018a1ad78ff8342b4146"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3MjMzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            After that the change will be landed in the next weekly release unless it gets reverted later.\n          \n          \n            \n            After that the change will be landed in the next weekly release.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r375172333", "createdAt": "2020-02-05T10:24:48Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,163 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-merge-me` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant with requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change (often indicated by line comments attached to an approving PR review, or by using the term \"nit\", from \"nit-picking\")\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct and reflect the current, final state of the PR\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs administrators to be aware of it when upgrading, the `upgrade-guide-needed` label is present. This is usually the case when a data migration occurs, a feature has been removed, a significant behavior change is introduced (including when there is a way to opt out), or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+**Step 2: Marking for merge**. Once the checklist is passed,\n+a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: `Thanks to all contributors! We consider this change as ready to be merged towards the next weekly release. It may be merged after 24hours if there is no negative feedback`\n+\n+**Step 3: Merge!**.\n+A Core Maintainer merges the change after a timeout (if needed).\n+After that the change will be landed in the next weekly release unless it gets reverted later.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NTYzMg=="}, "originalCommit": {"oid": "30adb07f6eb73c1901b4018a1ad78ff8342b4146"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzkxNjYzOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo1Nzo1MlrOFlb0-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo1Nzo1MlrOFlb0-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NzU2Mg==", "bodyText": "This needs to be completed and better connected with the earlier comment on timeout. \"Timeout\" isn't a great word to use here. Better to use a phrase that indicates the purpose. Something like \"A 24 hour period after ready-for-merge for final comments or concerns\".", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r374797562", "createdAt": "2020-02-04T16:57:52Z", "author": {"login": "jeffret-b"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,163 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+* Ensure that the pull request is feasible.\n+** Not every change needs to be merged into the core, many features would be rather introduced as plugins.\n+   Separate release cycles for plugins also help to deliver changes faster.\n+** We want to extend the Jenkins core and incorporate widely used functionality there,\n+   but we try to keep the core as minimal as possible in terms of dependencies.\n+* Ensure that there is a consensus about the suggested change.\n+** Not all changes are discussed before they submitted as pull requests.\n+   Developer mailing lists, Jira issues and JEPs are used for discussions,\n+   but sometimes the changes go straight to the pull requests.\n+   And we are fine with that, especially for small patches.\n+** Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+   We are fine with that as well\n+** If there is no consensus about the feasibility and implementation,\n+   code reviewers are expected to suggest proper channels to maintainers\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+** There is no goal to make the code perfect tho\n+* Ensure that the pull requests contain user-friendly changelogs and, if needed, upgrade guidelines\n+* Last but not least,\n+  guide newcomer contributors who are not familiar with the project processes.\n+\n+=== Code review non-goals\n+\n+* Enforce a particular coding style\n+** Jenkins core has a complex codebase created by many contributors,\n+   and different files have different designs\n+** Main goal is \n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-merge-me` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant with requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change (often indicated by line comments attached to an approving PR review, or by using the term \"nit\", from \"nit-picking\")\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct and reflect the current, final state of the PR\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs administrators to be aware of it when upgrading, the `upgrade-guide-needed` label is present. This is usually the case when a data migration occurs, a feature has been removed, a significant behavior change is introduced (including when there is a way to opt out), or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+**Step 2: Marking for merge**. Once the checklist is passed,\n+a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: `Thanks to all contributors! We consider this change as ready to be merged towards the next weekly release. It may be merged after 24hours if there is no negative feedback`\n+\n+**Step 3: Merge!**.\n+A Core Maintainer merges the change after a timeout (if needed).\n+After that the change will be landed in the next weekly release unless it gets reverted later.\n+LTS Backporting, if needed, will be handled separately by the release team.\n+\n+=== Exceptions\n+\n+* Jenkins Security Team uses a different process for security issue fixes.\n+  They are reviewed and integrated by the Security team in private repositories.\n+  Security hardening and enhancements go through the standard process.\n+* Release Team members are permitted to bypass the review/merge process if and only if a change is needed to unblock the security release.\n+  Common review process is used otherwise.\n+* 24 hours timeout after `ready-for-merge` is not required for...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30adb07f6eb73c1901b4018a1ad78ff8342b4146"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDIyMDM1OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMDowMDo1MlrOFlx8Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMDowMDo1MlrOFlx8Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE1OTgyNw==", "bodyText": "No native speaker, but it sounds odd to me\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Self-nomination are fine.\n          \n          \n            \n            Self-nomination is fine.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r375159827", "createdAt": "2020-02-05T10:00:52Z", "author": {"login": "fcojfernandez"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,163 @@\n+= Documentation for core maintainers\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain the it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Maintainer roles\n+\n+* Committer / reviewer\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Committers** and **reviewers** are common contributors who submit their changes and who review changes/issues submitted by others.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+<!--TODO: consider switching to Admin-->\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:TODO[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:TODO[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* Anyone can participate as a **committer** or as a **reviewer**.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination are fine.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30adb07f6eb73c1901b4018a1ad78ff8342b4146"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzUyOTE1OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTowMjo0MlrOFoVR3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTowMjo0MlrOFoVR3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNTk5OA==", "bodyText": "It might help newcomers to explain what \"CC\" means or how to ping. I presume this is about using the \"/cc\" syntax in a posted comment. So, maybe something like,\n'If you do not get feedback after three days, you may post a comment on the PR with something like \"Please review, /cc @jenkinsci/core-pr-reviewers\".'", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r377835998", "createdAt": "2020-02-11T19:02:42Z", "author": {"login": "jeffret-b"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -107,8 +107,9 @@ It is a good practice is to create branches instead of pushing to master.\n 4. Fill in the Pull Request description according to the [proposed template].\n 5. Click _Create Pull Request_\n 6. Wait for CI results/reviews, process the feedback.\n-  * If you do not get feedback after 3 days, feel free to ping `@jenkinsci/code-reviewers` to CC.\n-  * Usually we merge pull requests after 2 votes from reviewers or after 1 vote and 1-week delay without extra reviews.\n+  * If you do not get feedback after 3 days, feel free to ping `@jenkinsci/core-pr-reviewers` to CC.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzU0NzI1OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTowODowOFrOFoVdlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTowMDozNFrOGCqDzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzODk5Ng==", "bodyText": "This mention of Jira is a little out of scope for this document. It isn't clearly defined. (Can a Contributor only review and triage? Can they also submit?) It's only mentioned here. I suggest dropping it.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r377838996", "createdAt": "2020-02-11T19:08:08Z", "author": {"login": "jeffret-b"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1OTczNQ==", "bodyText": "I prefer including it. I think we should encourage contributors to triage incoming issues as one of their ways of contributing.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r400859735", "createdAt": "2020-03-31T12:08:04Z", "author": {"login": "MarkEWaite"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzODk5Ng=="}, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzOTQzNg==", "bodyText": "I will add Jira separately once the triage process is established\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            They can also review and triage incoming issues in Jenkins Jira.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r405439436", "createdAt": "2020-04-08T11:00:34Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzODk5Ng=="}, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzU1NDY3OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOToxMDozMlrOFoViZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOToxMDozMlrOFoViZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0MDIyOQ==", "bodyText": "nit: suggested -> \"There is no special preconditions to do so. Anyone is welcome to contribute.\"", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r377840229", "createdAt": "2020-02-11T19:10:32Z", "author": {"login": "jeffret-b"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzU2MTgwOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOToxMjozOFrOFoVm9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTowMToyOFrOGCqFWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0MTM5Ng==", "bodyText": "I would fold these for each role into the role descriptions above. It's better to keep it together and no reason to duplicate the list.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r377841396", "createdAt": "2020-02-11T19:12:38Z", "author": {"login": "jeffret-b"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzOTgzMw==", "bodyText": "I tried merging it, but such approach looks better. Roles are more important to standalone contributors", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r405439833", "createdAt": "2020-04-08T11:01:28Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0MTM5Ng=="}, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDg3MjUxOnYy", "diffSide": "RIGHT", "path": ".github/PULL_REQUEST_TEMPLATE.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowMDoyMlrOFpb3gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzoyNDo1NFrOFqkTog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5MjUxNA==", "bodyText": "Ambiguous:\n\nIs it not necessary to have a Jira issue?\nIs it not necessary that the Jira issue is useful?", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r378992514", "createdAt": "2020-02-13T17:00:22Z", "author": {"login": "daniel-beck"}, "path": ".github/PULL_REQUEST_TEMPLATE.md", "diffHunk": "@@ -27,7 +27,7 @@ N/A\n \n ### Submitter checklist\n \n-- [ ] JIRA issue is well described\n+- [ ] Jira issue is well described (not mandatory)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3NTQwNw==", "bodyText": "What if I adjust it like...\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - [ ] Jira issue is well described (not mandatory)\n          \n          \n            \n            - [ ] Jira issue is well described (if needed)\n          \n      \n    \n    \n  \n\nCan just revert it tho", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r380175407", "createdAt": "2020-02-17T13:16:38Z", "author": {"login": "oleg-nenashev"}, "path": ".github/PULL_REQUEST_TEMPLATE.md", "diffHunk": "@@ -27,7 +27,7 @@ N/A\n \n ### Submitter checklist\n \n-- [ ] JIRA issue is well described\n+- [ ] Jira issue is well described (not mandatory)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5MjUxNA=="}, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3OTM2Mg==", "bodyText": "How about\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - [ ] Jira issue is well described (not mandatory)\n          \n          \n            \n            - [ ] (If applicable) Jira issue is well described", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r380179362", "createdAt": "2020-02-17T13:24:54Z", "author": {"login": "daniel-beck"}, "path": ".github/PULL_REQUEST_TEMPLATE.md", "diffHunk": "@@ -27,7 +27,7 @@ N/A\n \n ### Submitter checklist\n \n-- [ ] JIRA issue is well described\n+- [ ] Jira issue is well described (not mandatory)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5MjUxNA=="}, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDg4NTM3OnYy", "diffSide": "RIGHT", "path": ".github/PULL_REQUEST_TEMPLATE.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowMjo1MFrOFpb_sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowMjo1MFrOFpb_sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5NDYxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - [ ] If it would make sense to backport the change to LTS, a Jira issue must exist and be labeled as `lts-candidate` to be considered\n          \n          \n            \n            - [ ] If it would make sense to backport the change to LTS, a Jira issue must exist, be a _Bug_ or _Improvement_, and be labeled as `lts-candidate` to be considered (see [query](https://issues.jenkins-ci.org/issues/?filter=12146)).", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r378994610", "createdAt": "2020-02-13T17:02:50Z", "author": {"login": "daniel-beck"}, "path": ".github/PULL_REQUEST_TEMPLATE.md", "diffHunk": "@@ -52,5 +52,4 @@ Before the changes are marked as `ready-for-merge`:\n - [ ] Changelog entries in the PR title and/or `Proposed changelog entries` are correct\n - [ ] Proper changelog labels are set so that the changelog can be generated automatically\n - [ ] If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set and there is a `Proposed upgrade guidelines` section in the PR title. ([example](https://github.com/jenkinsci/jenkins/pull/4387))\n-- [ ] If it would make sense to backport the change to LTS, a JIRA issue should exist and be labeled as `lts-candidate`\n-\n+- [ ] If it would make sense to backport the change to LTS, a Jira issue must exist and be labeled as `lts-candidate` to be considered", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDg5MjIwOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowNDoxN1rOFpcENQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowNDoxN1rOFpcENQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5NTc2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * Usually we merge pull requests after 2 votes from reviewers and some feedback timeout.\n          \n          \n            \n              * Usually we merge pull requests after 2 approvals from reviewers, no requested changes, and having waited some more time to give others an opportunity to provide more feedback.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r378995765", "createdAt": "2020-02-13T17:04:17Z", "author": {"login": "daniel-beck"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -107,8 +107,9 @@ It is a good practice is to create branches instead of pushing to master.\n 4. Fill in the Pull Request description according to the [proposed template].\n 5. Click _Create Pull Request_\n 6. Wait for CI results/reviews, process the feedback.\n-  * If you do not get feedback after 3 days, feel free to ping `@jenkinsci/code-reviewers` to CC.\n-  * Usually we merge pull requests after 2 votes from reviewers or after 1 vote and 1-week delay without extra reviews.\n+  * If you do not get feedback after 3 days, feel free to ping `@jenkinsci/core-pr-reviewers` to CC.\n+  * Usually we merge pull requests after 2 votes from reviewers and some feedback timeout.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDg5NTgzOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowNToxNlrOFpcGaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowNToxNlrOFpcGaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5NjMyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n          \n          \n            \n            They get https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization[Triage permissions] so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r378996329", "createdAt": "2020-02-13T17:05:16Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDg5OTM3OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowNjoxN1rOFpcIvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowNjoxN1rOFpcIvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5NjkyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n          \n          \n            \n            Team members get `Write` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r378996926", "createdAt": "2020-02-13T17:06:17Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkwMDk3OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowNjo0NVrOFpcJyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowNjo0NVrOFpcJyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5NzE5Mg==", "bodyText": "Makes no sense to insert a link here when the stable branch changes every few months.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r378997192", "createdAt": "2020-02-13T17:06:45Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkwMzI5OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowNzoyOVrOFpcLSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1ODoxNlrOGCwkcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5NzU3OA==", "bodyText": "Would comment this section out while it's still pretty much a WIP.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r378997578", "createdAt": "2020-02-13T17:07:29Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MDk3Nw==", "bodyText": "Now that the official code signing certificates have been received, I think we should leave this in the guide.  We hope it will be delivering code soon.  Work is definitely progressing.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r400860977", "createdAt": "2020-03-31T12:10:02Z", "author": {"login": "MarkEWaite"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5NzU3OA=="}, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NjA5Nw==", "bodyText": "I agree that we should rater keep it", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r405546097", "createdAt": "2020-04-08T13:58:16Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5NzU3OA=="}, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkwNDU5OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowNzo1MVrOFpcMDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowNzo1MVrOFpcMDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5Nzc3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * *Contributors*. Anyone can participate.\n          \n          \n            \n            * **Contributors**. Anyone can participate.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r378997774", "createdAt": "2020-02-13T17:07:51Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkwODkxOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowOTowMFrOFpcOuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowOTowMFrOFpcOuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5ODQ1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n          \n          \n            \n            * Ensure that the pull request is _feasible_ and that it fits the Jenkins ecosystem", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r378998456", "createdAt": "2020-02-13T17:09:00Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkwOTQ0OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowOTowOFrOFpcPAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowOTowOFrOFpcPAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5ODUzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Verify compatibility of the suggested changes\n          \n          \n            \n            * Verify _compatibility_ of the suggested changes", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r378998530", "createdAt": "2020-02-13T17:09:08Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkwOTgxOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowOToxN1rOFpcPRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowOToxN1rOFpcPRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5ODU5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n          \n          \n            \n            * Ensure that the pull request matches the _code quality_ practices: test automation, Javadoc for newly introduced APIs, etc.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r378998596", "createdAt": "2020-02-13T17:09:17Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkxMDQ1OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowOTozMVrOFpcPuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowOTozMVrOFpcPuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5ODcxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Ensure there is a consensus among reviewers about all items above \n          \n          \n            \n            * Ensure there is a _consensus_ among reviewers about all items above.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r378998712", "createdAt": "2020-02-13T17:09:31Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkxMTYwOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowOTo0OVrOFpcQeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzo1OToyOVrOFqlZjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5ODkwNA==", "bodyText": "This doesn't have its own section below, as the only item in this list. Deliberate?", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r378998904", "createdAt": "2020-02-13T17:09:49Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE5NzI2MA==", "bodyText": "yes. Can be expanded later if needed", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r380197260", "createdAt": "2020-02-17T13:59:29Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5ODkwNA=="}, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkxODgwOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxMTozN1rOFpcUxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxMTozN1rOFpcUxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwMDAwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Although we provide some tools for checking API usages across open-source plugins,\n          \n          \n            \n            Although we have some tools (like https://github.com/jenkins-infra/usage-in-plugins[usage-in-plugins]) for checking API usages across open-source plugins,", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379000005", "createdAt": "2020-02-13T17:11:37Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkyMTM5OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxMjoyNFrOFpcWaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzoxOTo1MFrOFqkKCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwMDQyNQ==", "bodyText": "Would not consider that relevant. It's also not actionable, what would a reader take from this?", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379000425", "createdAt": "2020-02-13T17:12:24Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3NjkwNg==", "bodyText": "", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r380176906", "createdAt": "2020-02-17T13:19:50Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwMDQyNQ=="}, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkyNTk2OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxMzo0N1rOFpcZQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzoxNjoxNVrOF-VPew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwMTE1Mw==", "bodyText": "Add a note that we're aware that there are existing inconsistencies in the code, and that new code should follow the (majority) style guide, while updates to existing code should only fix formatting on the lines affected anyway to keep the diff minimal, while respecting the overall formatting of the file?", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379001153", "createdAt": "2020-02-13T17:13:47Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+There is no goal to make the code perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkwNDA1OQ==", "bodyText": "I also would appreciate a recommendation to keep diff volume small.\nMinimizing diff size helps reviewers focus their attention on the specifics of the change and reduces the risk of a change from one pull request creating a conflict in another pull request.  Both are worthwhile.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r400904059", "createdAt": "2020-03-31T13:16:15Z", "author": {"login": "MarkEWaite"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+There is no goal to make the code perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwMTE1Mw=="}, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkyNzM3OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxNDoxNlrOFpcaLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxNDoxNlrOFpcaLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwMTM5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            code reviewers are expected to suggest proper channels to maintainers.\n          \n          \n            \n            code reviewers are expected to suggest proper channels for contributors to discuss their contribution.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379001391", "createdAt": "2020-02-13T17:14:16Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+There is no goal to make the code perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+**Consensus**.\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels to maintainers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkyNzk1OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxNDoyNFrOFpcaiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxNDoyNFrOFpcaiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwMTQ4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is a default way to go\n          \n          \n            \n            * A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is the default way to go", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379001480", "createdAt": "2020-02-13T17:14:24Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+There is no goal to make the code perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+**Consensus**.\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels to maintainers.\n+\n+* A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is a default way to go", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkyODYwOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxNDozN1rOFpca6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxNDozN1rOFpca6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwMTU3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * If a consensus cannot be reached in the mailing list,\n          \n          \n            \n            * If no consensus can be reached on the mailing list,", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379001579", "createdAt": "2020-02-13T17:14:37Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+There is no goal to make the code perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+**Consensus**.\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels to maintainers.\n+\n+* A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is a default way to go\n+* If a consensus cannot be reached in the mailing list,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkyODkxOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxNDo0M1rOFpcbGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxNDo0M1rOFpcbGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwMTYyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              voting at the link:https://jenkins.io/project/governance-meeting/[Jenkins Governance Meeting] can be used to get a final decision\n          \n          \n            \n              voting at the link:https://jenkins.io/project/governance-meeting/[Jenkins Governance Meeting] can be used to get a final decision.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379001624", "createdAt": "2020-02-13T17:14:43Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+There is no goal to make the code perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+**Consensus**.\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels to maintainers.\n+\n+* A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is a default way to go\n+* If a consensus cannot be reached in the mailing list,\n+  voting at the link:https://jenkins.io/project/governance-meeting/[Jenkins Governance Meeting] can be used to get a final decision", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkzMjMzOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxNTo0NVrOFpcdTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxNTo0NVrOFpcdTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwMjE4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               If you feel this is important, use the `squash-merge-me` label\n          \n          \n            \n               If you feel this is important, add the `squash-merge-me` label", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379002189", "createdAt": "2020-02-13T17:15:45Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+There is no goal to make the code perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+**Consensus**.\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels to maintainers.\n+\n+* A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is a default way to go\n+* If a consensus cannot be reached in the mailing list,\n+  voting at the link:https://jenkins.io/project/governance-meeting/[Jenkins Governance Meeting] can be used to get a final decision\n+\n+=== Code review non-goals\n+\n+Code reviews do NOT pursue the following goals:\n+\n+* Accepting/merging any pull request. \n+  Not everything is going to be merged, and reviewers are expected to focus on the Jenkins ecosystem integrity first.\n+  We guide contributors and help them to get their changes integrated, but it needs cooperation on both sides.\n+  It is **fine** to close invalid and inactive pull requests if there is no activity by a submitter or other contributors.\n+* Enforcing a particular coding style.\n+  Jenkins core has a complex codebase created by many contributors, and different files have different designs.\n+  Our main goal is to firstly have the code readable by other contributors.\n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-merge-me` label", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkzMzU1OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxNjowOFrOFpceFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzoyMToxMlrOFqkMsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwMjM4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n          \n          \n            \n            ** We want to keep pull requests focused when possible (one feature / fix per pull request),", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379002389", "createdAt": "2020-02-13T17:16:08Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+There is no goal to make the code perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+**Consensus**.\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels to maintainers.\n+\n+* A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is a default way to go\n+* If a consensus cannot be reached in the mailing list,\n+  voting at the link:https://jenkins.io/project/governance-meeting/[Jenkins Governance Meeting] can be used to get a final decision\n+\n+=== Code review non-goals\n+\n+Code reviews do NOT pursue the following goals:\n+\n+* Accepting/merging any pull request. \n+  Not everything is going to be merged, and reviewers are expected to focus on the Jenkins ecosystem integrity first.\n+  We guide contributors and help them to get their changes integrated, but it needs cooperation on both sides.\n+  It is **fine** to close invalid and inactive pull requests if there is no activity by a submitter or other contributors.\n+* Enforcing a particular coding style.\n+  Jenkins core has a complex codebase created by many contributors, and different files have different designs.\n+  Our main goal is to firstly have the code readable by other contributors.\n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-merge-me` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwMjUyNw==", "bodyText": "What does \"separate commit\" mean here?", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379002527", "createdAt": "2020-02-13T17:16:22Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+There is no goal to make the code perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+**Consensus**.\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels to maintainers.\n+\n+* A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is a default way to go\n+* If a consensus cannot be reached in the mailing list,\n+  voting at the link:https://jenkins.io/project/governance-meeting/[Jenkins Governance Meeting] can be used to get a final decision\n+\n+=== Code review non-goals\n+\n+Code reviews do NOT pursue the following goals:\n+\n+* Accepting/merging any pull request. \n+  Not everything is going to be merged, and reviewers are expected to focus on the Jenkins ecosystem integrity first.\n+  We guide contributors and help them to get their changes integrated, but it needs cooperation on both sides.\n+  It is **fine** to close invalid and inactive pull requests if there is no activity by a submitter or other contributors.\n+* Enforcing a particular coding style.\n+  Jenkins core has a complex codebase created by many contributors, and different files have different designs.\n+  Our main goal is to firstly have the code readable by other contributors.\n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-merge-me` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwMjM4OQ=="}, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3NzU4Ng==", "bodyText": "Whatever. Your option is better", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r380177586", "createdAt": "2020-02-17T13:21:12Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+There is no goal to make the code perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+**Consensus**.\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels to maintainers.\n+\n+* A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is a default way to go\n+* If a consensus cannot be reached in the mailing list,\n+  voting at the link:https://jenkins.io/project/governance-meeting/[Jenkins Governance Meeting] can be used to get a final decision\n+\n+=== Code review non-goals\n+\n+Code reviews do NOT pursue the following goals:\n+\n+* Accepting/merging any pull request. \n+  Not everything is going to be merged, and reviewers are expected to focus on the Jenkins ecosystem integrity first.\n+  We guide contributors and help them to get their changes integrated, but it needs cooperation on both sides.\n+  It is **fine** to close invalid and inactive pull requests if there is no activity by a submitter or other contributors.\n+* Enforcing a particular coding style.\n+  Jenkins core has a complex codebase created by many contributors, and different files have different designs.\n+  Our main goal is to firstly have the code readable by other contributors.\n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-merge-me` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwMjM4OQ=="}, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkzNzQ4OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxNzoxN1rOFpcgjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxNzoxN1rOFpcgjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwMzAyMA==", "bodyText": "Line could use some reformatting after applying the suggested edit.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379003020", "createdAt": "2020-02-13T17:17:17Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+There is no goal to make the code perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+**Consensus**.\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels to maintainers.\n+\n+* A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is a default way to go\n+* If a consensus cannot be reached in the mailing list,\n+  voting at the link:https://jenkins.io/project/governance-meeting/[Jenkins Governance Meeting] can be used to get a final decision\n+\n+=== Code review non-goals\n+\n+Code reviews do NOT pursue the following goals:\n+\n+* Accepting/merging any pull request. \n+  Not everything is going to be merged, and reviewers are expected to focus on the Jenkins ecosystem integrity first.\n+  We guide contributors and help them to get their changes integrated, but it needs cooperation on both sides.\n+  It is **fine** to close invalid and inactive pull requests if there is no activity by a submitter or other contributors.\n+* Enforcing a particular coding style.\n+  Jenkins core has a complex codebase created by many contributors, and different files have different designs.\n+  Our main goal is to firstly have the code readable by other contributors.\n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-merge-me` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant with requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change (often indicated by line comments attached to an approving PR review, or by using the term \"nit\", from \"nit-picking\")\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct and reflect the current, final state of the PR\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs administrators to be aware of it when upgrading, the `upgrade-guide-needed` label is present. This is usually the case when a data migration occurs, a feature has been removed, a significant behavior change is introduced (including when there is a way to opt out), or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkzODU2OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxNzozM1rOFpchOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxNzozM1rOFpchOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwMzE5Mw==", "bodyText": "Broken text.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379003193", "createdAt": "2020-02-13T17:17:33Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+There is no goal to make the code perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+**Consensus**.\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels to maintainers.\n+\n+* A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is a default way to go\n+* If a consensus cannot be reached in the mailing list,\n+  voting at the link:https://jenkins.io/project/governance-meeting/[Jenkins Governance Meeting] can be used to get a final decision\n+\n+=== Code review non-goals\n+\n+Code reviews do NOT pursue the following goals:\n+\n+* Accepting/merging any pull request. \n+  Not everything is going to be merged, and reviewers are expected to focus on the Jenkins ecosystem integrity first.\n+  We guide contributors and help them to get their changes integrated, but it needs cooperation on both sides.\n+  It is **fine** to close invalid and inactive pull requests if there is no activity by a submitter or other contributors.\n+* Enforcing a particular coding style.\n+  Jenkins core has a complex codebase created by many contributors, and different files have different designs.\n+  Our main goal is to firstly have the code readable by other contributors.\n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-merge-me` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant with requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change (often indicated by line comments attached to an approving PR review, or by using the term \"nit\", from \"nit-picking\")\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct and reflect the current, final state of the PR\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs administrators to be aware of it when upgrading, the `upgrade-guide-needed` label is present. This is usually the case when a data migration occurs, a feature has been removed, a significant behavior change is introduced (including when there is a way to opt out), or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n+  and there is a `Proposed upgrade guidelines` section in the PR title.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDk0NjIzOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxOTozNlrOFpcmIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzoxODo0NFrOFqkH_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwNDQ0OA==", "bodyText": "Strictly speaking, the final boss is the release officer, elected every year? \ud83d\ude04", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379004448", "createdAt": "2020-02-13T17:19:36Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3NjM4MA==", "bodyText": "Yup", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r380176380", "createdAt": "2020-02-17T13:18:44Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwNDQ0OA=="}, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDk1NDM5OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoyMTo0N1rOFpcrCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoyMTo0N1rOFpcrCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwNTcwNA==", "bodyText": "Weird phrasing, perhaps\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            There is no goal to make the code perfect, but we want to ensure that all new code matches basic quality standards:\n          \n          \n            \n            The code doesn't have to be perfect, but we want to ensure that all new code matches basic quality standards:", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379005704", "createdAt": "2020-02-13T17:21:47Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+There is no goal to make the code perfect, but we want to ensure that all new code matches basic quality standards:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDk2MTU5OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoyNDowOVrOFpcvzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoyNDowOVrOFpcvzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwNjkyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * 24 hours timeout after `ready-for-merge` is not required for...\n          \n          \n            \n            * 24 hours waiting period after adding the `ready-for-merge` label is not required for:", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379006926", "createdAt": "2020-02-13T17:24:09Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+There is no goal to make the code perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+**Consensus**.\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels to maintainers.\n+\n+* A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is a default way to go\n+* If a consensus cannot be reached in the mailing list,\n+  voting at the link:https://jenkins.io/project/governance-meeting/[Jenkins Governance Meeting] can be used to get a final decision\n+\n+=== Code review non-goals\n+\n+Code reviews do NOT pursue the following goals:\n+\n+* Accepting/merging any pull request. \n+  Not everything is going to be merged, and reviewers are expected to focus on the Jenkins ecosystem integrity first.\n+  We guide contributors and help them to get their changes integrated, but it needs cooperation on both sides.\n+  It is **fine** to close invalid and inactive pull requests if there is no activity by a submitter or other contributors.\n+* Enforcing a particular coding style.\n+  Jenkins core has a complex codebase created by many contributors, and different files have different designs.\n+  Our main goal is to firstly have the code readable by other contributors.\n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-merge-me` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant with requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change (often indicated by line comments attached to an approving PR review, or by using the term \"nit\", from \"nit-picking\")\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct and reflect the current, final state of the PR\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs administrators to be aware of it when upgrading, the `upgrade-guide-needed` label is present. This is usually the case when a data migration occurs, a feature has been removed, a significant behavior change is introduced (including when there is a way to opt out), or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+**Step 2: Marking for merge**. Once the checklist is passed,\n+a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: `Thanks to all contributors! We consider this change as ready to be merged towards the next weekly release. It may be merged after 24hours if there is no negative feedback`\n+\n+**Step 3: Merge!**.\n+A Core Maintainer merges the change after allowing sufficient time for comment (if needed).\n+After that the change will be landed in the next weekly release.\n+LTS Backporting, if needed, will be handled separately by the release team.\n+\n+=== Exceptions\n+\n+* Jenkins Security Team uses a different process for security issue fixes.\n+  They are reviewed and integrated by the Security team in private repositories.\n+  Security hardening and enhancements go through the standard process.\n+* Release Team members are permitted to bypass the review/merge process if and only if a change is needed to unblock the security release.\n+  Common review process is used otherwise.\n+* 24 hours timeout after `ready-for-merge` is not required for...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDk2MTkxOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoyNDoxNlrOFpcwAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoyNDoxNlrOFpcwAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwNjk3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            **Step 3: Merge!**.\n          \n          \n            \n            **Step 3: Merge!**", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379006976", "createdAt": "2020-02-13T17:24:16Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+There is no goal to make the code perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+**Consensus**.\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels to maintainers.\n+\n+* A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is a default way to go\n+* If a consensus cannot be reached in the mailing list,\n+  voting at the link:https://jenkins.io/project/governance-meeting/[Jenkins Governance Meeting] can be used to get a final decision\n+\n+=== Code review non-goals\n+\n+Code reviews do NOT pursue the following goals:\n+\n+* Accepting/merging any pull request. \n+  Not everything is going to be merged, and reviewers are expected to focus on the Jenkins ecosystem integrity first.\n+  We guide contributors and help them to get their changes integrated, but it needs cooperation on both sides.\n+  It is **fine** to close invalid and inactive pull requests if there is no activity by a submitter or other contributors.\n+* Enforcing a particular coding style.\n+  Jenkins core has a complex codebase created by many contributors, and different files have different designs.\n+  Our main goal is to firstly have the code readable by other contributors.\n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-merge-me` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant with requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change (often indicated by line comments attached to an approving PR review, or by using the term \"nit\", from \"nit-picking\")\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct and reflect the current, final state of the PR\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs administrators to be aware of it when upgrading, the `upgrade-guide-needed` label is present. This is usually the case when a data migration occurs, a feature has been removed, a significant behavior change is introduced (including when there is a way to opt out), or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+**Step 2: Marking for merge**. Once the checklist is passed,\n+a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: `Thanks to all contributors! We consider this change as ready to be merged towards the next weekly release. It may be merged after 24hours if there is no negative feedback`\n+\n+**Step 3: Merge!**.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDk2MjQ3OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoyNDoyNlrOFpcwVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoyNDoyNlrOFpcwVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwNzA2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              Example: `Thanks to all contributors! We consider this change as ready to be merged towards the next weekly release. It may be merged after 24hours if there is no negative feedback`\n          \n          \n            \n              Example: _Thanks to all contributors! We consider this change as ready to be merged towards the next weekly release. It may be merged after 24hours if there is no negative feedback_", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379007062", "createdAt": "2020-02-13T17:24:26Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+There is no goal to make the code perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+**Consensus**.\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels to maintainers.\n+\n+* A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is a default way to go\n+* If a consensus cannot be reached in the mailing list,\n+  voting at the link:https://jenkins.io/project/governance-meeting/[Jenkins Governance Meeting] can be used to get a final decision\n+\n+=== Code review non-goals\n+\n+Code reviews do NOT pursue the following goals:\n+\n+* Accepting/merging any pull request. \n+  Not everything is going to be merged, and reviewers are expected to focus on the Jenkins ecosystem integrity first.\n+  We guide contributors and help them to get their changes integrated, but it needs cooperation on both sides.\n+  It is **fine** to close invalid and inactive pull requests if there is no activity by a submitter or other contributors.\n+* Enforcing a particular coding style.\n+  Jenkins core has a complex codebase created by many contributors, and different files have different designs.\n+  Our main goal is to firstly have the code readable by other contributors.\n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-merge-me` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant with requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change (often indicated by line comments attached to an approving PR review, or by using the term \"nit\", from \"nit-picking\")\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct and reflect the current, final state of the PR\n+* Proper changelog labels are set so that the changelog can be generated automatically\n+* If the change needs administrators to be aware of it when upgrading, the `upgrade-guide-needed` label is present. This is usually the case when a data migration occurs, a feature has been removed, a significant behavior change is introduced (including when there is a way to opt out), or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n+  and there is a `Proposed upgrade guidelines` section in the PR title.\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example])\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+**Step 2: Marking for merge**. Once the checklist is passed,\n+a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: `Thanks to all contributors! We consider this change as ready to be merged towards the next weekly release. It may be merged after 24hours if there is no negative feedback`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDk2MzM3OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoyNDo0MlrOFpcw6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoyNDo0MlrOFpcw6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwNzIwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Changelog entries in the PR title and/or `Proposed changelog entries` are correct and reflect the current, final state of the PR\n          \n          \n            \n            * Changelog entries in the PR title and/or _Proposed changelog entries_ are correct and reflect the current, final state of the PR", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r379007208", "createdAt": "2020-02-13T17:24:42Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,200 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so, anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get [Triage permissions](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization) so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:TODO[Stable branch].\n+Team members get `Admin` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* *Contributors*. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is feasible and that it fits the Jenkins ecosystem\n+* Verify compatibility of the suggested changes\n+* Ensure that the pull request matches the code quality practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a consensus among reviewers about all items above \n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we provide some tools for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+There is no goal to make the code perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+**Consensus**.\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels to maintainers.\n+\n+* A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is a default way to go\n+* If a consensus cannot be reached in the mailing list,\n+  voting at the link:https://jenkins.io/project/governance-meeting/[Jenkins Governance Meeting] can be used to get a final decision\n+\n+=== Code review non-goals\n+\n+Code reviews do NOT pursue the following goals:\n+\n+* Accepting/merging any pull request. \n+  Not everything is going to be merged, and reviewers are expected to focus on the Jenkins ecosystem integrity first.\n+  We guide contributors and help them to get their changes integrated, but it needs cooperation on both sides.\n+  It is **fine** to close invalid and inactive pull requests if there is no activity by a submitter or other contributors.\n+* Enforcing a particular coding style.\n+  Jenkins core has a complex codebase created by many contributors, and different files have different designs.\n+  Our main goal is to firstly have the code readable by other contributors.\n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, use the `squash-merge-me` label\n+** We want to keep pull requests atomic when possible (one feature / fix - separate commit),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+**Step 1: Maintainer checklist**. Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant with requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change (often indicated by line comments attached to an approving PR review, or by using the term \"nit\", from \"nit-picking\")\n+* Changelog entries in the PR title and/or `Proposed changelog entries` are correct and reflect the current, final state of the PR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3436507c00916a882266cf8321219f9915fd4e"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjA2NjQwOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo0MToyOFrOF-T0VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDo0ODowOFrOGCpqSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MDcyNQ==", "bodyText": "Unfinished", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r400880725", "createdAt": "2020-03-31T12:41:28Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -161,18 +163,33 @@ Code reviews do NOT pursue the following goals:\n   or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n * It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n \n-**Step 2: Marking for merge**. Once the checklist is passed,\n-a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+==== Step 2: Is it a good time to merge?\n+\n+link:[https://jenkins.io/security/](Jenkins security updates) are coordinated with the LTS calendar, and if the weekly introduces regressions, users of that line may have to choose between security fixes, and a working Jenkins.\n+For these reasons, the following changes should not be merged during the week before LTS releases (weeks 3, 7, 11, 15, etc. on the page linked above):\n+\n+* Changes that could be considered risky (relatively high risk of introducing regressions), as they could make users of Jenkins weekly releases choose between getting security fixes, and having a functioning Jenkins\n+* Very large changes (in terms of lines changed), because the Jenkins security team needs to prepare security fixes for the weekly release line in a very short period of time.\n+\n+If the change is ready but it is not a good time, consider labeling the pull request with the `on-hold` label.\n+If a merge is needed, please consult with the Jenkins Security officer\n+\n+==== Step 3: Marking for merge\n+\n+Once the checklist is passed, a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n \n * `ready-for-merge` label is set\n * An explicit comment is added to the pull request so that other repository watchers are notified.\n   Example: _Thanks to all contributors! We consider this change as ready to be merged towards the next weekly release. It may be merged after 24hours if there is no negative feedback_\n \n-**Step 3: Merge!**\n+==== Step 4: Merge!\n+\n A Core Maintainer merges the change after allowing sufficient time for comment (if needed).\n After that the change will be landed in the next weekly release.\n LTS Backporting, if needed, will be handled separately by the release team.\n \n+Keep in mind that we set ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8dd8e247d947f8b5546ffe2135533899e5900f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzMjkwNg==", "bodyText": "I was about linking the LTS section below, will fix", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r405432906", "createdAt": "2020-04-08T10:48:08Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -161,18 +163,33 @@ Code reviews do NOT pursue the following goals:\n   or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n * It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n \n-**Step 2: Marking for merge**. Once the checklist is passed,\n-a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+==== Step 2: Is it a good time to merge?\n+\n+link:[https://jenkins.io/security/](Jenkins security updates) are coordinated with the LTS calendar, and if the weekly introduces regressions, users of that line may have to choose between security fixes, and a working Jenkins.\n+For these reasons, the following changes should not be merged during the week before LTS releases (weeks 3, 7, 11, 15, etc. on the page linked above):\n+\n+* Changes that could be considered risky (relatively high risk of introducing regressions), as they could make users of Jenkins weekly releases choose between getting security fixes, and having a functioning Jenkins\n+* Very large changes (in terms of lines changed), because the Jenkins security team needs to prepare security fixes for the weekly release line in a very short period of time.\n+\n+If the change is ready but it is not a good time, consider labeling the pull request with the `on-hold` label.\n+If a merge is needed, please consult with the Jenkins Security officer\n+\n+==== Step 3: Marking for merge\n+\n+Once the checklist is passed, a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n \n * `ready-for-merge` label is set\n * An explicit comment is added to the pull request so that other repository watchers are notified.\n   Example: _Thanks to all contributors! We consider this change as ready to be merged towards the next weekly release. It may be merged after 24hours if there is no negative feedback_\n \n-**Step 3: Merge!**\n+==== Step 4: Merge!\n+\n A Core Maintainer merges the change after allowing sufficient time for comment (if needed).\n After that the change will be landed in the next weekly release.\n LTS Backporting, if needed, will be handled separately by the release team.\n \n+Keep in mind that we set ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MDcyNQ=="}, "originalCommit": {"oid": "9a8dd8e247d947f8b5546ffe2135533899e5900f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjA2ODY4OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo0MjowMFrOF-T1uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDo0OToyNVrOGCptJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MTA4Mw==", "bodyText": "Ambiguous or wrong: These PRs go directly into LTS, they are the backports.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r400881083", "createdAt": "2020-03-31T12:42:00Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -190,10 +207,18 @@ LTS Backporting, if needed, will be handled separately by the release team.\n \n Right now we do not have a strict policy about it.\n \n+== LTS Process\n+\n+Jenkins also offers the link:https://jenkins.io/download/lts/[LTS Release Line].\n+It is maintained by the Jenkins Release Team which coordinates link:https://jenkins.io/download/lts/#backporting-process[backporting] and release candidate testing.\n+It mostly happens through the developer mailing list and through backporting pull requests labeled with link:https://github.com/jenkinsci/jenkins/labels/into-lts[into-lts].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8dd8e247d947f8b5546ffe2135533899e5900f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzMzYzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It mostly happens through the developer mailing list and through backporting pull requests labeled with link:https://github.com/jenkinsci/jenkins/labels/into-lts[into-lts].\n          \n          \n            \n            It mostly happens through the developer mailing list. Backports are submitted as pull requests labeled with link:https://github.com/jenkinsci/jenkins/labels/into-lts[into-lts].", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r405433639", "createdAt": "2020-04-08T10:49:25Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -190,10 +207,18 @@ LTS Backporting, if needed, will be handled separately by the release team.\n \n Right now we do not have a strict policy about it.\n \n+== LTS Process\n+\n+Jenkins also offers the link:https://jenkins.io/download/lts/[LTS Release Line].\n+It is maintained by the Jenkins Release Team which coordinates link:https://jenkins.io/download/lts/#backporting-process[backporting] and release candidate testing.\n+It mostly happens through the developer mailing list and through backporting pull requests labeled with link:https://github.com/jenkinsci/jenkins/labels/into-lts[into-lts].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MTA4Mw=="}, "originalCommit": {"oid": "9a8dd8e247d947f8b5546ffe2135533899e5900f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjA3MzY0OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo0MzoyMFrOF-T4tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo0MzoyMFrOF-T4tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MTg0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            link:[https://jenkins.io/security/](Jenkins security updates) are coordinated with the LTS calendar, and if the weekly introduces regressions, users of that line may have to choose between security fixes, and a working Jenkins.\n          \n          \n            \n            link:[https://jenkins.io/security/](Jenkins security updates) are coordinated with the LTS calendar, and if the weekly release on the weekend before an LTS release introduces regressions, users of the weekly line may have to choose between security fixes, and a working Jenkins.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r400881846", "createdAt": "2020-03-31T12:43:20Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -161,18 +163,33 @@ Code reviews do NOT pursue the following goals:\n   or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n * It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n \n-**Step 2: Marking for merge**. Once the checklist is passed,\n-a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+==== Step 2: Is it a good time to merge?\n+\n+link:[https://jenkins.io/security/](Jenkins security updates) are coordinated with the LTS calendar, and if the weekly introduces regressions, users of that line may have to choose between security fixes, and a working Jenkins.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8dd8e247d947f8b5546ffe2135533899e5900f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjA3ODg0OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo0NDoyOFrOF-T7pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTo1OToyNFrOGCr5Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MjU5OA==", "bodyText": "No such thing?", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r400882598", "createdAt": "2020-03-31T12:44:28Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -161,18 +163,33 @@ Code reviews do NOT pursue the following goals:\n   or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n * It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n \n-**Step 2: Marking for merge**. Once the checklist is passed,\n-a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+==== Step 2: Is it a good time to merge?\n+\n+link:[https://jenkins.io/security/](Jenkins security updates) are coordinated with the LTS calendar, and if the weekly introduces regressions, users of that line may have to choose between security fixes, and a working Jenkins.\n+For these reasons, the following changes should not be merged during the week before LTS releases (weeks 3, 7, 11, 15, etc. on the page linked above):\n+\n+* Changes that could be considered risky (relatively high risk of introducing regressions), as they could make users of Jenkins weekly releases choose between getting security fixes, and having a functioning Jenkins\n+* Very large changes (in terms of lines changed), because the Jenkins security team needs to prepare security fixes for the weekly release line in a very short period of time.\n+\n+If the change is ready but it is not a good time, consider labeling the pull request with the `on-hold` label.\n+If a merge is needed, please consult with the Jenkins Security officer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8dd8e247d947f8b5546ffe2135533899e5900f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzMjQ4NQ==", "bodyText": "Hm? Do you suggest removing it?", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r405432485", "createdAt": "2020-04-08T10:47:22Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -161,18 +163,33 @@ Code reviews do NOT pursue the following goals:\n   or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n * It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n \n-**Step 2: Marking for merge**. Once the checklist is passed,\n-a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+==== Step 2: Is it a good time to merge?\n+\n+link:[https://jenkins.io/security/](Jenkins security updates) are coordinated with the LTS calendar, and if the weekly introduces regressions, users of that line may have to choose between security fixes, and a working Jenkins.\n+For these reasons, the following changes should not be merged during the week before LTS releases (weeks 3, 7, 11, 15, etc. on the page linked above):\n+\n+* Changes that could be considered risky (relatively high risk of introducing regressions), as they could make users of Jenkins weekly releases choose between getting security fixes, and having a functioning Jenkins\n+* Very large changes (in terms of lines changed), because the Jenkins security team needs to prepare security fixes for the weekly release line in a very short period of time.\n+\n+If the change is ready but it is not a good time, consider labeling the pull request with the `on-hold` label.\n+If a merge is needed, please consult with the Jenkins Security officer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MjU5OA=="}, "originalCommit": {"oid": "9a8dd8e247d947f8b5546ffe2135533899e5900f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ2NDgxNQ==", "bodyText": "I'm questioning the premise of \"a merge is needed\".\nShould have submitted your PR earlier if you need something very large to go into a specific weekly release.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r405464815", "createdAt": "2020-04-08T11:50:57Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -161,18 +163,33 @@ Code reviews do NOT pursue the following goals:\n   or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n * It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n \n-**Step 2: Marking for merge**. Once the checklist is passed,\n-a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+==== Step 2: Is it a good time to merge?\n+\n+link:[https://jenkins.io/security/](Jenkins security updates) are coordinated with the LTS calendar, and if the weekly introduces regressions, users of that line may have to choose between security fixes, and a working Jenkins.\n+For these reasons, the following changes should not be merged during the week before LTS releases (weeks 3, 7, 11, 15, etc. on the page linked above):\n+\n+* Changes that could be considered risky (relatively high risk of introducing regressions), as they could make users of Jenkins weekly releases choose between getting security fixes, and having a functioning Jenkins\n+* Very large changes (in terms of lines changed), because the Jenkins security team needs to prepare security fixes for the weekly release line in a very short period of time.\n+\n+If the change is ready but it is not a good time, consider labeling the pull request with the `on-hold` label.\n+If a merge is needed, please consult with the Jenkins Security officer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MjU5OA=="}, "originalCommit": {"oid": "9a8dd8e247d947f8b5546ffe2135533899e5900f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ2OTQ3OQ==", "bodyText": "I will just remove it for now. There are always ways to escalate of merge is needed", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r405469479", "createdAt": "2020-04-08T11:59:24Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -161,18 +163,33 @@ Code reviews do NOT pursue the following goals:\n   or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n * It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n \n-**Step 2: Marking for merge**. Once the checklist is passed,\n-a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+==== Step 2: Is it a good time to merge?\n+\n+link:[https://jenkins.io/security/](Jenkins security updates) are coordinated with the LTS calendar, and if the weekly introduces regressions, users of that line may have to choose between security fixes, and a working Jenkins.\n+For these reasons, the following changes should not be merged during the week before LTS releases (weeks 3, 7, 11, 15, etc. on the page linked above):\n+\n+* Changes that could be considered risky (relatively high risk of introducing regressions), as they could make users of Jenkins weekly releases choose between getting security fixes, and having a functioning Jenkins\n+* Very large changes (in terms of lines changed), because the Jenkins security team needs to prepare security fixes for the weekly release line in a very short period of time.\n+\n+If the change is ready but it is not a good time, consider labeling the pull request with the `on-hold` label.\n+If a merge is needed, please consult with the Jenkins Security officer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MjU5OA=="}, "originalCommit": {"oid": "9a8dd8e247d947f8b5546ffe2135533899e5900f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjA3OTU1OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo0NDo0MFrOF-T8FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo0NDo0MFrOF-T8FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MjcwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the change is ready but it is not a good time, consider labeling the pull request with the `on-hold` label.\n          \n          \n            \n            If the change is ready but it is not a good time, consider labeling the pull request with the `on-hold` label.\n          \n          \n            \n            Make sure to add a comment explaining why it was put on hold.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r400882709", "createdAt": "2020-03-31T12:44:40Z", "author": {"login": "daniel-beck"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -161,18 +163,33 @@ Code reviews do NOT pursue the following goals:\n   or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n * It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n \n-**Step 2: Marking for merge**. Once the checklist is passed,\n-a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+==== Step 2: Is it a good time to merge?\n+\n+link:[https://jenkins.io/security/](Jenkins security updates) are coordinated with the LTS calendar, and if the weekly introduces regressions, users of that line may have to choose between security fixes, and a working Jenkins.\n+For these reasons, the following changes should not be merged during the week before LTS releases (weeks 3, 7, 11, 15, etc. on the page linked above):\n+\n+* Changes that could be considered risky (relatively high risk of introducing regressions), as they could make users of Jenkins weekly releases choose between getting security fixes, and having a functioning Jenkins\n+* Very large changes (in terms of lines changed), because the Jenkins security team needs to prepare security fixes for the weekly release line in a very short period of time.\n+\n+If the change is ready but it is not a good time, consider labeling the pull request with the `on-hold` label.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8dd8e247d947f8b5546ffe2135533899e5900f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjE5MzcwOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzoxMToyOFrOF-VCTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzoxMToyOFrOF-VCTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkwMDY4NQ==", "bodyText": "Minor phrasing suuggestion\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n          \n          \n            \n            there is no way to confirm external usages in 3rd-party proprietary plugins which are also a part of the ecosystem.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r400900685", "createdAt": "2020-03-31T13:11:28Z", "author": {"login": "MarkEWaite"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,230 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so.\n+Anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization[Triage permissions] so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:https://jenkins.io/download/lts/[Stable release line].\n+Team members get `Write` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* **Contributors**. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is _feasible_ and that it fits the Jenkins ecosystem\n+* Verify _compatibility_ of the suggested changes\n+* Ensure that the pull request matches the _code quality_ practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a _consensus_ among reviewers about all items above.\n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we have some tools (like https://github.com/jenkins-infra/usage-in-plugins[usage-in-plugins]) for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52608e763a81eae8408f0c4f46897ab2389cbe02"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjIyNjIxOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzoxODozNVrOF-VWQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzoxODozNVrOF-VWQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkwNTc5Mg==", "bodyText": "Minor phrasing suggestion\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Make contributors to fix unrelated issues\n          \n          \n            \n            * Make contributors fix issues that are not related to the primary topic of the pull request", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r400905792", "createdAt": "2020-03-31T13:18:35Z", "author": {"login": "MarkEWaite"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,230 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so.\n+Anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization[Triage permissions] so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:https://jenkins.io/download/lts/[Stable release line].\n+Team members get `Write` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* **Contributors**. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is _feasible_ and that it fits the Jenkins ecosystem\n+* Verify _compatibility_ of the suggested changes\n+* Ensure that the pull request matches the _code quality_ practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a _consensus_ among reviewers about all items above.\n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we have some tools (like https://github.com/jenkins-infra/usage-in-plugins[usage-in-plugins]) for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+The code doesn't have to be perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+**Consensus**.\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels for contributors to discuss their contribution.\n+\n+* A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is the default way to go\n+* If no consensus can be reached on the mailing list,\n+  voting at the link:https://jenkins.io/project/governance-meeting/[Jenkins Governance Meeting] can be used to get a final decision.\n+\n+=== Code review non-goals\n+\n+Code reviews do NOT pursue the following goals:\n+\n+* Accepting/merging any pull request. \n+  Not everything is going to be merged, and reviewers are expected to focus on the Jenkins ecosystem integrity first.\n+  We guide contributors and help them to get their changes integrated, but it needs cooperation on both sides.\n+  It is **fine** to close invalid and inactive pull requests if there is no activity by a submitter or other contributors.\n+* Enforcing a particular coding style.\n+  Jenkins core has a complex codebase created by many contributors, and different files have different designs.\n+  Our main goal is to firstly have the code readable by other contributors.\n+* Make contributors to fix unrelated issues", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52608e763a81eae8408f0c4f46897ab2389cbe02"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjI1MDI4OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzoyMzo1M1rOF-VlaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzoyMzo1M1rOF-VlaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkwOTY3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If a merge is needed, please consult with the Jenkins Security officer\n          \n          \n            \n            If a merge is needed, please consult with the Jenkins Security officer.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r400909672", "createdAt": "2020-03-31T13:23:53Z", "author": {"login": "MarkEWaite"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,230 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so.\n+Anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization[Triage permissions] so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:https://jenkins.io/download/lts/[Stable release line].\n+Team members get `Write` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* **Contributors**. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is _feasible_ and that it fits the Jenkins ecosystem\n+* Verify _compatibility_ of the suggested changes\n+* Ensure that the pull request matches the _code quality_ practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a _consensus_ among reviewers about all items above.\n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we have some tools (like https://github.com/jenkins-infra/usage-in-plugins[usage-in-plugins]) for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+The code doesn't have to be perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+**Consensus**.\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels for contributors to discuss their contribution.\n+\n+* A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is the default way to go\n+* If no consensus can be reached on the mailing list,\n+  voting at the link:https://jenkins.io/project/governance-meeting/[Jenkins Governance Meeting] can be used to get a final decision.\n+\n+=== Code review non-goals\n+\n+Code reviews do NOT pursue the following goals:\n+\n+* Accepting/merging any pull request. \n+  Not everything is going to be merged, and reviewers are expected to focus on the Jenkins ecosystem integrity first.\n+  We guide contributors and help them to get their changes integrated, but it needs cooperation on both sides.\n+  It is **fine** to close invalid and inactive pull requests if there is no activity by a submitter or other contributors.\n+* Enforcing a particular coding style.\n+  Jenkins core has a complex codebase created by many contributors, and different files have different designs.\n+  Our main goal is to firstly have the code readable by other contributors.\n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, add the `squash-merge-me` label\n+** We want to keep pull requests focused when possible (one feature / fix per pull request),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+==== Step 1: Maintainer checklist\n+\n+Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant with requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change (often indicated by line comments attached to an approving PR review, or by using the term \"nit\", from \"nit-picking\")\n+* Changelog entries in the PR title and/or _Proposed changelog entries_ are correct and reflect the current, final state of the PR\n+* Proper changelog labels are set so that the changelog can be generated automatically.\n+ List of labels we use for changelog generation is available link:https://github.com/jenkinsci/.github/blob/master/.github/release-drafter.yml[here].\n+* If the change needs administrators to be aware of it when upgrading, the `upgrade-guide-needed` label is present\n+  and there is a `Proposed upgrade guidelines` section in the PR title\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example]).\n+  This is usually the case when a data migration occurs, a feature has been removed, a significant behavior change is introduced (including when there is a way to opt out),\n+  or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+==== Step 2: Is it a good time to merge?\n+\n+link:[https://jenkins.io/security/](Jenkins security updates) are coordinated with the LTS calendar, and if the weekly introduces regressions, users of that line may have to choose between security fixes, and a working Jenkins.\n+The Jenkins security team will usually send a \"pre-announcement\" to link:https://groups.google.com/forum/#!forum/jenkinsci-advisories[the advisories list] on Wednesday or Thursday the week before release, but that's not always doable.\n+For these reasons, the following changes should not be merged during the week before LTS releases (weeks 3, 7, 11, 15, etc. on the page linked above):\n+\n+* Changes that could be considered risky (relatively high risk of introducing regressions), as they could make users of Jenkins weekly releases choose between getting security fixes, and having a functioning Jenkins\n+* Very large changes (in terms of lines changed), because the Jenkins security team needs to prepare security fixes for the weekly release line in a very short period of time.\n+\n+If the change is ready but it is not a good time, consider labeling the pull request with the `on-hold` label.\n+If a merge is needed, please consult with the Jenkins Security officer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52608e763a81eae8408f0c4f46897ab2389cbe02"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjI1Nzk3OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzoyNTozM1rOF-VqUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzoyNTozM1rOF-VqUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkxMDkyOQ==", "bodyText": "Either an incomplete sentence or the start of the next section heading Exceptions.  Assumed an incomplete sentence.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Keep in mind that we set", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r400910929", "createdAt": "2020-03-31T13:25:33Z", "author": {"login": "MarkEWaite"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,230 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so.\n+Anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization[Triage permissions] so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:https://jenkins.io/download/lts/[Stable release line].\n+Team members get `Write` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* **Contributors**. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is _feasible_ and that it fits the Jenkins ecosystem\n+* Verify _compatibility_ of the suggested changes\n+* Ensure that the pull request matches the _code quality_ practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a _consensus_ among reviewers about all items above.\n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we have some tools (like https://github.com/jenkins-infra/usage-in-plugins[usage-in-plugins]) for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+The code doesn't have to be perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+**Consensus**.\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels for contributors to discuss their contribution.\n+\n+* A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is the default way to go\n+* If no consensus can be reached on the mailing list,\n+  voting at the link:https://jenkins.io/project/governance-meeting/[Jenkins Governance Meeting] can be used to get a final decision.\n+\n+=== Code review non-goals\n+\n+Code reviews do NOT pursue the following goals:\n+\n+* Accepting/merging any pull request. \n+  Not everything is going to be merged, and reviewers are expected to focus on the Jenkins ecosystem integrity first.\n+  We guide contributors and help them to get their changes integrated, but it needs cooperation on both sides.\n+  It is **fine** to close invalid and inactive pull requests if there is no activity by a submitter or other contributors.\n+* Enforcing a particular coding style.\n+  Jenkins core has a complex codebase created by many contributors, and different files have different designs.\n+  Our main goal is to firstly have the code readable by other contributors.\n+* Make contributors to fix unrelated issues\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, add the `squash-merge-me` label\n+** We want to keep pull requests focused when possible (one feature / fix per pull request),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+==== Step 1: Maintainer checklist\n+\n+Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant with requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change (often indicated by line comments attached to an approving PR review, or by using the term \"nit\", from \"nit-picking\")\n+* Changelog entries in the PR title and/or _Proposed changelog entries_ are correct and reflect the current, final state of the PR\n+* Proper changelog labels are set so that the changelog can be generated automatically.\n+ List of labels we use for changelog generation is available link:https://github.com/jenkinsci/.github/blob/master/.github/release-drafter.yml[here].\n+* If the change needs administrators to be aware of it when upgrading, the `upgrade-guide-needed` label is present\n+  and there is a `Proposed upgrade guidelines` section in the PR title\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example]).\n+  This is usually the case when a data migration occurs, a feature has been removed, a significant behavior change is introduced (including when there is a way to opt out),\n+  or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n+* It would make sense to backport the change to LTS, a Jira issue should exist and be labeled as `lts-candidate`\n+\n+==== Step 2: Is it a good time to merge?\n+\n+link:[https://jenkins.io/security/](Jenkins security updates) are coordinated with the LTS calendar, and if the weekly introduces regressions, users of that line may have to choose between security fixes, and a working Jenkins.\n+The Jenkins security team will usually send a \"pre-announcement\" to link:https://groups.google.com/forum/#!forum/jenkinsci-advisories[the advisories list] on Wednesday or Thursday the week before release, but that's not always doable.\n+For these reasons, the following changes should not be merged during the week before LTS releases (weeks 3, 7, 11, 15, etc. on the page linked above):\n+\n+* Changes that could be considered risky (relatively high risk of introducing regressions), as they could make users of Jenkins weekly releases choose between getting security fixes, and having a functioning Jenkins\n+* Very large changes (in terms of lines changed), because the Jenkins security team needs to prepare security fixes for the weekly release line in a very short period of time.\n+\n+If the change is ready but it is not a good time, consider labeling the pull request with the `on-hold` label.\n+If a merge is needed, please consult with the Jenkins Security officer\n+\n+==== Step 3: Marking for merge\n+\n+Once the checklist is passed, a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: _Thanks to all contributors! We consider this change as ready to be merged towards the next weekly release. It may be merged after 24hours if there is no negative feedback_\n+\n+==== Step 4: Merge!\n+\n+A Core Maintainer merges the change after allowing sufficient time for comment (if needed).\n+After that the change will be landed in the next weekly release.\n+LTS Backporting, if needed, will be handled separately by the release team.\n+\n+Keep in mind that we set ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52608e763a81eae8408f0c4f46897ab2389cbe02"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjA4Mjg2OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTozNjowNFrOGCrInw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTozNjowNFrOGCrInw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzA1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               If you feel this is important, add the `squash-merge-me` label\n          \n          \n            \n               If you feel this is important, add the [squash-merge-me](https://github.com/jenkinsci/jenkins/pulls?q=is%3Aopen+is%3Apr+label%3Asquash-merge-me) label", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r405457055", "createdAt": "2020-04-08T11:36:04Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,231 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+They can also review and triage incoming issues in Jenkins Jira.\n+There is no special preconditions to do so.\n+Anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization[Triage permissions] so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:https://jenkins.io/download/lts/[Stable release line].\n+Team members get `Write` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* **Contributors**. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Code review goals\n+\n+There are the following code review goals:\n+\n+* Ensure that the pull request is _feasible_ and that it fits the Jenkins ecosystem\n+* Verify _compatibility_ of the suggested changes\n+* Ensure that the pull request matches the _code quality_ practices: test automation, Javadoc for newly introduced APIs, etc.\n+* Ensure that the pull request contains appropriate changelogs and, if needed, upgrade guidelines.\n+* Ensure there is a _consensus_ among reviewers about all items above.\n+\n+**Feasibility**.\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+**Compatibility**.\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we have some tools (like https://github.com/jenkins-infra/usage-in-plugins[usage-in-plugins]) for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which is also a part of the ecosystem.\n+\n+**Code quality**.\n+The code doesn't have to be perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+**Consensus**.\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels for contributors to discuss their contribution.\n+\n+* A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is the default way to go\n+* If no consensus can be reached on the mailing list,\n+  voting at the link:https://jenkins.io/project/governance-meeting/[Jenkins Governance Meeting] can be used to get a final decision.\n+\n+=== Code review non-goals\n+\n+Code reviews do NOT pursue the following goals:\n+\n+* Accepting/merging any pull request. \n+  Not everything is going to be merged, and reviewers are expected to focus on the Jenkins ecosystem integrity first.\n+  We guide contributors and help them to get their changes integrated, but it needs cooperation on both sides.\n+  It is **fine** to close invalid and inactive pull requests if there is no activity by a submitter or other contributors.\n+* Enforcing a particular coding style.\n+  Jenkins core has a complex codebase created by many contributors, and different files have different designs.\n+  Our main goal is to firstly have the code readable by other contributors.\n+* Make contributors fix issues that are not related to the primary topic of the pull request\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Breakdown the commit history or squashing PRs\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, add the `squash-merge-me` label", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5791030e55f128c2d87a9908f18455bd095201c8"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzczMTQ0OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwODoxNToyN1rOGD0SXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwODoxNToyN1rOGD0SXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY1NTU4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Not all changes are discussed before they submitted as pull requests.\n          \n          \n            \n            Not all changes are discussed before they are submitted as pull requests.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r406655582", "createdAt": "2020-04-10T08:15:27Z", "author": {"login": "MarkEWaite"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,272 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+There is no special preconditions to do so.\n+Anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization[Triage permissions] so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:https://jenkins.io/download/lts/[Stable release line].\n+Team members get `Write` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* **Contributors**. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Review goals\n+\n+Pull requests review in Jenkins is not just about reviewing code and accepting them if the code is OK.\n+Core maintainers are expected to ensure feasibility and compatibility of changes,\n+to maintain good quality of the codebase and documentation,\n+and to ensure there is a consensus between contributors.\n+\n+==== Verifying Feasibility\n+\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+==== Ensuring Compatibility\n+\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we have some tools (like https://github.com/jenkins-infra/usage-in-plugins[usage-in-plugins]) for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which are also a part of the ecosystem.\n+\n+==== Maintaining Code quality\n+\n+The code doesn't have to be perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+==== Code style\n+\n+We're aware that there are existing inconsistencies in the code,\n+and we do not enforce a single code style across the codebase at the moment.\n+\n+* New code should follow the (majority) style guide.\n+  In Jenkins core we use the link:https://www.oracle.com/technetwork/java/codeconvtoc-136057.html[these Code Conventions for the Java TM Programming Language] as a default code style\n+* Updates to existing code should only fix formatting on the lines affected anyway to keep the diff minimal.\n+  It helps reviewers focus their attention on the specifics of the change and reduces the risk of a change from one pull request creating a conflict in another pull request.\n+\n+==== Maintaining documentation\n+\n+* Jenkins documentation is hosted on https://jenkins.io/doc/.\n+  When a new user-facing change is added, we should encourage contributors to update documentation in downstream pull requests.\n+* Same applies to Jenkins changelogs (link:https://jenkins.io/changelog[weekly], link:https://jenkins.io/changelog-stable/[stable]) and link:https://jenkins.io/doc/upgrade-guide/[upgrade guidelines]:\n+  We have a semi-automated process which is based on pull request summaries and labels.\n+  Core maintainers are expected to validate the entries as a part of the pull request review/merge process.\n+  See the checklist below in the _Merge process_ section.\n+\n+==== Building consensus\n+\n+Not all changes are discussed before they submitted as pull requests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8134b1f77e456b6880d6949096b00fd4b1299bf2"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzc0MzQ0OnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwODoyMToxMlrOGD0ZjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwODoyMToxMlrOGD0ZjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY1NzQyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * We squash commits during when core maintainers decide to do so (`squash-merge-me` label), usually when the conditions above are not met.\n          \n          \n            \n            * We squash commits when core maintainers decide to do so (`squash-merge-me` label), usually when the conditions above are not met.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r406657420", "createdAt": "2020-04-10T08:21:12Z", "author": {"login": "MarkEWaite"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,272 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+There is no special preconditions to do so.\n+Anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization[Triage permissions] so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:https://jenkins.io/download/lts/[Stable release line].\n+Team members get `Write` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* **Contributors**. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Review goals\n+\n+Pull requests review in Jenkins is not just about reviewing code and accepting them if the code is OK.\n+Core maintainers are expected to ensure feasibility and compatibility of changes,\n+to maintain good quality of the codebase and documentation,\n+and to ensure there is a consensus between contributors.\n+\n+==== Verifying Feasibility\n+\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+==== Ensuring Compatibility\n+\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we have some tools (like https://github.com/jenkins-infra/usage-in-plugins[usage-in-plugins]) for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which are also a part of the ecosystem.\n+\n+==== Maintaining Code quality\n+\n+The code doesn't have to be perfect, but we want to ensure that all new code matches basic quality standards:\n+test coverage for newly added functionality and fixes,\n+documentation for newly introduced APIs,\n+the submitted code is readable and matches the code style in the surrounding codebase,\n+etc.\n+\n+==== Code style\n+\n+We're aware that there are existing inconsistencies in the code,\n+and we do not enforce a single code style across the codebase at the moment.\n+\n+* New code should follow the (majority) style guide.\n+  In Jenkins core we use the link:https://www.oracle.com/technetwork/java/codeconvtoc-136057.html[these Code Conventions for the Java TM Programming Language] as a default code style\n+* Updates to existing code should only fix formatting on the lines affected anyway to keep the diff minimal.\n+  It helps reviewers focus their attention on the specifics of the change and reduces the risk of a change from one pull request creating a conflict in another pull request.\n+\n+==== Maintaining documentation\n+\n+* Jenkins documentation is hosted on https://jenkins.io/doc/.\n+  When a new user-facing change is added, we should encourage contributors to update documentation in downstream pull requests.\n+* Same applies to Jenkins changelogs (link:https://jenkins.io/changelog[weekly], link:https://jenkins.io/changelog-stable/[stable]) and link:https://jenkins.io/doc/upgrade-guide/[upgrade guidelines]:\n+  We have a semi-automated process which is based on pull request summaries and labels.\n+  Core maintainers are expected to validate the entries as a part of the pull request review/merge process.\n+  See the checklist below in the _Merge process_ section.\n+\n+==== Building consensus\n+\n+Not all changes are discussed before they submitted as pull requests.\n+Developer mailing lists, Jira issues and JEPs are used for discussions,\n+but sometimes the changes go straight to the pull requests.\n+And we are fine with that, especially for small patches.\n+Pull requests often become a venue to discuss feasibility, underlying technical decisions and design.\n+We are fine with that as well.\n+If there is no consensus about the feasibility and implementation,\n+code reviewers are expected to suggest proper channels for contributors to discuss their contribution.\n+\n+* A discussion in the link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List] is the default way to go\n+* If no consensus can be reached on the mailing list,\n+  voting at the link:https://jenkins.io/project/governance-meeting/[Jenkins Governance Meeting] can be used to get a final decision.\n+\n+=== Review non-goals\n+\n+Code reviews do NOT pursue the following goals:\n+\n+* Accepting/merging any pull request. \n+  Not everything is going to be merged, and reviewers are expected to focus on the Jenkins ecosystem integrity first.\n+  We guide contributors and help them to get their changes integrated, but it needs cooperation on both sides.\n+  It is **fine** to close invalid and inactive pull requests if there is no activity by a submitter or other contributors.\n+* Enforcing a particular coding style.\n+  Jenkins core has a complex codebase created by many contributors, and different files have different designs.\n+  Our main goal is to firstly have the code readable by other contributors.\n+* Make contributors fix issues that are not related to the primary topic of the pull request\n+** Create follow-up issues instead, it is fine to reference them in comments so that the contributor might want to pick them up\n+* Make contributors to have atomic commit history or to squash their pull request\n+** Not every contributor is a Git expert, do not request changes in the commit history unless it is necessary\n+** Core maintainers can squash PRs during the merge.\n+   If you feel this is important, add the [squash-merge-me](https://github.com/jenkinsci/jenkins/pulls?q=is%3Aopen+is%3Apr+label%3Asquash-merge-me) label\n+** We want to keep pull requests focused when possible (one feature / fix per pull request),\n+   but we can live without it if there is no need to backport changes to the stable baseline.\n+\n+== Merge process\n+\n+=== Common merge process\n+\n+==== Step 1: Maintainer checklist\n+\n+Merge process can be initiated once a pull request matches the requirements:\n+\n+* Pull request is compliant with requirements to submitters (see the link:/.github/PULL_REQUEST_TEMPLATE.md[pull request template])\n+* There are at least 2 approvals for the pull request and no outstanding requests for change\n+* Conversations in the pull request are over OR it is explicit that a reviewer does not block the change (often indicated by line comments attached to an approving PR review, or by using the term \"nit\", from \"nit-picking\")\n+* Changelog entries in the PR title and/or _Proposed changelog entries_ are correct and reflect the current, final state of the PR\n+* Proper changelog labels are set so that the changelog can be generated automatically.\n+ List of labels we use for changelog generation is available link:https://github.com/jenkinsci/.github/blob/master/.github/release-drafter.yml[here].\n+* If the change needs administrators to be aware of it when upgrading, the `upgrade-guide-needed` label is present\n+  and there is a `Proposed upgrade guidelines` section in the PR title\n+  (link:https://github.com/jenkinsci/jenkins/pull/4387[example]).\n+  This is usually the case when a data migration occurs, a feature has been removed, a significant behavior change is introduced (including when there is a way to opt out),\n+  or in general when we expect at least a large minority of admins to benefit from knowing about the change, e.g. to apply a new option.\n+* If it would make sense to backport the change to LTS, a Jira issue must exist, be a _Bug_ or _Improvement_, and be labeled as `lts-candidate` to be considered (see [query](https://issues.jenkins-ci.org/issues/?filter=12146)).\n+\n+==== Step 2: Is it a good time to merge?\n+\n+link:[https://jenkins.io/security/](Jenkins security updates) are coordinated with the LTS calendar, and if the weekly release on the weekend before an LTS release introduces regressions, users of the weekly line may have to choose between security fixes, and a working Jenkins.\n+The Jenkins security team will usually send a \"pre-announcement\" to link:https://groups.google.com/forum/#!forum/jenkinsci-advisories[the advisories list] on Wednesday or Thursday the week before release, but that's not always doable.\n+For these reasons, the following changes should not be merged during the week before LTS releases (weeks 3, 7, 11, 15, etc. on the page linked above):\n+\n+* Changes that could be considered risky (relatively high risk of introducing regressions), as they could make users of Jenkins weekly releases choose between getting security fixes, and having a functioning Jenkins\n+* Very large changes (in terms of lines changed), because the Jenkins security team needs to prepare security fixes for the weekly release line in a very short period of time.\n+\n+If the change is ready but it is not a good time, consider labeling the pull request with the `on-hold` label.\n+Make sure to add a comment explaining why it was put on hold.\n+\n+==== Step 3: Marking for merge\n+\n+Once the checklist is passed, a Core PR Reviewer or a Maintainer can mark the pull request for merge.\n+\n+* `ready-for-merge` label is set\n+* An explicit comment is added to the pull request so that other repository watchers are notified.\n+  Example: _Thanks to all contributors! We consider this change as ready to be merged towards the next weekly release. It may be merged after 24hours if there is no negative feedback_\n+\n+==== Step 4: Merge!\n+\n+A Core Maintainer merges the change after allowing sufficient time for comment (if needed).\n+After that the change will be landed in the next weekly release.\n+LTS backporting, if needed, will be handled separately by the release team.\n+\n+=== Exceptions\n+\n+* Jenkins Security Team uses a different process for security issue fixes.\n+  They are reviewed and integrated by the Security team in private repositories.\n+  Security hardening and enhancements go through the standard process.\n+* Release Team members are permitted to bypass the review/merge process if and only if a change is needed to unblock the security release.\n+  Common review process is used otherwise.\n+* 24 hours waiting period after adding the `ready-for-merge` label is not required for:\n+//TODO(oleg_nenashev): Define \"trivial\" better to avoid loopholes\n+** changes that do not result in changes to the primary functionality, such as typo fixes in documentation or localization files\n+** changes which do not affect the production code: Jenkinsfile tweaks, tools inside the repo, etc. \n+** broken master build\n+\n+=== Squashing pull requests OR not?\n+\n+Sometimes we have pull requests which include dozens of commits including many non-substantial changes (merge commits, addressing review comments, etc.).\n+We do not require contributors to spend time on cleaning it up, because core maintainers can squash PRs during the merge.\n+Reviewers can add a [squash-merge-me](https://github.com/jenkinsci/jenkins/pulls?q=is%3Aopen+is%3Apr+label%3Asquash-merge-me) label during reviews to highlight that it is needed.\n+\n+At the same time, we do not require any pull request to be merged as a single commit.\n+Multiple commits are useful in many cases.\n+\n+When do we merge pull requests as is?\n+\n+* There is only one commit with a reasonable commit message\n+* There are multiple atomic commits. Each commit has a reasonable message and can be compiled on its own\n+** Example:\n+*** **Commit 1**: `[JENKINS-1234] - Reproduce the issue in tests`\n+*** **Commit 2**: `[JENKINS-1234] - Fix the issue by updating Foo` \n+* There are multiple commit authors who expressed the desire to keep commit history as is.\n+  By default we do not consider multiple authors as a blocker for squash, because GitHub now \n+  link:https://help.github.com/en/github/committing-changes-to-your-project/creating-a-commit-with-multiple-authors[supports co-authors]\n+\n+When do we squash commits?\n+\n+* We squash commits during when core maintainers decide to do so (`squash-merge-me` label), usually when the conditions above are not met.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8134b1f77e456b6880d6949096b00fd4b1299bf2"}, "originalPosition": 246}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjU1ODkzOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDowOToyN1rOGENe4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoyNDoxN1rOGFWx5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2ODM4NA==", "bodyText": "I do not want to rathole on this, but do we consider 3rd-party plugin to be part of the ecosystem? To me, it would make more sense to define the boundaries of the ecosystem (pretty much https://github.com/{jenkinsci,jenkins-infra,stapler}) and that would be the place where it is possible to make certain effort to ensure compatibility, but there is no commitment elsewhere.", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r407068384", "createdAt": "2020-04-11T14:09:27Z", "author": {"login": "olivergondza"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,272 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+There is no special preconditions to do so.\n+Anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization[Triage permissions] so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:https://jenkins.io/download/lts/[Stable release line].\n+Team members get `Write` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* **Contributors**. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Review goals\n+\n+Pull requests review in Jenkins is not just about reviewing code and accepting them if the code is OK.\n+Core maintainers are expected to ensure feasibility and compatibility of changes,\n+to maintain good quality of the codebase and documentation,\n+and to ensure there is a consensus between contributors.\n+\n+==== Verifying Feasibility\n+\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+==== Ensuring Compatibility\n+\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we have some tools (like https://github.com/jenkins-infra/usage-in-plugins[usage-in-plugins]) for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which are also a part of the ecosystem.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8134b1f77e456b6880d6949096b00fd4b1299bf2"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2OTI4NQ==", "bodyText": "I consider 3rd-party plugins as a part of wider Jenkins ecosystem which we would like to respect and minimize breaking changes there. Not just because I work for CloudBees, there we can easily fix breaking changes. But there are thousands of in-house plugins created by Jenkins users. I have written at least one at all my previous companies", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r408269285", "createdAt": "2020-04-14T16:24:17Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,272 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created\n+* Office hours: N/A, to be created\n+\n+=== Roles\n+\n+* Contributor\n+* Core Pull Request Reviewer\n+* Core Maintainer\n+* Release Team Member\n+\n+**Contributors** submit pull requests to the Jenkins core and review changes submitted by others.\n+There is no special preconditions to do so.\n+Anyone is welcome to contribute.\n+\n+**Core Pull Request Reviewers** is the next step for contributors who are interested to review Jenkins pull requests on a regular basis.\n+They get https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization[Triage permissions] so that they can manage pull requests, request reviews and prepare changelog drafts in the pull request description.\n+Their main responsibility is to triage and review the incoming pull requests,\n+and to guide newcomer contributors who are not familiar with the project's processes.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core-pr-reviewers[@jenkinsci/core-pr-reviewers].\n+\n+**Core Maintainers** get `Write` permissions in the repository, and hence they are able to merge pull requests.\n+Their responsibility is to perform pull request reviews on a regular basis and to merge ready pull requests towards the weekly releases (`master` branch).\n+They are also responsible to monitor the weekly release status and to perform triage of critical issues.\n+GitHub team: link:https://github.com/orgs/jenkinsci/teams/core[@jenkinsci/core].\n+\n+**Release Team Members** are responsible for Jenkins weekly and LTS releases.\n+Led by the link:https://jenkins.io/project/team-leads/#release[Jenkins Release Officer], they initiate releases, prepare changelogs and backport changes into the link:https://jenkins.io/download/lts/[Stable release line].\n+Team members get `Write` permissions in the Jenkins core repository, and they also get permissions to trigger release Pipelines.\n+\n+=== Ladder\n+\n+* **Contributors**. Anyone can participate.\n+  There is no precondition except having a GitHub account, just submit pull requests or comment in existing ones!\n+* **Core Pull Request Reviewers** can be nominated by contributors in the link:https://groups.google.com/d/forum/jenkinsci-dev[developer mailing list]. \n+Self-nomination is fine.\n+Decision is made by a consensus in the mailing list or via voting at the link:https://jenkins.io/project/governance-meeting/[governance meeting].\n+* **Core Maintainers** - same process as for Core PR reviewers.\n+  All nominees must also sign an link:https://github.com/jenkinsci/infra-cla/[Individual Contributor License Agreement] before getting the permission in GitHub repositories.\n+* **Release Team Members** are assigned by the Jenkins Release officer\n+\n+== Pull request review process\n+\n+Jenkins core is a mission-critical part of the ecosystem.\n+We need to ensure that submitted pull requests are not only code complete,\n+but also that they do not introduce undesired defects, breaking changes and technical debt.\n+At the same time, we are interested to make the review process as simple as possible for contributors and maintainers.\n+\n+=== Review goals\n+\n+Pull requests review in Jenkins is not just about reviewing code and accepting them if the code is OK.\n+Core maintainers are expected to ensure feasibility and compatibility of changes,\n+to maintain good quality of the codebase and documentation,\n+and to ensure there is a consensus between contributors.\n+\n+==== Verifying Feasibility\n+\n+Reviewers are expected to look at changes critically from a \"product management\" point of view.\n+It's not just about the code, but also whether the change makes sense in a global / holistic way, considering existing popular plugins and the way users experience Jenkins overall.\n+Also, not every change needs to be merged into the core.\n+Many features would be better introduced as plugins which have separate release cycles and allow delivering changes faster.\n+We want to extend the Jenkins core and incorporate widely used functionality and extension points there,\n+but we try to keep the core as minimal as possible in terms of dependencies.\n+\n+==== Ensuring Compatibility\n+\n+The Jenkins project has a long history of backward compatibility.\n+We accept breaking changes when it is needed (security fixes, feature deprecation and removal, etc.),\n+but ultimately the project's goal is retain as much compatibility as possible.\n+It includes both feature compatibility and binary/API compatibility which is important for the plugin ecosystem.\n+Although we have some tools (like https://github.com/jenkins-infra/usage-in-plugins[usage-in-plugins]) for checking API usages across open-source plugins,\n+there is no way to confirm external usages in 3rd-party proprietary plugins which are also a part of the ecosystem.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2ODM4NA=="}, "originalCommit": {"oid": "8134b1f77e456b6880d6949096b00fd4b1299bf2"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzk4MzQzOnYy", "diffSide": "RIGHT", "path": "docs/MAINTAINERS.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDowMTowMFrOGFQF5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDowMTowMFrOGFQF5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1OTcxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Chat: N/A, to be created", "url": "https://github.com/jenkinsci/jenkins/pull/4472#discussion_r408159717", "createdAt": "2020-04-14T14:01:00Z", "author": {"login": "oleg-nenashev"}, "path": "docs/MAINTAINERS.adoc", "diffHunk": "@@ -0,0 +1,272 @@\n+:toc:\n+:toclevels: 3\n+\n+= Documentation for core maintainers\n+\n+toc::[]\n+\n+Jenkins core is a central component of the project which serves millions of users, and it is critical to maintain it in a good shape.\n+We want to ensure quality of the integrated changes and continuity of the project,\n+and hence the Jenkins core pull request review and merge process is more sophisticated than for the majority of plugins.\n+\n+== Scope of the document\n+\n+This document applies to the following components:\n+\n+* Jenkins core\n+* Jenkins modules\n+* Libraries included into the Jenkins core\n+* Core components like Winstone, Executable WAR, etc.\n+\n+Jenkins Remoting library is not in the scope for this document,\n+because it is handled as a sub-project with independent maintainer team.\n+Remoting updates in the core are subject to the process though.\n+\n+== Team\n+\n+=== Communication channels\n+\n+* link:https://groups.google.com/d/forum/jenkinsci-dev[Jenkins Developer Mailing List]\n+* Chat: N/A, to be created", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8134b1f77e456b6880d6949096b00fd4b1299bf2"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 761, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}