{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI5Mjk0Njk1", "number": 4774, "title": "[JENKINS-26097] Adjust label expression auto-completion and validation", "bodyText": "See JENKINS-26097.\nThis moves label expression auto-completion and validation from AbstractProject to LabelExpression.\nAuto-Completion:\n\nAbstractProject.AutoCompleteSeeder was moved to LabelExpression\n\ntest class correspondingly moved to the relevant package\n\n\nadded static LabelExpression.autoComplete() method\n\ndoes what the non-static AbstractProject.doAutoCompleteLabel() used to do; that now calls the new static method\n\n\n\nValidation:\n\nadded LabelExpression.LabelValidator, which is like AbstractProject.LabelValidator except it takes a Job instead of an AbstractProject\n\nAbstractProject.LabelValidator is now deprecated\n\n\nadded static LabelExpression.validate(String, Job) method, which replaces AbstractProject.validateLabelExpression(String, AbstractProject)\n\nthe latter is marked as deprecated and forwards to the former\nany warnings/errors reported by validators are now aggregated (previously only the first one was shown)\n\n\nLabelExpressionTest.formValidation() uses the new static method\nassociated messages were moved from hudson.model.Messages.AbstractProject_xxx() to\nhudson.model.Messages.LabelExpression_xxx()).\n\nProposed changelog entries\n\nJENKINS-26097: hudson.model.AbstractProject.LabelValidator is now deprecated in favour of jenkins.model.labels.LabelValidator\n\nbut the old version also has a new checkItem() method to allow them to apply validation to non-Project items too\n\n\nJENKINS-26097: hudson.model.AbstractProject.DescriptorImpl.validateLabelExpression() is now deprecated in favour of LabelExpression.validate() (which takes any kind of Item object instead of only AbstractProjects)\n\nthis will now aggregate all warnings and errors reported by LabelValidators (old and new)\n\n\nJENKINS-26097: auto-completion for labels is now available via LabelExpression.autoComplete()\n\nProposed upgrade guidelines\nN/A\nSubmitter checklist\n\n (If applicable) Jira issue is well described\n Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). Examples\n\nFill-in the Proposed changelog entries section only if there are breaking changes or other changes which may require extra steps from users during the upgrade\n\n\n Appropriate autotests or explanation to why this change has no tests\n For dependency updates: links to external changelogs and, if possible, full diffs\n\nReference implementations:\n\njenkinsci/matrix-project-plugin#63\njenkinsci/pipeline-model-definition-plugin#394\njenkinsci/workflow-durable-task-step-plugin#136\n\nDesired reviewers\n@jglick\nMaintainer checklist\nBefore the changes are marked as ready-for-merge:\n\n There are at least 2 approvals for the pull request and no outstanding requests for change\n Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n Changelog entries in the PR title and/or Proposed changelog entries are correct\n Proper changelog labels are set so that the changelog can be generated automatically\n If the change needs additional upgrade steps from users, upgrade-guide-needed label is set and there is a Proposed upgrade guidelines section in the PR title. (example)\n If it would make sense to backport the change to LTS, a Jira issue must exist, be a Bug or Improvement, and be labeled as lts-candidate to be considered (see query).", "createdAt": "2020-06-06T16:21:38Z", "url": "https://github.com/jenkinsci/jenkins/pull/4774", "merged": true, "mergeCommit": {"oid": "a49f58057c145d4602d8762a2c5d5967f7a09358"}, "closed": true, "closedAt": "2020-06-29T06:40:52Z", "author": {"login": "Zastai"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcopd_TgH2gAyNDI5Mjk0Njk1OmQ3YTg5YWVkMmVjNjRmMmIzMDY4OGJkYjJjYmRiZjJjM2E4OWIxN2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuqkMugFqTQzNzI4NzczOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d7a89aed2ec64f2b30688bdb2cbdbf2c3a89b17f", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/d7a89aed2ec64f2b30688bdb2cbdbf2c3a89b17f", "committedDate": "2020-06-06T16:01:55Z", "message": "JENKINS-26097: Adjust label expression auto-completion and validation.\n\nThis moves label expression auto-completion and validation from AbstractProject\nto LabelExpression.\n\nAuto-Completion:\n- AbstractProject.AutoCompleteSeerder was moved to LabelExpression\n  - test class correspondingly moved to the relevant package\n- added static LabelExpression.autoComplete() method\n  - does what the non-static AbstractProject.doAutoCompleteLabel() used to do; that now calls the new static method\n\nValidation:\n- added LabelExpression.LabelValidator, which is like AbstractProject.LabelValidator except it takes a Job instead of an AbstractProject\n  - AbstractProject.LabelValidator is now deprecated\n- added static LabelExpression.validate(String, Job) method, which replaces AbstractProject.validateLabelExpression(String, AbstractProject)\n  - the latter is marked as deprecated and forwards to the former\n- LabelExpressionTest.formValidation() uses the new static method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cbd50ae57c1a10d29d4c13e59999c8974f4bf55", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/9cbd50ae57c1a10d29d4c13e59999c8974f4bf55", "committedDate": "2020-06-06T17:11:58Z", "message": "Add auto-completion and validation for the label fields on tool installers."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab7fa7dc32bc4715d566f358b64e668e6dd6d467", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/ab7fa7dc32bc4715d566f358b64e668e6dd6d467", "committedDate": "2020-06-06T19:36:10Z", "message": "Merge branch 'master' into JENKINS-26097"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14d1efb4a42cf086a269f6010f46ed54876d9589", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/14d1efb4a42cf086a269f6010f46ed54876d9589", "committedDate": "2020-06-06T20:39:50Z", "message": "Use TODO, not FIXME for @since."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDcwNDcx", "url": "https://github.com/jenkinsci/jenkins/pull/4774#pullrequestreview-427470471", "createdAt": "2020-06-09T19:22:19Z", "commit": {"oid": "14d1efb4a42cf086a269f6010f46ed54876d9589"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOToyMjoxOVrOGhY36A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOToyNDozMlrOGhY8lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2MzcyMA==", "bodyText": "Could be an interface I suppose.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r437663720", "createdAt": "2020-06-09T19:22:19Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,158 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific jobs.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public static abstract class LabelValidator implements ExtensionPoint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14d1efb4a42cf086a269f6010f46ed54876d9589"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NDEzMw==", "bodyText": "or can use ExtensionList.lookup", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r437664133", "createdAt": "2020-06-09T19:23:04Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,158 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific jobs.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public static abstract class LabelValidator implements ExtensionPoint {\n+\n+        /**\n+         * Validates the use of a label within a job context.\n+         *\n+         * @param job   The job that wants to restrict itself to the specified label.\n+         * @param label The label that the job wants to restrict itself to.\n+         * @return The validation result.\n+         */\n+        @NonNull\n+        public abstract FormValidation check(@NonNull Job<?, ?> job, @NonNull Label label);\n+\n+    }\n+\n+    /**\n+     * Generates auto-completion candidates for a (partial) label.\n+     *\n+     * @param label The (partial) label for which auto-completion is being requested.\n+     * @return A set of auto-completion candidates.\n+     * @since TODO\n+     */\n+    public static AutoCompletionCandidates autoComplete(@Nullable String label) {\n+        AutoCompletionCandidates c = new AutoCompletionCandidates();\n+        Set<Label> labels = Jenkins.get().getLabels();\n+        List<String> queries = new AutoCompleteSeeder(label).getSeeds();\n+\n+        for (String term : queries) {\n+            for (Label l : labels) {\n+                if (l.getName().startsWith(term)) {\n+                    c.add(l.getName());\n+                }\n+            }\n+        }\n+        return c;\n+    }\n+\n+    /**\n+     * Validates a label expression.\n+     *\n+     * @param expression The expression to validate.\n+     * @return The validation result.\n+     * @since TODO\n+     */\n+    @NonNull\n+    public static FormValidation validate(@Nullable String expression) {\n+        return LabelExpression.validate(expression, null);\n+    }\n+\n+    /**\n+     * Validates a label expression.\n+     *\n+     * @param expression The label expression to validate.\n+     * @param job        The job context, if applicable; used for potential additional restrictions.\n+     * @return The validation result.\n+     * @since TODO\n+     */\n+    // FIXME: Should the messages be moved, or kept where they are for backward compatibility?\n+    @NonNull\n+    public static FormValidation validate(@Nullable String expression, @CheckForNull Job<?, ?> job) {\n+        if (Util.fixEmpty(expression) == null)\n+            return FormValidation.ok(); // nothing typed yet\n+        try {\n+            Label.parseExpression(expression);\n+        } catch (ANTLRException e) {\n+            return FormValidation.error(e,\n+                    Messages.AbstractProject_AssignedLabelString_InvalidBooleanExpression(e.getMessage()));\n+        }\n+        Jenkins j = Jenkins.get();\n+        Label l = j.getLabel(expression);\n+        if (l.isEmpty()) {\n+            for (LabelAtom a : l.listAtoms()) {\n+                if (a.isEmpty()) {\n+                    LabelAtom nearest = LabelAtom.findNearest(a.getName());\n+                    return FormValidation.warning(Messages.AbstractProject_AssignedLabelString_NoMatch_DidYouMean(a.getName(),nearest.getDisplayName()));\n+                }\n+            }\n+            return FormValidation.warning(Messages.AbstractProject_AssignedLabelString_NoMatch());\n+        }\n+        if (job != null) {\n+            if (job instanceof AbstractProject) { // Use any project-oriented label validators\n+                final AbstractProject<?, ?> project = (AbstractProject<?,?>) job;\n+                for (AbstractProject.LabelValidator v : j.getExtensionList(AbstractProject.LabelValidator.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14d1efb4a42cf086a269f6010f46ed54876d9589"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NDkxOA==", "bodyText": "Why not make job be @CheckForNull in case a validator can work without a job context?\nOr relax the context type to Item?", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r437664918", "createdAt": "2020-06-09T19:24:32Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,158 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific jobs.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public static abstract class LabelValidator implements ExtensionPoint {\n+\n+        /**\n+         * Validates the use of a label within a job context.\n+         *\n+         * @param job   The job that wants to restrict itself to the specified label.\n+         * @param label The label that the job wants to restrict itself to.\n+         * @return The validation result.\n+         */\n+        @NonNull\n+        public abstract FormValidation check(@NonNull Job<?, ?> job, @NonNull Label label);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14d1efb4a42cf086a269f6010f46ed54876d9589"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb89a72e3037189b509e307718d8cbfbf189eee4", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/bb89a72e3037189b509e307718d8cbfbf189eee4", "committedDate": "2020-06-09T22:27:14Z", "message": "Use Item as validation context for the new API (instead of Job).\n\nIn addition, the new LabelValidators are now applied to AbstractProjects too."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fb2b663336bf178dc9cac7832639717759aa470", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/3fb2b663336bf178dc9cac7832639717759aa470", "committedDate": "2020-06-09T22:28:56Z", "message": "Make LabelExpression.LabelValidator an interface."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5519088f143934111e70df9e7b260f54cec4741d", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/5519088f143934111e70df9e7b260f54cec4741d", "committedDate": "2020-06-10T08:45:12Z", "message": "Fix a JavaDoc reference."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NDMxOTIy", "url": "https://github.com/jenkinsci/jenkins/pull/4774#pullrequestreview-428431922", "createdAt": "2020-06-10T21:12:32Z", "commit": {"oid": "5519088f143934111e70df9e7b260f54cec4741d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/0428cd8726679d09f5ea0de933a72c0698dd0af7", "committedDate": "2020-06-11T15:41:21Z", "message": "Merge branch 'master' into JENKINS-26097"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNDY5MzY0", "url": "https://github.com/jenkinsci/jenkins/pull/4774#pullrequestreview-430469364", "createdAt": "2020-06-15T09:24:32Z", "commit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToyNDozM1rOGjqMHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTozMDozOVrOGjqaHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0NDU3NA==", "bodyText": "Note that many plugins have copy-pasted the code: https://github.com/search?q=org%3Ajenkinsci+AutoCompleteSeeder&type=Code .\nMaybe it;s time to consider making it a public API in jenkins.model.labels", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440044574", "createdAt": "2020-06-15T09:24:33Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,156 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0NDk4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static class AutoCompleteSeeder {\n          \n          \n            \n                static class LabelAutoCompleteSeeder {", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440044983", "createdAt": "2020-06-15T09:25:11Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,156 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0NjQyNA==", "bodyText": "I would suggest to move it into jenkins.model.labels instead of introducing a new nested interface", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440046424", "createdAt": "2020-06-15T09:27:39Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,156 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific context items.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public interface LabelValidator extends ExtensionPoint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0Njc2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static AutoCompletionCandidates autoComplete(@Nullable String label) {\n          \n          \n            \n                @NonNull\n          \n          \n            \n                public static AutoCompletionCandidates autoComplete(@Nullable String label) {", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440046769", "createdAt": "2020-06-15T09:28:17Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,156 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific context items.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public interface LabelValidator extends ExtensionPoint {\n+\n+        /**\n+         * Validates the use of a label within a particular context.\n+         *\n+         * @param item  The context item to be restricted by the label.\n+         * @param label The label that the job wants to restrict itself to.\n+         * @return The validation result.\n+         */\n+        @NonNull\n+        FormValidation check(@NonNull Item item, @NonNull Label label);\n+\n+    }\n+\n+    /**\n+     * Generates auto-completion candidates for a (partial) label.\n+     *\n+     * @param label The (partial) label for which auto-completion is being requested.\n+     * @return A set of auto-completion candidates.\n+     * @since TODO\n+     */\n+    public static AutoCompletionCandidates autoComplete(@Nullable String label) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0ODE1Nw==", "bodyText": "This approach makes it difficult to adopt the new API without bumping the core dependency. E.g. I could not update https://plugins.jenkins.io/label-verifier/ . Maybe it makes sense to introduce a temporary bridge method in this class so that checks could be added in the existing extension point.\nDoes not block it", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440048157", "createdAt": "2020-06-15T09:30:39Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/AbstractProject.java", "diffHunk": "@@ -2128,7 +2048,9 @@ public void setCustomWorkspace(String customWorkspace) throws IOException {\n      * This extension point allows such restrictions.\n      *\n      * @since 1.540\n+     * @deprecated Use {@link LabelExpression.LabelValidator} instead.\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "originalPosition": 124}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a658883cc9b4ff6c6522458692c1c54c8a51a23", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/9a658883cc9b4ff6c6522458692c1c54c8a51a23", "committedDate": "2020-06-15T18:12:51Z", "message": "Move LabelValidator to the top level."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a3d722208d7111e6164eb9809f9f47f9011b440", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/7a3d722208d7111e6164eb9809f9f47f9011b440", "committedDate": "2020-06-15T18:23:42Z", "message": "Move LabelExpression.AutoCompleteSeeder to top level as LabelAutoCompleteSeeder.\n\nThis also adds missing nullability annotations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "863eae52ec112a136d0c591a1bc659fe929c4730", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/863eae52ec112a136d0c591a1bc659fe929c4730", "committedDate": "2020-06-15T18:52:55Z", "message": "Moved the i18n messages.\n\nThese are now under LabelExpression.xxx instead of AbstractProject.xxx.\n\nFor the translations, properties were either renamed in-place or moved, depending on whether the file seemed to be sorted alphabetically by property name."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTExMDc0", "url": "https://github.com/jenkinsci/jenkins/pull/4774#pullrequestreview-430911074", "createdAt": "2020-06-15T18:57:48Z", "commit": {"oid": "863eae52ec112a136d0c591a1bc659fe929c4730"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo1Nzo0OVrOGj-w1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTowMjoyM1rOGj-5-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MTY1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * list of defined labels.\n          \n          \n            \n             * list of defined labels.\n          \n          \n            \n             * @since TODO", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440381652", "createdAt": "2020-06-15T18:57:49Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/labels/LabelAutoCompleteSeeder.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package hudson.model.labels;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Utility class for taking the current input value and computing a list of potential terms to match against the\n+ * list of defined labels.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "863eae52ec112a136d0c591a1bc659fe929c4730"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4Mzk5Mw==", "bodyText": "It can be done without a plugin and without complex code actually\n\nUpdate LabelValidator\n\npublic FormValidation checkJob(@NonNull Job<?, ?> job, @NonNull Label label) {\n    return FormValidation.ok()\n}\n\n\n\nIn LabelExpression#validate() add invocation of this method and fail if not OK\n\n\nIn a plugin implement a method without adding explicit @Override annotation. Thanks to Java, it will still be an override which does not require core bump", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440383993", "createdAt": "2020-06-15T19:02:23Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/AbstractProject.java", "diffHunk": "@@ -2128,7 +2048,9 @@ public void setCustomWorkspace(String customWorkspace) throws IOException {\n      * This extension point allows such restrictions.\n      *\n      * @since 1.540\n+     * @deprecated Use {@link LabelExpression.LabelValidator} instead.\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0ODE1Nw=="}, "originalCommit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "originalPosition": 124}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0621c2700362dddf48b279aa24e0d1f410b53d4", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/f0621c2700362dddf48b279aa24e0d1f410b53d4", "committedDate": "2020-06-15T20:06:10Z", "message": "Add JavaDoc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc286c768c5493db3b335623b4ab1bf413eb0d26", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/dc286c768c5493db3b335623b4ab1bf413eb0d26", "committedDate": "2020-06-15T20:20:38Z", "message": "Add a checkItem() to the \"old\" LabelValidator.\n\nBy default, this calls the regular check() if the item is an AbstractProject;\notherwise, it returns OK.\nThis allows a plugin to implement an override for that method in order to have its\nvalidator applied to Jobs too, without needing to bump their Jenkins dependency in\norder to get the new LabelValidator.\n\nAs a result, LabelExpression.validate() now always uses the \"old\" LabelValidators,\ncalling this new method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d542a76aee1647b456159c7b4dd1502fbd8ac423", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/d542a76aee1647b456159c7b4dd1502fbd8ac423", "committedDate": "2020-06-16T21:01:06Z", "message": "Merge branch 'master' into JENKINS-26097"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxOTIyNzQx", "url": "https://github.com/jenkinsci/jenkins/pull/4774#pullrequestreview-431922741", "createdAt": "2020-06-16T22:00:08Z", "commit": {"oid": "d542a76aee1647b456159c7b4dd1502fbd8ac423"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjowMDowOVrOGkuq9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjowMDo1NVrOGkusSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2NjU4Mw==", "bodyText": "I think we prefer to use jenkins.* packages for new classes right @oleg-nenashev / @daniel-beck ?", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r441166583", "createdAt": "2020-06-16T22:00:09Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/labels/LabelAutoCompleteSeeder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package hudson.model.labels;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d542a76aee1647b456159c7b4dd1502fbd8ac423"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2NjkyMQ==", "bodyText": "Unnecessary IMO; AbstractProject.LabelValidator should just be deprecated.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r441166921", "createdAt": "2020-06-16T22:00:55Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -340,27 +278,27 @@ public static FormValidation validate(@Nullable String expression, @CheckForNull\n             Label.parseExpression(expression);\n         } catch (ANTLRException e) {\n             return FormValidation.error(e,\n-                    Messages.AbstractProject_AssignedLabelString_InvalidBooleanExpression(e.getMessage()));\n+                    Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()));\n         }\n         final Jenkins j = Jenkins.get();\n         Label l = j.getLabel(expression);\n         if (l.isEmpty()) {\n             for (LabelAtom a : l.listAtoms()) {\n                 if (a.isEmpty()) {\n                     LabelAtom nearest = LabelAtom.findNearest(a.getName());\n-                    return FormValidation.warning(Messages.AbstractProject_AssignedLabelString_NoMatch_DidYouMean(a.getName(),nearest.getDisplayName()));\n+                    return FormValidation.warning(Messages.LabelExpression_NoMatch_DidYouMean(a.getName(),nearest.getDisplayName()));\n                 }\n             }\n-            return FormValidation.warning(Messages.AbstractProject_AssignedLabelString_NoMatch());\n+            return FormValidation.warning(Messages.LabelExpression_NoMatch());\n         }\n         if (item != null) {\n-            if (item instanceof AbstractProject) { // Use any project-oriented label validators\n-                final AbstractProject<?, ?> project = (AbstractProject<?,?>) item;\n-                for (AbstractProject.LabelValidator v : j.getExtensionList(AbstractProject.LabelValidator.class)) {\n-                    FormValidation result = v.check(project, l);\n-                    if (!FormValidation.Kind.OK.equals(result.kind)) {\n-                        return result;\n-                    }\n+            // Use the project-oriented validators (including any that might implement checkItem to support non-Project\n+            // items too).\n+            // FIXME: Perhaps these should aggregate their errors/warnings?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d542a76aee1647b456159c7b4dd1502fbd8ac423"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/df6c3735feb21f287633222e86bdb8e67c19a172", "committedDate": "2020-06-17T08:20:37Z", "message": "Move new classes to jenkins.model.labels.\n\nMoved the test class over as well.\n\nThis also makes the constructor and getSeeds() method of\nLabelAutoCompleteSeeder public."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NjU3OTYy", "url": "https://github.com/jenkinsci/jenkins/pull/4774#pullrequestreview-434657962", "createdAt": "2020-06-22T07:15:36Z", "commit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1OTI3NjIz", "url": "https://github.com/jenkinsci/jenkins/pull/4774#pullrequestreview-435927623", "createdAt": "2020-06-23T15:58:06Z", "commit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo1ODo1NVrOGnwBCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjowMjowN1rOGnwJ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNDM0NQ==", "bodyText": "Perhaps clarify that only non-OK results are considered. (You can create OK with message, which would be thrown out in this context IIUC.)", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444334345", "createdAt": "2020-06-23T15:58:55Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/model/labels/LabelValidator.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package jenkins.model.labels;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.ExtensionPoint;\n+import hudson.model.Item;\n+import hudson.model.Label;\n+import hudson.util.FormValidation;\n+\n+/**\n+ * Plugins may want to contribute additional restrictions on the use of specific labels for specific context items.\n+ * This extension point allows such restrictions.\n+ *\n+ * @since TODO\n+ */\n+public interface LabelValidator extends ExtensionPoint {\n+\n+    /**\n+     * Validates the use of a label within a particular context.\n+     *\n+     * @param item  The context item to be restricted by the label.\n+     * @param label The label that the job wants to restrict itself to.\n+     * @return The validation result.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNDczNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            LabelExpression.NoMatch=There''s no agent/cloud that matches this assignment\n          \n          \n            \n            LabelExpression.NoMatch=There\u2019s no agent/cloud that matches this assignment\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            LabelExpression.NoMatch=There''s no agent/cloud that matches this assignment\n          \n          \n            \n            LabelExpression.NoMatch=There is no agent/cloud that matches this assignment", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444334736", "createdAt": "2020-06-23T15:59:25Z", "author": {"login": "jglick"}, "path": "core/src/main/resources/hudson/model/Messages.properties", "diffHunk": "@@ -195,6 +188,11 @@ Job.you_must_use_the_save_button_if_you_wish=You must use the Save button if you\n Label.GroupOf=group of {0}\n Label.InvalidLabel=invalid label\n Label.ProvisionedFrom=Provisioned from {0}\n+LabelExpression.InvalidBooleanExpression=Invalid boolean expression: {0}\n+LabelExpression.LabelLink=<a href=\"{0}{2}\">Label {1}</a> is serviced by {3,choice,0#no nodes|1#1 node|1<{3} nodes}{4,choice,0#|1# and 1 cloud|1< and {4} clouds}. \\\n+  Permissions or other restrictions provided by plugins may prevent this job from running on those nodes.\n+LabelExpression.NoMatch=There''s no agent/cloud that matches this assignment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjU5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *\n          \n          \n            \n             * @since TODO\n          \n          \n            \n             */\n          \n          \n            \n             */\n          \n          \n            \n            @Restricted(NoExternalUse.class)\n          \n      \n    \n    \n  \n\nsince I do not see it being used in any of the downstream PRs and I would expect it to be called only from LabelExpression.autoComplete.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444336596", "createdAt": "2020-06-23T16:02:07Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/model/labels/LabelAutoCompleteSeeder.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package jenkins.model.labels;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Utility class for taking the current input value and computing a list of potential terms to match against the\n+ * list of defined labels.\n+ *\n+ * @since TODO\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "071214363e63651427fc056f90a043d0d56fef27", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/071214363e63651427fc056f90a043d0d56fef27", "committedDate": "2020-06-23T21:14:21Z", "message": "Merge branch 'master' into JENKINS-26097"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a0aea1239c8d854699837d1403057a09a8b4d6a", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/1a0aea1239c8d854699837d1403057a09a8b4d6a", "committedDate": "2020-06-23T21:21:41Z", "message": "Tweak messages.\n\nThis avoids referring to a job (because the label validation can be\napplied completely outside of any job context, like in tool installers)\nor an assignment.\n\nAlso aligned terms (\"is serviced by\" -> \"matches\")."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cfba40d96902bf6fdaf6f7a5477015de6235a0b", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/6cfba40d96902bf6fdaf6f7a5477015de6235a0b", "committedDate": "2020-06-23T21:47:16Z", "message": "Aggregate label validation problems.\n\nThis still discards all OKs, but instead of stopping at and returning\nthe first warning/error reported, all warnings/errors are returned as\nan aggregated result.\n\nThe JavaDoc for the relevant messages was extended to describe this\nbehaviour."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a94cb38c96edba174cd9c5e399e833b07b9640f2", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/a94cb38c96edba174cd9c5e399e833b07b9640f2", "committedDate": "2020-06-23T22:08:51Z", "message": "Flag LabelAutoCompleteSeeder as NoExternalUse."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODU4MzQ3", "url": "https://github.com/jenkinsci/jenkins/pull/4774#pullrequestreview-436858347", "createdAt": "2020-06-24T17:27:57Z", "commit": {"oid": "a94cb38c96edba174cd9c5e399e833b07b9640f2"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzoyNzo1OFrOGocCxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzoyNzo1OFrOGocCxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA1NTY4NQ==", "bodyText": "BTW I think if \n  \n    \n      jenkins/core/src/main/java/hudson/util/FormValidation.java\n    \n    \n        Lines 227 to 238\n      in\n      339f9b9\n    \n    \n    \n    \n\n        \n          \n           final StringBuilder sb = new StringBuilder(\"<ul style='list-style-type: none; padding-left: 0; margin: 0'>\"); \n        \n\n        \n          \n           FormValidation.Kind worst = Kind.OK; \n        \n\n        \n          \n           for (FormValidation validation: validations) { \n        \n\n        \n          \n               sb.append(\"<li>\").append(validation.renderHtml()).append(\"</li>\"); \n        \n\n        \n          \n            \n        \n\n        \n          \n               if (validation.kind.ordinal() > worst.ordinal()) { \n        \n\n        \n          \n                   worst = validation.kind; \n        \n\n        \n          \n               } \n        \n\n        \n          \n           } \n        \n\n        \n          \n           sb.append(\"</ul>\"); \n        \n\n        \n          \n            \n        \n\n        \n          \n           return respond(worst, sb.toString()); \n        \n    \n  \n\n were refined slightly, to ignore all occurrences of FormValidation.OK in its input, then the API and this impl could be simplified a bit while actually handling ok(String) from validators. Not necessary in this PR, just something I noticed while looking at aggregate.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r445055685", "createdAt": "2020-06-24T17:27:58Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -288,28 +289,35 @@ public static FormValidation validate(@Nullable String expression, @CheckForNull\n             for (LabelAtom a : l.listAtoms()) {\n                 if (a.isEmpty()) {\n                     LabelAtom nearest = LabelAtom.findNearest(a.getName());\n-                    return FormValidation.warning(Messages.LabelExpression_NoMatch_DidYouMean(a.getName(),nearest.getDisplayName()));\n+                    return FormValidation.warning(Messages.LabelExpression_NoMatch_DidYouMean(a.getName(), nearest.getDisplayName()));\n                 }\n             }\n             return FormValidation.warning(Messages.LabelExpression_NoMatch());\n         }\n         if (item != null) {\n-            // Use the project-oriented validators (including any that might implement checkItem to support non-Project\n-            // items too).\n-            // FIXME: Perhaps these should aggregate their errors/warnings?\n+            final List<FormValidation> problems = new ArrayList<>();\n+            // Use the project-oriented validators too, so that validation from older plugins still gets applied.\n             for (AbstractProject.LabelValidator v : j.getExtensionList(AbstractProject.LabelValidator.class)) {\n                 FormValidation result = v.checkItem(item, l);\n-                if (!FormValidation.Kind.OK.equals(result.kind)) {\n-                    return result;\n+                if (FormValidation.Kind.OK.equals(result.kind)) {\n+                    continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a94cb38c96edba174cd9c5e399e833b07b9640f2"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3Mjg3NzM4", "url": "https://github.com/jenkinsci/jenkins/pull/4774#pullrequestreview-437287738", "createdAt": "2020-06-25T08:42:09Z", "commit": {"oid": "a94cb38c96edba174cd9c5e399e833b07b9640f2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2334, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}