{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NDUxNDE1", "number": 4683, "title": "[JENKINS-62014] Add build step environment filters", "bodyText": "Co-authored-by: Wadeck Follonier wadeck.follonier@gmail.com\nSee JENKINS-62014.\nThis PR adds new extension points to filter or change environment variables passed to build steps that support this feature.\nThey can be configured globally (for which this PR only prepares the infrastructure, no implementations are provided) and for specific build steps. One such filter is provided to filter environment variables. Batch and Shell build steps support this feature.\nThere are several use cases for this system, for example exercising fine-grained control over environment variables to get more easily reproducible builds, or filtering out extremely long or otherwise broken environment variables that would make some tools misbehave.\nDownstream changes\nNew utility plugin with run matchers to include/exclude only specific builds/jobs on globally configured filters and descriptor matchers to include/exclude build steps based on their type: https://github.com/daniel-beck/environment-filter-utils-plugin\nNew plugin with generic filters demonstrating use of the new extension point: https://github.com/daniel-beck/generic-environment-filters-plugin\njenkinsci/durable-task-plugin#124 and jenkinsci/workflow-durable-task-step-plugin#135 add support for globally defined build step environment filters to sh, bat, and powershell pipeline steps.\njenkinsci/workflow-basic-steps-plugin#115 implements a retainEnv pipeline step that works somewhat similar to the functionality implemented for Shell/Batch steps here, except for pipeline and any steps. Notably, cannot remove system environment variables; but it does remove characteristic env vars (which aren't used for workflow-durable-task-step anyway, it has its own cookie).\nProposed changelog entries\n\nRFE: Add the ability to filter out environment variables for Shell and Windows batch build steps\nDeveloper: RFE: Add new extension points to define build step environment filters (currently in beta)\n\nProposed upgrade guidelines\nN/A\nSubmitter checklist\n\n (If applicable) Jira issue is well described\n Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). Examples\n\nFill-in the Proposed changelog entries section only if there are breaking changes or other changes which may require extra steps from users during the upgrade\n\n\n Appropriate autotests or explanation to why this change has no tests\n[n/a] For dependency updates: links to external changelogs and, if possible, full diffs\n\n\nDesired reviewers\n@mention\n\nMaintainer checklist\nBefore the changes are marked as ready-for-merge:\n\n There are at least 2 approvals for the pull request and no outstanding requests for change\n Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n Changelog entries in the PR title and/or Proposed changelog entries are correct\n Proper changelog labels are set so that the changelog can be generated automatically\n If the change needs additional upgrade steps from users, upgrade-guide-needed label is set and there is a Proposed upgrade guidelines section in the PR title. (example)\n If it would make sense to backport the change to LTS, a Jira issue must exist, be a Bug or Improvement, and be labeled as lts-candidate to be considered (see query).", "createdAt": "2020-04-22T18:05:59Z", "url": "https://github.com/jenkinsci/jenkins/pull/4683", "merged": true, "mergeCommit": {"oid": "0134fb11a82e0b3a0c52a6df0aff294cfaf16c44"}, "closed": true, "closedAt": "2020-07-19T08:24:00Z", "author": {"login": "daniel-beck"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaLVQOgH2gAyNDA3NDUxNDE1OmZjY2M3MzRkOTcxZTJlOGY5Yjg0NjAzNmFhYTg0YWY2M2QwNmQ0MTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1m9DkgFqTQ1MDI1ODQ5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fccc734d971e2e8f9b846036aaa84af63d06d415", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/fccc734d971e2e8f9b846036aaa84af63d06d415", "committedDate": "2020-04-22T17:00:17Z", "message": "[JENKINS-62014] Add build step environment filters\n\nCo-authored-by: Wadeck Follonier <wadeck.follonier@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NTA4NjAw", "url": "https://github.com/jenkinsci/jenkins/pull/4683#pullrequestreview-398508600", "createdAt": "2020-04-22T19:29:15Z", "commit": {"oid": "fccc734d971e2e8f9b846036aaa84af63d06d415"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToyOToxNVrOGKHYlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDowNTowOFrOGKJPhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1OTkyNg==", "bodyText": "not sure that 'characteristic' is a good term to use here, it's not a common word, and is likely to be confusing", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r413259926", "createdAt": "2020-04-22T19:29:15Z", "author": {"login": "timja"}, "path": "core/src/main/resources/jenkins/tasks/filters/impl/RetainVariablesLocalRule/help-retainCharacteristicEnvVars.html", "diffHunk": "@@ -0,0 +1,5 @@\n+<p>\n+    When checked, <em>characteristic environment variables</em> will be retained in addition to the variables listed above.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fccc734d971e2e8f9b846036aaa84af63d06d415"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI4ODM3Ng==", "bodyText": "the checkbox isn't associated to the label by putting the title on the entry (which means you can't click on the label and have it checked, required as part of accessibility), from my understanding it should go on the checkbox, cc @jsoref @fqueiruga", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r413288376", "createdAt": "2020-04-22T20:02:51Z", "author": {"login": "timja"}, "path": "core/src/main/resources/jenkins/tasks/filters/impl/RetainVariablesLocalRule/config.jelly", "diffHunk": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+The MIT License\n+\n+Copyright (c) 2020, CloudBees, Inc.\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in\n+all copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+THE SOFTWARE.\n+-->\n+<?jelly escape-by-default='true'?>\n+<j:jelly xmlns:j=\"jelly:core\" xmlns:f=\"/lib/form\">\n+    <f:entry field=\"variables\" title=\"${%variablesLabel}\"\n+             description=\"${%variablesDescription}\" >\n+        <f:textbox value=\"${instance.variables}\" />\n+    </f:entry>\n+    <f:entry field=\"retainCharacteristicEnvVars\" title=\"${%retainCharacteristicEnvVarsLabel}\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fccc734d971e2e8f9b846036aaa84af63d06d415"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI5MDM3NA==", "bodyText": "nit: spacing\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if(instance?.configuredLocalRules || descriptor.applicableLocalRules){\n          \n          \n            \n                if (instance?.configuredLocalRules || descriptor.applicableLocalRules) {", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r413290374", "createdAt": "2020-04-22T20:05:08Z", "author": {"login": "timja"}, "path": "core/src/main/resources/hudson/tasks/Shell/config.groovy", "diffHunk": "@@ -33,4 +33,17 @@ f.advanced() {\n         f.number(clazz:\"positive-number\", value: instance?.unstableReturn, min:1, max:255, step:1)\n     }\n \n+    if(instance?.configuredLocalRules || descriptor.applicableLocalRules){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fccc734d971e2e8f9b846036aaa84af63d06d415"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4ODkwNDQ3", "url": "https://github.com/jenkinsci/jenkins/pull/4683#pullrequestreview-398890447", "createdAt": "2020-04-23T08:49:16Z", "commit": {"oid": "fccc734d971e2e8f9b846036aaa84af63d06d415"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODo0OToxNlrOGKeIjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODo0OToxNlrOGKeIjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzMjY1NQ==", "bodyText": "Does this TODO relate to an already existing issue or one introduced by this PR?", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r413632655", "createdAt": "2020-04-23T08:49:16Z", "author": {"login": "fqueiruga"}, "path": "core/src/main/resources/lib/form/hetero-list.jelly", "diffHunk": "@@ -112,11 +116,11 @@ THE SOFTWARE.\n   <j:set var=\"targetType\" value=\"${attrs.targetType?:it.class}\"/>\n   <div class=\"hetero-list-container ${hasHeader?'with-drag-drop':''} ${attrs.oneEach?'one-each':''} ${attrs.honorOrder?'honor-order':''}\">\n     <!-- display existing items -->\n-    <j:forEach var=\"i\" items=\"${attrs.items}\">\n+    <j:forEach var=\"i\" items=\"${attrs.items}\"><!-- TODO consider customizedFields: how to distinguish default items from user-configured items? -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fccc734d971e2e8f9b846036aaa84af63d06d415"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4OTAxMzA3", "url": "https://github.com/jenkinsci/jenkins/pull/4683#pullrequestreview-398901307", "createdAt": "2020-04-23T09:02:57Z", "commit": {"oid": "fccc734d971e2e8f9b846036aaa84af63d06d415"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTowMjo1N1rOGKeuyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTowMjo1N1rOGKeuyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0MjQ0Mw==", "bodyText": "Does this j:choose do something?", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r413642443", "createdAt": "2020-04-23T09:02:57Z", "author": {"login": "fqueiruga"}, "path": "core/src/main/resources/jenkins/tasks/filters/EnvVarsFilterGlobalConfiguration/config.jelly", "diffHunk": "@@ -0,0 +1,45 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+The MIT License\n+\n+Copyright (c) 2020, CloudBees, Inc.\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in\n+all copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+THE SOFTWARE.\n+-->\n+<?jelly escape-by-default='true'?>\n+<j:jelly xmlns:j=\"jelly:core\" xmlns:f=\"/lib/form\">\n+    <j:if test=\"${instance.allGlobalRules.size() gt 0}\">\n+        <!-- hide this configuration when there are no descriptors -->\n+        <f:section title=\"${%jobEnvironmentVariableFilters}\">\n+            <j:choose>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fccc734d971e2e8f9b846036aaa84af63d06d415"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4OTA3OTA3", "url": "https://github.com/jenkinsci/jenkins/pull/4683#pullrequestreview-398907907", "createdAt": "2020-04-23T09:11:19Z", "commit": {"oid": "fccc734d971e2e8f9b846036aaa84af63d06d415"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOToxMToxOVrOGKfF9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOToxMToxOVrOGKfF9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0ODM3NQ==", "bodyText": "I think you should document that the code will most likely run on the other end of a remoting channel, so implementers know not to try do strange things.", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r413648375", "createdAt": "2020-04-23T09:11:19Z", "author": {"login": "rsandell"}, "path": "core/src/main/java/jenkins/tasks/filters/EnvVarsFilterRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.tasks.filters;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.EnvVars;\n+import hudson.Extension;\n+import hudson.model.Describable;\n+import hudson.model.Descriptor;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * The order of execution of the rules is determined by first their type (local before global)\n+ * and then their {@link Extension#ordinal()}, higher ordinal first.\n+ */\n+@Restricted(Beta.class)\n+public interface EnvVarsFilterRule extends Serializable {\n+    /**\n+     * In case the filter detects something that must stop the build, it must throw a {@link EnvVarsFilterException}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fccc734d971e2e8f9b846036aaa84af63d06d415"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4OTE0MTQ5", "url": "https://github.com/jenkinsci/jenkins/pull/4683#pullrequestreview-398914149", "createdAt": "2020-04-23T09:19:13Z", "commit": {"oid": "fccc734d971e2e8f9b846036aaa84af63d06d415"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ece5f5d1b0832679acb4999b0884334bb0a3cb6c", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/ece5f5d1b0832679acb4999b0884334bb0a3cb6c", "committedDate": "2020-04-24T13:42:29Z", "message": "Merge branch 'master' into environment-filters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d71e7c850809fa442560ec8da850f8b01a73b78e", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/d71e7c850809fa442560ec8da850f8b01a73b78e", "committedDate": "2020-05-07T09:15:46Z", "message": "Merge branch 'master' into environment-filters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c91f5baacd903f6e995656f370abfdb1f79bbd8b", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/c91f5baacd903f6e995656f370abfdb1f79bbd8b", "committedDate": "2020-05-07T09:36:13Z", "message": "Allow reordering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36843bed861c11de677592fd8927f7f544ac5d26", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/36843bed861c11de677592fd8927f7f544ac5d26", "committedDate": "2020-05-07T20:10:08Z", "message": "Allow multiple instances of each of these"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MDcxOTM4", "url": "https://github.com/jenkinsci/jenkins/pull/4683#pullrequestreview-408071938", "createdAt": "2020-05-08T08:02:29Z", "commit": {"oid": "36843bed861c11de677592fd8927f7f544ac5d26"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ba15e18ae0c20656365d29822b38f49154abb5d", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/9ba15e18ae0c20656365d29822b38f49154abb5d", "committedDate": "2020-05-13T09:28:09Z", "message": "Make process environment variables handling an enum (reset/remove)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96142c5559cc76ffb0d807c82f5e316e41033649", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/96142c5559cc76ffb0d807c82f5e316e41033649", "committedDate": "2020-05-13T09:32:06Z", "message": "Remove obsolete help and form validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/a0bcafa17089104cf705f303e403c8a3dcfbe5de", "committedDate": "2020-05-13T12:04:23Z", "message": "Merge remote-tracking branch 'jenkinsci/master' into environment-filters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTA0NzAy", "url": "https://github.com/jenkinsci/jenkins/pull/4683#pullrequestreview-411104702", "createdAt": "2020-05-13T16:37:01Z", "commit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozNzowMVrOGU6KXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozNzowMVrOGU6KXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NzYzMQ==", "bodyText": "This class needs a serialVersionUID.", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r424577631", "createdAt": "2020-05-13T16:37:01Z", "author": {"login": "jvz"}, "path": "core/src/main/java/jenkins/tasks/filters/EnvVarsFilterRuleWrapper.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.tasks.filters;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.EnvVars;\n+import hudson.Launcher;\n+import hudson.model.Run;\n+import hudson.model.TaskListener;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class that provide the list of rules (local + global) for a given builder.\n+ *\n+ * @since TODO\n+ */\n+@Restricted(NoExternalUse.class)\n+public class EnvVarsFilterRuleWrapper implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTA4NTc4", "url": "https://github.com/jenkinsci/jenkins/pull/4683#pullrequestreview-411108578", "createdAt": "2020-05-13T16:41:44Z", "commit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0MTo0NFrOGU6V9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0MTo0NFrOGU6V9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MDU5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Collections.sort(variables); // TODO do we really want to sort this?\n          \n          \n            \n                    variables.sort(null); // TODO do we really want to sort this?", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r424580599", "createdAt": "2020-05-13T16:41:44Z", "author": {"login": "jvz"}, "path": "core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.tasks.filters.impl;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.EnvVars;\n+import hudson.Extension;\n+import hudson.util.FormValidation;\n+import jenkins.tasks.filters.EnvVarsFilterRuleContext;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRule;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRuleDescriptor;\n+import jenkins.tasks.filters.EnvVarsFilterableBuilder;\n+import org.apache.commons.lang.StringUtils;\n+import org.jenkinsci.Symbol;\n+import org.jvnet.localizer.Localizable;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.kohsuke.stapler.DataBoundConstructor;\n+import org.kohsuke.stapler.DataBoundSetter;\n+import org.kohsuke.stapler.QueryParameter;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Local rule that removes all the non-retained variables for that step.\n+ *\n+ * @since TODO\n+ */\n+@Restricted(NoExternalUse.class)\n+public class RetainVariablesLocalRule implements EnvVarsFilterLocalRule {\n+\n+    /**\n+     * List of lowercase names of variable that will be retained from removal\n+     */\n+    private String variables = \"\";\n+    private boolean retainCharacteristicEnvVars = true;\n+    private ProcessVariablesHandling processVariablesHandling = ProcessVariablesHandling.RESET;\n+\n+    @DataBoundConstructor\n+    public RetainVariablesLocalRule() {\n+    }\n+\n+    @DataBoundSetter\n+    public void setVariables(@NonNull String variables) {\n+        this.variables = variables;\n+    }\n+\n+    private static List<String> convertStringToList(@NonNull String variablesCommaSeparated) {\n+        String[] variablesArray = variablesCommaSeparated.split(\"\\\\s+\");\n+        List<String> variables = new ArrayList<>();\n+        for (String nameFragment : variablesArray) {\n+            if (StringUtils.isNotBlank(nameFragment)) {\n+                variables.add(nameFragment.toLowerCase(Locale.ENGLISH));\n+            }\n+        }\n+\n+        Collections.sort(variables); // TODO do we really want to sort this?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTEyNTgz", "url": "https://github.com/jenkinsci/jenkins/pull/4683#pullrequestreview-411112583", "createdAt": "2020-05-13T16:46:49Z", "commit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0Njo0OVrOGU6iYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0Njo0OVrOGU6iYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4Mzc3Nw==", "bodyText": "The repetition of this UI suggests this might make a useful custom tag.", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r424583777", "createdAt": "2020-05-13T16:46:49Z", "author": {"login": "jvz"}, "path": "core/src/main/resources/hudson/tasks/BatchFile/config.jelly", "diffHunk": "@@ -32,5 +32,17 @@ THE SOFTWARE.\n     <f:entry title=\"${%ERRORLEVEL to set build unstable}\" field=\"unstableReturn\" >\n       <f:number value=\"${instance.unstableReturn}\" min=\"-2147483648\" max=\"2147483647\" step=\"1\" />\n     </f:entry>\n+\n+    <j:if test=\"${!empty(instance.configuredLocalRules) or !empty(descriptor.applicableLocalRules)}\">\n+      <f:entry title=\"${%filterRules}\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTM0MTQx", "url": "https://github.com/jenkinsci/jenkins/pull/4683#pullrequestreview-411134141", "createdAt": "2020-05-13T17:13:47Z", "commit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxMzo0N1rOGU7jgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxMzo0N1rOGU7jgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMDQ1MQ==", "bodyText": "Seems to be missing a lot of the others?\n\nBUILD_DISPLAY_NAME\nBUILD_URL\nEXECUTOR_NUMBER\nJENKINS_URL\nJOB_DISPLAY_URL\nJOB_URL\nNODE_LABELS\nNODE_NAME\nRUN_CHANGES_DISPLAY_URL\nRUN_DISPLAY_URL\nWORKSPACE\nWORKSPACE_TMP", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r424600451", "createdAt": "2020-05-13T17:13:47Z", "author": {"login": "jvz"}, "path": "core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.tasks.filters.impl;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.EnvVars;\n+import hudson.Extension;\n+import hudson.util.FormValidation;\n+import jenkins.tasks.filters.EnvVarsFilterRuleContext;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRule;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRuleDescriptor;\n+import jenkins.tasks.filters.EnvVarsFilterableBuilder;\n+import org.apache.commons.lang.StringUtils;\n+import org.jenkinsci.Symbol;\n+import org.jvnet.localizer.Localizable;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.kohsuke.stapler.DataBoundConstructor;\n+import org.kohsuke.stapler.DataBoundSetter;\n+import org.kohsuke.stapler.QueryParameter;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Local rule that removes all the non-retained variables for that step.\n+ *\n+ * @since TODO\n+ */\n+@Restricted(NoExternalUse.class)\n+public class RetainVariablesLocalRule implements EnvVarsFilterLocalRule {\n+\n+    /**\n+     * List of lowercase names of variable that will be retained from removal\n+     */\n+    private String variables = \"\";\n+    private boolean retainCharacteristicEnvVars = true;\n+    private ProcessVariablesHandling processVariablesHandling = ProcessVariablesHandling.RESET;\n+\n+    @DataBoundConstructor\n+    public RetainVariablesLocalRule() {\n+    }\n+\n+    @DataBoundSetter\n+    public void setVariables(@NonNull String variables) {\n+        this.variables = variables;\n+    }\n+\n+    private static List<String> convertStringToList(@NonNull String variablesCommaSeparated) {\n+        String[] variablesArray = variablesCommaSeparated.split(\"\\\\s+\");\n+        List<String> variables = new ArrayList<>();\n+        for (String nameFragment : variablesArray) {\n+            if (StringUtils.isNotBlank(nameFragment)) {\n+                variables.add(nameFragment.toLowerCase(Locale.ENGLISH));\n+            }\n+        }\n+\n+        Collections.sort(variables); // TODO do we really want to sort this?\n+        return variables;\n+    }\n+\n+    // for jelly view\n+    @Restricted(NoExternalUse.class)\n+    public @NonNull String getVariables() {\n+        return variables;\n+    }\n+\n+    @DataBoundSetter\n+    public void setRetainCharacteristicEnvVars(boolean retainCharacteristicEnvVars) {\n+        this.retainCharacteristicEnvVars = retainCharacteristicEnvVars;\n+    }\n+\n+    public boolean isRetainCharacteristicEnvVars() {\n+        return retainCharacteristicEnvVars;\n+    }\n+\n+    private List<String> variablesToRetain() {\n+        List<String> vars = new ArrayList<>(convertStringToList(this.variables));\n+        if (isRetainCharacteristicEnvVars()) {\n+            // TODO Make the 'HUDSON_COOKIE' variable less special so we can remove it.\n+            vars.addAll(Arrays.asList(\"jenkins_server_cookie\", \"hudson_server_cookie\", \"job_name\", \"job_base_name\", \"build_number\", \"build_id\", \"build_tag\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NTc0MjYw", "url": "https://github.com/jenkinsci/jenkins/pull/4683#pullrequestreview-415574260", "createdAt": "2020-05-20T17:47:14Z", "commit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzo0NzoxNFrOGYXCXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODoxODoxMFrOGYYJXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5NjQ0Ng==", "bodyText": "This seems to conflict with https://github.com/jenkinsci/jenkins/pull/4683/files#diff-89e48340cb76789735ba59b136b26099R37 . Some clarification would help.", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r428196446", "createdAt": "2020-05-20T17:47:14Z", "author": {"login": "jeffret-b"}, "path": "core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.tasks.filters.impl;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.EnvVars;\n+import hudson.Extension;\n+import hudson.util.FormValidation;\n+import jenkins.tasks.filters.EnvVarsFilterRuleContext;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRule;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRuleDescriptor;\n+import jenkins.tasks.filters.EnvVarsFilterableBuilder;\n+import org.apache.commons.lang.StringUtils;\n+import org.jenkinsci.Symbol;\n+import org.jvnet.localizer.Localizable;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.kohsuke.stapler.DataBoundConstructor;\n+import org.kohsuke.stapler.DataBoundSetter;\n+import org.kohsuke.stapler.QueryParameter;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Local rule that removes all the non-retained variables for that step.\n+ *\n+ * @since TODO\n+ */\n+@Restricted(NoExternalUse.class)\n+public class RetainVariablesLocalRule implements EnvVarsFilterLocalRule {\n+\n+    /**\n+     * List of lowercase names of variable that will be retained from removal\n+     */\n+    private String variables = \"\";\n+    private boolean retainCharacteristicEnvVars = true;\n+    private ProcessVariablesHandling processVariablesHandling = ProcessVariablesHandling.RESET;\n+\n+    @DataBoundConstructor\n+    public RetainVariablesLocalRule() {\n+    }\n+\n+    @DataBoundSetter\n+    public void setVariables(@NonNull String variables) {\n+        this.variables = variables;\n+    }\n+\n+    private static List<String> convertStringToList(@NonNull String variablesCommaSeparated) {\n+        String[] variablesArray = variablesCommaSeparated.split(\"\\\\s+\");\n+        List<String> variables = new ArrayList<>();\n+        for (String nameFragment : variablesArray) {\n+            if (StringUtils.isNotBlank(nameFragment)) {\n+                variables.add(nameFragment.toLowerCase(Locale.ENGLISH));\n+            }\n+        }\n+\n+        Collections.sort(variables); // TODO do we really want to sort this?\n+        return variables;\n+    }\n+\n+    // for jelly view\n+    @Restricted(NoExternalUse.class)\n+    public @NonNull String getVariables() {\n+        return variables;\n+    }\n+\n+    @DataBoundSetter\n+    public void setRetainCharacteristicEnvVars(boolean retainCharacteristicEnvVars) {\n+        this.retainCharacteristicEnvVars = retainCharacteristicEnvVars;\n+    }\n+\n+    public boolean isRetainCharacteristicEnvVars() {\n+        return retainCharacteristicEnvVars;\n+    }\n+\n+    private List<String> variablesToRetain() {\n+        List<String> vars = new ArrayList<>(convertStringToList(this.variables));\n+        if (isRetainCharacteristicEnvVars()) {\n+            // TODO Make the 'HUDSON_COOKIE' variable less special so we can remove it.\n+            vars.addAll(Arrays.asList(\"jenkins_server_cookie\", \"hudson_server_cookie\", \"job_name\", \"job_base_name\", \"build_number\", \"build_id\", \"build_tag\"));\n+        }\n+        return vars;\n+    }\n+\n+    @Override\n+    public void filter(@NonNull EnvVars envVars, @NonNull EnvVarsFilterRuleContext context) {\n+        Map<String, String> systemEnvVars = EnvVars.masterEnvVars;\n+\n+        final List<String> variablesRemoved = new ArrayList<>();\n+        final List<String> variablesReset = new ArrayList<>();\n+        final List<String> variables = variablesToRetain();\n+        for (Iterator<Map.Entry<String, String>> iterator = envVars.entrySet().iterator(); iterator.hasNext(); ) {\n+            Map.Entry<String, String> entry = iterator.next();\n+            String variableName = entry.getKey();\n+            String variableValue = entry.getValue();\n+\n+            if (!variables.contains(variableName.toLowerCase(Locale.ENGLISH))) {\n+                // systemEnvVars's keys are case insensitive\n+                String systemValue = systemEnvVars.get(variableName);\n+\n+                if (systemValue == null) {\n+                    variablesRemoved.add(variableName);\n+                    iterator.remove();\n+                } else {\n+                    switch (processVariablesHandling) {\n+                        case RESET:\n+                            if (!systemValue.equals(variableValue)) {\n+                                variablesReset.add(variableName);\n+                            }\n+                            break;\n+                        case REMOVE:\n+                            variablesRemoved.add(variableName);\n+                            iterator.remove();\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (!variablesRemoved.isEmpty()) {\n+            context.getTaskListener().getLogger().println(Messages.RetainVariablesLocalRule_RemovalMessage(getDescriptor().getDisplayName(), StringUtils.join(variablesRemoved.toArray(), \", \")));\n+        }\n+        if (!variablesReset.isEmpty()) {\n+            // reset the variables using the initial value from System\n+            variablesReset.forEach(variableName -> envVars.put(variableName, systemEnvVars.get(variableName)));\n+            context.getTaskListener().getLogger().println(Messages.RetainVariablesLocalRule_ResetMessage(getDescriptor().getDisplayName(), StringUtils.join(variablesReset.toArray(), \", \")));\n+        }\n+    }\n+\n+    public ProcessVariablesHandling getProcessVariablesHandling() {\n+        return processVariablesHandling;\n+    }\n+\n+    @DataBoundSetter\n+    public void setProcessVariablesHandling(ProcessVariablesHandling processVariablesHandling) {\n+        this.processVariablesHandling = processVariablesHandling;\n+    }\n+\n+    // the ordinal is used to sort the rules in term of execution, the smaller value first", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIwNzkxMg==", "bodyText": "Does there need to be a third choice, to just leave them as is? I'm thinking about a possible user who wants to filter environment variables but for whatever weird reasons needs to keep changed values. Maybe if only for completeness.", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r428207912", "createdAt": "2020-05-20T18:06:19Z", "author": {"login": "jeffret-b"}, "path": "core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.tasks.filters.impl;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.EnvVars;\n+import hudson.Extension;\n+import hudson.util.FormValidation;\n+import jenkins.tasks.filters.EnvVarsFilterRuleContext;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRule;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRuleDescriptor;\n+import jenkins.tasks.filters.EnvVarsFilterableBuilder;\n+import org.apache.commons.lang.StringUtils;\n+import org.jenkinsci.Symbol;\n+import org.jvnet.localizer.Localizable;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.kohsuke.stapler.DataBoundConstructor;\n+import org.kohsuke.stapler.DataBoundSetter;\n+import org.kohsuke.stapler.QueryParameter;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Local rule that removes all the non-retained variables for that step.\n+ *\n+ * @since TODO\n+ */\n+@Restricted(NoExternalUse.class)\n+public class RetainVariablesLocalRule implements EnvVarsFilterLocalRule {\n+\n+    /**\n+     * List of lowercase names of variable that will be retained from removal\n+     */\n+    private String variables = \"\";\n+    private boolean retainCharacteristicEnvVars = true;\n+    private ProcessVariablesHandling processVariablesHandling = ProcessVariablesHandling.RESET;\n+\n+    @DataBoundConstructor\n+    public RetainVariablesLocalRule() {\n+    }\n+\n+    @DataBoundSetter\n+    public void setVariables(@NonNull String variables) {\n+        this.variables = variables;\n+    }\n+\n+    private static List<String> convertStringToList(@NonNull String variablesCommaSeparated) {\n+        String[] variablesArray = variablesCommaSeparated.split(\"\\\\s+\");\n+        List<String> variables = new ArrayList<>();\n+        for (String nameFragment : variablesArray) {\n+            if (StringUtils.isNotBlank(nameFragment)) {\n+                variables.add(nameFragment.toLowerCase(Locale.ENGLISH));\n+            }\n+        }\n+\n+        Collections.sort(variables); // TODO do we really want to sort this?\n+        return variables;\n+    }\n+\n+    // for jelly view\n+    @Restricted(NoExternalUse.class)\n+    public @NonNull String getVariables() {\n+        return variables;\n+    }\n+\n+    @DataBoundSetter\n+    public void setRetainCharacteristicEnvVars(boolean retainCharacteristicEnvVars) {\n+        this.retainCharacteristicEnvVars = retainCharacteristicEnvVars;\n+    }\n+\n+    public boolean isRetainCharacteristicEnvVars() {\n+        return retainCharacteristicEnvVars;\n+    }\n+\n+    private List<String> variablesToRetain() {\n+        List<String> vars = new ArrayList<>(convertStringToList(this.variables));\n+        if (isRetainCharacteristicEnvVars()) {\n+            // TODO Make the 'HUDSON_COOKIE' variable less special so we can remove it.\n+            vars.addAll(Arrays.asList(\"jenkins_server_cookie\", \"hudson_server_cookie\", \"job_name\", \"job_base_name\", \"build_number\", \"build_id\", \"build_tag\"));\n+        }\n+        return vars;\n+    }\n+\n+    @Override\n+    public void filter(@NonNull EnvVars envVars, @NonNull EnvVarsFilterRuleContext context) {\n+        Map<String, String> systemEnvVars = EnvVars.masterEnvVars;\n+\n+        final List<String> variablesRemoved = new ArrayList<>();\n+        final List<String> variablesReset = new ArrayList<>();\n+        final List<String> variables = variablesToRetain();\n+        for (Iterator<Map.Entry<String, String>> iterator = envVars.entrySet().iterator(); iterator.hasNext(); ) {\n+            Map.Entry<String, String> entry = iterator.next();\n+            String variableName = entry.getKey();\n+            String variableValue = entry.getValue();\n+\n+            if (!variables.contains(variableName.toLowerCase(Locale.ENGLISH))) {\n+                // systemEnvVars's keys are case insensitive\n+                String systemValue = systemEnvVars.get(variableName);\n+\n+                if (systemValue == null) {\n+                    variablesRemoved.add(variableName);\n+                    iterator.remove();\n+                } else {\n+                    switch (processVariablesHandling) {\n+                        case RESET:\n+                            if (!systemValue.equals(variableValue)) {\n+                                variablesReset.add(variableName);\n+                            }\n+                            break;\n+                        case REMOVE:\n+                            variablesRemoved.add(variableName);\n+                            iterator.remove();\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (!variablesRemoved.isEmpty()) {\n+            context.getTaskListener().getLogger().println(Messages.RetainVariablesLocalRule_RemovalMessage(getDescriptor().getDisplayName(), StringUtils.join(variablesRemoved.toArray(), \", \")));\n+        }\n+        if (!variablesReset.isEmpty()) {\n+            // reset the variables using the initial value from System\n+            variablesReset.forEach(variableName -> envVars.put(variableName, systemEnvVars.get(variableName)));\n+            context.getTaskListener().getLogger().println(Messages.RetainVariablesLocalRule_ResetMessage(getDescriptor().getDisplayName(), StringUtils.join(variablesReset.toArray(), \", \")));\n+        }\n+    }\n+\n+    public ProcessVariablesHandling getProcessVariablesHandling() {\n+        return processVariablesHandling;\n+    }\n+\n+    @DataBoundSetter\n+    public void setProcessVariablesHandling(ProcessVariablesHandling processVariablesHandling) {\n+        this.processVariablesHandling = processVariablesHandling;\n+    }\n+\n+    // the ordinal is used to sort the rules in term of execution, the smaller value first\n+    // and take care of the fact that local rules are always applied before global ones\n+    @Extension(ordinal = DescriptorImpl.ORDER)\n+    @Symbol(\"retainOnlyVariables\")\n+    public static final class DescriptorImpl extends EnvVarsFilterLocalRuleDescriptor {\n+        public static final int ORDER = 1000;\n+\n+        public DescriptorImpl() {\n+            super();\n+            load();\n+        }\n+\n+        @Restricted(NoExternalUse.class)\n+        public FormValidation doCheckRetainCharacteristicEnvVars(@QueryParameter boolean value) {\n+            if (!value) {\n+                return FormValidation.warning(Messages.RetainVariablesLocalRule_CharacteristicEnvVarsFormValidationWarning());\n+            }\n+            return FormValidation.ok(Messages.RetainVariablesLocalRule_CharacteristicEnvVarsFormValidationOK());\n+        }\n+\n+        @Override\n+        public @NonNull String getDisplayName() {\n+            return Messages.RetainVariablesLocalRule_DisplayName();\n+        }\n+\n+        @Override\n+        public boolean isApplicable(@NonNull Class<? extends EnvVarsFilterableBuilder> builderClass) {\n+            return true;\n+        }\n+    }\n+\n+    public enum ProcessVariablesHandling {\n+        RESET(Messages._RetainVariablesLocalRule_RESET_DisplayName()),\n+        REMOVE(Messages._RetainVariablesLocalRule_REMOVE_DisplayName());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxNDYyMQ==", "bodyText": "I'm going to let others with more UI expertise weigh in here, but I'm finding the layout a little weird. The variablesLabel has a fair bit of text and then there is also the additional help text. They variables label is wordier than I would expect. It's not clear why some of the text goes in the title to be always displayed and some gets separated out to the additional help.\nThe same thing also happens for the retainCharacteristicEnvVarsLabel, but in that case there is a bit of content duplication between the two different UI documentation areas.", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r428214621", "createdAt": "2020-05-20T18:18:10Z", "author": {"login": "jeffret-b"}, "path": "core/src/main/resources/jenkins/tasks/filters/impl/RetainVariablesLocalRule/config.jelly", "diffHunk": "@@ -0,0 +1,39 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+The MIT License\n+\n+Copyright (c) 2020, CloudBees, Inc.\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in\n+all copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+THE SOFTWARE.\n+-->\n+<?jelly escape-by-default='true'?>\n+<j:jelly xmlns:j=\"jelly:core\" xmlns:f=\"/lib/form\">\n+    <f:entry field=\"variables\" title=\"${%variablesLabel}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjM0NDk5", "url": "https://github.com/jenkinsci/jenkins/pull/4683#pullrequestreview-440234499", "createdAt": "2020-06-30T17:25:29Z", "commit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzoyNToyOVrOGrG9jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzoyNToyOVrOGrG9jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg1NjAxMg==", "bodyText": "This url appears to be 404", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r447856012", "createdAt": "2020-06-30T17:25:29Z", "author": {"login": "jsoref"}, "path": "core/src/main/resources/jenkins/tasks/filters/impl/RetainVariablesLocalRule/help-retainCharacteristicEnvVars.html", "diffHunk": "@@ -0,0 +1,5 @@\n+<p>\n+    When checked, <em>characteristic environment variables</em> will be retained in addition to the variables listed above.\n+    These environment variables are job- and build-specific, defined by Jenkins, and are used to identify and kill processes started by this build step.\n+    <a href=\"https://jenkins.io/redirect/spawning-processes/\" target=\"_blank\">See the documentation for more details on spawning processes.</a>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjU0NTM0", "url": "https://github.com/jenkinsci/jenkins/pull/4683#pullrequestreview-440254534", "createdAt": "2020-06-30T17:52:18Z", "commit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo1MjoxOFrOGrH_KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODowOTowNFrOGrIlqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3MjgwOQ==", "bodyText": "While the Serializable is a good hint, I think it would be good to include a small comment to the point.", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r447872809", "createdAt": "2020-06-30T17:52:18Z", "author": {"login": "jeffret-b"}, "path": "core/src/main/java/jenkins/tasks/filters/EnvVarsFilterRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.tasks.filters;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.EnvVars;\n+import hudson.Extension;\n+import hudson.model.Describable;\n+import hudson.model.Descriptor;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * The order of execution of the rules is determined by first their type (local before global)\n+ * and then their {@link Extension#ordinal()}, higher ordinal first.\n+ */\n+@Restricted(Beta.class)\n+public interface EnvVarsFilterRule extends Serializable {\n+    /**\n+     * In case the filter detects something that must stop the build, it must throw a {@link EnvVarsFilterException}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0ODM3NQ=="}, "originalCommit": {"oid": "fccc734d971e2e8f9b846036aaa84af63d06d415"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3MzExMg==", "bodyText": "This is still needed.", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r447873112", "createdAt": "2020-06-30T17:52:50Z", "author": {"login": "jeffret-b"}, "path": "core/src/main/java/jenkins/tasks/filters/EnvVarsFilterRuleWrapper.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.tasks.filters;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.EnvVars;\n+import hudson.Launcher;\n+import hudson.model.Run;\n+import hudson.model.TaskListener;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class that provide the list of rules (local + global) for a given builder.\n+ *\n+ * @since TODO\n+ */\n+@Restricted(NoExternalUse.class)\n+public class EnvVarsFilterRuleWrapper implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NzYzMQ=="}, "originalCommit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3Nzc5OA==", "bodyText": "As the term \"characteristic\" isn't widely used or known it would be helpful to clarify it a bit. I suggest pulling out these strings into a static field with a clarifying name and maybe a comment.", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r447877798", "createdAt": "2020-06-30T18:00:31Z", "author": {"login": "jeffret-b"}, "path": "core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.tasks.filters.impl;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.EnvVars;\n+import hudson.Extension;\n+import hudson.util.FormValidation;\n+import jenkins.tasks.filters.EnvVarsFilterRuleContext;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRule;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRuleDescriptor;\n+import jenkins.tasks.filters.EnvVarsFilterableBuilder;\n+import org.apache.commons.lang.StringUtils;\n+import org.jenkinsci.Symbol;\n+import org.jvnet.localizer.Localizable;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.kohsuke.stapler.DataBoundConstructor;\n+import org.kohsuke.stapler.DataBoundSetter;\n+import org.kohsuke.stapler.QueryParameter;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Local rule that removes all the non-retained variables for that step.\n+ *\n+ * @since TODO\n+ */\n+@Restricted(NoExternalUse.class)\n+public class RetainVariablesLocalRule implements EnvVarsFilterLocalRule {\n+\n+    /**\n+     * List of lowercase names of variable that will be retained from removal\n+     */\n+    private String variables = \"\";\n+    private boolean retainCharacteristicEnvVars = true;\n+    private ProcessVariablesHandling processVariablesHandling = ProcessVariablesHandling.RESET;\n+\n+    @DataBoundConstructor\n+    public RetainVariablesLocalRule() {\n+    }\n+\n+    @DataBoundSetter\n+    public void setVariables(@NonNull String variables) {\n+        this.variables = variables;\n+    }\n+\n+    private static List<String> convertStringToList(@NonNull String variablesCommaSeparated) {\n+        String[] variablesArray = variablesCommaSeparated.split(\"\\\\s+\");\n+        List<String> variables = new ArrayList<>();\n+        for (String nameFragment : variablesArray) {\n+            if (StringUtils.isNotBlank(nameFragment)) {\n+                variables.add(nameFragment.toLowerCase(Locale.ENGLISH));\n+            }\n+        }\n+\n+        Collections.sort(variables); // TODO do we really want to sort this?\n+        return variables;\n+    }\n+\n+    // for jelly view\n+    @Restricted(NoExternalUse.class)\n+    public @NonNull String getVariables() {\n+        return variables;\n+    }\n+\n+    @DataBoundSetter\n+    public void setRetainCharacteristicEnvVars(boolean retainCharacteristicEnvVars) {\n+        this.retainCharacteristicEnvVars = retainCharacteristicEnvVars;\n+    }\n+\n+    public boolean isRetainCharacteristicEnvVars() {\n+        return retainCharacteristicEnvVars;\n+    }\n+\n+    private List<String> variablesToRetain() {\n+        List<String> vars = new ArrayList<>(convertStringToList(this.variables));\n+        if (isRetainCharacteristicEnvVars()) {\n+            // TODO Make the 'HUDSON_COOKIE' variable less special so we can remove it.\n+            vars.addAll(Arrays.asList(\"jenkins_server_cookie\", \"hudson_server_cookie\", \"job_name\", \"job_base_name\", \"build_number\", \"build_id\", \"build_tag\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3ODM1Ng==", "bodyText": "Could you clarify this for me? Maybe I'm just misreading something.", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r447878356", "createdAt": "2020-06-30T18:01:26Z", "author": {"login": "jeffret-b"}, "path": "core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.tasks.filters.impl;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.EnvVars;\n+import hudson.Extension;\n+import hudson.util.FormValidation;\n+import jenkins.tasks.filters.EnvVarsFilterRuleContext;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRule;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRuleDescriptor;\n+import jenkins.tasks.filters.EnvVarsFilterableBuilder;\n+import org.apache.commons.lang.StringUtils;\n+import org.jenkinsci.Symbol;\n+import org.jvnet.localizer.Localizable;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.kohsuke.stapler.DataBoundConstructor;\n+import org.kohsuke.stapler.DataBoundSetter;\n+import org.kohsuke.stapler.QueryParameter;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Local rule that removes all the non-retained variables for that step.\n+ *\n+ * @since TODO\n+ */\n+@Restricted(NoExternalUse.class)\n+public class RetainVariablesLocalRule implements EnvVarsFilterLocalRule {\n+\n+    /**\n+     * List of lowercase names of variable that will be retained from removal\n+     */\n+    private String variables = \"\";\n+    private boolean retainCharacteristicEnvVars = true;\n+    private ProcessVariablesHandling processVariablesHandling = ProcessVariablesHandling.RESET;\n+\n+    @DataBoundConstructor\n+    public RetainVariablesLocalRule() {\n+    }\n+\n+    @DataBoundSetter\n+    public void setVariables(@NonNull String variables) {\n+        this.variables = variables;\n+    }\n+\n+    private static List<String> convertStringToList(@NonNull String variablesCommaSeparated) {\n+        String[] variablesArray = variablesCommaSeparated.split(\"\\\\s+\");\n+        List<String> variables = new ArrayList<>();\n+        for (String nameFragment : variablesArray) {\n+            if (StringUtils.isNotBlank(nameFragment)) {\n+                variables.add(nameFragment.toLowerCase(Locale.ENGLISH));\n+            }\n+        }\n+\n+        Collections.sort(variables); // TODO do we really want to sort this?\n+        return variables;\n+    }\n+\n+    // for jelly view\n+    @Restricted(NoExternalUse.class)\n+    public @NonNull String getVariables() {\n+        return variables;\n+    }\n+\n+    @DataBoundSetter\n+    public void setRetainCharacteristicEnvVars(boolean retainCharacteristicEnvVars) {\n+        this.retainCharacteristicEnvVars = retainCharacteristicEnvVars;\n+    }\n+\n+    public boolean isRetainCharacteristicEnvVars() {\n+        return retainCharacteristicEnvVars;\n+    }\n+\n+    private List<String> variablesToRetain() {\n+        List<String> vars = new ArrayList<>(convertStringToList(this.variables));\n+        if (isRetainCharacteristicEnvVars()) {\n+            // TODO Make the 'HUDSON_COOKIE' variable less special so we can remove it.\n+            vars.addAll(Arrays.asList(\"jenkins_server_cookie\", \"hudson_server_cookie\", \"job_name\", \"job_base_name\", \"build_number\", \"build_id\", \"build_tag\"));\n+        }\n+        return vars;\n+    }\n+\n+    @Override\n+    public void filter(@NonNull EnvVars envVars, @NonNull EnvVarsFilterRuleContext context) {\n+        Map<String, String> systemEnvVars = EnvVars.masterEnvVars;\n+\n+        final List<String> variablesRemoved = new ArrayList<>();\n+        final List<String> variablesReset = new ArrayList<>();\n+        final List<String> variables = variablesToRetain();\n+        for (Iterator<Map.Entry<String, String>> iterator = envVars.entrySet().iterator(); iterator.hasNext(); ) {\n+            Map.Entry<String, String> entry = iterator.next();\n+            String variableName = entry.getKey();\n+            String variableValue = entry.getValue();\n+\n+            if (!variables.contains(variableName.toLowerCase(Locale.ENGLISH))) {\n+                // systemEnvVars's keys are case insensitive\n+                String systemValue = systemEnvVars.get(variableName);\n+\n+                if (systemValue == null) {\n+                    variablesRemoved.add(variableName);\n+                    iterator.remove();\n+                } else {\n+                    switch (processVariablesHandling) {\n+                        case RESET:\n+                            if (!systemValue.equals(variableValue)) {\n+                                variablesReset.add(variableName);\n+                            }\n+                            break;\n+                        case REMOVE:\n+                            variablesRemoved.add(variableName);\n+                            iterator.remove();\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (!variablesRemoved.isEmpty()) {\n+            context.getTaskListener().getLogger().println(Messages.RetainVariablesLocalRule_RemovalMessage(getDescriptor().getDisplayName(), StringUtils.join(variablesRemoved.toArray(), \", \")));\n+        }\n+        if (!variablesReset.isEmpty()) {\n+            // reset the variables using the initial value from System\n+            variablesReset.forEach(variableName -> envVars.put(variableName, systemEnvVars.get(variableName)));\n+            context.getTaskListener().getLogger().println(Messages.RetainVariablesLocalRule_ResetMessage(getDescriptor().getDisplayName(), StringUtils.join(variablesReset.toArray(), \", \")));\n+        }\n+    }\n+\n+    public ProcessVariablesHandling getProcessVariablesHandling() {\n+        return processVariablesHandling;\n+    }\n+\n+    @DataBoundSetter\n+    public void setProcessVariablesHandling(ProcessVariablesHandling processVariablesHandling) {\n+        this.processVariablesHandling = processVariablesHandling;\n+    }\n+\n+    // the ordinal is used to sort the rules in term of execution, the smaller value first", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5NjQ0Ng=="}, "originalCommit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MDQ4NQ==", "bodyText": "It's not clear to me that it does, but I don't have my test environment handy currently to double-check. Daniel can clarify.", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r447880485", "createdAt": "2020-06-30T18:05:08Z", "author": {"login": "jeffret-b"}, "path": "core/src/main/resources/jenkins/tasks/filters/EnvVarsFilterGlobalConfiguration/config.jelly", "diffHunk": "@@ -0,0 +1,45 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+The MIT License\n+\n+Copyright (c) 2020, CloudBees, Inc.\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in\n+all copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+THE SOFTWARE.\n+-->\n+<?jelly escape-by-default='true'?>\n+<j:jelly xmlns:j=\"jelly:core\" xmlns:f=\"/lib/form\">\n+    <j:if test=\"${instance.allGlobalRules.size() gt 0}\">\n+        <!-- hide this configuration when there are no descriptors -->\n+        <f:section title=\"${%jobEnvironmentVariableFilters}\">\n+            <j:choose>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0MjQ0Mw=="}, "originalCommit": {"oid": "fccc734d971e2e8f9b846036aaa84af63d06d415"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MTE3Ng==", "bodyText": "@daniel-beck and @fqueiruga is this one resolved now?", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r447881176", "createdAt": "2020-06-30T18:06:21Z", "author": {"login": "jeffret-b"}, "path": "core/src/main/resources/jenkins/tasks/filters/impl/RetainVariablesLocalRule/config.jelly", "diffHunk": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+The MIT License\n+\n+Copyright (c) 2020, CloudBees, Inc.\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in\n+all copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+THE SOFTWARE.\n+-->\n+<?jelly escape-by-default='true'?>\n+<j:jelly xmlns:j=\"jelly:core\" xmlns:f=\"/lib/form\">\n+    <f:entry field=\"variables\" title=\"${%variablesLabel}\"\n+             description=\"${%variablesDescription}\" >\n+        <f:textbox value=\"${instance.variables}\" />\n+    </f:entry>\n+    <f:entry field=\"retainCharacteristicEnvVars\" title=\"${%retainCharacteristicEnvVarsLabel}\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI4ODM3Ng=="}, "originalCommit": {"oid": "fccc734d971e2e8f9b846036aaa84af63d06d415"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MjM1Ng==", "bodyText": "While it's not common, it is used. I find that the following sentence does a sufficiently good job of clarifying what the term means.\nI propose resolving this conversation unless someone else has additional comments.", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r447882356", "createdAt": "2020-06-30T18:08:29Z", "author": {"login": "jeffret-b"}, "path": "core/src/main/resources/jenkins/tasks/filters/impl/RetainVariablesLocalRule/help-retainCharacteristicEnvVars.html", "diffHunk": "@@ -0,0 +1,5 @@\n+<p>\n+    When checked, <em>characteristic environment variables</em> will be retained in addition to the variables listed above.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1OTkyNg=="}, "originalCommit": {"oid": "fccc734d971e2e8f9b846036aaa84af63d06d415"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MjY2NQ==", "bodyText": "Looks like we can also resolve this one.", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r447882665", "createdAt": "2020-06-30T18:09:04Z", "author": {"login": "jeffret-b"}, "path": "core/src/main/resources/lib/form/hetero-list.jelly", "diffHunk": "@@ -112,11 +116,11 @@ THE SOFTWARE.\n   <j:set var=\"targetType\" value=\"${attrs.targetType?:it.class}\"/>\n   <div class=\"hetero-list-container ${hasHeader?'with-drag-drop':''} ${attrs.oneEach?'one-each':''} ${attrs.honorOrder?'honor-order':''}\">\n     <!-- display existing items -->\n-    <j:forEach var=\"i\" items=\"${attrs.items}\">\n+    <j:forEach var=\"i\" items=\"${attrs.items}\"><!-- TODO consider customizedFields: how to distinguish default items from user-configured items? -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzMjY1NQ=="}, "originalCommit": {"oid": "fccc734d971e2e8f9b846036aaa84af63d06d415"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjY5MDc0", "url": "https://github.com/jenkinsci/jenkins/pull/4683#pullrequestreview-440269074", "createdAt": "2020-06-30T18:12:17Z", "commit": {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29aecd2903da385f7fe431cfed00833a62233884", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/29aecd2903da385f7fe431cfed00833a62233884", "committedDate": "2020-07-16T07:33:54Z", "message": "Merge branch 'master' into environment-filters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NjgyNTIw", "url": "https://github.com/jenkinsci/jenkins/pull/4683#pullrequestreview-449682520", "createdAt": "2020-07-16T09:35:30Z", "commit": {"oid": "29aecd2903da385f7fe431cfed00833a62233884"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69d8c0956e18c81cad077b49ca5c453d18e36690", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/69d8c0956e18c81cad077b49ca5c453d18e36690", "committedDate": "2020-07-16T09:40:58Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMjU4NDk4", "url": "https://github.com/jenkinsci/jenkins/pull/4683#pullrequestreview-450258498", "createdAt": "2020-07-16T22:27:09Z", "commit": {"oid": "69d8c0956e18c81cad077b49ca5c453d18e36690"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1106, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}