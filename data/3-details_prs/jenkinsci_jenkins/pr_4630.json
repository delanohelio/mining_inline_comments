{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NjA3NzM1", "number": 4630, "title": "[JENKINS-61808] Always transmit f:password values as Secret", "bodyText": "See JENKINS-61808.\nThe <f:password/> form control has a magic behavior, provided by Functions#getPasswordValue and a converter in Secret.java:\nIf it's backed by a Secret, it will use the encrypted form of the password (or token, key, etc.) as value, rather than the plain text.\nAdditionally, if it's backed by a Secret, an Item is in the URL hierarchy, and the user lacks Item/Configure, it will only receive ****** to be rendered, instead of a real value.\nThe latter is less important since Jenkins 2.223, which introduced read-only forms for users with Item/ExtendedRead, and a representation of f:password that doesn't even attempt to render a real value.\nUnfortunately, many plugin maintainers get this wrong and use String-based for values only shown using <f:password/>. This affects both plugins who get storage right (using Secret), and those that get that part wrong, too.\nSo what does this do?\n\nWhen rendering an <f:password/>, even if it's not backed by a Secret, we will convert the value to be shown to a Secret and render its encrypted form in most cases.\nAdditionally, we also allow non-Secret backed <f:password/> to be ****** out when the user lacks a relevant Item/Configure permission.\nWhen processing form submissions, a new Converter will convert any value that's an encrypted Secret to its decrypted String representation.\n\nIn addition to the above, we also add a new warning to the log whenever a <f:password/> is backed by a string, and attempt to identify which view it's coming from (which is surprisingly annoying to do). This PR does not mean that plugins having String APIs wouldn't be a bug. This warning will appear when running jetty:run and hpi:run, but not in production use. It can also serve as a useful reminder that the underlying field should be a Secret.\nSince the APIs for password parameters were using the String type, they have been adapted in this PR.\nEscape hatches\nThis PR introduce more magic, so we have two different escape hatches in case things go sideways:\n\nhudson.util.Secret.AUTO_ENCRYPT_PASSWORD_CONTROL is true by default and controls whether the basic new behavior is active. This must be set on startup, as we don't even want the converter to register if something goes wrong.\nhudson.util.Secret.BLANK_NONSECRET_PASSWORD_FIELDS_WITHOUT_ITEM_CONFIGURE is true by default and controls whether the ***** masking that existed for Secret backed f:password fields is extended to those without a Secret.\n\nLimitations\nThis introduces a slight regression with String-based \"setter\" APIs around a Secret field: A round-trip will now result in changes to the persisted value, as Jenkins transparently decrypts any submitted value. IOW, it now behaves as though the user always entered the same value manually.\nIn development mode, Jenkins will log warnings when it encounters secrets not backed by a Secret, including fields showing a fixed String value that's not protection-worthy. This should rarely occur legitimately. It would occur on \"Build With Parameters\" with password parameters, which use a fixed <DEFAULT> placeholder, if we didn't specifically support that in getPasswordValue, and it happened in the \"Parameters\" action of builds when not showing a password value, so I replaced the (inappropriate) use of f:password there.\nIf the storage of credentials is wrong, rather than just the Java API exposing values to form fields, then users can still obtain the plain-text stored credential using GET config.xml. But plain-text storage of credentials is a problem independent of the UI and remote API to begin with and would need to be addressed anyway.\nThis PR removes a protection that would make (some) unit tests fail:\n\n  \n    \n      jenkins/core/src/main/java/hudson/Functions.java\n    \n    \n        Lines 2027 to 2029\n      in\n      449c5ac\n    \n    \n    \n    \n\n        \n          \n           if (getIsUnitTest() && !o.equals(PasswordParameterDefinition.DEFAULT_VALUE)) { \n        \n\n        \n          \n               throw new SecurityException(\"attempted to render plaintext \u2018\" + o + \"\u2019 in password field; use a getter of type Secret instead\"); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nWe can probably restore that if desired, and set a flag to ignore that for these specific tests, but TBH I'm not sure how much this helps anyway.\nProposed changelog entries\n\nSecurity hardening: Always round-trip password form control values in an encrypted form, even if not backed by an encrypted Secret field. In case of problems, this can be disabled by setting the system property hudson.util.Secret.AUTO_ENCRYPT_PASSWORD_CONTROL to false on startup.\nSecurity hardening: Always use a placeholder value for password form control values in item related configuration forms when the user is missing Item/Configure permission, even if not backed by an encrypted Secret field. In case of problems, this can be disabled by setting the system property hudson.util.Secret.BLANK_NONSECRET_PASSWORD_FIELDS_WITHOUT_ITEM_CONFIGURE to false.\n\nOr we can limit the details we expose to users here and just go with\n\nSecurity hardening related to password form fields.\n\nIf there are real problems, we can provide the system properties in regression reports.\nProposed upgrade guidelines\nN/A\nSubmitter checklist\n\n JIRA issue is well described\n Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). Examples\n\nFill-in the Proposed changelog entries section only if there are breaking changes or other changes which may require extra steps from users during the upgrade\n\n\n Appropriate autotests or explanation to why this change has no tests\n[n/a] For dependency updates: links to external changelogs and, if possible, full diffs\n\n\nDesired reviewers\n@mention\n\nMaintainer checklist\nBefore the changes are marked as ready-for-merge:\n\n There are at least 2 approvals for the pull request and no outstanding requests for change\n Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n Changelog entries in the PR title and/or Proposed changelog entries are correct\n Proper changelog labels are set so that the changelog can be generated automatically\n If the change needs additional upgrade steps from users, upgrade-guide-needed label is set and there is a Proposed upgrade guidelines section in the PR title. (example)\n If it would make sense to backport the change to LTS, a JIRA issue should exist and be labeled as lts-candidate", "createdAt": "2020-04-06T12:22:52Z", "url": "https://github.com/jenkinsci/jenkins/pull/4630", "merged": true, "mergeCommit": {"oid": "8a9a1b2f7bf72c305597ed5e7121b80f58528c5c"}, "closed": true, "closedAt": "2020-05-10T09:17:52Z", "author": {"login": "daniel-beck"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcU66K-AH2gAyMzk5NjA3NzM1OmRiNTdmNjBhYjljYzIwZTlhNDNkMTFmNDVjZWVkZTRhMjRlZmIxNmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcf3gCBAFqTQwODcyNTExMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "db57f60ab9cc20e9a43d11f45ceede4a24efb16a", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/db57f60ab9cc20e9a43d11f45ceede4a24efb16a", "committedDate": "2020-04-06T09:02:36Z", "message": "[JENKINS-61808] Always transmit f:password values as Secret"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13d242af0472e99757770846dc9a0022df40ada2", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/13d242af0472e99757770846dc9a0022df40ada2", "committedDate": "2020-04-06T12:32:31Z", "message": "Merge branch 'master' into JENKINS-61808"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDU4NjM0", "url": "https://github.com/jenkinsci/jenkins/pull/4630#pullrequestreview-389458634", "createdAt": "2020-04-07T20:18:30Z", "commit": {"oid": "13d242af0472e99757770846dc9a0022df40ada2"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoyMTozOFrOGCUmvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoyMTozOFrOGCUmvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NzkzMw==", "bodyText": "This page intentionally left blank", "url": "https://github.com/jenkinsci/jenkins/pull/4630#discussion_r405087933", "createdAt": "2020-04-07T20:21:38Z", "author": {"login": "jvz"}, "path": "core/src/main/resources/hudson/model/PasswordParameterValue/value.properties", "diffHunk": "@@ -0,0 +1 @@\n+hidden=(password value not shown)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13d242af0472e99757770846dc9a0022df40ada2"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODM0MjQy", "url": "https://github.com/jenkinsci/jenkins/pull/4630#pullrequestreview-403834242", "createdAt": "2020-04-30T19:58:18Z", "commit": {"oid": "13d242af0472e99757770846dc9a0022df40ada2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTo1ODoxOVrOGO4OGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTo1ODoxOVrOGO4OGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NDM2Mg==", "bodyText": "shouldn't this redirect be pointing here https://www.jenkins.io/doc/developer/security/secrets/ instead of the wiki?", "url": "https://github.com/jenkinsci/jenkins/pull/4630#discussion_r418254362", "createdAt": "2020-04-30T19:58:19Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -2013,21 +2014,66 @@ public static String generateConsoleAnnotationScriptAndStylesheet() {\n      * Used by {@code <f:password/>} so that we send an encrypted value to the client.\n      */\n     public String getPasswordValue(Object o) {\n-        if (o==null)    return null;\n-        if (o instanceof Secret) {\n-            StaplerRequest req = Stapler.getCurrentRequest();\n+        if (o == null) {\n+            return null;\n+        }\n+\n+        /*\n+         Return plain value if it's the default value for PasswordParameterDefinition.\n+         This needs to work even when the user doesn't have CONFIGURE permission\n+         */\n+        if (o.equals(PasswordParameterDefinition.DEFAULT_VALUE)) {\n+            return o.toString();\n+        }\n+\n+        /* Mask from Extended Read */\n+        StaplerRequest req = Stapler.getCurrentRequest();\n+        if (o instanceof Secret || Secret.BLANK_NONSECRET_PASSWORD_FIELDS_WITHOUT_ITEM_CONFIGURE) {\n             if (req != null) {\n                 Item item = req.findAncestorObject(Item.class);\n                 if (item != null && !item.hasPermission(Item.CONFIGURE)) {\n                     return \"********\";\n                 }\n             }\n+        }\n+\n+        /* Return encrypted value if it's a Secret */\n+        if (o instanceof Secret) {\n             return ((Secret) o).getEncryptedValue();\n         }\n-        if (getIsUnitTest() && !o.equals(PasswordParameterDefinition.DEFAULT_VALUE)) {\n-            throw new SecurityException(\"attempted to render plaintext \u2018\" + o + \"\u2019 in password field; use a getter of type Secret instead\");\n+\n+        /* Log a warning if we're in development mode (core or plugin): There's an f:password backed by a non-Secret */\n+        if (req != null && (Boolean.getBoolean(\"hudson.hpi.run\") || Boolean.getBoolean(\"hudson.Main.development\"))) {\n+            LOGGER.log(Level.WARNING, () -> \"<f:password/> form control in \" + getJellyViewsInformationForCurrentRequest() +\n+                    \" is not backed by hudson.util.Secret. Learn more: https://jenkins.io/redirect/hudson.util.Secret\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13d242af0472e99757770846dc9a0022df40ada2"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODQwODI5", "url": "https://github.com/jenkinsci/jenkins/pull/4630#pullrequestreview-403840829", "createdAt": "2020-04-30T20:08:32Z", "commit": {"oid": "13d242af0472e99757770846dc9a0022df40ada2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NDg5NzEx", "url": "https://github.com/jenkinsci/jenkins/pull/4630#pullrequestreview-405489711", "createdAt": "2020-05-05T04:46:20Z", "commit": {"oid": "13d242af0472e99757770846dc9a0022df40ada2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzI1MTEz", "url": "https://github.com/jenkinsci/jenkins/pull/4630#pullrequestreview-408725113", "createdAt": "2020-05-10T09:17:30Z", "commit": {"oid": "13d242af0472e99757770846dc9a0022df40ada2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1403, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}