{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMzQwMTkw", "number": 4653, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo0MTo0NlrODxy4eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo0Mjo1N1rODxy5-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTQwNDc0OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/hudson/util/FormValidationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo0MTo0NlrOGFeGQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo0MTo0NlrOGFeGQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4OTE4NQ==", "bodyText": "I believe you will receive a more clear assertion failure message if you let Hamcrest compare the objects and assert use not to check they are not equal.  When actual.equals() is used, it hides information that Hamcrest can use to make the assertion failure message clearer.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(actual.equals(FormValidation.error(failMessage)), is(false));\n          \n          \n            \n                    assertThat(actual, not(is(FormValidation.error(failMessage))));", "url": "https://github.com/jenkinsci/jenkins/pull/4653#discussion_r408389185", "createdAt": "2020-04-14T19:41:46Z", "author": {"login": "MarkEWaite"}, "path": "test/src/test/java/hudson/util/FormValidationTest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package hudson.util;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.jvnet.hudson.test.Issue;\n+import org.jvnet.hudson.test.JenkinsRule;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+public class FormValidationTest {\n+\n+    @Rule\n+    public JenkinsRule j = new JenkinsRule();\n+\n+    @Issue(\"JENKINS-61711\")\n+    @Test\n+    public void testValidateExecutableWithFix() {\n+        // Global Tool Configuration is able to find git executable in system environment at PATH.\n+        FormValidation actual = FormValidation.validateExecutable(\"git\");\n+        assertThat(actual, is(FormValidation.ok()));\n+    }\n+\n+    @Issue(\"JENKINS-61711\")\n+    @Test\n+    public void testValidateExecutableWithoutFix() {\n+        // Without JENKINS-61711 fix, Git installations under Global Tool Configuration is not able to find git\n+        // executable at system PATH despite git exec existing at the path.\n+        FormValidation actual = FormValidation.validateExecutable(\"git\");\n+        String failMessage = \"There's no such executable git in PATH:\";\n+        assertThat(actual.equals(FormValidation.error(failMessage)), is(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caddb62a85b66b5d1ab397e7bb26b75f949d9f13"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTQwODU4OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/hudson/util/FormValidationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo0Mjo1N1rOGFeI0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDo1ODo1OVrOGFgrLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4OTg0Mw==", "bodyText": "Can you confirm that the test requires a JenkinsRule?  If this is not included, does test execution fail or generate null pointer exceptions?", "url": "https://github.com/jenkinsci/jenkins/pull/4653#discussion_r408389843", "createdAt": "2020-04-14T19:42:57Z", "author": {"login": "MarkEWaite"}, "path": "test/src/test/java/hudson/util/FormValidationTest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package hudson.util;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.jvnet.hudson.test.Issue;\n+import org.jvnet.hudson.test.JenkinsRule;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+public class FormValidationTest {\n+\n+    @Rule\n+    public JenkinsRule j = new JenkinsRule();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caddb62a85b66b5d1ab397e7bb26b75f949d9f13"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzMTQwNw==", "bodyText": "Yes, the test requires a JenkinsRule because the test checks admin permissions for the Jenkins instance implicitly.", "url": "https://github.com/jenkinsci/jenkins/pull/4653#discussion_r408431407", "createdAt": "2020-04-14T20:58:59Z", "author": {"login": "rishabhBudhouliya"}, "path": "test/src/test/java/hudson/util/FormValidationTest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package hudson.util;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.jvnet.hudson.test.Issue;\n+import org.jvnet.hudson.test.JenkinsRule;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+public class FormValidationTest {\n+\n+    @Rule\n+    public JenkinsRule j = new JenkinsRule();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4OTg0Mw=="}, "originalCommit": {"oid": "caddb62a85b66b5d1ab397e7bb26b75f949d9f13"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 465, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}