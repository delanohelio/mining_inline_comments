{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NjQwMzI2", "number": 4517, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzowNDowNlrODjEVOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOToyMjowMFrODlWGhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDk3NzIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/AbstractBuild.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzowNDowNlrOFuqrnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjozMTo0MlrOFzJZ9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3ODEwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private class TearDownCheckEnvironment extends Environment {\n          \n          \n            \n                    private static class TearDownCheckEnvironment extends Environment {", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r384478108", "createdAt": "2020-02-26T13:04:06Z", "author": {"login": "res0nance"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -518,6 +559,20 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             return result;\n         }\n \n+        /**\n+         * An {@link Environment} which does nothing, but change state when it gets torn down. Used in\n+         * {@link AbstractBuildExecution#run(BuildListener)} to detect whether environments have yet to be torn down,\n+         * or if it has been done already (in the {@link AbstractBuildExecution#doRun(BuildListener)} implementation).\n+         */\n+        private class TearDownCheckEnvironment extends Environment {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7a024ec2a5d17c3814141e88edf0edc33af7af5"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxNzQ4NA==", "bodyText": "Actually, now I remember... It's not static because it is nested in a non-static nested class (AbstractBuild.AbstractBuildExecution). Do you think I should move it?", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r384517484", "createdAt": "2020-02-26T14:15:07Z", "author": {"login": "thomasgl-orange"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -518,6 +559,20 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             return result;\n         }\n \n+        /**\n+         * An {@link Environment} which does nothing, but change state when it gets torn down. Used in\n+         * {@link AbstractBuildExecution#run(BuildListener)} to detect whether environments have yet to be torn down,\n+         * or if it has been done already (in the {@link AbstractBuildExecution#doRun(BuildListener)} implementation).\n+         */\n+        private class TearDownCheckEnvironment extends Environment {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3ODEwOA=="}, "originalCommit": {"oid": "d7a024ec2a5d17c3814141e88edf0edc33af7af5"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2ODQ3MA==", "bodyText": "Would be better to avoid non-static nested classes when possible. Better safe than sorry", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r388168470", "createdAt": "2020-03-05T09:24:32Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -518,6 +559,20 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             return result;\n         }\n \n+        /**\n+         * An {@link Environment} which does nothing, but change state when it gets torn down. Used in\n+         * {@link AbstractBuildExecution#run(BuildListener)} to detect whether environments have yet to be torn down,\n+         * or if it has been done already (in the {@link AbstractBuildExecution#doRun(BuildListener)} implementation).\n+         */\n+        private class TearDownCheckEnvironment extends Environment {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3ODEwOA=="}, "originalCommit": {"oid": "d7a024ec2a5d17c3814141e88edf0edc33af7af5"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NTc5OA==", "bodyText": "Okay,that's 462104a", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r389175798", "createdAt": "2020-03-06T22:31:42Z", "author": {"login": "thomasgl-orange"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -518,6 +559,20 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             return result;\n         }\n \n+        /**\n+         * An {@link Environment} which does nothing, but change state when it gets torn down. Used in\n+         * {@link AbstractBuildExecution#run(BuildListener)} to detect whether environments have yet to be torn down,\n+         * or if it has been done already (in the {@link AbstractBuildExecution#doRun(BuildListener)} implementation).\n+         */\n+        private class TearDownCheckEnvironment extends Environment {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3ODEwOA=="}, "originalCommit": {"oid": "d7a024ec2a5d17c3814141e88edf0edc33af7af5"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDk5NTM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/AbstractBuild.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoxMDoxMVrOFuq3Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoxMDoxMVrOFuq3Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MTAzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        e.printStackTrace(listener.getLogger());\n          \n          \n            \n                                        Functions.printStackTrace(e,listener.getLogger());\n          \n      \n    \n    \n  \n\nCore has something close to this i forgot what it was exactly", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r384481039", "createdAt": "2020-02-26T13:10:11Z", "author": {"login": "res0nance"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))\n+                    return Result.FAILURE;\n \n-            Result result = doRun(listener);\n+                result = doRun(listener);\n+            } finally {\n+                if (!tearDownMarker.tornDown) {\n+                    // looks like environments are not torn down yet, do it now (in reverse order)\n+                    boolean tearDownFailed = false;\n+                    boolean tearDownInterrupted = false;\n+                    for (int i = buildEnvironments.size() - 1; i >= 0; i--) {\n+                        final Environment environment = buildEnvironments.get(i);\n+                        try {\n+                            if (!environment.tearDown(AbstractBuild.this, listener)) {\n+                                tearDownFailed = true;\n+                            }\n+                        } catch (IOException | InterruptedException | RuntimeException e) {\n+                            tearDownFailed = true;\n+                            // exceptions are ignored to give a chance to all environments to tear down\n+                            listener.error(\"Unable to tear down: \" + e.getMessage());\n+                            e.printStackTrace(listener.getLogger());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7a024ec2a5d17c3814141e88edf0edc33af7af5"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTAwMTMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/AbstractBuild.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoxMjowNlrOFuq6zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjo1OTo1MVrOFvkL-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MTk5OA==", "bodyText": "I'm not sure if this is the right approach since being interrupted usually means to exit ASAP", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r384481998", "createdAt": "2020-02-26T13:12:06Z", "author": {"login": "res0nance"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))\n+                    return Result.FAILURE;\n \n-            Result result = doRun(listener);\n+                result = doRun(listener);\n+            } finally {\n+                if (!tearDownMarker.tornDown) {\n+                    // looks like environments are not torn down yet, do it now (in reverse order)\n+                    boolean tearDownFailed = false;\n+                    boolean tearDownInterrupted = false;\n+                    for (int i = buildEnvironments.size() - 1; i >= 0; i--) {\n+                        final Environment environment = buildEnvironments.get(i);\n+                        try {\n+                            if (!environment.tearDown(AbstractBuild.this, listener)) {\n+                                tearDownFailed = true;\n+                            }\n+                        } catch (IOException | InterruptedException | RuntimeException e) {\n+                            tearDownFailed = true;\n+                            // exceptions are ignored to give a chance to all environments to tear down\n+                            listener.error(\"Unable to tear down: \" + e.getMessage());\n+                            e.printStackTrace(listener.getLogger());\n+                            if (e instanceof InterruptedException) {\n+                                // don't forget we've been interrupted\n+                                tearDownInterrupted = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7a024ec2a5d17c3814141e88edf0edc33af7af5"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxNTI1MA==", "bodyText": "I don't have a set opinion on what to do after the tear-down loop in case we've caught an InterruptedException. I've chosen to Thread.currentThread().interrupt(), but maybe we could as well raise a new InterruptedException, or maybe simply set an appropriate build status.\nBut I really think that completing the iteration on remaining environments, even in case of an InterruptedException, is the right thing to do. Leaving temporary files behind, or orphan processes, by not tearing down the remaining environments seems \"wrong\" to me (when it can be avoided). I think of multiple build wrappers (environments) not as a list (although that's how it is implemented), but rather as nested try/finally blocks.\nLet's wait for more reviews before changing this code...", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r384515250", "createdAt": "2020-02-26T14:11:32Z", "author": {"login": "thomasgl-orange"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))\n+                    return Result.FAILURE;\n \n-            Result result = doRun(listener);\n+                result = doRun(listener);\n+            } finally {\n+                if (!tearDownMarker.tornDown) {\n+                    // looks like environments are not torn down yet, do it now (in reverse order)\n+                    boolean tearDownFailed = false;\n+                    boolean tearDownInterrupted = false;\n+                    for (int i = buildEnvironments.size() - 1; i >= 0; i--) {\n+                        final Environment environment = buildEnvironments.get(i);\n+                        try {\n+                            if (!environment.tearDown(AbstractBuild.this, listener)) {\n+                                tearDownFailed = true;\n+                            }\n+                        } catch (IOException | InterruptedException | RuntimeException e) {\n+                            tearDownFailed = true;\n+                            // exceptions are ignored to give a chance to all environments to tear down\n+                            listener.error(\"Unable to tear down: \" + e.getMessage());\n+                            e.printStackTrace(listener.getLogger());\n+                            if (e instanceof InterruptedException) {\n+                                // don't forget we've been interrupted\n+                                tearDownInterrupted = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MTk5OA=="}, "originalCommit": {"oid": "d7a024ec2a5d17c3814141e88edf0edc33af7af5"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyMDI4MQ==", "bodyText": "I don't have a set opinion on what to do after the tear-down loop in case we've caught an InterruptedException.\n\nI've now changed my code to re-throw an InterruptionException. See #4517 (comment) and 625b783.", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r385420281", "createdAt": "2020-02-27T22:59:51Z", "author": {"login": "thomasgl-orange"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))\n+                    return Result.FAILURE;\n \n-            Result result = doRun(listener);\n+                result = doRun(listener);\n+            } finally {\n+                if (!tearDownMarker.tornDown) {\n+                    // looks like environments are not torn down yet, do it now (in reverse order)\n+                    boolean tearDownFailed = false;\n+                    boolean tearDownInterrupted = false;\n+                    for (int i = buildEnvironments.size() - 1; i >= 0; i--) {\n+                        final Environment environment = buildEnvironments.get(i);\n+                        try {\n+                            if (!environment.tearDown(AbstractBuild.this, listener)) {\n+                                tearDownFailed = true;\n+                            }\n+                        } catch (IOException | InterruptedException | RuntimeException e) {\n+                            tearDownFailed = true;\n+                            // exceptions are ignored to give a chance to all environments to tear down\n+                            listener.error(\"Unable to tear down: \" + e.getMessage());\n+                            e.printStackTrace(listener.getLogger());\n+                            if (e instanceof InterruptedException) {\n+                                // don't forget we've been interrupted\n+                                tearDownInterrupted = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MTk5OA=="}, "originalCommit": {"oid": "d7a024ec2a5d17c3814141e88edf0edc33af7af5"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDU5NDU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/AbstractBuild.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDozNzoyM1rOFvNMQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDoyOTo1NlrOFvUaJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA0MzUyMw==", "bodyText": "Maybe a good opportunity to include curly brackets here.", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r385043523", "createdAt": "2020-02-27T10:37:23Z", "author": {"login": "varyvol"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15193af21d387218ed248182b2ef3e398ad0a593"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MDU5Ng==", "bodyText": "If you ignore whitespaces, I'm not really modifying these lines of code:\nhttps://github.com/jenkinsci/jenkins/pull/4517/files/15193af21d387218ed248182b2ef3e398ad0a593?utf8=%E2%9C%93&diff=split&w=1\nSo I'd rather not change the code style, I think it would be unrelated to the actual modifications from this PR.", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r385060596", "createdAt": "2020-02-27T11:10:40Z", "author": {"login": "thomasgl-orange"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA0MzUyMw=="}, "originalCommit": {"oid": "15193af21d387218ed248182b2ef3e398ad0a593"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2MTc2NA==", "bodyText": "Fair enough!", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r385161764", "createdAt": "2020-02-27T14:29:56Z", "author": {"login": "varyvol"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA0MzUyMw=="}, "originalCommit": {"oid": "15193af21d387218ed248182b2ef3e398ad0a593"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDU5OTY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/AbstractBuild.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDozODo0OVrOFvNPUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDozMDowNFrOFvUagg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA0NDMwNA==", "bodyText": "for (Environment  environment : buildEnvironments) {", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r385044304", "createdAt": "2020-02-27T10:38:49Z", "author": {"login": "varyvol"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))\n+                    return Result.FAILURE;\n \n-            Result result = doRun(listener);\n+                result = doRun(listener);\n+            } finally {\n+                if (!tearDownMarker.tornDown) {\n+                    // looks like environments are not torn down yet, do it now (in reverse order)\n+                    boolean tearDownFailed = false;\n+                    boolean tearDownInterrupted = false;\n+                    for (int i = buildEnvironments.size() - 1; i >= 0; i--) {\n+                        final Environment environment = buildEnvironments.get(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15193af21d387218ed248182b2ef3e398ad0a593"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MjExOA==", "bodyText": "I'm iterating in reverse order (not sure if there are actual cases where it matters, but that's what was done previously).", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r385062118", "createdAt": "2020-02-27T11:13:38Z", "author": {"login": "thomasgl-orange"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))\n+                    return Result.FAILURE;\n \n-            Result result = doRun(listener);\n+                result = doRun(listener);\n+            } finally {\n+                if (!tearDownMarker.tornDown) {\n+                    // looks like environments are not torn down yet, do it now (in reverse order)\n+                    boolean tearDownFailed = false;\n+                    boolean tearDownInterrupted = false;\n+                    for (int i = buildEnvironments.size() - 1; i >= 0; i--) {\n+                        final Environment environment = buildEnvironments.get(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA0NDMwNA=="}, "originalCommit": {"oid": "15193af21d387218ed248182b2ef3e398ad0a593"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NjYwMA==", "bodyText": "I think he didn't do so to do it in reverse order", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r385066600", "createdAt": "2020-02-27T11:23:28Z", "author": {"login": "MRamonLeon"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))\n+                    return Result.FAILURE;\n \n-            Result result = doRun(listener);\n+                result = doRun(listener);\n+            } finally {\n+                if (!tearDownMarker.tornDown) {\n+                    // looks like environments are not torn down yet, do it now (in reverse order)\n+                    boolean tearDownFailed = false;\n+                    boolean tearDownInterrupted = false;\n+                    for (int i = buildEnvironments.size() - 1; i >= 0; i--) {\n+                        final Environment environment = buildEnvironments.get(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA0NDMwNA=="}, "originalCommit": {"oid": "15193af21d387218ed248182b2ef3e398ad0a593"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2MTg1OA==", "bodyText": "Oh right, sorry I didn't notice!", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r385161858", "createdAt": "2020-02-27T14:30:04Z", "author": {"login": "varyvol"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))\n+                    return Result.FAILURE;\n \n-            Result result = doRun(listener);\n+                result = doRun(listener);\n+            } finally {\n+                if (!tearDownMarker.tornDown) {\n+                    // looks like environments are not torn down yet, do it now (in reverse order)\n+                    boolean tearDownFailed = false;\n+                    boolean tearDownInterrupted = false;\n+                    for (int i = buildEnvironments.size() - 1; i >= 0; i--) {\n+                        final Environment environment = buildEnvironments.get(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA0NDMwNA=="}, "originalCommit": {"oid": "15193af21d387218ed248182b2ef3e398ad0a593"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDYwNTQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/AbstractBuild.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDo0MDozN1rOFvNS_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTozOTowM1rOFvPBQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA0NTI0Nw==", "bodyText": "Just a suggestion but maybe this would be nicer to read/follow if moved to an independent method, the current method is already long enough.", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r385045247", "createdAt": "2020-02-27T10:40:37Z", "author": {"login": "varyvol"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))\n+                    return Result.FAILURE;\n \n-            Result result = doRun(listener);\n+                result = doRun(listener);\n+            } finally {\n+                if (!tearDownMarker.tornDown) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15193af21d387218ed248182b2ef3e398ad0a593"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MzQ3NA==", "bodyText": "I agree, thanks for the suggestion. 050f166", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r385073474", "createdAt": "2020-02-27T11:39:03Z", "author": {"login": "thomasgl-orange"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))\n+                    return Result.FAILURE;\n \n-            Result result = doRun(listener);\n+                result = doRun(listener);\n+            } finally {\n+                if (!tearDownMarker.tornDown) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA0NTI0Nw=="}, "originalCommit": {"oid": "15193af21d387218ed248182b2ef3e398ad0a593"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDYzMjA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/AbstractBuild.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDo0ODowOFrOFvNjYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDo0ODowOFrOFvNjYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA0OTQ0Mg==", "bodyText": "For reviewers: This is the same as before", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r385049442", "createdAt": "2020-02-27T10:48:08Z", "author": {"login": "MRamonLeon"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))\n+                    return Result.FAILURE;\n \n-            Result result = doRun(listener);\n+                result = doRun(listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15193af21d387218ed248182b2ef3e398ad0a593"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDYzNjk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/AbstractBuild.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDo0OToyN1rOFvNmHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDo0OToyN1rOFvNmHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1MDE0Mg==", "bodyText": "From this line, all lines are the same", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r385050142", "createdAt": "2020-02-27T10:49:27Z", "author": {"login": "MRamonLeon"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15193af21d387218ed248182b2ef3e398ad0a593"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDY1ODgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/AbstractBuild.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDo1NTo0MFrOFvNzPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjo0OToyM1rOFvj9mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1MzUwMQ==", "bodyText": "Does it make more sense to use here UNSTABLE? From its definition:\n    /**\n     * The build had some errors but they were not fatal.\n     * For example, some tests failed.\n     */\n    public static final @Nonnull Result UNSTABLE = new Result(\"UNSTABLE\",BallColor.YELLOW,1,true);\n\nAnd if it was interrupted, what about ABORTED?\n    /**\n     * The build was manually aborted.\n     *\n     * If you are catching {@link InterruptedException} and interpreting it as {@link #ABORTED},\n     * you should check {@link Executor#abortResult()} instead (starting 1.417.)\n     */\n    public static final @Nonnull Result ABORTED = new Result(\"ABORTED\",BallColor.ABORTED,4,false);", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r385053501", "createdAt": "2020-02-27T10:55:40Z", "author": {"login": "MRamonLeon"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))\n+                    return Result.FAILURE;\n \n-            Result result = doRun(listener);\n+                result = doRun(listener);\n+            } finally {\n+                if (!tearDownMarker.tornDown) {\n+                    // looks like environments are not torn down yet, do it now (in reverse order)\n+                    boolean tearDownFailed = false;\n+                    boolean tearDownInterrupted = false;\n+                    for (int i = buildEnvironments.size() - 1; i >= 0; i--) {\n+                        final Environment environment = buildEnvironments.get(i);\n+                        try {\n+                            if (!environment.tearDown(AbstractBuild.this, listener)) {\n+                                tearDownFailed = true;\n+                            }\n+                        } catch (IOException | InterruptedException | RuntimeException e) {\n+                            tearDownFailed = true;\n+                            // exceptions are ignored to give a chance to all environments to tear down\n+                            listener.error(\"Unable to tear down: \" + e.getMessage());\n+                            Functions.printStackTrace(e, listener.getLogger());\n+                            if (e instanceof InterruptedException) {\n+                                // don't forget we've been interrupted\n+                                tearDownInterrupted = true;\n+                            }\n+                        }\n+                    }\n+                    // report any error while tearing down an Environment as a build failure\n+                    if (tearDownFailed) {\n+                        result = Result.FAILURE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15193af21d387218ed248182b2ef3e398ad0a593"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxNjYwMw==", "bodyText": "Regarding UNSTABLE on tearDown exception, I tend to agree, but it was FAILURE prior to this PR (in the BuildExecution#doRun implementation), so I don't really want to change this behavior here. It goes beyond the fix for \"environments not always being torn down\", and I don't know if some environments implementations rely on this behavior (throw exception, instead of returning false, to signal a fatal build error).\nRegarding InterruptedException, after reading how it's handled in Run#execute(RunExecution) (and Executor#abortResult()), I've finally decided to re-throw an InterruptedException (the first one which has been caught) rather than calling Thread#interrupt(), and let it be handled by the caller (which will set an ABORTED result in the end, but with a few subtleties regarding the cause of interruption).\nThat's 625b783.", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r385416603", "createdAt": "2020-02-27T22:49:23Z", "author": {"login": "thomasgl-orange"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))\n+                    return Result.FAILURE;\n \n-            Result result = doRun(listener);\n+                result = doRun(listener);\n+            } finally {\n+                if (!tearDownMarker.tornDown) {\n+                    // looks like environments are not torn down yet, do it now (in reverse order)\n+                    boolean tearDownFailed = false;\n+                    boolean tearDownInterrupted = false;\n+                    for (int i = buildEnvironments.size() - 1; i >= 0; i--) {\n+                        final Environment environment = buildEnvironments.get(i);\n+                        try {\n+                            if (!environment.tearDown(AbstractBuild.this, listener)) {\n+                                tearDownFailed = true;\n+                            }\n+                        } catch (IOException | InterruptedException | RuntimeException e) {\n+                            tearDownFailed = true;\n+                            // exceptions are ignored to give a chance to all environments to tear down\n+                            listener.error(\"Unable to tear down: \" + e.getMessage());\n+                            Functions.printStackTrace(e, listener.getLogger());\n+                            if (e instanceof InterruptedException) {\n+                                // don't forget we've been interrupted\n+                                tearDownInterrupted = true;\n+                            }\n+                        }\n+                    }\n+                    // report any error while tearing down an Environment as a build failure\n+                    if (tearDownFailed) {\n+                        result = Result.FAILURE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1MzUwMQ=="}, "originalCommit": {"oid": "15193af21d387218ed248182b2ef3e398ad0a593"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDc1NTM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/AbstractBuild.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToyNzo1MlrOFvOt6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjo1MDoxNVrOFvj-0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2ODUyMg==", "bodyText": "Isn't it better to throw an interrupted exception here?", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r385068522", "createdAt": "2020-02-27T11:27:52Z", "author": {"login": "MRamonLeon"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))\n+                    return Result.FAILURE;\n \n-            Result result = doRun(listener);\n+                result = doRun(listener);\n+            } finally {\n+                if (!tearDownMarker.tornDown) {\n+                    // looks like environments are not torn down yet, do it now (in reverse order)\n+                    boolean tearDownFailed = false;\n+                    boolean tearDownInterrupted = false;\n+                    for (int i = buildEnvironments.size() - 1; i >= 0; i--) {\n+                        final Environment environment = buildEnvironments.get(i);\n+                        try {\n+                            if (!environment.tearDown(AbstractBuild.this, listener)) {\n+                                tearDownFailed = true;\n+                            }\n+                        } catch (IOException | InterruptedException | RuntimeException e) {\n+                            tearDownFailed = true;\n+                            // exceptions are ignored to give a chance to all environments to tear down\n+                            listener.error(\"Unable to tear down: \" + e.getMessage());\n+                            Functions.printStackTrace(e, listener.getLogger());\n+                            if (e instanceof InterruptedException) {\n+                                // don't forget we've been interrupted\n+                                tearDownInterrupted = true;\n+                            }\n+                        }\n+                    }\n+                    // report any error while tearing down an Environment as a build failure\n+                    if (tearDownFailed) {\n+                        result = Result.FAILURE;\n+                    }\n+                    if (tearDownInterrupted) {\n+                        // don't forget we've been interrupted\n+                        Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15193af21d387218ed248182b2ef3e398ad0a593"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxNjkxNQ==", "bodyText": "Yes, see my answer to your previous comment, and 625b783.", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r385416915", "createdAt": "2020-02-27T22:50:15Z", "author": {"login": "thomasgl-orange"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +459,90 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))\n+                    return Result.FAILURE;\n \n-            Result result = doRun(listener);\n+                result = doRun(listener);\n+            } finally {\n+                if (!tearDownMarker.tornDown) {\n+                    // looks like environments are not torn down yet, do it now (in reverse order)\n+                    boolean tearDownFailed = false;\n+                    boolean tearDownInterrupted = false;\n+                    for (int i = buildEnvironments.size() - 1; i >= 0; i--) {\n+                        final Environment environment = buildEnvironments.get(i);\n+                        try {\n+                            if (!environment.tearDown(AbstractBuild.this, listener)) {\n+                                tearDownFailed = true;\n+                            }\n+                        } catch (IOException | InterruptedException | RuntimeException e) {\n+                            tearDownFailed = true;\n+                            // exceptions are ignored to give a chance to all environments to tear down\n+                            listener.error(\"Unable to tear down: \" + e.getMessage());\n+                            Functions.printStackTrace(e, listener.getLogger());\n+                            if (e instanceof InterruptedException) {\n+                                // don't forget we've been interrupted\n+                                tearDownInterrupted = true;\n+                            }\n+                        }\n+                    }\n+                    // report any error while tearing down an Environment as a build failure\n+                    if (tearDownFailed) {\n+                        result = Result.FAILURE;\n+                    }\n+                    if (tearDownInterrupted) {\n+                        // don't forget we've been interrupted\n+                        Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2ODUyMg=="}, "originalCommit": {"oid": "15193af21d387218ed248182b2ef3e398ad0a593"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDg1MzE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/AbstractBuild.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOToxOTo1OFrOFyLxFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjozNTozMlrOGNRyFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2NTkxMQ==", "bodyText": "This historical implementation just asks for concurrency issues at some point. Not blocking this change, because it does not make it any worse", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r388165911", "createdAt": "2020-03-05T09:19:58Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +460,64 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result = null;\n+            buildEnvironments = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8002f808558ec205bd4a81e773b3729234e81a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3NjAyMg==", "bodyText": "I do not see any implementation issues except the loss of information when InterruptedException is thrown by the teardown logic. It looks like the results should be combined taking handling of other negative scenarios. The rest of the code looks good to me.\n\n@oleg-nenashev: Are you ok with #4517 (comment) or are you still requesting changes in the handling of InterruptedException from teardown?\nOne minor, but simple, improvement I can think of would be thomasgl-orange@2e9b342 to log the Result of the doRun phase, which is the information we're about to lose when re-throwing the InterruptedException. Would that help, or is there something else you had in mind?", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r416576022", "createdAt": "2020-04-28T12:35:32Z", "author": {"login": "thomasgl-orange"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +460,64 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result = null;\n+            buildEnvironments = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2NTkxMQ=="}, "originalCommit": {"oid": "ee8002f808558ec205bd4a81e773b3729234e81a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDg2MDIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/AbstractBuild.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOToyMjowMFrOFyL1ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzowNjozM1rOFzKEFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2NzA1MA==", "bodyText": "InterruptedException in tearDownBuildEnvironments() will bypass this logic and cause loss of the original build result information. I doubt this is what we want", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r388167050", "createdAt": "2020-03-05T09:22:00Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +460,64 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result = null;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))\n+                    return Result.FAILURE;\n \n-            Result result = doRun(listener);\n+                result = doRun(listener);\n+            } finally {\n+                if (!tearDownMarker.tornDown) {\n+                    // looks like environments are not torn down yet, do it now (might affect the build result)\n+                    result = Result.combine(result, tearDownBuildEnvironments(listener));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8002f808558ec205bd4a81e773b3729234e81a"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4NjU4Mg==", "bodyText": "That's intentional, see #4517 (comment)\nMy understanding of how it works today is that an InterruptedException during an environment tearDown() would go up to Run#execute(RunExecution), where it is handled in a \"special\" way (Executor#abortResult()) to take user interruption cause into account. In the end, the result is ABORTED, effectively bypassing the result of the build steps.\nI don't really want to change/rewrite that, it's not what this pull request is about. I've tried to change things \"just enough\" to make sure all environments are torn down even in this case (I'll still try to tear down remaining environments before re-throwing the exception), but no more than that.\nI've added a test case (83c2602) which shows that:\n\nthe result is ABORTED in this case,\nremaining environments are torn down.\n\nExecuting the same test without the rest of this pull-request still passes 1 (the ABORTED assertion), and fails on 2. (see thomasgl-orange/jenkins@dc71032 for a cherry pick of 83c2602 on top of master).", "url": "https://github.com/jenkinsci/jenkins/pull/4517#discussion_r389186582", "createdAt": "2020-03-06T23:06:33Z", "author": {"login": "thomasgl-orange"}, "path": "core/src/main/java/hudson/model/AbstractBuild.java", "diffHunk": "@@ -459,49 +460,64 @@ public Result run(@Nonnull BuildListener listener) throws Exception {\n             hudsonVersion = Jenkins.VERSION;\n             this.listener = listener;\n \n-            launcher = createLauncher(listener);\n-            if (!Jenkins.get().getNodes().isEmpty()) {\n-                if (node instanceof Jenkins) {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n-                } else {\n-                    listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n-                    Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n-                    assignedLabels.remove(node.getSelfLabel());\n-                    if (!assignedLabels.isEmpty()) {\n-                        boolean first = true;\n-                        for (LabelAtom label : assignedLabels) {\n-                            if (first) {\n-                                listener.getLogger().print(\" (\");\n-                                first = false;\n-                            } else {\n-                                listener.getLogger().print(' ');\n+            Result result = null;\n+            buildEnvironments = new ArrayList<>();\n+            // JENKINS-43889: try/finally to make sure Environments are eventually torn down. This used to be done in\n+            // the doRun() implementation, but was not happening in case of early error (for instance in SCM checkout).\n+            // Because some plugin (Maven) implement their own doRun() logic which still includes tearing down in some\n+            // cases, we use a dummy Environment as a marker, to avoid doing it here if redundant.\n+            TearDownCheckEnvironment tearDownMarker = new TearDownCheckEnvironment();\n+            buildEnvironments.add(tearDownMarker);\n+            try {\n+                launcher = createLauncher(listener);\n+                if (!Jenkins.get().getNodes().isEmpty()) {\n+                    if (node instanceof Jenkins) {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingOnMaster());\n+                    } else {\n+                        listener.getLogger().print(Messages.AbstractBuild_BuildingRemotely(ModelHyperlinkNote.encodeTo(\"/computer/\" + builtOn, node.getDisplayName())));\n+                        Set<LabelAtom> assignedLabels = new HashSet<>(node.getAssignedLabels());\n+                        assignedLabels.remove(node.getSelfLabel());\n+                        if (!assignedLabels.isEmpty()) {\n+                            boolean first = true;\n+                            for (LabelAtom label : assignedLabels) {\n+                                if (first) {\n+                                    listener.getLogger().print(\" (\");\n+                                    first = false;\n+                                } else {\n+                                    listener.getLogger().print(' ');\n+                                }\n+                                listener.getLogger().print(label.getName());\n                             }\n-                            listener.getLogger().print(label.getName());\n+                            listener.getLogger().print(')');\n                         }\n-                        listener.getLogger().print(')');\n                     }\n+                } else {\n+                    listener.getLogger().print(Messages.AbstractBuild_Building());\n                 }\n-            } else {\n-                listener.getLogger().print(Messages.AbstractBuild_Building());\n-            }\n-            \n-            lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n+                \n+                lease = decideWorkspace(node, Computer.currentComputer().getWorkspaceList());\n \n-            workspace = lease.path.getRemote();\n-            listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n-            node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n+                workspace = lease.path.getRemote();\n+                listener.getLogger().println(Messages.AbstractBuild_BuildingInWorkspace(workspace));\n+                node.getFileSystemProvisioner().prepareWorkspace(AbstractBuild.this,lease.path,listener);\n \n-            for (WorkspaceListener wl : WorkspaceListener.all()) {\n-                wl.beforeUse(AbstractBuild.this, lease.path, listener);\n-            }\n+                for (WorkspaceListener wl : WorkspaceListener.all()) {\n+                    wl.beforeUse(AbstractBuild.this, lease.path, listener);\n+                }\n \n-            getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n-            getProject().getScmCheckoutStrategy().checkout(this);\n+                getProject().getScmCheckoutStrategy().preCheckout(AbstractBuild.this, launcher, this.listener);\n+                getProject().getScmCheckoutStrategy().checkout(this);\n \n-            if (!preBuild(listener,project.getProperties()))\n-                return Result.FAILURE;\n+                if (!preBuild(listener,project.getProperties()))\n+                    return Result.FAILURE;\n \n-            Result result = doRun(listener);\n+                result = doRun(listener);\n+            } finally {\n+                if (!tearDownMarker.tornDown) {\n+                    // looks like environments are not torn down yet, do it now (might affect the build result)\n+                    result = Result.combine(result, tearDownBuildEnvironments(listener));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2NzA1MA=="}, "originalCommit": {"oid": "ee8002f808558ec205bd4a81e773b3729234e81a"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 819, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}