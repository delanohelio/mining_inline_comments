{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NjczMjQz", "number": 4731, "reviewThreads": {"totalCount": 60, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTo0ODowNVrOD9kEQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoyNTo0OVrOESSTiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODgwNjQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTo0ODowNVrOGXImJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTowMTo0NlrOGXW0JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxMTI2OA==", "bodyText": "Please rather get used to setters./getters in the code. Public fields are nightmare in Java when it comes to maintaining binary compatibility", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r426911268", "createdAt": "2020-05-18T21:48:05Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -851,30 +851,32 @@ private void locationChanged(Item item, String oldName, String newName) {\n     /**\n      * Time when the fingerprint has been captured.\n      */\n-    private final @Nonnull Date timestamp;\n+    public final @Nonnull Date timestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13889975d1e03f00e41f92bf6f67ebb6f73946f4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0NDIyOA==", "bodyText": "@oleg-nenashev Got it :) Made the requested changes!", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r427144228", "createdAt": "2020-05-19T09:01:46Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -851,30 +851,32 @@ private void locationChanged(Item item, String oldName, String newName) {\n     /**\n      * Time when the fingerprint has been captured.\n      */\n-    private final @Nonnull Date timestamp;\n+    public final @Nonnull Date timestamp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxMTI2OA=="}, "originalCommit": {"oid": "13889975d1e03f00e41f92bf6f67ebb6f73946f4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDI3OTIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo1OToxN1rOGXWtww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOToxNDo0M1rOGXXUrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0MjU5NQ==", "bodyText": "Unless there are startup sequence related issues, this should be fairly straightforward to do in a \"Jenkins\" way:\n\nRemove the field in Fingerprint.\nAnnotate this class @Extension(ordinal=100) after making sure it has a no-arg constructor.\nAdd an abstract superclass FingerprintStorage implements ExtensionPoint and extend it here.\nHave a static FingerprintStorage get() in the superclass that returns ExtensionList.lookup(FingerprintStorage.class).get(0).\n\nAny @Extension WhateverFingerprintStorage extends FingerprintStorage will take precedence.\nEven if the final PR looks nothing like I write above, looking into these Jenkins-isms if you don't know them yet will prepare you for writing code \"the Jenkins way\" \ud83d\ude03", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r427142595", "createdAt": "2020-05-19T08:59:17Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package hudson.model;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.BulkChange;\n+import hudson.Util;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+public class FileFingerprintStorage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13889975d1e03f00e41f92bf6f67ebb6f73946f4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0ODA5Ng==", "bodyText": "Hi @daniel-beck Thanks a lot for the review :) Implementing the Extension point is my next step, but you gave me such good precise and clear direction! Thanks a ton!\nPreparing for \"the Jenkins way\" is indeed what I am here to learn! :)", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r427148096", "createdAt": "2020-05-19T09:07:38Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package hudson.model;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.BulkChange;\n+import hudson.Util;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+public class FileFingerprintStorage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0MjU5NQ=="}, "originalCommit": {"oid": "13889975d1e03f00e41f92bf6f67ebb6f73946f4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1MjU1OA==", "bodyText": "Would also recommend looking into https://javadoc.jenkins.io/jenkins/model/ArtifactManagerConfiguration.html and implementations of https://www.jenkins.io/doc/developer/extensions/jenkins-core/#artifactmanagerfactory -- seems they are fairly similar to what you're doing here.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r427152558", "createdAt": "2020-05-19T09:14:43Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package hudson.model;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.BulkChange;\n+import hudson.Util;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+public class FileFingerprintStorage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0MjU5NQ=="}, "originalCommit": {"oid": "13889975d1e03f00e41f92bf6f67ebb6f73946f4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDc0NDY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjowNjoyNFrOGZlCEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjowNjoyNFrOGZlCEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NDMyMw==", "bodyText": "Maybe something to leave within the abstraction. It is hard to expect the implementations to handle it correctly", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r429474323", "createdAt": "2020-05-22T22:06:24Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.BulkChange;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+import hudson.util.PersistedList;\n+import jenkins.model.FingerprintFacet;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(Fingerprint.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    public @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+        return load(Fingerprint.getFingerprintFile(md5sum));\n+    }\n+\n+    static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = Fingerprint.getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))\n+            start = System.currentTimeMillis();\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            if(logger.isLoggable(Level.FINE))\n+                logger.fine(\"Loading fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            if (f.facets==null)\n+                f.facets = new PersistedList<>(f);\n+            for (FingerprintFacet facet : f.facets)\n+                facet._setOwner(f);\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = Fingerprint.messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        if(BulkChange.contains(fp))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a98412fd0c81974986bf4288dbad5c646ef2a1ed"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDc0NjAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjowNzoyNlrOGZlC3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjowNzoyNlrOGZlC3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NDUyNQ==", "bodyText": "Something to leave in the abstraction as well?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r429474525", "createdAt": "2020-05-22T22:07:26Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.BulkChange;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+import hudson.util.PersistedList;\n+import jenkins.model.FingerprintFacet;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(Fingerprint.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    public @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+        return load(Fingerprint.getFingerprintFile(md5sum));\n+    }\n+\n+    static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = Fingerprint.getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))\n+            start = System.currentTimeMillis();\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            if(logger.isLoggable(Level.FINE))\n+                logger.fine(\"Loading fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            if (f.facets==null)\n+                f.facets = new PersistedList<>(f);\n+            for (FingerprintFacet facet : f.facets)\n+                facet._setOwner(f);\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = Fingerprint.messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        if(BulkChange.contains(fp))\n+            return;\n+\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))\n+            start = System.currentTimeMillis();\n+\n+        File file = Fingerprint.getFingerprintFile(Fingerprint.toByteArray(fp.getHashString()));\n+        save(fp, file);\n+        SaveableListener.fireOnChange(fp, Fingerprint.getConfigFile(file));\n+\n+        if(logger.isLoggable(Level.FINE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a98412fd0c81974986bf4288dbad5c646ef2a1ed"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjA3MjQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNjo0NDowNlrOGZwBaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNTo1NTo1MFrOGaFKXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDM3Ng==", "bodyText": "Been a while for such conversions for me, but do you need to watch for any overflows or anything?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r429654376", "createdAt": "2020-05-24T16:44:06Z", "author": {"login": "afalko"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -927,6 +923,18 @@ public Fingerprint(@CheckForNull Run build, @NonNull String fileName, @NonNull b\n         return Util.toHexString(md5sum);\n     }\n \n+    /**\n+     * Converts md5 hash string to byte array.\n+     *\n+     * @since TODO\n+     */\n+    public static byte[] toByteArray(String md5sum) {\n+        byte[] data = new byte[16];\n+        for( int i=0; i<md5sum.length(); i+=2 )\n+            data[i/2] = (byte)Integer.parseInt(md5sum.substring(i,i+2),16);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afaa0eb6a3a7e54c8243fd211e087d3756ac87c9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAwMDczMg==", "bodyText": "Hi @afalko, Actually this piece of code I ported from the tests because it has use with other classes too. Ill comment back after having properly investigated it", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r430000732", "createdAt": "2020-05-25T15:55:50Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -927,6 +923,18 @@ public Fingerprint(@CheckForNull Run build, @NonNull String fileName, @NonNull b\n         return Util.toHexString(md5sum);\n     }\n \n+    /**\n+     * Converts md5 hash string to byte array.\n+     *\n+     * @since TODO\n+     */\n+    public static byte[] toByteArray(String md5sum) {\n+        byte[] data = new byte[16];\n+        for( int i=0; i<md5sum.length(); i+=2 )\n+            data[i/2] = (byte)Integer.parseInt(md5sum.substring(i,i+2),16);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDM3Ng=="}, "originalCommit": {"oid": "afaa0eb6a3a7e54c8243fd211e087d3756ac87c9"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzYzNjYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxMToxMlrOGdA3mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxMToxMlrOGdA3mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NjEyMA==", "bodyText": "+1 to what @StefanSpieker proposed. Please put all new code within the jenkins.* namespace. FileFingerprintStorage  is not actually a part of the Data Model, so I would rather suggest creating a new jenkins.fingerprints package for the implementations. No strong opinion.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433076120", "createdAt": "2020-06-01T07:11:12Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzYzNzA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxMToyMVrOGdA3zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxMToyMVrOGdA3zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NjE3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Extension()\n          \n          \n            \n            @Extension", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433076175", "createdAt": "2020-06-01T07:11:21Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+import hudson.util.PersistedList;\n+import jenkins.model.FingerprintFacet;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Extension()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzYzODU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxMjowOFrOGdA4sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODowMDo1NFrOGjnOrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NjQwMw==", "bodyText": "It would make sense to at least restrict the API as Beta.\nhttps://www.jenkins.io/blog/2018/04/30/using-the-beta-annotation/", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433076403", "createdAt": "2020-06-01T07:12:08Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+import hudson.util.PersistedList;\n+import jenkins.model.FingerprintFacet;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Extension()\n+public class FileFingerprintStorage extends FingerprintStorage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5NjA3Nw==", "bodyText": "@oleg-nenashev #4731 (comment) was changed accordingly", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439996077", "createdAt": "2020-06-15T08:00:54Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+import hudson.util.PersistedList;\n+import jenkins.model.FingerprintFacet;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Extension()\n+public class FileFingerprintStorage extends FingerprintStorage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NjQwMw=="}, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzY0MzcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxNDoyNVrOGdA70Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxNDoyNVrOGdA70Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzIwMQ==", "bodyText": "What does block you from using string.getBytes() with a 8-bit encoding? Why would it need a manual implementation?|", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433077201", "createdAt": "2020-06-01T07:14:25Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -927,6 +923,18 @@ public Fingerprint(@CheckForNull Run build, @NonNull String fileName, @NonNull b\n         return Util.toHexString(md5sum);\n     }\n \n+    /**\n+     * Converts md5 hash string to byte array.\n+     *\n+     * @since TODO\n+     */\n+    public static byte[] toByteArray(String md5sum) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzY0NjU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxNTozNVrOGdA9bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxNTozNVrOGdA9bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzYxNQ==", "bodyText": "It still needs some kind of fingerprint identifier in the message, e.g. just its ID/hash", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433077615", "createdAt": "2020-06-01T07:15:35Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1251,28 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) return;\n \n         long start=0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n-        File file = getFingerprintFile(md5sum);\n-        save(file);\n-        SaveableListener.fireOnChange(this, getConfigFile(file));\n+        FingerprintStorage.get().save(this);\n \n         if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            logger.fine(\"Saving fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzY1MDY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxNzozMFrOGdA_2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjo1Nzo0MVrOGdSaVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3ODIzNQ==", "bodyText": "It is not a public method though it can be accessed from the same package in plugins. Do you see examples of that?\n\nIf yes, then it makes sense to deprecate the method\nIf not, we could consider removing it entirely", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433078235", "createdAt": "2020-06-01T07:17:30Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1251,28 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) return;\n \n         long start=0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n-        File file = getFingerprintFile(md5sum);\n-        save(file);\n-        SaveableListener.fireOnChange(this, getConfigFile(file));\n+        FingerprintStorage.get().save(this);\n \n         if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            logger.fine(\"Saving fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n     }\n \n+    /**\n+     * Save the Fingerprint in the given file locally\n+     * @throws IOException Save error\n+     */\n     void save(File file) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM2MzU0MQ==", "bodyText": "@oleg-nenashev I can see examples of it being used in the tests. Marking it as deprecated.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433363541", "createdAt": "2020-06-01T16:57:41Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1251,28 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) return;\n \n         long start=0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n-        File file = getFingerprintFile(md5sum);\n-        save(file);\n-        SaveableListener.fireOnChange(this, getConfigFile(file));\n+        FingerprintStorage.get().save(this);\n \n         if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            logger.fine(\"Saving fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n     }\n \n+    /**\n+     * Save the Fingerprint in the given file locally\n+     * @throws IOException Save error\n+     */\n     void save(File file) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3ODIzNQ=="}, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzY1NDQ5OnYy", "diffSide": "LEFT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxOTowN1rOGdBCOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxOTowN1rOGdBCOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3ODg0Mg==", "bodyText": "It does not look to be a good public API. Why would you need it here? Could it be just moved to the storage?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433078842", "createdAt": "2020-06-01T07:19:07Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1350,14 +1321,14 @@ public Api getApi() {\n     /**\n      * The file we save our configuration.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzY1NDYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxOToxMlrOGdBCVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxOToxMlrOGdBCVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3ODg3MQ==", "bodyText": "same", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433078871", "createdAt": "2020-06-01T07:19:12Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1350,14 +1321,14 @@ public Api getApi() {\n     /**\n      * The file we save our configuration.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n+    public static @NonNull XmlFile getConfigFile(@NonNull File file) {\n         return new XmlFile(XSTREAM,file);\n     }\n \n     /**\n      * Determines the file name from md5sum.\n      */\n-    private static @NonNull File getFingerprintFile(@NonNull byte[] md5sum) {\n+    public static @NonNull File getFingerprintFile(@NonNull byte[] md5sum) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzY1NjQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoyMDowM1rOGdBDeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoyMDowM1rOGdBDeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3OTE2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Performs Initialization of facets on a new loaded Fingerprint.\n          \n          \n            \n                 * Performs Initialization of facets on a newly loaded Fingerprint.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433079162", "createdAt": "2020-06-01T07:20:03Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1428,6 +1370,18 @@ private static String messageOfParseException(Throwable t) {\n         }\n     }\n \n+    /**\n+     * Performs Initialization of facets on a new loaded Fingerprint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzY2MDkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/FingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoyMjowNlrOGdBGPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoyMjowNlrOGdBGPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3OTg3MQ==", "bodyText": "As discussed on Thursday, I suggest to avoid using explicit MD5 references in the API. We would rather need a variable-length key with a transformation on the storage level. E.g. we already have an issue with Docker image/container fingerprints which much longer IDs than md5", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433079871", "createdAt": "2020-06-01T07:22:06Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import jenkins.util.SystemProperties;\n+\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get(){\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"hudson.model.FileFingerprintStorage\");\n+        return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in the storage.\n+     */\n+    public abstract void save(Fingerprint fp) throws IOException;\n+\n+    /**\n+     * Returns the Fingerprint with the given MD5.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzY2MzY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoyMzoxMlrOGdBH1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoyMzoxMlrOGdBH1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4MDI3Ng==", "bodyText": "make it final? I doubt there is a need to override them.\nAlso, for such new APIs it makes sense to explicitly document nullness via FindBugs annotations", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433080276", "createdAt": "2020-06-01T07:23:12Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1193,6 +1201,15 @@ public int size() {\n         };\n     }\n \n+    /**\n+     * Returns the persisted facets.\n+     *\n+     * @since TODO\n+     */\n+    public PersistedList<FingerprintFacet> getPersistedFacets() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTUwNjIwOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/hudson/model/FingerprintTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzo1ODowNlrOGdmU9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOToyMjoxMlrOGgVv8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4OTg0NA==", "bodyText": "Please also move the test to the jenkins package.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433689844", "createdAt": "2020-06-02T07:58:06Z", "author": {"login": "StefanSpieker"}, "path": "test/src/test/java/hudson/model/FingerprintTest.java", "diffHunk": "@@ -23,6 +23,7 @@\n  */\n package hudson.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beba5cb64caac0de8e5cfd215b6acdf771507260"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcwMTIxMA==", "bodyText": "Hi @StefanSpieker thanks for reviewing :)\nFingerprintTest is for Fingerprint class, which resides in hudson.model . Should it also be moved to Jenkins package?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433701210", "createdAt": "2020-06-02T08:18:06Z", "author": {"login": "stellargo"}, "path": "test/src/test/java/hudson/model/FingerprintTest.java", "diffHunk": "@@ -23,6 +23,7 @@\n  */\n package hudson.model;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4OTg0NA=="}, "originalCommit": {"oid": "beba5cb64caac0de8e5cfd215b6acdf771507260"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NTA1MQ==", "bodyText": "Sorry, my bad, then please keep it there.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r436555051", "createdAt": "2020-06-08T09:07:02Z", "author": {"login": "StefanSpieker"}, "path": "test/src/test/java/hudson/model/FingerprintTest.java", "diffHunk": "@@ -23,6 +23,7 @@\n  */\n package hudson.model;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4OTg0NA=="}, "originalCommit": {"oid": "beba5cb64caac0de8e5cfd215b6acdf771507260"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU2Mzk1Mg==", "bodyText": "No worries, thanks for reviewing :)", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r436563952", "createdAt": "2020-06-08T09:22:12Z", "author": {"login": "stellargo"}, "path": "test/src/test/java/hudson/model/FingerprintTest.java", "diffHunk": "@@ -23,6 +23,7 @@\n  */\n package hudson.model;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4OTg0NA=="}, "originalCommit": {"oid": "beba5cb64caac0de8e5cfd215b6acdf771507260"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjU4NDMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMTo1MzoxNFrOGeYXdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMTo1MzoxNFrOGeYXdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwOTY4Ng==", "bodyText": "If you make an API public, it needs to be documented.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434509686", "createdAt": "2020-06-03T11:53:14Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -774,7 +772,7 @@ public static RangeSet fromString(String list, boolean skipError) {\n             return rs;\n         }\n \n-        static final class ConverterImpl implements Converter {\n+        public static final class ConverterImpl implements Converter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjYxMjk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjowMTo1NlrOGeYp8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjowMTo1NlrOGeYp8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNDQxNg==", "bodyText": "I would say that it is a Jenkins API issue. SaveableListener is equipped to work only with the Filesystem storage. It might be out of the scope for this project, so I raised https://issues.jenkins-ci.org/browse/JENKINS-62543 . It would be great to add a TODO comment to the code so that visitors\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    FingerprintStorage.get().save(this);\n          \n          \n            \n                    // Implementations are expected to invoke SaveableListener on their own if relevant\n          \n          \n            \n                    // TODO: Consider improving Saveable Listener API: https://issues.jenkins-ci.org/browse/JENKINS-62543\n          \n          \n            \n                    FingerprintStorage.get().save(this);", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434514416", "createdAt": "2020-06-03T12:01:56Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1241,30 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) return;\n \n         long start=0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n-        File file = getFingerprintFile(md5sum);\n-        save(file);\n-        SaveableListener.fireOnChange(this, getConfigFile(file));\n+        FingerprintStorage.get().save(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjYxNTI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjowMjo0MlrOGeYrXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjowMjo0MlrOGeYrXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNDc4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SaveableListener.fireOnChange(fp, getConfigFile(file));\n          \n          \n            \n                    // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations. https://issues.jenkins-ci.org/browse/JENKINS-62543 \n          \n          \n            \n                    SaveableListener.fireOnChange(fp, getConfigFile(file));", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434514781", "createdAt": "2020-06-03T12:02:42Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjYyMDU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjowNDozNlrOGeYu-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjowNDozNlrOGeYu-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNTcwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static void initFacets(Fingerprint fingerprint){\n          \n          \n            \n                private static void initFacets(@CheckForNull Fingerprint fingerprint){", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434515704", "createdAt": "2020-06-03T12:04:36Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1428,6 +1364,16 @@ private static String messageOfParseException(Throwable t) {\n         }\n     }\n \n+    /**\n+     * Performs Initialization of facets on a newly loaded Fingerprint.\n+     */\n+    private static void initFacets(Fingerprint fingerprint){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 284}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjYyMzAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjowNToyM1rOGeYwog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjowNToyM1rOGeYwog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNjEzMA==", "bodyText": "This method was prvate before. No need to deprecate it, you can just remove it", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434516130", "createdAt": "2020-06-03T12:05:23Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,75 +1311,48 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))\n+            start = System.currentTimeMillis();\n+\n+        Fingerprint loaded = FingerprintStorage.get().load(id);\n+        initFacets(loaded);\n+\n+        if(logger.isLoggable(Level.FINE))\n+            logger.fine(\"Loading fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n+\n+        return loaded;\n     }\n \n     /**\n-     * Determines the file name from md5sum.\n+     * @deprecated as of TODO\n      */\n-    private static @NonNull File getFingerprintFile(@NonNull byte[] md5sum) {\n-        assert md5sum.length==16;\n-        return new File( Jenkins.get().getRootDir(),\n-            \"fingerprints/\"+ Util.toHexString(md5sum,0,1)+'/'+Util.toHexString(md5sum,1,1)+'/'+Util.toHexString(md5sum,2,md5sum.length-2)+\".xml\");\n+    @Deprecated\n+    /*package*/ static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+        return load(Util.toHexString(md5sum));\n     }\n \n     /**\n-     * Loads a {@link Fingerprint} from a file in the image.\n-     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n-     * malformed.\n+     * @deprecated as of TODO\n      */\n-    /*package*/ static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n-        return load(getFingerprintFile(md5sum));\n-    }\n+    @Deprecated\n     /*package*/ static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n-        XmlFile configFile = getConfigFile(file);\n-        if(!configFile.exists())\n-            return null;\n-\n-        long start=0;\n-        if(logger.isLoggable(Level.FINE))\n-            start = System.currentTimeMillis();\n+        Fingerprint fingerprint = FileFingerprintStorage.load(file);\n+        initFacets(fingerprint);\n \n-        try {\n-            Object loaded = configFile.read();\n-            if (!(loaded instanceof Fingerprint)) {\n-                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n-                        + (loaded != null ? loaded.getClass() : \"null\"));\n-            }\n-            Fingerprint f = (Fingerprint) loaded;\n-            if(logger.isLoggable(Level.FINE))\n-                logger.fine(\"Loading fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n-            if (f.facets==null)\n-                f.facets = new PersistedList<>(f);\n-            for (FingerprintFacet facet : f.facets)\n-                facet._setOwner(f);\n-            return f;\n-        } catch (IOException e) {\n-            if(file.exists() && file.length()==0) {\n-                // Despite the use of AtomicFile, there are reports indicating that people often see\n-                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n-                // power loss, etc.) or abnormal program termination.\n-                // generally we don't want to wipe out user data just because we can't load it,\n-                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n-                // like recovering it silently by deleting the file is not a bad idea.\n-                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n-                file.delete();\n-                return null;\n-            }\n-            String parseError = messageOfParseException(e);\n-            if (parseError != null) {\n-                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n-                file.delete();\n-                return null;\n-            }\n-            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n-            throw e;\n-        }\n+        return fingerprint;\n     }\n-    private static String messageOfParseException(Throwable t) {\n+\n+    /**\n+     * @deprecated as of TODO\n+     */\n+    @Deprecated\n+    static String messageOfParseException(Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjYzNjQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjowOToyNlrOGeY5MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTozMjowNlrOGehbYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxODMyMQ==", "bodyText": "This tag might become a source of confusion later if the fingerprint size is expanded. Anyway, we can worry about it when we get there.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            w.print(\"  <md5sum>\");\n          \n          \n            \n                            // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n          \n          \n            \n                            w.print(\"  <md5sum>\");", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434518321", "createdAt": "2020-06-03T12:09:26Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                w.print(\"  <md5sum>\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1ODE0Nw==", "bodyText": "I absolutely agree :) TODO added", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434658147", "createdAt": "2020-06-03T15:32:06Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                w.print(\"  <md5sum>\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxODMyMQ=="}, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjY0ODUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjoxMjo1OVrOGeZApg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwNjoyMDo0OFrOGjWANA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyMDIzMA==", "bodyText": "Do we need to introduce methods which iterate fingerprints without loading them?\nAFAICT they are required for effective implementations of  https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/FingerprintMap.java . Same might be needed for bulk loading which is a common use-case for Jenkins Web UI\nCan be done later from what I can dell", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434520230", "createdAt": "2020-06-03T12:12:59Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5NTkxMQ==", "bodyText": "I'll investigate this properly, and then comment back", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434695911", "createdAt": "2020-06-03T16:23:28Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyMDIzMA=="}, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NTI1Nw==", "bodyText": "@oleg-nenashev I am understanding the concept, but it would be very helpful if you could point me exactly where such implementation has been made, because I was unable to find it.\nFrom what I can understand, FingerprintMap is ensuring no two Fingerprint objects for the same ID in memory, and that also memory conservation by making these Fingerprints SoftReference.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r436245257", "createdAt": "2020-06-06T06:57:57Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyMDIzMA=="}, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NDMwOA==", "bodyText": "At any rate, seems that at least FingerprintMap.isReady needs to be amended.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437374308", "createdAt": "2020-06-09T12:31:21Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyMDIzMA=="}, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxMzg0NA==", "bodyText": "FingerprintMap.isReady has now been updated", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439713844", "createdAt": "2020-06-13T06:20:48Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyMDIzMA=="}, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTMzOTEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1NDo1N1rOGfHKlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1NDo1N1rOGfHKlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3NjQzNw==", "bodyText": "Use curlies on split-line ifs", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435276437", "createdAt": "2020-06-04T13:54:57Z", "author": {"login": "afalko"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,84 +1311,60 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTM0MDg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1NToxNVrOGfHLng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1NToxNVrOGfHLng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3NjcwMg==", "bodyText": "Curlies on split-line ifs please", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435276702", "createdAt": "2020-06-04T13:55:15Z", "author": {"login": "afalko"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,84 +1311,60 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))\n+            start = System.currentTimeMillis();\n+\n+        Fingerprint loaded = FingerprintStorage.get().load(id);\n+        initFacets(loaded);\n+\n+        if(logger.isLoggable(Level.FINE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTM1NTk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1ODozN1rOGfHVZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1ODozN1rOGfHVZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3OTIwNw==", "bodyText": "Please add curlies here", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435279207", "createdAt": "2020-06-04T13:58:37Z", "author": {"login": "afalko"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,84 +1311,60 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))\n+            start = System.currentTimeMillis();\n+\n+        Fingerprint loaded = FingerprintStorage.get().load(id);\n+        initFacets(loaded);\n+\n+        if(logger.isLoggable(Level.FINE))\n+            logger.fine(\"Loading fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n+\n+        return loaded;\n     }\n \n     /**\n-     * Determines the file name from md5sum.\n+     * @deprecated as of TODO\n      */\n-    private static @NonNull File getFingerprintFile(@NonNull byte[] md5sum) {\n-        assert md5sum.length==16;\n-        return new File( Jenkins.get().getRootDir(),\n-            \"fingerprints/\"+ Util.toHexString(md5sum,0,1)+'/'+Util.toHexString(md5sum,1,1)+'/'+Util.toHexString(md5sum,2,md5sum.length-2)+\".xml\");\n+    @Deprecated\n+    /*package*/ static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+        return load(Util.toHexString(md5sum));\n     }\n \n     /**\n-     * Loads a {@link Fingerprint} from a file in the image.\n-     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n-     * malformed.\n+     * @deprecated as of TODO\n      */\n-    /*package*/ static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n-        return load(getFingerprintFile(md5sum));\n-    }\n+    @Deprecated\n     /*package*/ static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n-        XmlFile configFile = getConfigFile(file);\n-        if(!configFile.exists())\n-            return null;\n+        Fingerprint fingerprint = FileFingerprintStorage.load(file);\n+        initFacets(fingerprint);\n \n-        long start=0;\n-        if(logger.isLoggable(Level.FINE))\n-            start = System.currentTimeMillis();\n+        return fingerprint;\n+    }\n \n-        try {\n-            Object loaded = configFile.read();\n-            if (!(loaded instanceof Fingerprint)) {\n-                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n-                        + (loaded != null ? loaded.getClass() : \"null\"));\n-            }\n-            Fingerprint f = (Fingerprint) loaded;\n-            if(logger.isLoggable(Level.FINE))\n-                logger.fine(\"Loading fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n-            if (f.facets==null)\n-                f.facets = new PersistedList<>(f);\n-            for (FingerprintFacet facet : f.facets)\n-                facet._setOwner(f);\n-            return f;\n-        } catch (IOException e) {\n-            if(file.exists() && file.length()==0) {\n-                // Despite the use of AtomicFile, there are reports indicating that people often see\n-                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n-                // power loss, etc.) or abnormal program termination.\n-                // generally we don't want to wipe out user data just because we can't load it,\n-                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n-                // like recovering it silently by deleting the file is not a bad idea.\n-                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n-                file.delete();\n-                return null;\n-            }\n-            String parseError = messageOfParseException(e);\n-            if (parseError != null) {\n-                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n-                file.delete();\n-                return null;\n-            }\n-            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n-            throw e;\n-        }\n+    /**\n+     * Deletes the {@link Fingerprint} in the Storage with the given unique id.\n+     *\n+     * @since TODO\n+     */\n+    public static void delete(@NonNull String id) {\n+        FingerprintStorage.get().delete(id);\n     }\n-    private static String messageOfParseException(Throwable t) {\n-        if (t instanceof XmlPullParserException || t instanceof EOFException) {\n-            return t.getMessage();\n-        }\n-        Throwable t2 = t.getCause();\n-        if (t2 != null) {\n-            return messageOfParseException(t2);\n-        } else {\n-            return null;\n-        }\n+\n+    /**\n+     * Performs Initialization of facets on a newly loaded Fingerprint.\n+     */\n+    private static void initFacets(@CheckForNull Fingerprint fingerprint){\n+        if (fingerprint==null) return;\n+\n+        for (FingerprintFacet facet : fingerprint.facets)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 284}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTM1NzEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1ODo1MFrOGfHWGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1ODo1MFrOGfHWGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3OTM4NA==", "bodyText": "Curlies", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435279384", "createdAt": "2020-06-04T13:58:50Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTM4MDA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowMzo0OFrOGfHlNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjoxNDoxMlrOGf0yow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4MzI1NQ==", "bodyText": "Do we need to valid that delete was successful?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435283255", "createdAt": "2020-06-04T14:03:48Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) {\n+        File file = getFingerprintFile(id);\n+        file.delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcwMzk0MQ==", "bodyText": "@afalko Thanks, I have added created some exceptions for the same, on the same pattern as the other methods of this class, and delete of the FingerprintCleanupThread class.\nLet me know what you think :)", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435703941", "createdAt": "2020-06-05T05:53:30Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) {\n+        File file = getFingerprintFile(id);\n+        file.delete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4MzI1NQ=="}, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyMzk3MQ==", "bodyText": "This is mostly as-is I guess. I think as a user, I'll see an exception in the logs for this. This is probably fine for now :)", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r436023971", "createdAt": "2020-06-05T16:14:12Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) {\n+        File file = getFingerprintFile(id);\n+        file.delete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4MzI1NQ=="}, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTM4NTA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNDo1MVrOGfHoig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNDo1MVrOGfHoig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NDEwNg==", "bodyText": "Can we use Paths.get to put the path together? What you are doing right now won't be portable to Windows systems.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435284106", "createdAt": "2020-06-04T14:04:51Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) {\n+        File file = getFingerprintFile(id);\n+        file.delete();\n+\n+        File inner = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2)+\"/\"+id.substring(2,4));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTM4ODI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNTozNFrOGfHqpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDozMzo1N1rOGfWzFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NDY0Ng==", "bodyText": "Same comment here: non-portable path concatenation", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435284646", "createdAt": "2020-06-04T14:05:34Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) {\n+        File file = getFingerprintFile(id);\n+        file.delete();\n+\n+        File inner = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2)+\"/\"+id.substring(2,4));\n+        String[] inner_files = inner.list();\n+        if (inner_files!=null && inner_files.length==0) inner.delete();\n+\n+        File outer = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2));\n+        String[] outer_files = outer.list();\n+        if (outer_files!=null && outer_files.length==0) outer.delete();\n+    }\n+\n+    /**\n+     * The file we save our configuration.\n+     */\n+    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n+        return new XmlFile(Fingerprint.getXStream(), file);\n+    }\n+\n+    /**\n+     * Determines the file name from unique id (md5sum).\n+     */\n+    private static @NonNull File getFingerprintFile(@NonNull String id) {\n+        return new File( Jenkins.get().getRootDir(),\n+                \"fingerprints/\"+id.substring(0,2)+'/'+id.substring(2,4)+'/'+id.substring(4)+\".xml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzMjU2NA==", "bodyText": "@afalko I agree with you, but interestingly, in the Jenkins core codebase, I can mostly find non-portable path concatenation being used.\nCC @oleg-nenashev some insights would helpful :)", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435532564", "createdAt": "2020-06-04T20:33:57Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) {\n+        File file = getFingerprintFile(id);\n+        file.delete();\n+\n+        File inner = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2)+\"/\"+id.substring(2,4));\n+        String[] inner_files = inner.list();\n+        if (inner_files!=null && inner_files.length==0) inner.delete();\n+\n+        File outer = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2));\n+        String[] outer_files = outer.list();\n+        if (outer_files!=null && outer_files.length==0) outer.delete();\n+    }\n+\n+    /**\n+     * The file we save our configuration.\n+     */\n+    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n+        return new XmlFile(Fingerprint.getXStream(), file);\n+    }\n+\n+    /**\n+     * Determines the file name from unique id (md5sum).\n+     */\n+    private static @NonNull File getFingerprintFile(@NonNull String id) {\n+        return new File( Jenkins.get().getRootDir(),\n+                \"fingerprints/\"+id.substring(0,2)+'/'+id.substring(2,4)+'/'+id.substring(4)+\".xml\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NDY0Ng=="}, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTM5MDczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNjowNVrOGfHsQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNjowNVrOGfHsQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NTA1OA==", "bodyText": "Improve the variable names t and t2", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435285058", "createdAt": "2020-06-04T14:06:05Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) {\n+        File file = getFingerprintFile(id);\n+        file.delete();\n+\n+        File inner = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2)+\"/\"+id.substring(2,4));\n+        String[] inner_files = inner.list();\n+        if (inner_files!=null && inner_files.length==0) inner.delete();\n+\n+        File outer = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2));\n+        String[] outer_files = outer.list();\n+        if (outer_files!=null && outer_files.length==0) outer.delete();\n+    }\n+\n+    /**\n+     * The file we save our configuration.\n+     */\n+    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n+        return new XmlFile(Fingerprint.getXStream(), file);\n+    }\n+\n+    /**\n+     * Determines the file name from unique id (md5sum).\n+     */\n+    private static @NonNull File getFingerprintFile(@NonNull String id) {\n+        return new File( Jenkins.get().getRootDir(),\n+                \"fingerprints/\"+id.substring(0,2)+'/'+id.substring(2,4)+'/'+id.substring(4)+\".xml\");\n+    }\n+\n+    private static String messageOfParseException(Throwable t) {\n+        if (t instanceof XmlPullParserException || t instanceof EOFException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTM5NTAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNjo1M1rOGfHu4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNjo1M1rOGfHu4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NTcyOA==", "bodyText": "In the comment can you give an example input and output?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435285728", "createdAt": "2020-06-04T14:06:53Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) {\n+        File file = getFingerprintFile(id);\n+        file.delete();\n+\n+        File inner = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2)+\"/\"+id.substring(2,4));\n+        String[] inner_files = inner.list();\n+        if (inner_files!=null && inner_files.length==0) inner.delete();\n+\n+        File outer = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2));\n+        String[] outer_files = outer.list();\n+        if (outer_files!=null && outer_files.length==0) outer.delete();\n+    }\n+\n+    /**\n+     * The file we save our configuration.\n+     */\n+    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n+        return new XmlFile(Fingerprint.getXStream(), file);\n+    }\n+\n+    /**\n+     * Determines the file name from unique id (md5sum).\n+     */\n+    private static @NonNull File getFingerprintFile(@NonNull String id) {\n+        return new File( Jenkins.get().getRootDir(),\n+                \"fingerprints/\"+id.substring(0,2)+'/'+id.substring(2,4)+'/'+id.substring(4)+\".xml\");\n+    }\n+\n+    private static String messageOfParseException(Throwable t) {\n+        if (t instanceof XmlPullParserException || t instanceof EOFException) {\n+            return t.getMessage();\n+        }\n+        Throwable t2 = t.getCause();\n+        if (t2 != null) {\n+            return messageOfParseException(t2);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Used to serialize the range sets (builds) of the fingerprint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTM5ODQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNzozMVrOGfHxBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNzozMVrOGfHxBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NjI3OQ==", "bodyText": "nit: space between get() and {", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435286279", "createdAt": "2020-06-04T14:07:31Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTYwMDIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOToxMTozNVrOGgVYaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOToyMDozOFrOGgVsPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NzkyOA==", "bodyText": "please stick to the same format:\nstart = 0;", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r436557928", "createdAt": "2020-06-08T09:11:35Z", "author": {"login": "StefanSpieker"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,83 +1313,64 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d30cf15c0bf3626ec06de2c04fa9a50bf4071ed"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU2MzAwNg==", "bodyText": "@StefanSpieker Thanks for pointing it out :) Fixed!", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r436563006", "createdAt": "2020-06-08T09:20:38Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,83 +1313,64 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NzkyOA=="}, "originalCommit": {"oid": "5d30cf15c0bf3626ec06de2c04fa9a50bf4071ed"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDcxMDAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoyNDo0MFrOGhG1og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoyMDo1NFrOGhJdPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2ODIyNg==", "bodyText": "BTW please avoid gratuitous reformatting of otherwise untouched code.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437368226", "createdAt": "2020-06-09T12:24:40Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1239,34 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) {\n+            return;\n+        }\n \n-        long start=0;\n+        long start = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwMzE1Mw==", "bodyText": "@jglick Thank you so much for reviewing! #4731 (comment)\nI changed it because of feedback, Ill change it back, no worries :)", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437403153", "createdAt": "2020-06-09T13:09:39Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1239,34 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) {\n+            return;\n+        }\n \n-        long start=0;\n+        long start = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2ODIyNg=="}, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxMTEzMg==", "bodyText": "To be clear, the new format is closer to typical styleguides, I just advise keeping PR diffs as small as practical; if there is a desire to clean up formatting of code, better to do that in dedicated PRs.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437411132", "createdAt": "2020-06-09T13:20:54Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1239,34 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) {\n+            return;\n+        }\n \n-        long start=0;\n+        long start = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2ODIyNg=="}, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDcyNzM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/FingerprintCleanupThread.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoyNzoxOFrOGhG-_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoyNzoxOFrOGhG-_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3MDYyMw==", "bodyText": "This whole task should be suppressed if not using FileFingerprintStorage.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437370623", "createdAt": "2020-06-09T12:27:18Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/FingerprintCleanupThread.java", "diffHunk": "@@ -130,7 +131,7 @@ private boolean check(File fingerprintFile, TaskListener listener) {\n     }\n \n     protected Fingerprint loadFingerprint(File fingerprintFile) throws IOException {\n-        return Fingerprint.load(fingerprintFile);\n+        return FileFingerprintStorage.load(fingerprintFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDcyOTMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoyNzo0MFrOGhHAVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoyNzo0MFrOGhHAVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3MDk2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Restricted(Beta.class)\n          \n          \n            \n            @Restricted(NoExternalUse.class)", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437370967", "createdAt": "2020-06-09T12:27:40Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDc1NzE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozMjoxOFrOGhHQaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozMjoxOFrOGhHQaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NTA4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"jenkins.fingerprints.FileFingerprintStorage\");\n          \n          \n            \n                            FileFingerprintStorage.class.getName());", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437375080", "createdAt": "2020-06-09T12:32:18Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"jenkins.fingerprints.FileFingerprintStorage\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDc2NTA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozMzo1M1rOGhHVyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozMzo1M1rOGhHVyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NjQ1Nw==", "bodyText": "Unsafe, this will return null rather than fall back to FileFingerprintStorage. I would suggest simply\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);\n          \n          \n            \n                    return ExtensionList.lookup(FingerprintStorage.class).get(0);\n          \n      \n    \n    \n  \n\nand let Extension.ordinal be used to control which implementation is used. If you want users to select a storage system beyond merely installing a plugin, then introduce a GlobalConfiguration.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437376457", "createdAt": "2020-06-09T12:33:53Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"jenkins.fingerprints.FileFingerprintStorage\");\n+        return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDc2NzE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozNDoxMVrOGhHW5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozNDoxMVrOGhHW5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3Njc0Mw==", "bodyText": "Define the ID. @link etc.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437376743", "createdAt": "2020-06-09T12:34:11Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"jenkins.fingerprints.FileFingerprintStorage\");\n+        return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in the storage.\n+     */\n+    public abstract void save(Fingerprint fp) throws IOException;\n+\n+    /**\n+     * Returns the Fingerprint with the given unique ID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDc2OTAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozNDozOVrOGhHX_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTozNzowNFrOGhZWOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzAyMA==", "bodyText": "Can this return null?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437377020", "createdAt": "2020-06-09T12:34:39Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"jenkins.fingerprints.FileFingerprintStorage\");\n+        return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in the storage.\n+     */\n+    public abstract void save(Fingerprint fp) throws IOException;\n+\n+    /**\n+     * Returns the Fingerprint with the given unique ID.\n+     */\n+    public abstract Fingerprint load(String id) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3MTQ4MQ==", "bodyText": "Yes, added annotation", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437671481", "createdAt": "2020-06-09T19:37:04Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"jenkins.fingerprints.FileFingerprintStorage\");\n+        return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in the storage.\n+     */\n+    public abstract void save(Fingerprint fp) throws IOException;\n+\n+    /**\n+     * Returns the Fingerprint with the given unique ID.\n+     */\n+    public abstract Fingerprint load(String id) throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzAyMA=="}, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDc3MTEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozNToxMFrOGhHZNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTo0MzoxMlrOGjIvqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzMzMw==", "bodyText": "Is this a blocking operation\u2014does it really need to throw IOException or can we just assume it is queued for save?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437377333", "createdAt": "2020-06-09T12:35:10Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"jenkins.fingerprints.FileFingerprintStorage\");\n+        return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in the storage.\n+     */\n+    public abstract void save(Fingerprint fp) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3MTMyOQ==", "bodyText": "IIUC it doesn't seem to get queued for saving. In the old implementation also it throws IOException", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437671329", "createdAt": "2020-06-09T19:36:48Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"jenkins.fingerprints.FileFingerprintStorage\");\n+        return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in the storage.\n+     */\n+    public abstract void save(Fingerprint fp) throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzMzMw=="}, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NjYxOA==", "bodyText": "Suggest documenting expectations around the behavior of this method. Is it required to flush data to durable storage, or can it just add the fingerprint to a save queue?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439496618", "createdAt": "2020-06-12T15:43:12Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"jenkins.fingerprints.FileFingerprintStorage\");\n+        return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in the storage.\n+     */\n+    public abstract void save(Fingerprint fp) throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzMzMw=="}, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzc3MDY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxMDozN1rOGjHpew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToyMDo0NVrOGjH_Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODY1MQ==", "bodyText": "Still todo? This seems like a simple getter :)", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439478651", "createdAt": "2020-06-12T15:10:37Z", "author": {"login": "afalko"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1193,6 +1189,15 @@ public int size() {\n         };\n     }\n \n+    /**\n+     * Returns the persisted facets.\n+     *\n+     * @since TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4NDI0Nw==", "bodyText": "Hi @afalko, this method is not TODO, this is just a new public API that is being offered, so when it gets released it will automatically be replaced by the Jenkins version (kind of an annotation)", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439484247", "createdAt": "2020-06-12T15:20:45Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1193,6 +1189,15 @@ public int size() {\n         };\n     }\n \n+    /**\n+     * Returns the persisted facets.\n+     *\n+     * @since TODO", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODY1MQ=="}, "originalCommit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzc3MjM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxMTowN1rOGjHqmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1NzoxMlrOGjM8CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODkzNg==", "bodyText": "Curlies around this if please", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439478936", "createdAt": "2020-06-12T15:11:07Z", "author": {"login": "afalko"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1239,34 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) {\n+            return;\n+        }\n \n-        long start=0;\n+        long start = 0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n-        File file = getFingerprintFile(md5sum);\n-        save(file);\n-        SaveableListener.fireOnChange(this, getConfigFile(file));\n+        // Implementations are expected to invoke SaveableListener on their own if relevant\n+        // TODO: Consider improving Saveable Listener API: https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        FingerprintStorage.get().save(this);\n \n         if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            logger.fine(\"Saving fingerprint \" + getHashString() + \" took \" + (System.currentTimeMillis() - start) + \"ms\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5ODIzNQ==", "bodyText": "@afalko thanks for reviewing :)\nI want to avoid this because of #4731 (comment).\nBut I am happy to add them if you feel", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439498235", "createdAt": "2020-06-12T15:46:09Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1239,34 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) {\n+            return;\n+        }\n \n-        long start=0;\n+        long start = 0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n-        File file = getFingerprintFile(md5sum);\n-        save(file);\n-        SaveableListener.fireOnChange(this, getConfigFile(file));\n+        // Implementations are expected to invoke SaveableListener on their own if relevant\n+        // TODO: Consider improving Saveable Listener API: https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        FingerprintStorage.get().save(this);\n \n         if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            logger.fine(\"Saving fingerprint \" + getHashString() + \" took \" + (System.currentTimeMillis() - start) + \"ms\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODkzNg=="}, "originalCommit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NTMyMA==", "bodyText": "So long as you do it a follow up PR, I'm fine with it", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439565320", "createdAt": "2020-06-12T17:57:12Z", "author": {"login": "afalko"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1239,34 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) {\n+            return;\n+        }\n \n-        long start=0;\n+        long start = 0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n-        File file = getFingerprintFile(md5sum);\n-        save(file);\n-        SaveableListener.fireOnChange(this, getConfigFile(file));\n+        // Implementations are expected to invoke SaveableListener on their own if relevant\n+        // TODO: Consider improving Saveable Listener API: https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        FingerprintStorage.get().save(this);\n \n         if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            logger.fine(\"Saving fingerprint \" + getHashString() + \" took \" + (System.currentTimeMillis() - start) + \"ms\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODkzNg=="}, "originalCommit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzc4MDA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxMzoyNFrOGjHviQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxMzoyNFrOGjHviQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MDIwMQ==", "bodyText": "I think the style is to add spaces around the ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439480201", "createdAt": "2020-06-12T15:13:24Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(NoExternalUse.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists()) {\n+            return null;\n+        }\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzc4NDU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxNDo0MVrOGjHyiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTozNDoxN1rOGjIcbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MDk2OA==", "bodyText": "Do we need to check for null lookup?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439480968", "createdAt": "2020-06-12T15:14:41Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ * Note: The ID supplied as arguments in various methods to uniquely identify fingerprints should not contain the\n+ * character '|'.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        return ExtensionList.lookup(FingerprintStorage.class).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MTY5Mg==", "bodyText": "AFAICT, we should not need to because FileFingerprintStorage will get loaded before due to it's ordinality unconditionally, and it should get returned.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439491692", "createdAt": "2020-06-12T15:34:17Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ * Note: The ID supplied as arguments in various methods to uniquely identify fingerprints should not contain the\n+ * character '|'.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        return ExtensionList.lookup(FingerprintStorage.class).get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MDk2OA=="}, "originalCommit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzc4OTk1OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/hudson/model/FingerprintCleanupThreadTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxNjoxM1rOGjH12Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwNjoyOTo1MlrOGjWCKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MTgxNw==", "bodyText": "better to name jenkinsRule", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439481817", "createdAt": "2020-06-12T15:16:13Z", "author": {"login": "afalko"}, "path": "test/src/test/java/hudson/model/FingerprintCleanupThreadTest.java", "diffHunk": "@@ -52,6 +54,9 @@\n     private Path tempDirectory;\n     private Path fpFile;\n \n+    @Rule\n+    public JenkinsRule j = new JenkinsRule();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4Njg4OQ==", "bodyText": "@afalko I would agree with naming it jenkinsRule, but it seems like this is pretty common (standard-ish) in the codebase [src] .\nLet me know your thoughts, I have no issues in changing :)", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439486889", "createdAt": "2020-06-12T15:25:28Z", "author": {"login": "stellargo"}, "path": "test/src/test/java/hudson/model/FingerprintCleanupThreadTest.java", "diffHunk": "@@ -52,6 +54,9 @@\n     private Path tempDirectory;\n     private Path fpFile;\n \n+    @Rule\n+    public JenkinsRule j = new JenkinsRule();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MTgxNw=="}, "originalCommit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MTE4NQ==", "bodyText": "Sheep will follow other sheep off a cliff :p. Its not a big deal in this case, and is a non-blocking suggestion.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439491185", "createdAt": "2020-06-12T15:33:17Z", "author": {"login": "afalko"}, "path": "test/src/test/java/hudson/model/FingerprintCleanupThreadTest.java", "diffHunk": "@@ -52,6 +54,9 @@\n     private Path tempDirectory;\n     private Path fpFile;\n \n+    @Rule\n+    public JenkinsRule j = new JenkinsRule();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MTgxNw=="}, "originalCommit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MzM0OQ==", "bodyText": "I have tended to use r FWIW.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439493349", "createdAt": "2020-06-12T15:37:25Z", "author": {"login": "jglick"}, "path": "test/src/test/java/hudson/model/FingerprintCleanupThreadTest.java", "diffHunk": "@@ -52,6 +54,9 @@\n     private Path tempDirectory;\n     private Path fpFile;\n \n+    @Rule\n+    public JenkinsRule j = new JenkinsRule();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MTgxNw=="}, "originalCommit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNDM0NQ==", "bodyText": "Thanks @afalko I have updated it to jenkinsRule :)", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439714345", "createdAt": "2020-06-13T06:29:52Z", "author": {"login": "stellargo"}, "path": "test/src/test/java/hudson/model/FingerprintCleanupThreadTest.java", "diffHunk": "@@ -52,6 +54,9 @@\n     private Path tempDirectory;\n     private Path fpFile;\n \n+    @Rule\n+    public JenkinsRule j = new JenkinsRule();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MTgxNw=="}, "originalCommit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzg2NDY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTozODozM1rOGjIlng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwODoxODowNFrOGjWacA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NDA0Ng==", "bodyText": "Why is that? Could the reference implementation simply escape such a character if it is ever used?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439494046", "createdAt": "2020-06-12T15:38:33Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -30,12 +30,13 @@\n import java.io.IOException;\n \n import hudson.model.Fingerprint;\n-import jenkins.util.SystemProperties;\n import org.kohsuke.accmod.restrictions.Beta;\n import org.kohsuke.accmod.Restricted;\n \n /**\n  * Pluggable fingerprint storage API for fingerprints.\n+ * Note: The ID supplied as arguments in various methods to uniquely identify fingerprints should not contain the\n+ * character '|'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db532e9c174e1cbf2b32a00040a809f7c33e36ae"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyMDU2MA==", "bodyText": "The reason is that I need a safe delimeter for combining instance ID with the fingerprint ID.\nIIUC, if I escape all | I could do something like\nString id= \"004|034556\"; // Fingerprint's ID\nString instanceID = \"abcdef\"; // safe\nString identifier = id.replace(\"|\",\"\\\\|\") + \"|\" + instanceID; // Escaped the character |\n\n// store identifier\n// ...\n// fetch identifier\n\nString parts = identifier.split(\"(?<!\\\\\\\\)\\\\|\"); // Split on unescaped |\nString id = parts[0].replace(\"\\\\|\", \"|\"); // Unescape\nString identifier = parts[1];\n\nCC @oleg-nenashev @afalko @mikecirioli", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439720560", "createdAt": "2020-06-13T08:18:04Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -30,12 +30,13 @@\n import java.io.IOException;\n \n import hudson.model.Fingerprint;\n-import jenkins.util.SystemProperties;\n import org.kohsuke.accmod.restrictions.Beta;\n import org.kohsuke.accmod.Restricted;\n \n /**\n  * Pluggable fingerprint storage API for fingerprints.\n+ * Note: The ID supplied as arguments in various methods to uniquely identify fingerprints should not contain the\n+ * character '|'.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NDA0Ng=="}, "originalCommit": {"oid": "db532e9c174e1cbf2b32a00040a809f7c33e36ae"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTU4NTYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODozODozNFrOGkRKaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODozODozNFrOGkRKaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4MzExMg==", "bodyText": "It is rather important to provide guidelines what to do here.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r440683112", "createdAt": "2020-06-16T08:38:34Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1239,34 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) {\n+            return;\n+        }\n \n         long start=0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n-        File file = getFingerprintFile(md5sum);\n-        save(file);\n-        SaveableListener.fireOnChange(this, getConfigFile(file));\n+        // Implementations are expected to invoke SaveableListener on their own if relevant\n+        // TODO: Consider improving Saveable Listener API: https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        FingerprintStorage.get().save(this);\n \n         if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            logger.fine(\"Saving fingerprint \" + getHashString() + \" took \" + (System.currentTimeMillis() - start) + \"ms\");\n     }\n \n+    /**\n+     * Save the Fingerprint in the given file locally\n+     * @throws IOException Save error\n+     * @deprecated as of TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7923ce298718a663628fbba731e1735fc1553be8"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTU4NjgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODozODo1MlrOGkRLLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODozODo1MlrOGkRLLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4MzMxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n          \n          \n            \n                 * @return Loaded {@link Fingerprint}. {@code null} if the config file does not exist or", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r440683310", "createdAt": "2020-06-16T08:38:52Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,83 +1313,64 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7923ce298718a663628fbba731e1735fc1553be8"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTU5MDkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODozOTo1NlrOGkRN4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODozOTo1NlrOGkRN4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4NDAwMA==", "bodyText": "Same as above, guidelines are needed. I would also keep the existing API documentation even if it is deprecated\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @deprecated as of TODO\n          \n          \n            \n                 * Determines the file name from md5sum.\n          \n          \n            \n                 * @deprecated as of TODO", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r440684000", "createdAt": "2020-06-16T08:39:56Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,83 +1313,64 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE)) {\n+            start = System.currentTimeMillis();\n+        }\n+\n+        Fingerprint loaded = FingerprintStorage.get().load(id);\n+        initFacets(loaded);\n+\n+        if(logger.isLoggable(Level.FINE)) {\n+            logger.fine(\"Loading fingerprint took \" + (System.currentTimeMillis() - start) + \"ms\");\n+        }\n+\n+        return loaded;\n     }\n \n     /**\n-     * Determines the file name from md5sum.\n+     * @deprecated as of TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7923ce298718a663628fbba731e1735fc1553be8"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTU5MTcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODo0MDowN1rOGkROVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODo0MDowN1rOGkROVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4NDExOA==", "bodyText": "same", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r440684118", "createdAt": "2020-06-16T08:40:07Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,83 +1313,64 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE)) {\n+            start = System.currentTimeMillis();\n+        }\n+\n+        Fingerprint loaded = FingerprintStorage.get().load(id);\n+        initFacets(loaded);\n+\n+        if(logger.isLoggable(Level.FINE)) {\n+            logger.fine(\"Loading fingerprint took \" + (System.currentTimeMillis() - start) + \"ms\");\n+        }\n+\n+        return loaded;\n     }\n \n     /**\n-     * Determines the file name from md5sum.\n+     * @deprecated as of TODO\n      */\n-    private static @NonNull File getFingerprintFile(@NonNull byte[] md5sum) {\n-        assert md5sum.length==16;\n-        return new File( Jenkins.get().getRootDir(),\n-            \"fingerprints/\"+ Util.toHexString(md5sum,0,1)+'/'+Util.toHexString(md5sum,1,1)+'/'+Util.toHexString(md5sum,2,md5sum.length-2)+\".xml\");\n+    @Deprecated\n+    /*package*/ static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+        return load(Util.toHexString(md5sum));\n     }\n \n     /**\n-     * Loads a {@link Fingerprint} from a file in the image.\n-     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n-     * malformed.\n+     * @deprecated as of TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7923ce298718a663628fbba731e1735fc1553be8"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTYwMDkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/FingerprintCleanupThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTowOTowM1rOGlz16g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzo1MDozMVrOGl6AsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5OTg4Mg==", "bodyText": "is there no API for this in external or just not needed?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442299882", "createdAt": "2020-06-18T15:09:03Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/model/FingerprintCleanupThread.java", "diffHunk": "@@ -71,6 +75,12 @@ private static FingerprintCleanupThread getInstance() {\n     }\n \n     public void execute(TaskListener listener) {\n+        Object fingerprintStorage = FingerprintStorage.get();\n+        if (!(fingerprintStorage instanceof FileFingerprintStorage)) {\n+            LOGGER.fine(\"External fingerprint storage is configured. Skipping execution\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2306ff578289cb9e1ce75c69bba9202b55c93af"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMDk0NQ==", "bodyText": "@timja thanks for reviewing :) We currently do not have an API that can support fingerprint cleanup in external storages, something we will be tackling in the next few weeks :)\nAs of now, we limit the execution of fingerprint cleanup only when the default file based storage is configured", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442400945", "createdAt": "2020-06-18T17:50:31Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/hudson/model/FingerprintCleanupThread.java", "diffHunk": "@@ -71,6 +75,12 @@ private static FingerprintCleanupThread getInstance() {\n     }\n \n     public void execute(TaskListener listener) {\n+        Object fingerprintStorage = FingerprintStorage.get();\n+        if (!(fingerprintStorage instanceof FileFingerprintStorage)) {\n+            LOGGER.fine(\"External fingerprint storage is configured. Skipping execution\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5OTg4Mg=="}, "originalCommit": {"oid": "b2306ff578289cb9e1ce75c69bba9202b55c93af"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTYwNzE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxMDozM1rOGlz5uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxMDozM1rOGlz5uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMDg1Ng==", "bodyText": "could update this reference while moving it\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n          \n          \n            \n                            // but if the file size is 0, which is what's reported in JENKINS-2012, then it seems", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442300856", "createdAt": "2020-06-18T15:10:33Z", "author": {"login": "timja"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(NoExternalUse.class)\n+@Extension(ordinal=-100)\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists()) {\n+            return null;\n+        }\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length() == 0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2306ff578289cb9e1ce75c69bba9202b55c93af"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTYxNTA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxMjoyM1rOGlz-rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzo1Mzo0NFrOGl6HxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMjEyNg==", "bodyText": "there's certainly nicer ways to print this, but not worth doing in this PR \ud83d\udc4d", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442302126", "createdAt": "2020-06-18T15:12:23Z", "author": {"login": "timja"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(NoExternalUse.class)\n+@Extension(ordinal=-100)\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists()) {\n+            return null;\n+        }\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length() == 0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \" + configFile, e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2306ff578289cb9e1ce75c69bba9202b55c93af"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMjc1Ng==", "bodyText": "I agree, this is just code that has been moved to a new class, so don't want to break what works :P", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442402756", "createdAt": "2020-06-18T17:53:44Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(NoExternalUse.class)\n+@Extension(ordinal=-100)\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists()) {\n+            return null;\n+        }\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length() == 0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \" + configFile, e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMjEyNg=="}, "originalCommit": {"oid": "b2306ff578289cb9e1ce75c69bba9202b55c93af"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTYxNzQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxMjo1N1rOGl0AJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxMjo1N1rOGl0AJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMjUwMg==", "bodyText": "could rename this var to follow java naming standards\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String[] inner_files = inner.list();\n          \n          \n            \n                    String[] innerFiles = inner.list();", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442302502", "createdAt": "2020-06-18T15:12:57Z", "author": {"login": "timja"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(NoExternalUse.class)\n+@Extension(ordinal=-100)\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists()) {\n+            return null;\n+        }\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length() == 0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \" + configFile, e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) throws IOException {\n+        File file = getFingerprintFile(id);\n+        if (!file.exists()) {\n+            return;\n+        }\n+\n+        if (!file.delete()) {\n+            throw new IOException(\"Error occurred in deleting Fingerprint \" + id);\n+        }\n+\n+        File inner = new File(Jenkins.get().getRootDir(), \"fingerprints/\" + id.substring(0,2) + \"/\" + id.substring(2,4));\n+        String[] inner_files = inner.list();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2306ff578289cb9e1ce75c69bba9202b55c93af"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTYyNTA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxNDo1M1rOGl0FFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzo1NzoyMVrOGl6PWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMzc2NA==", "bodyText": "This doesn't seem to be the configured one? afaict it's the first one and you've set the file one to have low priority so that an external one gets picked up first\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns the configured FingerprintStorage for the instance.\n          \n          \n            \n                 * Returns the first implementation of FingerprintStorage for the instance.\n          \n          \n            \n                 * Implementation ordering is done via the ordinal attribute on the Extension", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442303764", "createdAt": "2020-06-18T15:14:53Z", "author": {"login": "timja"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2306ff578289cb9e1ce75c69bba9202b55c93af"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwNDY5OQ==", "bodyText": "Thanks for pointing that out @timja!", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442404699", "createdAt": "2020-06-18T17:57:21Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMzc2NA=="}, "originalCommit": {"oid": "b2306ff578289cb9e1ce75c69bba9202b55c93af"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjA4NzUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoyMzoyMlrOG3YaCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoyMzoyMlrOG3YaCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcyNDc0NQ==", "bodyText": "This entire class needs an @since TODO, same with FileFingerprintStorage.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r460724745", "createdAt": "2020-07-27T08:23:22Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b40ecd1844fc5a250fb1f0a3e0c71ebc5dfd22c4"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjA5NzM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Fingerprint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoyNTo0OVrOG3Yfqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoyNTo0OVrOG3Yfqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcyNjE4Nw==", "bodyText": "@since?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r460726187", "createdAt": "2020-07-27T08:25:49Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,83 +1313,68 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. {@code null} if the config file does not exist or\n+     * malformed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b40ecd1844fc5a250fb1f0a3e0c71ebc5dfd22c4"}, "originalPosition": 172}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 571, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}