{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NzA2NzIz", "number": 5082, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjoxNToxNVrOE-Hssw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjoxNToxNVrOE-Hssw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNTczMjk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Queue.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjoxNToxNVrOH7KVHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMDowMzoxMVrOII-G7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5NzI3Ng==", "bodyText": "Putting null to reasonMap is expected IIUC\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    CauseOfBlockage reason;\n          \n          \n            \n                                    if (reasonMap.containsKey(offerNode)) {\n          \n          \n            \n                                        reason = reasonMap.get(offerNode);\n          \n          \n            \n                                    } else {\n          \n          \n            \n                                        reason = j.getCauseOfBlockage(p);\n          \n          \n            \n                                        reasonMap.put(offerNode, reason);\n          \n          \n            \n                                    }\n          \n          \n            \n                                    CauseOfBlockage reason = reasonMap.get(offerNode);\n          \n          \n            \n                                    if (reason == null) {\n          \n          \n            \n                                        reason = j.getCauseOfBlockage(p);\n          \n          \n            \n                                        reasonMap.put(offerNode, reason);\n          \n          \n            \n                                    }", "url": "https://github.com/jenkinsci/jenkins/pull/5082#discussion_r531797276", "createdAt": "2020-11-27T22:15:15Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Queue.java", "diffHunk": "@@ -1631,17 +1632,23 @@ public void maintain() {\n                 } else {\n \n                     List<JobOffer> candidates = new ArrayList<>(parked.size());\n-                    List<CauseOfBlockage> reasons = new ArrayList<>(parked.size());\n+                    Map<Node, CauseOfBlockage> reasonMap = new HashMap<>();\n                     for (JobOffer j : parked.values()) {\n-                        CauseOfBlockage reason = j.getCauseOfBlockage(p);\n+                        Node offerNode = j.getNode();\n+                        CauseOfBlockage reason;\n+                        if (reasonMap.containsKey(offerNode)) {\n+                            reason = reasonMap.get(offerNode);\n+                        } else {\n+                            reason = j.getCauseOfBlockage(p);\n+                            reasonMap.put(offerNode, reason);\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "168fe1857799f10eef243d5996e894a71b980728"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0NDc0Nw==", "bodyText": "Its ok to have nulls as values as the reason can be null so the suggested version will call getCauseOfBlockage more than once", "url": "https://github.com/jenkinsci/jenkins/pull/5082#discussion_r532044747", "createdAt": "2020-11-28T14:14:31Z", "author": {"login": "res0nance"}, "path": "core/src/main/java/hudson/model/Queue.java", "diffHunk": "@@ -1631,17 +1632,23 @@ public void maintain() {\n                 } else {\n \n                     List<JobOffer> candidates = new ArrayList<>(parked.size());\n-                    List<CauseOfBlockage> reasons = new ArrayList<>(parked.size());\n+                    Map<Node, CauseOfBlockage> reasonMap = new HashMap<>();\n                     for (JobOffer j : parked.values()) {\n-                        CauseOfBlockage reason = j.getCauseOfBlockage(p);\n+                        Node offerNode = j.getNode();\n+                        CauseOfBlockage reason;\n+                        if (reasonMap.containsKey(offerNode)) {\n+                            reason = reasonMap.get(offerNode);\n+                        } else {\n+                            reason = j.getCauseOfBlockage(p);\n+                            reasonMap.put(offerNode, reason);\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5NzI3Ng=="}, "originalCommit": {"oid": "168fe1857799f10eef243d5996e894a71b980728"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzEwMg==", "bodyText": "OK", "url": "https://github.com/jenkinsci/jenkins/pull/5082#discussion_r546277102", "createdAt": "2020-12-19T20:03:11Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Queue.java", "diffHunk": "@@ -1631,17 +1632,23 @@ public void maintain() {\n                 } else {\n \n                     List<JobOffer> candidates = new ArrayList<>(parked.size());\n-                    List<CauseOfBlockage> reasons = new ArrayList<>(parked.size());\n+                    Map<Node, CauseOfBlockage> reasonMap = new HashMap<>();\n                     for (JobOffer j : parked.values()) {\n-                        CauseOfBlockage reason = j.getCauseOfBlockage(p);\n+                        Node offerNode = j.getNode();\n+                        CauseOfBlockage reason;\n+                        if (reasonMap.containsKey(offerNode)) {\n+                            reason = reasonMap.get(offerNode);\n+                        } else {\n+                            reason = j.getCauseOfBlockage(p);\n+                            reasonMap.put(offerNode, reason);\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5NzI3Ng=="}, "originalCommit": {"oid": "168fe1857799f10eef243d5996e894a71b980728"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 127, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}