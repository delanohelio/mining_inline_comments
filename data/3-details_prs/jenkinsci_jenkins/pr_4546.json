{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NDM1MjY2", "number": 4546, "title": "Manage Jenkins with flow layout and categories", "bodyText": "New layout for the Manage Jenkins page, including categories.\nConsidering this quasi work in progress because the categories are sort of ad hoc. Suggestions for categories, and association of items into categories, is welcome.\nPlugin adaptation PoC: jenkinsci/credentials-plugin#139, result depicted in screenshots below.\nScreenshots\n\nClick to view\n\n\n\n\nProposed changelog entries\n\nOrganize entries on the Manage Jenkins page into categories and show them in a grid\nAdd ManagementLink#getCategory() for entries on Manage Jenkins to be grouped into category. See the ManagementLink.Category enum for supported return values.\n\nProposed upgrade guidelines\nN/A\nSubmitter checklist\n\n[n/a] JIRA issue is well described\n Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). Examples\n\nFill-in the Proposed changelog entries section only if there are breaking changes or other changes which may require extra steps from users during the upgrade\n\n\n Appropriate autotests or explanation to why this change has no tests\n[n/a] For dependency updates: links to external changelogs and, if possible, full diffs\n\n\nDesired reviewers\n@mention\n\nMaintainer checklist\nBefore the changes are marked as ready-for-merge:\n\n There are at least 2 approvals for the pull request and no outstanding requests for change\n Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n Changelog entries in the PR title and/or Proposed changelog entries are correct\n Proper changelog labels are set so that the changelog can be generated automatically\n If the change needs additional upgrade steps from users, upgrade-guide-needed label is set and there is a Proposed upgrade guidelines section in the PR title. (example)\n If it would make sense to backport the change to LTS, a JIRA issue should exist and be labeled as lts-candidate", "createdAt": "2020-03-05T18:33:13Z", "url": "https://github.com/jenkinsci/jenkins/pull/4546", "merged": true, "mergeCommit": {"oid": "6de7e5fc7f6fb2e2e4cb342461788f97e3dfd8f6"}, "closed": true, "closedAt": "2020-03-14T09:48:46Z", "author": {"login": "daniel-beck"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKv3dDAH2gAyMzg0NDM1MjY2OjYxZGZlYWYxMTNlYWEzYzhkNDc1ZjJkOTBiMjI2M2Y2NTBmMzJlYWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp9B81gFqTQyODI3Mzc3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/61dfeaf113eaa3c8d475f2d90b2263f650f32eaa", "committedDate": "2020-03-05T18:31:26Z", "message": "Manage Jenkins with flow layout and categories\n\nCo-authored-by: F\u00e9lix Queiruga <fqueiruga@cloudbees.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c8165285ec0fe352da6c71acda1321e8d9f08b8", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/5c8165285ec0fe352da6c71acda1321e8d9f08b8", "committedDate": "2020-03-05T21:18:16Z", "message": "Adapt XPath to handle additional classes in HTML"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTAyMjcy", "url": "https://github.com/jenkinsci/jenkins/pull/4546#pullrequestreview-369902272", "createdAt": "2020-03-05T20:47:30Z", "commit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo0NzozMVrOFyjk_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTowNjoxMlrOFykJgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NjAyOQ==", "bodyText": "allowing older plugins to do this means we loose the possibility of using an enum for ever.\nhow about a protected method getCategoryString() that subclasses can implement that returns the string and this method calls that, or document some reflection in this javadoc that they can use?\n/**\n * @deprecated only use this if you want to defined a category for a managementLink and not depend on a newer core.\n */\nprotected String getCategoryString() {\n  return Category.UNCATEGORIZED.toString();\n}\n\npublic @nonnull String getCategory() {\n   try { \n       return Category.valueOf(getCategoryString());\n    } catch (IllegalArgumentException | NullPointerExcepton ex) {\n        Logger.log(Level.WARNING, \"invalid category {0} for class {1}\", new Object[]{getCategoryString() , this.getClass().getName()});\n    }\n        return Category.UNCATEGORIZED;\n}\nor\n/**\n * Category for management link.\n * to define a category without depending on a newer core version use the following code.\n * {@code  /* left as an excersize if deemed this is a useful way forward */ }\n */\npublic @nonnull String getCategory() {\n   return Category.UNCATEGORIZED;;\n}", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388556029", "createdAt": "2020-03-05T20:47:31Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NjI2Ng==", "bodyText": "implying you can add more - which means the string return above may return something that is not even in the enum from a \"bad\" plugin..", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388556266", "createdAt": "2020-03-05T20:48:00Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull String getCategory() {\n+        return Category.UNCATEGORIZED.toString();\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1ODkxNA==", "bodyText": "just inline this in the enum?\n    public enum Category {\n        CONFIGURATION(Messages._ManagementLink_Category_CONFIGURATION()),\n        SECURITY(Messages._ManagementLink_Category_SECURITY());\n        //.....\n        \n        private Localizable label;\n\n        Category(Localizable label) {\n           this.label = label);\n        }\n        public Sting getLabel() {\n            return label.toString();\n        }\n}", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388558914", "createdAt": "2020-03-05T20:52:54Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull String getCategory() {\n+        return Category.UNCATEGORIZED.toString();\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.\n+     *\n+     * @since TODO\n+     */\n+    public enum Category {\n+        CONFIGURATION,\n+        SECURITY,\n+        STATUS,\n+        TROUBLESHOOTING,\n+        TOOLS,\n+        MISC,\n+        UNCATEGORIZED;\n+\n+        public @Nonnull String getLabel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTM3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    MISC,\n          \n          \n            \n                    MISCELLANEOUS,", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388565377", "createdAt": "2020-03-05T21:06:12Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull String getCategory() {\n+        return Category.UNCATEGORIZED.toString();\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.\n+     *\n+     * @since TODO\n+     */\n+    public enum Category {\n+        CONFIGURATION,\n+        SECURITY,\n+        STATUS,\n+        TROUBLESHOOTING,\n+        TOOLS,\n+        MISC,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTI5MzM5", "url": "https://github.com/jenkinsci/jenkins/pull/4546#pullrequestreview-369929339", "createdAt": "2020-03-05T21:31:23Z", "commit": {"oid": "5c8165285ec0fe352da6c71acda1321e8d9f08b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTozMToyNFrOFyk5hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTozMToyNFrOFyk5hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3NzY3MQ==", "bodyText": "need to catch nullPointerException unless you switch to my proposed way (as there are no annotations for plugins not upgrading core and they could heaven forbid return null without any compiler warnng)", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388577671", "createdAt": "2020-03-05T21:31:24Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/jenkins/model/Jenkins.java", "diffHunk": "@@ -4705,6 +4705,29 @@ public DependencyGraph getDependencyGraph() {\n     public List<ManagementLink> getManagementLinks() {\n         return ManagementLink.all();\n     }\n+\n+    // for Jelly\n+    @Restricted(NoExternalUse.class)\n+    public Map<ManagementLink.Category, List<ManagementLink>> getCategorizedManagementLinks() {\n+        Map<ManagementLink.Category, List<ManagementLink>> byCategory = new TreeMap<>();\n+        for (ManagementLink link : ManagementLink.all()) {\n+            if (link.getIconFileName() == null) {\n+                continue;\n+            }\n+            if (!Jenkins.get().hasPermission(link.getRequiredPermission())) {\n+                continue;\n+            }\n+            String categoryName = link.getCategory();\n+            ManagementLink.Category category;\n+            try {\n+                category = ManagementLink.Category.valueOf(categoryName);\n+            } catch (IllegalArgumentException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c8165285ec0fe352da6c71acda1321e8d9f08b8"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9", "committedDate": "2020-03-05T22:13:08Z", "message": "Make this less stringy\n\nCo-authored-by: James Nord <jtnord@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTU3MzQ4", "url": "https://github.com/jenkinsci/jenkins/pull/4546#pullrequestreview-369957348", "createdAt": "2020-03-05T22:21:30Z", "commit": {"oid": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjoyMTozMFrOFymWyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjoyMTozMFrOFymWyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMTU0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (RuntimeException e) {\n          \n          \n            \n                    } catch (RuntimeException | NullPointerException e) {\n          \n      \n    \n    \n  \n\ngiven the plugins are not overriding getCategoryName as far as javac is concerned at compile time. (better than blowing up...)", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388601546", "createdAt": "2020-03-05T22:21:30Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +137,58 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works\n+    protected @Nonnull String getCategoryName() {\n+        return \"UNCATEGORIZED\";\n+    }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull Category getCategory() {\n+        try {\n+            return Category.valueOf(getCategoryName());\n+        } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTc4MzA0", "url": "https://github.com/jenkinsci/jenkins/pull/4546#pullrequestreview-369978304", "createdAt": "2020-03-05T23:09:16Z", "commit": {"oid": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTk2NTUw", "url": "https://github.com/jenkinsci/jenkins/pull/4546#pullrequestreview-369996550", "createdAt": "2020-03-06T00:00:16Z", "commit": {"oid": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMTMwNDUx", "url": "https://github.com/jenkinsci/jenkins/pull/4546#pullrequestreview-370130451", "createdAt": "2020-03-06T07:41:42Z", "commit": {"oid": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMjIxMjUx", "url": "https://github.com/jenkinsci/jenkins/pull/4546#pullrequestreview-370221251", "createdAt": "2020-03-06T10:25:42Z", "commit": {"oid": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMjc2MTkz", "url": "https://github.com/jenkinsci/jenkins/pull/4546#pullrequestreview-370276193", "createdAt": "2020-03-06T12:08:13Z", "commit": {"oid": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjowODoxNFrOFy2m-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjowODoxNFrOFy2m-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg2NzgzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // TODO: set padding", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388867835", "createdAt": "2020-03-06T12:08:14Z", "author": {"login": "fqueiruga"}, "path": "war/src/main/less/modules/manage-jenkins.less", "diffHunk": "@@ -0,0 +1,25 @@\n+.manage-page__row {\n+  display: block;\n+  display: flex;\n+  flex-wrap: wrap;\n+}\n+.manage-page__column {\n+  width: 100%;\n+  // TODO: set padding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMjc2MjY0", "url": "https://github.com/jenkinsci/jenkins/pull/4546#pullrequestreview-370276264", "createdAt": "2020-03-06T12:08:24Z", "commit": {"oid": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjowODoyNFrOFy2nLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjowODoyNFrOFy2nLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg2Nzg4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // TODO: set margin bottom", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388867887", "createdAt": "2020-03-06T12:08:24Z", "author": {"login": "fqueiruga"}, "path": "war/src/main/less/modules/manage-jenkins.less", "diffHunk": "@@ -0,0 +1,25 @@\n+.manage-page__row {\n+  display: block;\n+  display: flex;\n+  flex-wrap: wrap;\n+}\n+.manage-page__column {\n+  width: 100%;\n+  // TODO: set padding\n+  // TODO: set margin bottom", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d112c015de1663b31dd602631fa67547d3469d8d", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/d112c015de1663b31dd602631fa67547d3469d8d", "committedDate": "2020-03-06T12:18:28Z", "message": "Remove unnecessary TODOs\n\nCo-authored-by: F\u00e9lix Queiruga <fqueiruga@cloudbees.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMjgyMDI3", "url": "https://github.com/jenkinsci/jenkins/pull/4546#pullrequestreview-370282027", "createdAt": "2020-03-06T12:20:05Z", "commit": {"oid": "d112c015de1663b31dd602631fa67547d3469d8d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNDIwMzkz", "url": "https://github.com/jenkinsci/jenkins/pull/4546#pullrequestreview-370420393", "createdAt": "2020-03-06T15:44:09Z", "commit": {"oid": "d112c015de1663b31dd602631fa67547d3469d8d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTo0NDoxMFrOFy9Vyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTo0NDoxMFrOFy9Vyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3ODEyMw==", "bodyText": "does it work or not? \ud83d\ude04", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388978123", "createdAt": "2020-03-06T15:44:10Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +137,58 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d112c015de1663b31dd602631fa67547d3469d8d"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMDEwNDU3", "url": "https://github.com/jenkinsci/jenkins/pull/4546#pullrequestreview-371010457", "createdAt": "2020-03-09T09:20:11Z", "commit": {"oid": "d112c015de1663b31dd602631fa67547d3469d8d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOToyMDoxMlrOFzfmPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOToyMDoxMlrOFzfmPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzOTM5MQ==", "bodyText": "Just to confirm, I'm assuming there can be no instance of showing a category without entries right? Is that why an emptiness check is not needed?", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r389539391", "createdAt": "2020-03-09T09:20:12Z", "author": {"login": "fqueiruga"}, "path": "core/src/main/resources/jenkins/model/Jenkins/manage.jelly", "diffHunk": "@@ -47,11 +47,13 @@ THE SOFTWARE.\n     <st:include page=\"downgrade.jelly\" />\n     </div>\n \n-    <j:forEach var=\"m\" items=\"${it.managementLinks}\">\n-      <l:hasPermission permission=\"${m.requiredPermission}\">\n+    <j:forEach var=\"category\" items=\"${it.categorizedManagementLinks.entrySet()}\">\n+      <h2>${category.key.label}</h2>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d112c015de1663b31dd602631fa67547d3469d8d"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MjczNzc0", "url": "https://github.com/jenkinsci/jenkins/pull/4546#pullrequestreview-428273774", "createdAt": "2020-06-10T17:23:19Z", "commit": {"oid": "d112c015de1663b31dd602631fa67547d3469d8d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzoyMzoxOVrOGh_Clw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzoyMzoxOVrOGh_Clw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4OTA0Nw==", "bodyText": "Now that I think about this, it seems like an oversight as GlobalConfiguration already had a category:\nhttps://github.com/jenkinsci/jenkins/blob/449c5aced523a6e66fe3d6a804e5dbfd5c5c67c6/core/src/main/java/jenkins/model/GlobalConfigurationCategory.java\ncc @basil", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r438289047", "createdAt": "2020-06-10T17:23:19Z", "author": {"login": "jetersen"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +137,58 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works\n+    protected @Nonnull String getCategoryName() {\n+        return \"UNCATEGORIZED\";\n+    }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull Category getCategory() {\n+        try {\n+            return Category.valueOf(getCategoryName());\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.WARNING, \"invalid category {0} for class {1}\", new Object[]{getCategoryName() , this.getClass().getName()});\n+            return Category.UNCATEGORIZED;\n+        }\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.\n+     *\n+     * @since TODO\n+     */\n+    public enum Category {\n+        CONFIGURATION(Messages._ManagementLink_Category_CONFIGURATION()),\n+        SECURITY(Messages._ManagementLink_Category_SECURITY()),\n+        STATUS(Messages._ManagementLink_Category_STATUS()),\n+        TROUBLESHOOTING(Messages._ManagementLink_Category_TROUBLESHOOTING()),\n+        TOOLS(Messages._ManagementLink_Category_TOOLS()),\n+        MISC(Messages._ManagementLink_Category_MISC()),\n+        UNCATEGORIZED(Messages._ManagementLink_Category_UNCATEGORIZED());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d112c015de1663b31dd602631fa67547d3469d8d"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1236, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}