{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5Mzc5NzUz", "number": 4466, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNjowMjoxOFrODcJFOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODo0NTo0MlrOEjfOMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODM1NTE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/ListView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNjowMjoxOFrOFkCFEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNjowMjoxOFrOFkCFEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyNzEyMQ==", "bodyText": "Probably should be refactored", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r373327121", "createdAt": "2020-01-31T06:02:18Z", "author": {"login": "res0nance"}, "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -211,28 +212,57 @@ public boolean hasJobFilterExtensions() {\n         }\n \n         ItemGroup<? extends TopLevelItem> parent = getOwner().getItemGroup();\n-        List<TopLevelItem> parentItems = new ArrayList<>(parent.getItems());\n-        includeItems(parent, parentItems, names);\n \n         Boolean statusFilter = this.statusFilter; // capture the value to isolate us from concurrent update\n-        Iterable<? extends TopLevelItem> candidates;\n+        List<TopLevelItem> allItems;\n         if (recurse) {\n-            candidates = parent.getAllItems(TopLevelItem.class);\n+            allItems = parent.getAllItems(TopLevelItem.class);\n+            for (TopLevelItem item : allItems) {\n+                String itemName = item.getRelativeNameFrom(parent);\n+                for (String name : names) {\n+                    if (itemName.equals(name)) {\n+                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n+                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n+                            items.add(item);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f27fd78edcaf4f99410c8705227afe30df669468"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODM1NjM4OnYy", "diffSide": "LEFT", "path": "core/src/main/java/hudson/model/ListView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNjowMzoyOFrOFkCFzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNjowMzoyOFrOFkCFzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyNzMwOQ==", "bodyText": "Assumed that expand is the same as parent.getAllItems() in this case", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r373327309", "createdAt": "2020-01-31T06:03:28Z", "author": {"login": "res0nance"}, "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -211,28 +212,57 @@ public boolean hasJobFilterExtensions() {\n         }\n \n         ItemGroup<? extends TopLevelItem> parent = getOwner().getItemGroup();\n-        List<TopLevelItem> parentItems = new ArrayList<>(parent.getItems());\n-        includeItems(parent, parentItems, names);\n \n         Boolean statusFilter = this.statusFilter; // capture the value to isolate us from concurrent update\n-        Iterable<? extends TopLevelItem> candidates;\n+        List<TopLevelItem> allItems;\n         if (recurse) {\n-            candidates = parent.getAllItems(TopLevelItem.class);\n+            allItems = parent.getAllItems(TopLevelItem.class);\n+            for (TopLevelItem item : allItems) {\n+                String itemName = item.getRelativeNameFrom(parent);\n+                for (String name : names) {\n+                    if (itemName.equals(name)) {\n+                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n+                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n+                            items.add(item);\n+                        continue;\n+                    }\n+                }\n+                if (includePattern != null) {\n+                    if (includePattern.matcher(itemName).matches()) {\n+                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n+                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n+                            items.add(item);\n+                    }\n+                }\n+            }\n         } else {\n-            candidates = parent.getItems();\n-        }\n-        for (TopLevelItem item : candidates) {\n-            if (!names.contains(item.getRelativeNameFrom(getOwner().getItemGroup()))) continue;\n-            // Add if no status filter or filter matches enabled/disabled status:\n-            if(statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n-                              || ((ParameterizedJobMixIn.ParameterizedJob)item).isDisabled() ^ statusFilter)\n-                items.add(item);\n+            allItems = new ArrayList<>(parent.getItems());\n+            for (String name : names) {\n+                try {\n+                    TopLevelItem i = parent.getItem(name);\n+                    if (i != null) {\n+                        if(statusFilter == null || !(i instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n+                                || ((ParameterizedJobMixIn.ParameterizedJob)i).isDisabled() ^ statusFilter)\n+                            items.add(i);\n+                    }\n+                } catch (AccessDeniedException e) {\n+                    //Ignore\n+                }\n+            }\n+            if (includePattern != null) {\n+                for (TopLevelItem item : allItems) {\n+                    String itemName = item.getRelativeNameFrom(parent);\n+                    if (includePattern.matcher(itemName).matches()) {\n+                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n+                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n+                            items.add(item);\n+                    }\n+                }\n+            }\n         }\n \n         // check the filters\n         Iterable<ViewJobFilter> jobFilters = getJobFilters();\n-        List<TopLevelItem> allItems = new ArrayList<>(parentItems);\n-        if (recurse) allItems = expand(allItems, new ArrayList<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f27fd78edcaf4f99410c8705227afe30df669468"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODcxNDc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/ListView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozNjowM1rOFs46UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozNjowM1rOFs46UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxNDA5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static void checkAddItem(Boolean statusFilter, List<TopLevelItem> items, TopLevelItem item) {\n          \n          \n            \n                private static void addItemMatchingStatus(Boolean statusFilter, List<TopLevelItem> items, TopLevelItem item) {\n          \n      \n    \n    \n  \n\nPlus corresponding changes.", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r382614096", "createdAt": "2020-02-21T14:36:03Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -242,6 +264,13 @@ public boolean hasJobFilterExtensions() {\n         return items;\n     }\n \n+    // Used by getItems\n+    private static void checkAddItem(Boolean statusFilter, List<TopLevelItem> items, TopLevelItem item) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbe70d2327c8dd6fd915a7c08eb59f8cbd4f6e21"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODc2MTA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/ListView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDo0ODo1MFrOFs5Wow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDo0ODo1MFrOFs5Wow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyMTM0Nw==", "bodyText": "I think it would help readability if this comment had 2 specific lines of matching code, rather than it explaining the if/else if structure with a repeated statement in block blocks.", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r382621347", "createdAt": "2020-02-21T14:48:50Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -211,28 +212,49 @@ public boolean hasJobFilterExtensions() {\n         }\n \n         ItemGroup<? extends TopLevelItem> parent = getOwner().getItemGroup();\n-        List<TopLevelItem> parentItems = new ArrayList<>(parent.getItems());\n-        includeItems(parent, parentItems, names);\n \n         Boolean statusFilter = this.statusFilter; // capture the value to isolate us from concurrent update\n-        Iterable<? extends TopLevelItem> candidates;\n+        Collection<ViewJobFilter> jobFilters = getJobFilters();\n+        List<TopLevelItem> allItems = null;\n         if (recurse) {\n-            candidates = parent.getAllItems(TopLevelItem.class);\n+            allItems = parent.getAllItems(TopLevelItem.class);\n+            for (TopLevelItem item : allItems) {\n+                String itemName = item.getRelativeNameFrom(parent);\n+                if (names.contains(itemName)) {\n+                    checkAddItem(statusFilter, items, item);\n+                }\n+                if (includePattern != null) {\n+                    if (includePattern.matcher(itemName).matches()) {\n+                        checkAddItem(statusFilter, items, item);\n+                    }\n+                }\n+            }\n         } else {\n-            candidates = parentItems;\n-        }\n-        for (TopLevelItem item : candidates) {\n-            if (!names.contains(item.getRelativeNameFrom(getOwner().getItemGroup()))) continue;\n-            // Add if no status filter or filter matches enabled/disabled status:\n-            if(statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n-                              || ((ParameterizedJobMixIn.ParameterizedJob)item).isDisabled() ^ statusFilter)\n-                items.add(item);\n+            for (String name : names) {\n+                try {\n+                    TopLevelItem i = parent.getItem(name);\n+                    if (i != null) {\n+                        checkAddItem(statusFilter, items, i);\n+                    }\n+                } catch (AccessDeniedException e) {\n+                    //Ignore\n+                }\n+            }\n+            //Only call getItems if there is a pattern or we have Job Filters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbe70d2327c8dd6fd915a7c08eb59f8cbd4f6e21"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTE4MzA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/ListView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMDoxMzozN1rOF5uj2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMzo0ODozMlrOF52LRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA3NTk5NQ==", "bodyText": "This should add the StatusFilter first into the list to minimize behavior changes through interactions between filters.", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r396075995", "createdAt": "2020-03-22T10:13:37Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -145,6 +147,9 @@ private Object readResolve() {\n         }\n         initColumns();\n         initJobFilters();\n+        if (statusFilter != null) {\n+            jobFilters.add(new StatusFilter(statusFilter));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c95ecac87b75b1737116da5f611536ea85707052"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwMDc3Mw==", "bodyText": "Rewritten to be added to the first index", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r396200773", "createdAt": "2020-03-23T03:48:32Z", "author": {"login": "res0nance"}, "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -145,6 +147,9 @@ private Object readResolve() {\n         }\n         initColumns();\n         initJobFilters();\n+        if (statusFilter != null) {\n+            jobFilters.add(new StatusFilter(statusFilter));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA3NTk5NQ=="}, "originalCommit": {"oid": "c95ecac87b75b1737116da5f611536ea85707052"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjQ3MTU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/ListView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODo0NTo0MlrOHR3U5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODo0NTo0MlrOHR3U5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5NDMxMA==", "bodyText": "@TobiX identified this as the problem in JENKINS-62661: DescribableList does not implement #add(int,T).", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r488494310", "createdAt": "2020-09-15T08:45:42Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -145,6 +149,9 @@ private Object readResolve() {\n         }\n         initColumns();\n         initJobFilters();\n+        if (statusFilter != null) {\n+            jobFilters.add(0, new StatusFilter(statusFilter));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "123f756f37eea8c988d4f5a48458dbb414a443d5"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 738, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}