{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5Nzg2NzYw", "number": 4848, "reviewThreads": {"totalCount": 51, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToxNzo1NFrOEQk7ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxMzo0MTowMlrOFUg8lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODE3NzAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/ExpressionFactory2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToxNzo1NFrOG0zYfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToxNzo1NFrOG0zYfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAyMDk4OQ==", "bodyText": "There is no replacement for AcegiSecurityException. AFAIK the purpose of this class is to nicely handle 403s, so this should be good enough.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r458020989", "createdAt": "2020-07-21T11:17:54Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/ExpressionFactory2.java", "diffHunk": "@@ -72,7 +72,7 @@ public Object evaluate(JellyContext context) {\n                 CURRENT_CONTEXT.set(context);\n                 JexlContext jexlContext = new JellyJexlContext( context );\n                 return expression.evaluate(jexlContext);\n-            } catch (AcegiSecurityException e) {\n+            } catch (AccessDeniedException2 e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd98319f38ea8f9e2560351a068a1e5905b8208"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODE3NzYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/ExtensionFinder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToxODowNVrOG0zY0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToxODowNVrOG0zY0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAyMTA3NQ==", "bodyText": "Just a signature change in Spring.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r458021075", "createdAt": "2020-07-21T11:18:05Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/ExtensionFinder.java", "diffHunk": "@@ -578,7 +578,7 @@ public Object get() {\n                 // so that we invoke them before derived class one. This isn't specified in JSR-250 but implemented\n                 // this way in Spring and what most developers would expect to happen.\n \n-                final Set<Class> interfaces = ClassUtils.getAllInterfacesAsSet(instance);\n+                final Set<Class<?>> interfaces = ClassUtils.getAllInterfacesAsSet(instance);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd98319f38ea8f9e2560351a068a1e5905b8208"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODE4ODA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/AbstractPasswordBasedSecurityRealm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToyMToxN1rOG0zfEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToyMToxN1rOG0zfEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAyMjY3Mg==", "bodyText": "Just translating the Groovy into equivalent Java.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r458022672", "createdAt": "2020-07-21T11:21:17Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/AbstractPasswordBasedSecurityRealm.java", "diffHunk": "@@ -31,14 +30,17 @@\n public abstract class AbstractPasswordBasedSecurityRealm extends SecurityRealm implements UserDetailsService {\n     @Override\n     public SecurityComponents createSecurityComponents() {\n-        Binding binding = new Binding();\n-        binding.setVariable(\"authenticator\", new Authenticator());\n-\n-        BeanBuilder builder = new BeanBuilder();\n-        builder.parse(Jenkins.get().servletContext.getResourceAsStream(\"/WEB-INF/security/AbstractPasswordBasedSecurityRealm.groovy\"),binding);\n-        WebApplicationContext context = builder.createApplicationContext();\n+        // this does all the hard work.\n+        Authenticator authenticator = new Authenticator();\n+        // these providers apply everywhere\n+        RememberMeAuthenticationProvider rmap = new RememberMeAuthenticationProvider(Jenkins.get().getSecretKey());\n+        // this doesn't mean we allow anonymous access.\n+        // we just authenticate anonymous users as such,\n+        // so that later authorization can reject them if so configured\n+        AnonymousAuthenticationProvider aap = new AnonymousAuthenticationProvider(\"anonymous\");\n+        AuthenticationManager authenticationManager = new ProviderManager(authenticator, rmap, aap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd98319f38ea8f9e2560351a068a1e5905b8208"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODE5MTA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/AccessDeniedException2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToyMjoxNFrOG0zgxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToyMjoxNFrOG0zgxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAyMzEwOQ==", "bodyText": "Deriving from the Acegi Security version in hopes of offering some compatibility, but untested.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r458023109", "createdAt": "2020-07-21T11:22:14Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/AccessDeniedException2.java", "diffHunk": "@@ -1,50 +1,75 @@\n package hudson.security;\n \n-import org.acegisecurity.AccessDeniedException;\n-import org.acegisecurity.Authentication;\n-import org.acegisecurity.GrantedAuthority;\n-\n import javax.servlet.http.HttpServletResponse;\n import java.io.PrintWriter;\n import jenkins.util.SystemProperties;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.GrantedAuthority;\n \n /**\n- * {@link AccessDeniedException} with more information.\n+ * {@link org.acegisecurity.AccessDeniedException} with more information.\n  * @author Kohsuke Kawaguchi\n  */\n-public class AccessDeniedException2 extends AccessDeniedException {\n+public class AccessDeniedException2 extends org.acegisecurity.AccessDeniedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd98319f38ea8f9e2560351a068a1e5905b8208"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODE5OTgyOnYy", "diffSide": "LEFT", "path": "core/src/main/java/hudson/security/HttpSessionContextIntegrationFilter2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToyNDo1MlrOG0zl8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToyNDo1MlrOG0zl8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAyNDQzMw==", "bodyText": "InvalidatableUserDetails was deprecated, so deleting this filter and hoping it was in fact unnecessary.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r458024433", "createdAt": "2020-07-21T11:24:52Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/HttpSessionContextIntegrationFilter2.java", "diffHunk": "@@ -1,121 +0,0 @@\n-/*\n- * The MIT License\n- * \n- * Copyright (c) 2004-2009, Sun Microsystems, Inc., Kohsuke Kawaguchi\n- * \n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- * \n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- * \n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package hudson.security;\n-\n-import hudson.model.User;\n-import jenkins.security.NonSerializableSecurityContext;\n-import jenkins.security.seed.UserSeedProperty;\n-import org.acegisecurity.context.HttpSessionContextIntegrationFilter;\n-import org.acegisecurity.context.SecurityContext;\n-import org.acegisecurity.Authentication;\n-import org.acegisecurity.providers.anonymous.AnonymousAuthenticationToken;\n-\n-import javax.servlet.ServletException;\n-import javax.servlet.ServletRequest;\n-import javax.servlet.ServletResponse;\n-import javax.servlet.FilterChain;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpSession;\n-import java.io.IOException;\n-\n-/**\n- * Erases the {@link SecurityContext} persisted in {@link HttpSession}\n- * if {@link InvalidatableUserDetails#isInvalid()} returns true.\n- *\n- * @see InvalidatableUserDetails", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd98319f38ea8f9e2560351a068a1e5905b8208"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODIyMjc1OnYy", "diffSide": "LEFT", "path": "core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTozMTozM1rOG0zzUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTozMTozM1rOG0zzUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAyNzg1Ng==", "bodyText": "Did not see an easy way to translate this to Spring Security. There is a StandardPasswordEncoder and a MessageDigestPasswordEncoder but these are deprecated and considered insecure. Since this password format was last stored eight years ago, it does not seem worth saving.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r458027856", "createdAt": "2020-07-21T11:31:33Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java", "diffHunk": "@@ -804,56 +797,7 @@ public Category getCategory() {\n         }\n     }\n \n-    /**\n-     * {@link PasswordEncoder} based on SHA-256 and random salt generation.\n-     *\n-     * <p>\n-     * The salt is prepended to the hashed password and returned. So the encoded password is of the form\n-     * {@code SALT ':' hash(PASSWORD,SALT)}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd98319f38ea8f9e2560351a068a1e5905b8208"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODIzNTY2OnYy", "diffSide": "LEFT", "path": "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTozNTo1NFrOG0z7Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTo0MToyN1rOG2Gz0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAyOTg3NQ==", "bodyText": "Seems to be obsolete: https://github.com/spring-projects/spring-security/blob/56928f61f0f0dbba8dc5c7c6a99746abc39f8230/web/src/main/java/org/springframework/security/web/authentication/rememberme/AbstractRememberMeServices.java#L422-L429", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r458029875", "createdAt": "2020-07-21T11:35:54Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java", "diffHunk": "@@ -303,39 +307,7 @@ private String findRememberMeCookieValue(HttpServletRequest request, HttpServlet\n             return null;\n         }\n     }\n-\n-    @Override\n-    protected Cookie makeValidCookie(String tokenValueBase64, HttpServletRequest request, long maxAge) {\n-        Cookie cookie = super.makeValidCookie(tokenValueBase64, request, maxAge);\n-        secureCookie(cookie, request);\n-        return cookie;\n-    }\n-\n-    @Override \n-    protected Cookie makeCancelCookie(HttpServletRequest request) {\n-        Cookie cookie = super.makeCancelCookie(request);\n-        secureCookie(cookie, request);\n-        return cookie;\n-    }\n-    \n-    /**\n-     * Force always the http-only flag and depending on the request, put also the secure flag.\n-     */\n-    private void secureCookie(Cookie cookie, HttpServletRequest request){\n-        // if we can mark the cookie HTTP only, do so to protect this cookie even in case of XSS vulnerability.\n-        if (SET_HTTP_ONLY!=null) {\n-            try {\n-                SET_HTTP_ONLY.invoke(cookie,true);\n-            } catch (IllegalAccessException | InvocationTargetException e) {\n-                // ignore\n-            }\n-        }\n-\n-        // if the user is running Jenkins over HTTPS, we also want to prevent the cookie from leaking in HTTP.\n-        // whether the login is done over HTTPS or not would be a good enough approximation of whether Jenkins runs in\n-        // HTTPS or not, so use that.\n-        cookie.setSecure(request.isSecure());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd98319f38ea8f9e2560351a068a1e5905b8208"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4Nzg1OQ==", "bodyText": "IIRC setHttpOnly reflection was due to previous Tomcat version, with the current one supported by Jenkins, it's no longer necessary as we are using Servlet 3.0+.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r459387859", "createdAt": "2020-07-23T11:41:27Z", "author": {"login": "Wadeck"}, "path": "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java", "diffHunk": "@@ -303,39 +307,7 @@ private String findRememberMeCookieValue(HttpServletRequest request, HttpServlet\n             return null;\n         }\n     }\n-\n-    @Override\n-    protected Cookie makeValidCookie(String tokenValueBase64, HttpServletRequest request, long maxAge) {\n-        Cookie cookie = super.makeValidCookie(tokenValueBase64, request, maxAge);\n-        secureCookie(cookie, request);\n-        return cookie;\n-    }\n-\n-    @Override \n-    protected Cookie makeCancelCookie(HttpServletRequest request) {\n-        Cookie cookie = super.makeCancelCookie(request);\n-        secureCookie(cookie, request);\n-        return cookie;\n-    }\n-    \n-    /**\n-     * Force always the http-only flag and depending on the request, put also the secure flag.\n-     */\n-    private void secureCookie(Cookie cookie, HttpServletRequest request){\n-        // if we can mark the cookie HTTP only, do so to protect this cookie even in case of XSS vulnerability.\n-        if (SET_HTTP_ONLY!=null) {\n-            try {\n-                SET_HTTP_ONLY.invoke(cookie,true);\n-            } catch (IllegalAccessException | InvocationTargetException e) {\n-                // ignore\n-            }\n-        }\n-\n-        // if the user is running Jenkins over HTTPS, we also want to prevent the cookie from leaking in HTTP.\n-        // whether the login is done over HTTPS or not would be a good enough approximation of whether Jenkins runs in\n-        // HTTPS or not, so use that.\n-        cookie.setSecure(request.isSecure());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAyOTg3NQ=="}, "originalCommit": {"oid": "cfd98319f38ea8f9e2560351a068a1e5905b8208"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODI0NDQwOnYy", "diffSide": "LEFT", "path": "core/src/main/java/hudson/util/spring/BeanBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTozODo0NVrOG00AjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTozODo0NVrOG00AjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzMTI0NQ==", "bodyText": "Deleting this whole package; now constructing security objects directly in Java code. This means dropping support for the dubious feature of overriding Jenkins\u2019 security architecture by replacing a file in the WAR; you would now have to use supported configuration settings only.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r458031245", "createdAt": "2020-07-21T11:38:45Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/util/spring/BeanBuilder.java", "diffHunk": "@@ -1,652 +0,0 @@\n-/*\n- * Copyright 2004-2005 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package hudson.util.spring;\n-\n-import groovy.lang.Binding;\n-import groovy.lang.Closure;\n-import groovy.lang.GString;\n-import groovy.lang.GroovyObject;\n-import groovy.lang.GroovyObjectSupport;\n-import groovy.lang.GroovyShell;\n-import groovy.lang.MetaClass;\n-import groovy.lang.MissingMethodException;\n-import org.apache.commons.lang.ArrayUtils;\n-import org.codehaus.groovy.control.CompilerConfiguration;\n-import org.codehaus.groovy.runtime.DefaultGroovyMethods;\n-import org.codehaus.groovy.runtime.InvokerHelper;\n-import org.springframework.beans.factory.config.BeanDefinition;\n-import org.springframework.beans.factory.config.RuntimeBeanReference;\n-import org.springframework.beans.factory.support.ManagedList;\n-import org.springframework.beans.factory.support.ManagedMap;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.context.support.StaticApplicationContext;\n-import org.springframework.core.io.Resource;\n-import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n-import org.springframework.web.context.WebApplicationContext;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.ListIterator;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-\n-/**\n- * <p>Runtime bean configuration wrapper. Like a Groovy builder, but more of a DSL for\n- * Spring configuration. Allows syntax like:</p>\n- *\n- * <pre>\n- * import org.hibernate.SessionFactory\n- * import org.apache.commons.dbcp.BasicDataSource\n- *\n- * BeanBuilder builder = new BeanBuilder()\n- * builder.beans {\n- *   dataSource(BasicDataSource) {                  // \u2190 invokeMethod\n- *      driverClassName = \"org.hsqldb.jdbcDriver\"\n- *      url = \"jdbc:hsqldb:mem:grailsDB\"\n- *      username = \"sa\"                            // \u2190 setProperty\n- *      password = \"\"\n- *      settings = [mynew:\"setting\"]\n- *  }\n- *  sessionFactory(SessionFactory) {\n- *  \t   dataSource = dataSource                 // \u2190 getProperty for retrieving refs\n- *  }\n- *  myService(MyService) {\n- *      nestedBean = { AnotherBean bean-&gt;          // \u2190 setProperty with closure for nested bean\n- *      \t\tdataSource = dataSource\n- *      }\n- *  }\n- * }\n- * </pre>\n- * <p>\n- *   You can also use the Spring IO API to load resources containing beans defined as a Groovy\n- *   script using either the constructors or the loadBeans(Resource[] resources) method\n- * </p>\n- *\n- * @author Graeme Rocher\n- * @since 0.4\n- *\n- */\n-public class BeanBuilder extends GroovyObjectSupport {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd98319f38ea8f9e2560351a068a1e5905b8208"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODI1Mjc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/acegisecurity/AccessDeniedException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0MToyOFrOG00FdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0MToyOFrOG00FdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzMjUwMQ==", "bodyText": "Git trying to be too clever. Deleting long-deprecated typo NotSerilizableSecurityContext (not used by plugins); and adding a fa\u00e7ade for AccessDeniedException.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r458032501", "createdAt": "2020-07-21T11:41:28Z", "author": {"login": "jglick"}, "path": "core/src/main/java/org/acegisecurity/AccessDeniedException.java", "diffHunk": "@@ -22,21 +22,22 @@\n  * THE SOFTWARE.\n  */\n \n-package hudson.security;\n+package org.acegisecurity;\n \n-import jenkins.security.NonSerializableSecurityContext;\n-import org.acegisecurity.Authentication;\n+import hudson.security.AccessDeniedException2;\n \n /**\n- * @deprecated use {@link NonSerializableSecurityContext} instead\n+ * @deprecated use {@link AccessDeniedException2}\n  */\n @Deprecated\n-public class NotSerilizableSecurityContext extends NonSerializableSecurityContext {\n+public class AccessDeniedException extends org.springframework.security.access.AccessDeniedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd98319f38ea8f9e2560351a068a1e5905b8208"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODI1NTk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/acegisecurity/AuthenticationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0MjozMVrOG00Hdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0MjozMVrOG00Hdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzMzAxNA==", "bodyText": "Might wind up deleting this, not sure if it could even potentially still be used by plugins.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r458033014", "createdAt": "2020-07-21T11:42:31Z", "author": {"login": "jglick"}, "path": "core/src/main/java/org/acegisecurity/AuthenticationManager.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.acegisecurity;\n+\n+/**\n+ * @deprecated TODO replacement\n+ */\n+@Deprecated\n+public interface AuthenticationManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd98319f38ea8f9e2560351a068a1e5905b8208"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODI1ODcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/acegisecurity/acls/sid/PrincipalSid.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0MzoyMVrOG00JNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjowODozMFrOHK95zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzMzQ2Mw==", "bodyText": "Reimplementing these from scratch. Only used from SidAcl.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r458033463", "createdAt": "2020-07-21T11:43:21Z", "author": {"login": "jglick"}, "path": "core/src/main/java/org/acegisecurity/acls/sid/PrincipalSid.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.acegisecurity.acls.sid;\n+\n+import java.util.Objects;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.userdetails.UserDetails;\n+\n+public class PrincipalSid implements Sid {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd98319f38ea8f9e2560351a068a1e5905b8208"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1NDIxNQ==", "bodyText": "and cloudbees/bluesteel -> TeamSecurity.java (which is not using SidACL in that class but underlying more it it is).  (not sure you saw that or not)", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r481254215", "createdAt": "2020-09-01T16:00:26Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/org/acegisecurity/acls/sid/PrincipalSid.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.acegisecurity.acls.sid;\n+\n+import java.util.Objects;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.userdetails.UserDetails;\n+\n+public class PrincipalSid implements Sid {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzMzQ2Mw=="}, "originalCommit": {"oid": "cfd98319f38ea8f9e2560351a068a1e5905b8208"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI2MjAzMA==", "bodyText": "Ought to be compatible AFAICT.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r481262030", "createdAt": "2020-09-01T16:08:30Z", "author": {"login": "jglick"}, "path": "core/src/main/java/org/acegisecurity/acls/sid/PrincipalSid.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.acegisecurity.acls.sid;\n+\n+import java.util.Objects;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.userdetails.UserDetails;\n+\n+public class PrincipalSid implements Sid {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzMzQ2Mw=="}, "originalCommit": {"oid": "cfd98319f38ea8f9e2560351a068a1e5905b8208"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODI2MjYyOnYy", "diffSide": "LEFT", "path": "core/src/main/java/org/acegisecurity/providers/ldap/authenticator/BindAuthenticator2.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0NDozNFrOG00LoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoyNDo0N1rOG46_kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzNDA4MA==", "bodyText": "Seems to have been unused, and I do not want to depend on Spring Security modules for LDAP here; belongs in the ldap plugin only.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r458034080", "createdAt": "2020-07-21T11:44:34Z", "author": {"login": "jglick"}, "path": "core/src/main/java/org/acegisecurity/providers/ldap/authenticator/BindAuthenticator2.java", "diffHunk": "@@ -1,62 +0,0 @@\n-/*\n- * The MIT License\n- * \n- * Copyright (c) 2004-2009, Sun Microsystems, Inc., Kohsuke Kawaguchi\n- * \n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- * \n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- * \n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package org.acegisecurity.providers.ldap.authenticator;\n-\n-import org.acegisecurity.ldap.InitialDirContextFactory;\n-import org.acegisecurity.userdetails.ldap.LdapUserDetails;\n-\n-import java.util.logging.Logger;\n-import java.util.logging.Level;\n-\n-/**\n- * {@link BindAuthenticator} with improved diagnostics.\n- * \n- * @author Kohsuke Kawaguchi\n- */\n-public class BindAuthenticator2 extends BindAuthenticator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd98319f38ea8f9e2560351a068a1e5905b8208"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzOTk4NQ==", "bodyText": "Correction: was used by the ldap plugin, and should have been there all along (see 9b4cd99 & 32cba8f). Correcting in jenkinsci/ldap-plugin@a5267e6.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r462339985", "createdAt": "2020-07-29T14:24:47Z", "author": {"login": "jglick"}, "path": "core/src/main/java/org/acegisecurity/providers/ldap/authenticator/BindAuthenticator2.java", "diffHunk": "@@ -1,62 +0,0 @@\n-/*\n- * The MIT License\n- * \n- * Copyright (c) 2004-2009, Sun Microsystems, Inc., Kohsuke Kawaguchi\n- * \n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- * \n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- * \n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package org.acegisecurity.providers.ldap.authenticator;\n-\n-import org.acegisecurity.ldap.InitialDirContextFactory;\n-import org.acegisecurity.userdetails.ldap.LdapUserDetails;\n-\n-import java.util.logging.Logger;\n-import java.util.logging.Level;\n-\n-/**\n- * {@link BindAuthenticator} with improved diagnostics.\n- * \n- * @author Kohsuke Kawaguchi\n- */\n-public class BindAuthenticator2 extends BindAuthenticator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzNDA4MA=="}, "originalCommit": {"oid": "cfd98319f38ea8f9e2560351a068a1e5905b8208"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODI2NDI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/acegisecurity/userdetails/UserDetailsService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0NDo1OFrOG00MkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0NDo1OFrOG00MkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzNDMyMQ==", "bodyText": "Might just get deleted, TBD.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r458034321", "createdAt": "2020-07-21T11:44:58Z", "author": {"login": "jglick"}, "path": "core/src/main/java/org/acegisecurity/userdetails/UserDetailsService.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.acegisecurity.userdetails;\n+\n+/**\n+ * @deprecated TODO replacement\n+ */\n+@Deprecated\n+public interface UserDetailsService extends org.springframework.security.core.userdetails.UserDetailsService {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd98319f38ea8f9e2560351a068a1e5905b8208"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODI3MjU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/acegisecurity/AuthenticationException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0NzoyNVrOG00RWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0NzoyNVrOG00RWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzNTU0Nw==", "bodyText": "Overaggressive rename detection. Deleted AbstractPasswordBasedSecurityRealm.groovy, created AuthenticationException.java fa\u00e7ade.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r458035547", "createdAt": "2020-07-21T11:47:25Z", "author": {"login": "jglick"}, "path": "core/src/main/java/org/acegisecurity/AuthenticationException.java", "diffHunk": "@@ -21,29 +21,21 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-/*\n-    Configure Hudson's own user database as the authentication realm.\n-*/\n-import org.acegisecurity.providers.ProviderManager\n-import org.acegisecurity.providers.anonymous.AnonymousAuthenticationProvider\n-import org.acegisecurity.providers.rememberme.RememberMeAuthenticationProvider\n-import jenkins.model.Jenkins\n \n-authenticationManager(ProviderManager) {\n-    providers = [\n-        // this does all the hard work.\n-        // injected by the parsing code\n-        authenticator,\n+package org.acegisecurity;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd98319f38ea8f9e2560351a068a1e5905b8208"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTIzOTczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/ExpressionFactory2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzoxMjowNFrOG13WUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzoxMjowNFrOG13WUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzNDU0NQ==", "bodyText": "There is no replacement for AcegiSecurityException. AFAIK the purpose of this class is to nicely handle 403s, so this should be good enough.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r459134545", "createdAt": "2020-07-22T23:12:04Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/ExpressionFactory2.java", "diffHunk": "@@ -72,7 +72,7 @@ public Object evaluate(JellyContext context) {\n                 CURRENT_CONTEXT.set(context);\n                 JexlContext jexlContext = new JellyJexlContext( context );\n                 return expression.evaluate(jexlContext);\n-            } catch (AcegiSecurityException e) {\n+            } catch (AccessDeniedException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "998d6732027393a3dbf869bd5acb841cacd1b9da"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjkwNzE4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/cli/declarative/CLIRegisterer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTozMjo0MVrOG2GkLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjozMjowMlrOG2IV3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4Mzg1Mw==", "bodyText": "IIRC this class is no longer maintained / outdated as it's preferable for plugins to implement commands directly.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r459383853", "createdAt": "2020-07-23T11:32:41Z", "author": {"login": "Wadeck"}, "path": "core/src/main/java/hudson/cli/declarative/CLIRegisterer.java", "diffHunk": "@@ -202,6 +200,7 @@ public int main(List<String> args, Locale locale, InputStream stdin, PrintStream\n \n                             CmdLineParser parser = bindMethod(binders);\n                             try {\n+                                // TODO this could probably use ACL.as; why is it calling SecurityContext.setAuthentication rather than SecurityContextHolder.setContext?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "998d6732027393a3dbf869bd5acb841cacd1b9da"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxMjk1OQ==", "bodyText": "It is not currently deprecated, but yes I would recommend CLICommand in all cases.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r459412959", "createdAt": "2020-07-23T12:32:02Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/cli/declarative/CLIRegisterer.java", "diffHunk": "@@ -202,6 +200,7 @@ public int main(List<String> args, Locale locale, InputStream stdin, PrintStream\n \n                             CmdLineParser parser = bindMethod(binders);\n                             try {\n+                                // TODO this could probably use ACL.as; why is it calling SecurityContext.setAuthentication rather than SecurityContextHolder.setContext?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4Mzg1Mw=="}, "originalCommit": {"oid": "998d6732027393a3dbf869bd5acb841cacd1b9da"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Njk2MTQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTo1MTowN1rOG2HFSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTo1MTowN1rOG2HFSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5MjMyOQ==", "bodyText": "I don't understand your question about the signature. You have the variable just above, derived from the expiryTime and username.\nIt was verified by our current version in TokenBasedRememberMeServices2.java#L256-L266 but in recent version of Spring Security, they have corrected the flaw with the equality and so it's verified (correctly) in TokenBasedRememberMeServices.java#L95.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r459392329", "createdAt": "2020-07-23T11:51:07Z", "author": {"login": "Wadeck"}, "path": "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java", "diffHunk": "@@ -142,23 +140,29 @@ public void loginSuccess(HttpServletRequest request, HttpServletResponse respons\n \t\t}\n \n \t\tAssert.notNull(successfulAuthentication.getPrincipal());\n-\t\tAssert.notNull(successfulAuthentication.getCredentials());\n \t\tAssert.isInstanceOf(UserDetails.class, successfulAuthentication.getPrincipal());\n \n-\t\tlong expiryTime = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(tokenValiditySeconds);\n+\t\tlong expiryTime = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(getTokenValiditySeconds());\n \t\tString username = ((UserDetails) successfulAuthentication.getPrincipal()).getUsername();\n \n-\t\tString signatureValue = makeTokenSignature(expiryTime, (UserDetails)successfulAuthentication.getPrincipal());\n+\t\tString signatureValue = makeTokenSignature(expiryTime, username, ((UserDetails) successfulAuthentication.getPrincipal()).getPassword());\n \t\tString tokenValue = username + \":\" + expiryTime + \":\" + signatureValue;\n \t\tString tokenValueBase64 = Base64.getEncoder().encodeToString(tokenValue.getBytes());\n-\t\tresponse.addCookie(makeValidCookie(tokenValueBase64, request, tokenValiditySeconds));\n+\t\tint tokenLifetime = calculateLoginLifetime(request, successfulAuthentication);\n+        /* TODO unclear what the Spring Security equivalent to this is:\n+\t\tresponse.addCookie(makeValidCookie(tokenValueBase64, request, getTokenValiditySeconds()));\n+        // something like this, but where is the token signature?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "998d6732027393a3dbf869bd5acb841cacd1b9da"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTcwMzE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/AccessControlled.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToyNzoyNVrOG2zzhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTo0Mjo0NlrOG20Wdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyNTA2MQ==", "bodyText": "Code wasn't changed accordingly?", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r460125061", "createdAt": "2020-07-24T15:27:25Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/security/AccessControlled.java", "diffHunk": "@@ -58,7 +58,7 @@ default void checkAnyPermission(@NonNull Permission... permission) throws Access\n     }\n \n     /**\n-     * Convenient short-cut for {@code getACL().hasPermission(permission)}\n+     * Convenient short-cut for {@code getACL().hasPermission2(permission)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1fcbc699bdf2c8c34a1938eadb9f278d1c98636"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzNDAwNw==", "bodyText": "Oops, this was wrong, will revert.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r460134007", "createdAt": "2020-07-24T15:42:46Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/AccessControlled.java", "diffHunk": "@@ -58,7 +58,7 @@ default void checkAnyPermission(@NonNull Permission... permission) throws Access\n     }\n \n     /**\n-     * Convenient short-cut for {@code getACL().hasPermission(permission)}\n+     * Convenient short-cut for {@code getACL().hasPermission2(permission)}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyNTA2MQ=="}, "originalCommit": {"oid": "b1fcbc699bdf2c8c34a1938eadb9f278d1c98636"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzcyODY4OnYy", "diffSide": "RIGHT", "path": "core/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjowMTozOVrOG4g7hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjowMTozOVrOG4g7hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxMjk2NA==", "bodyText": "siom79/japicmp#266", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r461912964", "createdAt": "2020-07-28T22:01:39Z", "author": {"login": "jglick"}, "path": "core/pom.xml", "diffHunk": "@@ -867,5 +847,41 @@ THE SOFTWARE.\n         <maven.test.redirectTestOutputToFile>true</maven.test.redirectTestOutputToFile>\n       </properties>\n     </profile>\n+    <profile>\n+      <id>japicmp</id>\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>com.github.siom79.japicmp</groupId>\n+            <artifactId>japicmp-maven-plugin</artifactId>\n+            <version>0.14.4-20200728.214757-1</version> <!-- TODO https://github.com/siom79/japicmp/pull/266 -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b11f3e4bdb87d7643a4123a425e6929f0bf2f396"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mzc2MDkyOnYy", "diffSide": "LEFT", "path": "core/src/main/java/hudson/cli/CLICommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjowODowMFrOG4hOaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjowODowMFrOG4hOaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNzgwMA==", "bodyText": "Deliberately deleted without replacement.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r461917800", "createdAt": "2020-07-28T22:08:00Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/cli/CLICommand.java", "diffHunk": "@@ -316,28 +316,6 @@ public Channel checkChannel() throws AbortException {\n         throw new AbortException(\"This command is requesting the -remoting mode which is no longer supported. See https://jenkins.io/redirect/cli-command-requires-channel\");\n     }\n \n-    /**\n-     * Determines if the user authentication is attempted through CLI before running this command.\n-     *\n-     * <p>\n-     * If your command doesn't require any authentication whatsoever, and if you don't even want to let the user\n-     * authenticate, then override this method to always return false &mdash; doing so will result in all the commands\n-     * running as anonymous user credential.\n-     *\n-     * <p>\n-     * Note that even if this method returns true, the user can still skip aut \n-     *\n-     * @param auth\n-     *      Always non-null.\n-     *      If the underlying transport had already performed authentication, this object is something other than\n-     *      {@link jenkins.model.Jenkins#ANONYMOUS}.\n-     * @deprecated Unused.\n-     */\n-    @Deprecated\n-    protected boolean shouldPerformAuthentication(Authentication auth) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b11f3e4bdb87d7643a4123a425e6929f0bf2f396"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzgxMTczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/AbstractPasswordBasedSecurityRealm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoxOTowOFrOG4htVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoxOTowOFrOG4htVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNTcxNg==", "bodyText": "Because implements UserDetailsService was removed from the signature.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r461925716", "createdAt": "2020-07-28T22:19:08Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/AbstractPasswordBasedSecurityRealm.java", "diffHunk": "@@ -28,18 +27,21 @@\n  * @author Kohsuke Kawaguchi\n  * @since 1.317\n  */\n-public abstract class AbstractPasswordBasedSecurityRealm extends SecurityRealm implements UserDetailsService {\n+public abstract class AbstractPasswordBasedSecurityRealm extends SecurityRealm {\n     @Override\n     public SecurityComponents createSecurityComponents() {\n-        Binding binding = new Binding();\n-        binding.setVariable(\"authenticator\", new Authenticator());\n-\n-        BeanBuilder builder = new BeanBuilder();\n-        builder.parse(Jenkins.get().servletContext.getResourceAsStream(\"/WEB-INF/security/AbstractPasswordBasedSecurityRealm.groovy\"),binding);\n-        WebApplicationContext context = builder.createApplicationContext();\n+        // this does all the hard work.\n+        Authenticator authenticator = new Authenticator();\n+        // these providers apply everywhere\n+        RememberMeAuthenticationProvider rmap = new RememberMeAuthenticationProvider(Jenkins.get().getSecretKey());\n+        // this doesn't mean we allow anonymous access.\n+        // we just authenticate2 anonymous users as such,\n+        // so that later authorization can reject them if so configured\n+        AnonymousAuthenticationProvider aap = new AnonymousAuthenticationProvider(\"anonymous\");\n+        AuthenticationManager authenticationManager = new ProviderManager(authenticator, rmap, aap);\n         return new SecurityComponents(\n-                findBean(AuthenticationManager.class, context),\n-                new ImpersonatingUserDetailsService(this));\n+                authenticationManager,\n+                new ImpersonatingUserDetailsService(this::loadUserByUsername2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b11f3e4bdb87d7643a4123a425e6929f0bf2f396"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzgzMTQwOnYy", "diffSide": "LEFT", "path": "core/src/main/java/org/acegisecurity/AccessDeniedException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoyNjo1M1rOG4h5Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoyNjo1M1rOG4h5Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyODcxMA==", "bodyText": "CliAuthenticator is deleted without replacement. Git\u2019s rename detection is being too aggressive here.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r461928710", "createdAt": "2020-07-28T22:26:53Z", "author": {"login": "jglick"}, "path": "core/src/main/java/org/acegisecurity/AccessDeniedException.java", "diffHunk": "@@ -21,17 +21,21 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package hudson.security;\n \n-import org.acegisecurity.Authentication;\n-import org.acegisecurity.AuthenticationException;\n-\n-import java.io.IOException;\n+package org.acegisecurity;\n \n /**\n- * @deprecated No longer used.\n+ * @deprecated use {@link org.springframework.security.access.AccessDeniedException}\n  */\n @Deprecated\n-public abstract class CliAuthenticator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b11f3e4bdb87d7643a4123a425e6929f0bf2f396"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzgzNjI4OnYy", "diffSide": "LEFT", "path": "core/src/main/java/hudson/security/DeferredCreationLdapAuthoritiesPopulator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoyOTowNVrOG4h8Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoyOTowNVrOG4h8Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyOTQ4Nw==", "bodyText": "Long obsolete I think.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r461929487", "createdAt": "2020-07-28T22:29:05Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/DeferredCreationLdapAuthoritiesPopulator.java", "diffHunk": "@@ -1,155 +0,0 @@\n-/*\n- * The MIT License\n- * \n- * Copyright (c) 2004-2009, Sun Microsystems, Inc., Kohsuke Kawaguchi\n- * \n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- * \n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- * \n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package hudson.security;\n-\n-import org.acegisecurity.GrantedAuthority;\n-import org.acegisecurity.ldap.InitialDirContextFactory;\n-import org.acegisecurity.ldap.LdapDataAccessException;\n-import org.acegisecurity.providers.ldap.LdapAuthoritiesPopulator;\n-import org.acegisecurity.providers.ldap.populator.DefaultLdapAuthoritiesPopulator;\n-import org.acegisecurity.userdetails.ldap.LdapUserDetails;\n-import hudson.security.SecurityRealm.SecurityComponents;\n-\n-/**\n- * Implementation of {@link LdapAuthoritiesPopulator} that defers creation of a\n- * {@link DefaultLdapAuthoritiesPopulator} until one is needed. This is done to\n- * ensure that the groupSearchBase property can be set.\n- * \n- * @author justinedelson\n- * @deprecated as of 1.280\n- *      {@link SecurityComponents} are now created after {@link SecurityRealm} is created, so\n- *      the initialization order issue that this code was trying to address no longer exists.\n- */\n-@Deprecated\n-public class DeferredCreationLdapAuthoritiesPopulator implements LdapAuthoritiesPopulator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b11f3e4bdb87d7643a4123a425e6929f0bf2f396"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mzg0NzM4OnYy", "diffSide": "LEFT", "path": "core/src/main/java/hudson/security/InvalidatableUserDetails.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjozMzozNVrOG4iCpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjozMzozNVrOG4iCpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkzMTE3Mg==", "bodyText": "Deleted without replacement.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r461931172", "createdAt": "2020-07-28T22:33:35Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/InvalidatableUserDetails.java", "diffHunk": "@@ -1,60 +0,0 @@\n-/*\n- * The MIT License\n- * \n- * Copyright (c) 2004-2009, Sun Microsystems, Inc., Kohsuke Kawaguchi\n- * \n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- * \n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- * \n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package hudson.security;\n-\n-import org.acegisecurity.Authentication;\n-import org.acegisecurity.context.SecurityContext;\n-import org.acegisecurity.userdetails.UserDetails;\n-\n-import javax.servlet.http.HttpSession;\n-import jenkins.security.NonSerializableSecurityContext;\n-\n-/**\n- * {@link UserDetails} that can mark {@link Authentication} invalid.\n- *\n- * <p>\n- * Tomcat persists sessions by using Java serialization (and\n- * that includes the security token created by Acegi, which includes this object)\n- * and when that happens, the next time the server comes back\n- * it will try to deserialize {@link SecurityContext} that Acegi\n- * puts into {@link HttpSession} (which transitively includes {@link UserDetails}\n- * that can be implemented by Hudson.\n- *\n- * <p>\n- * Such {@link UserDetails} implementation can override the {@link #isInvalid()}\n- * method and return false, so that such {@link SecurityContext} will be\n- * dropped before the rest of Acegi sees it.\n- *\n- * <p>\n- * See JENKINS-1482\n- * \n- * @author Kohsuke Kawaguchi\n- * @deprecated\n- *      Starting 1.285, Hudson stops persisting {@link Authentication} altogether\n- *      (see {@link NonSerializableSecurityContext}), so there's no need to use this mechanism.\n- */\n-@Deprecated\n-public interface InvalidatableUserDetails extends UserDetails {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b11f3e4bdb87d7643a4123a425e6929f0bf2f396"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mzg0OTMxOnYy", "diffSide": "LEFT", "path": "core/src/main/java/org/acegisecurity/AcegiSecurityException.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjozNDoxOFrOG4iDxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjozNDoxOFrOG4iDxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkzMTQ2MA==", "bodyText": "NotSerilizableSecurityContext long obsolete and deleted. Beware rename detection here.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r461931460", "createdAt": "2020-07-28T22:34:18Z", "author": {"login": "jglick"}, "path": "core/src/main/java/org/acegisecurity/AcegiSecurityException.java", "diffHunk": "@@ -22,21 +22,22 @@\n  * THE SOFTWARE.\n  */\n \n-package hudson.security;\n+package org.acegisecurity;\n \n-import jenkins.security.NonSerializableSecurityContext;\n-import org.acegisecurity.Authentication;\n+import org.springframework.core.NestedRuntimeException;\n \n /**\n- * @deprecated use {@link NonSerializableSecurityContext} instead\n+ * @deprecated use {@link RuntimeException}\n  */\n @Deprecated\n-public class NotSerilizableSecurityContext extends NonSerializableSecurityContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b11f3e4bdb87d7643a4123a425e6929f0bf2f396"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODQ4NzYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/ACLContext.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzo0Nzo1NVrOHK3G6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzo1NToxNlrOHK3azw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE1MDY5Nw==", "bodyText": "does this even need to be exposed (could be said that it is just a poilluting methid in the previous version) and the only legitimate use case is in close", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r481150697", "createdAt": "2020-09-01T13:47:55Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/security/ACLContext.java", "diffHunk": "@@ -52,12 +52,21 @@\n     /**\n      * Accessor for the previous context.\n      * @return the previous context.\n+     * @since TODO\n      */\n     @NonNull\n-    public SecurityContext getPreviousContext() {\n+    public SecurityContext getPreviousContext2() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaf8831d3e72f558405c6e14785d22459ee546f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE1MjA0NQ==", "bodyText": "use case in https://github.com/jenkinsci/jenkins/pull/4848/files#diff-7703322191e82930e0d5d450dc9ba1adR322", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r481152045", "createdAt": "2020-09-01T13:49:53Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/security/ACLContext.java", "diffHunk": "@@ -52,12 +52,21 @@\n     /**\n      * Accessor for the previous context.\n      * @return the previous context.\n+     * @since TODO\n      */\n     @NonNull\n-    public SecurityContext getPreviousContext() {\n+    public SecurityContext getPreviousContext2() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE1MDY5Nw=="}, "originalCommit": {"oid": "4eaf8831d3e72f558405c6e14785d22459ee546f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE1MjA1Ng==", "bodyText": "Probably true, AFAIK it is unused.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r481152056", "createdAt": "2020-09-01T13:49:53Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/ACLContext.java", "diffHunk": "@@ -52,12 +52,21 @@\n     /**\n      * Accessor for the previous context.\n      * @return the previous context.\n+     * @since TODO\n      */\n     @NonNull\n-    public SecurityContext getPreviousContext() {\n+    public SecurityContext getPreviousContext2() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE1MDY5Nw=="}, "originalCommit": {"oid": "4eaf8831d3e72f558405c6e14785d22459ee546f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE1MzE5Mg==", "bodyText": "Ah, not quite, used inside core at least: \n  \n    \n      jenkins/core/src/main/java/hudson/model/AbstractItem.java\n    \n    \n        Lines 316 to 327\n      in\n      7edfc71\n    \n    \n    \n    \n\n        \n          \n           try (ACLContext ctx = ACL.as(ACL.SYSTEM)) { \n        \n\n        \n          \n               item = getParent().getItem(newName); \n        \n\n        \n          \n               if (item != null) { \n        \n\n        \n          \n                   if (LOGGER.isLoggable(Level.FINE)) { \n        \n\n        \n          \n                       LOGGER.log(Level.FINE, \"Unable to rename the job {0}: name {1} is already in use. \" + \n        \n\n        \n          \n                               \"User {2} has no {3} permission for existing job with the same name\", \n        \n\n        \n          \n                               new Object[] {this.getFullName(), newName, ctx.getPreviousContext().getAuthentication().getName(), Item.DISCOVER.name} ); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n                   // Don't explicitly mention that there is another item with the same name. \n        \n\n        \n          \n                   throw new Failure(Messages.Jenkins_NotAllowedName(newName)); \n        \n\n        \n          \n               } \n        \n\n        \n          \n           }", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r481153192", "createdAt": "2020-09-01T13:51:29Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/ACLContext.java", "diffHunk": "@@ -52,12 +52,21 @@\n     /**\n      * Accessor for the previous context.\n      * @return the previous context.\n+     * @since TODO\n      */\n     @NonNull\n-    public SecurityContext getPreviousContext() {\n+    public SecurityContext getPreviousContext2() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE1MDY5Nw=="}, "originalCommit": {"oid": "4eaf8831d3e72f558405c6e14785d22459ee546f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE1MzkyNQ==", "bodyText": "just that one occurrence in Jenkins.  basically backtracking authentication after elevation when an operation failed (was checking if an item existed, which needs to run as the system user).", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r481153925", "createdAt": "2020-09-01T13:52:38Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/security/ACLContext.java", "diffHunk": "@@ -52,12 +52,21 @@\n     /**\n      * Accessor for the previous context.\n      * @return the previous context.\n+     * @since TODO\n      */\n     @NonNull\n-    public SecurityContext getPreviousContext() {\n+    public SecurityContext getPreviousContext2() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE1MDY5Nw=="}, "originalCommit": {"oid": "4eaf8831d3e72f558405c6e14785d22459ee546f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE1NTc5MQ==", "bodyText": "Right. Anyway, I can mark this restricted, or just leave it as is\u2014harmless, reasonably intuitive getter.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r481155791", "createdAt": "2020-09-01T13:55:16Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/ACLContext.java", "diffHunk": "@@ -52,12 +52,21 @@\n     /**\n      * Accessor for the previous context.\n      * @return the previous context.\n+     * @since TODO\n      */\n     @NonNull\n-    public SecurityContext getPreviousContext() {\n+    public SecurityContext getPreviousContext2() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE1MDY5Nw=="}, "originalCommit": {"oid": "4eaf8831d3e72f558405c6e14785d22459ee546f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTAwNjg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/acegisecurity/BadCredentialsException.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTozMToxMVrOHK8JpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo0Njo1OVrOHK8yrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzMzMxNg==", "bodyText": "would it be possible to @Restrict(NoExternalUse.class) this (so that forces plugins to upgrade).\nperhaps that is a general question that should be asked higher up?", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r481233316", "createdAt": "2020-09-01T15:31:11Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/org/acegisecurity/BadCredentialsException.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.acegisecurity;\n+\n+import org.acegisecurity.userdetails.UsernameNotFoundException;\n+\n+/**\n+ * @deprecated use {@link org.springframework.security.authentication.BadCredentialsException}\n+ */\n+@Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaf8831d3e72f558405c6e14785d22459ee546f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0MzgyMw==", "bodyText": "That is a general question and my answer is emphatically no. @Deprecated means it will continue to work but you should switch to the new thing as soon as you can. That is exactly the case. Abuse of @Restricted has caused terrible headaches.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r481243823", "createdAt": "2020-09-01T15:46:59Z", "author": {"login": "jglick"}, "path": "core/src/main/java/org/acegisecurity/BadCredentialsException.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.acegisecurity;\n+\n+import org.acegisecurity.userdetails.UsernameNotFoundException;\n+\n+/**\n+ * @deprecated use {@link org.springframework.security.authentication.BadCredentialsException}\n+ */\n+@Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzMzMxNg=="}, "originalCommit": {"oid": "4eaf8831d3e72f558405c6e14785d22459ee546f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTAxMzA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/acegisecurity/acls/sid/GrantedAuthoritySid.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTozMjo0MVrOHK8NoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo0Nzo1NFrOHK81Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNDMzNw==", "bodyText": "deprecated?  https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/acls/domain/GrantedAuthoritySid.html", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r481234337", "createdAt": "2020-09-01T15:32:41Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/org/acegisecurity/acls/sid/GrantedAuthoritySid.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.acegisecurity.acls.sid;\n+\n+import java.util.Objects;\n+import org.springframework.security.core.GrantedAuthority;\n+\n+public class GrantedAuthoritySid implements Sid {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaf8831d3e72f558405c6e14785d22459ee546f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NDQ1MQ==", "bodyText": "See JEP. For now I am leaving these undeprecated because they are basically self-contained and harmless. It would be possible to deprecate them if SidAcl were also converted to work bidirectionally.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r481244451", "createdAt": "2020-09-01T15:47:54Z", "author": {"login": "jglick"}, "path": "core/src/main/java/org/acegisecurity/acls/sid/GrantedAuthoritySid.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.acegisecurity.acls.sid;\n+\n+import java.util.Objects;\n+import org.springframework.security.core.GrantedAuthority;\n+\n+public class GrantedAuthoritySid implements Sid {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNDMzNw=="}, "originalCommit": {"oid": "4eaf8831d3e72f558405c6e14785d22459ee546f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTAzMDQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/acegisecurity/acls/sid/Sid.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTozNzowNFrOHK8YzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo0ODoyNVrOHK82gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNzE5Ng==", "bodyText": "I was wondering why this does not extend org.springframework.security.acls.models.Sid", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r481237196", "createdAt": "2020-09-01T15:37:04Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/org/acegisecurity/acls/sid/Sid.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.acegisecurity.acls.sid;\n+\n+// TODO perhaps delegate to the org.springframework.security.acls package", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaf8831d3e72f558405c6e14785d22459ee546f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NDgwMA==", "bodyText": "See JEP. There is deliberately no subtype relationship between Acegi Security and Spring Security types.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r481244800", "createdAt": "2020-09-01T15:48:25Z", "author": {"login": "jglick"}, "path": "core/src/main/java/org/acegisecurity/acls/sid/Sid.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.acegisecurity.acls.sid;\n+\n+// TODO perhaps delegate to the org.springframework.security.acls package", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNzE5Ng=="}, "originalCommit": {"oid": "4eaf8831d3e72f558405c6e14785d22459ee546f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTAzNjgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/acegisecurity/providers/AbstractAuthenticationToken.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTozODo0MVrOHK8c3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTozODo0MVrOHK8c3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzODIzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public abstract class AbstractAuthenticationToken implements Authentication {\n          \n          \n            \n            @Deprecated\n          \n          \n            \n            public abstract class AbstractAuthenticationToken implements Authentication {", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r481238238", "createdAt": "2020-09-01T15:38:41Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/org/acegisecurity/providers/AbstractAuthenticationToken.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.acegisecurity.providers;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import org.acegisecurity.Authentication;\n+import org.acegisecurity.GrantedAuthority;\n+import org.acegisecurity.userdetails.UserDetails;\n+\n+/**\n+ * @deprecated use {@link org.springframework.security.authentication.AbstractAuthenticationToken}\n+ */\n+public abstract class AbstractAuthenticationToken implements Authentication {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaf8831d3e72f558405c6e14785d22459ee546f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTA0MDIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/acegisecurity/providers/AuthenticationProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTozOTozM1rOHK8fBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo1MToyOVrOHK8-tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzODc5MA==", "bodyText": "should be in addition not removing (based on my superb up to date legal skilz)\nor github is lying that this is a rename", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r481238790", "createdAt": "2020-09-01T15:39:33Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/org/acegisecurity/providers/AuthenticationProvider.java", "diffHunk": "@@ -1,7 +1,7 @@\n /*\n  * The MIT License\n  *\n- * Copyright (c) 2004-2010, Oracle Corporation\n+ * Copyright 2020 CloudBees, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eaf8831d3e72f558405c6e14785d22459ee546f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NjkwMg==", "bodyText": "Git\u2019s file rename detection is confused. Since, unlike say Mercurial, this happens at view time not commit time, I cannot force it to understand.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r481246902", "createdAt": "2020-09-01T15:51:29Z", "author": {"login": "jglick"}, "path": "core/src/main/java/org/acegisecurity/providers/AuthenticationProvider.java", "diffHunk": "@@ -1,7 +1,7 @@\n /*\n  * The MIT License\n  *\n- * Copyright (c) 2004-2010, Oracle Corporation\n+ * Copyright 2020 CloudBees, Inc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzODc5MA=="}, "originalCommit": {"oid": "4eaf8831d3e72f558405c6e14785d22459ee546f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzQ3OTQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/AbstractPasswordBasedSecurityRealm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozOToxMFrOHmy8fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozOToxMFrOHmy8fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MjYyMg==", "bodyText": "jenkinsci/lib-access-modifier#28 would be useful here and in a few other places.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r510442622", "createdAt": "2020-10-22T20:39:10Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/AbstractPasswordBasedSecurityRealm.java", "diffHunk": "@@ -87,15 +112,65 @@ private UserDetails doAuthenticate(String username, String password) throws Auth\n      * a query like this, just always throw {@link UsernameNotFoundException}.\n      */\n     @Override\n-    public abstract UserDetails loadUserByUsername(String username) throws UsernameNotFoundException, DataAccessException;\n+    public UserDetails loadUserByUsername2(String username) throws UsernameNotFoundException {\n+        if (Util.isOverridden(AbstractPasswordBasedSecurityRealm.class, getClass(), \"loadUserByUsername\", String.class)) {\n+            try {\n+                return loadUserByUsername(username).toSpring();\n+            } catch (org.acegisecurity.AcegiSecurityException x) {\n+                throw x.toSpring();\n+            } catch (org.springframework.dao.DataAccessException x) {\n+                throw x.toSpring();\n+            }\n+        } else {\n+            throw new AbstractMethodError(\"Implement loadUserByUsername2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzQ5MjA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo0MzowNVrOHmzEMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNzo1OTo0NFrOHtjkxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NDU5Mw==", "bodyText": "Not sure what to do with this. Could deprecate fireFailedToLogIn, though some security realms might be able to support it. Could introduce an overload with no name, though that seems pretty useless. Not sure if anyone even listens to this event to begin with.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r510444593", "createdAt": "2020-10-22T20:43:05Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java", "diffHunk": "@@ -100,26 +116,25 @@ protected void onSuccessfulAuthentication(HttpServletRequest request, HttpServle\n             newSession.setAttribute(UserSeedProperty.USER_SESSION_SEED, sessionSeed);\n         }\n \n-        // as the request comes from Acegi redirect, that's not a Stapler one\n+        // as the request comes from Spring Security redirect, that's not a Stapler one\n         // thus it's not possible to retrieve it in the SecurityListener in that case\n         // for that reason we need to keep the above code that apply quite the same logic as UserSeedSecurityListener\n         SecurityListener.fireLoggedIn(authResult.getName());\n     }\n \n     /**\n      * Leave the information about login failure.\n-     *\n-     * <p>\n-     * Otherwise it seems like Acegi doesn't really leave the detail of the failure anywhere.\n      */\n     @Override\n-    protected void onUnsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException {\n-        super.onUnsuccessfulAuthentication(request, response, failed);\n+    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException {\n+        super.unsuccessfulAuthentication(request, response, failed);\n         LOGGER.log(Level.FINE, \"Login attempt failed\", failed);\n+        /* TODO this information appears to have been deliberately removed from Spring Security:\n         Authentication auth = failed.getAuthentication();\n         if (auth != null) {\n             SecurityListener.fireFailedToLogIn(auth.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ2NzQ5NA==", "bodyText": "I'd kind of like to get more data exposed in audit-log-plugin, though that doesn't appear to listen for this event yet. It is listening for login and logout events, though, so it would make sense to support.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r517467494", "createdAt": "2020-11-04T16:23:18Z", "author": {"login": "jvz"}, "path": "core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java", "diffHunk": "@@ -100,26 +116,25 @@ protected void onSuccessfulAuthentication(HttpServletRequest request, HttpServle\n             newSession.setAttribute(UserSeedProperty.USER_SESSION_SEED, sessionSeed);\n         }\n \n-        // as the request comes from Acegi redirect, that's not a Stapler one\n+        // as the request comes from Spring Security redirect, that's not a Stapler one\n         // thus it's not possible to retrieve it in the SecurityListener in that case\n         // for that reason we need to keep the above code that apply quite the same logic as UserSeedSecurityListener\n         SecurityListener.fireLoggedIn(authResult.getName());\n     }\n \n     /**\n      * Leave the information about login failure.\n-     *\n-     * <p>\n-     * Otherwise it seems like Acegi doesn't really leave the detail of the failure anywhere.\n      */\n     @Override\n-    protected void onUnsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException {\n-        super.onUnsuccessfulAuthentication(request, response, failed);\n+    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException {\n+        super.unsuccessfulAuthentication(request, response, failed);\n         LOGGER.log(Level.FINE, \"Login attempt failed\", failed);\n+        /* TODO this information appears to have been deliberately removed from Spring Security:\n         Authentication auth = failed.getAuthentication();\n         if (auth != null) {\n             SecurityListener.fireFailedToLogIn(auth.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NDU5Mw=="}, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzMDgyMQ==", "bodyText": "Right. I spent a bit of time trying to figure out how to restore this, without success. If you find something, I guess it can be added later.\nIn terms of impact, I can find only https://github.com/jenkinsci/datadog-plugin/blob/6d327f9e6719ee01689e10410b627b39958c7fad/src/main/java/org/datadog/jenkins/plugins/datadog/listeners/DatadogSecurityListener.java#L131-L134 and \n  \n    \n      jenkins/core/src/main/java/hudson/security/AbstractPasswordBasedSecurityRealm.java\n    \n    \n         Line 101\n      in\n      f04114c\n    \n    \n    \n    \n\n        \n          \n           SecurityListener.fireFailedToAuthenticate(username); \n        \n    \n  \n\n still fires that event.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r517530821", "createdAt": "2020-11-04T17:59:44Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java", "diffHunk": "@@ -100,26 +116,25 @@ protected void onSuccessfulAuthentication(HttpServletRequest request, HttpServle\n             newSession.setAttribute(UserSeedProperty.USER_SESSION_SEED, sessionSeed);\n         }\n \n-        // as the request comes from Acegi redirect, that's not a Stapler one\n+        // as the request comes from Spring Security redirect, that's not a Stapler one\n         // thus it's not possible to retrieve it in the SecurityListener in that case\n         // for that reason we need to keep the above code that apply quite the same logic as UserSeedSecurityListener\n         SecurityListener.fireLoggedIn(authResult.getName());\n     }\n \n     /**\n      * Leave the information about login failure.\n-     *\n-     * <p>\n-     * Otherwise it seems like Acegi doesn't really leave the detail of the failure anywhere.\n      */\n     @Override\n-    protected void onUnsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException {\n-        super.onUnsuccessfulAuthentication(request, response, failed);\n+    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException {\n+        super.unsuccessfulAuthentication(request, response, failed);\n         LOGGER.log(Level.FINE, \"Login attempt failed\", failed);\n+        /* TODO this information appears to have been deliberately removed from Spring Security:\n         Authentication auth = failed.getAuthentication();\n         if (auth != null) {\n             SecurityListener.fireFailedToLogIn(auth.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NDU5Mw=="}, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzQ5OTA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/ChainedServletFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo0NToxM1rOHmzIlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo0NToxM1rOHmzIlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NTcxNg==", "bodyText": "Was helpful during development, and seems harmless to leave in.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r510445716", "createdAt": "2020-10-22T20:45:13Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/ChainedServletFilter.java", "diffHunk": "@@ -70,24 +73,41 @@ public void init(FilterConfig filterConfig) throws ServletException {\n             f.init(filterConfig);\n     }\n \n+    private static final Pattern UNINTERESTING_URIS = Pattern.compile(\"/(images|jsbundles|css|scripts|adjuncts)/|/favicon[.]ico|/ajax\");\n+    @Override\n     public void doFilter(ServletRequest request, ServletResponse response, final FilterChain chain) throws IOException, ServletException {\n-        LOGGER.entering(ChainedServletFilter.class.getName(), \"doFilter\");\n+        String uri = request instanceof HttpServletRequest ? ((HttpServletRequest) request).getRequestURI() : \"?\";\n+        Level level = UNINTERESTING_URIS.matcher(uri).find() ? Level.FINER : Level.FINE;\n+        LOGGER.log(level, () -> \"starting filter on \" + uri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzUwMDIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/ChainedServletFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo0NTozNVrOHmzJTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo0NTozNVrOHmzJTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NTkwMQ==", "bodyText": "Was helpful during development, and seems harmless to leave in.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r510445901", "createdAt": "2020-10-22T20:45:35Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/ChainedServletFilter.java", "diffHunk": "@@ -70,24 +73,41 @@ public void init(FilterConfig filterConfig) throws ServletException {\n             f.init(filterConfig);\n     }\n \n+    private static final Pattern UNINTERESTING_URIS = Pattern.compile(\"/(images|jsbundles|css|scripts|adjuncts)/|/favicon[.]ico|/ajax\");\n+    @Override\n     public void doFilter(ServletRequest request, ServletResponse response, final FilterChain chain) throws IOException, ServletException {\n-        LOGGER.entering(ChainedServletFilter.class.getName(), \"doFilter\");\n+        String uri = request instanceof HttpServletRequest ? ((HttpServletRequest) request).getRequestURI() : \"?\";\n+        Level level = UNINTERESTING_URIS.matcher(uri).find() ? Level.FINER : Level.FINE;\n+        LOGGER.log(level, () -> \"starting filter on \" + uri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzUwNTY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo0NzoxM1rOHmzMtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo0NzoxM1rOHmzMtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0Njc3NA==", "bodyText": "Whatever it was all this did, it does not appear to have had any test coverage, and may well be obsolete given Spring Security implementation details.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r510446774", "createdAt": "2020-10-22T20:47:13Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java", "diffHunk": "@@ -23,33 +23,46 @@\n  */\n package hudson.security;\n \n-import java.util.Properties;\n-import java.util.logging.Logger;\n-import java.util.logging.Level;\n+import hudson.model.User;\n import java.io.IOException;\n-\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.servlet.http.HttpSession;\n-\n-import hudson.Util;\n-import hudson.model.User;\n import jenkins.security.SecurityListener;\n import jenkins.security.seed.UserSeedProperty;\n-import org.acegisecurity.Authentication;\n-import org.acegisecurity.AuthenticationException;\n-import org.acegisecurity.ui.webapp.AuthenticationProcessingFilter;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n \n /**\n- * {@link AuthenticationProcessingFilter} with a change for Jenkins so that\n+ * Login filter with a change for Jenkins so that\n  * we can pick up the hidden \"from\" form field defined in {@code login.jelly}\n  * to send the user back to where he came from, after a successful authentication.\n  * \n  * @author Kohsuke Kawaguchi\n  */\n-public class AuthenticationProcessingFilter2 extends AuthenticationProcessingFilter {\n+@Restricted(NoExternalUse.class)\n+public final class AuthenticationProcessingFilter2 extends UsernamePasswordAuthenticationFilter {\n+\n+    public AuthenticationProcessingFilter2(String authenticationGatewayUrl) {\n+        setRequiresAuthenticationRequestMatcher(new AntPathRequestMatcher(\"/\" + authenticationGatewayUrl, \"POST\"));\n+        // Jenkins/login.jelly & SetupWizard/authenticate-security-token.jelly\n+        setUsernameParameter(\"j_username\");\n+        setPasswordParameter(\"j_password\");\n+    }\n+\n+    /* TODO none of this compiles against Spring Security; rewrite (try InteractiveAuthenticationSuccessEvent & SimpleUrlAuthenticationFailureHandler):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzUxMjExOnYy", "diffSide": "LEFT", "path": "core/src/main/java/hudson/security/HttpSessionContextIntegrationFilter2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo0OTowMVrOHmzQkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo0OTowMVrOHmzQkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0Nzc2MQ==", "bodyText": "See deprecation Javadoc for InvalidatableUserDetails.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r510447761", "createdAt": "2020-10-22T20:49:01Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/HttpSessionContextIntegrationFilter2.java", "diffHunk": "@@ -67,18 +62,6 @@ public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\n         super.doFilter(req, res, chain);\n     }\n \n-    private boolean isAuthInvalidated(Authentication authentication) {\n-        if (authentication.getPrincipal() instanceof InvalidatableUserDetails) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzUzMDg1OnYy", "diffSide": "LEFT", "path": "core/src/main/java/hudson/security/SecurityRealm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo1NDoxMlrOHmzb2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo1NDoxMlrOHmzb2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1MDY1MQ==", "bodyText": "Was used with BeanBuilder.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r510450651", "createdAt": "2020-10-22T20:54:12Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/SecurityRealm.java", "diffHunk": "@@ -455,26 +536,6 @@ protected final boolean validateCaptcha(String text) {\n         return true;\n     }\n \n-    /**\n-     * Picks up the instance of the given type from the spring context.\n-     * If there are multiple beans of the same type or if there are none,\n-     * this method treats that as an {@link IllegalArgumentException}.\n-     *\n-     * This method is intended to be used to pick up a Acegi object from\n-     * spring once the bean definition file is parsed.\n-     */\n-    public static <T> T findBean(Class<T> type, ApplicationContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 321}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzUzNDcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/SecurityRealm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo1NToxNFrOHmzeJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo1NToxNFrOHmzeJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1MTIzNw==", "bodyText": "If this did something, I am not sure what, and it is not covered by tests.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r510451237", "createdAt": "2020-10-22T20:55:14Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/SecurityRealm.java", "diffHunk": "@@ -509,14 +570,46 @@ public synchronized SecurityComponents getSecurityComponents() {\n     public Filter createFilter(FilterConfig filterConfig) {\n         LOGGER.entering(SecurityRealm.class.getName(), \"createFilter\");\n         \n-        Binding binding = new Binding();\n         SecurityComponents sc = getSecurityComponents();\n-        binding.setVariable(\"securityComponents\", sc);\n-        binding.setVariable(\"securityRealm\",this);\n-        BeanBuilder builder = new BeanBuilder();\n-        builder.parse(filterConfig.getServletContext().getResourceAsStream(\"/WEB-INF/security/SecurityFilters.groovy\"),binding);\n-        WebApplicationContext context = builder.createApplicationContext();\n-        return (Filter) context.getBean(\"filter\");\n+        List<Filter> filters = new ArrayList<>();\n+        {\n+            HttpSessionSecurityContextRepository httpSessionSecurityContextRepository = new HttpSessionSecurityContextRepository();\n+            httpSessionSecurityContextRepository.setAllowSessionCreation(false);\n+            filters.add(new HttpSessionContextIntegrationFilter2(httpSessionSecurityContextRepository));\n+        }\n+        { // if any \"Authorization: Basic xxx:yyy\" is sent this is the filter that processes it\n+            BasicHeaderProcessor bhp = new BasicHeaderProcessor();\n+            // if basic authentication fails (which only happens incorrect basic auth credential is sent),\n+            // respond with 401 with basic auth request, instead of redirecting the user to the login page,\n+            // since users of basic auth tends to be a program and won't see the redirection to the form\n+            // page as a failure\n+            BasicAuthenticationEntryPoint basicAuthenticationEntryPoint = new BasicAuthenticationEntryPoint();\n+            basicAuthenticationEntryPoint.setRealmName(\"Jenkins\");\n+            bhp.setAuthenticationEntryPoint(basicAuthenticationEntryPoint);\n+            bhp.setRememberMeServices(sc.rememberMe2);\n+            filters.add(bhp);\n+        }\n+        {\n+            AuthenticationProcessingFilter2 apf = new AuthenticationProcessingFilter2(getAuthenticationGatewayUrl());\n+            apf.setAuthenticationManager(sc.manager2);\n+            apf.setRememberMeServices(sc.rememberMe2);\n+            apf.setAuthenticationFailureHandler(new SimpleUrlAuthenticationFailureHandler(\"/loginError\"));\n+            // TODO apf.defaultTargetUrl = \"/\" try SavedRequestAwareAuthenticationSuccessHandler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 380}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzU0MDQxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/SecurityRealm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo1Njo1MlrOHmzhjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo1Njo1MlrOHmzhjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1MjEwOQ==", "bodyText": "Spring Security changed a number of things that in Acegi Security were setters into constructor arguments plus final fields.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r510452109", "createdAt": "2020-10-22T20:56:52Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/SecurityRealm.java", "diffHunk": "@@ -633,49 +726,96 @@ public SecurityRealm newInstance(StaplerRequest req, JSONObject formData) throws\n      * @see SecurityRealm#createSecurityComponents() \n      */\n     public static final class SecurityComponents {\n-        public final AuthenticationManager manager;\n-        public final UserDetailsService userDetails;\n-        public final RememberMeServices rememberMe;\n+        /**\n+         * @since TODO\n+         */\n+        public final AuthenticationManager manager2;\n+        /**\n+         * @deprecated use {@link #manager2}\n+         */\n+        @Deprecated\n+        public final org.acegisecurity.AuthenticationManager manager;\n+        /**\n+         * @since TODO\n+         */\n+        public final UserDetailsService userDetails2;\n+        /**\n+         * @deprecated use {@link #userDetails2}\n+         */\n+        @Deprecated\n+        public final org.acegisecurity.userdetails.UserDetailsService userDetails;\n+        /**\n+         * @since TODO\n+         */\n+        public final RememberMeServices rememberMe2;\n+        /**\n+         * @deprecated use {@link #rememberMe2}\n+         */\n+        @Deprecated\n+        public final org.acegisecurity.ui.rememberme.RememberMeServices rememberMe;\n \n         public SecurityComponents() {\n             // we use AuthenticationManagerProxy here just as an implementation that fails all the time,\n             // not as a proxy. No one is supposed to use this as a proxy.\n             this(new AuthenticationManagerProxy());\n         }\n \n+        /**\n+         * @since TODO\n+         */\n         public SecurityComponents(AuthenticationManager manager) {\n             // we use UserDetailsServiceProxy here just as an implementation that fails all the time,\n             // not as a proxy. No one is supposed to use this as a proxy.\n             this(manager,new UserDetailsServiceProxy());\n         }\n \n+        /**\n+         * @deprecated use {@link #SecurityComponents(AuthenticationManager)}\n+         */\n+        @Deprecated\n+        public SecurityComponents(org.acegisecurity.AuthenticationManager manager) {\n+            this(manager.toSpring());\n+        }\n+\n+        /**\n+         * @since TODO\n+         */\n         public SecurityComponents(AuthenticationManager manager, UserDetailsService userDetails) {\n             this(manager,userDetails,createRememberMeService(userDetails));\n         }\n \n+        /**\n+         * @deprecated use {@link #SecurityComponents(AuthenticationManager, UserDetailsService)}\n+         */\n+        @Deprecated\n+        public SecurityComponents(org.acegisecurity.AuthenticationManager manager, org.acegisecurity.userdetails.UserDetailsService userDetails) {\n+            this(manager.toSpring(), userDetails.toSpring());\n+        }\n+\n+        /**\n+         * @since TODO\n+         */\n         public SecurityComponents(AuthenticationManager manager, UserDetailsService userDetails, RememberMeServices rememberMe) {\n             assert manager!=null && userDetails!=null && rememberMe!=null;\n-            this.manager = manager;\n-            this.userDetails = userDetails;\n-            this.rememberMe = rememberMe;\n+            this.manager2 = manager;\n+            this.userDetails2 = userDetails;\n+            this.rememberMe2 = rememberMe;\n+            this.manager = org.acegisecurity.AuthenticationManager.fromSpring(manager);\n+            this.userDetails = org.acegisecurity.userdetails.UserDetailsService.fromSpring(userDetails);\n+            this.rememberMe = org.acegisecurity.ui.rememberme.RememberMeServices.fromSpring(rememberMe);\n+        }\n+\n+        /**\n+         * @deprecated use {@link #SecurityComponents(AuthenticationManager, UserDetailsService, RememberMeServices)}\n+         */\n+        @Deprecated\n+        public SecurityComponents(org.acegisecurity.AuthenticationManager manager, org.acegisecurity.userdetails.UserDetailsService userDetails, org.acegisecurity.ui.rememberme.RememberMeServices rememberMe) {\n+            this(manager.toSpring(), userDetails.toSpring(), rememberMe.toSpring());\n         }\n \n-        @SuppressWarnings(\"deprecation\")\n         private static RememberMeServices createRememberMeService(UserDetailsService uds) {\n             // create our default TokenBasedRememberMeServices, which depends on the availability of the secret key\n-            TokenBasedRememberMeServices2 rms = new TokenBasedRememberMeServices2();\n-            rms.setUserDetailsService(uds);\n-            /*\n-                TokenBasedRememberMeServices needs to be used in conjunction with RememberMeAuthenticationProvider,\n-                and both needs to use the same key (this is a reflection of a poor design in AcegiSecurity, if you ask me)\n-                and various security plugins have its own groovy script that configures them.\n-\n-                So if we change this, it creates a painful situation for those plugins by forcing them to choose\n-                to work with earlier version of Jenkins or newer version of Jenkins, and not both.\n-\n-                So we keep this here.\n-             */\n-            rms.setKey(Jenkins.get().getSecretKey());\n+            TokenBasedRememberMeServices2 rms = new TokenBasedRememberMeServices2(uds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 530}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzU1ODU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/SidACL.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTowMjowNlrOHmzsfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxOTo1OTowMlrOHtnnAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1NDkwOA==", "bodyText": "No particular reason to switch to the Spring Security version of this package, which would require pulling in the spring-security-acl module as well as disruption to existing AuthorizationStrategys: so long as you stick to the String-based constructors, there is no conflict with usage of other Spring Security types.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r510454908", "createdAt": "2020-10-22T21:02:06Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/SidACL.java", "diffHunk": "@@ -23,16 +23,15 @@\n  */\n package hudson.security;\n \n-import org.acegisecurity.Authentication;\n-import org.acegisecurity.GrantedAuthority;\n-import org.acegisecurity.acls.sid.PrincipalSid;\n-import org.acegisecurity.acls.sid.GrantedAuthoritySid;\n-import org.acegisecurity.acls.sid.Sid;\n-\n import edu.umd.cs.findbugs.annotations.NonNull;\n-import java.util.logging.Logger;\n import static java.util.logging.Level.FINE;\n import static java.util.logging.Level.FINER;\n+import java.util.logging.Logger;\n+import org.acegisecurity.acls.sid.GrantedAuthoritySid;\n+import org.acegisecurity.acls.sid.PrincipalSid;\n+import org.acegisecurity.acls.sid.Sid;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ3MzkwNA==", "bodyText": "Should spring-security-acl be blocked as a dependency then?", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r517473904", "createdAt": "2020-11-04T16:32:01Z", "author": {"login": "jvz"}, "path": "core/src/main/java/hudson/security/SidACL.java", "diffHunk": "@@ -23,16 +23,15 @@\n  */\n package hudson.security;\n \n-import org.acegisecurity.Authentication;\n-import org.acegisecurity.GrantedAuthority;\n-import org.acegisecurity.acls.sid.PrincipalSid;\n-import org.acegisecurity.acls.sid.GrantedAuthoritySid;\n-import org.acegisecurity.acls.sid.Sid;\n-\n import edu.umd.cs.findbugs.annotations.NonNull;\n-import java.util.logging.Logger;\n import static java.util.logging.Level.FINE;\n import static java.util.logging.Level.FINER;\n+import java.util.logging.Logger;\n+import org.acegisecurity.acls.sid.GrantedAuthoritySid;\n+import org.acegisecurity.acls.sid.PrincipalSid;\n+import org.acegisecurity.acls.sid.Sid;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1NDkwOA=="}, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUyNzY0NQ==", "bodyText": "What do you mean? It is not included as a dependency by this PR.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r517527645", "createdAt": "2020-11-04T17:54:34Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/SidACL.java", "diffHunk": "@@ -23,16 +23,15 @@\n  */\n package hudson.security;\n \n-import org.acegisecurity.Authentication;\n-import org.acegisecurity.GrantedAuthority;\n-import org.acegisecurity.acls.sid.PrincipalSid;\n-import org.acegisecurity.acls.sid.GrantedAuthoritySid;\n-import org.acegisecurity.acls.sid.Sid;\n-\n import edu.umd.cs.findbugs.annotations.NonNull;\n-import java.util.logging.Logger;\n import static java.util.logging.Level.FINE;\n import static java.util.logging.Level.FINER;\n+import java.util.logging.Logger;\n+import org.acegisecurity.acls.sid.GrantedAuthoritySid;\n+import org.acegisecurity.acls.sid.PrincipalSid;\n+import org.acegisecurity.acls.sid.Sid;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1NDkwOA=="}, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5NjkzMQ==", "bodyText": "I meant as a precautionary measure so that downstream plugins don't think they should switch to that library just because of the rest of the Spring Security upgrade. I don't know if there's anything worth preventing, though, beyond confusion.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r517596931", "createdAt": "2020-11-04T19:59:02Z", "author": {"login": "jvz"}, "path": "core/src/main/java/hudson/security/SidACL.java", "diffHunk": "@@ -23,16 +23,15 @@\n  */\n package hudson.security;\n \n-import org.acegisecurity.Authentication;\n-import org.acegisecurity.GrantedAuthority;\n-import org.acegisecurity.acls.sid.PrincipalSid;\n-import org.acegisecurity.acls.sid.GrantedAuthoritySid;\n-import org.acegisecurity.acls.sid.Sid;\n-\n import edu.umd.cs.findbugs.annotations.NonNull;\n-import java.util.logging.Logger;\n import static java.util.logging.Level.FINE;\n import static java.util.logging.Level.FINER;\n+import java.util.logging.Logger;\n+import org.acegisecurity.acls.sid.GrantedAuthoritySid;\n+import org.acegisecurity.acls.sid.PrincipalSid;\n+import org.acegisecurity.acls.sid.Sid;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1NDkwOA=="}, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzYwOTAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/acegisecurity/ui/rememberme/TokenBasedRememberMeServices.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToxNjo0N1rOHm0Kyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToxNjo0N1rOHm0Kyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2MjY2Nw==", "bodyText": "Only striving to retain compatibility for plugins referring to this constant, not the rest of the class.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r510462667", "createdAt": "2020-10-22T21:16:47Z", "author": {"login": "jglick"}, "path": "core/src/main/java/org/acegisecurity/ui/rememberme/TokenBasedRememberMeServices.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.acegisecurity.ui.rememberme;\n+\n+import org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices;\n+\n+/**\n+ * @deprecated use {@link org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices}\n+ */\n+@Deprecated\n+public class TokenBasedRememberMeServices {\n+\n+    public static final String ACEGI_SECURITY_HASHED_REMEMBER_ME_COOKIE_KEY = AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzYxMjA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/acegisecurity/userdetails/UserDetails.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToxNzozNlrOHm0Mug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToxNzozNlrOHm0Mug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2MzE2Mg==", "bodyText": "Weak typing here.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r510463162", "createdAt": "2020-10-22T21:17:36Z", "author": {"login": "jglick"}, "path": "core/src/main/java/org/acegisecurity/userdetails/UserDetails.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.acegisecurity.userdetails;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import edu.umd.cs.findbugs.annotations.Nullable;\n+import java.io.Serializable;\n+import org.acegisecurity.GrantedAuthority;\n+\n+/**\n+ * @deprecated use {@link org.springframework.security.core.userdetails.UserDetails} instead\n+ */\n+@Deprecated\n+public interface UserDetails extends Serializable {\n+\n+    GrantedAuthority[] getAuthorities();\n+\n+    String getPassword();\n+\n+    String getUsername();\n+\n+    boolean isAccountNonExpired();\n+\n+    boolean isAccountNonLocked();\n+\n+    boolean isCredentialsNonExpired();\n+\n+    boolean isEnabled();\n+\n+    default @NonNull org.springframework.security.core.userdetails.UserDetails toSpring() {\n+        return new UserDetailsSpringImpl(this);\n+    }\n+\n+    static @NonNull UserDetails fromSpring(@NonNull org.springframework.security.core.userdetails.UserDetails ud) {\n+        if (ud instanceof UserDetailsSpringImpl) {\n+            return ((UserDetailsSpringImpl) ud).delegate;\n+        }\n+        return new UserDetails() {\n+            @Override\n+            public GrantedAuthority[] getAuthorities() {\n+                return GrantedAuthority.fromSpring(ud.getAuthorities());\n+            }\n+            @Override\n+            public String getPassword() {\n+                return ud.getPassword();\n+            }\n+            @Override\n+            public String getUsername() {\n+                return ud.getUsername();\n+            }\n+            @Override\n+            public boolean isAccountNonExpired() {\n+                return ud.isAccountNonExpired();\n+            }\n+            @Override\n+            public boolean isAccountNonLocked() {\n+                return ud.isAccountNonLocked();\n+            }\n+            @Override\n+            public boolean isCredentialsNonExpired() {\n+                return ud.isCredentialsNonExpired();\n+            }\n+            @Override\n+            public boolean isEnabled() {\n+                return ud.isEnabled();\n+            }\n+        };\n+    }\n+\n+    static @Nullable Object toSpringPrincipal(@CheckForNull Object acegiPrincipal) {\n+        if (acegiPrincipal instanceof UserDetails) {\n+            return ((UserDetails) acegiPrincipal).toSpring();\n+        } else {\n+            return acegiPrincipal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzYxNDAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/acegisecurity/util/FieldUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToxODoxNlrOHm0N6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToxODoxNlrOHm0N6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2MzQ2Nw==", "bodyText": "Just retained the methods I actually saw being used in test code.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r510463467", "createdAt": "2020-10-22T21:18:16Z", "author": {"login": "jglick"}, "path": "core/src/main/java/org/acegisecurity/util/FieldUtils.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.acegisecurity.util;\n+\n+/**\n+ * @deprecated use {@link org.apache.commons.lang.reflect.FieldUtils}\n+ */\n+@Deprecated\n+public final class FieldUtils {\n+\n+    public static Object getProtectedFieldValue(String protectedField, Object object) {\n+        try {\n+            return org.apache.commons.lang.reflect.FieldUtils.readField(object, protectedField, true);\n+        } catch (IllegalAccessException x) {\n+            throw new RuntimeException(x);\n+        }\n+    }\n+\n+    public static void setProtectedFieldValue(String protectedField, Object object, Object newValue) {\n+        try {\n+            org.apache.commons.lang.reflect.FieldUtils.writeField(object, protectedField, newValue, true);\n+        } catch (IllegalAccessException x) {\n+            throw new RuntimeException(x);\n+        }\n+    }\n+\n+    // TODO other methods as needed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzYxNzk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/META-INF/upgrade/Authentication.hint", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToxOToyNFrOHm0QMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToxOToyNFrOHm0QMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2NDA0OQ==", "bodyText": "These should all actually be compatible (see unit tests), but would rather people use equals.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r510464049", "createdAt": "2020-10-22T21:19:24Z", "author": {"login": "jglick"}, "path": "core/src/main/resources/META-INF/upgrade/Authentication.hint", "diffHunk": "@@ -0,0 +1,4 @@\n+$a == hudson.security.ACL.SYSTEM :: $a instanceof org.acegisecurity.Authentication => hudson.security.ACL.SYSTEM.equals($a);;\n+$a == jenkins.model.Jenkins.ANONYMOUS :: $a instanceof org.acegisecurity.Authentication => jenkins.model.Jenkins.ANONYMOUS.equals($a);;\n+$a == hudson.security.ACL.SYSTEM2 :: $a instanceof org.springframework.security.core.Authentication => hudson.security.ACL.SYSTEM2.equals($a);;\n+$a == jenkins.model.Jenkins.ANONYMOUS2 :: $a instanceof org.springframework.security.core.Authentication => jenkins.model.Jenkins.ANONYMOUS2.equals($a);;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzYyNDcwOnYy", "diffSide": "LEFT", "path": "test/src/test/java/hudson/model/JobTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToyMTozNVrOHm0UNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToyMTozNVrOHm0UNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2NTA3OA==", "bodyText": "Was using the super-old password hashes.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r510465078", "createdAt": "2020-10-22T21:21:35Z", "author": {"login": "jglick"}, "path": "test/src/test/java/hudson/model/JobTest.java", "diffHunk": "@@ -205,12 +207,16 @@ public String getDisplayName() {\n         }\n     }\n \n-    @LocalData", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffe273a43a61c29e3dcb5340c4971cb4a63b10c7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzI1Nzc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNjoyODoxOFrOHtf8Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDowNzoxNFrOHtn3zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ3MTI4Mw==", "bodyText": "I think so. BouncyCastle provides BCrypt, too, so it's not like a separate library was needed in the first place.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r517471283", "createdAt": "2020-11-04T16:28:18Z", "author": {"login": "jvz"}, "path": "core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java", "diffHunk": "@@ -804,56 +860,7 @@ public Category getCategory() {\n         }\n     }\n \n-    /**\n-     * {@link PasswordEncoder} based on SHA-256 and random salt generation.\n-     *\n-     * <p>\n-     * The salt is prepended to the hashed password and returned. So the encoded password is of the form\n-     * {@code SALT ':' hash(PASSWORD,SALT)}.\n-     *\n-     * <p>\n-     * This abbreviates the need to store the salt separately, which in turn allows us to hide the salt handling\n-     * in this little class. The rest of the Acegi thinks that we are not using salt.\n-     */\n-    /*package*/ static final PasswordEncoder CLASSIC = new PasswordEncoder() {\n-        private final PasswordEncoder passwordEncoder = new ShaPasswordEncoder(256);\n-\n-        public String encodePassword(String rawPass, Object obj) throws DataAccessException {\n-            return hash(rawPass);\n-        }\n-\n-        public boolean isPasswordValid(String encPass, String rawPass, Object obj) throws DataAccessException {\n-            // pull out the sale from the encoded password\n-            int i = encPass.indexOf(':');\n-            if(i<0) return false;\n-            String salt = encPass.substring(0,i);\n-            return encPass.substring(i+1).equals(passwordEncoder.encodePassword(rawPass,salt));\n-        }\n-\n-        /**\n-         * Creates a hashed password by generating a random salt.\n-         */\n-        private String hash(String password) {\n-            String salt = generateSalt();\n-            return salt+':'+passwordEncoder.encodePassword(password,salt);\n-        }\n-\n-        /**\n-         * Generates random salt.\n-         */\n-        private String generateSalt() {\n-            StringBuilder buf = new StringBuilder();\n-            SecureRandom sr = new SecureRandom();\n-            for( int i=0; i<6; i++ ) {// log2(52^6)=34.20... so, this is about 32bit strong.\n-                boolean upper = sr.nextBoolean();\n-                char ch = (char)(sr.nextInt(26) + 'a');\n-                if(upper)   ch=Character.toUpperCase(ch);\n-                buf.append(ch);\n-            }\n-            return buf.toString();\n-        }\n-    };\n-\n+    // TODO can we instead use BCryptPasswordEncoder from Spring Security, which has its own copy of BCrypt so we could drop the special library?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04114c0f813501da9a072b984a6cf2f2f0a2180"}, "originalPosition": 277}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUyNjkyNw==", "bodyText": "We cannot use BouncyCastle from core, though.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r517526927", "createdAt": "2020-11-04T17:53:28Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java", "diffHunk": "@@ -804,56 +860,7 @@ public Category getCategory() {\n         }\n     }\n \n-    /**\n-     * {@link PasswordEncoder} based on SHA-256 and random salt generation.\n-     *\n-     * <p>\n-     * The salt is prepended to the hashed password and returned. So the encoded password is of the form\n-     * {@code SALT ':' hash(PASSWORD,SALT)}.\n-     *\n-     * <p>\n-     * This abbreviates the need to store the salt separately, which in turn allows us to hide the salt handling\n-     * in this little class. The rest of the Acegi thinks that we are not using salt.\n-     */\n-    /*package*/ static final PasswordEncoder CLASSIC = new PasswordEncoder() {\n-        private final PasswordEncoder passwordEncoder = new ShaPasswordEncoder(256);\n-\n-        public String encodePassword(String rawPass, Object obj) throws DataAccessException {\n-            return hash(rawPass);\n-        }\n-\n-        public boolean isPasswordValid(String encPass, String rawPass, Object obj) throws DataAccessException {\n-            // pull out the sale from the encoded password\n-            int i = encPass.indexOf(':');\n-            if(i<0) return false;\n-            String salt = encPass.substring(0,i);\n-            return encPass.substring(i+1).equals(passwordEncoder.encodePassword(rawPass,salt));\n-        }\n-\n-        /**\n-         * Creates a hashed password by generating a random salt.\n-         */\n-        private String hash(String password) {\n-            String salt = generateSalt();\n-            return salt+':'+passwordEncoder.encodePassword(password,salt);\n-        }\n-\n-        /**\n-         * Generates random salt.\n-         */\n-        private String generateSalt() {\n-            StringBuilder buf = new StringBuilder();\n-            SecureRandom sr = new SecureRandom();\n-            for( int i=0; i<6; i++ ) {// log2(52^6)=34.20... so, this is about 32bit strong.\n-                boolean upper = sr.nextBoolean();\n-                char ch = (char)(sr.nextInt(26) + 'a');\n-                if(upper)   ch=Character.toUpperCase(ch);\n-                buf.append(ch);\n-            }\n-            return buf.toString();\n-        }\n-    };\n-\n+    // TODO can we instead use BCryptPasswordEncoder from Spring Security, which has its own copy of BCrypt so we could drop the special library?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ3MTI4Mw=="}, "originalCommit": {"oid": "f04114c0f813501da9a072b984a6cf2f2f0a2180"}, "originalPosition": 277}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUyODgwNw==", "bodyText": "I suppose it shouldn't matter for this case, then, since Spring Security already includes a BCrypt implementation in its own dependencies like you mentioned in the comment here. Does this limitation include for remoting? That'd be annoying if the only way to support TLS 1.3 connections there is to use Java 11 or customizing your classpath manually.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r517528807", "createdAt": "2020-11-04T17:56:29Z", "author": {"login": "jvz"}, "path": "core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java", "diffHunk": "@@ -804,56 +860,7 @@ public Category getCategory() {\n         }\n     }\n \n-    /**\n-     * {@link PasswordEncoder} based on SHA-256 and random salt generation.\n-     *\n-     * <p>\n-     * The salt is prepended to the hashed password and returned. So the encoded password is of the form\n-     * {@code SALT ':' hash(PASSWORD,SALT)}.\n-     *\n-     * <p>\n-     * This abbreviates the need to store the salt separately, which in turn allows us to hide the salt handling\n-     * in this little class. The rest of the Acegi thinks that we are not using salt.\n-     */\n-    /*package*/ static final PasswordEncoder CLASSIC = new PasswordEncoder() {\n-        private final PasswordEncoder passwordEncoder = new ShaPasswordEncoder(256);\n-\n-        public String encodePassword(String rawPass, Object obj) throws DataAccessException {\n-            return hash(rawPass);\n-        }\n-\n-        public boolean isPasswordValid(String encPass, String rawPass, Object obj) throws DataAccessException {\n-            // pull out the sale from the encoded password\n-            int i = encPass.indexOf(':');\n-            if(i<0) return false;\n-            String salt = encPass.substring(0,i);\n-            return encPass.substring(i+1).equals(passwordEncoder.encodePassword(rawPass,salt));\n-        }\n-\n-        /**\n-         * Creates a hashed password by generating a random salt.\n-         */\n-        private String hash(String password) {\n-            String salt = generateSalt();\n-            return salt+':'+passwordEncoder.encodePassword(password,salt);\n-        }\n-\n-        /**\n-         * Generates random salt.\n-         */\n-        private String generateSalt() {\n-            StringBuilder buf = new StringBuilder();\n-            SecureRandom sr = new SecureRandom();\n-            for( int i=0; i<6; i++ ) {// log2(52^6)=34.20... so, this is about 32bit strong.\n-                boolean upper = sr.nextBoolean();\n-                char ch = (char)(sr.nextInt(26) + 'a');\n-                if(upper)   ch=Character.toUpperCase(ch);\n-                buf.append(ch);\n-            }\n-            return buf.toString();\n-        }\n-    };\n-\n+    // TODO can we instead use BCryptPasswordEncoder from Spring Security, which has its own copy of BCrypt so we could drop the special library?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ3MTI4Mw=="}, "originalCommit": {"oid": "f04114c0f813501da9a072b984a6cf2f2f0a2180"}, "originalPosition": 277}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNTQ3OA==", "bodyText": "Not sure what you are talking about. BouncyCastle is bundled only in a wrapper plugin for use by other plugins.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r517535478", "createdAt": "2020-11-04T18:07:55Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java", "diffHunk": "@@ -804,56 +860,7 @@ public Category getCategory() {\n         }\n     }\n \n-    /**\n-     * {@link PasswordEncoder} based on SHA-256 and random salt generation.\n-     *\n-     * <p>\n-     * The salt is prepended to the hashed password and returned. So the encoded password is of the form\n-     * {@code SALT ':' hash(PASSWORD,SALT)}.\n-     *\n-     * <p>\n-     * This abbreviates the need to store the salt separately, which in turn allows us to hide the salt handling\n-     * in this little class. The rest of the Acegi thinks that we are not using salt.\n-     */\n-    /*package*/ static final PasswordEncoder CLASSIC = new PasswordEncoder() {\n-        private final PasswordEncoder passwordEncoder = new ShaPasswordEncoder(256);\n-\n-        public String encodePassword(String rawPass, Object obj) throws DataAccessException {\n-            return hash(rawPass);\n-        }\n-\n-        public boolean isPasswordValid(String encPass, String rawPass, Object obj) throws DataAccessException {\n-            // pull out the sale from the encoded password\n-            int i = encPass.indexOf(':');\n-            if(i<0) return false;\n-            String salt = encPass.substring(0,i);\n-            return encPass.substring(i+1).equals(passwordEncoder.encodePassword(rawPass,salt));\n-        }\n-\n-        /**\n-         * Creates a hashed password by generating a random salt.\n-         */\n-        private String hash(String password) {\n-            String salt = generateSalt();\n-            return salt+':'+passwordEncoder.encodePassword(password,salt);\n-        }\n-\n-        /**\n-         * Generates random salt.\n-         */\n-        private String generateSalt() {\n-            StringBuilder buf = new StringBuilder();\n-            SecureRandom sr = new SecureRandom();\n-            for( int i=0; i<6; i++ ) {// log2(52^6)=34.20... so, this is about 32bit strong.\n-                boolean upper = sr.nextBoolean();\n-                char ch = (char)(sr.nextInt(26) + 'a');\n-                if(upper)   ch=Character.toUpperCase(ch);\n-                buf.append(ch);\n-            }\n-            return buf.toString();\n-        }\n-    };\n-\n+    // TODO can we instead use BCryptPasswordEncoder from Spring Security, which has its own copy of BCrypt so we could drop the special library?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ3MTI4Mw=="}, "originalCommit": {"oid": "f04114c0f813501da9a072b984a6cf2f2f0a2180"}, "originalPosition": 277}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5NTk4OA==", "bodyText": "BouncyCastle has JSSE glue to support TLS 1.3 in older JDKs than 11. Classes like SSLContext call into that which is the usual class for handling TLS code in Java.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r517595988", "createdAt": "2020-11-04T19:57:15Z", "author": {"login": "jvz"}, "path": "core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java", "diffHunk": "@@ -804,56 +860,7 @@ public Category getCategory() {\n         }\n     }\n \n-    /**\n-     * {@link PasswordEncoder} based on SHA-256 and random salt generation.\n-     *\n-     * <p>\n-     * The salt is prepended to the hashed password and returned. So the encoded password is of the form\n-     * {@code SALT ':' hash(PASSWORD,SALT)}.\n-     *\n-     * <p>\n-     * This abbreviates the need to store the salt separately, which in turn allows us to hide the salt handling\n-     * in this little class. The rest of the Acegi thinks that we are not using salt.\n-     */\n-    /*package*/ static final PasswordEncoder CLASSIC = new PasswordEncoder() {\n-        private final PasswordEncoder passwordEncoder = new ShaPasswordEncoder(256);\n-\n-        public String encodePassword(String rawPass, Object obj) throws DataAccessException {\n-            return hash(rawPass);\n-        }\n-\n-        public boolean isPasswordValid(String encPass, String rawPass, Object obj) throws DataAccessException {\n-            // pull out the sale from the encoded password\n-            int i = encPass.indexOf(':');\n-            if(i<0) return false;\n-            String salt = encPass.substring(0,i);\n-            return encPass.substring(i+1).equals(passwordEncoder.encodePassword(rawPass,salt));\n-        }\n-\n-        /**\n-         * Creates a hashed password by generating a random salt.\n-         */\n-        private String hash(String password) {\n-            String salt = generateSalt();\n-            return salt+':'+passwordEncoder.encodePassword(password,salt);\n-        }\n-\n-        /**\n-         * Generates random salt.\n-         */\n-        private String generateSalt() {\n-            StringBuilder buf = new StringBuilder();\n-            SecureRandom sr = new SecureRandom();\n-            for( int i=0; i<6; i++ ) {// log2(52^6)=34.20... so, this is about 32bit strong.\n-                boolean upper = sr.nextBoolean();\n-                char ch = (char)(sr.nextInt(26) + 'a');\n-                if(upper)   ch=Character.toUpperCase(ch);\n-                buf.append(ch);\n-            }\n-            return buf.toString();\n-        }\n-    };\n-\n+    // TODO can we instead use BCryptPasswordEncoder from Spring Security, which has its own copy of BCrypt so we could drop the special library?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ3MTI4Mw=="}, "originalCommit": {"oid": "f04114c0f813501da9a072b984a6cf2f2f0a2180"}, "originalPosition": 277}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwMTIzMA==", "bodyText": "Sorry, do not know anything about it. Off topic I suppose. The point here is that for now I kept the existing behavior of using our own bundled jBCrypt, but now that Spring Security also bundles their own copy, we could consider switching to that and dropping our dep. I did not attempt to do so here because the format uses by BCryptPasswordEncoder does not match that of existing saved passwords in Jenkins, so we would need to do more work.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r517601230", "createdAt": "2020-11-04T20:07:14Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java", "diffHunk": "@@ -804,56 +860,7 @@ public Category getCategory() {\n         }\n     }\n \n-    /**\n-     * {@link PasswordEncoder} based on SHA-256 and random salt generation.\n-     *\n-     * <p>\n-     * The salt is prepended to the hashed password and returned. So the encoded password is of the form\n-     * {@code SALT ':' hash(PASSWORD,SALT)}.\n-     *\n-     * <p>\n-     * This abbreviates the need to store the salt separately, which in turn allows us to hide the salt handling\n-     * in this little class. The rest of the Acegi thinks that we are not using salt.\n-     */\n-    /*package*/ static final PasswordEncoder CLASSIC = new PasswordEncoder() {\n-        private final PasswordEncoder passwordEncoder = new ShaPasswordEncoder(256);\n-\n-        public String encodePassword(String rawPass, Object obj) throws DataAccessException {\n-            return hash(rawPass);\n-        }\n-\n-        public boolean isPasswordValid(String encPass, String rawPass, Object obj) throws DataAccessException {\n-            // pull out the sale from the encoded password\n-            int i = encPass.indexOf(':');\n-            if(i<0) return false;\n-            String salt = encPass.substring(0,i);\n-            return encPass.substring(i+1).equals(passwordEncoder.encodePassword(rawPass,salt));\n-        }\n-\n-        /**\n-         * Creates a hashed password by generating a random salt.\n-         */\n-        private String hash(String password) {\n-            String salt = generateSalt();\n-            return salt+':'+passwordEncoder.encodePassword(password,salt);\n-        }\n-\n-        /**\n-         * Generates random salt.\n-         */\n-        private String generateSalt() {\n-            StringBuilder buf = new StringBuilder();\n-            SecureRandom sr = new SecureRandom();\n-            for( int i=0; i<6; i++ ) {// log2(52^6)=34.20... so, this is about 32bit strong.\n-                boolean upper = sr.nextBoolean();\n-                char ch = (char)(sr.nextInt(26) + 'a');\n-                if(upper)   ch=Character.toUpperCase(ch);\n-                buf.append(ch);\n-            }\n-            return buf.toString();\n-        }\n-    };\n-\n+    // TODO can we instead use BCryptPasswordEncoder from Spring Security, which has its own copy of BCrypt so we could drop the special library?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ3MTI4Mw=="}, "originalCommit": {"oid": "f04114c0f813501da9a072b984a6cf2f2f0a2180"}, "originalPosition": 277}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjE1NzU5OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjoxOToyM1rOHu0iMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjozMjowMVrOHu1BSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg1NzI2NA==", "bodyText": "Do we want to merge this in?", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r518857264", "createdAt": "2020-11-06T16:19:23Z", "author": {"login": "daniel-beck"}, "path": "Jenkinsfile", "diffHunk": "@@ -69,6 +69,7 @@ for(j = 0; j < jdks.size(); j++) {\n                                              allowEmptyArchive: true, // in case we forgot to reincrementalify\n                                              fingerprint: true\n                         }\n+                        publishHTML([allowMissing: true, alwaysLinkToLastBuild: false, includes: 'japicmp.html', keepAll: false, reportDir: 'core/target/japicmp', reportFiles: 'japicmp.html', reportName: 'API compatibility', reportTitles: 'japicmp report'])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04114c0f813501da9a072b984a6cf2f2f0a2180"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg2NTIyNw==", "bodyText": "\u21d2 #4848 (comment)", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r518865227", "createdAt": "2020-11-06T16:32:01Z", "author": {"login": "jglick"}, "path": "Jenkinsfile", "diffHunk": "@@ -69,6 +69,7 @@ for(j = 0; j < jdks.size(); j++) {\n                                              allowEmptyArchive: true, // in case we forgot to reincrementalify\n                                              fingerprint: true\n                         }\n+                        publishHTML([allowMissing: true, alwaysLinkToLastBuild: false, includes: 'japicmp.html', keepAll: false, reportDir: 'core/target/japicmp', reportFiles: 'japicmp.html', reportName: 'API compatibility', reportTitles: 'japicmp report'])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg1NzI2NA=="}, "originalCommit": {"oid": "f04114c0f813501da9a072b984a6cf2f2f0a2180"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjE4ODIxOnYy", "diffSide": "RIGHT", "path": "core/pom.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjoyNzozMVrOHu01kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjozNjoxMFrOHu1K_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg2MjIyNA==", "bodyText": "Similarly doesn't look like something we want to merge in.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r518862224", "createdAt": "2020-11-06T16:27:31Z", "author": {"login": "daniel-beck"}, "path": "core/pom.xml", "diffHunk": "@@ -867,5 +847,41 @@ THE SOFTWARE.\n         <maven.test.redirectTestOutputToFile>true</maven.test.redirectTestOutputToFile>\n       </properties>\n     </profile>\n+    <profile>\n+      <id>japicmp</id>\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>com.github.siom79.japicmp</groupId>\n+            <artifactId>japicmp-maven-plugin</artifactId>\n+            <version>0.14.4-20200728.214757-1</version> <!-- TODO https://github.com/siom79/japicmp/pull/266 -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04114c0f813501da9a072b984a6cf2f2f0a2180"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg2NjEzMg==", "bodyText": "I think it is OK because this is only used in a profile we active in CI, so if my PR never gets picked up we can either drop this profile, or use the last mojo release which will work for most purposes (just not complex library replacements like is done here).\nHappy to remove it if you are uneasy.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r518866132", "createdAt": "2020-11-06T16:33:33Z", "author": {"login": "jglick"}, "path": "core/pom.xml", "diffHunk": "@@ -867,5 +847,41 @@ THE SOFTWARE.\n         <maven.test.redirectTestOutputToFile>true</maven.test.redirectTestOutputToFile>\n       </properties>\n     </profile>\n+    <profile>\n+      <id>japicmp</id>\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>com.github.siom79.japicmp</groupId>\n+            <artifactId>japicmp-maven-plugin</artifactId>\n+            <version>0.14.4-20200728.214757-1</version> <!-- TODO https://github.com/siom79/japicmp/pull/266 -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg2MjIyNA=="}, "originalCommit": {"oid": "f04114c0f813501da9a072b984a6cf2f2f0a2180"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg2NzcwOA==", "bodyText": "I'm fine with leaving it. I actually ran the profile and examined the results. If Daniel is concerned, though, I readily accept the removal.", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r518867708", "createdAt": "2020-11-06T16:36:10Z", "author": {"login": "jeffret-b"}, "path": "core/pom.xml", "diffHunk": "@@ -867,5 +847,41 @@ THE SOFTWARE.\n         <maven.test.redirectTestOutputToFile>true</maven.test.redirectTestOutputToFile>\n       </properties>\n     </profile>\n+    <profile>\n+      <id>japicmp</id>\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>com.github.siom79.japicmp</groupId>\n+            <artifactId>japicmp-maven-plugin</artifactId>\n+            <version>0.14.4-20200728.214757-1</version> <!-- TODO https://github.com/siom79/japicmp/pull/266 -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg2MjIyNA=="}, "originalCommit": {"oid": "f04114c0f813501da9a072b984a6cf2f2f0a2180"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzYyNTQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/acegisecurity/util/FieldUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoxOTo0N1rOICi3pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoxOTo0N1rOICi3pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzOTM2NQ==", "bodyText": "see #5105", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r539539365", "createdAt": "2020-12-09T18:19:47Z", "author": {"login": "jglick"}, "path": "core/src/main/java/org/acegisecurity/util/FieldUtils.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.acegisecurity.util;\n+\n+/**\n+ * @deprecated use {@link org.apache.commons.lang.reflect.FieldUtils}\n+ */\n+@Deprecated\n+public final class FieldUtils {\n+\n+    public static Object getProtectedFieldValue(String protectedField, Object object) {\n+        try {\n+            return org.apache.commons.lang.reflect.FieldUtils.readField(object, protectedField, true);\n+        } catch (IllegalAccessException x) {\n+            throw new RuntimeException(x);\n+        }\n+    }\n+\n+    public static void setProtectedFieldValue(String protectedField, Object object, Object newValue) {\n+        try {\n+            org.apache.commons.lang.reflect.FieldUtils.writeField(object, protectedField, newValue, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04114c0f813501da9a072b984a6cf2f2f0a2180"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3MDU1NjM2OnYy", "diffSide": "LEFT", "path": "core/src/main/java/hudson/model/UpdateCenter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxMzo0MTowMlrOIckfeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxMzo0MTowMlrOIckfeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjgyODkyMg==", "bodyText": "noting regression https://issues.jenkins-ci.org/browse/JENKINS-64746 addressed in #5216", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r566828922", "createdAt": "2021-01-29T13:41:02Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/UpdateCenter.java", "diffHunk": "@@ -67,7 +67,6 @@\n import jenkins.util.io.OnMaster;\n import net.sf.json.JSONObject;\n \n-import org.acegisecurity.Authentication;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04114c0f813501da9a072b984a6cf2f2f0a2180"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 312, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}