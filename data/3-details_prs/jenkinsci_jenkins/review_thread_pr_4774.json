{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI5Mjk0Njk1", "number": 4774, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOToyMjoxOVrOEEBaTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzoyNzo1OFrOEIdfgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjUyODc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOToyMjoxOVrOGhY36A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMjozMDoxOFrOGheoNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2MzcyMA==", "bodyText": "Could be an interface I suppose.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r437663720", "createdAt": "2020-06-09T19:22:19Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,158 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific jobs.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public static abstract class LabelValidator implements ExtensionPoint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14d1efb4a42cf086a269f6010f46ed54876d9589"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwMDQzMw==", "bodyText": "Sure. I tried keeping it as close to the original as possible.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r437700433", "createdAt": "2020-06-09T20:32:27Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,158 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific jobs.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public static abstract class LabelValidator implements ExtensionPoint {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2MzcyMA=="}, "originalCommit": {"oid": "14d1efb4a42cf086a269f6010f46ed54876d9589"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1ODAwNA==", "bodyText": "Have done this now.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r437758004", "createdAt": "2020-06-09T22:30:18Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,158 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific jobs.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public static abstract class LabelValidator implements ExtensionPoint {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2MzcyMA=="}, "originalCommit": {"oid": "14d1efb4a42cf086a269f6010f46ed54876d9589"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjUzMTQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOToyMzowNFrOGhY5hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDozNzozM1rOGhbRXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NDEzMw==", "bodyText": "or can use ExtensionList.lookup", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r437664133", "createdAt": "2020-06-09T19:23:04Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,158 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific jobs.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public static abstract class LabelValidator implements ExtensionPoint {\n+\n+        /**\n+         * Validates the use of a label within a job context.\n+         *\n+         * @param job   The job that wants to restrict itself to the specified label.\n+         * @param label The label that the job wants to restrict itself to.\n+         * @return The validation result.\n+         */\n+        @NonNull\n+        public abstract FormValidation check(@NonNull Job<?, ?> job, @NonNull Label label);\n+\n+    }\n+\n+    /**\n+     * Generates auto-completion candidates for a (partial) label.\n+     *\n+     * @param label The (partial) label for which auto-completion is being requested.\n+     * @return A set of auto-completion candidates.\n+     * @since TODO\n+     */\n+    public static AutoCompletionCandidates autoComplete(@Nullable String label) {\n+        AutoCompletionCandidates c = new AutoCompletionCandidates();\n+        Set<Label> labels = Jenkins.get().getLabels();\n+        List<String> queries = new AutoCompleteSeeder(label).getSeeds();\n+\n+        for (String term : queries) {\n+            for (Label l : labels) {\n+                if (l.getName().startsWith(term)) {\n+                    c.add(l.getName());\n+                }\n+            }\n+        }\n+        return c;\n+    }\n+\n+    /**\n+     * Validates a label expression.\n+     *\n+     * @param expression The expression to validate.\n+     * @return The validation result.\n+     * @since TODO\n+     */\n+    @NonNull\n+    public static FormValidation validate(@Nullable String expression) {\n+        return LabelExpression.validate(expression, null);\n+    }\n+\n+    /**\n+     * Validates a label expression.\n+     *\n+     * @param expression The label expression to validate.\n+     * @param job        The job context, if applicable; used for potential additional restrictions.\n+     * @return The validation result.\n+     * @since TODO\n+     */\n+    // FIXME: Should the messages be moved, or kept where they are for backward compatibility?\n+    @NonNull\n+    public static FormValidation validate(@Nullable String expression, @CheckForNull Job<?, ?> job) {\n+        if (Util.fixEmpty(expression) == null)\n+            return FormValidation.ok(); // nothing typed yet\n+        try {\n+            Label.parseExpression(expression);\n+        } catch (ANTLRException e) {\n+            return FormValidation.error(e,\n+                    Messages.AbstractProject_AssignedLabelString_InvalidBooleanExpression(e.getMessage()));\n+        }\n+        Jenkins j = Jenkins.get();\n+        Label l = j.getLabel(expression);\n+        if (l.isEmpty()) {\n+            for (LabelAtom a : l.listAtoms()) {\n+                if (a.isEmpty()) {\n+                    LabelAtom nearest = LabelAtom.findNearest(a.getName());\n+                    return FormValidation.warning(Messages.AbstractProject_AssignedLabelString_NoMatch_DidYouMean(a.getName(),nearest.getDisplayName()));\n+                }\n+            }\n+            return FormValidation.warning(Messages.AbstractProject_AssignedLabelString_NoMatch());\n+        }\n+        if (job != null) {\n+            if (job instanceof AbstractProject) { // Use any project-oriented label validators\n+                final AbstractProject<?, ?> project = (AbstractProject<?,?>) job;\n+                for (AbstractProject.LabelValidator v : j.getExtensionList(AbstractProject.LabelValidator.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14d1efb4a42cf086a269f6010f46ed54876d9589"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwMTEzNg==", "bodyText": "I just kept the original code (other than wrapping it in a is-it-a-project check); I can look at using this other method instead.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r437701136", "createdAt": "2020-06-09T20:33:53Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,158 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific jobs.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public static abstract class LabelValidator implements ExtensionPoint {\n+\n+        /**\n+         * Validates the use of a label within a job context.\n+         *\n+         * @param job   The job that wants to restrict itself to the specified label.\n+         * @param label The label that the job wants to restrict itself to.\n+         * @return The validation result.\n+         */\n+        @NonNull\n+        public abstract FormValidation check(@NonNull Job<?, ?> job, @NonNull Label label);\n+\n+    }\n+\n+    /**\n+     * Generates auto-completion candidates for a (partial) label.\n+     *\n+     * @param label The (partial) label for which auto-completion is being requested.\n+     * @return A set of auto-completion candidates.\n+     * @since TODO\n+     */\n+    public static AutoCompletionCandidates autoComplete(@Nullable String label) {\n+        AutoCompletionCandidates c = new AutoCompletionCandidates();\n+        Set<Label> labels = Jenkins.get().getLabels();\n+        List<String> queries = new AutoCompleteSeeder(label).getSeeds();\n+\n+        for (String term : queries) {\n+            for (Label l : labels) {\n+                if (l.getName().startsWith(term)) {\n+                    c.add(l.getName());\n+                }\n+            }\n+        }\n+        return c;\n+    }\n+\n+    /**\n+     * Validates a label expression.\n+     *\n+     * @param expression The expression to validate.\n+     * @return The validation result.\n+     * @since TODO\n+     */\n+    @NonNull\n+    public static FormValidation validate(@Nullable String expression) {\n+        return LabelExpression.validate(expression, null);\n+    }\n+\n+    /**\n+     * Validates a label expression.\n+     *\n+     * @param expression The label expression to validate.\n+     * @param job        The job context, if applicable; used for potential additional restrictions.\n+     * @return The validation result.\n+     * @since TODO\n+     */\n+    // FIXME: Should the messages be moved, or kept where they are for backward compatibility?\n+    @NonNull\n+    public static FormValidation validate(@Nullable String expression, @CheckForNull Job<?, ?> job) {\n+        if (Util.fixEmpty(expression) == null)\n+            return FormValidation.ok(); // nothing typed yet\n+        try {\n+            Label.parseExpression(expression);\n+        } catch (ANTLRException e) {\n+            return FormValidation.error(e,\n+                    Messages.AbstractProject_AssignedLabelString_InvalidBooleanExpression(e.getMessage()));\n+        }\n+        Jenkins j = Jenkins.get();\n+        Label l = j.getLabel(expression);\n+        if (l.isEmpty()) {\n+            for (LabelAtom a : l.listAtoms()) {\n+                if (a.isEmpty()) {\n+                    LabelAtom nearest = LabelAtom.findNearest(a.getName());\n+                    return FormValidation.warning(Messages.AbstractProject_AssignedLabelString_NoMatch_DidYouMean(a.getName(),nearest.getDisplayName()));\n+                }\n+            }\n+            return FormValidation.warning(Messages.AbstractProject_AssignedLabelString_NoMatch());\n+        }\n+        if (job != null) {\n+            if (job instanceof AbstractProject) { // Use any project-oriented label validators\n+                final AbstractProject<?, ?> project = (AbstractProject<?,?>) job;\n+                for (AbstractProject.LabelValidator v : j.getExtensionList(AbstractProject.LabelValidator.class)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NDEzMw=="}, "originalCommit": {"oid": "14d1efb4a42cf086a269f6010f46ed54876d9589"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwMzAwNg==", "bodyText": "I just kept the original code (other than wrapping it in a is-it-a-project check)\n\nFine, this was just FYI.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r437703006", "createdAt": "2020-06-09T20:37:33Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,158 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific jobs.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public static abstract class LabelValidator implements ExtensionPoint {\n+\n+        /**\n+         * Validates the use of a label within a job context.\n+         *\n+         * @param job   The job that wants to restrict itself to the specified label.\n+         * @param label The label that the job wants to restrict itself to.\n+         * @return The validation result.\n+         */\n+        @NonNull\n+        public abstract FormValidation check(@NonNull Job<?, ?> job, @NonNull Label label);\n+\n+    }\n+\n+    /**\n+     * Generates auto-completion candidates for a (partial) label.\n+     *\n+     * @param label The (partial) label for which auto-completion is being requested.\n+     * @return A set of auto-completion candidates.\n+     * @since TODO\n+     */\n+    public static AutoCompletionCandidates autoComplete(@Nullable String label) {\n+        AutoCompletionCandidates c = new AutoCompletionCandidates();\n+        Set<Label> labels = Jenkins.get().getLabels();\n+        List<String> queries = new AutoCompleteSeeder(label).getSeeds();\n+\n+        for (String term : queries) {\n+            for (Label l : labels) {\n+                if (l.getName().startsWith(term)) {\n+                    c.add(l.getName());\n+                }\n+            }\n+        }\n+        return c;\n+    }\n+\n+    /**\n+     * Validates a label expression.\n+     *\n+     * @param expression The expression to validate.\n+     * @return The validation result.\n+     * @since TODO\n+     */\n+    @NonNull\n+    public static FormValidation validate(@Nullable String expression) {\n+        return LabelExpression.validate(expression, null);\n+    }\n+\n+    /**\n+     * Validates a label expression.\n+     *\n+     * @param expression The label expression to validate.\n+     * @param job        The job context, if applicable; used for potential additional restrictions.\n+     * @return The validation result.\n+     * @since TODO\n+     */\n+    // FIXME: Should the messages be moved, or kept where they are for backward compatibility?\n+    @NonNull\n+    public static FormValidation validate(@Nullable String expression, @CheckForNull Job<?, ?> job) {\n+        if (Util.fixEmpty(expression) == null)\n+            return FormValidation.ok(); // nothing typed yet\n+        try {\n+            Label.parseExpression(expression);\n+        } catch (ANTLRException e) {\n+            return FormValidation.error(e,\n+                    Messages.AbstractProject_AssignedLabelString_InvalidBooleanExpression(e.getMessage()));\n+        }\n+        Jenkins j = Jenkins.get();\n+        Label l = j.getLabel(expression);\n+        if (l.isEmpty()) {\n+            for (LabelAtom a : l.listAtoms()) {\n+                if (a.isEmpty()) {\n+                    LabelAtom nearest = LabelAtom.findNearest(a.getName());\n+                    return FormValidation.warning(Messages.AbstractProject_AssignedLabelString_NoMatch_DidYouMean(a.getName(),nearest.getDisplayName()));\n+                }\n+            }\n+            return FormValidation.warning(Messages.AbstractProject_AssignedLabelString_NoMatch());\n+        }\n+        if (job != null) {\n+            if (job instanceof AbstractProject) { // Use any project-oriented label validators\n+                final AbstractProject<?, ?> project = (AbstractProject<?,?>) job;\n+                for (AbstractProject.LabelValidator v : j.getExtensionList(AbstractProject.LabelValidator.class)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NDEzMw=="}, "originalCommit": {"oid": "14d1efb4a42cf086a269f6010f46ed54876d9589"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjUzNTkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOToyNDozMlrOGhY8lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMjoyOTo1NVrOGhensA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NDkxOA==", "bodyText": "Why not make job be @CheckForNull in case a validator can work without a job context?\nOr relax the context type to Item?", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r437664918", "createdAt": "2020-06-09T19:24:32Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,158 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific jobs.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public static abstract class LabelValidator implements ExtensionPoint {\n+\n+        /**\n+         * Validates the use of a label within a job context.\n+         *\n+         * @param job   The job that wants to restrict itself to the specified label.\n+         * @param label The label that the job wants to restrict itself to.\n+         * @return The validation result.\n+         */\n+        @NonNull\n+        public abstract FormValidation check(@NonNull Job<?, ?> job, @NonNull Label label);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14d1efb4a42cf086a269f6010f46ed54876d9589"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwNTI5NA==", "bodyText": "I think the validator concept was added specifically for project-based validation (the main validation code already handles pure label expression validation). It was certainly only ever invoked when a project was specified.\nBut given that this is new API specifically to relax the Project-oriented existing API, I have no issue using Item instead. I lack the familiarity with the codebase to know what additional cases that would enable though.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r437705294", "createdAt": "2020-06-09T20:41:51Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,158 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific jobs.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public static abstract class LabelValidator implements ExtensionPoint {\n+\n+        /**\n+         * Validates the use of a label within a job context.\n+         *\n+         * @param job   The job that wants to restrict itself to the specified label.\n+         * @param label The label that the job wants to restrict itself to.\n+         * @return The validation result.\n+         */\n+        @NonNull\n+        public abstract FormValidation check(@NonNull Job<?, ?> job, @NonNull Label label);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NDkxOA=="}, "originalCommit": {"oid": "14d1efb4a42cf086a269f6010f46ed54876d9589"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcxNTgyNg==", "bodyText": "I lack the familiarity with the codebase to know what additional cases that would enable though.\n\nMainly validation on Folders, in case you have something that offers certain labels only in some subfolders. Something like https://github.com/jenkinsci/kubernetes-plugin/blob/d9cf6a810fce807fe35cd56ebe17ffb343c702f4/src/main/resources/org/csanchez/jenkins/plugins/kubernetes/KubernetesFolderProperty/config.jelly#L5 perhaps. (CloudBees CI also has a proprietary example I think.)", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r437715826", "createdAt": "2020-06-09T20:55:36Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,158 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific jobs.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public static abstract class LabelValidator implements ExtensionPoint {\n+\n+        /**\n+         * Validates the use of a label within a job context.\n+         *\n+         * @param job   The job that wants to restrict itself to the specified label.\n+         * @param label The label that the job wants to restrict itself to.\n+         * @return The validation result.\n+         */\n+        @NonNull\n+        public abstract FormValidation check(@NonNull Job<?, ?> job, @NonNull Label label);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NDkxOA=="}, "originalCommit": {"oid": "14d1efb4a42cf086a269f6010f46ed54876d9589"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1Nzg3Mg==", "bodyText": "Done - Item is now used instead of Job.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r437757872", "createdAt": "2020-06-09T22:29:55Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,158 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific jobs.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public static abstract class LabelValidator implements ExtensionPoint {\n+\n+        /**\n+         * Validates the use of a label within a job context.\n+         *\n+         * @param job   The job that wants to restrict itself to the specified label.\n+         * @param label The label that the job wants to restrict itself to.\n+         * @return The validation result.\n+         */\n+        @NonNull\n+        public abstract FormValidation check(@NonNull Job<?, ?> job, @NonNull Label label);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NDkxOA=="}, "originalCommit": {"oid": "14d1efb4a42cf086a269f6010f46ed54876d9589"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTU5NjE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToyNDozM1rOGjqMHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDo1NzoxNFrOGj1-jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0NDU3NA==", "bodyText": "Note that many plugins have copy-pasted the code: https://github.com/search?q=org%3Ajenkinsci+AutoCompleteSeeder&type=Code .\nMaybe it;s time to consider making it a public API in jenkins.model.labels", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440044574", "createdAt": "2020-06-15T09:24:33Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,156 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIzNzcxMQ==", "bodyText": "Makes sense, although it may have been private in part because the auto-completion for labels is still far from perfect - \"foo&&b\" will pop up completion for the \"b\" part, but selecting \"bar\" then replaces the entire expression (mitigated slightly by setting ' ' as delimiter and typing \"foo && b\").\nTo me, the fact that many plugins copied the internal implentation just shows how useful exposing an autoComplete method is; it does not necessarily make a case for exposing that method's internals.\nHaving said that, I don't feel all that strongly about not exposing it either.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440237711", "createdAt": "2020-06-15T14:57:14Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,156 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0NDU3NA=="}, "originalCommit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTU5ODY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToyNToxMVrOGjqNtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDo1ODoxMVrOGj2BWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0NDk4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static class AutoCompleteSeeder {\n          \n          \n            \n                static class LabelAutoCompleteSeeder {", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440044983", "createdAt": "2020-06-15T09:25:11Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,156 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIzODQyNA==", "bodyText": "Yes, if moving it out of LabelExpression, adding the Label prefix makes total sense.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440238424", "createdAt": "2020-06-15T14:58:11Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,156 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0NDk4Mw=="}, "originalCommit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTYwNzU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToyNzozOVrOGjqTWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDo1MDowNlrOGj1p-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0NjQyNA==", "bodyText": "I would suggest to move it into jenkins.model.labels instead of introducing a new nested interface", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440046424", "createdAt": "2020-06-15T09:27:39Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,156 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific context items.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public interface LabelValidator extends ExtensionPoint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIzMjQ0MQ==", "bodyText": "I agree - I initially tried to keep the implementation as close to the original as possible.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440232441", "createdAt": "2020-06-15T14:50:06Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,156 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific context items.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public interface LabelValidator extends ExtensionPoint {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0NjQyNA=="}, "originalCommit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTYwOTY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToyODoxN1rOGjqUsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDo1OToyNVrOGj2FGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0Njc2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static AutoCompletionCandidates autoComplete(@Nullable String label) {\n          \n          \n            \n                @NonNull\n          \n          \n            \n                public static AutoCompletionCandidates autoComplete(@Nullable String label) {", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440046769", "createdAt": "2020-06-15T09:28:17Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,156 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific context items.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public interface LabelValidator extends ExtensionPoint {\n+\n+        /**\n+         * Validates the use of a label within a particular context.\n+         *\n+         * @param item  The context item to be restricted by the label.\n+         * @param label The label that the job wants to restrict itself to.\n+         * @return The validation result.\n+         */\n+        @NonNull\n+        FormValidation check(@NonNull Item item, @NonNull Label label);\n+\n+    }\n+\n+    /**\n+     * Generates auto-completion candidates for a (partial) label.\n+     *\n+     * @param label The (partial) label for which auto-completion is being requested.\n+     * @return A set of auto-completion candidates.\n+     * @since TODO\n+     */\n+    public static AutoCompletionCandidates autoComplete(@Nullable String label) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIzOTM4NQ==", "bodyText": "Yes. After applying the other suggested changes, I'll make another pass to ensure all new/changed API has complete nullability annotations.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440239385", "createdAt": "2020-06-15T14:59:25Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -210,4 +225,156 @@ public LabelOperatorPrecedence precedence() {\n             return LabelOperatorPrecedence.IMPLIES;\n         }\n     }\n+\n+    //region Auto-Completion and Validation\n+\n+    /**\n+     * Utility class for taking the current input value and computing a list of potential terms to match against the\n+     * list of defined labels.\n+     */\n+    static class AutoCompleteSeeder {\n+        private String source;\n+\n+        AutoCompleteSeeder(String source) {\n+            this.source = source;\n+        }\n+\n+        List<String> getSeeds() {\n+            ArrayList<String> terms = new ArrayList<>();\n+            boolean trailingQuote = source.endsWith(\"\\\"\");\n+            boolean leadingQuote = source.startsWith(\"\\\"\");\n+            boolean trailingSpace = source.endsWith(\" \");\n+\n+            if (trailingQuote || (trailingSpace && !leadingQuote)) {\n+                terms.add(\"\");\n+            } else {\n+                if (leadingQuote) {\n+                    int quote = source.lastIndexOf('\"');\n+                    if (quote == 0) {\n+                        terms.add(source.substring(1));\n+                    } else {\n+                        terms.add(\"\");\n+                    }\n+                } else {\n+                    int space = source.lastIndexOf(' ');\n+                    if (space > -1) {\n+                        terms.add(source.substring(space+1));\n+                    } else {\n+                        terms.add(source);\n+                    }\n+                }\n+            }\n+\n+            return terms;\n+        }\n+    }\n+\n+    /**\n+     * Plugins may want to contribute additional restrictions on the use of specific labels for specific context items.\n+     * This extension point allows such restrictions.\n+     *\n+     * @since TODO\n+     */\n+    public interface LabelValidator extends ExtensionPoint {\n+\n+        /**\n+         * Validates the use of a label within a particular context.\n+         *\n+         * @param item  The context item to be restricted by the label.\n+         * @param label The label that the job wants to restrict itself to.\n+         * @return The validation result.\n+         */\n+        @NonNull\n+        FormValidation check(@NonNull Item item, @NonNull Label label);\n+\n+    }\n+\n+    /**\n+     * Generates auto-completion candidates for a (partial) label.\n+     *\n+     * @param label The (partial) label for which auto-completion is being requested.\n+     * @return A set of auto-completion candidates.\n+     * @since TODO\n+     */\n+    public static AutoCompletionCandidates autoComplete(@Nullable String label) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0Njc2OQ=="}, "originalCommit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTYxODQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/AbstractProject.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTozMDozOVrOGjqaHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDoxNToyOVrOGkBMsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0ODE1Nw==", "bodyText": "This approach makes it difficult to adopt the new API without bumping the core dependency. E.g. I could not update https://plugins.jenkins.io/label-verifier/ . Maybe it makes sense to introduce a temporary bridge method in this class so that checks could be added in the existing extension point.\nDoes not block it", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440048157", "createdAt": "2020-06-15T09:30:39Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/AbstractProject.java", "diffHunk": "@@ -2128,7 +2048,9 @@ public void setCustomWorkspace(String customWorkspace) throws IOException {\n      * This extension point allows such restrictions.\n      *\n      * @since 1.540\n+     * @deprecated Use {@link LabelExpression.LabelValidator} instead.\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0NzcwNg==", "bodyText": "I mean, the implementation for both validate and auto-complete is standalone.\nSo it could be created as a separate plugin/library, containing just this functionality (wrapped in some new class like LabelUtil, not inside LabelExpression). Then new core could use that \"plugin\", and existing plugins could add a dependency on that rather than a newer Jenkins core.\nI'm just not sure a fairly minor feature like this warrants that.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440247706", "createdAt": "2020-06-15T15:11:23Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/hudson/model/AbstractProject.java", "diffHunk": "@@ -2128,7 +2048,9 @@ public void setCustomWorkspace(String customWorkspace) throws IOException {\n      * This extension point allows such restrictions.\n      *\n      * @since 1.540\n+     * @deprecated Use {@link LabelExpression.LabelValidator} instead.\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0ODE1Nw=="}, "originalCommit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4Mzk5Mw==", "bodyText": "It can be done without a plugin and without complex code actually\n\nUpdate LabelValidator\n\npublic FormValidation checkJob(@NonNull Job<?, ?> job, @NonNull Label label) {\n    return FormValidation.ok()\n}\n\n\n\nIn LabelExpression#validate() add invocation of this method and fail if not OK\n\n\nIn a plugin implement a method without adding explicit @Override annotation. Thanks to Java, it will still be an override which does not require core bump", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440383993", "createdAt": "2020-06-15T19:02:23Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/AbstractProject.java", "diffHunk": "@@ -2128,7 +2048,9 @@ public void setCustomWorkspace(String customWorkspace) throws IOException {\n      * This extension point allows such restrictions.\n      *\n      * @since 1.540\n+     * @deprecated Use {@link LabelExpression.LabelValidator} instead.\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0ODE1Nw=="}, "originalCommit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMTU1Mg==", "bodyText": "Ah you meant for the LabelValidator, so for plugins wanting to add validation processing, not plugins wanting to consume the new API.\nSure, I can do that - but I think I'll make the default implementation use Item, and call through to the plain check() when the passed item is an AbstractProject.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440421552", "createdAt": "2020-06-15T20:15:29Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/hudson/model/AbstractProject.java", "diffHunk": "@@ -2128,7 +2048,9 @@ public void setCustomWorkspace(String customWorkspace) throws IOException {\n      * This extension point allows such restrictions.\n      *\n      * @since 1.540\n+     * @deprecated Use {@link LabelExpression.LabelValidator} instead.\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0ODE1Nw=="}, "originalCommit": {"oid": "0428cd8726679d09f5ea0de933a72c0698dd0af7"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzY4MTYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/labels/LabelAutoCompleteSeeder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo1Nzo0OVrOGj-w1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo0Njo0NFrOGkAUxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MTY1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * list of defined labels.\n          \n          \n            \n             * list of defined labels.\n          \n          \n            \n             * @since TODO", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440381652", "createdAt": "2020-06-15T18:57:49Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/labels/LabelAutoCompleteSeeder.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package hudson.model.labels;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Utility class for taking the current input value and computing a list of potential terms to match against the\n+ * list of defined labels.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "863eae52ec112a136d0c591a1bc659fe929c4730"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwNzIzOQ==", "bodyText": "Yes, missed that.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r440407239", "createdAt": "2020-06-15T19:46:44Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/hudson/model/labels/LabelAutoCompleteSeeder.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package hudson.model.labels;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Utility class for taking the current input value and computing a list of potential terms to match against the\n+ * list of defined labels.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MTY1Mg=="}, "originalCommit": {"oid": "863eae52ec112a136d0c591a1bc659fe929c4730"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODU2MzAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/labels/LabelAutoCompleteSeeder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjowMDowOVrOGkuq9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTowMjozOVrOGk1s5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2NjU4Mw==", "bodyText": "I think we prefer to use jenkins.* packages for new classes right @oleg-nenashev / @daniel-beck ?", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r441166583", "createdAt": "2020-06-16T22:00:09Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/labels/LabelAutoCompleteSeeder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package hudson.model.labels;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d542a76aee1647b456159c7b4dd1502fbd8ac423"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4ODAzOQ==", "bodyText": "I can move them, no problem.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r441188039", "createdAt": "2020-06-16T22:59:29Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/hudson/model/labels/LabelAutoCompleteSeeder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package hudson.model.labels;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2NjU4Mw=="}, "originalCommit": {"oid": "d542a76aee1647b456159c7b4dd1502fbd8ac423"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4MTc2NQ==", "bodyText": "Yes, we should keep new API in \"jenkins\" if possible. Hudson is still a subject to potential trademark disputes", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r441281765", "createdAt": "2020-06-17T05:02:39Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/labels/LabelAutoCompleteSeeder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package hudson.model.labels;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2NjU4Mw=="}, "originalCommit": {"oid": "d542a76aee1647b456159c7b4dd1502fbd8ac423"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODU2NTE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjowMDo1NVrOGkusSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzowNToxN1rOGkwF_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2NjkyMQ==", "bodyText": "Unnecessary IMO; AbstractProject.LabelValidator should just be deprecated.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r441166921", "createdAt": "2020-06-16T22:00:55Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -340,27 +278,27 @@ public static FormValidation validate(@Nullable String expression, @CheckForNull\n             Label.parseExpression(expression);\n         } catch (ANTLRException e) {\n             return FormValidation.error(e,\n-                    Messages.AbstractProject_AssignedLabelString_InvalidBooleanExpression(e.getMessage()));\n+                    Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()));\n         }\n         final Jenkins j = Jenkins.get();\n         Label l = j.getLabel(expression);\n         if (l.isEmpty()) {\n             for (LabelAtom a : l.listAtoms()) {\n                 if (a.isEmpty()) {\n                     LabelAtom nearest = LabelAtom.findNearest(a.getName());\n-                    return FormValidation.warning(Messages.AbstractProject_AssignedLabelString_NoMatch_DidYouMean(a.getName(),nearest.getDisplayName()));\n+                    return FormValidation.warning(Messages.LabelExpression_NoMatch_DidYouMean(a.getName(),nearest.getDisplayName()));\n                 }\n             }\n-            return FormValidation.warning(Messages.AbstractProject_AssignedLabelString_NoMatch());\n+            return FormValidation.warning(Messages.LabelExpression_NoMatch());\n         }\n         if (item != null) {\n-            if (item instanceof AbstractProject) { // Use any project-oriented label validators\n-                final AbstractProject<?, ?> project = (AbstractProject<?,?>) item;\n-                for (AbstractProject.LabelValidator v : j.getExtensionList(AbstractProject.LabelValidator.class)) {\n-                    FormValidation result = v.check(project, l);\n-                    if (!FormValidation.Kind.OK.equals(result.kind)) {\n-                        return result;\n-                    }\n+            // Use the project-oriented validators (including any that might implement checkItem to support non-Project\n+            // items too).\n+            // FIXME: Perhaps these should aggregate their errors/warnings?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d542a76aee1647b456159c7b4dd1502fbd8ac423"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4OTg4Ng==", "bodyText": "Without applying AbstractProject.LabelValidator Instances, existing plugins implementing that extension point would stop being applied (and there would be no way for them to support pipeline jobs without changing their core dependency).", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r441189886", "createdAt": "2020-06-16T23:05:17Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -340,27 +278,27 @@ public static FormValidation validate(@Nullable String expression, @CheckForNull\n             Label.parseExpression(expression);\n         } catch (ANTLRException e) {\n             return FormValidation.error(e,\n-                    Messages.AbstractProject_AssignedLabelString_InvalidBooleanExpression(e.getMessage()));\n+                    Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()));\n         }\n         final Jenkins j = Jenkins.get();\n         Label l = j.getLabel(expression);\n         if (l.isEmpty()) {\n             for (LabelAtom a : l.listAtoms()) {\n                 if (a.isEmpty()) {\n                     LabelAtom nearest = LabelAtom.findNearest(a.getName());\n-                    return FormValidation.warning(Messages.AbstractProject_AssignedLabelString_NoMatch_DidYouMean(a.getName(),nearest.getDisplayName()));\n+                    return FormValidation.warning(Messages.LabelExpression_NoMatch_DidYouMean(a.getName(),nearest.getDisplayName()));\n                 }\n             }\n-            return FormValidation.warning(Messages.AbstractProject_AssignedLabelString_NoMatch());\n+            return FormValidation.warning(Messages.LabelExpression_NoMatch());\n         }\n         if (item != null) {\n-            if (item instanceof AbstractProject) { // Use any project-oriented label validators\n-                final AbstractProject<?, ?> project = (AbstractProject<?,?>) item;\n-                for (AbstractProject.LabelValidator v : j.getExtensionList(AbstractProject.LabelValidator.class)) {\n-                    FormValidation result = v.check(project, l);\n-                    if (!FormValidation.Kind.OK.equals(result.kind)) {\n-                        return result;\n-                    }\n+            // Use the project-oriented validators (including any that might implement checkItem to support non-Project\n+            // items too).\n+            // FIXME: Perhaps these should aggregate their errors/warnings?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2NjkyMQ=="}, "originalCommit": {"oid": "d542a76aee1647b456159c7b4dd1502fbd8ac423"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODU5MzMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/model/labels/LabelValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo1ODo1NVrOGnwBCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjoxMjowNFrOGn8aVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNDM0NQ==", "bodyText": "Perhaps clarify that only non-OK results are considered. (You can create OK with message, which would be thrown out in this context IIUC.)", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444334345", "createdAt": "2020-06-23T15:58:55Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/model/labels/LabelValidator.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package jenkins.model.labels;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.ExtensionPoint;\n+import hudson.model.Item;\n+import hudson.model.Label;\n+import hudson.util.FormValidation;\n+\n+/**\n+ * Plugins may want to contribute additional restrictions on the use of specific labels for specific context items.\n+ * This extension point allows such restrictions.\n+ *\n+ * @since TODO\n+ */\n+public interface LabelValidator extends ExtensionPoint {\n+\n+    /**\n+     * Validates the use of a label within a particular context.\n+     *\n+     * @param item  The context item to be restricted by the label.\n+     * @param label The label that the job wants to restrict itself to.\n+     * @return The validation result.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzNzQyOQ==", "bodyText": "Done. I also adjusted the use of these validators so that all warnings and errors they report are aggregated and shown.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444537429", "createdAt": "2020-06-23T22:12:04Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/jenkins/model/labels/LabelValidator.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package jenkins.model.labels;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.ExtensionPoint;\n+import hudson.model.Item;\n+import hudson.model.Label;\n+import hudson.util.FormValidation;\n+\n+/**\n+ * Plugins may want to contribute additional restrictions on the use of specific labels for specific context items.\n+ * This extension point allows such restrictions.\n+ *\n+ * @since TODO\n+ */\n+public interface LabelValidator extends ExtensionPoint {\n+\n+    /**\n+     * Validates the use of a label within a particular context.\n+     *\n+     * @param item  The context item to be restricted by the label.\n+     * @param label The label that the job wants to restrict itself to.\n+     * @return The validation result.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNDM0NQ=="}, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODU5NTcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/hudson/model/Messages.properties", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo1OToyNVrOGnwCkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjoxMTowNFrOGn8Y0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNDczNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            LabelExpression.NoMatch=There''s no agent/cloud that matches this assignment\n          \n          \n            \n            LabelExpression.NoMatch=There\u2019s no agent/cloud that matches this assignment\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            LabelExpression.NoMatch=There''s no agent/cloud that matches this assignment\n          \n          \n            \n            LabelExpression.NoMatch=There is no agent/cloud that matches this assignment", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444334736", "createdAt": "2020-06-23T15:59:25Z", "author": {"login": "jglick"}, "path": "core/src/main/resources/hudson/model/Messages.properties", "diffHunk": "@@ -195,6 +188,11 @@ Job.you_must_use_the_save_button_if_you_wish=You must use the Save button if you\n Label.GroupOf=group of {0}\n Label.InvalidLabel=invalid label\n Label.ProvisionedFrom=Provisioned from {0}\n+LabelExpression.InvalidBooleanExpression=Invalid boolean expression: {0}\n+LabelExpression.LabelLink=<a href=\"{0}{2}\">Label {1}</a> is serviced by {3,choice,0#no nodes|1#1 node|1<{3} nodes}{4,choice,0#|1# and 1 cloud|1< and {4} clouds}. \\\n+  Permissions or other restrictions provided by plugins may prevent this job from running on those nodes.\n+LabelExpression.NoMatch=There''s no agent/cloud that matches this assignment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NzUxOQ==", "bodyText": "Sure. But it feels like that warrants a separate PR specifically to deal with apostrophes in messages - it seems unlikely that this is the only case. That PR could then deal with the desired approach for Unicodifying punctuation (e.g using \"proper\" quotation marks too, if they appear in messages).", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444467519", "createdAt": "2020-06-23T19:49:22Z", "author": {"login": "Zastai"}, "path": "core/src/main/resources/hudson/model/Messages.properties", "diffHunk": "@@ -195,6 +188,11 @@ Job.you_must_use_the_save_button_if_you_wish=You must use the Save button if you\n Label.GroupOf=group of {0}\n Label.InvalidLabel=invalid label\n Label.ProvisionedFrom=Provisioned from {0}\n+LabelExpression.InvalidBooleanExpression=Invalid boolean expression: {0}\n+LabelExpression.LabelLink=<a href=\"{0}{2}\">Label {1}</a> is serviced by {3,choice,0#no nodes|1#1 node|1<{3} nodes}{4,choice,0#|1# and 1 cloud|1< and {4} clouds}. \\\n+  Permissions or other restrictions provided by plugins may prevent this job from running on those nodes.\n+LabelExpression.NoMatch=There''s no agent/cloud that matches this assignment", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNDczNg=="}, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2ODc1MA==", "bodyText": "Yes, just suggesting it here since you are touching the line of code anyway.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444468750", "createdAt": "2020-06-23T19:51:42Z", "author": {"login": "jglick"}, "path": "core/src/main/resources/hudson/model/Messages.properties", "diffHunk": "@@ -195,6 +188,11 @@ Job.you_must_use_the_save_button_if_you_wish=You must use the Save button if you\n Label.GroupOf=group of {0}\n Label.InvalidLabel=invalid label\n Label.ProvisionedFrom=Provisioned from {0}\n+LabelExpression.InvalidBooleanExpression=Invalid boolean expression: {0}\n+LabelExpression.LabelLink=<a href=\"{0}{2}\">Label {1}</a> is serviced by {3,choice,0#no nodes|1#1 node|1<{3} nodes}{4,choice,0#|1# and 1 cloud|1< and {4} clouds}. \\\n+  Permissions or other restrictions provided by plugins may prevent this job from running on those nodes.\n+LabelExpression.NoMatch=There''s no agent/cloud that matches this assignment", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNDczNg=="}, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3MDc3NA==", "bodyText": "Is prose preferred over terseness btw? This specific message sounds like \"No agent/cloud matches this label expression\" would be fine (also dropping the \"assignment\" term, which I think is outdated and/or not applicable in all contexts.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444470774", "createdAt": "2020-06-23T19:55:29Z", "author": {"login": "Zastai"}, "path": "core/src/main/resources/hudson/model/Messages.properties", "diffHunk": "@@ -195,6 +188,11 @@ Job.you_must_use_the_save_button_if_you_wish=You must use the Save button if you\n Label.GroupOf=group of {0}\n Label.InvalidLabel=invalid label\n Label.ProvisionedFrom=Provisioned from {0}\n+LabelExpression.InvalidBooleanExpression=Invalid boolean expression: {0}\n+LabelExpression.LabelLink=<a href=\"{0}{2}\">Label {1}</a> is serviced by {3,choice,0#no nodes|1#1 node|1<{3} nodes}{4,choice,0#|1# and 1 cloud|1< and {4} clouds}. \\\n+  Permissions or other restrictions provided by plugins may prevent this job from running on those nodes.\n+LabelExpression.NoMatch=There''s no agent/cloud that matches this assignment", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNDczNg=="}, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3MTE3NA==", "bodyText": "No agent/cloud matches this label expression\n\nsounds fine to me, if you are interested in copy editing while you are here.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444471174", "createdAt": "2020-06-23T19:56:14Z", "author": {"login": "jglick"}, "path": "core/src/main/resources/hudson/model/Messages.properties", "diffHunk": "@@ -195,6 +188,11 @@ Job.you_must_use_the_save_button_if_you_wish=You must use the Save button if you\n Label.GroupOf=group of {0}\n Label.InvalidLabel=invalid label\n Label.ProvisionedFrom=Provisioned from {0}\n+LabelExpression.InvalidBooleanExpression=Invalid boolean expression: {0}\n+LabelExpression.LabelLink=<a href=\"{0}{2}\">Label {1}</a> is serviced by {3,choice,0#no nodes|1#1 node|1<{3} nodes}{4,choice,0#|1# and 1 cloud|1< and {4} clouds}. \\\n+  Permissions or other restrictions provided by plugins may prevent this job from running on those nodes.\n+LabelExpression.NoMatch=There''s no agent/cloud that matches this assignment", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNDczNg=="}, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzNzA0MQ==", "bodyText": "Done. I also reworded the other label validation messages to better match each other, and to avoid mentioning \"jobs\" when the validation may well be happening completely outside of any job context.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444537041", "createdAt": "2020-06-23T22:11:04Z", "author": {"login": "Zastai"}, "path": "core/src/main/resources/hudson/model/Messages.properties", "diffHunk": "@@ -195,6 +188,11 @@ Job.you_must_use_the_save_button_if_you_wish=You must use the Save button if you\n Label.GroupOf=group of {0}\n Label.InvalidLabel=invalid label\n Label.ProvisionedFrom=Provisioned from {0}\n+LabelExpression.InvalidBooleanExpression=Invalid boolean expression: {0}\n+LabelExpression.LabelLink=<a href=\"{0}{2}\">Label {1}</a> is serviced by {3,choice,0#no nodes|1#1 node|1<{3} nodes}{4,choice,0#|1# and 1 cloud|1< and {4} clouds}. \\\n+  Permissions or other restrictions provided by plugins may prevent this job from running on those nodes.\n+LabelExpression.NoMatch=There''s no agent/cloud that matches this assignment", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNDczNg=="}, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODYwNzA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/model/labels/LabelAutoCompleteSeeder.java", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjowMjowN1rOGnwJ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjoxMDowMlrOGn8XbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjU5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *\n          \n          \n            \n             * @since TODO\n          \n          \n            \n             */\n          \n          \n            \n             */\n          \n          \n            \n            @Restricted(NoExternalUse.class)\n          \n      \n    \n    \n  \n\nsince I do not see it being used in any of the downstream PRs and I would expect it to be called only from LabelExpression.autoComplete.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444336596", "createdAt": "2020-06-23T16:02:07Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/model/labels/LabelAutoCompleteSeeder.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package jenkins.model.labels;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Utility class for taking the current input value and computing a list of potential terms to match against the\n+ * list of defined labels.\n+ *\n+ * @since TODO\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4ODEwMA==", "bodyText": "(plus imports of course)", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444388100", "createdAt": "2020-06-23T17:25:48Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/model/labels/LabelAutoCompleteSeeder.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package jenkins.model.labels;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Utility class for taking the current input value and computing a list of potential terms to match against the\n+ * list of defined labels.\n+ *\n+ * @since TODO\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjU5Ng=="}, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2ODcyNw==", "bodyText": "I'm confused. First I get asked to move it out of the class as a public type so it can be reused, and now you want me to flag it to prevent use.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444468727", "createdAt": "2020-06-23T19:51:39Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/jenkins/model/labels/LabelAutoCompleteSeeder.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package jenkins.model.labels;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Utility class for taking the current input value and computing a list of potential terms to match against the\n+ * list of defined labels.\n+ *\n+ * @since TODO\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjU5Ng=="}, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3MDM0NQ==", "bodyText": "#4774 (comment) for reference. Indeed there are a few plugins which have copied this class. The question is whether they actually needed to, or if they could call LabelExpression.autoComplete instead. If there is a legitimate need to refer to LabelAutocompleteSeeder directly, it could be unrestricted if and when there is a downstream PR demonstrating its proper use.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444470345", "createdAt": "2020-06-23T19:54:43Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/model/labels/LabelAutoCompleteSeeder.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package jenkins.model.labels;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Utility class for taking the current input value and computing a list of potential terms to match against the\n+ * list of defined labels.\n+ *\n+ * @since TODO\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjU5Ng=="}, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3MTcwMA==", "bodyText": "Sorry for the mixup, just trying to avoid introducing new public APIs without a clear need.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444471700", "createdAt": "2020-06-23T19:57:14Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/model/labels/LabelAutoCompleteSeeder.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package jenkins.model.labels;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Utility class for taking the current input value and computing a list of potential terms to match against the\n+ * list of defined labels.\n+ *\n+ * @since TODO\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjU5Ng=="}, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3MTg3NQ==", "bodyText": "I don't really see why anyone would need to use it. I'd personally be in favour to move it back as a private nested implementation detail class.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444471875", "createdAt": "2020-06-23T19:57:33Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/jenkins/model/labels/LabelAutoCompleteSeeder.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package jenkins.model.labels;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Utility class for taking the current input value and computing a list of potential terms to match against the\n+ * list of defined labels.\n+ *\n+ * @since TODO\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjU5Ng=="}, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3Mjg3Ng==", "bodyText": "Assuming that a quick review of the existing copies suggests that they could use the simple autoComplete method, then yes a private nested implementation class would be fine. I see a usage from test sources though it was not clear if that was necessary or not. (Note that @Restricted is ignored in src/test/java/**/*.java. It is designed only to prevent improper use of types in production code.)", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444472876", "createdAt": "2020-06-23T19:59:29Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/model/labels/LabelAutoCompleteSeeder.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package jenkins.model.labels;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Utility class for taking the current input value and computing a list of potential terms to match against the\n+ * list of defined labels.\n+ *\n+ * @since TODO\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjU5Ng=="}, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3NjcwOQ==", "bodyText": "I'll do an org search and check, but I very much suspect all cases copied the seeder because they also copied the autocomplete method, which used the seeder.\nAs for the test, I think the nested class was package-private to make those tests work. I'm not super convinced that unit tests for the seeder make sense though, given that it's just an implementation detail. But it was there, so I kept it, and will continue to keep it until asked otherwise.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444476709", "createdAt": "2020-06-23T20:07:08Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/jenkins/model/labels/LabelAutoCompleteSeeder.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package jenkins.model.labels;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Utility class for taking the current input value and computing a list of potential terms to match against the\n+ * list of defined labels.\n+ *\n+ * @since TODO\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjU5Ng=="}, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzNDY0OQ==", "bodyText": "Each of the cases found by the org search from #4774 (comment) is a plugin that copied the doAutoCompleteXXX() method, and also copied the seeder - some as a nested class, some as a separate one. Think I'll just apply the @Restricted as suggested - it's less work than moving it back and adapting the unit test again too.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444534649", "createdAt": "2020-06-23T22:04:33Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/jenkins/model/labels/LabelAutoCompleteSeeder.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package jenkins.model.labels;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Utility class for taking the current input value and computing a list of potential terms to match against the\n+ * list of defined labels.\n+ *\n+ * @since TODO\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjU5Ng=="}, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzNjY4NQ==", "bodyText": "Done", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r444536685", "createdAt": "2020-06-23T22:10:02Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/jenkins/model/labels/LabelAutoCompleteSeeder.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package jenkins.model.labels;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Utility class for taking the current input value and computing a list of potential terms to match against the\n+ * list of defined labels.\n+ *\n+ * @since TODO\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjU5Ng=="}, "originalCommit": {"oid": "df6c3735feb21f287633222e86bdb8e67c19a172"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzA3MjY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzoyNzo1OFrOGocCxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo0MDoxMlrOGoefQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA1NTY4NQ==", "bodyText": "BTW I think if \n  \n    \n      jenkins/core/src/main/java/hudson/util/FormValidation.java\n    \n    \n        Lines 227 to 238\n      in\n      339f9b9\n    \n    \n    \n    \n\n        \n          \n           final StringBuilder sb = new StringBuilder(\"<ul style='list-style-type: none; padding-left: 0; margin: 0'>\"); \n        \n\n        \n          \n           FormValidation.Kind worst = Kind.OK; \n        \n\n        \n          \n           for (FormValidation validation: validations) { \n        \n\n        \n          \n               sb.append(\"<li>\").append(validation.renderHtml()).append(\"</li>\"); \n        \n\n        \n          \n            \n        \n\n        \n          \n               if (validation.kind.ordinal() > worst.ordinal()) { \n        \n\n        \n          \n                   worst = validation.kind; \n        \n\n        \n          \n               } \n        \n\n        \n          \n           } \n        \n\n        \n          \n           sb.append(\"</ul>\"); \n        \n\n        \n          \n            \n        \n\n        \n          \n           return respond(worst, sb.toString()); \n        \n    \n  \n\n were refined slightly, to ignore all occurrences of FormValidation.OK in its input, then the API and this impl could be simplified a bit while actually handling ok(String) from validators. Not necessary in this PR, just something I noticed while looking at aggregate.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r445055685", "createdAt": "2020-06-24T17:27:58Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -288,28 +289,35 @@ public static FormValidation validate(@Nullable String expression, @CheckForNull\n             for (LabelAtom a : l.listAtoms()) {\n                 if (a.isEmpty()) {\n                     LabelAtom nearest = LabelAtom.findNearest(a.getName());\n-                    return FormValidation.warning(Messages.LabelExpression_NoMatch_DidYouMean(a.getName(),nearest.getDisplayName()));\n+                    return FormValidation.warning(Messages.LabelExpression_NoMatch_DidYouMean(a.getName(), nearest.getDisplayName()));\n                 }\n             }\n             return FormValidation.warning(Messages.LabelExpression_NoMatch());\n         }\n         if (item != null) {\n-            // Use the project-oriented validators (including any that might implement checkItem to support non-Project\n-            // items too).\n-            // FIXME: Perhaps these should aggregate their errors/warnings?\n+            final List<FormValidation> problems = new ArrayList<>();\n+            // Use the project-oriented validators too, so that validation from older plugins still gets applied.\n             for (AbstractProject.LabelValidator v : j.getExtensionList(AbstractProject.LabelValidator.class)) {\n                 FormValidation result = v.checkItem(item, l);\n-                if (!FormValidation.Kind.OK.equals(result.kind)) {\n-                    return result;\n+                if (FormValidation.Kind.OK.equals(result.kind)) {\n+                    continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a94cb38c96edba174cd9c5e399e833b07b9640f2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5MzE1OQ==", "bodyText": "Yes I looked there too. But I'm not sure it would help to get bulleted list entries for \"Label is valid\" (assuming a validator might put that in the OK text) among the errors/warnings.", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r445093159", "createdAt": "2020-06-24T18:35:23Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -288,28 +289,35 @@ public static FormValidation validate(@Nullable String expression, @CheckForNull\n             for (LabelAtom a : l.listAtoms()) {\n                 if (a.isEmpty()) {\n                     LabelAtom nearest = LabelAtom.findNearest(a.getName());\n-                    return FormValidation.warning(Messages.LabelExpression_NoMatch_DidYouMean(a.getName(),nearest.getDisplayName()));\n+                    return FormValidation.warning(Messages.LabelExpression_NoMatch_DidYouMean(a.getName(), nearest.getDisplayName()));\n                 }\n             }\n             return FormValidation.warning(Messages.LabelExpression_NoMatch());\n         }\n         if (item != null) {\n-            // Use the project-oriented validators (including any that might implement checkItem to support non-Project\n-            // items too).\n-            // FIXME: Perhaps these should aggregate their errors/warnings?\n+            final List<FormValidation> problems = new ArrayList<>();\n+            // Use the project-oriented validators too, so that validation from older plugins still gets applied.\n             for (AbstractProject.LabelValidator v : j.getExtensionList(AbstractProject.LabelValidator.class)) {\n                 FormValidation result = v.checkItem(item, l);\n-                if (!FormValidation.Kind.OK.equals(result.kind)) {\n-                    return result;\n+                if (FormValidation.Kind.OK.equals(result.kind)) {\n+                    continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA1NTY4NQ=="}, "originalCommit": {"oid": "a94cb38c96edba174cd9c5e399e833b07b9640f2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5NTc0NQ==", "bodyText": "Right\u2014aggregate would need to be made smarter, perhaps:\n\nif no arguments, or all FormValidation.OK, return FormValidation.OK\nelse consider all non-FormValidation.OK arguments with the worst status among the bunch, and\n\nif only one, return that as is\nelse return a bulleted list of those messages", "url": "https://github.com/jenkinsci/jenkins/pull/4774#discussion_r445095745", "createdAt": "2020-06-24T18:40:12Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/labels/LabelExpression.java", "diffHunk": "@@ -288,28 +289,35 @@ public static FormValidation validate(@Nullable String expression, @CheckForNull\n             for (LabelAtom a : l.listAtoms()) {\n                 if (a.isEmpty()) {\n                     LabelAtom nearest = LabelAtom.findNearest(a.getName());\n-                    return FormValidation.warning(Messages.LabelExpression_NoMatch_DidYouMean(a.getName(),nearest.getDisplayName()));\n+                    return FormValidation.warning(Messages.LabelExpression_NoMatch_DidYouMean(a.getName(), nearest.getDisplayName()));\n                 }\n             }\n             return FormValidation.warning(Messages.LabelExpression_NoMatch());\n         }\n         if (item != null) {\n-            // Use the project-oriented validators (including any that might implement checkItem to support non-Project\n-            // items too).\n-            // FIXME: Perhaps these should aggregate their errors/warnings?\n+            final List<FormValidation> problems = new ArrayList<>();\n+            // Use the project-oriented validators too, so that validation from older plugins still gets applied.\n             for (AbstractProject.LabelValidator v : j.getExtensionList(AbstractProject.LabelValidator.class)) {\n                 FormValidation result = v.checkItem(item, l);\n-                if (!FormValidation.Kind.OK.equals(result.kind)) {\n-                    return result;\n+                if (FormValidation.Kind.OK.equals(result.kind)) {\n+                    continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA1NTY4NQ=="}, "originalCommit": {"oid": "a94cb38c96edba174cd9c5e399e833b07b9640f2"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 440, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}