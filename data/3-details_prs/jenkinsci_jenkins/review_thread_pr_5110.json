{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM4OTM0NDEz", "number": 5110, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxMToxODoyNVrOFEoqtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzo0ODo0M1rOFK_N0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDA0OTE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxMToxODoyNVrOIEzK-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoxNDozMlrOIFYPqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzYwOQ==", "bodyText": "wondering if this ClassLoaderReflectionToolkit could be removed, assuming everything goes through AntWithFindResourceClassLoader then this line never gets called.\n(from my minimal plugin set in my test Jenkins this assumption is always true)\nany thoughts? this comment applies throughout the PR", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r541903609", "createdAt": "2020-12-13T11:18:25Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -629,8 +629,17 @@ private void updateTransientDependencies() {\n             if (PluginManager.FAST_LOOKUP) {\n                 for (PluginWrapper pw : getTransitiveDependencies()) {\n                     try {\n-                        Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);\n+                        Class<?> c;\n+                        if (pw.classLoader instanceof AntWithFindResourceClassLoader) {\n+                            c = ((AntWithFindResourceClassLoader) pw.classLoader).findLoadedClass2(name);\n+                        } else {\n+                            c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MDUxOA==", "bodyText": "Not sure. May apply in JenkinsRule under exotic conditions?", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542490518", "createdAt": "2020-12-14T15:48:46Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -629,8 +629,17 @@ private void updateTransientDependencies() {\n             if (PluginManager.FAST_LOOKUP) {\n                 for (PluginWrapper pw : getTransitiveDependencies()) {\n                     try {\n-                        Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);\n+                        Class<?> c;\n+                        if (pw.classLoader instanceof AntWithFindResourceClassLoader) {\n+                            c = ((AntWithFindResourceClassLoader) pw.classLoader).findLoadedClass2(name);\n+                        } else {\n+                            c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzYwOQ=="}, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5OTE4Nw==", "bodyText": "it does seem to apply in JenkinsRule :(, see my happiness in my commit message here:\n555e516", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542499187", "createdAt": "2020-12-14T15:59:28Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -629,8 +629,17 @@ private void updateTransientDependencies() {\n             if (PluginManager.FAST_LOOKUP) {\n                 for (PluginWrapper pw : getTransitiveDependencies()) {\n                     try {\n-                        Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);\n+                        Class<?> c;\n+                        if (pw.classLoader instanceof AntWithFindResourceClassLoader) {\n+                            c = ((AntWithFindResourceClassLoader) pw.classLoader).findLoadedClass2(name);\n+                        } else {\n+                            c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzYwOQ=="}, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMzA1NA==", "bodyText": "\ud83e\udd37\u200d\u2642\ufe0f if you can verify that only AntWithFindResourceClassLoader is ever used at this point, including in various test harnesses, we could probably simplify a bunch of code, and put in some assertions.", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542503054", "createdAt": "2020-12-14T16:04:19Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -629,8 +629,17 @@ private void updateTransientDependencies() {\n             if (PluginManager.FAST_LOOKUP) {\n                 for (PluginWrapper pw : getTransitiveDependencies()) {\n                     try {\n-                        Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);\n+                        Class<?> c;\n+                        if (pw.classLoader instanceof AntWithFindResourceClassLoader) {\n+                            c = ((AntWithFindResourceClassLoader) pw.classLoader).findLoadedClass2(name);\n+                        } else {\n+                            c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzYwOQ=="}, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwOTU1Ng==", "bodyText": "Well I can verify at runtime it's fine, but in tests (at least AssetManagerTest) it's not fine, it runs with a classloader built into the JDK, AppClassLoader I think.", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542509556", "createdAt": "2020-12-14T16:12:34Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -629,8 +629,17 @@ private void updateTransientDependencies() {\n             if (PluginManager.FAST_LOOKUP) {\n                 for (PluginWrapper pw : getTransitiveDependencies()) {\n                     try {\n-                        Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);\n+                        Class<?> c;\n+                        if (pw.classLoader instanceof AntWithFindResourceClassLoader) {\n+                            c = ((AntWithFindResourceClassLoader) pw.classLoader).findLoadedClass2(name);\n+                        } else {\n+                            c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzYwOQ=="}, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMTAxNg==", "bodyText": "So sounds like we still need ClassLoaderReflectionToolkit at least for now.", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542511016", "createdAt": "2020-12-14T16:14:32Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -629,8 +629,17 @@ private void updateTransientDependencies() {\n             if (PluginManager.FAST_LOOKUP) {\n                 for (PluginWrapper pw : getTransitiveDependencies()) {\n                     try {\n-                        Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);\n+                        Class<?> c;\n+                        if (pw.classLoader instanceof AntWithFindResourceClassLoader) {\n+                            c = ((AntWithFindResourceClassLoader) pw.classLoader).findLoadedClass2(name);\n+                        } else {\n+                            c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzYwOQ=="}, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDA1MDQzOnYy", "diffSide": "LEFT", "path": "core/src/main/java/hudson/ExtensionFinder.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxMToxOToyNVrOIEzLjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoxNzoxNlrOIN6Bgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ==", "bodyText": "this call seems to just check if the class is null?\n\nIf I add a null check IDE tell's me that it's impossible for it to be null at this point.\nRemoving this check doesn't break any tests", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r541903759", "createdAt": "2020-12-13T11:19:25Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/ExtensionFinder.java", "diffHunk": "@@ -486,12 +486,6 @@ private void resolve(Class<?> c, Set<Class<?>> encountered) {\n                     return;\n                 }\n                 try {\n-                    ClassLoader ecl = c.getClassLoader();\n-                    if (ecl != null) { // Not bootstrap classloader\n-                        Method m = ClassLoader.class.getDeclaredMethod(\"resolveClass\", Class.class);\n-                        m.setAccessible(true);\n-                        m.invoke(ecl, c);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NDE4Nw==", "bodyText": "Not sure what version of Java you are looking at. In Java 8\nprotected final void resolveClass(Class<?> c) {\n    resolveClass0(c);\n}\n\nprivate native void resolveClass0(Class<?> c);", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542494187", "createdAt": "2020-12-14T15:53:21Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/ExtensionFinder.java", "diffHunk": "@@ -486,12 +486,6 @@ private void resolve(Class<?> c, Set<Class<?>> encountered) {\n                     return;\n                 }\n                 try {\n-                    ClassLoader ecl = c.getClassLoader();\n-                    if (ecl != null) { // Not bootstrap classloader\n-                        Method m = ClassLoader.class.getDeclaredMethod(\"resolveClass\", Class.class);\n-                        m.setAccessible(true);\n-                        m.invoke(ecl, c);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ=="}, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMjE1Ng==", "bodyText": "Java 11 Azul", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542502156", "createdAt": "2020-12-14T16:03:06Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/ExtensionFinder.java", "diffHunk": "@@ -486,12 +486,6 @@ private void resolve(Class<?> c, Set<Class<?>> encountered) {\n                     return;\n                 }\n                 try {\n-                    ClassLoader ecl = c.getClassLoader();\n-                    if (ecl != null) { // Not bootstrap classloader\n-                        Method m = ClassLoader.class.getDeclaredMethod(\"resolveClass\", Class.class);\n-                        m.setAccessible(true);\n-                        m.invoke(ecl, c);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ=="}, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNjAxMQ==", "bodyText": "Maybe this became obsolete somehow in 11, but still appears to do something real in 8, so suggest reverting or calling this only on 8.", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542506011", "createdAt": "2020-12-14T16:07:57Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/ExtensionFinder.java", "diffHunk": "@@ -486,12 +486,6 @@ private void resolve(Class<?> c, Set<Class<?>> encountered) {\n                     return;\n                 }\n                 try {\n-                    ClassLoader ecl = c.getClassLoader();\n-                    if (ecl != null) { // Not bootstrap classloader\n-                        Method m = ClassLoader.class.getDeclaredMethod(\"resolveClass\", Class.class);\n-                        m.setAccessible(true);\n-                        m.invoke(ecl, c);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ=="}, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NDc3MQ==", "bodyText": "The code that called this is removed in java 9, https://bugs.openjdk.java.net/browse/JDK-8057777\nI'm not sure if it was doing something in 8 or not, the code was removed because it wasn't doing anything but it doesn't say why, it couldn't been something in 9 that meant it wasn't used any more.", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r547554771", "createdAt": "2020-12-22T23:24:59Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/ExtensionFinder.java", "diffHunk": "@@ -486,12 +486,6 @@ private void resolve(Class<?> c, Set<Class<?>> encountered) {\n                     return;\n                 }\n                 try {\n-                    ClassLoader ecl = c.getClassLoader();\n-                    if (ecl != null) { // Not bootstrap classloader\n-                        Method m = ClassLoader.class.getDeclaredMethod(\"resolveClass\", Class.class);\n-                        m.setAccessible(true);\n-                        m.invoke(ecl, c);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ=="}, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM4NzgyNQ==", "bodyText": "I can't seem to see where the definition of resolveClass0 lies to confirm no side-effects. It seems difficult to confirm that removing this is safe.\n\nit couldn't been something in 9 that meant it wasn't used any more.\n\nHow did you arrive at this conclusion?\nEven if that is the case there is a possibility it was removed in a jdk8 update but which update exactly, there might be breakages on systems with older versions of jdk8 possibly.", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r548387825", "createdAt": "2020-12-24T05:26:01Z", "author": {"login": "res0nance"}, "path": "core/src/main/java/hudson/ExtensionFinder.java", "diffHunk": "@@ -486,12 +486,6 @@ private void resolve(Class<?> c, Set<Class<?>> encountered) {\n                     return;\n                 }\n                 try {\n-                    ClassLoader ecl = c.getClassLoader();\n-                    if (ecl != null) { // Not bootstrap classloader\n-                        Method m = ClassLoader.class.getDeclaredMethod(\"resolveClass\", Class.class);\n-                        m.setAccessible(true);\n-                        m.invoke(ecl, c);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ=="}, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzODA1NA==", "bodyText": "I read the code, but the openjdk repo is only tagged up to v120 or so of java 8.\nthe code definitely does nothing on 9.\nIf people think it\u2019s still worth keeping I can re-add it but only for java 8", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r548438054", "createdAt": "2020-12-24T08:02:12Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/ExtensionFinder.java", "diffHunk": "@@ -486,12 +486,6 @@ private void resolve(Class<?> c, Set<Class<?>> encountered) {\n                     return;\n                 }\n                 try {\n-                    ClassLoader ecl = c.getClassLoader();\n-                    if (ecl != null) { // Not bootstrap classloader\n-                        Method m = ClassLoader.class.getDeclaredMethod(\"resolveClass\", Class.class);\n-                        m.setAccessible(true);\n-                        m.invoke(ecl, c);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ=="}, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1MzA1OQ==", "bodyText": "In http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/ jdk/src/share/native/java/lang/ClassLoader.c as of jdk8u282-b07 has\nJNIEXPORT void JNICALL\nJava_java_lang_ClassLoader_resolveClass0(JNIEnv *env, jobject this,\n                                         jclass cls)\n{\n    if (cls == NULL) {\n        JNU_ThrowNullPointerException(env, 0);\n        return;\n    }\n\n    JVM_ResolveClass(env, cls);\n}\nwhich is defined in hotspot/src/share/vm/prims/jvm.cpp as\nJVM_ENTRY(void, JVM_ResolveClass(JNIEnv* env, jclass cls))\n  JVMWrapper(\"JVM_ResolveClass\");\n  if (PrintJVMWarnings) warning(\"JVM_ResolveClass not implemented\");\nJVM_END\nand this code does not appear to have been edited since at least 2007! I suppose the Javadoc remains because another JVM could in principle implement this, but seeing as this was just some old heuristic to work around alleged Guice problems, I concur that this is safe to remove.", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551453059", "createdAt": "2021-01-04T17:17:16Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/ExtensionFinder.java", "diffHunk": "@@ -486,12 +486,6 @@ private void resolve(Class<?> c, Set<Class<?>> encountered) {\n                     return;\n                 }\n                 try {\n-                    ClassLoader ecl = c.getClassLoader();\n-                    if (ecl != null) { // Not bootstrap classloader\n-                        Method m = ClassLoader.class.getDeclaredMethod(\"resolveClass\", Class.class);\n-                        m.setAccessible(true);\n-                        m.invoke(ecl, c);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ=="}, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDA1MTc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxMToyMDoxOFrOIEzMLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxMToyMDoxOFrOIEzMLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzkxOA==", "bodyText": "changes in this class are mostly lazy initialisation, to stop warnings if the code isn't used, possible this class could be deprecated as I can't see anything that requires it, but I've left fallbacks in that call this code for extra safety", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r541903918", "createdAt": "2020-12-13T11:20:18Z", "author": {"login": "timja"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -14,30 +14,7 @@\n @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n public class ClassLoaderReflectionToolkit {\n \n-    private static final Method FIND_CLASS, FIND_LOADED_CLASS, FIND_RESOURCE, FIND_RESOURCES, GET_CLASS_LOADING_LOCK;\n-\n-    static {\n-        try {\n-            FIND_CLASS = ClassLoader.class.getDeclaredMethod(\"findClass\",String.class);\n-            FIND_CLASS.setAccessible(true);\n-            FIND_LOADED_CLASS = ClassLoader.class.getDeclaredMethod(\"findLoadedClass\",String.class);\n-            FIND_LOADED_CLASS.setAccessible(true);\n-            FIND_RESOURCE = ClassLoader.class.getDeclaredMethod(\"findResource\",String.class);\n-            FIND_RESOURCE.setAccessible(true);\n-            FIND_RESOURCES = ClassLoader.class.getDeclaredMethod(\"findResources\",String.class);\n-            FIND_RESOURCES.setAccessible(true);\n-        } catch (NoSuchMethodException e) {\n-            throw new AssertionError(e);\n-        }\n-        Method gCLL;\n-        try {\n-            gCLL = ClassLoader.class.getDeclaredMethod(\"getClassLoadingLock\", String.class);\n-            gCLL.setAccessible(true);\n-        } catch (NoSuchMethodException x) {\n-            throw new AssertionError(x);\n-        }\n-        GET_CLASS_LOADING_LOCK = gCLL;\n-    }\n+    private static Method FIND_CLASS, FIND_LOADED_CLASS, FIND_RESOURCE, FIND_RESOURCES, GET_CLASS_LOADING_LOCK;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODQxNDIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/PluginManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo1MDoxOVrOIFXEsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowNDozM1rOIFXxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MTgyNA==", "bodyText": "To avoid duplication, maybe revert all these changes at call sites, and encode the desired nonreflective behavior into ClassLoaderReflectionToolkit? (For clarity, could introduce an interface implemented by AntWithFindResourceClassLoader which defines the required methods.)", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542491824", "createdAt": "2020-12-14T15:50:19Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -2152,15 +2154,24 @@ public void addNamedClass(String className, Class c) {\n             if (FAST_LOOKUP) {\n                 for (PluginWrapper p : activePlugins) {\n                     try {\n-                        Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(p.classLoader, name);\n+                        Class<?> c;\n+                        if (p.classLoader instanceof AntWithFindResourceClassLoader) {\n+                            c = ((AntWithFindResourceClassLoader) p.classLoader).findLoadedClass2(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555e516ea72e3319ea06caca0facb7740c1caf48"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMzIyNA==", "bodyText": "yup was thinking about that, the only reason I didn't do that was I was looking to see if we could retire it completely", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542503224", "createdAt": "2020-12-14T16:04:33Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -2152,15 +2154,24 @@ public void addNamedClass(String className, Class c) {\n             if (FAST_LOOKUP) {\n                 for (PluginWrapper p : activePlugins) {\n                     try {\n-                        Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(p.classLoader, name);\n+                        Class<?> c;\n+                        if (p.classLoader instanceof AntWithFindResourceClassLoader) {\n+                            c = ((AntWithFindResourceClassLoader) p.classLoader).findLoadedClass2(name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MTgyNA=="}, "originalCommit": {"oid": "555e516ea72e3319ea06caca0facb7740c1caf48"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODQ0MDU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo1NToyMFrOIFXUeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoxMToxMFrOIFYFtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NTg2Ng==", "bodyText": "Not thread-safe. You could either make this and similar methods synchonized, or use a private static nested holder class with final variables to implement lazy initialization (which would make for a simpler patch overall I guess).", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542495866", "createdAt": "2020-12-14T15:55:20Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -59,52 +36,121 @@\n     }\n \n     private static Object getClassLoadingLock(ClassLoader cl, String name) {\n+        initClassLoadingLock();\n+\n         return invoke(GET_CLASS_LOADING_LOCK, RuntimeException.class, cl, name);\n     }\n \n+    private static void initClassLoadingLock() {\n+        if (GET_CLASS_LOADING_LOCK == null) {\n+            Method gCLL;\n+            try {\n+                gCLL = ClassLoader.class.getDeclaredMethod(\"getClassLoadingLock\", String.class);\n+                gCLL.setAccessible(true);\n+            } catch (NoSuchMethodException x) {\n+                throw new AssertionError(x);\n+            }\n+            GET_CLASS_LOADING_LOCK = gCLL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555e516ea72e3319ea06caca0facb7740c1caf48"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwODQ3MQ==", "bodyText": "second method sounds good \ud83d\udc4d\nthanks I was worried about that bit", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542508471", "createdAt": "2020-12-14T16:11:10Z", "author": {"login": "timja"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -59,52 +36,121 @@\n     }\n \n     private static Object getClassLoadingLock(ClassLoader cl, String name) {\n+        initClassLoadingLock();\n+\n         return invoke(GET_CLASS_LOADING_LOCK, RuntimeException.class, cl, name);\n     }\n \n+    private static void initClassLoadingLock() {\n+        if (GET_CLASS_LOADING_LOCK == null) {\n+            Method gCLL;\n+            try {\n+                gCLL = ClassLoader.class.getDeclaredMethod(\"getClassLoadingLock\", String.class);\n+                gCLL.setAccessible(true);\n+            } catch (NoSuchMethodException x) {\n+                throw new AssertionError(x);\n+            }\n+            GET_CLASS_LOADING_LOCK = gCLL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NTg2Ng=="}, "originalCommit": {"oid": "555e516ea72e3319ea06caca0facb7740c1caf48"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDUyOTkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoxMDo0NlrOIN5zKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoxMDo0NlrOIN5zKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0OTM4NA==", "bodyText": "Prefer to revert unnecessary hunks to keep the diff minimal.", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551449384", "createdAt": "2021-01-04T17:10:46Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -630,7 +630,9 @@ private void updateTransientDependencies() {\n                 for (PluginWrapper pw : getTransitiveDependencies()) {\n                     try {\n                         Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);\n-                        if (c!=null)    return c;\n+                        if (c!=null) {\n+                            return c;\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDUzMjE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoxMToyNVrOIN50iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoxMToyNVrOIN50iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0OTczNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                URL url = ClassLoaderReflectionToolkit._findResource(pw.classLoader, name);;\n          \n          \n            \n                                URL url = ClassLoaderReflectionToolkit._findResource(pw.classLoader, name);\n          \n      \n    \n    \n  \n\nand suggest reverting entire hunk anyway", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551449737", "createdAt": "2021-01-04T17:11:25Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -681,10 +684,10 @@ private void updateTransientDependencies() {\n         @Override\n         protected URL findResource(String name) {\n             if (PluginManager.FAST_LOOKUP) {\n-                    for (PluginWrapper pw : getTransitiveDependencies()) {\n-                        URL url = ClassLoaderReflectionToolkit._findResource(pw.classLoader, name);\n-                        if (url!=null)    return url;\n-                    }\n+                for (PluginWrapper pw : getTransitiveDependencies()) {\n+                    URL url = ClassLoaderReflectionToolkit._findResource(pw.classLoader, name);;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDU2ODI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/PluginManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyMTozMlrOIN6KlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyMTozMlrOIN6KlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NTM4MQ==", "bodyText": "revert hunks", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551455381", "createdAt": "2021-01-04T17:21:32Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -2189,8 +2189,9 @@ protected URL findResource(String name) {\n             if (FAST_LOOKUP) {\n                     for (PluginWrapper p : activePlugins) {\n                         URL url = ClassLoaderReflectionToolkit._findResource(p.classLoader, name);\n-                        if(url!=null)\n+                        if (url != null) {\n                             return url;\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDU2ODg3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/PluginManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyMTo0NFrOIN6K-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyMTo0NFrOIN6K-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NTQ4Mw==", "bodyText": "could revert", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551455483", "createdAt": "2021-01-04T17:21:44Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -2207,7 +2208,9 @@ protected URL findResource(String name) {\n             List<URL> resources = new ArrayList<>();\n             if (FAST_LOOKUP) {\n                     for (PluginWrapper p : activePlugins) {\n-                        resources.addAll(Collections.list(ClassLoaderReflectionToolkit._findResources(p.classLoader, name)));\n+                        Enumeration<URL> urls = ClassLoaderReflectionToolkit._findResources(p.classLoader, name);\n+\n+                        resources.addAll(Collections.list(urls));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDU3MDYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyMjoxN1rOIN6MGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyMjoxN1rOIN6MGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NTc3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *\n          \n          \n            \n             * <p>", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551455771", "createdAt": "2021-01-04T17:22:17Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDU3MDkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyMjoyM1rOIN6MSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyMjoyM1rOIN6MSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NTgxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *\n          \n          \n            \n             * <p>", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551455819", "createdAt": "2021-01-04T17:22:23Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * Then falls back to accessing the {@link ClassLoader} methods.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDU3MTE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyMjoyOFrOIN6McA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyMjoyOFrOIN6McA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NTg1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *\n          \n          \n            \n             * <p>", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551455856", "createdAt": "2021-01-04T17:22:28Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * Then falls back to accessing the {@link ClassLoader} methods.\n+ *\n+ * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDU3NjMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyMzo1N1rOIN6Prw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTo1MjoxNlrOIN-5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NjY4Nw==", "bodyText": "Is this supposed to be a class name? If so, use @link or (if 9+) @code. Or some other code name? @code. Otherwise, avoid CamelCase.", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551456687", "createdAt": "2021-01-04T17:23:57Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzMjg1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * to prevent IllegalReflectiveAccess errors on Java 11+\n          \n          \n            \n             * to prevent illegal reflective access errors on Java 11+", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551532853", "createdAt": "2021-01-04T19:52:16Z", "author": {"login": "timja"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NjY4Nw=="}, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDU3OTAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyNDo0OFrOIN6RRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyNDo0OFrOIN6RRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NzA5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,\n          \n          \n            \n             * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection:", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551457095", "createdAt": "2021-01-04T17:24:48Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * Then falls back to accessing the {@link ClassLoader} methods.\n+ *\n+ * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n+ *\n+ * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDU3OTg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyNTowM1rOIN6RwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyNTowM1rOIN6RwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NzIxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * the JenkinsRule tests use a different classloader, once that is made consistent with production Jenkins we can\n          \n          \n            \n             * the {@code JenkinsRule} tests use a different classloader, but once that is made consistent with production Jenkins we can", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551457216", "createdAt": "2021-01-04T17:25:03Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * Then falls back to accessing the {@link ClassLoader} methods.\n+ *\n+ * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n+ *\n+ * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,\n+ * the JenkinsRule tests use a different classloader, once that is made consistent with production Jenkins we can", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDU4MTE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyNToyM1rOIN6Sjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyNToyM1rOIN6Sjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NzQyMg==", "bodyText": "(also prefer one sentence or major phrase per line, as in AsciiDoc)", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551457422", "createdAt": "2021-01-04T17:25:23Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * Then falls back to accessing the {@link ClassLoader} methods.\n+ *\n+ * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n+ *\n+ * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,\n+ * the JenkinsRule tests use a different classloader, once that is made consistent with production Jenkins we can\n+ * re-evaluate the fallback code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDY1MzcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzo0NzozM1rOIN6-jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDoyODoxM1rOIN__CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2ODY4Nw==", "bodyText": "Wonder why these are not using invoke.", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551468687", "createdAt": "2021-01-04T17:47:33Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -115,7 +201,7 @@ public Class findLoadedClass(ClassLoader cl, String name) throws InvocationTarge\n     @Deprecated\n     public Class findClass(ClassLoader cl, String name) throws InvocationTargetException {\n         try {\n-            return (Class)FIND_CLASS.invoke(cl,name);\n+            return (Class)FindClass.FIND_CLASS.invoke(cl,name);\n         } catch (IllegalAccessException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzNDMxNw==", "bodyText": "hmm isn't it using invoke? or do you mean something else?", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551534317", "createdAt": "2021-01-04T19:55:11Z", "author": {"login": "timja"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -115,7 +201,7 @@ public Class findLoadedClass(ClassLoader cl, String name) throws InvocationTarge\n     @Deprecated\n     public Class findClass(ClassLoader cl, String name) throws InvocationTargetException {\n         try {\n-            return (Class)FIND_CLASS.invoke(cl,name);\n+            return (Class)FindClass.FIND_CLASS.invoke(cl,name);\n         } catch (IllegalAccessException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2ODY4Nw=="}, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1MDcyOA==", "bodyText": "I meant ClassLoaderReflectionToolkit.invoke rather than Method.invoke.", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551550728", "createdAt": "2021-01-04T20:28:13Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -115,7 +201,7 @@ public Class findLoadedClass(ClassLoader cl, String name) throws InvocationTarge\n     @Deprecated\n     public Class findClass(ClassLoader cl, String name) throws InvocationTargetException {\n         try {\n-            return (Class)FIND_CLASS.invoke(cl,name);\n+            return (Class)FindClass.FIND_CLASS.invoke(cl,name);\n         } catch (IllegalAccessException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2ODY4Nw=="}, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDY1NDQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/model/AssetManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzo0Nzo0OFrOIN6--A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTo1NjozMlrOIN_BtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2ODc5Mg==", "bodyText": "revert", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551468792", "createdAt": "2021-01-04T17:47:48Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/model/AssetManager.java", "diffHunk": "@@ -83,41 +83,26 @@ public void doDynamic(StaplerRequest req, StaplerResponse rsp) throws IOExceptio\n             return null;\n         }\n \n-        try {\n-            if (path.contains(\"..\")) // crude avoidance of directory traversal attack\n-                throw new IllegalArgumentException(path);\n+        if (path.contains(\"..\")) // crude avoidance of directory traversal attack\n+            throw new IllegalArgumentException(path);\n \n-            String name;\n-            if (path.charAt(0) == '/') {\n-                name = \"assets\" + path;\n-            } else {\n-                name = \"assets/\" + path;\n-            }\n+        String name;\n+        if (path.charAt(0) == '/') {\n+            name = \"assets\" + path;\n+        } else {\n+            name = \"assets/\" + path;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzNTAyOA==", "bodyText": "why? the try catch was removed so indentation changed", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551535028", "createdAt": "2021-01-04T19:56:32Z", "author": {"login": "timja"}, "path": "core/src/main/java/jenkins/model/AssetManager.java", "diffHunk": "@@ -83,41 +83,26 @@ public void doDynamic(StaplerRequest req, StaplerResponse rsp) throws IOExceptio\n             return null;\n         }\n \n-        try {\n-            if (path.contains(\"..\")) // crude avoidance of directory traversal attack\n-                throw new IllegalArgumentException(path);\n+        if (path.contains(\"..\")) // crude avoidance of directory traversal attack\n+            throw new IllegalArgumentException(path);\n \n-            String name;\n-            if (path.charAt(0) == '/') {\n-                name = \"assets\" + path;\n-            } else {\n-                name = \"assets/\" + path;\n-            }\n+        String name;\n+        if (path.charAt(0) == '/') {\n+            name = \"assets\" + path;\n+        } else {\n+            name = \"assets/\" + path;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2ODc5Mg=="}, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDY1ODA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/util/AntWithFindResourceClassLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzo0ODo0M1rOIN7A_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzo0ODo0M1rOIN7A_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2OTMxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return super.findLoadedClass(name);\n          \n          \n            \n                    return findLoadedClass(name);", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551469311", "createdAt": "2021-01-04T17:48:43Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/util/AntWithFindResourceClassLoader.java", "diffHunk": "@@ -37,10 +37,25 @@ public void close() throws IOException {\n     }\n \n     @Override\n-    protected URL findResource(String name) {\n+    public URL findResource(String name) {\n         // try and load from this loader if the parent either didn't find\n         // it or wasn't consulted.\n         return getUrl(pathComponents, name);\n     }\n \n+    /**\n+     * Public version of {@link ClassLoader#findLoadedClass(String)}\n+     */\n+    public Class<?> findLoadedClass2(String name) {\n+        return super.findLoadedClass(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 153, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}