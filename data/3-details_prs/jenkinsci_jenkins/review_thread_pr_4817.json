{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MTQzMTYx", "number": 4817, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzowNjo1OFrOEIdEeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxODo0MjozMVrOEPx_-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzAwMzQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintCleanupThread.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzowNjo1OFrOGobU5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzowNjo1OFrOGobU5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0Mzk0Mw==", "bodyText": "It used to be a public APi before accmod was introduced. Should be safe enough, I cannot find or imagine an external usage.", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445043943", "createdAt": "2020-06-24T17:06:58Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintCleanupThread.java", "diffHunk": "@@ -50,30 +48,14 @@\n  *\n  * @author Kohsuke Kawaguchi\n  */\n-@Extension @Symbol(\"fingerprintCleanup\")\n+@Extension(ordinal=-100)\n @Restricted(NoExternalUse.class)\n-public class FingerprintCleanupThread extends AsyncPeriodicWork {\n+public class FileFingerprintCleanupThread extends FingerprintCleanupThread {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383c47121586f5d772ae506f017778d0b1be2b2f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzAwNzc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FingerprintCleanupThread.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzowODowNlrOGobXrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzowODowNlrOGobXrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0NDY1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             */\n          \n          \n            \n             * @since TODO\n          \n          \n            \n             */", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445044655", "createdAt": "2020-06-24T17:08:06Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintCleanupThread.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+import hudson.Functions;\n+import hudson.model.AsyncPeriodicWork;\n+import hudson.model.Fingerprint;\n+import hudson.model.TaskListener;\n+import jenkins.model.FingerprintFacet;\n+import jenkins.model.Jenkins;\n+import org.jenkinsci.Symbol;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Fingerprint Cleanup API.\n+ * To implement custom fingerprint cleanup by external storage plugin, extend this class, and override the\n+ * {@link #execute(TaskListener)} method.\n+ * {@link #cleanFingerprint(Fingerprint, TaskListener)} can be used to clean the fingerprint.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383c47121586f5d772ae506f017778d0b1be2b2f"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzAxMDE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FingerprintCleanupThread.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzowODo1OFrOGobZYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzowODo1OFrOGobZYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0NTA4OQ==", "bodyText": "Could lead to funny results if 2+ plugins are installed, e.g. in the case of migrating from one storage to another", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445045089", "createdAt": "2020-06-24T17:08:58Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintCleanupThread.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+import hudson.Functions;\n+import hudson.model.AsyncPeriodicWork;\n+import hudson.model.Fingerprint;\n+import hudson.model.TaskListener;\n+import jenkins.model.FingerprintFacet;\n+import jenkins.model.Jenkins;\n+import org.jenkinsci.Symbol;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Fingerprint Cleanup API.\n+ * To implement custom fingerprint cleanup by external storage plugin, extend this class, and override the\n+ * {@link #execute(TaskListener)} method.\n+ * {@link #cleanFingerprint(Fingerprint, TaskListener)} can be used to clean the fingerprint.\n+ */\n+@Symbol(\"fingerprintCleanup\")\n+@Restricted(Beta.class)\n+public abstract class FingerprintCleanupThread extends AsyncPeriodicWork implements ExtensionPoint {\n+\n+    public FingerprintCleanupThread() {\n+        super(\"Fingerprint cleanup\");\n+    }\n+\n+    public long getRecurrencePeriod() {\n+        return DAY;\n+    }\n+\n+    /**\n+     * Invokes the periodic job.\n+     */\n+    public static void invoke() {\n+        get().run();\n+    }\n+\n+    /**\n+     * Returns the first implementation of {@link FingerprintCleanupThread} for the instance.\n+     * External storage plugins which implement {@link FingerprintCleanupThread} are given a higher priority.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383c47121586f5d772ae506f017778d0b1be2b2f"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzAxODY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FingerprintCleanupThread.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzoxMTozOFrOGobfLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzoxMTozOFrOGobfLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0NjU3NA==", "bodyText": "Please document what the implementations are expected to do there.\nMaybe a better name like iterateAndCleanupFingerprints() is better", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445046574", "createdAt": "2020-06-24T17:11:38Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintCleanupThread.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+import hudson.Functions;\n+import hudson.model.AsyncPeriodicWork;\n+import hudson.model.Fingerprint;\n+import hudson.model.TaskListener;\n+import jenkins.model.FingerprintFacet;\n+import jenkins.model.Jenkins;\n+import org.jenkinsci.Symbol;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Fingerprint Cleanup API.\n+ * To implement custom fingerprint cleanup by external storage plugin, extend this class, and override the\n+ * {@link #execute(TaskListener)} method.\n+ * {@link #cleanFingerprint(Fingerprint, TaskListener)} can be used to clean the fingerprint.\n+ */\n+@Symbol(\"fingerprintCleanup\")\n+@Restricted(Beta.class)\n+public abstract class FingerprintCleanupThread extends AsyncPeriodicWork implements ExtensionPoint {\n+\n+    public FingerprintCleanupThread() {\n+        super(\"Fingerprint cleanup\");\n+    }\n+\n+    public long getRecurrencePeriod() {\n+        return DAY;\n+    }\n+\n+    /**\n+     * Invokes the periodic job.\n+     */\n+    public static void invoke() {\n+        get().run();\n+    }\n+\n+    /**\n+     * Returns the first implementation of {@link FingerprintCleanupThread} for the instance.\n+     * External storage plugins which implement {@link FingerprintCleanupThread} are given a higher priority.\n+     */\n+    public static FingerprintCleanupThread get() {\n+        return ExtensionList.lookup(FingerprintCleanupThread.class).get(0);\n+    }\n+\n+    public abstract void execute(TaskListener taskListener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383c47121586f5d772ae506f017778d0b1be2b2f"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDcwNDQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNTozMDo1MlrOGor5lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMjo0NDo1MlrOGpR_1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxNTQ3Nw==", "bodyText": "It is only for tests, right? If the test is applicable to File Fingerprint storage, it makes sense to relocate the dependent test to a new class and use the package scope. Option B is to use @Restricted(NoExternalUse.class) to prevent external usages", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445315477", "createdAt": "2020-06-25T05:30:52Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -57,6 +62,8 @@\n \n     private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n     private static final DateConverter DATE_CONVERTER = new DateConverter();\n+    public static final String FINGERPRINTS_DIR_NAME = \"fingerprints\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383cbe835e94d39141651d8d9369c38f720de453"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzOTY3MQ==", "bodyText": "@oleg-nenashev Do I need to add @Restricted(NoExternalUse.class) if the entire class itself is using that annotation?", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445939671", "createdAt": "2020-06-26T02:44:52Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -57,6 +62,8 @@\n \n     private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n     private static final DateConverter DATE_CONVERTER = new DateConverter();\n+    public static final String FINGERPRINTS_DIR_NAME = \"fingerprints\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxNTQ3Nw=="}, "originalCommit": {"oid": "383cbe835e94d39141651d8d9369c38f720de453"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjYwODQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDo1NTo0NVrOGo-mag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMjozODo0MFrOGpR6Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMTg2Ng==", "bodyText": "Why == 2?", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445621866", "createdAt": "2020-06-25T14:55:45Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -210,6 +217,61 @@ public boolean isReady() {\n         return new File(Jenkins.get().getRootDir(),\"fingerprints\").exists();\n     }\n \n+    /**\n+     * Perform Fingerprint cleanup.\n+     */\n+    public void iterateAndCleanupFingerprints(TaskListener taskListener) {\n+        Object fingerprintStorage = FingerprintStorage.get();\n+        if (!(fingerprintStorage instanceof FileFingerprintStorage)) {\n+            logger.fine(\"External fingerprint storage is configured. Skipping execution\");\n+            return;\n+        }\n+\n+        int numFiles = 0;\n+\n+        File root = new File(getRootDir(), FINGERPRINTS_DIR_NAME);\n+        File[] files1 = root.listFiles(f -> f.isDirectory() && f.getName().length()==2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383cbe835e94d39141651d8d9369c38f720de453"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNTgzMg==", "bodyText": "this code is just moved", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445825832", "createdAt": "2020-06-25T20:41:30Z", "author": {"login": "timja"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -210,6 +217,61 @@ public boolean isReady() {\n         return new File(Jenkins.get().getRootDir(),\"fingerprints\").exists();\n     }\n \n+    /**\n+     * Perform Fingerprint cleanup.\n+     */\n+    public void iterateAndCleanupFingerprints(TaskListener taskListener) {\n+        Object fingerprintStorage = FingerprintStorage.get();\n+        if (!(fingerprintStorage instanceof FileFingerprintStorage)) {\n+            logger.fine(\"External fingerprint storage is configured. Skipping execution\");\n+            return;\n+        }\n+\n+        int numFiles = 0;\n+\n+        File root = new File(getRootDir(), FINGERPRINTS_DIR_NAME);\n+        File[] files1 = root.listFiles(f -> f.isDirectory() && f.getName().length()==2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMTg2Ng=="}, "originalCommit": {"oid": "383cbe835e94d39141651d8d9369c38f720de453"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzODIwMw==", "bodyText": "Yes, this is ported code. The reason is because of the structure in which fingerprints are stored on file system storage. Say the fingerprint md5 is abc123456789 then it gets saved inside ab/c1/23456789.xml", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445938203", "createdAt": "2020-06-26T02:38:40Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -210,6 +217,61 @@ public boolean isReady() {\n         return new File(Jenkins.get().getRootDir(),\"fingerprints\").exists();\n     }\n \n+    /**\n+     * Perform Fingerprint cleanup.\n+     */\n+    public void iterateAndCleanupFingerprints(TaskListener taskListener) {\n+        Object fingerprintStorage = FingerprintStorage.get();\n+        if (!(fingerprintStorage instanceof FileFingerprintStorage)) {\n+            logger.fine(\"External fingerprint storage is configured. Skipping execution\");\n+            return;\n+        }\n+\n+        int numFiles = 0;\n+\n+        File root = new File(getRootDir(), FINGERPRINTS_DIR_NAME);\n+        File[] files1 = root.listFiles(f -> f.isDirectory() && f.getName().length()==2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMTg2Ng=="}, "originalCommit": {"oid": "383cbe835e94d39141651d8d9369c38f720de453"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjYxMzI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDo1Njo1NlrOGo-phg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDo1Njo1NlrOGo-phg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMjY2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    taskListener.getLogger().println(\"Cleaned up \"+numFiles+\" records\");\n          \n          \n            \n                    taskListener.getLogger().println(String.format(\"Cleaned up %d records\", records));", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445622662", "createdAt": "2020-06-25T14:56:56Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -210,6 +217,61 @@ public boolean isReady() {\n         return new File(Jenkins.get().getRootDir(),\"fingerprints\").exists();\n     }\n \n+    /**\n+     * Perform Fingerprint cleanup.\n+     */\n+    public void iterateAndCleanupFingerprints(TaskListener taskListener) {\n+        Object fingerprintStorage = FingerprintStorage.get();\n+        if (!(fingerprintStorage instanceof FileFingerprintStorage)) {\n+            logger.fine(\"External fingerprint storage is configured. Skipping execution\");\n+            return;\n+        }\n+\n+        int numFiles = 0;\n+\n+        File root = new File(getRootDir(), FINGERPRINTS_DIR_NAME);\n+        File[] files1 = root.listFiles(f -> f.isDirectory() && f.getName().length()==2);\n+        if(files1!=null) {\n+            for (File file1 : files1) {\n+                File[] files2 = file1.listFiles(f -> f.isDirectory() && f.getName().length()==2);\n+                for(File file2 : files2) {\n+                    File[] files3 = file2.listFiles(f -> f.isFile() && FINGERPRINT_FILE_PATTERN.matcher(f.getName()).matches());\n+                    for(File file3 : files3) {\n+                        if(cleanFingerprint(file3, taskListener))\n+                            numFiles++;\n+                    }\n+                    deleteIfEmpty(file2);\n+                }\n+                deleteIfEmpty(file1);\n+            }\n+        }\n+\n+        taskListener.getLogger().println(\"Cleaned up \"+numFiles+\" records\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383cbe835e94d39141651d8d9369c38f720de453"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjYxODM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDo1ODowNFrOGo-sww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMjo0MjowMFrOGpR9dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMzQ5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                listener.getLogger().println(deletionBlockerFacet.getClass().getName() + \" created on \" + new Date(deletionBlockerFacet.getTimestamp()) + \" blocked deletion of \" + fingerprintFile);\n          \n          \n            \n                                listener.getLogger().println(String.format(\"%s created on %s blocked deletion of %s\", deletionBlockerFacet.getClass().getName(), new Date(deletionBlockerFacet.getTimestamp()), fingerprintFile));", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445623491", "createdAt": "2020-06-25T14:58:04Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -210,6 +217,61 @@ public boolean isReady() {\n         return new File(Jenkins.get().getRootDir(),\"fingerprints\").exists();\n     }\n \n+    /**\n+     * Perform Fingerprint cleanup.\n+     */\n+    public void iterateAndCleanupFingerprints(TaskListener taskListener) {\n+        Object fingerprintStorage = FingerprintStorage.get();\n+        if (!(fingerprintStorage instanceof FileFingerprintStorage)) {\n+            logger.fine(\"External fingerprint storage is configured. Skipping execution\");\n+            return;\n+        }\n+\n+        int numFiles = 0;\n+\n+        File root = new File(getRootDir(), FINGERPRINTS_DIR_NAME);\n+        File[] files1 = root.listFiles(f -> f.isDirectory() && f.getName().length()==2);\n+        if(files1!=null) {\n+            for (File file1 : files1) {\n+                File[] files2 = file1.listFiles(f -> f.isDirectory() && f.getName().length()==2);\n+                for(File file2 : files2) {\n+                    File[] files3 = file2.listFiles(f -> f.isFile() && FINGERPRINT_FILE_PATTERN.matcher(f.getName()).matches());\n+                    for(File file3 : files3) {\n+                        if(cleanFingerprint(file3, taskListener))\n+                            numFiles++;\n+                    }\n+                    deleteIfEmpty(file2);\n+                }\n+                deleteIfEmpty(file1);\n+            }\n+        }\n+\n+        taskListener.getLogger().println(\"Cleaned up \"+numFiles+\" records\");\n+    }\n+\n+    private boolean cleanFingerprint(File fingerprintFile, TaskListener listener) {\n+        try {\n+            Fingerprint fp = loadFingerprint(fingerprintFile);\n+            if (fp == null || (!fp.isAlive() && fp.getFacetBlockingDeletion() == null) ) {\n+                listener.getLogger().println(\"deleting obsolete \" + fingerprintFile);\n+                fingerprintFile.delete();\n+                return true;\n+            } else {\n+                if (!fp.isAlive()) {\n+                    FingerprintFacet deletionBlockerFacet = fp.getFacetBlockingDeletion();\n+                    listener.getLogger().println(deletionBlockerFacet.getClass().getName() + \" created on \" + new Date(deletionBlockerFacet.getTimestamp()) + \" blocked deletion of \" + fingerprintFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383cbe835e94d39141651d8d9369c38f720de453"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzOTA2MA==", "bodyText": "This is moved code, so will make this change in separate PR.", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445939060", "createdAt": "2020-06-26T02:42:00Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -210,6 +217,61 @@ public boolean isReady() {\n         return new File(Jenkins.get().getRootDir(),\"fingerprints\").exists();\n     }\n \n+    /**\n+     * Perform Fingerprint cleanup.\n+     */\n+    public void iterateAndCleanupFingerprints(TaskListener taskListener) {\n+        Object fingerprintStorage = FingerprintStorage.get();\n+        if (!(fingerprintStorage instanceof FileFingerprintStorage)) {\n+            logger.fine(\"External fingerprint storage is configured. Skipping execution\");\n+            return;\n+        }\n+\n+        int numFiles = 0;\n+\n+        File root = new File(getRootDir(), FINGERPRINTS_DIR_NAME);\n+        File[] files1 = root.listFiles(f -> f.isDirectory() && f.getName().length()==2);\n+        if(files1!=null) {\n+            for (File file1 : files1) {\n+                File[] files2 = file1.listFiles(f -> f.isDirectory() && f.getName().length()==2);\n+                for(File file2 : files2) {\n+                    File[] files3 = file2.listFiles(f -> f.isFile() && FINGERPRINT_FILE_PATTERN.matcher(f.getName()).matches());\n+                    for(File file3 : files3) {\n+                        if(cleanFingerprint(file3, taskListener))\n+                            numFiles++;\n+                    }\n+                    deleteIfEmpty(file2);\n+                }\n+                deleteIfEmpty(file1);\n+            }\n+        }\n+\n+        taskListener.getLogger().println(\"Cleaned up \"+numFiles+\" records\");\n+    }\n+\n+    private boolean cleanFingerprint(File fingerprintFile, TaskListener listener) {\n+        try {\n+            Fingerprint fp = loadFingerprint(fingerprintFile);\n+            if (fp == null || (!fp.isAlive() && fp.getFacetBlockingDeletion() == null) ) {\n+                listener.getLogger().println(\"deleting obsolete \" + fingerprintFile);\n+                fingerprintFile.delete();\n+                return true;\n+            } else {\n+                if (!fp.isAlive()) {\n+                    FingerprintFacet deletionBlockerFacet = fp.getFacetBlockingDeletion();\n+                    listener.getLogger().println(deletionBlockerFacet.getClass().getName() + \" created on \" + new Date(deletionBlockerFacet.getTimestamp()) + \" blocked deletion of \" + fingerprintFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMzQ5MQ=="}, "originalCommit": {"oid": "383cbe835e94d39141651d8d9369c38f720de453"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjYyMDc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDo1ODozNFrOGo-uRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMjo0MTo0M1rOGpR9Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMzg3Nw==", "bodyText": "curlies", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445623877", "createdAt": "2020-06-25T14:58:34Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -255,4 +317,26 @@ private static String serialize(Fingerprint.RangeSet src) {\n         return buf.toString();\n     }\n \n+    /**\n+     * Deletes a directory if it's empty.\n+     */\n+    private void deleteIfEmpty(File dir) {\n+        String[] r = dir.list();\n+        if(r==null)     return; // can happen in a rare occasion\n+        if(r.length==0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383cbe835e94d39141651d8d9369c38f720de453"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzODk2Ng==", "bodyText": "This is moved code, so will make this change in separate PR.", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445938966", "createdAt": "2020-06-26T02:41:43Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -255,4 +317,26 @@ private static String serialize(Fingerprint.RangeSet src) {\n         return buf.toString();\n     }\n \n+    /**\n+     * Deletes a directory if it's empty.\n+     */\n+    private void deleteIfEmpty(File dir) {\n+        String[] r = dir.list();\n+        if(r==null)     return; // can happen in a rare occasion\n+        if(r.length==0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMzg3Nw=="}, "originalCommit": {"oid": "383cbe835e94d39141651d8d9369c38f720de453"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjYyNTEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDo1OTozMlrOGo-xIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMjo0MToxNFrOGpR8rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNDYxMQ==", "bodyText": "Hmmm...this seems duplicate of https://github.com/jenkinsci/jenkins/pull/4817/files#r445623491", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445624611", "createdAt": "2020-06-25T14:59:32Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -80,4 +86,39 @@ public static FingerprintStorage get() {\n      */\n     public abstract boolean isReady();\n \n+    /**\n+     * Iterates a set of fingerprints, and cleans them up.\n+     * This method is called periodically by {@link hudson.model.FingerprintCleanupThread}.\n+     * For reference, see {@link FileFingerprintStorage#iterateAndCleanupFingerprints(TaskListener)}\n+     * For cleaning up the fingerprint {@link #cleanFingerprint(Fingerprint, TaskListener)} may be used.\n+     */\n+    public abstract void iterateAndCleanupFingerprints(TaskListener taskListener);\n+\n+    /**\n+     * This method performs the cleanup of the given fingerprint.\n+     */\n+    public boolean cleanFingerprint(@NonNull Fingerprint fingerprint, TaskListener taskListener) {\n+        try {\n+            if (!fingerprint.isAlive() && fingerprint.getFacetBlockingDeletion() == null) {\n+                taskListener.getLogger().println(\"deleting obsolete \" + fingerprint.toString());\n+                Fingerprint.delete(fingerprint.getHashString());\n+                return true;\n+            } else {\n+                if (!fingerprint.isAlive()) {\n+                    FingerprintFacet deletionBlockerFacet = fingerprint.getFacetBlockingDeletion();\n+                    taskListener.getLogger().println(deletionBlockerFacet.getClass().getName() + \" created on \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383cbe835e94d39141651d8d9369c38f720de453"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNDg1OA==", "bodyText": "Also below as well", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445624858", "createdAt": "2020-06-25T14:59:49Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -80,4 +86,39 @@ public static FingerprintStorage get() {\n      */\n     public abstract boolean isReady();\n \n+    /**\n+     * Iterates a set of fingerprints, and cleans them up.\n+     * This method is called periodically by {@link hudson.model.FingerprintCleanupThread}.\n+     * For reference, see {@link FileFingerprintStorage#iterateAndCleanupFingerprints(TaskListener)}\n+     * For cleaning up the fingerprint {@link #cleanFingerprint(Fingerprint, TaskListener)} may be used.\n+     */\n+    public abstract void iterateAndCleanupFingerprints(TaskListener taskListener);\n+\n+    /**\n+     * This method performs the cleanup of the given fingerprint.\n+     */\n+    public boolean cleanFingerprint(@NonNull Fingerprint fingerprint, TaskListener taskListener) {\n+        try {\n+            if (!fingerprint.isAlive() && fingerprint.getFacetBlockingDeletion() == null) {\n+                taskListener.getLogger().println(\"deleting obsolete \" + fingerprint.toString());\n+                Fingerprint.delete(fingerprint.getHashString());\n+                return true;\n+            } else {\n+                if (!fingerprint.isAlive()) {\n+                    FingerprintFacet deletionBlockerFacet = fingerprint.getFacetBlockingDeletion();\n+                    taskListener.getLogger().println(deletionBlockerFacet.getClass().getName() + \" created on \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNDYxMQ=="}, "originalCommit": {"oid": "383cbe835e94d39141651d8d9369c38f720de453"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNzYzOQ==", "bodyText": "It's called in different places,\nFileFingerprint has it's own implementation, the redis plugin is calling this method", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445827639", "createdAt": "2020-06-25T20:45:01Z", "author": {"login": "timja"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -80,4 +86,39 @@ public static FingerprintStorage get() {\n      */\n     public abstract boolean isReady();\n \n+    /**\n+     * Iterates a set of fingerprints, and cleans them up.\n+     * This method is called periodically by {@link hudson.model.FingerprintCleanupThread}.\n+     * For reference, see {@link FileFingerprintStorage#iterateAndCleanupFingerprints(TaskListener)}\n+     * For cleaning up the fingerprint {@link #cleanFingerprint(Fingerprint, TaskListener)} may be used.\n+     */\n+    public abstract void iterateAndCleanupFingerprints(TaskListener taskListener);\n+\n+    /**\n+     * This method performs the cleanup of the given fingerprint.\n+     */\n+    public boolean cleanFingerprint(@NonNull Fingerprint fingerprint, TaskListener taskListener) {\n+        try {\n+            if (!fingerprint.isAlive() && fingerprint.getFacetBlockingDeletion() == null) {\n+                taskListener.getLogger().println(\"deleting obsolete \" + fingerprint.toString());\n+                Fingerprint.delete(fingerprint.getHashString());\n+                return true;\n+            } else {\n+                if (!fingerprint.isAlive()) {\n+                    FingerprintFacet deletionBlockerFacet = fingerprint.getFacetBlockingDeletion();\n+                    taskListener.getLogger().println(deletionBlockerFacet.getClass().getName() + \" created on \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNDYxMQ=="}, "originalCommit": {"oid": "383cbe835e94d39141651d8d9369c38f720de453"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzODg2MQ==", "bodyText": "Yes, that is correct. This is not duplicate, it has slight changes. The one in FingerprintStorage lays out a basic implementation for plugin developers. File system storage overrides it and uses a slightly different implementation instead which can delete files directly.", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445938861", "createdAt": "2020-06-26T02:41:14Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -80,4 +86,39 @@ public static FingerprintStorage get() {\n      */\n     public abstract boolean isReady();\n \n+    /**\n+     * Iterates a set of fingerprints, and cleans them up.\n+     * This method is called periodically by {@link hudson.model.FingerprintCleanupThread}.\n+     * For reference, see {@link FileFingerprintStorage#iterateAndCleanupFingerprints(TaskListener)}\n+     * For cleaning up the fingerprint {@link #cleanFingerprint(Fingerprint, TaskListener)} may be used.\n+     */\n+    public abstract void iterateAndCleanupFingerprints(TaskListener taskListener);\n+\n+    /**\n+     * This method performs the cleanup of the given fingerprint.\n+     */\n+    public boolean cleanFingerprint(@NonNull Fingerprint fingerprint, TaskListener taskListener) {\n+        try {\n+            if (!fingerprint.isAlive() && fingerprint.getFacetBlockingDeletion() == null) {\n+                taskListener.getLogger().println(\"deleting obsolete \" + fingerprint.toString());\n+                Fingerprint.delete(fingerprint.getHashString());\n+                return true;\n+            } else {\n+                if (!fingerprint.isAlive()) {\n+                    FingerprintFacet deletionBlockerFacet = fingerprint.getFacetBlockingDeletion();\n+                    taskListener.getLogger().println(deletionBlockerFacet.getClass().getName() + \" created on \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNDYxMQ=="}, "originalCommit": {"oid": "383cbe835e94d39141651d8d9369c38f720de453"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzY3NDcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNToxNzozMVrOGzXDgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNToxNzozMVrOGzXDgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwODI5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void iterateAndCleanupFingerprints(TaskListener taskListener) {\n          \n          \n            \n                @Override\n          \n          \n            \n                public void iterateAndCleanupFingerprints(TaskListener taskListener) {", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r456508291", "createdAt": "2020-07-17T15:17:31Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -216,6 +223,55 @@ public boolean isReady() {\n         return new File(Jenkins.get().getRootDir(),\"fingerprints\").exists();\n     }\n \n+    /**\n+     * Perform Fingerprint cleanup.\n+     */\n+    public void iterateAndCleanupFingerprints(TaskListener taskListener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "342bea66e312a7d67be28b97d51d18b46e0d765e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzY3NjU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNToxODowMVrOGzXEiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNToxODowMVrOGzXEiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwODU1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * This method performs the cleanup of the given fingerprint.\n          \n          \n            \n                 * This method performs the cleanup of the given fingerprint.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @since TODO", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r456508555", "createdAt": "2020-07-17T15:18:01Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -80,8 +93,51 @@ public static FingerprintStorage get() {\n      */\n     public abstract boolean isReady();\n \n+    /**\n+     * Iterates a set of fingerprints, and cleans them up. Cleaning up a fingerprint implies deleting the builds\n+     * associated with the fingerprints, once they are no longer available on the system. If all the builds have been\n+     * deleted, the fingerprint itself is deleted.\n+     *\n+     * This method is called periodically by {@link hudson.model.FingerprintCleanupThread}.\n+     * For reference, see {@link FileFingerprintStorage#iterateAndCleanupFingerprints(TaskListener)}\n+     * For cleaning up the fingerprint {@link #cleanFingerprint(Fingerprint, TaskListener)} may be used.\n+     */\n+    public abstract void iterateAndCleanupFingerprints(TaskListener taskListener);\n+\n+    /**\n+     * This method performs the cleanup of the given fingerprint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "342bea66e312a7d67be28b97d51d18b46e0d765e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzY3Nzk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNToxODoxOFrOGzXFXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNToxODoxOFrOGzXFXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwODc2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 */\n          \n          \n            \n                 * @since TODO\n          \n          \n            \n                 */", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r456508767", "createdAt": "2020-07-17T15:18:18Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -80,8 +93,51 @@ public static FingerprintStorage get() {\n      */\n     public abstract boolean isReady();\n \n+    /**\n+     * Iterates a set of fingerprints, and cleans them up. Cleaning up a fingerprint implies deleting the builds\n+     * associated with the fingerprints, once they are no longer available on the system. If all the builds have been\n+     * deleted, the fingerprint itself is deleted.\n+     *\n+     * This method is called periodically by {@link hudson.model.FingerprintCleanupThread}.\n+     * For reference, see {@link FileFingerprintStorage#iterateAndCleanupFingerprints(TaskListener)}\n+     * For cleaning up the fingerprint {@link #cleanFingerprint(Fingerprint, TaskListener)} may be used.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "342bea66e312a7d67be28b97d51d18b46e0d765e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzY4OTU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/GlobalFingerprintConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNToyMToxNlrOGzXMXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNToyMToxNlrOGzXMXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUxMDU1Nw==", "bodyText": "It will not work for configurations deserialized from the disk", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r456510557", "createdAt": "2020-07-17T15:21:16Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/fingerprints/GlobalFingerprintConfiguration.java", "diffHunk": "@@ -43,6 +43,7 @@\n \n     private FingerprintStorage storage = ExtensionList.lookupSingleton(FileFingerprintStorage.class);\n     private static final Logger LOGGER = Logger.getLogger(GlobalFingerprintConfiguration.class.getName());\n+    private boolean fingerprintCleanup = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "342bea66e312a7d67be28b97d51d18b46e0d765e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzY5NDA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNToyMjozMFrOGzXPLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNTozOToyMFrOGzX1AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUxMTI3OA==", "bodyText": "If it is private, it does not override the implementation in upper class.  Looks like a \ud83d\udc1b for API users", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r456511278", "createdAt": "2020-07-17T15:22:30Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -216,6 +223,55 @@ public boolean isReady() {\n         return new File(Jenkins.get().getRootDir(),\"fingerprints\").exists();\n     }\n \n+    /**\n+     * Perform Fingerprint cleanup.\n+     */\n+    public void iterateAndCleanupFingerprints(TaskListener taskListener) {\n+        int numFiles = 0;\n+\n+        File root = new File(getRootDir(), FINGERPRINTS_DIR_NAME);\n+        File[] files1 = root.listFiles(f -> f.isDirectory() && f.getName().length()==2);\n+        if(files1!=null) {\n+            for (File file1 : files1) {\n+                File[] files2 = file1.listFiles(f -> f.isDirectory() && f.getName().length()==2);\n+                for(File file2 : files2) {\n+                    File[] files3 = file2.listFiles(f -> f.isFile() && FINGERPRINT_FILE_PATTERN.matcher(f.getName()).matches());\n+                    for(File file3 : files3) {\n+                        if(cleanFingerprint(file3, taskListener))\n+                            numFiles++;\n+                    }\n+                    deleteIfEmpty(file2);\n+                }\n+                deleteIfEmpty(file1);\n+            }\n+        }\n+\n+        taskListener.getLogger().println(\"Cleaned up \"+numFiles+\" records\");\n+    }\n+\n+    private boolean cleanFingerprint(File fingerprintFile, TaskListener listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "342bea66e312a7d67be28b97d51d18b46e0d765e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUyMDk2MQ==", "bodyText": "So this isn't supposed to override the method of the upper class(signature is different). The method in the upper class isn't called by itself, it is -used- by plugin implementations.", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r456520961", "createdAt": "2020-07-17T15:39:20Z", "author": {"login": "stellargo"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -216,6 +223,55 @@ public boolean isReady() {\n         return new File(Jenkins.get().getRootDir(),\"fingerprints\").exists();\n     }\n \n+    /**\n+     * Perform Fingerprint cleanup.\n+     */\n+    public void iterateAndCleanupFingerprints(TaskListener taskListener) {\n+        int numFiles = 0;\n+\n+        File root = new File(getRootDir(), FINGERPRINTS_DIR_NAME);\n+        File[] files1 = root.listFiles(f -> f.isDirectory() && f.getName().length()==2);\n+        if(files1!=null) {\n+            for (File file1 : files1) {\n+                File[] files2 = file1.listFiles(f -> f.isDirectory() && f.getName().length()==2);\n+                for(File file2 : files2) {\n+                    File[] files3 = file2.listFiles(f -> f.isFile() && FINGERPRINT_FILE_PATTERN.matcher(f.getName()).matches());\n+                    for(File file3 : files3) {\n+                        if(cleanFingerprint(file3, taskListener))\n+                            numFiles++;\n+                    }\n+                    deleteIfEmpty(file2);\n+                }\n+                deleteIfEmpty(file1);\n+            }\n+        }\n+\n+        taskListener.getLogger().println(\"Cleaned up \"+numFiles+\" records\");\n+    }\n+\n+    private boolean cleanFingerprint(File fingerprintFile, TaskListener listener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUxMTI3OA=="}, "originalCommit": {"oid": "342bea66e312a7d67be28b97d51d18b46e0d765e"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODE2OTExOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/fingerprints/GlobalFingerprintConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo0ODozMFrOGzb2xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo0ODozMFrOGzb2xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4Njk0OA==", "bodyText": "Usually Java APIs use 'isSomething()' for boolean getters", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r456586948", "createdAt": "2020-07-17T17:48:30Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/fingerprints/GlobalFingerprintConfiguration.java", "diffHunk": "@@ -63,6 +64,15 @@ public void setStorage(FingerprintStorage fingerprintStorage) {\n                 fingerprintStorage.getDescriptor().getDisplayName());\n     }\n \n+    public boolean getFingerprintCleanupDisabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "512f086609f3a83edd568a792148f52ed2c9c510"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0OTgzMjg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/jenkins/fingerprints/GlobalFingerprintConfiguration/config.jelly", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxODo0MjozMVrOGzp32Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxOTozMjoxM1rOGzqHZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgxNjYwMQ==", "bodyText": "Is there any reason to disable this if there isn\u2019t an external plugin for fingerprints?", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r456816601", "createdAt": "2020-07-18T18:42:31Z", "author": {"login": "timja"}, "path": "core/src/main/resources/jenkins/fingerprints/GlobalFingerprintConfiguration/config.jelly", "diffHunk": "@@ -19,11 +19,14 @@ THE SOFTWARE.\n -->\n <?jelly escape-by-default='true'?>\n <j:jelly xmlns:j=\"jelly:core\" xmlns:f=\"/lib/form\">\n-    <j:if test=\"${descriptor.fingerprintStorageDescriptors.size() gt 1}\">\n-        <f:section title=\"${%Fingerprints}\">\n+    <f:section title=\"${%Fingerprints}\">\n+        <f:entry title=\"Disable Fingerprint Cleanup\">\n+            <f:checkbox field=\"fingerprintCleanupDisabled\" default=\"${it.fingerprintCleanupDisabled}\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578b46f2a5ccc034d9bd4c93178f3eafa8bb3083"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgyMDU4MA==", "bodyText": "It might be a good feature to have in case the disk storage is cheaper for a user than having a periodically running process. Or say Jenkins is configured on a distributed disk storage. I don't have any strong opinions though :)", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r456820580", "createdAt": "2020-07-18T19:32:13Z", "author": {"login": "stellargo"}, "path": "core/src/main/resources/jenkins/fingerprints/GlobalFingerprintConfiguration/config.jelly", "diffHunk": "@@ -19,11 +19,14 @@ THE SOFTWARE.\n -->\n <?jelly escape-by-default='true'?>\n <j:jelly xmlns:j=\"jelly:core\" xmlns:f=\"/lib/form\">\n-    <j:if test=\"${descriptor.fingerprintStorageDescriptors.size() gt 1}\">\n-        <f:section title=\"${%Fingerprints}\">\n+    <f:section title=\"${%Fingerprints}\">\n+        <f:entry title=\"Disable Fingerprint Cleanup\">\n+            <f:checkbox field=\"fingerprintCleanupDisabled\" default=\"${it.fingerprintCleanupDisabled}\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgxNjYwMQ=="}, "originalCommit": {"oid": "578b46f2a5ccc034d9bd4c93178f3eafa8bb3083"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 254, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}