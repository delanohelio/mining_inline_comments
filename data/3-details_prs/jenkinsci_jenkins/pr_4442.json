{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MDE2MjI1", "number": 4442, "title": "[JENKINS-60848] Improve RSS title wording + Add more RSS tests", "bodyText": "See JENKINS-60848\nImprove RSS feed title wording. Make them up-to-date, consistent, and at least somewhat sensible.\nAdd more tests for RSS as it has been broken several times the past year.\nRemove a long unused bit for never implemented trackback.\nProposed changelog entries\n\nImprove RSS feed titles.\n\nProposed upgrade guidelines\nN/A\nSubmitter checklist\n\n JIRA issue is well described\n Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). Examples\n\nFill-in the Proposed changelog entries section only if there are breaking changes or other changes which may require extra steps from users during the upgrade\n\n\n Appropriate autotests or explanation to why this change has no tests\n[n/a] For dependency updates: links to external changelogs and, if possible, full diffs\n\nMaintainer checklist\nBefore the changes are marked as ready-for-merge:\n\n There are at least 2 approvals for the pull request and no outstanding requests for change\n Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n Changelog entries in the PR title and/or Proposed changelog entries are correct\n Proper changelog labels are set so that the changelog can be generated automatically\n If the change needs additional upgrade steps from users, upgrade-guide-needed label is set and there is a Proposed upgrade guidelines section in the PR title. (example)\n If it would make sense to backport the change to LTS, a JIRA issue should exist and be labeled as lts-candidate", "createdAt": "2020-01-20T21:58:12Z", "url": "https://github.com/jenkinsci/jenkins/pull/4442", "merged": true, "mergeCommit": {"oid": "b0eee6d655502fa4ee1ccdf2456d005c7cfc3470"}, "closed": true, "closedAt": "2020-02-06T12:38:32Z", "author": {"login": "jeffret-b"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8TwwPAH2gAyMzY1MDE2MjI1OjNmZjgxMzY0OTYyMWNkNTM2YjQ4OTY1ZDhmZTExMmU5MWZkZTY1YmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBn-X9AFqTM1NDMzNDg5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3ff813649621cd536b48965d8fe112e91fde65ba", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/3ff813649621cd536b48965d8fe112e91fde65ba", "committedDate": "2020-01-20T21:51:50Z", "message": "Add more tests.\n\nAlso a little cleanup of RSS.\nFix the broken \"All all ...\" title and description.\nRemove a long unused bit for never implemented trackback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NzY2OTMy", "url": "https://github.com/jenkinsci/jenkins/pull/4442#pullrequestreview-345766932", "createdAt": "2020-01-21T10:19:12Z", "commit": {"oid": "3ff813649621cd536b48965d8fe112e91fde65ba"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDoxOToxMlrOFf01HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMTowMjo1NFrOFf2IdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxNTc0MA==", "bodyText": "Fix the broken \"All all ...\" title\n\nNot sure it's a bug as the default view is called \"All\", as the code adds \"all builds\" as it's the option chosen for RSS (compared to \"failed builds\"). I would say it's an improvement, if desired.\n\"if desired\" => we are not correcting the behavior here, just hiding the symptom. For example, in french, the default view is called \"Tous\" (= All in english), and the RSS will have as title and description: \"Tous all builds\". Perhaps a \"better\" way to change this is to just put a \":\", like All: all builds.\nSecond thoughts: after having seen the rssHeader.jelly, I am convinced we need to change the behavior, but not in the way proposed.", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r368915740", "createdAt": "2020-01-21T10:19:12Z", "author": {"login": "Wadeck"}, "path": "core/src/main/java/hudson/model/RSS.java", "diffHunk": "@@ -75,7 +56,14 @@ public static void doTrackback( Object it, StaplerRequest req, StaplerResponse r\n      */\n     public static <E> void forwardToRss(String title, String url, Collection<? extends E> entries, FeedAdapter<E> adapter, StaplerRequest req, HttpServletResponse rsp) throws IOException, ServletException {\n         req.setAttribute(\"adapter\",adapter);\n-        req.setAttribute(\"title\",title);\n+        String fixedTitle = title;\n+        String brokenFragment = \"All all \";\n+        if (title.startsWith(brokenFragment)) {\n+            StringBuilder fixing = new StringBuilder(\"All \");\n+            fixing.append(title.substring(brokenFragment.length()));\n+            fixedTitle = fixing.toString();\n+        }\n+        req.setAttribute(\"title\",fixedTitle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff813649621cd536b48965d8fe112e91fde65ba"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzNzA3Ng==", "bodyText": "\u274c Does not cover the regression corrected by #4148. The \"published\" was empty and so, is still not null.", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r368937076", "createdAt": "2020-01-21T11:02:54Z", "author": {"login": "Wadeck"}, "path": "test/src/test/java/hudson/model/RSSTest.java", "diffHunk": "@@ -63,16 +64,89 @@ public void absoluteURLsPresentInRSS_evenWithoutRootUrlSetup() throws Exception\n         assertAllRSSLinksContainRootUrl(allLinks);\n     }\n \n-    private XmlPage getRssAllPage() throws Exception {\n-        return (XmlPage) j.createWebClient().goTo(\"rssAll?flavor=rss20\", \"text/xml\");\n+    @Test\n+    public void checkInitialContentAllRss() throws Exception {\n+        XmlPage page = getRssAllPage();\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"rss\"));\n+        assertThat(documentElement.getAttribute(\"version\"), is(\"2.0\"));\n+        assertThat(documentElement.getChildNodes().getLength(), is(1));\n+        Node channelNode = documentElement.getFirstChild();\n+        assertThat(channelNode.getNodeName(), is(\"channel\"));\n+        checkRssBasicNodes(channelNode, \"All builds\", 3);\n     }\n \n-    private void assertAllRSSLinksContainRootUrl(NodeList allLinks) throws Exception {\n-        for (int i = 0; i < allLinks.getLength(); i++) {\n-            Node item = allLinks.item(i);\n-            String url = item.getTextContent();\n-            assertThat(url, containsString(j.getURL().toString()));\n-        }\n+    @Test\n+    public void checkInitialContentFailedRss() throws Exception {\n+        XmlPage page = (XmlPage) j.createWebClient().goTo(\"rssFailed?flavor=rss20\", \"text/xml\");\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"rss\"));\n+        assertThat(documentElement.getAttribute(\"version\"), is(\"2.0\"));\n+        assertThat(documentElement.getChildNodes().getLength(), is(1));\n+        Node channelNode = documentElement.getFirstChild();\n+        assertThat(channelNode.getNodeName(), is(\"channel\"));\n+        checkRssBasicNodes(channelNode, \"All failed builds\", 3);\n+    }\n+\n+    @Test\n+    public void checkInitialContentAllAtom() throws Exception {\n+        XmlPage page = getRssAllAtomPage();\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"feed\"));\n+        checkAtomBasicNodes(documentElement, \"All builds\", 5);\n+    }\n+\n+    @Test\n+    public void checkWithSingleBuildAllRss() throws Exception {\n+        FreeStyleProject p = j.createFreeStyleProject();\n+        j.assertBuildStatusSuccess(p.scheduleBuild2(0));\n+\n+        XmlPage page = getRssAllPage();\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"rss\"));\n+        assertThat(documentElement.getAttribute(\"version\"), is(\"2.0\"));\n+        assertThat(documentElement.getChildNodes().getLength(), is(1));\n+        Node channelNode = documentElement.getFirstChild();\n+        assertThat(channelNode.getNodeName(), is(\"channel\"));\n+        checkRssBasicNodes(channelNode, \"All builds\", 4);\n+        NodeList items = xmlDocument.getElementsByTagName(\"item\");\n+        assertThat(items.getLength(), is(1));\n+        Node firstBuild = items.item(0);\n+        assertThat(firstBuild.getChildNodes().getLength(), is(5));\n+        assertThat(getSingleNode(firstBuild, \"title\").getTextContent(), is(\"test0 #1 (stable)\"));\n+        assertNotNull(getSingleNode(firstBuild, \"pubDate\").getTextContent());\n+        assertNotNull(getSingleNode(firstBuild, \"author\").getTextContent());\n+        Node guidNode = getSingleNode(firstBuild, \"guid\");\n+        assertThat(guidNode.getAttributes().getNamedItem(\"isPermaLink\").getTextContent(), is(\"false\"));\n+        assertNotNull(guidNode.getTextContent());\n+    }\n+\n+    @Test\n+    public void checkWithSingleBuildAllAtom() throws Exception {\n+        FreeStyleProject p = j.createFreeStyleProject();\n+        j.assertBuildStatusSuccess(p.scheduleBuild2(0));\n+\n+        XmlPage page = getRssAllAtomPage();\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"feed\"));\n+        checkAtomBasicNodes(documentElement, \"All builds\", 6);\n+        NodeList entries = xmlDocument.getElementsByTagName(\"entry\");\n+        assertThat(entries.getLength(), is(1));\n+        Node firstBuild = entries.item(0);\n+        assertThat(firstBuild.getChildNodes().getLength(), is(5));\n+        assertThat(getSingleNode(firstBuild, \"title\").getTextContent(), is(\"test0 #1 (stable)\"));\n+        assertNotNull(getSingleNode(firstBuild, \"published\").getTextContent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff813649621cd536b48965d8fe112e91fde65ba"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0244339945447207df3007ff313a8452b010f4e0", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/0244339945447207df3007ff313a8452b010f4e0", "committedDate": "2020-01-21T22:25:13Z", "message": "Increase date time checks."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NDA4ODMw", "url": "https://github.com/jenkinsci/jenkins/pull/4442#pullrequestreview-346408830", "createdAt": "2020-01-22T08:24:16Z", "commit": {"oid": "0244339945447207df3007ff313a8452b010f4e0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODoyNDoxNlrOFgTrig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODozNTo1MlrOFgT9kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyMTE5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Date date = formatter.parse(\"Sat, 24 Apr 2010 14:01:00 GMT\");\n          \n          \n            \n                    Date date = formatter.parse(pubDate);\n          \n      \n    \n    \n  \n\nOtherwise the test does not test what you want.\nAdditionnally, the parse will throw an exception if the date is not parseable, so the assertNotNull does not provide any value except confusion.", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r369421194", "createdAt": "2020-01-22T08:24:16Z", "author": {"login": "Wadeck"}, "path": "test/src/test/java/hudson/model/RSSTest.java", "diffHunk": "@@ -135,6 +201,86 @@ public void latestBuilds() throws Exception {\n         assertEquals(6, allLinks.getLength());\n     }\n \n+    private void checkRssBasicNodes(Node channelNode, String expectedTitle, int expectedNodes) throws IOException {\n+        assertThat(channelNode.getChildNodes().getLength(), is(expectedNodes));\n+        assertThat(getSingleNode(channelNode, \"link\").getTextContent(), is(j.getURL().toString()));\n+        assertThat(getSingleNode(channelNode, \"description\").getTextContent(), is(expectedTitle));\n+        assertThat(getSingleNode(channelNode, \"title\").getTextContent(), is(expectedTitle));\n+    }\n+\n+    private void checkAtomBasicNodes(Node feedNode, String expectedTitle, int expectedNodes) throws IOException {\n+        assertThat(feedNode.getChildNodes().getLength(), is(expectedNodes));\n+        Node linkNode = getSingleNode(feedNode, \"link\");\n+        assertThat(linkNode.getAttributes().getNamedItem(\"rel\").getTextContent(), is(\"alternate\"));\n+        assertThat(linkNode.getAttributes().getNamedItem(\"type\").getTextContent(), is(\"text/html\"));\n+        assertThat(linkNode.getAttributes().getNamedItem(\"href\").getTextContent(), is(j.getURL().toString()));\n+        assertNotNull(getSingleNode(feedNode, \"updated\"));\n+        assertThat(getSingleNode(feedNode, \"title\").getTextContent(), is(expectedTitle));\n+        Node authorNode = getSingleNode(feedNode, \"author\");\n+        NodeList authorNodes = authorNode.getChildNodes();\n+        assertThat(authorNodes.getLength(), is(1));\n+        Node nameNode = authorNodes.item(0);\n+        assertThat(nameNode.getTextContent(), is(\"Jenkins Server\"));\n+        Node idNode = getSingleNode(feedNode, \"id\");\n+        assertFalse(idNode.getTextContent().isEmpty());\n+    }\n+\n+    private Node getSingleNode(Node parentNode, String nodeName) {\n+        Node childNode = null;\n+        NodeList childNodes = parentNode.getChildNodes();\n+        for (int i = 0; i < childNodes.getLength(); i++) {\n+            if (childNodes.item(i).getNodeName().equals(nodeName)) {\n+                if (childNode == null) {\n+                    childNode = childNodes.item(i);\n+                } else {\n+                    fail(\"Too many children.\");\n+                }\n+            }\n+        }\n+        return childNode;\n+    }\n+\n+    private void checkRssTimeNode(Node firstBuild, String nodeName) throws ParseException {\n+        String pubDate = getSingleNode(firstBuild, nodeName).getTextContent();\n+        assertNotNull(pubDate);\n+        DateFormat formatter = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\");\n+        Date date = formatter.parse(\"Sat, 24 Apr 2010 14:01:00 GMT\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0244339945447207df3007ff313a8452b010f4e0"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyNTgwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertNotNull(pubDate);\n          \n          \n            \n                    assertThat(pubDate, not(emptyString()));\n          \n      \n    \n    \n  \n\ngetTextContent never returns null. If the node does not exist, it's an NPE before the method being called.\nThat also prevent the next suggestion to not throw an exception if the string is empty.", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r369425808", "createdAt": "2020-01-22T08:35:52Z", "author": {"login": "Wadeck"}, "path": "test/src/test/java/hudson/model/RSSTest.java", "diffHunk": "@@ -135,6 +201,86 @@ public void latestBuilds() throws Exception {\n         assertEquals(6, allLinks.getLength());\n     }\n \n+    private void checkRssBasicNodes(Node channelNode, String expectedTitle, int expectedNodes) throws IOException {\n+        assertThat(channelNode.getChildNodes().getLength(), is(expectedNodes));\n+        assertThat(getSingleNode(channelNode, \"link\").getTextContent(), is(j.getURL().toString()));\n+        assertThat(getSingleNode(channelNode, \"description\").getTextContent(), is(expectedTitle));\n+        assertThat(getSingleNode(channelNode, \"title\").getTextContent(), is(expectedTitle));\n+    }\n+\n+    private void checkAtomBasicNodes(Node feedNode, String expectedTitle, int expectedNodes) throws IOException {\n+        assertThat(feedNode.getChildNodes().getLength(), is(expectedNodes));\n+        Node linkNode = getSingleNode(feedNode, \"link\");\n+        assertThat(linkNode.getAttributes().getNamedItem(\"rel\").getTextContent(), is(\"alternate\"));\n+        assertThat(linkNode.getAttributes().getNamedItem(\"type\").getTextContent(), is(\"text/html\"));\n+        assertThat(linkNode.getAttributes().getNamedItem(\"href\").getTextContent(), is(j.getURL().toString()));\n+        assertNotNull(getSingleNode(feedNode, \"updated\"));\n+        assertThat(getSingleNode(feedNode, \"title\").getTextContent(), is(expectedTitle));\n+        Node authorNode = getSingleNode(feedNode, \"author\");\n+        NodeList authorNodes = authorNode.getChildNodes();\n+        assertThat(authorNodes.getLength(), is(1));\n+        Node nameNode = authorNodes.item(0);\n+        assertThat(nameNode.getTextContent(), is(\"Jenkins Server\"));\n+        Node idNode = getSingleNode(feedNode, \"id\");\n+        assertFalse(idNode.getTextContent().isEmpty());\n+    }\n+\n+    private Node getSingleNode(Node parentNode, String nodeName) {\n+        Node childNode = null;\n+        NodeList childNodes = parentNode.getChildNodes();\n+        for (int i = 0; i < childNodes.getLength(); i++) {\n+            if (childNodes.item(i).getNodeName().equals(nodeName)) {\n+                if (childNode == null) {\n+                    childNode = childNodes.item(i);\n+                } else {\n+                    fail(\"Too many children.\");\n+                }\n+            }\n+        }\n+        return childNode;\n+    }\n+\n+    private void checkRssTimeNode(Node firstBuild, String nodeName) throws ParseException {\n+        String pubDate = getSingleNode(firstBuild, nodeName).getTextContent();\n+        assertNotNull(pubDate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0244339945447207df3007ff313a8452b010f4e0"}, "originalPosition": 190}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "618604ed4e3f60a8574d21201d1bfabd54236baa", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/618604ed4e3f60a8574d21201d1bfabd54236baa", "committedDate": "2020-01-22T17:47:23Z", "message": "Copy and paste error.\n\nCo-Authored-By: Wadeck Follonier <Wadeck@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d65241e9103cea418ea09a25126fcfc7b45b32bd", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/d65241e9103cea418ea09a25126fcfc7b45b32bd", "committedDate": "2020-01-22T17:50:58Z", "message": "Assert not empty.\n\nCo-Authored-By: Wadeck Follonier <Wadeck@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f379a9a7f41d83135898de043e5eac9e538c2561", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/f379a9a7f41d83135898de043e5eac9e538c2561", "committedDate": "2020-01-23T21:12:18Z", "message": "Add a bunch more tests and clarify title.\n\nAdd a number of more tests. Test the various places that RSS is used.\nImprove title wording to something consistent and somewhat sensible."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12aaaee183a7c20c6e5632f7e8967e5dea4c3990", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/12aaaee183a7c20c6e5632f7e8967e5dea4c3990", "committedDate": "2020-01-23T21:13:42Z", "message": "Merge branch 'rssTestCoverage' of github.com:jeffret-b/jenkins into rssTestCoverage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3Nzc0MTQz", "url": "https://github.com/jenkinsci/jenkins/pull/4442#pullrequestreview-347774143", "createdAt": "2020-01-24T06:51:33Z", "commit": {"oid": "12aaaee183a7c20c6e5632f7e8967e5dea4c3990"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4OTA3NTA1", "url": "https://github.com/jenkinsci/jenkins/pull/4442#pullrequestreview-348907505", "createdAt": "2020-01-27T19:13:04Z", "commit": {"oid": "12aaaee183a7c20c6e5632f7e8967e5dea4c3990"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNjc5MjM5", "url": "https://github.com/jenkinsci/jenkins/pull/4442#pullrequestreview-353679239", "createdAt": "2020-02-05T12:31:14Z", "commit": {"oid": "12aaaee183a7c20c6e5632f7e8967e5dea4c3990"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjozMToxNFrOFl2F-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjozMToxNFrOFl2F-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyNzg5OA==", "bodyText": "I was unable to find any usages, but it would be great to have some binary compatibility analysis when such changes are submitted. Also not sure why it needs to be renamed", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r375227898", "createdAt": "2020-02-05T12:31:14Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/RSS.java", "diffHunk": "@@ -42,25 +41,6 @@\n  */\n public final class RSS {\n \n-    /**\n-     * Parses trackback ping.\n-     */\n-    public static void doTrackback( Object it, StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12aaaee183a7c20c6e5632f7e8967e5dea4c3990"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzM0ODky", "url": "https://github.com/jenkinsci/jenkins/pull/4442#pullrequestreview-354334892", "createdAt": "2020-02-06T10:14:26Z", "commit": {"oid": "12aaaee183a7c20c6e5632f7e8967e5dea4c3990"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1423, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}