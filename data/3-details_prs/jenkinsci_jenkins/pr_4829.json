{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NDAzOTA0", "number": 4829, "title": "[JENKINS-46175] SimpleBuildStep/SimpleBuildWrapper without workspace (alternative approach)", "bodyText": "See JENKINS-46175.\nThis is an alternative to #4784.\nInstead of keeping the existing API, allowing some parameters to be null, this adds new methods to handle that case.\nTo avoid needing multiple new methods, this removes the separate choice for requiring a workspace and/or launcher.\nProposed changelog entries\n\nJENKINS-46175: A SimpleBuildStep or SimpleBuildWrapper can now choose not to require a workspace context (working directory and launcher).\n\nProposed upgrade guidelines\nN/A\nSubmitter checklist\n\n (If applicable) Jira issue is well described\n Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). Examples\n\nFill-in the Proposed upgrade guidelines section only if there are breaking changes or other changes which may require extra steps from users during the upgrade\n\n\n Appropriate autotests or explanation to why this change has no tests\n For dependency updates: links to external changelogs and, if possible, full diffs\n\nReference implementation:\n\njenkinsci/workflow-basic-steps-plugin#123\n\nDesired reviewers\n@jglick @oleg-nenashev @dwnusbaum\nMaintainer checklist\nBefore the changes are marked as ready-for-merge:\n\n There are at least 2 approvals for the pull request and no outstanding requests for change\n Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n Changelog entries in the PR title and/or Proposed changelog entries are correct\n Proper changelog labels are set so that the changelog can be generated automatically\n If the change needs additional upgrade steps from users, upgrade-guide-needed label is set and there is a Proposed upgrade guidelines section in the PR title. (example)\n If it would make sense to backport the change to LTS, a Jira issue must exist, be a Bug or Improvement, and be labeled as lts-candidate to be considered (see query).", "createdAt": "2020-07-05T12:54:47Z", "url": "https://github.com/jenkinsci/jenkins/pull/4829", "merged": true, "mergeCommit": {"oid": "702bd3921c553e70cdb11aff53370be8c7eeceb1"}, "closed": true, "closedAt": "2020-09-22T08:52:07Z", "author": {"login": "Zastai"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcx53VaAH2gAyNDQ0NDAzOTA0OjZmMDljYjc4MmQ3MmQ5YmM0ODQ2Y2NmZDNhNjY0ZDQ0MDBiZTc2Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKeey6AFqTQ5MjA1NDM5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6f09cb782d72d9bc4846ccfd3a664d4400be7667", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/6f09cb782d72d9bc4846ccfd3a664d4400be7667", "committedDate": "2020-07-05T10:13:24Z", "message": "[JENKINS-46175] Add API to SimpleBuildStep\n\nTwo new methods are added:\n- requiresWorkspace(), defaulted to returning true\n- an overload of perform() that only takes a Run, EnvVars and listener\n  - the \"full-fat\" perform() delegates to this one when requiresWorkspace() returns false\n\nThis enables steps to declare they do not need a workspace context.\nBuildStepCompatibilityLayer honors this and won't try to get a workspace when one is not required."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d60492d75697b4f911320f6b60abc7fccd078e6d", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/d60492d75697b4f911320f6b60abc7fccd078e6d", "committedDate": "2020-07-05T12:18:12Z", "message": "[JENKINS-46175] Add API to SimpleBuildWrapper\n\nThese changes mirror those in SimpleBuildStep.\n\nDisposer has the same changes applied except that the choice of requiring a workspace is made as part of the constructor, based on a wrapper instance.\nAlternatively, it could choose this on its own, the way the step and wrapper do."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMjczNzc0", "url": "https://github.com/jenkinsci/jenkins/pull/4829#pullrequestreview-443273774", "createdAt": "2020-07-06T17:26:32Z", "commit": {"oid": "d60492d75697b4f911320f6b60abc7fccd078e6d"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzoyNjozMlrOGtgloQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzozMDo0MlrOGtguLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3MzAyNQ==", "bodyText": "This is for developers so should not be a localized message.", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450373025", "createdAt": "2020-07-06T17:26:32Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -104,15 +104,51 @@ default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNu\n      */\n     default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNull EnvVars env, @NonNull Launcher launcher,\n                          @NonNull TaskListener listener) throws InterruptedException, IOException {\n-        // If this is called, this must be an implementer of the previous API, in which case we call that, discarding\n+        // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+        if (!this.requiresWorkspace()) {\n+            this.perform(run, env, listener);\n+            return;\n+        }\n+        // If we get here, this must be an implementer of the previous API, in which case we call that, discarding\n         // the environment we were given.\n         // But for that to work, that API method must have been implemented.\n         if (Util.isOverridden(SimpleBuildStep.class, this.getClass(),\n                 \"perform\", Run.class, FilePath.class, Launcher.class, TaskListener.class)) {\n             this.perform(run, workspace, launcher, listener);\n         } else {\n-            throw new AbstractMethodError();\n+            throw new AbstractMethodError(Messages.SimpleBuildStep_NeedPerformMethodWithWorkspace());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d60492d75697b4f911320f6b60abc7fccd078e6d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3MzM2OA==", "bodyText": "ditto, and should be an IllegalStateException or similar", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450373368", "createdAt": "2020-07-06T17:27:11Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -104,15 +104,51 @@ default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNu\n      */\n     default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNull EnvVars env, @NonNull Launcher launcher,\n                          @NonNull TaskListener listener) throws InterruptedException, IOException {\n-        // If this is called, this must be an implementer of the previous API, in which case we call that, discarding\n+        // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+        if (!this.requiresWorkspace()) {\n+            this.perform(run, env, listener);\n+            return;\n+        }\n+        // If we get here, this must be an implementer of the previous API, in which case we call that, discarding\n         // the environment we were given.\n         // But for that to work, that API method must have been implemented.\n         if (Util.isOverridden(SimpleBuildStep.class, this.getClass(),\n                 \"perform\", Run.class, FilePath.class, Launcher.class, TaskListener.class)) {\n             this.perform(run, workspace, launcher, listener);\n         } else {\n-            throw new AbstractMethodError();\n+            throw new AbstractMethodError(Messages.SimpleBuildStep_NeedPerformMethodWithWorkspace());\n+        }\n+    }\n+\n+    /**\n+     * Determines whether or not this step requires a workspace context (working directory and launcher).\n+     * <p>\n+     * When this returns {@code true}, {@link #perform(Run, FilePath, EnvVars, Launcher, TaskListener)} applies.\n+     * Otherwise, {@link #perform(Run, EnvVars, TaskListener)} applies.\n+     *\n+     * @return {@code true} if this step requires a workspace context; {@code false} otherwise.\n+     * @since TODO\n+     */\n+    default boolean requiresWorkspace() {\n+        return true;\n+    }\n+\n+    /**\n+     * Run this step, without a workspace context.\n+     * @param run a build this is running as a part of\n+     * @param env environment variables applicable to this step\n+     * @param listener a place to send output\n+     * @throws InterruptedException if the step is interrupted\n+     * @throws IOException if something goes wrong; use {@link AbortException} for a polite error\n+     * @since TODO\n+     */\n+    default void perform(@NonNull Run<?, ?> run, @NonNull EnvVars env, @NonNull TaskListener listener) throws InterruptedException, IOException {\n+        // If this step requires a workspace, this is the wrong method to call.\n+        if (this.requiresWorkspace()) {\n+            throw new AbortException(Messages.SimpleBuildStep_WorkspaceContextNeeded());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d60492d75697b4f911320f6b60abc7fccd078e6d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3MzQwNQ==", "bodyText": "ditto", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450373405", "createdAt": "2020-07-06T17:27:17Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -104,15 +104,51 @@ default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNu\n      */\n     default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNull EnvVars env, @NonNull Launcher launcher,\n                          @NonNull TaskListener listener) throws InterruptedException, IOException {\n-        // If this is called, this must be an implementer of the previous API, in which case we call that, discarding\n+        // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+        if (!this.requiresWorkspace()) {\n+            this.perform(run, env, listener);\n+            return;\n+        }\n+        // If we get here, this must be an implementer of the previous API, in which case we call that, discarding\n         // the environment we were given.\n         // But for that to work, that API method must have been implemented.\n         if (Util.isOverridden(SimpleBuildStep.class, this.getClass(),\n                 \"perform\", Run.class, FilePath.class, Launcher.class, TaskListener.class)) {\n             this.perform(run, workspace, launcher, listener);\n         } else {\n-            throw new AbstractMethodError();\n+            throw new AbstractMethodError(Messages.SimpleBuildStep_NeedPerformMethodWithWorkspace());\n+        }\n+    }\n+\n+    /**\n+     * Determines whether or not this step requires a workspace context (working directory and launcher).\n+     * <p>\n+     * When this returns {@code true}, {@link #perform(Run, FilePath, EnvVars, Launcher, TaskListener)} applies.\n+     * Otherwise, {@link #perform(Run, EnvVars, TaskListener)} applies.\n+     *\n+     * @return {@code true} if this step requires a workspace context; {@code false} otherwise.\n+     * @since TODO\n+     */\n+    default boolean requiresWorkspace() {\n+        return true;\n+    }\n+\n+    /**\n+     * Run this step, without a workspace context.\n+     * @param run a build this is running as a part of\n+     * @param env environment variables applicable to this step\n+     * @param listener a place to send output\n+     * @throws InterruptedException if the step is interrupted\n+     * @throws IOException if something goes wrong; use {@link AbortException} for a polite error\n+     * @since TODO\n+     */\n+    default void perform(@NonNull Run<?, ?> run, @NonNull EnvVars env, @NonNull TaskListener listener) throws InterruptedException, IOException {\n+        // If this step requires a workspace, this is the wrong method to call.\n+        if (this.requiresWorkspace()) {\n+            throw new AbortException(Messages.SimpleBuildStep_WorkspaceContextNeeded());\n         }\n+        // Otherwise, this method must have an implementation.\n+        throw new AbstractMethodError(Messages.SimpleBuildStep_NeedPerformMethodWithoutWorkspace());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d60492d75697b4f911320f6b60abc7fccd078e6d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDQwNQ==", "bodyText": "Invert the sense of the field since a deserialized Disposer from a Jenkins session prior to upgrade (for Pipeline builds) will have fields set to default values like false unless you implement readResolve.", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450374405", "createdAt": "2020-07-06T17:29:19Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -117,6 +156,32 @@ public void setDisposer(@NonNull Disposer disposer) {\n      * Must be safely serializable, so it receives runtime context comparable to that of the original setup.\n      */\n     public static abstract class Disposer implements Serializable {\n+\n+        /**\n+         * Creates a new end-of-wrapped-block callback.\n+         *\n+         * @deprecated Use the constructor that takes a wrapper instance instead.\n+         */\n+        @Deprecated\n+        protected Disposer() {\n+            this.requiresWorkspace = true;\n+        }\n+\n+        /**\n+         * Creates a new end-of-wrapped-block callback.\n+         *\n+         * @param wrapper The wrapper for which this is a callback; used to determine whether or not this callback\n+         *                requires a workspace context (working directory and launcher). That choice determines whether\n+         *                {@link #tearDown(Run, FilePath, Launcher, TaskListener)} or\n+         *                {@link #tearDown(Run, TaskListener)} applies.\n+         * @since TODO\n+         */\n+        protected Disposer(@NonNull SimpleBuildWrapper wrapper) {\n+            this.requiresWorkspace = wrapper.requiresWorkspace();\n+        }\n+\n+        private final boolean requiresWorkspace;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d60492d75697b4f911320f6b60abc7fccd078e6d"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDcwMw==", "bodyText": "no i18n", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450374703", "createdAt": "2020-07-06T17:29:49Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -126,7 +191,32 @@ public void setDisposer(@NonNull Disposer disposer) {\n          * @throws IOException if something fails; {@link AbortException} for user errors\n          * @throws InterruptedException if tear down is interrupted\n          */\n-        public abstract void tearDown(Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws IOException, InterruptedException;\n+        public void tearDown(Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws IOException, InterruptedException {\n+            // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+            if (!this.requiresWorkspace) {\n+                this.tearDown(build, listener);\n+                return;\n+            }\n+            throw new AbstractMethodError(Messages.SimpleBuildWrapper_Disposer_NeedTearDownMethodWithWorkspace());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d60492d75697b4f911320f6b60abc7fccd078e6d"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDc2Mw==", "bodyText": "ditto", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450374763", "createdAt": "2020-07-06T17:29:55Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -126,7 +191,32 @@ public void setDisposer(@NonNull Disposer disposer) {\n          * @throws IOException if something fails; {@link AbortException} for user errors\n          * @throws InterruptedException if tear down is interrupted\n          */\n-        public abstract void tearDown(Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws IOException, InterruptedException;\n+        public void tearDown(Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws IOException, InterruptedException {\n+            // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+            if (!this.requiresWorkspace) {\n+                this.tearDown(build, listener);\n+                return;\n+            }\n+            throw new AbstractMethodError(Messages.SimpleBuildWrapper_Disposer_NeedTearDownMethodWithWorkspace());\n+        }\n+\n+        /**\n+         * Attempt to clean up anything that was done in the initial setup.\n+         * @param build a build being run\n+         * @param listener a way to report progress\n+         * @throws IOException if something fails; {@link AbortException} for user errors\n+         * @throws InterruptedException if tear down is interrupted\n+         * @since TODO\n+         */\n+        public void tearDown(Run<?,?> build, TaskListener listener) throws IOException, InterruptedException {\n+            // If this callback requires a workspace, this is the wrong method to call.\n+            if (this.requiresWorkspace) {\n+                throw new AbortException(Messages.SimpleBuildWrapper_Disposer_WorkspaceContextNeeded());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d60492d75697b4f911320f6b60abc7fccd078e6d"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDgwNg==", "bodyText": "ditto", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450374806", "createdAt": "2020-07-06T17:30:00Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -126,7 +191,32 @@ public void setDisposer(@NonNull Disposer disposer) {\n          * @throws IOException if something fails; {@link AbortException} for user errors\n          * @throws InterruptedException if tear down is interrupted\n          */\n-        public abstract void tearDown(Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws IOException, InterruptedException;\n+        public void tearDown(Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws IOException, InterruptedException {\n+            // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+            if (!this.requiresWorkspace) {\n+                this.tearDown(build, listener);\n+                return;\n+            }\n+            throw new AbstractMethodError(Messages.SimpleBuildWrapper_Disposer_NeedTearDownMethodWithWorkspace());\n+        }\n+\n+        /**\n+         * Attempt to clean up anything that was done in the initial setup.\n+         * @param build a build being run\n+         * @param listener a way to report progress\n+         * @throws IOException if something fails; {@link AbortException} for user errors\n+         * @throws InterruptedException if tear down is interrupted\n+         * @since TODO\n+         */\n+        public void tearDown(Run<?,?> build, TaskListener listener) throws IOException, InterruptedException {\n+            // If this callback requires a workspace, this is the wrong method to call.\n+            if (this.requiresWorkspace) {\n+                throw new AbortException(Messages.SimpleBuildWrapper_Disposer_WorkspaceContextNeeded());\n+            }\n+            // Otherwise, this method must have an implementation.\n+            throw new AbstractMethodError(Messages.SimpleBuildWrapper_Disposer_NeedTearDownMethodWithoutWorkspace());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d60492d75697b4f911320f6b60abc7fccd078e6d"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDkxNg==", "bodyText": "ditto", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450374916", "createdAt": "2020-07-06T17:30:12Z", "author": {"login": "jglick"}, "path": "core/src/main/resources/jenkins/tasks/Messages.properties", "diffHunk": "@@ -0,0 +1,9 @@\n+SimpleBuildStep.NeedPerformMethodWithWorkspace=Unless a build step is marked as not requiring a workspace context, you must implement the overload of the perform() method that takes both a workspace and a launcher.\n+SimpleBuildStep.NeedPerformMethodWithoutWorkspace=When a build step is marked as not requiring a workspace context, you must implement the overload of the perform() method that does not take a workspace or launcher.\n+SimpleBuildStep.WorkspaceContextNeeded=This build step requires a workspace context, but none was provided.\n+SimpleBuildWrapper.NeedSetUpMethodWithWorkspace=Unless a build wrapper is marked as not requiring a workspace context, you must implement the overload of the setUp() method that takes both a workspace and a launcher.\n+SimpleBuildWrapper.NeedSetUpMethodWithoutWorkspace=When a build wrapper is marked as not requiring a workspace context, you must implement the overload of the setUp() method that does not take a workspace or launcher.\n+SimpleBuildWrapper.WorkspaceContextNeeded=This build wrapper requires a workspace context, but none was provided.\n+SimpleBuildWrapper_Disposer.NeedTearDownMethodWithWorkspace=Unless an end-of-wrapped-block callback is marked as not requiring a workspace context, you must implement the overload of the tearDown() method that takes both a workspace and a launcher.\n+SimpleBuildWrapper_Disposer.NeedTearDownMethodWithoutWorkspace=When an end-of-wrapped-block callback is marked as not requiring a workspace context, you must implement the overload of the tearDown() method that does not take a workspace or launcher.\n+SimpleBuildWrapper_Disposer.WorkspaceContextNeeded=This end-of-wrapped-block callback requires a workspace context, but none was provided.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d60492d75697b4f911320f6b60abc7fccd078e6d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NTAxMw==", "bodyText": "ditto", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450375013", "createdAt": "2020-07-06T17:30:23Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -75,7 +75,46 @@\n      * @throws IOException if something fails; {@link AbortException} for user errors\n      * @throws InterruptedException if setup is interrupted\n      */\n-    public abstract void setUp(Context context, Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException;\n+    public void setUp(Context context, Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {\n+        // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+        if (!this.requiresWorkspace()) {\n+            this.setUp(context, build, listener, initialEnvironment);\n+            return;\n+        }\n+        throw new AbstractMethodError(Messages.SimpleBuildWrapper_NeedSetUpMethodWithWorkspace());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d60492d75697b4f911320f6b60abc7fccd078e6d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NTA3MA==", "bodyText": "ditto", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450375070", "createdAt": "2020-07-06T17:30:28Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -75,7 +75,46 @@\n      * @throws IOException if something fails; {@link AbortException} for user errors\n      * @throws InterruptedException if setup is interrupted\n      */\n-    public abstract void setUp(Context context, Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException;\n+    public void setUp(Context context, Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {\n+        // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+        if (!this.requiresWorkspace()) {\n+            this.setUp(context, build, listener, initialEnvironment);\n+            return;\n+        }\n+        throw new AbstractMethodError(Messages.SimpleBuildWrapper_NeedSetUpMethodWithWorkspace());\n+    }\n+\n+    /**\n+     * Determines whether or not this wrapper requires a workspace context (working directory and launcher).\n+     * <p>\n+     * When this returns {@code true}, {@link #setUp(Context, Run, FilePath, Launcher, TaskListener, EnvVars)} applies.\n+     * Otherwise, {@link #setUp(Context, Run, TaskListener, EnvVars)} applies.\n+     *\n+     * @return {@code true} if this step requires a workspace context; {@code false} otherwise.\n+     * @since TODO\n+     */\n+    boolean requiresWorkspace() {\n+        return true;\n+    }\n+\n+    /**\n+     * Called when a segment of a build is started that is to be enhanced with this wrapper.\n+     * @param context a way of collecting modifications to the environment for nested steps\n+     * @param build a build being run\n+     * @param listener a way to report progress\n+     * @param initialEnvironment the environment variables set at the outset\n+     * @throws IOException if something fails; {@link AbortException} for user errors\n+     * @throws InterruptedException if setup is interrupted\n+     * @since TODO\n+     */\n+    public void setUp(Context context, Run<?,?> build, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {\n+        // If this wrapper requires a workspace, this is the wrong method to call.\n+        if (this.requiresWorkspace()) {\n+            throw new AbortException(Messages.SimpleBuildWrapper_WorkspaceContextNeeded());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d60492d75697b4f911320f6b60abc7fccd078e6d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NTIxNQ==", "bodyText": "ditto", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450375215", "createdAt": "2020-07-06T17:30:42Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -75,7 +75,46 @@\n      * @throws IOException if something fails; {@link AbortException} for user errors\n      * @throws InterruptedException if setup is interrupted\n      */\n-    public abstract void setUp(Context context, Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException;\n+    public void setUp(Context context, Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {\n+        // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+        if (!this.requiresWorkspace()) {\n+            this.setUp(context, build, listener, initialEnvironment);\n+            return;\n+        }\n+        throw new AbstractMethodError(Messages.SimpleBuildWrapper_NeedSetUpMethodWithWorkspace());\n+    }\n+\n+    /**\n+     * Determines whether or not this wrapper requires a workspace context (working directory and launcher).\n+     * <p>\n+     * When this returns {@code true}, {@link #setUp(Context, Run, FilePath, Launcher, TaskListener, EnvVars)} applies.\n+     * Otherwise, {@link #setUp(Context, Run, TaskListener, EnvVars)} applies.\n+     *\n+     * @return {@code true} if this step requires a workspace context; {@code false} otherwise.\n+     * @since TODO\n+     */\n+    boolean requiresWorkspace() {\n+        return true;\n+    }\n+\n+    /**\n+     * Called when a segment of a build is started that is to be enhanced with this wrapper.\n+     * @param context a way of collecting modifications to the environment for nested steps\n+     * @param build a build being run\n+     * @param listener a way to report progress\n+     * @param initialEnvironment the environment variables set at the outset\n+     * @throws IOException if something fails; {@link AbortException} for user errors\n+     * @throws InterruptedException if setup is interrupted\n+     * @since TODO\n+     */\n+    public void setUp(Context context, Run<?,?> build, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {\n+        // If this wrapper requires a workspace, this is the wrong method to call.\n+        if (this.requiresWorkspace()) {\n+            throw new AbortException(Messages.SimpleBuildWrapper_WorkspaceContextNeeded());\n+        }\n+        // Otherwise, this method must have an implementation.\n+        throw new AbstractMethodError(Messages.SimpleBuildWrapper_NeedSetUpMethodWithoutWorkspace());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d60492d75697b4f911320f6b60abc7fccd078e6d"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNTE4NzA0", "url": "https://github.com/jenkinsci/jenkins/pull/4829#pullrequestreview-443518704", "createdAt": "2020-07-07T02:23:11Z", "commit": {"oid": "d60492d75697b4f911320f6b60abc7fccd078e6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMjoyMzoxMVrOGts-Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMjoyMzoxMVrOGts-Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NTk0Mw==", "bodyText": "Should not be necessary. Context can be told whether its associated wrapper requests a workspace; then setDisposer can pass this bit of information along to the Disposer.", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450575943", "createdAt": "2020-07-07T02:23:11Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -117,6 +156,32 @@ public void setDisposer(@NonNull Disposer disposer) {\n      * Must be safely serializable, so it receives runtime context comparable to that of the original setup.\n      */\n     public static abstract class Disposer implements Serializable {\n+\n+        /**\n+         * Creates a new end-of-wrapped-block callback.\n+         *\n+         * @deprecated Use the constructor that takes a wrapper instance instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d60492d75697b4f911320f6b60abc7fccd078e6d"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb5da032d321d738eabfc1a8586e98b31d8235f2", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/bb5da032d321d738eabfc1a8586e98b31d8235f2", "committedDate": "2020-07-13T17:43:00Z", "message": "Merge branch 'master' into JENKINS-46175B"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5e32c67fcfdbb314fcf9c2d121865b1ed0cd7e9", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/a5e32c67fcfdbb314fcf9c2d121865b1ed0cd7e9", "committedDate": "2020-07-13T17:58:54Z", "message": "Remove i18n for developer messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1168dbac5ee370a1fc1985c29e6da909634daaf", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/b1168dbac5ee370a1fc1985c29e6da909634daaf", "committedDate": "2020-07-13T18:43:16Z", "message": "Adjust Disposer setup\n\nThis now uses a field with inverted meaning (for compatibility with\nold serialized instances).\nIt also adds a constructor taking a boolean as well as a\nrequiresWorkspace() predicate method (for use by callers to determine\nwhich of the tearDown() methods to call).\nExtended JavaDoc for the tearDown methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e68337c16b14404ab655522593baa5e34f504dce", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/e68337c16b14404ab655522593baa5e34f504dce", "committedDate": "2020-07-13T19:01:29Z", "message": "Adjust exception use\n\nUse IllegalStateException() instead of AbortException().\nTweaked and aligned JavaDoc.\nAdjusted method order."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49b81c60070f59d38486dff9edae3359bc5b5dd0", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/49b81c60070f59d38486dff9edae3359bc5b5dd0", "committedDate": "2020-07-13T19:23:59Z", "message": "More Disposer changes\n\nIts workspace requirement now tracks that of the wrapper via Context."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f054885d5439f4b9bbb448104e875dfae3264cf9", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/f054885d5439f4b9bbb448104e875dfae3264cf9", "committedDate": "2020-07-13T19:31:45Z", "message": "Finish a sentence in a comment."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTc0MDQw", "url": "https://github.com/jenkinsci/jenkins/pull/4829#pullrequestreview-447574040", "createdAt": "2020-07-13T20:23:58Z", "commit": {"oid": "f054885d5439f4b9bbb448104e875dfae3264cf9"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDoyMzo1OFrOGw4d-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDoyNjo1OVrOGw4lHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMDAxMQ==", "bodyText": "I do not think we generally try to align Javadoc.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IOException          if something goes wrong; use {@link AbortException} for a polite error\n          \n          \n            \n                 * @throws IOException if something goes wrong; use {@link AbortException} for a polite error", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453910011", "createdAt": "2020-07-13T20:23:58Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -93,28 +93,76 @@ default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNu\n \n     /**\n      * Run this step.\n-     * @param run a build this is running as a part of\n+     * <p>\n+     * This method <strong>must</strong> be overridden when this step requires a workspace context. If such a context is\n+     * <em>not</em> required, it does not need to be overridden; it will then forward to\n+     * {@link #perform(Run, EnvVars, TaskListener)}.\n+     *\n+     * @param run       a build this is running as a part of\n      * @param workspace a workspace to use for any file operations\n-     * @param env environment variables applicable to this step\n-     * @param launcher a way to start processes\n-     * @param listener a place to send output\n+     * @param env       environment variables applicable to this step\n+     * @param launcher  a way to start processes\n+     * @param listener  a place to send output\n+     * @throws AbstractMethodError  if this step requires a workspace context and this method is not overridden\n      * @throws InterruptedException if the step is interrupted\n-     * @throws IOException if something goes wrong; use {@link AbortException} for a polite error\n+     * @throws IOException          if something goes wrong; use {@link AbortException} for a polite error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f054885d5439f4b9bbb448104e875dfae3264cf9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMDkxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                boolean requiresWorkspace() {\n          \n          \n            \n                protected boolean requiresWorkspace() {\n          \n      \n    \n    \n  \n\nas you will see when you try to write a test for this", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453910911", "createdAt": "2020-07-13T20:25:27Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -64,18 +64,69 @@\n @SuppressWarnings(\"rawtypes\") // inherited\n public abstract class SimpleBuildWrapper extends BuildWrapper {\n \n+    /**\n+     * Determines whether or not this wrapper requires a workspace context (working directory and launcher).\n+     * <p>\n+     * When such a context is required (the default), {@link #setUp(Context, Run, FilePath, Launcher, TaskListener, EnvVars)} applies.\n+     * Otherwise, {@link #setUp(Context, Run, TaskListener, EnvVars)} applies.\n+     *\n+     * @return {@code true} if this wrapper requires a workspace context; {@code false} otherwise.\n+     * @since TODO\n+     */\n+    boolean requiresWorkspace() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f054885d5439f4b9bbb448104e875dfae3264cf9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMTQ3Ng==", "bodyText": "Should be either @Restricted(Beta.class) or otherwise make it clear that an implementation of SimpleBuildWrapper can ignore this.", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453911476", "createdAt": "2020-07-13T20:26:24Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -97,6 +148,17 @@ public void env(String key, String value) {\n             }\n             env.put(key, value);\n         }\n+        private Boolean wrapperRequiresWorkspace;\n+        /**\n+         * Keeps track of whether or not the specified wrapper requires a workspace context (working directory and\n+         * launcher).\n+         * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f054885d5439f4b9bbb448104e875dfae3264cf9"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMTYyNg==", "bodyText": "Similarly here.", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453911626", "createdAt": "2020-07-13T20:26:38Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -117,16 +182,70 @@ public void setDisposer(@NonNull Disposer disposer) {\n      * Must be safely serializable, so it receives runtime context comparable to that of the original setup.\n      */\n     public static abstract class Disposer implements Serializable {\n+\n+        private Boolean wrapperRequiresWorkspace;\n+\n+        /**\n+         * Determines whether or not this end-of-wrapped-block callback requires a workspace context (working\n+         * directory and launcher).\n+         * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f054885d5439f4b9bbb448104e875dfae3264cf9"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMTgzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private Boolean wrapperRequiresWorkspace;\n          \n          \n            \n                    @CheckForNull\n          \n          \n            \n                    private Boolean wrapperRequiresWorkspace;", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453911836", "createdAt": "2020-07-13T20:26:59Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -117,16 +182,70 @@ public void setDisposer(@NonNull Disposer disposer) {\n      * Must be safely serializable, so it receives runtime context comparable to that of the original setup.\n      */\n     public static abstract class Disposer implements Serializable {\n+\n+        private Boolean wrapperRequiresWorkspace;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f054885d5439f4b9bbb448104e875dfae3264cf9"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09bec81313b8597476c936abfd2f0a3444ded43f", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/09bec81313b8597476c936abfd2f0a3444ded43f", "committedDate": "2020-07-13T21:12:03Z", "message": "Correct method accessibility.\n\nWhile `SimpleBuildStep` is an interface, `SimpleBuildWrapper` is a\nclass, so needs an explicit `public`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9087ee6842a9fa5e3e3b5a3351b181e84351e3b4", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/9087ee6842a9fa5e3e3b5a3351b181e84351e3b4", "committedDate": "2020-07-13T21:19:05Z", "message": "Add nullability annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21369f03cd53bbc9c14c1572faac8c7f3a06f935", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/21369f03cd53bbc9c14c1572faac8c7f3a06f935", "committedDate": "2020-07-13T21:24:39Z", "message": "Undo JavaDoc param/throws alignment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ceb1e5d4d4e0051a78d70ab65e1390ca1da5c3a6", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/ceb1e5d4d4e0051a78d70ab65e1390ca1da5c3a6", "committedDate": "2020-07-13T21:36:41Z", "message": "Enable optional-but-handled workspace context\n\nThis adjusts the call sites to always call the with-workspace-context\nmethods when such a context is available, regardless of whether it is\nrequired."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "945136b4934e8b8e4dc1fa564eed8e84f3a5f1ab", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/945136b4934e8b8e4dc1fa564eed8e84f3a5f1ab", "committedDate": "2020-07-13T21:37:10Z", "message": "Correct JavaDoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfe16f60d3ee76e6efc0e2380dc0a7dd4c402e06", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/cfe16f60d3ee76e6efc0e2380dc0a7dd4c402e06", "committedDate": "2020-07-13T21:47:09Z", "message": "Mark internal API\n\nThis adds `@Restricted(Beta.class)` as suggested, to indicate methods\nthat are part of an internal-only API (essentially they should be\ncalled by the workflow-basic-steps plugin only).\n(Does feel like there should be a better tag than \"BETA\" to indicate\nthis.)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNzM0NTM1", "url": "https://github.com/jenkinsci/jenkins/pull/4829#pullrequestreview-450734535", "createdAt": "2020-07-17T15:04:25Z", "commit": {"oid": "cfe16f60d3ee76e6efc0e2380dc0a7dd4c402e06"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNTowNDoyNVrOGzWkeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNTowNDoyNVrOGzWkeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwMDM0NA==", "bodyText": "this comment doesn't seem right? beta just means that it's a new API and it may change in some way? To me anyway", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r456500344", "createdAt": "2020-07-17T15:04:25Z", "author": {"login": "timja"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -64,18 +66,70 @@\n @SuppressWarnings(\"rawtypes\") // inherited\n public abstract class SimpleBuildWrapper extends BuildWrapper {\n \n+    /**\n+     * Determines whether or not this wrapper requires a workspace context (working directory and launcher).\n+     * <p>\n+     * When such a context is required (the default), {@link #setUp(Context, Run, FilePath, Launcher, TaskListener, EnvVars)} applies.\n+     * Otherwise, {@link #setUp(Context, Run, TaskListener, EnvVars)} applies.\n+     *\n+     * @return {@code true} if this wrapper requires a workspace context; {@code false} otherwise.\n+     * @since TODO\n+     */\n+    @Restricted(Beta.class) // to indicate it is to be called by Jenkins internals only; not part of the normal API", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe16f60d3ee76e6efc0e2380dc0a7dd4c402e06"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODAxMzcw", "url": "https://github.com/jenkinsci/jenkins/pull/4829#pullrequestreview-451801370", "createdAt": "2020-07-20T17:12:02Z", "commit": {"oid": "cfe16f60d3ee76e6efc0e2380dc0a7dd4c402e06"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzoxMjowMlrOG0Xksg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzoxMjo1NVrOG0Xmww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2NTM2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.kohsuke.accmod.restrictions.Beta;", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457565362", "createdAt": "2020-07-20T17:12:02Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -54,6 +54,7 @@\n import jenkins.model.RunAction2;\n import jenkins.model.TransientActionFactory;\n import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe16f60d3ee76e6efc0e2380dc0a7dd4c402e06"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2NTU2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Restricted(Beta.class) // to indicate it is to be called by Jenkins internals only; not part of the normal API\n          \n      \n    \n    \n  \n\nNo, this is key to the public API for plugins implementing build steps.", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457565563", "createdAt": "2020-07-20T17:12:23Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -159,6 +160,7 @@ default void perform(@NonNull Run<?, ?> run, @NonNull EnvVars env, @NonNull Task\n      * @return {@code true} if this step requires a workspace context; {@code false} otherwise.\n      * @since TODO\n      */\n+    @Restricted(Beta.class) // to indicate it is to be called by Jenkins internals only; not part of the normal API", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe16f60d3ee76e6efc0e2380dc0a7dd4c402e06"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2NTg5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Restricted(Beta.class) // to indicate it is to be called by Jenkins internals only; not part of the normal API\n          \n      \n    \n    \n  \n\nWrong here.", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457565891", "createdAt": "2020-07-20T17:12:55Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -64,18 +66,70 @@\n @SuppressWarnings(\"rawtypes\") // inherited\n public abstract class SimpleBuildWrapper extends BuildWrapper {\n \n+    /**\n+     * Determines whether or not this wrapper requires a workspace context (working directory and launcher).\n+     * <p>\n+     * When such a context is required (the default), {@link #setUp(Context, Run, FilePath, Launcher, TaskListener, EnvVars)} applies.\n+     * Otherwise, {@link #setUp(Context, Run, TaskListener, EnvVars)} applies.\n+     *\n+     * @return {@code true} if this wrapper requires a workspace context; {@code false} otherwise.\n+     * @since TODO\n+     */\n+    @Restricted(Beta.class) // to indicate it is to be called by Jenkins internals only; not part of the normal API", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwMDM0NA=="}, "originalCommit": {"oid": "cfe16f60d3ee76e6efc0e2380dc0a7dd4c402e06"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ae41bdfff295ea09014e38d38d75a10f55816ee", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/0ae41bdfff295ea09014e38d38d75a10f55816ee", "committedDate": "2020-07-20T17:32:07Z", "message": "Merge branch 'master' into JENKINS-46175B"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2fe4bcf272e7268a332b46d393fd9b93de6c91e", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/d2fe4bcf272e7268a332b46d393fd9b93de6c91e", "committedDate": "2020-07-20T17:41:45Z", "message": "Remove Beta restriction from requiresWorkspace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35d311a3feb38a8b1791afce2c21c33847b63dd7", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/35d311a3feb38a8b1791afce2c21c33847b63dd7", "committedDate": "2020-07-20T17:45:36Z", "message": "Remove Beta restriction from requiresWorkspace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1d10ecbbed1343b9b604557405f95b8b2e7f632", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/f1d10ecbbed1343b9b604557405f95b8b2e7f632", "committedDate": "2020-07-20T17:48:19Z", "message": "Add back a Beta restriction\n\nThe one the Disposer is not for implementers to override.\nI need more coffee."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODk1MjA4", "url": "https://github.com/jenkinsci/jenkins/pull/4829#pullrequestreview-451895208", "createdAt": "2020-07-20T19:26:56Z", "commit": {"oid": "f1d10ecbbed1343b9b604557405f95b8b2e7f632"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOToyNjo1NlrOG0cK8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOTozODo0OVrOG0cieg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MDY5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * <strong>must not</strong> be called when such a context <em>is</em> required.\n          \n          \n            \n                 * will not be called when such a context <em>is</em> required.\n          \n      \n    \n    \n  \n\n(write from the PoV of an implementor)", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457640690", "createdAt": "2020-07-20T19:26:56Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -93,28 +93,76 @@ default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNu\n \n     /**\n      * Run this step.\n+     * <p>\n+     * This method <strong>must</strong> be overridden when this step requires a workspace context. If such a context is\n+     * <em>not</em> required, it does not need to be overridden; it will then forward to\n+     * {@link #perform(Run, EnvVars, TaskListener)}.\n+     *\n      * @param run a build this is running as a part of\n      * @param workspace a workspace to use for any file operations\n      * @param env environment variables applicable to this step\n      * @param launcher a way to start processes\n      * @param listener a place to send output\n+     * @throws AbstractMethodError if this step requires a workspace context and neither this method nor {@link #perform(Run, FilePath, Launcher, TaskListener)} is overridden\n      * @throws InterruptedException if the step is interrupted\n      * @throws IOException if something goes wrong; use {@link AbortException} for a polite error\n      * @since TODO\n      */\n     default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNull EnvVars env, @NonNull Launcher launcher,\n                          @NonNull TaskListener listener) throws InterruptedException, IOException {\n-        // If this is called, this must be an implementer of the previous API, in which case we call that, discarding\n+        // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+        if (!this.requiresWorkspace()) {\n+            this.perform(run, env, listener);\n+            return;\n+        }\n+        // If we get here, this must be an implementer of the previous API, in which case we call that, discarding\n         // the environment we were given.\n         // But for that to work, that API method must have been implemented.\n         if (Util.isOverridden(SimpleBuildStep.class, this.getClass(),\n                 \"perform\", Run.class, FilePath.class, Launcher.class, TaskListener.class)) {\n             this.perform(run, workspace, launcher, listener);\n         } else {\n-            throw new AbstractMethodError();\n+            throw new AbstractMethodError(\"Unless a build step is marked as not requiring a workspace context, you must implement the overload of the perform() method that takes both a workspace and a launcher.\");\n         }\n     }\n \n+    /**\n+     * Run this step, without a workspace context.\n+     * <p>\n+     * This method <strong>must</strong> be overridden when this step does not require a workspace context, and\n+     * <strong>must not</strong> be called when such a context <em>is</em> required.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1d10ecbbed1343b9b604557405f95b8b2e7f632"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MTE5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * <strong>must not</strong> be called when such a context <em>is</em> required.\n          \n          \n            \n                 * will not be called when such a context <em>is</em> required.", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457641198", "createdAt": "2020-07-20T19:28:00Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -64,18 +66,69 @@\n @SuppressWarnings(\"rawtypes\") // inherited\n public abstract class SimpleBuildWrapper extends BuildWrapper {\n \n+    /**\n+     * Determines whether or not this wrapper requires a workspace context (working directory and launcher).\n+     * <p>\n+     * When such a context is required (the default), {@link #setUp(Context, Run, FilePath, Launcher, TaskListener, EnvVars)} applies.\n+     * Otherwise, {@link #setUp(Context, Run, TaskListener, EnvVars)} applies.\n+     *\n+     * @return {@code true} if this wrapper requires a workspace context; {@code false} otherwise.\n+     * @since TODO\n+     */\n+    public boolean requiresWorkspace() {\n+        return true;\n+    }\n+\n     /**\n      * Called when a segment of a build is started that is to be enhanced with this wrapper.\n+     * <p>\n+     * This method <strong>must</strong> be overridden when this wrapper requires a workspace context. If such a context\n+     * is <em>not</em> required, it does not need to be overridden; it will then forward to\n+     * {@link #setUp(Context, Run, TaskListener, EnvVars)}.\n+     *\n      * @param context a way of collecting modifications to the environment for nested steps\n      * @param build a build being run\n      * @param workspace a workspace of the build\n      * @param launcher a way to start commands\n      * @param listener a way to report progress\n      * @param initialEnvironment the environment variables set at the outset\n+     * @throws AbstractMethodError if this wrapper requires a workspace context, and this method is not overridden\n+     * @throws IOException if something fails; {@link AbortException} for user errors\n+     * @throws InterruptedException if setup is interrupted\n+     */\n+    public void setUp(Context context, Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {\n+        // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+        if (!this.requiresWorkspace()) {\n+            this.setUp(context, build, listener, initialEnvironment);\n+            return;\n+        }\n+        throw new AbstractMethodError(\"Unless a build wrapper is marked as not requiring a workspace context, you must implement the overload of the setUp() method that takes both a workspace and a launcher.\");\n+    }\n+\n+    /**\n+     * Called when a segment of a build is started that is to be enhanced with this wrapper.\n+     * <p>\n+     * This method <strong>must</strong> be overridden when this wrapper does not require a workspace context, and\n+     * <strong>must not</strong> be called when such a context <em>is</em> required.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1d10ecbbed1343b9b604557405f95b8b2e7f632"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NTA4NQ==", "bodyText": "Purely stylistic, but to make all this logic easier to follow:\n\nremove setWorkspaceRequirement\ndeprecate the implicit no-arg Context constructor (by first declaring it explicitly)\nintroduce a private (or package-scope) constructor taking a boolean requiresWorkspace argument\ncall that from a new \u201cbeta\u201d method SimpleBuildWrapper.createContext()\nthen you can\n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final Context c = new Context();\n          \n          \n            \n                        c.setWorkspaceRequirement(this);\n          \n          \n            \n                        final Context c = createContext();", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457645085", "createdAt": "2020-07-20T19:35:40Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -143,6 +268,7 @@ protected boolean runPreCheckout() {\n             return new Environment() {};\n         } else {\n             final Context c = new Context();\n+            c.setWorkspaceRequirement(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1d10ecbbed1343b9b604557405f95b8b2e7f632"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NjcxNA==", "bodyText": "Note: not actually necessary. Not sure if there is some style guide saying to use this. when not necessary to disambiguate but merely as a reminder that the reference is to a field.", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457646714", "createdAt": "2020-07-20T19:38:49Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -172,7 +299,7 @@ protected boolean runPreCheckout() {\n         }\n         @Override public boolean tearDown(AbstractBuild build, BuildListener listener) throws IOException, InterruptedException {\n             if (c.disposer != null) {\n-                c.disposer.tearDown(build, build.getWorkspace(), launcher, listener);\n+                c.disposer.tearDown(build, build.getWorkspace(), this.launcher, listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1d10ecbbed1343b9b604557405f95b8b2e7f632"}, "originalPosition": 205}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxOTg3MDA2", "url": "https://github.com/jenkinsci/jenkins/pull/4829#pullrequestreview-451987006", "createdAt": "2020-07-20T21:55:56Z", "commit": {"oid": "f1d10ecbbed1343b9b604557405f95b8b2e7f632"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMTo1NTo1NlrOG0gprQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMTo1NTo1NlrOG0gprQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxNDA5Mw==", "bodyText": "Side note: I thought these were supposed to be updated as part of the release process? This particular method was added in 2.241 I think.", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457714093", "createdAt": "2020-07-20T21:55:56Z", "author": {"login": "Zastai"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -93,28 +93,76 @@ default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNu\n \n     /**\n      * Run this step.\n+     * <p>\n+     * This method <strong>must</strong> be overridden when this step requires a workspace context. If such a context is\n+     * <em>not</em> required, it does not need to be overridden; it will then forward to\n+     * {@link #perform(Run, EnvVars, TaskListener)}.\n+     *\n      * @param run a build this is running as a part of\n      * @param workspace a workspace to use for any file operations\n      * @param env environment variables applicable to this step\n      * @param launcher a way to start processes\n      * @param listener a place to send output\n+     * @throws AbstractMethodError if this step requires a workspace context and neither this method nor {@link #perform(Run, FilePath, Launcher, TaskListener)} is overridden\n      * @throws InterruptedException if the step is interrupted\n      * @throws IOException if something goes wrong; use {@link AbortException} for a polite error\n      * @since TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1d10ecbbed1343b9b604557405f95b8b2e7f632"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff8dfbfd84276f310f945e23462695873c74efc0", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/ff8dfbfd84276f310f945e23462695873c74efc0", "committedDate": "2020-07-20T22:03:13Z", "message": "Tweak JavaDoc as suggested by @jglick\n\nThis also removes some unnecessary diffs (one `this.` qualifier), and\none automated import ordering."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec5a6df2c67b362e48e014509beb36864f3e3987", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/ec5a6df2c67b362e48e014509beb36864f3e3987", "committedDate": "2020-07-20T22:24:40Z", "message": "Adjust wrapper context creation\n\nAs suggested by @jglick; a Context is now canonically created via\nSimpleBuildWrapper.createContext(), which will tell the context\nwhether or not there is a workspace requirement (which is then\npassed on to any Disposer as before)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMDAzNDQy", "url": "https://github.com/jenkinsci/jenkins/pull/4829#pullrequestreview-452003442", "createdAt": "2020-07-20T22:30:16Z", "commit": {"oid": "ec5a6df2c67b362e48e014509beb36864f3e3987"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0b1239d14839785bc9da043a985932b010538d1", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/a0b1239d14839785bc9da043a985932b010538d1", "committedDate": "2020-07-22T17:55:17Z", "message": "Merge branch 'master' into JENKINS-46175B"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ba996d437dd6ad21b6ea30c7e75284622c6544a", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/9ba996d437dd6ad21b6ea30c7e75284622c6544a", "committedDate": "2020-07-25T12:49:29Z", "message": "Merge branch 'master' into JENKINS-46175B"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "853c8f053a5d406d68a67d8349b48f61564ecf66", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/853c8f053a5d406d68a67d8349b48f61564ecf66", "committedDate": "2020-07-27T21:02:11Z", "message": "Merge branch 'master' into JENKINS-46175B"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "080505b2a8f680fe92115c89fdc93deb5cc9e3f1", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/080505b2a8f680fe92115c89fdc93deb5cc9e3f1", "committedDate": "2020-08-08T23:28:31Z", "message": "Merge branch 'master' into JENKINS-46175B"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ca33f30706d40151ae5aad85e1af33ad7c9805c", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/3ca33f30706d40151ae5aad85e1af33ad7c9805c", "committedDate": "2020-08-23T13:49:36Z", "message": "Merge branch 'master' into JENKINS-46175B"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f38c7e25bfca2937560d1094b2963d254852ff9", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/1f38c7e25bfca2937560d1094b2963d254852ff9", "committedDate": "2020-08-24T17:53:02Z", "message": "Merge branch 'master' into JENKINS-46175B"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a271a2a0bc577b45bacacedf4e2f866813705071", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/a271a2a0bc577b45bacacedf4e2f866813705071", "committedDate": "2020-09-19T16:54:46Z", "message": "Merge branch 'master' into JENKINS-46175B"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMDU0Mzk2", "url": "https://github.com/jenkinsci/jenkins/pull/4829#pullrequestreview-492054396", "createdAt": "2020-09-19T18:27:16Z", "commit": {"oid": "a271a2a0bc577b45bacacedf4e2f866813705071"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2102, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}