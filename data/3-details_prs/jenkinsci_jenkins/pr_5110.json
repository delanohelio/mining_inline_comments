{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM4OTM0NDEz", "number": 5110, "title": "[JENKINS-64423, JENKINS-46618] Resolve all core caused startup Illegal reflective access warnings", "bodyText": "See JENKINS-64423.\nSee JENKINS-46618.\nhttps://groups.google.com/g/jenkinsci-dev/c/nEw4TLDcZLw/m/_7LVO0GnAAAJ\nThere's still illegal reflective access warnings on startup that require library upgrades (or xstream might need core / plugin tweaks):\n\nGuice to 5.0 (only in beta atm)\nGroovy to 3.x\nsome xstream ones only triggered in certain circumstances, haven't managed to trigger it in a debugger atm \ud83d\ude22\n\n\nxstream\nWARNING: Illegal reflective access by com.thoughtworks.xstream.converters.reflection.FieldDictionary (file:/Users/timja/.jenkins/war/WEB-INF/lib/xstream-1.4.15.jar) to field java.util.AbstractCollection.MAX_ARRAY_SIZE\nWARNING: Illegal reflective access by com.thoughtworks.xstream.converters.reflection.FieldDictionary (file:/Users/timja/.jenkins/war/WEB-INF/lib/xstream-1.4.15.jar) to field java.util.AbstractList.modCount\nWARNING: Illegal reflective access by com.thoughtworks.xstream.converters.reflection.FieldDictionary (file:/Users/timja/.jenkins/war/WEB-INF/lib/xstream-1.4.15.jar) to field java.util.Collections$EmptyList.serialVersionUID\nWARNING: Illegal reflective access by com.thoughtworks.xstream.core.util.SerializationMembers (file:/Users/timja/.jenkins/war/WEB-INF/lib/xstream-1.4.15.jar) to method java.util.Collections$EmptyList.readResolve()\nWARNING: Illegal reflective access by com.thoughtworks.xstream.converters.reflection.FieldDictionary (file:/Users/timja/.jenkins/war/WEB-INF/lib/xstream-1.4.15.jar) to field java.util.AbstractCollection.MAX_ARRAY_SIZE\nWARNING: Illegal reflective access by com.thoughtworks.xstream.converters.reflection.FieldDictionary (file:/Users/timja/.jenkins/war/WEB-INF/lib/xstream-1.4.15.jar) to field java.util.AbstractList.modCount\nWARNING: Illegal reflective access by com.thoughtworks.xstream.converters.reflection.FieldDictionary (file:/Users/timja/.jenkins/war/WEB-INF/lib/xstream-1.4.15.jar) to field java.util.AbstractCollection.MAX_ARRAY_SIZE\nWARNING: Illegal reflective access by com.thoughtworks.xstream.converters.reflection.FieldDictionary (file:/Users/timja/.jenkins/war/WEB-INF/lib/xstream-1.4.15.jar) to field java.util.AbstractList.modCount\nWARNING: Illegal reflective access by com.thoughtworks.xstream.converters.reflection.FieldDictionary (file:/Users/timja/.jenkins/war/WEB-INF/lib/xstream-1.4.15.jar) to field java.util.Collections$EmptyList.serialVersionUID\nWARNING: Illegal reflective access by com.thoughtworks.xstream.core.util.SerializationMembers (file:/Users/timja/.jenkins/war/WEB-INF/lib/xstream-1.4.15.jar) to method java.util.Collections$EmptyList.readResolve()\n\n\n\nProposed changelog entries\n\nEntry 1: Issue, Human-readable Text\n...\n\n\nProposed upgrade guidelines\nN/A\nSubmitter checklist\n\n (If applicable) Jira issue is well described\n Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). Examples\n\nFill-in the Proposed changelog entries section only if there are breaking changes or other changes which may require extra steps from users during the upgrade\n\n\n Appropriate autotests or explanation to why this change has no tests\n For dependency updates: links to external changelogs and, if possible, full diffs\n\n\nDesired reviewers\n@mention\n\nMaintainer checklist\nBefore the changes are marked as ready-for-merge:\n\n There are at least 2 approvals for the pull request and no outstanding requests for change\n Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n Changelog entries in the PR title and/or Proposed changelog entries are correct\n Proper changelog labels are set so that the changelog can be generated automatically\n If the change needs additional upgrade steps from users, upgrade-guide-needed label is set and there is a Proposed upgrade guidelines section in the PR title. (example)\n If it would make sense to backport the change to LTS, a Jira issue must exist, be a Bug or Improvement, and be labeled as lts-candidate to be considered (see query).", "createdAt": "2020-12-13T11:16:35Z", "url": "https://github.com/jenkinsci/jenkins/pull/5110", "merged": true, "mergeCommit": {"oid": "ae88291731ddeb0e77c1944d997c4d60a77bfd87"}, "closed": true, "closedAt": "2021-01-06T08:04:40Z", "author": {"login": "timja"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlvLHpgH2gAyNTM4OTM0NDEzOmMxZDIwNmJlZDJjYmM5NzhjNjI2ZmFkZWIyYmUyNmI3ODRlZjU1Njg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtHNclgFqTU2MTYxOTgyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/c1d206bed2cbc978c626fadeb2be26b784ef5568", "committedDate": "2020-12-13T11:10:07Z", "message": "Resolve all core caused Illegal reflective access warnings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTA5ODE0", "url": "https://github.com/jenkinsci/jenkins/pull/5110#pullrequestreview-550909814", "createdAt": "2020-12-13T11:18:25Z", "commit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxMToxODoyNVrOIEzK-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxMToyMDoxOFrOIEzMLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzYwOQ==", "bodyText": "wondering if this ClassLoaderReflectionToolkit could be removed, assuming everything goes through AntWithFindResourceClassLoader then this line never gets called.\n(from my minimal plugin set in my test Jenkins this assumption is always true)\nany thoughts? this comment applies throughout the PR", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r541903609", "createdAt": "2020-12-13T11:18:25Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -629,8 +629,17 @@ private void updateTransientDependencies() {\n             if (PluginManager.FAST_LOOKUP) {\n                 for (PluginWrapper pw : getTransitiveDependencies()) {\n                     try {\n-                        Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);\n+                        Class<?> c;\n+                        if (pw.classLoader instanceof AntWithFindResourceClassLoader) {\n+                            c = ((AntWithFindResourceClassLoader) pw.classLoader).findLoadedClass2(name);\n+                        } else {\n+                            c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ==", "bodyText": "this call seems to just check if the class is null?\n\nIf I add a null check IDE tell's me that it's impossible for it to be null at this point.\nRemoving this check doesn't break any tests", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r541903759", "createdAt": "2020-12-13T11:19:25Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/ExtensionFinder.java", "diffHunk": "@@ -486,12 +486,6 @@ private void resolve(Class<?> c, Set<Class<?>> encountered) {\n                     return;\n                 }\n                 try {\n-                    ClassLoader ecl = c.getClassLoader();\n-                    if (ecl != null) { // Not bootstrap classloader\n-                        Method m = ClassLoader.class.getDeclaredMethod(\"resolveClass\", Class.class);\n-                        m.setAccessible(true);\n-                        m.invoke(ecl, c);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzkxOA==", "bodyText": "changes in this class are mostly lazy initialisation, to stop warnings if the code isn't used, possible this class could be deprecated as I can't see anything that requires it, but I've left fallbacks in that call this code for extra safety", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r541903918", "createdAt": "2020-12-13T11:20:18Z", "author": {"login": "timja"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -14,30 +14,7 @@\n @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n public class ClassLoaderReflectionToolkit {\n \n-    private static final Method FIND_CLASS, FIND_LOADED_CLASS, FIND_RESOURCE, FIND_RESOURCES, GET_CLASS_LOADING_LOCK;\n-\n-    static {\n-        try {\n-            FIND_CLASS = ClassLoader.class.getDeclaredMethod(\"findClass\",String.class);\n-            FIND_CLASS.setAccessible(true);\n-            FIND_LOADED_CLASS = ClassLoader.class.getDeclaredMethod(\"findLoadedClass\",String.class);\n-            FIND_LOADED_CLASS.setAccessible(true);\n-            FIND_RESOURCE = ClassLoader.class.getDeclaredMethod(\"findResource\",String.class);\n-            FIND_RESOURCE.setAccessible(true);\n-            FIND_RESOURCES = ClassLoader.class.getDeclaredMethod(\"findResources\",String.class);\n-            FIND_RESOURCES.setAccessible(true);\n-        } catch (NoSuchMethodException e) {\n-            throw new AssertionError(e);\n-        }\n-        Method gCLL;\n-        try {\n-            gCLL = ClassLoader.class.getDeclaredMethod(\"getClassLoadingLock\", String.class);\n-            gCLL.setAccessible(true);\n-        } catch (NoSuchMethodException x) {\n-            throw new AssertionError(x);\n-        }\n-        GET_CLASS_LOADING_LOCK = gCLL;\n-    }\n+    private static Method FIND_CLASS, FIND_LOADED_CLASS, FIND_RESOURCE, FIND_RESOURCES, GET_CLASS_LOADING_LOCK;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "555e516ea72e3319ea06caca0facb7740c1caf48", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/555e516ea72e3319ea06caca0facb7740c1caf48", "committedDate": "2020-12-13T15:53:41Z", "message": "cool, different classloader in tests =/"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNTAwOTAz", "url": "https://github.com/jenkinsci/jenkins/pull/5110#pullrequestreview-551500903", "createdAt": "2020-12-14T15:48:46Z", "commit": {"oid": "555e516ea72e3319ea06caca0facb7740c1caf48"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo0ODo0NlrOIFW_lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo1NToyMFrOIFXUeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MDUxOA==", "bodyText": "Not sure. May apply in JenkinsRule under exotic conditions?", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542490518", "createdAt": "2020-12-14T15:48:46Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -629,8 +629,17 @@ private void updateTransientDependencies() {\n             if (PluginManager.FAST_LOOKUP) {\n                 for (PluginWrapper pw : getTransitiveDependencies()) {\n                     try {\n-                        Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);\n+                        Class<?> c;\n+                        if (pw.classLoader instanceof AntWithFindResourceClassLoader) {\n+                            c = ((AntWithFindResourceClassLoader) pw.classLoader).findLoadedClass2(name);\n+                        } else {\n+                            c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzYwOQ=="}, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MTgyNA==", "bodyText": "To avoid duplication, maybe revert all these changes at call sites, and encode the desired nonreflective behavior into ClassLoaderReflectionToolkit? (For clarity, could introduce an interface implemented by AntWithFindResourceClassLoader which defines the required methods.)", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542491824", "createdAt": "2020-12-14T15:50:19Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -2152,15 +2154,24 @@ public void addNamedClass(String className, Class c) {\n             if (FAST_LOOKUP) {\n                 for (PluginWrapper p : activePlugins) {\n                     try {\n-                        Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(p.classLoader, name);\n+                        Class<?> c;\n+                        if (p.classLoader instanceof AntWithFindResourceClassLoader) {\n+                            c = ((AntWithFindResourceClassLoader) p.classLoader).findLoadedClass2(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555e516ea72e3319ea06caca0facb7740c1caf48"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NDE4Nw==", "bodyText": "Not sure what version of Java you are looking at. In Java 8\nprotected final void resolveClass(Class<?> c) {\n    resolveClass0(c);\n}\n\nprivate native void resolveClass0(Class<?> c);", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542494187", "createdAt": "2020-12-14T15:53:21Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/ExtensionFinder.java", "diffHunk": "@@ -486,12 +486,6 @@ private void resolve(Class<?> c, Set<Class<?>> encountered) {\n                     return;\n                 }\n                 try {\n-                    ClassLoader ecl = c.getClassLoader();\n-                    if (ecl != null) { // Not bootstrap classloader\n-                        Method m = ClassLoader.class.getDeclaredMethod(\"resolveClass\", Class.class);\n-                        m.setAccessible(true);\n-                        m.invoke(ecl, c);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ=="}, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NTg2Ng==", "bodyText": "Not thread-safe. You could either make this and similar methods synchonized, or use a private static nested holder class with final variables to implement lazy initialization (which would make for a simpler patch overall I guess).", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542495866", "createdAt": "2020-12-14T15:55:20Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -59,52 +36,121 @@\n     }\n \n     private static Object getClassLoadingLock(ClassLoader cl, String name) {\n+        initClassLoadingLock();\n+\n         return invoke(GET_CLASS_LOADING_LOCK, RuntimeException.class, cl, name);\n     }\n \n+    private static void initClassLoadingLock() {\n+        if (GET_CLASS_LOADING_LOCK == null) {\n+            Method gCLL;\n+            try {\n+                gCLL = ClassLoader.class.getDeclaredMethod(\"getClassLoadingLock\", String.class);\n+                gCLL.setAccessible(true);\n+            } catch (NoSuchMethodException x) {\n+                throw new AssertionError(x);\n+            }\n+            GET_CLASS_LOADING_LOCK = gCLL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555e516ea72e3319ea06caca0facb7740c1caf48"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10d11587fb2977cbe6b9e132edcbdf45792559f9", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/10d11587fb2977cbe6b9e132edcbdf45792559f9", "committedDate": "2020-12-22T23:50:37Z", "message": "Initial review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a700dea60212b6fbec5c87068672f98b472c3a72", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/a700dea60212b6fbec5c87068672f98b472c3a72", "committedDate": "2020-12-22T23:50:53Z", "message": "Merge branch 'master' into illegal-access-warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/20a34b34d78a8ee57b371c01e247dca3742a94ea", "committedDate": "2020-12-23T08:40:27Z", "message": "Review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMTk0Mjcz", "url": "https://github.com/jenkinsci/jenkins/pull/5110#pullrequestreview-561194273", "createdAt": "2021-01-04T17:10:46Z", "commit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "state": "APPROVED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoxMDo0NlrOIN5zKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzo0ODo0M1rOIN7A_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0OTM4NA==", "bodyText": "Prefer to revert unnecessary hunks to keep the diff minimal.", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551449384", "createdAt": "2021-01-04T17:10:46Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -630,7 +630,9 @@ private void updateTransientDependencies() {\n                 for (PluginWrapper pw : getTransitiveDependencies()) {\n                     try {\n                         Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);\n-                        if (c!=null)    return c;\n+                        if (c!=null) {\n+                            return c;\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0OTczNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                URL url = ClassLoaderReflectionToolkit._findResource(pw.classLoader, name);;\n          \n          \n            \n                                URL url = ClassLoaderReflectionToolkit._findResource(pw.classLoader, name);\n          \n      \n    \n    \n  \n\nand suggest reverting entire hunk anyway", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551449737", "createdAt": "2021-01-04T17:11:25Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -681,10 +684,10 @@ private void updateTransientDependencies() {\n         @Override\n         protected URL findResource(String name) {\n             if (PluginManager.FAST_LOOKUP) {\n-                    for (PluginWrapper pw : getTransitiveDependencies()) {\n-                        URL url = ClassLoaderReflectionToolkit._findResource(pw.classLoader, name);\n-                        if (url!=null)    return url;\n-                    }\n+                for (PluginWrapper pw : getTransitiveDependencies()) {\n+                    URL url = ClassLoaderReflectionToolkit._findResource(pw.classLoader, name);;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1MzA1OQ==", "bodyText": "In http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/ jdk/src/share/native/java/lang/ClassLoader.c as of jdk8u282-b07 has\nJNIEXPORT void JNICALL\nJava_java_lang_ClassLoader_resolveClass0(JNIEnv *env, jobject this,\n                                         jclass cls)\n{\n    if (cls == NULL) {\n        JNU_ThrowNullPointerException(env, 0);\n        return;\n    }\n\n    JVM_ResolveClass(env, cls);\n}\nwhich is defined in hotspot/src/share/vm/prims/jvm.cpp as\nJVM_ENTRY(void, JVM_ResolveClass(JNIEnv* env, jclass cls))\n  JVMWrapper(\"JVM_ResolveClass\");\n  if (PrintJVMWarnings) warning(\"JVM_ResolveClass not implemented\");\nJVM_END\nand this code does not appear to have been edited since at least 2007! I suppose the Javadoc remains because another JVM could in principle implement this, but seeing as this was just some old heuristic to work around alleged Guice problems, I concur that this is safe to remove.", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551453059", "createdAt": "2021-01-04T17:17:16Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/ExtensionFinder.java", "diffHunk": "@@ -486,12 +486,6 @@ private void resolve(Class<?> c, Set<Class<?>> encountered) {\n                     return;\n                 }\n                 try {\n-                    ClassLoader ecl = c.getClassLoader();\n-                    if (ecl != null) { // Not bootstrap classloader\n-                        Method m = ClassLoader.class.getDeclaredMethod(\"resolveClass\", Class.class);\n-                        m.setAccessible(true);\n-                        m.invoke(ecl, c);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ=="}, "originalCommit": {"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NTM4MQ==", "bodyText": "revert hunks", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551455381", "createdAt": "2021-01-04T17:21:32Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -2189,8 +2189,9 @@ protected URL findResource(String name) {\n             if (FAST_LOOKUP) {\n                     for (PluginWrapper p : activePlugins) {\n                         URL url = ClassLoaderReflectionToolkit._findResource(p.classLoader, name);\n-                        if(url!=null)\n+                        if (url != null) {\n                             return url;\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NTQ4Mw==", "bodyText": "could revert", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551455483", "createdAt": "2021-01-04T17:21:44Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -2207,7 +2208,9 @@ protected URL findResource(String name) {\n             List<URL> resources = new ArrayList<>();\n             if (FAST_LOOKUP) {\n                     for (PluginWrapper p : activePlugins) {\n-                        resources.addAll(Collections.list(ClassLoaderReflectionToolkit._findResources(p.classLoader, name)));\n+                        Enumeration<URL> urls = ClassLoaderReflectionToolkit._findResources(p.classLoader, name);\n+\n+                        resources.addAll(Collections.list(urls));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NTc3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *\n          \n          \n            \n             * <p>", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551455771", "createdAt": "2021-01-04T17:22:17Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NTgxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *\n          \n          \n            \n             * <p>", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551455819", "createdAt": "2021-01-04T17:22:23Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * Then falls back to accessing the {@link ClassLoader} methods.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NTg1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *\n          \n          \n            \n             * <p>", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551455856", "createdAt": "2021-01-04T17:22:28Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * Then falls back to accessing the {@link ClassLoader} methods.\n+ *\n+ * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NjY4Nw==", "bodyText": "Is this supposed to be a class name? If so, use @link or (if 9+) @code. Or some other code name? @code. Otherwise, avoid CamelCase.", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551456687", "createdAt": "2021-01-04T17:23:57Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NzA5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,\n          \n          \n            \n             * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection:", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551457095", "createdAt": "2021-01-04T17:24:48Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * Then falls back to accessing the {@link ClassLoader} methods.\n+ *\n+ * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n+ *\n+ * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NzIxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * the JenkinsRule tests use a different classloader, once that is made consistent with production Jenkins we can\n          \n          \n            \n             * the {@code JenkinsRule} tests use a different classloader, but once that is made consistent with production Jenkins we can", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551457216", "createdAt": "2021-01-04T17:25:03Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * Then falls back to accessing the {@link ClassLoader} methods.\n+ *\n+ * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n+ *\n+ * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,\n+ * the JenkinsRule tests use a different classloader, once that is made consistent with production Jenkins we can", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NzQyMg==", "bodyText": "(also prefer one sentence or major phrase per line, as in AsciiDoc)", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551457422", "createdAt": "2021-01-04T17:25:23Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * Then falls back to accessing the {@link ClassLoader} methods.\n+ *\n+ * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n+ *\n+ * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,\n+ * the JenkinsRule tests use a different classloader, once that is made consistent with production Jenkins we can\n+ * re-evaluate the fallback code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2ODY4Nw==", "bodyText": "Wonder why these are not using invoke.", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551468687", "createdAt": "2021-01-04T17:47:33Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -115,7 +201,7 @@ public Class findLoadedClass(ClassLoader cl, String name) throws InvocationTarge\n     @Deprecated\n     public Class findClass(ClassLoader cl, String name) throws InvocationTargetException {\n         try {\n-            return (Class)FIND_CLASS.invoke(cl,name);\n+            return (Class)FindClass.FIND_CLASS.invoke(cl,name);\n         } catch (IllegalAccessException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2ODc5Mg==", "bodyText": "revert", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551468792", "createdAt": "2021-01-04T17:47:48Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/model/AssetManager.java", "diffHunk": "@@ -83,41 +83,26 @@ public void doDynamic(StaplerRequest req, StaplerResponse rsp) throws IOExceptio\n             return null;\n         }\n \n-        try {\n-            if (path.contains(\"..\")) // crude avoidance of directory traversal attack\n-                throw new IllegalArgumentException(path);\n+        if (path.contains(\"..\")) // crude avoidance of directory traversal attack\n+            throw new IllegalArgumentException(path);\n \n-            String name;\n-            if (path.charAt(0) == '/') {\n-                name = \"assets\" + path;\n-            } else {\n-                name = \"assets/\" + path;\n-            }\n+        String name;\n+        if (path.charAt(0) == '/') {\n+            name = \"assets\" + path;\n+        } else {\n+            name = \"assets/\" + path;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2OTMxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return super.findLoadedClass(name);\n          \n          \n            \n                    return findLoadedClass(name);", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551469311", "createdAt": "2021-01-04T17:48:43Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/util/AntWithFindResourceClassLoader.java", "diffHunk": "@@ -37,10 +37,25 @@ public void close() throws IOException {\n     }\n \n     @Override\n-    protected URL findResource(String name) {\n+    public URL findResource(String name) {\n         // try and load from this loader if the parent either didn't find\n         // it or wasn't consulted.\n         return getUrl(pathComponents, name);\n     }\n \n+    /**\n+     * Public version of {@link ClassLoader#findLoadedClass(String)}\n+     */\n+    public Class<?> findLoadedClass2(String name) {\n+        return super.findLoadedClass(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74627481d7811f5c50e036e7ad7e01df9703943d", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/74627481d7811f5c50e036e7ad7e01df9703943d", "committedDate": "2021-01-04T19:58:19Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Jesse Glick <jglick@cloudbees.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc6525a7be293d27ebefa649a23606789c50b67a", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/cc6525a7be293d27ebefa649a23606789c50b67a", "committedDate": "2021-01-04T20:01:22Z", "message": "revert core/src/main/java/hudson/ClassicPluginStrategy.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecc4d4bcbc7bdb536726d655877cc842dbcbec44", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/ecc4d4bcbc7bdb536726d655877cc842dbcbec44", "committedDate": "2021-01-04T20:02:06Z", "message": "revert core/src/main/java/hudson/PluginManager.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ff65a4765fbfecaccc5874d826174db08258229", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/7ff65a4765fbfecaccc5874d826174db08258229", "committedDate": "2021-01-04T20:05:10Z", "message": "Tweak javadoc formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNDgyNDQ1", "url": "https://github.com/jenkinsci/jenkins/pull/5110#pullrequestreview-561482445", "createdAt": "2021-01-05T02:51:20Z", "commit": {"oid": "7ff65a4765fbfecaccc5874d826174db08258229"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNjE5ODI0", "url": "https://github.com/jenkinsci/jenkins/pull/5110#pullrequestreview-561619824", "createdAt": "2021-01-05T09:07:51Z", "commit": {"oid": "7ff65a4765fbfecaccc5874d826174db08258229"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1905, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}