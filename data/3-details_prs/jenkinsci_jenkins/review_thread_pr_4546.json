{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NDM1MjY2", "number": 4546, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo0NzozMVrODllKFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzoyMzoxOVrOEEZE4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzMyNjk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/ManagementLink.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo0NzozMVrOFyjk_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjo0MzoxMFrOFym3Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NjAyOQ==", "bodyText": "allowing older plugins to do this means we loose the possibility of using an enum for ever.\nhow about a protected method getCategoryString() that subclasses can implement that returns the string and this method calls that, or document some reflection in this javadoc that they can use?\n/**\n * @deprecated only use this if you want to defined a category for a managementLink and not depend on a newer core.\n */\nprotected String getCategoryString() {\n  return Category.UNCATEGORIZED.toString();\n}\n\npublic @nonnull String getCategory() {\n   try { \n       return Category.valueOf(getCategoryString());\n    } catch (IllegalArgumentException | NullPointerExcepton ex) {\n        Logger.log(Level.WARNING, \"invalid category {0} for class {1}\", new Object[]{getCategoryString() , this.getClass().getName()});\n    }\n        return Category.UNCATEGORIZED;\n}\nor\n/**\n * Category for management link.\n * to define a category without depending on a newer core version use the following code.\n * {@code  /* left as an excersize if deemed this is a useful way forward */ }\n */\npublic @nonnull String getCategory() {\n   return Category.UNCATEGORIZED;;\n}", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388556029", "createdAt": "2020-03-05T20:47:31Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MDQyNA==", "bodyText": "I like this. We can even @Restricted(NoExternalUse.class) the getCategoryName() to ensure migration when updating core dependencies.", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388580424", "createdAt": "2020-03-05T21:37:07Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NjAyOQ=="}, "originalCommit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5ODI5Mw==", "bodyText": "\u2026 except it doesn't seem to work for overrides.", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388598293", "createdAt": "2020-03-05T22:13:41Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NjAyOQ=="}, "originalCommit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwOTg1MA==", "bodyText": "well it is better than not having anything....", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388609850", "createdAt": "2020-03-05T22:43:10Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NjAyOQ=="}, "originalCommit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzMyODQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/ManagementLink.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo0ODowMFrOFyjl6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMToyNzoyOVrOFykx4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NjI2Ng==", "bodyText": "implying you can add more - which means the string return above may return something that is not even in the enum from a \"bad\" plugin..", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388556266", "createdAt": "2020-03-05T20:48:00Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull String getCategory() {\n+        return Category.UNCATEGORIZED.toString();\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3NTcxMw==", "bodyText": "may return something that is not even in the enum from a \"bad\" plugin..\n\nHence https://github.com/jenkinsci/jenkins/pull/4546/files#diff-9e24c3bccc9e921f1a5cc216abc25d03R4722-R4725", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388575713", "createdAt": "2020-03-05T21:27:29Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull String getCategory() {\n+        return Category.UNCATEGORIZED.toString();\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NjI2Ng=="}, "originalCommit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzM0NjM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/ManagementLink.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo1Mjo1NFrOFyjwQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTozNToyNFrOFylAyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1ODkxNA==", "bodyText": "just inline this in the enum?\n    public enum Category {\n        CONFIGURATION(Messages._ManagementLink_Category_CONFIGURATION()),\n        SECURITY(Messages._ManagementLink_Category_SECURITY());\n        //.....\n        \n        private Localizable label;\n\n        Category(Localizable label) {\n           this.label = label);\n        }\n        public Sting getLabel() {\n            return label.toString();\n        }\n}", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388558914", "createdAt": "2020-03-05T20:52:54Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull String getCategory() {\n+        return Category.UNCATEGORIZED.toString();\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.\n+     *\n+     * @since TODO\n+     */\n+    public enum Category {\n+        CONFIGURATION,\n+        SECURITY,\n+        STATUS,\n+        TROUBLESHOOTING,\n+        TOOLS,\n+        MISC,\n+        UNCATEGORIZED;\n+\n+        public @Nonnull String getLabel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3NTU0Ng==", "bodyText": "Seemed redundant. OTOH, benefit of not using reflection\u2026", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388575546", "createdAt": "2020-03-05T21:27:07Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull String getCategory() {\n+        return Category.UNCATEGORIZED.toString();\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.\n+     *\n+     * @since TODO\n+     */\n+    public enum Category {\n+        CONFIGURATION,\n+        SECURITY,\n+        STATUS,\n+        TROUBLESHOOTING,\n+        TOOLS,\n+        MISC,\n+        UNCATEGORIZED;\n+\n+        public @Nonnull String getLabel() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1ODkxNA=="}, "originalCommit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3OTUzMQ==", "bodyText": "benefit of not using reflection\n\nthat was what I was trying to avoid :-)", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388579531", "createdAt": "2020-03-05T21:35:24Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull String getCategory() {\n+        return Category.UNCATEGORIZED.toString();\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.\n+     *\n+     * @since TODO\n+     */\n+    public enum Category {\n+        CONFIGURATION,\n+        SECURITY,\n+        STATUS,\n+        TROUBLESHOOTING,\n+        TOOLS,\n+        MISC,\n+        UNCATEGORIZED;\n+\n+        public @Nonnull String getLabel() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1ODkxNA=="}, "originalCommit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzM4NzM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/ManagementLink.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTowNjoxMlrOFykJgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo0MDoxNlrOFylJ0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTM3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    MISC,\n          \n          \n            \n                    MISCELLANEOUS,", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388565377", "createdAt": "2020-03-05T21:06:12Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull String getCategory() {\n+        return Category.UNCATEGORIZED.toString();\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.\n+     *\n+     * @since TODO\n+     */\n+    public enum Category {\n+        CONFIGURATION,\n+        SECURITY,\n+        STATUS,\n+        TROUBLESHOOTING,\n+        TOOLS,\n+        MISC,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3NTg2NA==", "bodyText": "Invites typos in plugins.", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388575864", "createdAt": "2020-03-05T21:27:47Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull String getCategory() {\n+        return Category.UNCATEGORIZED.toString();\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.\n+     *\n+     * @since TODO\n+     */\n+    public enum Category {\n+        CONFIGURATION,\n+        SECURITY,\n+        STATUS,\n+        TROUBLESHOOTING,\n+        TOOLS,\n+        MISC,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTM3Nw=="}, "originalCommit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3OTE2MA==", "bodyText": "you an argue the same for CONFIGURATION vs CONFIG?", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388579160", "createdAt": "2020-03-05T21:34:41Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull String getCategory() {\n+        return Category.UNCATEGORIZED.toString();\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.\n+     *\n+     * @since TODO\n+     */\n+    public enum Category {\n+        CONFIGURATION,\n+        SECURITY,\n+        STATUS,\n+        TROUBLESHOOTING,\n+        TOOLS,\n+        MISC,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTM3Nw=="}, "originalCommit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MTg0MQ==", "bodyText": "No, much more common term, especially in the group I expect to type this in successfully.", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388581841", "createdAt": "2020-03-05T21:40:16Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull String getCategory() {\n+        return Category.UNCATEGORIZED.toString();\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.\n+     *\n+     * @since TODO\n+     */\n+    public enum Category {\n+        CONFIGURATION,\n+        SECURITY,\n+        STATUS,\n+        TROUBLESHOOTING,\n+        TOOLS,\n+        MISC,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTM3Nw=="}, "originalCommit": {"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzQ2NTA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/model/Jenkins.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTozMToyNFrOFyk5hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTozMToyNFrOFyk5hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3NzY3MQ==", "bodyText": "need to catch nullPointerException unless you switch to my proposed way (as there are no annotations for plugins not upgrading core and they could heaven forbid return null without any compiler warnng)", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388577671", "createdAt": "2020-03-05T21:31:24Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/jenkins/model/Jenkins.java", "diffHunk": "@@ -4705,6 +4705,29 @@ public DependencyGraph getDependencyGraph() {\n     public List<ManagementLink> getManagementLinks() {\n         return ManagementLink.all();\n     }\n+\n+    // for Jelly\n+    @Restricted(NoExternalUse.class)\n+    public Map<ManagementLink.Category, List<ManagementLink>> getCategorizedManagementLinks() {\n+        Map<ManagementLink.Category, List<ManagementLink>> byCategory = new TreeMap<>();\n+        for (ManagementLink link : ManagementLink.all()) {\n+            if (link.getIconFileName() == null) {\n+                continue;\n+            }\n+            if (!Jenkins.get().hasPermission(link.getRequiredPermission())) {\n+                continue;\n+            }\n+            String categoryName = link.getCategory();\n+            ManagementLink.Category category;\n+            try {\n+                category = ManagementLink.Category.valueOf(categoryName);\n+            } catch (IllegalArgumentException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c8165285ec0fe352da6c71acda1321e8d9f08b8"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzYyMjA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/ManagementLink.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjoyMTozMFrOFymWyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzowNDoyOVrOFynWfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMTU0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (RuntimeException e) {\n          \n          \n            \n                    } catch (RuntimeException | NullPointerException e) {\n          \n      \n    \n    \n  \n\ngiven the plugins are not overriding getCategoryName as far as javac is concerned at compile time. (better than blowing up...)", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388601546", "createdAt": "2020-03-05T22:21:30Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +137,58 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works\n+    protected @Nonnull String getCategoryName() {\n+        return \"UNCATEGORIZED\";\n+    }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull Category getCategory() {\n+        try {\n+            return Category.valueOf(getCategoryName());\n+        } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxNzA4NQ==", "bodyText": "NullPointerException extends RuntimeException", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388617085", "createdAt": "2020-03-05T23:02:03Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +137,58 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works\n+    protected @Nonnull String getCategoryName() {\n+        return \"UNCATEGORIZED\";\n+    }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull Category getCategory() {\n+        try {\n+            return Category.valueOf(getCategoryName());\n+        } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMTU0Ng=="}, "originalCommit": {"oid": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxNzg1Mw==", "bodyText": "urg yeah.. thought you where catching IllegalArgumentException \ud83e\udd26\u200d\u2642", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388617853", "createdAt": "2020-03-05T23:04:29Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +137,58 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works\n+    protected @Nonnull String getCategoryName() {\n+        return \"UNCATEGORIZED\";\n+    }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull Category getCategory() {\n+        try {\n+            return Category.valueOf(getCategoryName());\n+        } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMTU0Ng=="}, "originalCommit": {"oid": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTM2MzQ3OnYy", "diffSide": "RIGHT", "path": "war/src/main/less/modules/manage-jenkins.less", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjowODoxNFrOFy2m-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjowODoxNFrOFy2m-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg2NzgzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // TODO: set padding", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388867835", "createdAt": "2020-03-06T12:08:14Z", "author": {"login": "fqueiruga"}, "path": "war/src/main/less/modules/manage-jenkins.less", "diffHunk": "@@ -0,0 +1,25 @@\n+.manage-page__row {\n+  display: block;\n+  display: flex;\n+  flex-wrap: wrap;\n+}\n+.manage-page__column {\n+  width: 100%;\n+  // TODO: set padding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTM2Mzg0OnYy", "diffSide": "RIGHT", "path": "war/src/main/less/modules/manage-jenkins.less", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjowODoyNFrOFy2nLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjowODoyNFrOFy2nLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg2Nzg4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // TODO: set margin bottom", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388867887", "createdAt": "2020-03-06T12:08:24Z", "author": {"login": "fqueiruga"}, "path": "war/src/main/less/modules/manage-jenkins.less", "diffHunk": "@@ -0,0 +1,25 @@\n+.manage-page__row {\n+  display: block;\n+  display: flex;\n+  flex-wrap: wrap;\n+}\n+.manage-page__column {\n+  width: 100%;\n+  // TODO: set padding\n+  // TODO: set margin bottom", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDA3NDE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/ManagementLink.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTo0NDoxMFrOFy9Vyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTo0ODo1NFrOFy9gMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3ODEyMw==", "bodyText": "does it work or not? \ud83d\ude04", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388978123", "createdAt": "2020-03-06T15:44:10Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +137,58 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d112c015de1663b31dd602631fa67547d3469d8d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3OTg1MA==", "bodyText": "It doesn't, but since it's a client-side bug in access-checker, it still makes sense to leave the annotation in. Perhaps this?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Restricted(NoExternalUse.class) // TODO I don't think this works\n          \n          \n            \n                @Restricted(NoExternalUse.class) // Doesn't work as of 2020-03 due to https://github.com/kohsuke/access-modifier/issues/21 but annotate anyway", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388979850", "createdAt": "2020-03-06T15:47:16Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +137,58 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3ODEyMw=="}, "originalCommit": {"oid": "d112c015de1663b31dd602631fa67547d3469d8d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk4MDc4Nw==", "bodyText": "ah ok, yeah perfect", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388980787", "createdAt": "2020-03-06T15:48:54Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +137,58 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3ODEyMw=="}, "originalCommit": {"oid": "d112c015de1663b31dd602631fa67547d3469d8d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzkxNDYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/jenkins/model/Jenkins/manage.jelly", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOToyMDoxMlrOFzfmPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOToyNDoyOFrOFzfuxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzOTM5MQ==", "bodyText": "Just to confirm, I'm assuming there can be no instance of showing a category without entries right? Is that why an emptiness check is not needed?", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r389539391", "createdAt": "2020-03-09T09:20:12Z", "author": {"login": "fqueiruga"}, "path": "core/src/main/resources/jenkins/model/Jenkins/manage.jelly", "diffHunk": "@@ -47,11 +47,13 @@ THE SOFTWARE.\n     <st:include page=\"downgrade.jelly\" />\n     </div>\n \n-    <j:forEach var=\"m\" items=\"${it.managementLinks}\">\n-      <l:hasPermission permission=\"${m.requiredPermission}\">\n+    <j:forEach var=\"category\" items=\"${it.categorizedManagementLinks.entrySet()}\">\n+      <h2>${category.key.label}</h2>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d112c015de1663b31dd602631fa67547d3469d8d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0MTU3Mg==", "bodyText": "Yes, the way I'm populating the map I'm iterating over prevents empty categories (which results in a bit of duplication when it comes to determining item visibility).", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r389541572", "createdAt": "2020-03-09T09:24:28Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/resources/jenkins/model/Jenkins/manage.jelly", "diffHunk": "@@ -47,11 +47,13 @@ THE SOFTWARE.\n     <st:include page=\"downgrade.jelly\" />\n     </div>\n \n-    <j:forEach var=\"m\" items=\"${it.managementLinks}\">\n-      <l:hasPermission permission=\"${m.requiredPermission}\">\n+    <j:forEach var=\"category\" items=\"${it.categorizedManagementLinks.entrySet()}\">\n+      <h2>${category.key.label}</h2>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzOTM5MQ=="}, "originalCommit": {"oid": "d112c015de1663b31dd602631fa67547d3469d8d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDQwNjA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/ManagementLink.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzoyMzoxOVrOGh_Clw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzozMzozNVrOGh_bWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4OTA0Nw==", "bodyText": "Now that I think about this, it seems like an oversight as GlobalConfiguration already had a category:\nhttps://github.com/jenkinsci/jenkins/blob/449c5aced523a6e66fe3d6a804e5dbfd5c5c67c6/core/src/main/java/jenkins/model/GlobalConfigurationCategory.java\ncc @basil", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r438289047", "createdAt": "2020-06-10T17:23:19Z", "author": {"login": "jetersen"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +137,58 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works\n+    protected @Nonnull String getCategoryName() {\n+        return \"UNCATEGORIZED\";\n+    }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull Category getCategory() {\n+        try {\n+            return Category.valueOf(getCategoryName());\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.WARNING, \"invalid category {0} for class {1}\", new Object[]{getCategoryName() , this.getClass().getName()});\n+            return Category.UNCATEGORIZED;\n+        }\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.\n+     *\n+     * @since TODO\n+     */\n+    public enum Category {\n+        CONFIGURATION(Messages._ManagementLink_Category_CONFIGURATION()),\n+        SECURITY(Messages._ManagementLink_Category_SECURITY()),\n+        STATUS(Messages._ManagementLink_Category_STATUS()),\n+        TROUBLESHOOTING(Messages._ManagementLink_Category_TROUBLESHOOTING()),\n+        TOOLS(Messages._ManagementLink_Category_TOOLS()),\n+        MISC(Messages._ManagementLink_Category_MISC()),\n+        UNCATEGORIZED(Messages._ManagementLink_Category_UNCATEGORIZED());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d112c015de1663b31dd602631fa67547d3469d8d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5MzAyMg==", "bodyText": "Great! It looks like these categories are relatively new (appearing first in Jenkins 2.226) and have not yet made it to an LTS release. Once my plugin's minimum required Jenkins version contains these new categories, I will start using them.", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r438293022", "createdAt": "2020-06-10T17:29:46Z", "author": {"login": "basil"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +137,58 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works\n+    protected @Nonnull String getCategoryName() {\n+        return \"UNCATEGORIZED\";\n+    }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull Category getCategory() {\n+        try {\n+            return Category.valueOf(getCategoryName());\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.WARNING, \"invalid category {0} for class {1}\", new Object[]{getCategoryName() , this.getClass().getName()});\n+            return Category.UNCATEGORIZED;\n+        }\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.\n+     *\n+     * @since TODO\n+     */\n+    public enum Category {\n+        CONFIGURATION(Messages._ManagementLink_Category_CONFIGURATION()),\n+        SECURITY(Messages._ManagementLink_Category_SECURITY()),\n+        STATUS(Messages._ManagementLink_Category_STATUS()),\n+        TROUBLESHOOTING(Messages._ManagementLink_Category_TROUBLESHOOTING()),\n+        TOOLS(Messages._ManagementLink_Category_TOOLS()),\n+        MISC(Messages._ManagementLink_Category_MISC()),\n+        UNCATEGORIZED(Messages._ManagementLink_Category_UNCATEGORIZED());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4OTA0Nw=="}, "originalCommit": {"oid": "d112c015de1663b31dd602631fa67547d3469d8d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5NTM4NQ==", "bodyText": "Sorry, I misunderstood. Indeed, I now see that I cannot use these categories because they are of type ManagementLink.Category rather than GlobalConfigurationCategory. Anyway, seems outside the scope of JENKINS-62445. If and when there is a working solution for plugin developers to follow regarding CasC categories, I will adopt it.", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r438295385", "createdAt": "2020-06-10T17:33:35Z", "author": {"login": "basil"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +137,58 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works\n+    protected @Nonnull String getCategoryName() {\n+        return \"UNCATEGORIZED\";\n+    }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull Category getCategory() {\n+        try {\n+            return Category.valueOf(getCategoryName());\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.WARNING, \"invalid category {0} for class {1}\", new Object[]{getCategoryName() , this.getClass().getName()});\n+            return Category.UNCATEGORIZED;\n+        }\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.\n+     *\n+     * @since TODO\n+     */\n+    public enum Category {\n+        CONFIGURATION(Messages._ManagementLink_Category_CONFIGURATION()),\n+        SECURITY(Messages._ManagementLink_Category_SECURITY()),\n+        STATUS(Messages._ManagementLink_Category_STATUS()),\n+        TROUBLESHOOTING(Messages._ManagementLink_Category_TROUBLESHOOTING()),\n+        TOOLS(Messages._ManagementLink_Category_TOOLS()),\n+        MISC(Messages._ManagementLink_Category_MISC()),\n+        UNCATEGORIZED(Messages._ManagementLink_Category_UNCATEGORIZED());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4OTA0Nw=="}, "originalCommit": {"oid": "d112c015de1663b31dd602631fa67547d3469d8d"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 582, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}