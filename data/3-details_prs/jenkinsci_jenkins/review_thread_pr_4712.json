{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNjEzOTI0", "number": 4712, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo1MzoyMVrOD5tPTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo1NToxM1rOD5yA3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODM2NjIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo1MzoyMVrOGRHwaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo1MzoyMVrOGRHwaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwNjA1OQ==", "bodyText": "Can be removed.", "url": "https://github.com/jenkinsci/jenkins/pull/4712#discussion_r420606059", "createdAt": "2020-05-06T07:53:21Z", "author": {"login": "varyvol"}, "path": "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvents.java", "diffHunk": "@@ -98,6 +109,22 @@ public long put(String name, @NonNull Throwable t) {\n         return currentEvents;\n     }\n \n+    /**\n+     * Returns true if the class name was already registered previously, during the current execution of this Jenkins\n+     * instance.\n+     * @ param t the throwable to check", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4d59f03b5cbd073041099c05c83b5a61ecfc27a"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODM3MDMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassTelemetry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo1NDoyMVrOGRHywg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzozODoxNVrOGRyI5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwNjY1OA==", "bodyText": "Should it be added even if already there?", "url": "https://github.com/jenkinsci/jenkins/pull/4712#discussion_r420606658", "createdAt": "2020-05-06T07:54:21Z", "author": {"login": "varyvol"}, "path": "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassTelemetry.java", "diffHunk": "@@ -239,13 +241,18 @@ public static void reportException(@NonNull String name, @NonNull Throwable e) {\n             // We call the methods in this order because if the missing class is not java related, we don't loop over the\n             // stack trace to look if it's not thrown from an ignored place avoiding an impact on performance.\n             if (isFromMovedPackage(name) && !calledFromIgnoredPlace(e)) {\n-                events.put(name, e);\n-                if (LOGGER.isLoggable(Level.WARNING))\n+                if (LOGGER.isLoggable(Level.WARNING) && !wasAlreadyReported(name)) {\n                     LOGGER.log(Level.WARNING, \"Added a missed class for missing class telemetry. Class: \" + name, e);\n+                }\n+                events.put(name, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4d59f03b5cbd073041099c05c83b5a61ecfc27a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMwMDQ1Mw==", "bodyText": "The put method is not the Map one, is a custom method which makes two things:\n\nPut the event in the list of already printed, if needed\nPut the event in the list of events to send to Telemetry, if there is space for it (only 100 per day)", "url": "https://github.com/jenkinsci/jenkins/pull/4712#discussion_r421300453", "createdAt": "2020-05-07T07:38:15Z", "author": {"login": "MRamonLeon"}, "path": "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassTelemetry.java", "diffHunk": "@@ -239,13 +241,18 @@ public static void reportException(@NonNull String name, @NonNull Throwable e) {\n             // We call the methods in this order because if the missing class is not java related, we don't loop over the\n             // stack trace to look if it's not thrown from an ignored place avoiding an impact on performance.\n             if (isFromMovedPackage(name) && !calledFromIgnoredPlace(e)) {\n-                events.put(name, e);\n-                if (LOGGER.isLoggable(Level.WARNING))\n+                if (LOGGER.isLoggable(Level.WARNING) && !wasAlreadyReported(name)) {\n                     LOGGER.log(Level.WARNING, \"Added a missed class for missing class telemetry. Class: \" + name, e);\n+                }\n+                events.put(name, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwNjY1OA=="}, "originalCommit": {"oid": "a4d59f03b5cbd073041099c05c83b5a61ecfc27a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTEzOTc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo1MjozOFrOGRPZcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo1MjozOFrOGRPZcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDczMTI0OQ==", "bodyText": "Please avoid diff hunks unrelated to a fix.", "url": "https://github.com/jenkinsci/jenkins/pull/4712#discussion_r420731249", "createdAt": "2020-05-06T11:52:38Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvents.java", "diffHunk": "@@ -25,8 +25,8 @@\n package jenkins.telemetry.impl.java11;\n \n import com.google.common.annotations.VisibleForTesting;\n-\n import edu.umd.cs.findbugs.annotations.NonNull;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4d59f03b5cbd073041099c05c83b5a61ecfc27a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTE0MzExOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo1MzozOFrOGRPbkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo1MzozOFrOGRPbkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDczMTc5Mw==", "bodyText": "Best to document what the key represents.", "url": "https://github.com/jenkinsci/jenkins/pull/4712#discussion_r420731793", "createdAt": "2020-05-06T11:53:38Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvents.java", "diffHunk": "@@ -42,10 +42,15 @@\n     /* package */ static /* final */ int MAX_EVENTS_PER_SEND = 100;\n \n     /**\n-     * List of events, one per stack trace.\n+     * List of events, one per stack trace, to send to Telemetry. Only the first {@code #MAX_EVENTS_PER_SEND} are sent.\n      */\n     private ConcurrentHashMap<List<StackTraceElement>, MissingClassEvent> events = new ConcurrentHashMap<>(MAX_EVENTS_PER_SEND);\n \n+    /**\n+     * List of all events registered on this execution, to avoid printing an event more than once in the log. This map\n+     * is not limited. On every Jenkins restart is cleaned because it's not persisted, so the CNFE is printed again.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4d59f03b5cbd073041099c05c83b5a61ecfc27a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTE0ODQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassTelemetry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo1NToxM1rOGRPe2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzozNToyOFrOGRyCzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDczMjYzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        {\"sun.reflect.generics.factory.CoreReflectionFactory\", \"makeNamedType\"} // JENKINS-61920\n          \n          \n            \n                        {\"sun.reflect.generics.factory.CoreReflectionFactory\", \"makeNamedType\"}, // JENKINS-61920\n          \n      \n    \n    \n  \n\nso you do not need to patch the previous line the next time you add an entry", "url": "https://github.com/jenkinsci/jenkins/pull/4712#discussion_r420732632", "createdAt": "2020-05-06T11:55:13Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassTelemetry.java", "diffHunk": "@@ -107,7 +107,9 @@\n             {\"org.codehaus.groovy.control.ClassNodeResolver\", \"tryAsLoaderClassOrScript\"},\n             {\"org.kohsuke.stapler.RequestImpl$TypePair\", \"convertJSON\"},\n             {\"net.bull.javamelody.FilterContext\", \"isMojarraAvailable\"}, // JENKINS-60725\n-            {\"hudson.remoting.RemoteClassLoader$ClassLoaderProxy\", \"fetch3\"} // JENKINS-61521\n+            {\"hudson.remoting.RemoteClassLoader$ClassLoaderProxy\", \"fetch3\"}, // JENKINS-61521\n+            //Don't add \"java.base/\" before sun.reflect.generics.factory.CoreReflectionFactory\n+            {\"sun.reflect.generics.factory.CoreReflectionFactory\", \"makeNamedType\"} // JENKINS-61920", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4d59f03b5cbd073041099c05c83b5a61ecfc27a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI5ODg5Mg==", "bodyText": "I've done it on other languages, I never tried it on Java \ud83d\ude04", "url": "https://github.com/jenkinsci/jenkins/pull/4712#discussion_r421298892", "createdAt": "2020-05-07T07:35:28Z", "author": {"login": "MRamonLeon"}, "path": "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassTelemetry.java", "diffHunk": "@@ -107,7 +107,9 @@\n             {\"org.codehaus.groovy.control.ClassNodeResolver\", \"tryAsLoaderClassOrScript\"},\n             {\"org.kohsuke.stapler.RequestImpl$TypePair\", \"convertJSON\"},\n             {\"net.bull.javamelody.FilterContext\", \"isMojarraAvailable\"}, // JENKINS-60725\n-            {\"hudson.remoting.RemoteClassLoader$ClassLoaderProxy\", \"fetch3\"} // JENKINS-61521\n+            {\"hudson.remoting.RemoteClassLoader$ClassLoaderProxy\", \"fetch3\"}, // JENKINS-61521\n+            //Don't add \"java.base/\" before sun.reflect.generics.factory.CoreReflectionFactory\n+            {\"sun.reflect.generics.factory.CoreReflectionFactory\", \"makeNamedType\"} // JENKINS-61920", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDczMjYzMg=="}, "originalCommit": {"oid": "a4d59f03b5cbd073041099c05c83b5a61ecfc27a"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 544, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}