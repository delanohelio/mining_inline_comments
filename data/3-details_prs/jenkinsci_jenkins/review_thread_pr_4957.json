{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2ODI0MDgy", "number": 4957, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjozNzoyOVrOEpzE1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODoxODoxOVrOEqNWlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjYzODk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjozNzoyOVrOHbr-yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjo1NjowNVrOHbsjIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NDE4NQ==", "bodyText": "I do not think we need a public API for this. Stack traces should be omitted by default, and we can leave in a system property to assist with debugging in case of unexpected ClassNotFoundExceptions.", "url": "https://github.com/jenkinsci/jenkins/pull/4957#discussion_r498794185", "createdAt": "2020-10-02T12:37:29Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -102,6 +104,18 @@ public ClassicPluginStrategy(PluginManager pluginManager) {\n         this.pluginManager = pluginManager;\n     }\n \n+    /**\n+     * Sets whether the classloader should include stacktraces on {@link ClassNotFoundException}s.\n+     *\n+     * @param skipStacktraces {@link false} to skip stacktraces.\n+     *        The classloader injects stacktraces by default.\n+     * @since TODO\n+     */\n+    public ClassicPluginStrategy withOmitStacktracesOnClassNotFoundException(boolean skipStacktraces) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0717906d4ad3ad0c40a138c8418548e1ef27b7cd"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NzM5Nw==", "bodyText": "I would prefer to have public API for Jenkinsfile Runner and a few other use-cases.\nFine to change the defaults if there is a consensus about it", "url": "https://github.com/jenkinsci/jenkins/pull/4957#discussion_r498797397", "createdAt": "2020-10-02T12:44:02Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -102,6 +104,18 @@ public ClassicPluginStrategy(PluginManager pluginManager) {\n         this.pluginManager = pluginManager;\n     }\n \n+    /**\n+     * Sets whether the classloader should include stacktraces on {@link ClassNotFoundException}s.\n+     *\n+     * @param skipStacktraces {@link false} to skip stacktraces.\n+     *        The classloader injects stacktraces by default.\n+     * @since TODO\n+     */\n+    public ClassicPluginStrategy withOmitStacktracesOnClassNotFoundException(boolean skipStacktraces) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NDE4NQ=="}, "originalCommit": {"oid": "0717906d4ad3ad0c40a138c8418548e1ef27b7cd"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwMzQ4OQ==", "bodyText": "Maybe I do not understand. Why would you need a Java API if the default is what you want anyway?", "url": "https://github.com/jenkinsci/jenkins/pull/4957#discussion_r498803489", "createdAt": "2020-10-02T12:56:05Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -102,6 +104,18 @@ public ClassicPluginStrategy(PluginManager pluginManager) {\n         this.pluginManager = pluginManager;\n     }\n \n+    /**\n+     * Sets whether the classloader should include stacktraces on {@link ClassNotFoundException}s.\n+     *\n+     * @param skipStacktraces {@link false} to skip stacktraces.\n+     *        The classloader injects stacktraces by default.\n+     * @since TODO\n+     */\n+    public ClassicPluginStrategy withOmitStacktracesOnClassNotFoundException(boolean skipStacktraces) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NDE4NQ=="}, "originalCommit": {"oid": "0717906d4ad3ad0c40a138c8418548e1ef27b7cd"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjY0MTQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/PluginManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjozODoxNlrOHbsAVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjo1Njo0MVrOHbskNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NDU4Mw==", "bodyText": "Conventionally this would be a nonfinal static constant.", "url": "https://github.com/jenkinsci/jenkins/pull/4957#discussion_r498794583", "createdAt": "2020-10-02T12:38:16Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -1213,8 +1213,13 @@ protected PluginStrategy createPluginStrategy() {\n \t\t\tLOGGER.info(\"Falling back to ClassicPluginStrategy\");\n \t\t}\n \n-\t\t// default and fallback\n-\t\treturn new ClassicPluginStrategy(this);\n+\t\t// Default and fallback strategy\n+        // The default Plugin Manager implementation does not propagate/log stacktraces for ClassNotFoundExceptions,\n+        // hence stacktraces are omitted by default for better performance.\n+        boolean omitClassNotFoundExceptionStacktraces =SystemProperties.getBoolean(\n+                ClassicPluginStrategy.class.getName() + \".omitClassNotFoundStacktraces\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0717906d4ad3ad0c40a138c8418548e1ef27b7cd"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5ODMzNg==", "bodyText": "There are other system properties which are resolved on-demand. Taking the specifics of Jenkinsfile Runner codebase, I would prefer to keep more deterministic initialization than static initializer", "url": "https://github.com/jenkinsci/jenkins/pull/4957#discussion_r498798336", "createdAt": "2020-10-02T12:45:53Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -1213,8 +1213,13 @@ protected PluginStrategy createPluginStrategy() {\n \t\t\tLOGGER.info(\"Falling back to ClassicPluginStrategy\");\n \t\t}\n \n-\t\t// default and fallback\n-\t\treturn new ClassicPluginStrategy(this);\n+\t\t// Default and fallback strategy\n+        // The default Plugin Manager implementation does not propagate/log stacktraces for ClassNotFoundExceptions,\n+        // hence stacktraces are omitted by default for better performance.\n+        boolean omitClassNotFoundExceptionStacktraces =SystemProperties.getBoolean(\n+                ClassicPluginStrategy.class.getName() + \".omitClassNotFoundStacktraces\", true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NDU4Mw=="}, "originalCommit": {"oid": "0717906d4ad3ad0c40a138c8418548e1ef27b7cd"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwMzc2Ng==", "bodyText": "Again, why would you need to do anything at all in JFR if the default is set to omit stack traces, which it should be?", "url": "https://github.com/jenkinsci/jenkins/pull/4957#discussion_r498803766", "createdAt": "2020-10-02T12:56:41Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -1213,8 +1213,13 @@ protected PluginStrategy createPluginStrategy() {\n \t\t\tLOGGER.info(\"Falling back to ClassicPluginStrategy\");\n \t\t}\n \n-\t\t// default and fallback\n-\t\treturn new ClassicPluginStrategy(this);\n+\t\t// Default and fallback strategy\n+        // The default Plugin Manager implementation does not propagate/log stacktraces for ClassNotFoundExceptions,\n+        // hence stacktraces are omitted by default for better performance.\n+        boolean omitClassNotFoundExceptionStacktraces =SystemProperties.getBoolean(\n+                ClassicPluginStrategy.class.getName() + \".omitClassNotFoundStacktraces\", true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NDU4Mw=="}, "originalCommit": {"oid": "0717906d4ad3ad0c40a138c8418548e1ef27b7cd"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjY0MjIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/util/AntClassLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjozODozMFrOHbsAyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjozODozMFrOHbsAyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NDY5OQ==", "bodyText": "Ditto, no Java API needed here.", "url": "https://github.com/jenkinsci/jenkins/pull/4957#discussion_r498794699", "createdAt": "2020-10-02T12:38:30Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/util/AntClassLoader.java", "diffHunk": "@@ -568,6 +575,18 @@ public synchronized void setIsolated(boolean isolated) {\n         ignoreBase = isolated;\n     }\n \n+    /**\n+     * Sets whether the classloader should include stacktraces on {@link ClassNotFoundException}s.\n+     *\n+     * @param skipStacktraces {@link true} to skip stacktraces.\n+     *        The classloader adds stacktraces by default.\n+     * @since TODO\n+     */\n+    public AntClassLoader withOmitStacktracesOnClassNotFound(boolean skipStacktraces) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0717906d4ad3ad0c40a138c8418548e1ef27b7cd"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjY0MzEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/util/java/ClassNotFoundNoStacktraceException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjozODo1NFrOHbsBcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjozODo1NFrOHbsBcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NDg2Ng==", "bodyText": "should be ClassNotFoundNoStackTraceException for consistency", "url": "https://github.com/jenkinsci/jenkins/pull/4957#discussion_r498794866", "createdAt": "2020-10-02T12:38:54Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/util/java/ClassNotFoundNoStacktraceException.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.util.java;\n+\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+\n+/**\n+ * {@link ClassNotFoundException} which does not store the stacktrace on initialization.\n+ * It improves classloading performance when the stacktrace is ignored,\n+ * e.g. like in {@link hudson.ClassicPluginStrategy}.\n+ */\n+@Restricted(NoExternalUse.class)\n+public class ClassNotFoundNoStacktraceException extends ClassNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0717906d4ad3ad0c40a138c8418548e1ef27b7cd"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjk0MzI2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODoxODowMVrOHcSNCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODoxODowMVrOHcSNCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyMDQyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param fillInStackTraces {@link true} to fill in stacktraces.\n          \n          \n            \n                 * @param fillInStackTraces {@code true} to fill in stacktraces.", "url": "https://github.com/jenkinsci/jenkins/pull/4957#discussion_r499420425", "createdAt": "2020-10-05T08:18:01Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -102,6 +104,18 @@ public ClassicPluginStrategy(PluginManager pluginManager) {\n         this.pluginManager = pluginManager;\n     }\n \n+    /**\n+     * Sets whether the classloader should include stacktraces on {@link ClassNotFoundException}s.\n+     *\n+     * @param fillInStackTraces {@link true} to fill in stacktraces.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1de172d7c0f7afe1e3d0dac9f49e73b3273c4ae9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjk0NDIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/util/AntClassLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODoxODoxOVrOHcSNpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODoxODoxOVrOHcSNpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyMDU4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param fillInStackTraces {@link true} to fill in stacktraces.\n          \n          \n            \n                 * @param fillInStackTraces {@code true} to fill in stacktraces.", "url": "https://github.com/jenkinsci/jenkins/pull/4957#discussion_r499420581", "createdAt": "2020-10-05T08:18:19Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/util/AntClassLoader.java", "diffHunk": "@@ -568,6 +575,18 @@ public synchronized void setIsolated(boolean isolated) {\n         ignoreBase = isolated;\n     }\n \n+    /**\n+     * Sets whether the classloader should include stacktraces on {@link ClassNotFoundException}s.\n+     *\n+     * @param fillInStackTraces {@link true} to fill in stacktraces.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1de172d7c0f7afe1e3d0dac9f49e73b3273c4ae9"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 203, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}