{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2ODAxNjYz", "number": 5048, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTowNTo0OFrOE2HzoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTowNzowOFrOE2H1qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTg2NDY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/FileSystemProvisioner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTowNTo0OFrOHuxpAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTowNTo0OFrOHuxpAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgwOTg1OA==", "bodyText": "Have to keep the class and this method since it is called by: https://github.com/jenkinsci/compound-slaves-plugin/blob/e8e8aef6fe97cf5528883343928e11dc9adbfd39/src/main/java/ru/yandex/jenkins/plugins/compound/CompoundBuilder.java#L71", "url": "https://github.com/jenkinsci/jenkins/pull/5048#discussion_r518809858", "createdAt": "2020-11-06T15:05:48Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/FileSystemProvisioner.java", "diffHunk": "@@ -23,230 +23,41 @@\n  */\n package hudson;\n \n-import hudson.FilePath.TarCompression;\n import hudson.model.AbstractBuild;\n import hudson.model.AbstractProject;\n-import hudson.model.Computer;\n import hudson.model.Describable;\n-import hudson.model.Job;\n+import hudson.model.Descriptor;\n import hudson.model.TaskListener;\n-import hudson.util.io.ArchiverFactory;\n-import java.nio.file.Files;\n-import java.nio.file.InvalidPathException;\n-import jenkins.model.Jenkins;\n-import hudson.model.listeners.RunListener;\n-import hudson.scm.SCM;\n-import org.jenkinsci.Symbol;\n-\n-import java.io.BufferedOutputStream;\n-import java.io.File;\n import java.io.IOException;\n-import java.io.OutputStream;\n+import jenkins.model.Jenkins;\n \n /**\n- * Prepares and provisions workspaces for {@link AbstractProject}s.\n- *\n- * <p>\n- *\n- *\n- * <p>\n- * STILL A WORK IN PROGRESS. SUBJECT TO CHANGE! DO NOT EXTEND.\n- *\n- * TODO: is this per {@link Computer}? Per {@link Job}?\n- *   \u2192 probably per agent.\n- *\n- * <h2>Design Problems</h2>\n- * <ol>\n- * <li>\n- * Garbage collection of snapshots. When do we discard snapshots?\n- * In one use case, it would be convenient to keep the snapshot of the\n- * last promoted/successful build. So we need to define a mechanism\n- * to veto GC of snapshot? like an interface that Action can implement?\n- *\n- * Snapshot should be obtained per user's direction. That would be a good\n- * moment for the user to specify the retention policy.\n- *\n- * <li>\n- * Configuration mechanism. Should we auto-detect FileSystemProvisioner\n- * per OS? (but for example, zfs support would require the root access.)\n- * People probably needs to be able to disable this feature, which means\n- * one more configuration option. It's especially tricky because\n- * during the configuration we don't know the OS type.\n- *\n- * OTOH special agent type like the ones for network.com grid can\n- * hide this.\n- * </ol>\n- *\n- *\n- * <h2>Recap</h2>\n- *\n- * To recap,\n- *\n- * - when an agent connects, we auto-detect the file system provisioner.\n- *   (for example, ZFS FSP would check the agent root user prop\n- *   and/or attempt to \"pfexec zfs create\" and take over.)\n- *\n- * - the user may configure jobs for snapshot collection, along with\n- *   the retention policy.\n- *\n- * - keep workspace snapshots that correspond to the permalinks\n- *   In ZFS, use a user property to remember the build and the job.\n- *\n- * Can't the 2nd step happen automatically, when someone else depends on\n- * the workspace snapshot of the upstream? Yes, by using {@link RunListener}.\n- * So this becomes like a special SCM type.\n- *\n- *\n- *\n- * <h2>Design take 2</h2>\n- * <p>\n- * The first piece of this is the custom {@link SCM}, which inherits the\n- * workspace of another job. When this executes, it picks up\n- * {@link WorkspaceSnapshot} from the other job and use it to obtain the workspace.\n- *\n- * <p>\n- * Then there's {@link RunListener}, which creates a snapshot if\n- * someone else is interested in using a snapshot later.\n- *\n- * <h3>TODOs</h3>\n- * <ul>\n- * <li>\n- * Garbage collection of workspace snapshots. \n- *\n- * </ul>\n- *\n- * @author Kohsuke Kawaguchi\n- * @since 1.235\n+ * @deprecated Unused.\n  */\n-public abstract class FileSystemProvisioner implements ExtensionPoint, Describable<FileSystemProvisioner> {\n-    /**\n-     * Called very early in the build (before a build places any files\n-     * in the workspace, such as SCM checkout) to provision a workspace\n-     * for the build.\n-     *\n-     * <p>\n-     * This method can prepare the underlying file system in preparation\n-     * for the later {@link FileSystemProvisioner.Default#snapshot(AbstractBuild, FilePath, TaskListener)}.\n-     *\n-     * TODO : the method needs to be able to see the snapshot would\n-     * be later needed. In fact, perhaps we should only call this method\n-     * when Hudson knows that a snapshot is later needed?\n-     *\n-     * @param ws\n-     *      New workspace should be prepared in this location. This is the same value as\n-     *      {@code build.getProject().getWorkspace()} but passed separately for convenience.\n-     */\n+@Deprecated\n+public abstract class FileSystemProvisioner implements Describable<FileSystemProvisioner> {\n     public abstract void prepareWorkspace(AbstractBuild<?,?> build, FilePath ws, TaskListener listener) throws IOException, InterruptedException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b60ae2441299f0646cc7a21ffb08e33720d954a"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTg2Nzg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/WorkspaceSnapshot.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTowNjozN1rOHuxrJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTowNjozN1rOHuxrJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgxMDQwNQ==", "bodyText": "Actually https://plugins.jenkins.io/clone-workspace-scm/ (untouched for seven years, but apparently still installed by many people) does implement this, but without using FileSystemProvisioner.", "url": "https://github.com/jenkinsci/jenkins/pull/5048#discussion_r518810405", "createdAt": "2020-11-06T15:06:37Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/WorkspaceSnapshot.java", "diffHunk": "@@ -30,20 +30,9 @@\n import java.io.IOException;\n \n /**\n- * Represents a workspace snapshot created by {@link FileSystemProvisioner}.\n- *\n- * <p>\n- * This class encapsulates a logic to use the snapshot elsewhere.\n- * The instance will be persisted with the {@link AbstractBuild} object\n- * as an {@link Action}.\n- *\n- * <p>\n- * TODO: how to garbage-collect this object, especially for zfs?\n- * perhaps when a new build is started?\n- *\n- * @see FileSystemProvisioner\n- * @author Kohsuke Kawaguchi\n+ * @deprecated Unused.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b60ae2441299f0646cc7a21ffb08e33720d954a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTg2OTg1OnYy", "diffSide": "LEFT", "path": "core/src/main/java/hudson/os/solaris/ZFSProvisioner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTowNzowOFrOHuxsew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTowNzowOFrOHuxsew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgxMDc0Nw==", "bodyText": "Also deleted in #5047.", "url": "https://github.com/jenkinsci/jenkins/pull/5048#discussion_r518810747", "createdAt": "2020-11-06T15:07:08Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/os/solaris/ZFSProvisioner.java", "diffHunk": "@@ -1,137 +0,0 @@\n-/*\n- * The MIT License\n- *\n- * Copyright (c) 2004-2009, Sun Microsystems, Inc.\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package hudson.os.solaris;\n-\n-import jenkins.MasterToSlaveFileCallable;\n-import hudson.FileSystemProvisioner;\n-import hudson.FilePath;\n-import hudson.WorkspaceSnapshot;\n-import hudson.FileSystemProvisionerDescriptor;\n-import hudson.Extension;\n-import hudson.remoting.VirtualChannel;\n-import hudson.model.AbstractBuild;\n-import hudson.model.TaskListener;\n-import hudson.model.AbstractProject;\n-import hudson.model.Node;\n-\n-import java.io.IOException;\n-import java.io.File;\n-import java.io.Serializable;\n-\n-import org.jenkinsci.Symbol;\n-import org.jvnet.solaris.libzfs.LibZFS;\n-import org.jvnet.solaris.libzfs.ZFSFileSystem;\n-\n-/**\n- * {@link FileSystemProvisioner} for ZFS.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b60ae2441299f0646cc7a21ffb08e33720d954a"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 87, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}