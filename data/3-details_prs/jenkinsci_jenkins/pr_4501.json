{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NTIxMDM2", "number": 4501, "title": "[JEP-223, JENKINS-60266] - Add a new Overall/Manage permission which allows to configure parts of the global configuration (experimental feature)", "bodyText": "Feedback to #4483 was that it is too complex to easily review. So this is an attempt at an iterative approach that first does the basics:\n\nNew permission Overall/Manage\nMake Manage Jenkins (/manage) accessible to those users with a small subset of entries: Those allowed anyway + Configure System\nFiltering of entries on Configure System, with just a few clearly safe ones allowed to demonstrate\n\nEverything else can be added afterwards.\nThis way, the overall approach is not blocked by discussions about what elements (env vars? system properties? cloud configuration? \"About Jenkins\"?) are safe to give these users access to.\nJENKINS-60266, JEP-223\nPlugin proof of concept downstream PR: jenkinsci/workflow-api-plugin#118\nProof of concept for JEP-224 interop: daniel-beck#1\nManual testing notes\nWhen using the core-pr-tester (docker run --rm -ti -p 8080:8080 -e ID=4501 jenkins/core-pr-tester), you can use script console to enable the new permission: Jenkins.MANAGE.enabled = true\nScreenshots\n\nWith \"Manage\" permission\n/manage\n\n/configure\n\n/computer\n\n\nProposed changelog entries\n\nAdd a new permission Overall/Manage which allows a user to configure parts of the global Jenkins configuration without having the Overall/Administer permission. This is an experimental feature, disabled by default, that can be enabled by setting the jenkins.security.ManagePermission system property to true.\n\nProposed upgrade guidelines\nN/A\nSubmitter checklist\n\n JIRA issue is well described\n Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). Examples\n\nFill-in the Proposed changelog entries section only if there are breaking changes or other changes which may require extra steps from users during the upgrade\n\n\n Appropriate autotests or explanation to why this change has no tests\n[n/a] For dependency updates: links to external changelogs and, if possible, full diffs\n\nMaintainer checklist\nBefore the changes are marked as ready-for-merge:\n\n There are at least 2 approvals for the pull request and no outstanding requests for change\n Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n Changelog entries in the PR title and/or Proposed changelog entries are correct\n Proper changelog labels are set so that the changelog can be generated automatically\n If the change needs additional upgrade steps from users, upgrade-guide-needed label is set and there is a Proposed upgrade guidelines section in the PR title. (example)\n If it would make sense to backport the change to LTS, a JIRA issue should exist and be labeled as lts-candidate", "createdAt": "2020-02-14T18:42:59Z", "url": "https://github.com/jenkinsci/jenkins/pull/4501", "merged": true, "mergeCommit": {"oid": "e377050faff7d92e3025c3da16f0533ae922f027"}, "closed": true, "closedAt": "2020-02-18T16:05:55Z", "author": {"login": "daniel-beck"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcET92eAH2gAyMzc1NTIxMDM2OjU1YjJiYzdmM2ZlMDM3ZTQ2YTA2ZGViNDRiOTNiMDI3ODdkZjI4ZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFjU1KAFqTM2MDQxMjQ1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "55b2bc7f3fe037e46a06deb44b93b02787df28ef", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/55b2bc7f3fe037e46a06deb44b93b02787df28ef", "committedDate": "2020-02-14T18:37:32Z", "message": "[JEP-223] Overall/Manage permission\n\nCo-Authored-By: Esther Alvarez Feijoo <ealvarez@cloudbees.com>\nCo-Authored-By: aHenryJard <ajard@cloudbees.com>\nCo-Authored-By: michael cirioli <mikecirioli@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTQ1MjM5", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-359145239", "createdAt": "2020-02-14T18:46:47Z", "commit": {"oid": "55b2bc7f3fe037e46a06deb44b93b02787df28ef"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODo0Njo0N1rOFqALrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODo1MDoyNVrOFqARyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4NzUwMQ==", "bodyText": "This takes the place of the DescriptorVisibilityFilter in an earlier attempt.\nThe problem there was that we either had to allow any descriptor that wasn't a GlobalConfiguration (which leaves all DescriptorImpl/global.jelly accessible, which is unsafe), or we actually filtered out descriptors from, well, everywhere:\n\nWhile funny, this wasn't useful.", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r379587501", "createdAt": "2020-02-14T18:46:47Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1062,6 +1062,10 @@ public static String getFooterURL() {\n             Descriptor d = c.getInstance();\n             if (d.getGlobalConfigPage()==null)  continue;\n \n+            if (!Jenkins.get().hasPermission(d.getPermission())) {\n+                continue;\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b2bc7f3fe037e46a06deb44b93b02787df28ef"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4Nzk3MA==", "bodyText": "No special permissions are needed to access this anyway: https://ci.jenkins.io/load-statistics", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r379587970", "createdAt": "2020-02-14T18:47:53Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/jenkins/management/StatisticsLink.java", "diffHunk": "@@ -48,6 +52,12 @@ public String getDescription() {\n         return Messages.StatisticsLink_Description();\n     }\n \n+    @CheckForNull\n+    @Override\n+    public Permission getRequiredPermission() {\n+        return Jenkins.MANAGE;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b2bc7f3fe037e46a06deb44b93b02787df28ef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4ODEwNA==", "bodyText": "No special permissions are needed to access this anyway: https://ci.jenkins.io/computer/", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r379588104", "createdAt": "2020-02-14T18:48:10Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/jenkins/management/NodesLink.java", "diffHunk": "@@ -49,6 +53,12 @@ public String getDescription() {\n         return Messages.NodesLink_Description();\n     }\n \n+    @CheckForNull\n+    @Override\n+    public Permission getRequiredPermission() {\n+        return Jenkins.MANAGE;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b2bc7f3fe037e46a06deb44b93b02787df28ef"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4ODQwNA==", "bodyText": "No special permissions are needed to access this anyway.", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r379588404", "createdAt": "2020-02-14T18:48:55Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/jenkins/management/CliLink.java", "diffHunk": "@@ -48,6 +52,12 @@ public String getDescription() {\n         return Messages.CliLink_Description();\n     }\n \n+    @CheckForNull\n+    @Override\n+    public Permission getRequiredPermission() {\n+        return Jenkins.MANAGE;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b2bc7f3fe037e46a06deb44b93b02787df28ef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4ODY3NQ==", "bodyText": "While this isn't even accessible without Overall/Administer at the moment, it doesn't hurt either.", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r379588675", "createdAt": "2020-02-14T18:49:34Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/resources/hudson/PluginManager/sidepanel.groovy", "diffHunk": "@@ -28,7 +28,7 @@ l.header()\n l.side_panel {\n     l.tasks {\n         l.task(icon:\"icon-up icon-md\", href:rootURL+'/', title:_(\"Back to Dashboard\"))\n-        l.task(icon:\"icon-gear2 icon-md\", href:\"${rootURL}/manage\", title:_(\"Manage Jenkins\"), permission:app.ADMINISTER, it:app)\n+        l.task(icon:\"icon-gear2 icon-md\", href:\"${rootURL}/manage\", title:_(\"Manage Jenkins\"), permission:app.MANAGE, it:app)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b2bc7f3fe037e46a06deb44b93b02787df28ef"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4OTA2Nw==", "bodyText": "Hide administrative monitors so they won't show up on /manage.", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r379589067", "createdAt": "2020-02-14T18:50:25Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/jenkins/model/Jenkins.java", "diffHunk": "@@ -2199,6 +2199,9 @@ public AdministrativeMonitor getAdministrativeMonitor(String id) {\n      * @since 2.64\n      */\n     public List<AdministrativeMonitor> getActiveAdministrativeMonitors() {\n+        if (!Jenkins.get().hasPermission(ADMINISTER)) {\n+            return Collections.emptyList();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b2bc7f3fe037e46a06deb44b93b02787df28ef"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b2d0d2c78fefc1fd9428a55ee7a112abd28fe51", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/3b2d0d2c78fefc1fd9428a55ee7a112abd28fe51", "committedDate": "2020-02-14T18:59:03Z", "message": "As this is experimental, annotate with Restricted(Beta)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1d097f30c9d2f18c8d5a63bf7f95c4a9605266b", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/a1d097f30c9d2f18c8d5a63bf7f95c4a9605266b", "committedDate": "2020-02-14T20:23:29Z", "message": "Add test back\n\nCo-Authored-By: Esther Alvarez Feijoo <ealvarez@cloudbees.com>\nCo-Authored-By: A. Jard <angelique.jard@gmail.com>\nCo-Authored-By: michael cirioli <mikecirioli@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17f1a7c15543ffae19afe7541494898ac3fdb972", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/17f1a7c15543ffae19afe7541494898ac3fdb972", "committedDate": "2020-02-14T20:31:28Z", "message": "Fix Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "311fe0a3ef5310bef31a81b163902f7534ffc5e9", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/311fe0a3ef5310bef31a81b163902f7534ffc5e9", "committedDate": "2020-02-14T20:37:15Z", "message": "Only show the link to the cloud configuration to admins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "042dc75a8f650523916ca789e938cf2b01ed365b", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/042dc75a8f650523916ca789e938cf2b01ed365b", "committedDate": "2020-02-14T20:55:18Z", "message": "For consistency with ManagementLink, name this #getRequiredPermission()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjIwMTQx", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-359220141", "createdAt": "2020-02-14T21:09:12Z", "commit": {"oid": "3b2d0d2c78fefc1fd9428a55ee7a112abd28fe51"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjExNDM4", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-359211438", "createdAt": "2020-02-14T20:50:38Z", "commit": {"oid": "311fe0a3ef5310bef31a81b163902f7534ffc5e9"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDo1MDozOFrOFqDTOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMToxNzowNVrOFqD4mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzODU4NA==", "bodyText": "\ud83d\udc4d This potentially breaking change will have no impact on the plugins from the ecosystem.\nYou can find the analysis report in jenkinsci/jep#269, done with two different tools (GitHub search and \"grep\" search) by two different persons. Nothing was found that is not expected.", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r379638584", "createdAt": "2020-02-14T20:50:38Z", "author": {"login": "Wadeck"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -115,7 +115,7 @@ public boolean getRequiresConfirmation() {\n      * @return permission required for user to access this management link, in addition to {@link Jenkins#ADMINISTER}\n      */\n     public @CheckForNull Permission getRequiredPermission() {\n-        return null;\n+        return Jenkins.ADMINISTER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "311fe0a3ef5310bef31a81b163902f7534ffc5e9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0NjQ0Nw==", "bodyText": "\u2714\ufe0f still accessible to user with just Overall/Read", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r379646447", "createdAt": "2020-02-14T21:12:38Z", "author": {"login": "Wadeck"}, "path": "core/src/main/java/jenkins/management/NodesLink.java", "diffHunk": "@@ -49,6 +53,12 @@ public String getDescription() {\n         return Messages.NodesLink_Description();\n     }\n \n+    @CheckForNull\n+    @Override\n+    public Permission getRequiredPermission() {\n+        return Jenkins.MANAGE;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4ODEwNA=="}, "originalCommit": {"oid": "55b2bc7f3fe037e46a06deb44b93b02787df28ef"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0ODE1NQ==", "bodyText": "FTR The \"protection\" against illegal modifications is done by filtering out the descriptor with getSortedDescriptorsForGlobalConfigUnclassified", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r379648155", "createdAt": "2020-02-14T21:17:05Z", "author": {"login": "Wadeck"}, "path": "core/src/main/java/jenkins/model/Jenkins.java", "diffHunk": "@@ -3762,7 +3766,7 @@ public Object getDynamic(String token) {\n     public synchronized void doConfigSubmit( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException, FormException {\n         BulkChange bc = new BulkChange(this);\n         try {\n-            checkPermission(ADMINISTER);\n+            checkPermission(MANAGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042dc75a8f650523916ca789e938cf2b01ed365b"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjQwMzAx", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-359240301", "createdAt": "2020-02-14T21:51:30Z", "commit": {"oid": "311fe0a3ef5310bef31a81b163902f7534ffc5e9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo1MTozMFrOFqEsdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjowMjoxOVrOFqE7Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MTQyOA==", "bodyText": "I suggest turning this sentence around a little bit to make it a little clearer.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              This permission grants the ability to make non Permission escalating system \\\n          \n          \n            \n              This permission grants the ability to make system configuration changes that do not escalate permissions.\n          \n      \n    \n    \n  \n\nI'm still not entirely sure what it is trying to say. What exactly are changes that do not escalate permissions? But, the approach I suggest is clearer to me than \"non Permission escalating system configuration changes\".", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r379661428", "createdAt": "2020-02-14T21:51:30Z", "author": {"login": "jeffret-b"}, "path": "core/src/main/resources/hudson/model/Messages.properties", "diffHunk": "@@ -163,6 +163,10 @@ Hudson.AdministerPermission.Description=\\\n   This permission grants the ability to make system-wide configuration changes, \\\n   as well as perform highly sensitive operations that amounts to full local system access \\\n   (within the scope granted by the underlying OS.)\n+Jenkins.Manage.Description=\\\n+  This permission grants the ability to make non Permission escalating system \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "311fe0a3ef5310bef31a81b163902f7534ffc5e9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NTE5MA==", "bodyText": "This comment is confusing. As best I can tell, these tests are inspired by tests in DisablePluginCommandTest but nothing was moved from there or even directly copied. I'm not sure there's even any value in referencing at all here.\nThere are other similar confusing comments in this same test file referring to other moves.\nI suppose the private helper methods are copied from the other files. That copying could be noted here, but I'm not sure that's useful in these tests.", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r379665190", "createdAt": "2020-02-14T22:02:19Z", "author": {"login": "jeffret-b"}, "path": "test/src/test/java/jenkins/model/JenkinsManagePermissionTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package jenkins.model;\n+\n+import java.net.HttpURLConnection;\n+import com.gargoylesoftware.htmlunit.WebResponse;\n+import com.gargoylesoftware.htmlunit.html.HtmlForm;\n+import com.gargoylesoftware.htmlunit.html.HtmlPage;\n+import org.hamcrest.BaseMatcher;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.jvnet.hudson.test.Issue;\n+import org.jvnet.hudson.test.JenkinsRule;\n+import org.jvnet.hudson.test.MockAuthorizationStrategy;\n+import org.jvnet.hudson.test.recipes.WithPlugin;\n+\n+import hudson.PluginWrapper;\n+import hudson.cli.CLICommandInvoker;\n+import hudson.cli.DisablePluginCommand;\n+import hudson.model.Descriptor;\n+import hudson.model.MyView;\n+import hudson.model.View;\n+import hudson.model.labels.LabelAtom;\n+import hudson.tasks.Shell;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import static hudson.cli.CLICommandInvoker.Matcher.failedWith;\n+\n+/**\n+ * As Jenkins.MANAGE can be enabled on startup with jenkins.security.ManagePermission property, we need a test class\n+ * with this property activated.\n+ */\n+public class JenkinsManagePermissionTest {\n+\n+    @Rule\n+    public JenkinsRule j = new JenkinsRule();\n+\n+    @BeforeClass //TODO: remove once Jenkins.MANAGE is no longer an experimental feature\n+    public static void enableManagePermission() {\n+        System.setProperty(\"jenkins.security.ManagePermission\", \"true\");\n+    }\n+\n+    @AfterClass //TODO: remove once Jenkins.MANAGE is no longer an experimental feature\n+    public static void disableManagePermission() {\n+        System.clearProperty(\"jenkins.security.ManagePermission\");\n+    }\n+\n+\n+    // -----------------------------\n+    //Moved from DisablePluginCommandTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "311fe0a3ef5310bef31a81b163902f7534ffc5e9"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58a3f01c1ec14d58aa65017e4459f4ad36d9c0e1", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/58a3f01c1ec14d58aa65017e4459f4ad36d9c0e1", "committedDate": "2020-02-15T01:43:40Z", "message": "Address review feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzI1ODY1", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-359325865", "createdAt": "2020-02-15T04:28:20Z", "commit": {"oid": "58a3f01c1ec14d58aa65017e4459f4ad36d9c0e1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzQwMjQw", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-359340240", "createdAt": "2020-02-15T11:10:31Z", "commit": {"oid": "58a3f01c1ec14d58aa65017e4459f4ad36d9c0e1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxMToxMDozMVrOFqOsPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxMToxMDozMVrOFqOsPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNTIxNQ==", "bodyText": "This does hugely impact system read though, and it doesn't seem to have been considered in https://github.com/jenkinsci/jep/pull/269/files at all\nThe manage page is now completely empty if I branch JEP-223 and JEP-224 and merge them together.\nOptions I've looked at so far,\n\nrevert this change and go back to null, system read continues to work, manage will see everything\nchange it to system read, then you get manager is missing the Overall/SystemRead permission", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r379825215", "createdAt": "2020-02-15T11:10:31Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -115,7 +115,7 @@ public boolean getRequiresConfirmation() {\n      * @return permission required for user to access this management link, in addition to {@link Jenkins#ADMINISTER}\n      */\n     public @CheckForNull Permission getRequiredPermission() {\n-        return null;\n+        return Jenkins.ADMINISTER;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzODU4NA=="}, "originalCommit": {"oid": "311fe0a3ef5310bef31a81b163902f7534ffc5e9"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ba18f5de0c3b44a4dcd96d3978bc9f3a4c324b1", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/9ba18f5de0c3b44a4dcd96d3978bc9f3a4c324b1", "committedDate": "2020-02-15T11:56:04Z", "message": "Merge branch 'master' into jep-223"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzQ5NDI2", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-359349426", "createdAt": "2020-02-15T15:00:39Z", "commit": {"oid": "9ba18f5de0c3b44a4dcd96d3978bc9f3a4c324b1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NjE4NDEz", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-359618413", "createdAt": "2020-02-17T10:08:23Z", "commit": {"oid": "9ba18f5de0c3b44a4dcd96d3978bc9f3a4c324b1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NjU2NDUy", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-359656452", "createdAt": "2020-02-17T11:07:55Z", "commit": {"oid": "9ba18f5de0c3b44a4dcd96d3978bc9f3a4c324b1"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMTowNzo1NVrOFqgqEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMToxNTowMlrOFqg21g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDExOTU3MQ==", "bodyText": "I agree that it is ok as an intermediate solution. permission required for user to access this management link, in addition to {@link Jenkins#ADMINISTER} already implies that there will be rework needed to make it compatible with JEP-224. Since the JEP-223 is about landing as experimental, we can afford further breaking changes in the implementation if needed for JEP-224", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380119571", "createdAt": "2020-02-17T11:07:55Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -115,7 +115,7 @@ public boolean getRequiresConfirmation() {\n      * @return permission required for user to access this management link, in addition to {@link Jenkins#ADMINISTER}\n      */\n     public @CheckForNull Permission getRequiredPermission() {\n-        return null;\n+        return Jenkins.ADMINISTER;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzODU4NA=="}, "originalCommit": {"oid": "311fe0a3ef5310bef31a81b163902f7534ffc5e9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEyMDM5Nw==", "bodyText": "Maybe returning Jenkins.READ is a better option then. Could save time for JEP-224 later.\nSame for the similar comments below", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380120397", "createdAt": "2020-02-17T11:09:40Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/management/CliLink.java", "diffHunk": "@@ -48,6 +52,12 @@ public String getDescription() {\n         return Messages.CliLink_Description();\n     }\n \n+    @CheckForNull\n+    @Override\n+    public Permission getRequiredPermission() {\n+        return Jenkins.MANAGE;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4ODQwNA=="}, "originalCommit": {"oid": "55b2bc7f3fe037e46a06deb44b93b02787df28ef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEyMDg4NQ==", "bodyText": "I would argue that Jenkins \"managers\" may want to see some administrative warnings in the future, but it is a subject for future enhancements", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380120885", "createdAt": "2020-02-17T11:10:41Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/model/Jenkins.java", "diffHunk": "@@ -2199,6 +2199,9 @@ public AdministrativeMonitor getAdministrativeMonitor(String id) {\n      * @since 2.64\n      */\n     public List<AdministrativeMonitor> getActiveAdministrativeMonitors() {\n+        if (!Jenkins.get().hasPermission(ADMINISTER)) {\n+            return Collections.emptyList();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4OTA2Nw=="}, "originalCommit": {"oid": "55b2bc7f3fe037e46a06deb44b93b02787df28ef"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEyMjgzOA==", "bodyText": "Should it be implied by MANAGE after the change?", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380122838", "createdAt": "2020-02-17T11:15:02Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/model/Jenkins.java", "diffHunk": "@@ -5236,7 +5240,26 @@ private static void computeVersion(ServletContext context) {\n     private static final Logger LOGGER = Logger.getLogger(Jenkins.class.getName());\n \n     public static final PermissionGroup PERMISSIONS = Permission.HUDSON_PERMISSIONS;\n+    /**\n+     * Grants ability to configure any and all aspects of the Jenkins instance\n+     */\n     public static final Permission ADMINISTER = Permission.HUDSON_ADMINISTER;\n+\n+    /**\n+     * Allows non-privilege escalating configuration permission for a Jenkins instance.  Actions which could result\n+     * in a privilege  escalation (such as RUN_SCRIPTS) require explicit ADMINISTER permission.\n+     *\n+     * As an experimental feature, making the manage permission able to be disabled by default (keep as ADMINISTER), can\n+     * be enabled with \"jenkins.security.ManagePermission\" system property.\n+     */\n+    @Restricted(Beta.class)\n+    public static final Permission MANAGE = new Permission(PERMISSIONS, \"Manage\",\n+            Messages._Jenkins_Manage_Description(),\n+            ADMINISTER,\n+            SystemProperties.getBoolean(\"jenkins.security.ManagePermission\"),\n+            new PermissionScope[]{PermissionScope.JENKINS});\n+\n+\n     public static final Permission READ = new Permission(PERMISSIONS,\"Read\",Messages._Hudson_ReadPermission_Description(),Permission.READ,PermissionScope.JENKINS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba18f5de0c3b44a4dcd96d3978bc9f3a4c324b1"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5Njg5OTY2", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-359689966", "createdAt": "2020-02-17T12:10:38Z", "commit": {"oid": "9ba18f5de0c3b44a4dcd96d3978bc9f3a4c324b1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NzE5NTM0", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-359719534", "createdAt": "2020-02-17T13:05:39Z", "commit": {"oid": "9ba18f5de0c3b44a4dcd96d3978bc9f3a4c324b1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzowNTozOVrOFqjw-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzowNTo1N1rOFqjxjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3MDQ5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * be enabled with \"jenkins.security.ManagePermission\" system property.\n          \n          \n            \n                 * be enabled with \"jenkins.security.ManagePermission\" system property.\n          \n          \n            \n                 * @since TODO", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380170490", "createdAt": "2020-02-17T13:05:39Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/model/Jenkins.java", "diffHunk": "@@ -5236,7 +5240,26 @@ private static void computeVersion(ServletContext context) {\n     private static final Logger LOGGER = Logger.getLogger(Jenkins.class.getName());\n \n     public static final PermissionGroup PERMISSIONS = Permission.HUDSON_PERMISSIONS;\n+    /**\n+     * Grants ability to configure any and all aspects of the Jenkins instance\n+     */\n     public static final Permission ADMINISTER = Permission.HUDSON_ADMINISTER;\n+\n+    /**\n+     * Allows non-privilege escalating configuration permission for a Jenkins instance.  Actions which could result\n+     * in a privilege  escalation (such as RUN_SCRIPTS) require explicit ADMINISTER permission.\n+     *\n+     * As an experimental feature, making the manage permission able to be disabled by default (keep as ADMINISTER), can\n+     * be enabled with \"jenkins.security.ManagePermission\" system property.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba18f5de0c3b44a4dcd96d3978bc9f3a4c324b1"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3MDYzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return Permission required to configure this descriptor.\n          \n          \n            \n                 * @return Permission required to configure this descriptor.\n          \n          \n            \n                 * @since TODO", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380170638", "createdAt": "2020-02-17T13:05:57Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Descriptor.java", "diffHunk": "@@ -830,6 +832,18 @@ public String getGlobalConfigPage() {\n         return GlobalConfigurationCategory.get(GlobalConfigurationCategory.Unclassified.class);\n     }\n \n+    /**\n+     * Returns the permission type needed in order to configure the descriptor if and only if it is configured through the global (Unclassified) configuration.\n+     * By default, requires {@link Jenkins#ADMINISTER} permission.\n+     * Override to return something different if appropriate. The only currently supported alternative return value is {@link Jenkins#MANAGE}.\n+     *\n+     * @return Permission required to configure this descriptor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba18f5de0c3b44a4dcd96d3978bc9f3a4c324b1"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "735193c2ecfbea75ba174af96c5b98a052e9ff5f", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/735193c2ecfbea75ba174af96c5b98a052e9ff5f", "committedDate": "2020-02-17T13:14:58Z", "message": "Add at-since TODO to Javadoc\n\nCo-Authored-By: Oleg Nenashev <o.v.nenashev@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NzU1NTQ3", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-359755547", "createdAt": "2020-02-17T14:02:28Z", "commit": {"oid": "735193c2ecfbea75ba174af96c5b98a052e9ff5f"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDowMjoyOFrOFqlfqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDoxMTowMlrOFqlw0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE5ODgyNQ==", "bodyText": "@link?", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380198825", "createdAt": "2020-02-17T14:02:28Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/Descriptor.java", "diffHunk": "@@ -830,6 +832,19 @@ public String getGlobalConfigPage() {\n         return GlobalConfigurationCategory.get(GlobalConfigurationCategory.Unclassified.class);\n     }\n \n+    /**\n+     * Returns the permission type needed in order to configure the descriptor if and only if it is configured through the global (Unclassified) configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735193c2ecfbea75ba174af96c5b98a052e9ff5f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE5OTM3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public @CheckForNull Permission getRequiredPermission() {\n          \n          \n            \n                public @Nonnull Permission getRequiredPermission() {\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380199376", "createdAt": "2020-02-17T14:03:35Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -115,7 +115,7 @@ public boolean getRequiresConfirmation() {\n      * @return permission required for user to access this management link, in addition to {@link Jenkins#ADMINISTER}\n      */\n     public @CheckForNull Permission getRequiredPermission() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735193c2ecfbea75ba174af96c5b98a052e9ff5f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE5OTc5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return permission required for user to access this management link, in addition to {@link Jenkins#ADMINISTER}\n          \n          \n            \n                 * @return permission required for user to access this management link; by default, {@link Jenkins#ADMINISTER}\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380199794", "createdAt": "2020-02-17T14:04:28Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -115,7 +115,7 @@ public boolean getRequiresConfirmation() {\n      * @return permission required for user to access this management link, in addition to {@link Jenkins#ADMINISTER}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735193c2ecfbea75ba174af96c5b98a052e9ff5f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwMTA3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * in a privilege  escalation (such as RUN_SCRIPTS) require explicit ADMINISTER permission.\n          \n          \n            \n                 * in a privilege escalation (such as {@link #RUN_SCRIPTS}) require explicit {@link #ADMINISTER} permission.", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380201072", "createdAt": "2020-02-17T14:06:52Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/model/Jenkins.java", "diffHunk": "@@ -5236,7 +5240,27 @@ private static void computeVersion(ServletContext context) {\n     private static final Logger LOGGER = Logger.getLogger(Jenkins.class.getName());\n \n     public static final PermissionGroup PERMISSIONS = Permission.HUDSON_PERMISSIONS;\n+    /**\n+     * Grants ability to configure any and all aspects of the Jenkins instance\n+     */\n     public static final Permission ADMINISTER = Permission.HUDSON_ADMINISTER;\n+\n+    /**\n+     * Allows non-privilege escalating configuration permission for a Jenkins instance.  Actions which could result\n+     * in a privilege  escalation (such as RUN_SCRIPTS) require explicit ADMINISTER permission.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735193c2ecfbea75ba174af96c5b98a052e9ff5f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwMTE5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *\n          \n          \n            \n                 * <p>", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380201191", "createdAt": "2020-02-17T14:07:06Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/model/Jenkins.java", "diffHunk": "@@ -5236,7 +5240,27 @@ private static void computeVersion(ServletContext context) {\n     private static final Logger LOGGER = Logger.getLogger(Jenkins.class.getName());\n \n     public static final PermissionGroup PERMISSIONS = Permission.HUDSON_PERMISSIONS;\n+    /**\n+     * Grants ability to configure any and all aspects of the Jenkins instance\n+     */\n     public static final Permission ADMINISTER = Permission.HUDSON_ADMINISTER;\n+\n+    /**\n+     * Allows non-privilege escalating configuration permission for a Jenkins instance.  Actions which could result\n+     * in a privilege  escalation (such as RUN_SCRIPTS) require explicit ADMINISTER permission.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735193c2ecfbea75ba174af96c5b98a052e9ff5f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwMTQxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * As an experimental feature, making the manage permission able to be disabled by default (keep as ADMINISTER), can\n          \n          \n            \n                 * As an experimental feature, making the manage permission able to be disabled by default (keep as {@link #ADMINISTER}), can", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380201417", "createdAt": "2020-02-17T14:07:34Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/model/Jenkins.java", "diffHunk": "@@ -5236,7 +5240,27 @@ private static void computeVersion(ServletContext context) {\n     private static final Logger LOGGER = Logger.getLogger(Jenkins.class.getName());\n \n     public static final PermissionGroup PERMISSIONS = Permission.HUDSON_PERMISSIONS;\n+    /**\n+     * Grants ability to configure any and all aspects of the Jenkins instance\n+     */\n     public static final Permission ADMINISTER = Permission.HUDSON_ADMINISTER;\n+\n+    /**\n+     * Allows non-privilege escalating configuration permission for a Jenkins instance.  Actions which could result\n+     * in a privilege  escalation (such as RUN_SCRIPTS) require explicit ADMINISTER permission.\n+     *\n+     * As an experimental feature, making the manage permission able to be disabled by default (keep as ADMINISTER), can", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735193c2ecfbea75ba174af96c5b98a052e9ff5f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwMTU1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * be enabled with \"jenkins.security.ManagePermission\" system property.\n          \n          \n            \n                 * be enabled with {@code jenkins.security.ManagePermission} system property.", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380201554", "createdAt": "2020-02-17T14:07:50Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/model/Jenkins.java", "diffHunk": "@@ -5236,7 +5240,27 @@ private static void computeVersion(ServletContext context) {\n     private static final Logger LOGGER = Logger.getLogger(Jenkins.class.getName());\n \n     public static final PermissionGroup PERMISSIONS = Permission.HUDSON_PERMISSIONS;\n+    /**\n+     * Grants ability to configure any and all aspects of the Jenkins instance\n+     */\n     public static final Permission ADMINISTER = Permission.HUDSON_ADMINISTER;\n+\n+    /**\n+     * Allows non-privilege escalating configuration permission for a Jenkins instance.  Actions which could result\n+     * in a privilege  escalation (such as RUN_SCRIPTS) require explicit ADMINISTER permission.\n+     *\n+     * As an experimental feature, making the manage permission able to be disabled by default (keep as ADMINISTER), can\n+     * be enabled with \"jenkins.security.ManagePermission\" system property.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735193c2ecfbea75ba174af96c5b98a052e9ff5f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwMjMzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              that are not expected to impact the overall stability and security of the system.\n          \n          \n            \n              that are not expected to have an impact on the overall stability and security of the system.", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380202332", "createdAt": "2020-02-17T14:09:19Z", "author": {"login": "jglick"}, "path": "core/src/main/resources/hudson/model/Messages.properties", "diffHunk": "@@ -163,6 +163,9 @@ Hudson.AdministerPermission.Description=\\\n   This permission grants the ability to make system-wide configuration changes, \\\n   as well as perform highly sensitive operations that amounts to full local system access \\\n   (within the scope granted by the underlying OS.)\n+Jenkins.Manage.Description=\\\n+  This permission grants the ability to configure parts of the overall system configuration \\\n+  that are not expected to impact the overall stability and security of the system.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735193c2ecfbea75ba174af96c5b98a052e9ff5f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwMjg3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void managerCanNotDisablePlugin() {\n          \n          \n            \n                public void managerCannotDisablePlugin() {", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380202878", "createdAt": "2020-02-17T14:10:23Z", "author": {"login": "jglick"}, "path": "test/src/test/java/jenkins/model/JenkinsManagePermissionTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+package jenkins.model;\n+\n+import java.net.HttpURLConnection;\n+import com.gargoylesoftware.htmlunit.WebResponse;\n+import com.gargoylesoftware.htmlunit.html.HtmlForm;\n+import com.gargoylesoftware.htmlunit.html.HtmlPage;\n+import org.hamcrest.BaseMatcher;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.jvnet.hudson.test.Issue;\n+import org.jvnet.hudson.test.JenkinsRule;\n+import org.jvnet.hudson.test.MockAuthorizationStrategy;\n+import org.jvnet.hudson.test.recipes.WithPlugin;\n+\n+import hudson.PluginWrapper;\n+import hudson.cli.CLICommandInvoker;\n+import hudson.cli.DisablePluginCommand;\n+import hudson.model.Descriptor;\n+import hudson.model.MyView;\n+import hudson.model.View;\n+import hudson.model.labels.LabelAtom;\n+import hudson.tasks.Shell;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import static hudson.cli.CLICommandInvoker.Matcher.failedWith;\n+\n+/**\n+ * As Jenkins.MANAGE can be enabled on startup with jenkins.security.ManagePermission property, we need a test class\n+ * with this property activated.\n+ */\n+// TODO move tests to indicated test classes when we no longer need to set the system property\n+public class JenkinsManagePermissionTest {\n+\n+    @Rule\n+    public JenkinsRule j = new JenkinsRule();\n+\n+    @BeforeClass\n+    public static void enableManagePermission() {\n+        System.setProperty(\"jenkins.security.ManagePermission\", \"true\");\n+    }\n+\n+    @AfterClass\n+    public static void disableManagePermission() {\n+        System.clearProperty(\"jenkins.security.ManagePermission\");\n+    }\n+\n+\n+    // -----------------------------\n+    // DisablePluginCommandTest\n+    @Issue(\"JENKINS-60266\")\n+    @Test\n+    @WithPlugin({ \"depender-0.0.2.hpi\", \"dependee-0.0.2.hpi\"})\n+    public void managerCanNotDisablePlugin() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735193c2ecfbea75ba174af96c5b98a052e9ff5f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwMzIxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // End of HusdonTest\n          \n          \n            \n                // End of HudsonTest", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380203219", "createdAt": "2020-02-17T14:11:02Z", "author": {"login": "jglick"}, "path": "test/src/test/java/jenkins/model/JenkinsManagePermissionTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+package jenkins.model;\n+\n+import java.net.HttpURLConnection;\n+import com.gargoylesoftware.htmlunit.WebResponse;\n+import com.gargoylesoftware.htmlunit.html.HtmlForm;\n+import com.gargoylesoftware.htmlunit.html.HtmlPage;\n+import org.hamcrest.BaseMatcher;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.jvnet.hudson.test.Issue;\n+import org.jvnet.hudson.test.JenkinsRule;\n+import org.jvnet.hudson.test.MockAuthorizationStrategy;\n+import org.jvnet.hudson.test.recipes.WithPlugin;\n+\n+import hudson.PluginWrapper;\n+import hudson.cli.CLICommandInvoker;\n+import hudson.cli.DisablePluginCommand;\n+import hudson.model.Descriptor;\n+import hudson.model.MyView;\n+import hudson.model.View;\n+import hudson.model.labels.LabelAtom;\n+import hudson.tasks.Shell;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import static hudson.cli.CLICommandInvoker.Matcher.failedWith;\n+\n+/**\n+ * As Jenkins.MANAGE can be enabled on startup with jenkins.security.ManagePermission property, we need a test class\n+ * with this property activated.\n+ */\n+// TODO move tests to indicated test classes when we no longer need to set the system property\n+public class JenkinsManagePermissionTest {\n+\n+    @Rule\n+    public JenkinsRule j = new JenkinsRule();\n+\n+    @BeforeClass\n+    public static void enableManagePermission() {\n+        System.setProperty(\"jenkins.security.ManagePermission\", \"true\");\n+    }\n+\n+    @AfterClass\n+    public static void disableManagePermission() {\n+        System.clearProperty(\"jenkins.security.ManagePermission\");\n+    }\n+\n+\n+    // -----------------------------\n+    // DisablePluginCommandTest\n+    @Issue(\"JENKINS-60266\")\n+    @Test\n+    @WithPlugin({ \"depender-0.0.2.hpi\", \"dependee-0.0.2.hpi\"})\n+    public void managerCanNotDisablePlugin() {\n+\n+        //GIVEN a user with Jenkins.MANAGE permission\n+        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n+        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n+        );\n+\n+        //WHEN trying to disable a plugin\n+        assertThat(disablePluginsCLiCommandAs(\"manager\", \"dependee\"), failedWith(6));\n+        //THEN it's refused and the plugin is not disabled.\n+        assertPluginEnabled(\"dependee\");\n+    }\n+\n+    /**\n+     * Disable a list of plugins using the CLI command.\n+     * @param user Username\n+     * @param args Arguments to pass to the command.\n+     * @return Result of the command. 0 if succeed, 16 if some plugin couldn't be disabled due to dependent plugins.\n+     */\n+    private CLICommandInvoker.Result disablePluginsCLiCommandAs(String user, String... args) {\n+        return new CLICommandInvoker(j, new DisablePluginCommand()).asUser(user).invokeWithArgs(args);\n+    }\n+\n+\n+    private void assertPluginEnabled(String name) {\n+        PluginWrapper plugin = j.getPluginManager().getPlugin(name);\n+        assertThat(plugin, is(notNullValue()));\n+        assertTrue(plugin.isEnabled());\n+    }\n+\n+    // End of DisablePluginCommandTest\n+    //-------\n+\n+    // -----------------------------\n+    //ComputerTest\n+    @Issue(\"JENKINS-60266\")\n+    @Test\n+    public void dumpExportTableForbiddenWithoutAdminPermission() throws Exception {\n+        final String READER = \"reader\";\n+        final String MANAGER = \"manager\";\n+        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n+        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.READ).everywhere().to(READER)\n+                .grant(Jenkins.MANAGE).everywhere().to(MANAGER)\n+                .grant(Jenkins.READ).everywhere().to(MANAGER)\n+        );\n+        j.createWebClient().login(READER).assertFails(\"computer/(master)/dumpExportTable\", HttpURLConnection.HTTP_FORBIDDEN);\n+        j.createWebClient().login(MANAGER).assertFails(\"computer/(master)/dumpExportTable\", HttpURLConnection.HTTP_FORBIDDEN);\n+    }\n+\n+    // End of ComputerTest\n+    //-------\n+\n+    // -----------------------------\n+    // HusdonTest\n+    @Issue(\"JENKINS-60266\")\n+    @Test\n+    public void someGlobalConfigurationIsNotDisplayedWithManagePermission() throws Exception {\n+        //GIVEN a user with Jenkins.MANAGE permission\n+        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n+        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.MANAGE, Jenkins.READ).everywhere().toEveryone());\n+\n+        //WHEN the user goes to /configure page\n+        HtmlForm form = j.createWebClient().goTo(\"configure\").getFormByName(\"config\");\n+        String formText = form.asText();\n+        //THEN items restricted to ADMINISTER only should not be displayed.\n+        assertThat(\"Should be able to configure system message\", formText, not(containsString(\"systemMessage\")));\n+        assertThat(\"Should be able to configure project naming strategy\", formText, not(containsString(\"useProjectNamingStrategy\")));\n+        assertThat(\"Shouldn't be able to configure primary view\", formText, not(containsString(\"primaryView\")));\n+        assertThat(\"Shouldn't be able to configure # of executors\", formText, not(containsString(\"executors\")));\n+        assertThat(\"Shouldn't be able to configure Global properties\", formText,\n+                not(containsString(\"Global properties\")));\n+        assertThat(\"Shouldn't be able to configure Administrative monitors\", formText, not(containsString(\n+                \"Administrative \"\n+                        + \"monitors\")));\n+        assertThat(\"Shouldn't be able to configure Shell\", formText, not(containsString(\"Shell\")));\n+    }\n+\n+    @Issue(\"JENKINS-60266\")\n+    @Test\n+    public void someGlobalConfigCanNotBeModifiedWithManagePermission() throws Exception {\n+        j.jenkins.addView(new MyView(\"testView\", j.jenkins));\n+\n+        //GIVEN the Global Configuration Form, with some changes unsaved\n+        int currentNumberExecutors = j.getInstance().getNumExecutors();\n+        String shell = getShell();\n+        View view = j.jenkins.getPrimaryView();\n+        HtmlForm form = j.createWebClient().goTo(\"configure\").getFormByName(\"config\");\n+        form.getInputByName(\"_.numExecutors\").setValueAttribute(\"\"+(currentNumberExecutors+1));\n+        form.getInputByName(\"_.shell\").setValueAttribute(\"/fakeShell\");\n+        form.getSelectByName(\"primaryView\").setSelectedAttribute(\"testView\", true);\n+\n+        // WHEN a user with only Jenkins.MANAGE permission try to save those changes\n+        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n+        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.MANAGE, Jenkins.READ).everywhere().toEveryone());\n+        j.submit(form);\n+        // THEN the changes on fields forbidden to a Jenkins.MANAGE permission are not saved\n+        assertEquals(\"shouldn't be allowed to change the number of executors\", currentNumberExecutors, j.getInstance().getNumExecutors());\n+        assertEquals(\"shouldn't be allowed to change the shell executable\", shell, getShell());\n+        assertEquals(\"shouldn't be allowed to change the primary view\", view, j.getInstance().getPrimaryView());\n+    }\n+\n+    @Issue(\"JENKINS-60266\")\n+    @Test\n+    public void globalConfigAllowedWithManagePermission() throws Exception {\n+        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n+        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.MANAGE, Jenkins.READ).everywhere().toEveryone());\n+\n+        HtmlForm form = j.createWebClient().goTo(\"configure\").getFormByName(\"config\");\n+        HtmlPage updated = j.submit(form);\n+        assertThat(\"User with Jenkins.MANAGE permission should be able to update global configuration\",\n+                updated.getWebResponse(), hasResponseCode(HttpURLConnection.HTTP_OK));\n+    }\n+\n+    private String getShell() {\n+        Descriptor descriptorByName = j.getInstance().getDescriptorByName(\"hudson.tasks.Shell\");\n+        return ((Shell.DescriptorImpl) descriptorByName).getShell();\n+    }\n+\n+    private static Matcher<WebResponse> hasResponseCode(final int httpStatus) {\n+        return new BaseMatcher<WebResponse>() {\n+            @Override\n+            public boolean matches(final Object item) {\n+                final WebResponse response = (WebResponse) item;\n+                return (response.getStatusCode() == httpStatus);\n+            }\n+\n+            @Override\n+            public void describeTo(final Description description) {\n+                description.appendText(\"Jenkins to return  \").appendValue(httpStatus);\n+            }\n+\n+            @Override\n+            public void describeMismatch(Object item, Description description) {\n+                WebResponse response = (WebResponse) item;\n+                description.appendText(\"Response code was: \");\n+                description.appendValue(response.getStatusCode());\n+                description.appendText(\" with error message: \");\n+                description.appendText(response.getStatusMessage());\n+                description.appendText(\"\\n with headers \").appendValueList(\"\", \"\\n    \", \"\", response.getResponseHeaders());\n+                description.appendText(\"\\nPage content: \").appendValue(response.getContentAsString());\n+            }\n+        };\n+    }\n+\n+    // End of HusdonTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735193c2ecfbea75ba174af96c5b98a052e9ff5f"}, "originalPosition": 213}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NzYzNTY2", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-359763566", "createdAt": "2020-02-17T14:14:03Z", "commit": {"oid": "735193c2ecfbea75ba174af96c5b98a052e9ff5f"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDoxNDowNFrOFql3Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDoxODowNlrOFql_fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwNDg3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return permission required for user to access this management link, in addition to {@link Jenkins#ADMINISTER}\n          \n          \n            \n                 * @return permission required for user to access this management link, in addition to {@link Jenkins#MANAGE}", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380204879", "createdAt": "2020-02-17T14:14:04Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -115,7 +115,7 @@ public boolean getRequiresConfirmation() {\n      * @return permission required for user to access this management link, in addition to {@link Jenkins#ADMINISTER}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735193c2ecfbea75ba174af96c5b98a052e9ff5f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwNjk3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380206974", "createdAt": "2020-02-17T14:18:06Z", "author": {"login": "jtnord"}, "path": "test/src/test/java/jenkins/model/JenkinsManagePermissionTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+package jenkins.model;\n+\n+import java.net.HttpURLConnection;\n+import com.gargoylesoftware.htmlunit.WebResponse;\n+import com.gargoylesoftware.htmlunit.html.HtmlForm;\n+import com.gargoylesoftware.htmlunit.html.HtmlPage;\n+import org.hamcrest.BaseMatcher;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.jvnet.hudson.test.Issue;\n+import org.jvnet.hudson.test.JenkinsRule;\n+import org.jvnet.hudson.test.MockAuthorizationStrategy;\n+import org.jvnet.hudson.test.recipes.WithPlugin;\n+\n+import hudson.PluginWrapper;\n+import hudson.cli.CLICommandInvoker;\n+import hudson.cli.DisablePluginCommand;\n+import hudson.model.Descriptor;\n+import hudson.model.MyView;\n+import hudson.model.View;\n+import hudson.model.labels.LabelAtom;\n+import hudson.tasks.Shell;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import static hudson.cli.CLICommandInvoker.Matcher.failedWith;\n+\n+/**\n+ * As Jenkins.MANAGE can be enabled on startup with jenkins.security.ManagePermission property, we need a test class\n+ * with this property activated.\n+ */\n+// TODO move tests to indicated test classes when we no longer need to set the system property\n+public class JenkinsManagePermissionTest {\n+\n+    @Rule\n+    public JenkinsRule j = new JenkinsRule();\n+\n+    @BeforeClass\n+    public static void enableManagePermission() {\n+        System.setProperty(\"jenkins.security.ManagePermission\", \"true\");\n+    }\n+\n+    @AfterClass\n+    public static void disableManagePermission() {\n+        System.clearProperty(\"jenkins.security.ManagePermission\");\n+    }\n+\n+\n+    // -----------------------------\n+    // DisablePluginCommandTest\n+    @Issue(\"JENKINS-60266\")\n+    @Test\n+    @WithPlugin({ \"depender-0.0.2.hpi\", \"dependee-0.0.2.hpi\"})\n+    public void managerCanNotDisablePlugin() {\n+\n+        //GIVEN a user with Jenkins.MANAGE permission\n+        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n+        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n+        );\n+\n+        //WHEN trying to disable a plugin\n+        assertThat(disablePluginsCLiCommandAs(\"manager\", \"dependee\"), failedWith(6));\n+        //THEN it's refused and the plugin is not disabled.\n+        assertPluginEnabled(\"dependee\");\n+    }\n+\n+    /**\n+     * Disable a list of plugins using the CLI command.\n+     * @param user Username\n+     * @param args Arguments to pass to the command.\n+     * @return Result of the command. 0 if succeed, 16 if some plugin couldn't be disabled due to dependent plugins.\n+     */\n+    private CLICommandInvoker.Result disablePluginsCLiCommandAs(String user, String... args) {\n+        return new CLICommandInvoker(j, new DisablePluginCommand()).asUser(user).invokeWithArgs(args);\n+    }\n+\n+\n+    private void assertPluginEnabled(String name) {\n+        PluginWrapper plugin = j.getPluginManager().getPlugin(name);\n+        assertThat(plugin, is(notNullValue()));\n+        assertTrue(plugin.isEnabled());\n+    }\n+\n+    // End of DisablePluginCommandTest\n+    //-------\n+\n+    // -----------------------------\n+    //ComputerTest\n+    @Issue(\"JENKINS-60266\")\n+    @Test\n+    public void dumpExportTableForbiddenWithoutAdminPermission() throws Exception {\n+        final String READER = \"reader\";\n+        final String MANAGER = \"manager\";\n+        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n+        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.READ).everywhere().to(READER)\n+                .grant(Jenkins.MANAGE).everywhere().to(MANAGER)\n+                .grant(Jenkins.READ).everywhere().to(MANAGER)\n+        );\n+        j.createWebClient().login(READER).assertFails(\"computer/(master)/dumpExportTable\", HttpURLConnection.HTTP_FORBIDDEN);\n+        j.createWebClient().login(MANAGER).assertFails(\"computer/(master)/dumpExportTable\", HttpURLConnection.HTTP_FORBIDDEN);\n+    }\n+\n+    // End of ComputerTest\n+    //-------\n+\n+    // -----------------------------\n+    // HusdonTest\n+    @Issue(\"JENKINS-60266\")\n+    @Test\n+    public void someGlobalConfigurationIsNotDisplayedWithManagePermission() throws Exception {\n+        //GIVEN a user with Jenkins.MANAGE permission\n+        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n+        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.MANAGE, Jenkins.READ).everywhere().toEveryone());\n+\n+        //WHEN the user goes to /configure page\n+        HtmlForm form = j.createWebClient().goTo(\"configure\").getFormByName(\"config\");\n+        String formText = form.asText();\n+        //THEN items restricted to ADMINISTER only should not be displayed.\n+        assertThat(\"Should be able to configure system message\", formText, not(containsString(\"systemMessage\")));\n+        assertThat(\"Should be able to configure project naming strategy\", formText, not(containsString(\"useProjectNamingStrategy\")));\n+        assertThat(\"Shouldn't be able to configure primary view\", formText, not(containsString(\"primaryView\")));\n+        assertThat(\"Shouldn't be able to configure # of executors\", formText, not(containsString(\"executors\")));\n+        assertThat(\"Shouldn't be able to configure Global properties\", formText,\n+                not(containsString(\"Global properties\")));\n+        assertThat(\"Shouldn't be able to configure Administrative monitors\", formText, not(containsString(\n+                \"Administrative \"\n+                        + \"monitors\")));\n+        assertThat(\"Shouldn't be able to configure Shell\", formText, not(containsString(\"Shell\")));\n+    }\n+\n+    @Issue(\"JENKINS-60266\")\n+    @Test\n+    public void someGlobalConfigCanNotBeModifiedWithManagePermission() throws Exception {\n+        j.jenkins.addView(new MyView(\"testView\", j.jenkins));\n+\n+        //GIVEN the Global Configuration Form, with some changes unsaved\n+        int currentNumberExecutors = j.getInstance().getNumExecutors();\n+        String shell = getShell();\n+        View view = j.jenkins.getPrimaryView();\n+        HtmlForm form = j.createWebClient().goTo(\"configure\").getFormByName(\"config\");\n+        form.getInputByName(\"_.numExecutors\").setValueAttribute(\"\"+(currentNumberExecutors+1));\n+        form.getInputByName(\"_.shell\").setValueAttribute(\"/fakeShell\");\n+        form.getSelectByName(\"primaryView\").setSelectedAttribute(\"testView\", true);\n+\n+        // WHEN a user with only Jenkins.MANAGE permission try to save those changes\n+        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n+        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.MANAGE, Jenkins.READ).everywhere().toEveryone());\n+        j.submit(form);\n+        // THEN the changes on fields forbidden to a Jenkins.MANAGE permission are not saved\n+        assertEquals(\"shouldn't be allowed to change the number of executors\", currentNumberExecutors, j.getInstance().getNumExecutors());\n+        assertEquals(\"shouldn't be allowed to change the shell executable\", shell, getShell());\n+        assertEquals(\"shouldn't be allowed to change the primary view\", view, j.getInstance().getPrimaryView());\n+    }\n+\n+    @Issue(\"JENKINS-60266\")\n+    @Test\n+    public void globalConfigAllowedWithManagePermission() throws Exception {\n+        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n+        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.MANAGE, Jenkins.READ).everywhere().toEveryone());\n+\n+        HtmlForm form = j.createWebClient().goTo(\"configure\").getFormByName(\"config\");\n+        HtmlPage updated = j.submit(form);\n+        assertThat(\"User with Jenkins.MANAGE permission should be able to update global configuration\",\n+                updated.getWebResponse(), hasResponseCode(HttpURLConnection.HTTP_OK));\n+    }\n+\n+    private String getShell() {\n+        Descriptor descriptorByName = j.getInstance().getDescriptorByName(\"hudson.tasks.Shell\");\n+        return ((Shell.DescriptorImpl) descriptorByName).getShell();\n+    }\n+\n+    private static Matcher<WebResponse> hasResponseCode(final int httpStatus) {\n+        return new BaseMatcher<WebResponse>() {\n+            @Override\n+            public boolean matches(final Object item) {\n+                final WebResponse response = (WebResponse) item;\n+                return (response.getStatusCode() == httpStatus);\n+            }\n+\n+            @Override\n+            public void describeTo(final Description description) {\n+                description.appendText(\"Jenkins to return  \").appendValue(httpStatus);\n+            }\n+\n+            @Override\n+            public void describeMismatch(Object item, Description description) {\n+                WebResponse response = (WebResponse) item;\n+                description.appendText(\"Response code was: \");\n+                description.appendValue(response.getStatusCode());\n+                description.appendText(\" with error message: \");\n+                description.appendText(response.getStatusMessage());\n+                description.appendText(\"\\n with headers \").appendValueList(\"\", \"\\n    \", \"\", response.getResponseHeaders());\n+                description.appendText(\"\\nPage content: \").appendValue(response.getContentAsString());\n+            }\n+        };\n+    }\n+\n+    // End of HusdonTest\n+    //-------\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735193c2ecfbea75ba174af96c5b98a052e9ff5f"}, "originalPosition": 215}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODAwMDA5", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-359800009", "createdAt": "2020-02-17T15:05:40Z", "commit": {"oid": "735193c2ecfbea75ba174af96c5b98a052e9ff5f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODEwMDE1", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-359810015", "createdAt": "2020-02-17T15:19:40Z", "commit": {"oid": "735193c2ecfbea75ba174af96c5b98a052e9ff5f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToxOTo0MFrOFqoChw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToxOTo0MFrOFqoChw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MDUxOQ==", "bodyText": "So an improvement then?", "url": "https://github.com/jenkinsci/jenkins/pull/4501#discussion_r380240519", "createdAt": "2020-02-17T15:19:40Z", "author": {"login": "jvz"}, "path": "core/src/main/java/jenkins/management/NodesLink.java", "diffHunk": "@@ -49,6 +53,12 @@ public String getDescription() {\n         return Messages.NodesLink_Description();\n     }\n \n+    @CheckForNull\n+    @Override\n+    public Permission getRequiredPermission() {\n+        return Jenkins.MANAGE;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4ODEwNA=="}, "originalCommit": {"oid": "55b2bc7f3fe037e46a06deb44b93b02787df28ef"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODQwNzc4", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-359840778", "createdAt": "2020-02-17T16:04:47Z", "commit": {"oid": "735193c2ecfbea75ba174af96c5b98a052e9ff5f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c8a44ca34f084c99f4c3623ad64f87741dff442", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/9c8a44ca34f084c99f4c3623ad64f87741dff442", "committedDate": "2020-02-18T11:41:00Z", "message": "Rename to #getRequiredGlobalConfigPagePermission to disambiguate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "913844de17e7d12f924af3823d58a0bc41fba2ec", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/913844de17e7d12f924af3823d58a0bc41fba2ec", "committedDate": "2020-02-18T13:09:09Z", "message": "Javadoc improvements, improve description of Manage permission"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMzI5NjYz", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-360329663", "createdAt": "2020-02-18T13:20:03Z", "commit": {"oid": "913844de17e7d12f924af3823d58a0bc41fba2ec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0dd37324facffc5bacbebca8cd0b6409893c9c9", "author": {"user": {"login": "daniel-beck", "name": "Daniel Beck"}}, "url": "https://github.com/jenkinsci/jenkins/commit/b0dd37324facffc5bacbebca8cd0b6409893c9c9", "committedDate": "2020-02-18T13:24:24Z", "message": "Adapt annotations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMzQzOTA4", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-360343908", "createdAt": "2020-02-18T13:40:50Z", "commit": {"oid": "b0dd37324facffc5bacbebca8cd0b6409893c9c9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMzUwMDE3", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-360350017", "createdAt": "2020-02-18T13:49:16Z", "commit": {"oid": "b0dd37324facffc5bacbebca8cd0b6409893c9c9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMzcwOTg1", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-360370985", "createdAt": "2020-02-18T14:16:17Z", "commit": {"oid": "b0dd37324facffc5bacbebca8cd0b6409893c9c9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNDEyNDUy", "url": "https://github.com/jenkinsci/jenkins/pull/4501#pullrequestreview-360412452", "createdAt": "2020-02-18T15:05:08Z", "commit": {"oid": "b0dd37324facffc5bacbebca8cd0b6409893c9c9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1561, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}