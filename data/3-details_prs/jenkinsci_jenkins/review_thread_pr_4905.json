{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MTY5NDM5", "number": 4905, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTozOTowNFrOEkc-oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDo0NzoxMVrOEpxW-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjU4OTc3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/hudson/model/RunTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTozOTowNFrOHTZ69w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTo1Njo1N1rOHTzU5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwOTY4Nw==", "bodyText": "Could you create constants for these magic numbers? It's not easy to understand they are related with the number of lines and characters.", "url": "https://github.com/jenkinsci/jenkins/pull/4905#discussion_r490109687", "createdAt": "2020-09-17T09:39:04Z", "author": {"login": "varyvol"}, "path": "core/src/test/java/hudson/model/RunTest.java", "diffHunk": "@@ -262,4 +265,52 @@ public void compareRunsFromDifferentParentsWithSameNumber() throws Exception {\n         assertTrue(r1.compareTo(r2) != 0);\n         assertTrue(treeSet.size() == 2);\n     }\n+\n+    @Test\n+    public void willTriggerLogToStartWithNextFullLine() throws Exception {\n+        assertWriteLogToEquals(\"Sample build output 3.\\nSample build output 4.\\nFinished: SUCCESS.\\n\", 2 * 23 + 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c79230a48b52d581cafff5ad1f0679e79a81d03"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyNTkyNQ==", "bodyText": "Sure thing. I put the whole sample output file to a constant and used its length where possible. I think it should be clear now.", "url": "https://github.com/jenkinsci/jenkins/pull/4905#discussion_r490525925", "createdAt": "2020-09-17T19:56:57Z", "author": {"login": "tszmytka"}, "path": "core/src/test/java/hudson/model/RunTest.java", "diffHunk": "@@ -262,4 +265,52 @@ public void compareRunsFromDifferentParentsWithSameNumber() throws Exception {\n         assertTrue(r1.compareTo(r2) != 0);\n         assertTrue(treeSet.size() == 2);\n     }\n+\n+    @Test\n+    public void willTriggerLogToStartWithNextFullLine() throws Exception {\n+        assertWriteLogToEquals(\"Sample build output 3.\\nSample build output 4.\\nFinished: SUCCESS.\\n\", 2 * 23 + 10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwOTY4Nw=="}, "originalCommit": {"oid": "7c79230a48b52d581cafff5ad1f0679e79a81d03"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjU5NDc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Run.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTo0MDoyMVrOHTZ98w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoxNjoyMVrOHTz8Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExMDQ1MQ==", "bodyText": "I don't think we should use * imports on production code. Could you please revert that? Thanks.", "url": "https://github.com/jenkinsci/jenkins/pull/4905#discussion_r490110451", "createdAt": "2020-09-17T09:40:21Z", "author": {"login": "alecharp"}, "path": "core/src/main/java/hudson/model/Run.java", "diffHunk": "@@ -41,6 +41,8 @@\n import hudson.console.ConsoleNote;\n import hudson.console.ModelHyperlinkNote;\n import hudson.console.PlainTextConsoleOutputStream;\n+\n+import java.io.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c79230a48b52d581cafff5ad1f0679e79a81d03"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNTk3NA==", "bodyText": "That's just the IDE trying to bring a bit of order, but ok - I reverted that.\nIs there a style guide published anywhere? Or a \"Recommended IDE settings\" page that I could go through? The conventions get hard to follow very quickly as different parts of the code base seem to hold to different standards.", "url": "https://github.com/jenkinsci/jenkins/pull/4905#discussion_r490535974", "createdAt": "2020-09-17T20:16:21Z", "author": {"login": "tszmytka"}, "path": "core/src/main/java/hudson/model/Run.java", "diffHunk": "@@ -41,6 +41,8 @@\n import hudson.console.ConsoleNote;\n import hudson.console.ModelHyperlinkNote;\n import hudson.console.PlainTextConsoleOutputStream;\n+\n+import java.io.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExMDQ1MQ=="}, "originalCommit": {"oid": "7c79230a48b52d581cafff5ad1f0679e79a81d03"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjM1NzY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/Run.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDo0NzoxMVrOHbpQKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMzoxMjowOFrOHcBgeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0OTQ4Mg==", "bodyText": "So it will print the entire log if we hit the end of the stream, which defeats purpose of offset for large logs. Should not be a problem for real use-cases, but we might want to retain original behavior.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    start = (r == -1)? 0 : start + 1;\n          \n          \n            \n                                    start = (r == -1)? 0 : offset + 1;", "url": "https://github.com/jenkinsci/jenkins/pull/4905#discussion_r498749482", "createdAt": "2020-10-02T10:47:11Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Run.java", "diffHunk": "@@ -1538,7 +1539,19 @@ public String toString() {\n      * @since 1.349\n      */\n     public void writeLogTo(long offset, @NonNull XMLOutput out) throws IOException {\n-        getLogText().writeHtmlTo(offset, out.asWriter());\n+        long start = offset;\n+        if (offset > 0) {\n+            try (BufferedInputStream bufferedInputStream = new BufferedInputStream(getLogInputStream())) {\n+                if (offset == bufferedInputStream.skip(offset)) {\n+                    int r;\n+                    do {\n+                        r = bufferedInputStream.read();\n+                        start = (r == -1)? 0 : start + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e7100202060f4511844f1fc518b67a537faa7d5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0Njg3NA==", "bodyText": "The code change is not clear to me. My idea was to advance the start position for each byte that is different than \\n. What this change would do is re-set start to the value of offset + 1 multiple times - offset doesn't get updated anywhere. Can you please explain what you had in mind?\nThis immediately breaks 2 tests which I think are valid use cases.", "url": "https://github.com/jenkinsci/jenkins/pull/4905#discussion_r499146874", "createdAt": "2020-10-03T13:12:08Z", "author": {"login": "tszmytka"}, "path": "core/src/main/java/hudson/model/Run.java", "diffHunk": "@@ -1538,7 +1539,19 @@ public String toString() {\n      * @since 1.349\n      */\n     public void writeLogTo(long offset, @NonNull XMLOutput out) throws IOException {\n-        getLogText().writeHtmlTo(offset, out.asWriter());\n+        long start = offset;\n+        if (offset > 0) {\n+            try (BufferedInputStream bufferedInputStream = new BufferedInputStream(getLogInputStream())) {\n+                if (offset == bufferedInputStream.skip(offset)) {\n+                    int r;\n+                    do {\n+                        r = bufferedInputStream.read();\n+                        start = (r == -1)? 0 : start + 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0OTQ4Mg=="}, "originalCommit": {"oid": "2e7100202060f4511844f1fc518b67a537faa7d5"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 374, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}