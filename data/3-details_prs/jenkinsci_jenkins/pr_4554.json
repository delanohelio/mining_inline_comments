{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MjY4MjIx", "number": 4554, "title": "Update .NET version checks to be more correct when Windows services when installing master and agent on platforms with modern .NET versions", "bodyText": "We do not require JIRA issues for minor improvements.\n\nNo functional changes will be involved if this class is only used internally.\n\n.NET 1.0 and .NET 1.1 are compatible.\n.NET 2.0, .NET 3.0 and .NET 3.5 are compatible.\n.NET 4.0 and later versions are compatible.\n\nFor more information on version checks, see How to: Determine which .NET Framework versions are installed.\nThis change has no tests because CI runs on Linux.\nProposed changelog entries\n\nUpdate supported .NET version checks to be more correct when Windows services when installing master and agent on platforms with modern .NET versions\n\nProposed upgrade guidelines\nN/A\nSubmitter checklist\n\n JIRA issue is well described\n Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). Examples\n\nFill-in the Proposed changelog entries section only if there are breaking changes or other changes which may require extra steps from users during the upgrade\n\n\n Appropriate autotests or explanation to why this change has no tests\n For dependency updates: links to external changelogs and, if possible, full diffs\n\n\nDesired reviewers\n/cc @oleg-nenashev\nMaintainer checklist\nBefore the changes are marked as ready-for-merge:\n\n There are at least 2 approvals for the pull request and no outstanding requests for change\n Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n Changelog entries in the PR title and/or Proposed changelog entries are correct\n Proper changelog labels are set so that the changelog can be generated automatically\n If the change needs additional upgrade steps from users, upgrade-guide-needed label is set and there is a Proposed upgrade guidelines section in the PR title. (example)\n If it would make sense to backport the change to LTS, a JIRA issue should exist and be labeled as lts-candidate", "createdAt": "2020-03-08T13:42:45Z", "url": "https://github.com/jenkinsci/jenkins/pull/4554", "merged": true, "mergeCommit": {"oid": "afd119b908ef110a8bbf5c4f6b313f602fdb5997"}, "closed": true, "closedAt": "2020-03-28T09:04:19Z", "author": {"login": "nxtn"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLp5lJgBqjMxMDg0NDQyODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRDNGSgFqTM4MDkzNjQxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a31b621bd3eae23611a095d51ace7daa973d7f8", "author": {"user": {"login": "nxtn", "name": "Next Turn"}}, "url": "https://github.com/jenkinsci/jenkins/commit/8a31b621bd3eae23611a095d51ace7daa973d7f8", "committedDate": "2020-03-08T13:31:43Z", "message": "Update .NET version checks to be more correct"}, "afterCommit": {"oid": "38207623baf7f25e349cab17a30bb7b752385c54", "author": {"user": {"login": "nxtn", "name": "Next Turn"}}, "url": "https://github.com/jenkinsci/jenkins/commit/38207623baf7f25e349cab17a30bb7b752385c54", "committedDate": "2020-03-08T14:08:01Z", "message": "Update .NET version checks to be more correct"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "38207623baf7f25e349cab17a30bb7b752385c54", "author": {"user": {"login": "nxtn", "name": "Next Turn"}}, "url": "https://github.com/jenkinsci/jenkins/commit/38207623baf7f25e349cab17a30bb7b752385c54", "committedDate": "2020-03-08T14:08:01Z", "message": "Update .NET version checks to be more correct"}, "afterCommit": {"oid": "f3fcca999243ad9b43752068cb274e4fe79d6c37", "author": {"user": {"login": "nxtn", "name": "Next Turn"}}, "url": "https://github.com/jenkinsci/jenkins/commit/f3fcca999243ad9b43752068cb274e4fe79d6c37", "committedDate": "2020-03-08T14:27:29Z", "message": "Update .NET version checks to be more correct"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzYxMDQ1", "url": "https://github.com/jenkinsci/jenkins/pull/4554#pullrequestreview-371761045", "createdAt": "2020-03-10T08:42:24Z", "commit": {"oid": "f3fcca999243ad9b43752068cb274e4fe79d6c37"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo0MjoyNFrOF0FkHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo0Njo1MVrOF0FsXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MTQzNw==", "bodyText": "There is some duplication below which could be prevented IMHO. Not a blocker", "url": "https://github.com/jenkinsci/jenkins/pull/4554#discussion_r390161437", "createdAt": "2020-03-10T08:42:24Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/util/jna/DotNet.java", "diffHunk": "@@ -30,83 +30,232 @@\n import org.jinterop.winreg.JIWinRegFactory;\n \n import java.net.UnknownHostException;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n /**\n  * .NET related code.\n  * \n  * @author Kohsuke Kawaguchi\n  */\n public class DotNet {\n+    private static final String PATH10 = \"SOFTWARE\\\\Microsoft\\\\.NETFramework\\\\Policy\\\\v1.0\\\\3705\";\n+    private static final String PATH11 = \"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v1.1.4322\";\n+    private static final String PATH20 = \"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v2.0.50727\";\n+    private static final String PATH30 = \"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v3.0\\\\Setup\";\n+    private static final String PATH35 = \"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v3.5\";\n+    private static final String PATH4  = \"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\";\n+\n+    private static final String VALUE_INSTALL = \"Install\";\n+    private static final String VALUE_INSTALL_SUCCESS = \"InstallSuccess\";\n+    private static final String VALUE_RELEASE = \"Release\";\n+\n     /**\n-     * Returns true if the .NET framework of the given version (or greater) is installed.\n+     * Returns true if the .NET framework of a compatible version is installed.\n      */\n     public static boolean isInstalled(int major, int minor) {\n         try {\n-            // see http://support.microsoft.com/?scid=kb;en-us;315291 for the basic algorithm\n-            // observation in my registry shows that the actual key name can be things like \"v2.0 SP1\"\n-            // or \"v2.0.50727\", so the regexp is written to accommodate this.\n-            RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(\"SOFTWARE\\\\Microsoft\\\\.NETFramework\");\n-            try {\n-                for( String keyName : key.getSubKeys() ) {\n-                    if (matches(keyName, major, minor))\n-                        return true;\n-                }\n+            if (major == 4 && minor >= 5) {\n+                return isV45PlusInstalled(minor);\n+            } else if (major == 4 && minor == 0) {\n+                return isV40Installed();\n+            } else if (major == 3 && minor == 5) {\n+                return isV35Installed();\n+            } else if (major == 3 && minor == 0) {\n+                return isV35Installed() || isV30Installed();\n+            } else if (major == 2 && minor == 0) {\n+                return isV35Installed() || isV30Installed() || isV20Installed();\n+            } else if (major == 1 && minor == 1) {\n+                return isV11Installed();\n+            } else if (major == 1 && minor == 0) {\n+                return isV11Installed() || isV10Installed();\n+            } else {\n                 return false;\n-            } finally {\n-                key.dispose();\n             }\n         } catch (JnaException e) {\n-            if(e.getErrorCode()==2) // thrown when openReadonly fails because the key doesn't exist.\n+            if (e.getErrorCode() == 2) {\n+                // thrown when openReadonly fails because the key doesn't exist.\n                 return false;\n+            }\n             throw e;\n         }\n     }\n \n+    private static boolean isV45PlusInstalled(int minor) {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH4)) {\n+            return key.getIntValue(VALUE_RELEASE) >= GetV45PlusMinRelease(minor);\n+        }\n+    }\n+\n+    private static boolean isV40Installed() {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH4)) {\n+            return key.getIntValue(VALUE_INSTALL) == 1;\n+        }\n+    }\n+\n+    private static boolean isV35Installed() {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH35)) {\n+            return key.getIntValue(VALUE_INSTALL) == 1;\n+        }\n+    }\n+\n+    private static boolean isV30Installed() {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH30)) {\n+            return key.getIntValue(VALUE_INSTALL_SUCCESS) == 1;\n+        }\n+    }\n+\n+    private static boolean isV20Installed() {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH20)) {\n+            return key.getIntValue(VALUE_INSTALL) == 1;\n+        }\n+    }\n+\n+    private static boolean isV11Installed() {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH11)) {\n+            return key.getIntValue(VALUE_INSTALL) == 1;\n+        }\n+    }\n+\n+    private static boolean isV10Installed() {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH10)) {\n+            return key.getStringValue(VALUE_INSTALL) == \"1\";\n+        }\n+    }\n+\n     /**\n-     * Returns true if the .NET framework of the given version (or grater) is installed\n-     * on a remote machine. \n+     * Returns true if the .NET framework of a compatible version is installed on a remote machine. \n      */\n     public static boolean isInstalled(int major, int minor, String targetMachine, IJIAuthInfo session) throws JIException, UnknownHostException {\n-        IJIWinReg registry = JIWinRegFactory.getSingleTon().getWinreg(session,targetMachine,true);\n-        JIPolicyHandle hklm=null;\n-        JIPolicyHandle key=null;\n-\n+        IJIWinReg registry = JIWinRegFactory.getSingleTon().getWinreg(session, targetMachine, true);\n+        JIPolicyHandle hklm = null;\n         try {\n             hklm = registry.winreg_OpenHKLM();\n-            key = registry.winreg_OpenKey(hklm,\"SOFTWARE\\\\Microsoft\\\\.NETFramework\", IJIWinReg.KEY_READ );\n-\n-            for( int i=0; ; i++ ) {\n-                String keyName = registry.winreg_EnumKey(key,i)[0];\n-                if(matches(keyName,major,minor))\n-                    return true;\n+            if (major == 4 && minor >= 5) {\n+                return isV45PlusInstalled(minor, registry, hklm);\n+            } else if (major == 4 && minor == 0) {\n+                return isV40Installed(registry, hklm);\n+            } else if (major == 3 && minor == 5) {\n+                return isV35Installed(registry, hklm);\n+            } else if (major == 3 && minor == 0) {\n+                return isV35Installed(registry, hklm) || isV30Installed(registry, hklm);\n+            } else if (major == 2 && minor == 0) {\n+                return isV35Installed(registry, hklm) || isV30Installed(registry, hklm) || isV20Installed(registry, hklm);\n+            } else if (major == 1 && minor == 1) {\n+                return isV11Installed(registry, hklm);\n+            } else if (major == 1 && minor == 0) {\n+                return isV11Installed(registry, hklm) || isV10Installed(registry, hklm);\n+            } else {\n+                return false;\n             }\n         } catch (JIException e) {\n-            if(e.getErrorCode()==2)\n-                return false;       // not found\n+            if (e.getErrorCode() == 2) {\n+                // not found\n+                return false;\n+            }\n             throw e;\n         } finally {\n-            if(hklm!=null)\n+            if (hklm != null) {\n                 registry.winreg_CloseKey(hklm);\n-            if(key!=null)\n-                registry.winreg_CloseKey(key);\n+            }\n             registry.closeConnection();\n         }\n     }\n \n-    private static boolean matches(String keyName, int major, int minor) {\n-        Matcher m = VERSION_PATTERN.matcher(keyName);\n-        if(m.matches()) {\n-            int mj = Integer.parseInt(m.group(1));\n-            if(mj>=major) {\n-                int mn = Integer.parseInt(m.group(2));\n-                if(mn>=minor)\n-                    return true;\n+    private static boolean isV45PlusInstalled(int minor, IJIWinReg registry, JIPolicyHandle hklm) throws JIException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3fcca999243ad9b43752068cb274e4fe79d6c37"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MzU0OA==", "bodyText": "It is used in  3 plugins outside the Jenkins core: https://github.com/search?q=org%3Ajenkinsci+%22hudson.util.jna.RegistryKey%22&type=Code . All of them implement try/catch properly, but I agree this enhancement would help. Maybe we should note it in the a developer API changelog entry, but it is fairly minor", "url": "https://github.com/jenkinsci/jenkins/pull/4554#discussion_r390163548", "createdAt": "2020-03-10T08:46:51Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/util/jna/RegistryKey.java", "diffHunk": "@@ -27,7 +27,7 @@\n  *\n  * @author Kohsuke Kawaguchi\n  */\n-public class RegistryKey {\n+public class RegistryKey implements AutoCloseable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3fcca999243ad9b43752068cb274e4fe79d6c37"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "330b7f9121871515a31e1d53ae72c4fd6cf94f99", "author": {"user": {"login": "nxtn", "name": "Next Turn"}}, "url": "https://github.com/jenkinsci/jenkins/commit/330b7f9121871515a31e1d53ae72c4fd6cf94f99", "committedDate": "2020-03-11T08:39:44Z", "message": "Update .NET version checks to be more correct"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3fcca999243ad9b43752068cb274e4fe79d6c37", "author": {"user": {"login": "nxtn", "name": "Next Turn"}}, "url": "https://github.com/jenkinsci/jenkins/commit/f3fcca999243ad9b43752068cb274e4fe79d6c37", "committedDate": "2020-03-08T14:27:29Z", "message": "Update .NET version checks to be more correct"}, "afterCommit": {"oid": "330b7f9121871515a31e1d53ae72c4fd6cf94f99", "author": {"user": {"login": "nxtn", "name": "Next Turn"}}, "url": "https://github.com/jenkinsci/jenkins/commit/330b7f9121871515a31e1d53ae72c4fd6cf94f99", "committedDate": "2020-03-11T08:39:44Z", "message": "Update .NET version checks to be more correct"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMjYyNTcx", "url": "https://github.com/jenkinsci/jenkins/pull/4554#pullrequestreview-371262571", "createdAt": "2020-03-09T15:04:37Z", "commit": {"oid": "f3fcca999243ad9b43752068cb274e4fe79d6c37"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTowNDozOFrOFzseSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTowNDozOFrOFzseSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc1MDM0NA==", "bodyText": "Do we really need to worry about 1.0 or other REALLY old frameworks?", "url": "https://github.com/jenkinsci/jenkins/pull/4554#discussion_r389750344", "createdAt": "2020-03-09T15:04:38Z", "author": {"login": "slide"}, "path": "core/src/main/java/hudson/util/jna/DotNet.java", "diffHunk": "@@ -30,83 +30,232 @@\n import org.jinterop.winreg.JIWinRegFactory;\n \n import java.net.UnknownHostException;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n /**\n  * .NET related code.\n  * \n  * @author Kohsuke Kawaguchi\n  */\n public class DotNet {\n+    private static final String PATH10 = \"SOFTWARE\\\\Microsoft\\\\.NETFramework\\\\Policy\\\\v1.0\\\\3705\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3fcca999243ad9b43752068cb274e4fe79d6c37"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwOTMyODYy", "url": "https://github.com/jenkinsci/jenkins/pull/4554#pullrequestreview-380932862", "createdAt": "2020-03-25T08:20:53Z", "commit": {"oid": "330b7f9121871515a31e1d53ae72c4fd6cf94f99"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwOTM2NDE0", "url": "https://github.com/jenkinsci/jenkins/pull/4554#pullrequestreview-380936414", "createdAt": "2020-03-25T08:26:49Z", "commit": {"oid": "330b7f9121871515a31e1d53ae72c4fd6cf94f99"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1262, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}