{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MjQ4MDkw", "number": 4766, "title": "JENKINS-29144: Enable proper environment access for build steps", "bodyText": "See JENKINS-29144.\nThis extends SimpleBuildStep with an overload of perform() that takes an EnvVars.\nUses default implementation of both (as is done in other places) to deal with both old-implementer-called-by-new-client and new-implemented-called-by-old-client.\nThis change on its own does very little, by design.\nThe main fix for the ticket would come from a corresponding change in CoreStep, in the workflow-basic-steps-plugin, to make that pass the EnvVars from the step context.\nIn particular, I did NOT make a change to BuildStepCompatibilityLayer or any other users of SimpleBuildStep.\nThis is mainly because they would then need to be made more step-aware (specifically: no expansions should be done when the environment comes from a pipeline step).\nIf desired, I could add such changes to this PR, but leaving things as they are preserves the current behaviour of those steps just fine.\nI added a small test case, to check whether a step implementing the new API receives the expected environment; but that isn't much of a test (in a FreeStyle build it would have had access to it via the Run object already). The real test is in the pipeline context.\nDownstream PR jenkinsci/workflow-basic-steps-plugin#116\nProposed changelog entries\n\nJENKINS-29144, Plugins can now more easily add support for using build steps in pipelines with access to the appropriate environment variables (such as from tools/environment blocks or steps like withEnv).\nThe fingerprint and archiveArtifacts pipeline steps will no longer apply any environment substitution.\n\nProposed upgrade guidelines\nN/A\nSubmitter checklist\n\n (If applicable) Jira issue is well described\n Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). Examples\n\nFill-in the Proposed changelog entries section only if there are breaking changes or other changes which may require extra steps from users during the upgrade Shouldn't that be the Proposed upgrade guidelines section?\n\n\n Appropriate autotests or explanation to why this change has no tests\n For dependency updates: links to external changelogs and, if possible, full diffs\n\nDesired reviewers\n@jglick\nMaintainer checklist\nBefore the changes are marked as ready-for-merge:\n\n There are at least 2 approvals for the pull request and no outstanding requests for change\n Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n Changelog entries in the PR title and/or Proposed changelog entries are correct\n Proper changelog labels are set so that the changelog can be generated automatically\n If the change needs additional upgrade steps from users, upgrade-guide-needed label is set and there is a Proposed upgrade guidelines section in the PR title. (example)\n If it would make sense to backport the change to LTS, a Jira issue must exist, be a Bug or Improvement, and be labeled as lts-candidate to be considered (see query).", "createdAt": "2020-06-01T22:30:38Z", "url": "https://github.com/jenkinsci/jenkins/pull/4766", "merged": true, "mergeCommit": {"oid": "302159c0e89524259de6ab1c5e7f795f6a8c66cf"}, "closed": true, "closedAt": "2020-06-13T12:00:38Z", "author": {"login": "Zastai"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnHpFEAH2gAyNDI2MjQ4MDkwOjFkYjM5ZjRhNGYxZjkxN2ZjNzM1MmNmYzhiNjdiOWFhMThlOWE0YzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyjkvNAFqTQ0Mzc3NjI1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1db39f4a4f1f917fc7352cfc8b67b9aa18e9a4c5", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/1db39f4a4f1f917fc7352cfc8b67b9aa18e9a4c5", "committedDate": "2020-06-01T22:03:20Z", "message": "[JENKINS-29144] Add perform() taking EnvVars to SimpleBuildStep\n\nProvides a default implementation for both overloads:\n- if the old method is called, it forwards to the new method, passing\n  the environment specified for the Run\n  - this means that when a new implementer (who has overridden the new\n    overload) gets called by an old client, they get the run\n    environment only (fine for freestyle, only the initial environment\n    in a pipeline)\n- if the new method is called, it forwards to the old method, ignoring\n  the passed environment\n  - in this case, the old method MUST be overridden\n  - this handles the case of an old implementer getting called by a\n    new client\n    - no change in functionality; implementer still gets the same\n      environment to work with (via the Run)\n\nBuildStepCompatibilityLayer has _not_ been changed yet to call the new\noverload, mainly because it would just get the environment to pass the\nsame way the default implementation in SimpleBuildStep does (i.e.\npassing the result of calling getEnvironment() on the Run).\n\nImplementers of SimpleBuildStep (like ArtifactArchiver and\nFingerprinter) similarly have _not_ been changed. This is mainly\nbecause they get Run's environment to apply substitution, and that\nshould not be done using an environment passed in from a pipeline\nstep. So if they switch to the new signature, their code should also\nbe adjusted to only expand environment variables when the Run is an\nAbstractBuild.\n\nWith this change, a PR can be made to workflow-basic-steps-plugin,\nto extend CoreStep to pass in the environment variables from the\nstep context. The combination of both PRs should then fix\nJENKINS-29144 and allow the creation of Builders that are\nautomatically available as pipeline steps with proper honoring of\nthings like withEnv and global tools."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbc5f5d7a1c0b045400a8ab4749d0b852072ad65", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/fbc5f5d7a1c0b045400a8ab4749d0b852072ad65", "committedDate": "2020-06-01T22:03:56Z", "message": "[JENKINS-29144] Add a test for the SimpleBuildStep changes\n\nThis currently just checks for a slave-level environment variable;\nnot sure if that is enough."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjUxNTcy", "url": "https://github.com/jenkinsci/jenkins/pull/4766#pullrequestreview-422251572", "createdAt": "2020-06-01T23:44:14Z", "commit": {"oid": "fbc5f5d7a1c0b045400a8ab4749d0b852072ad65"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzo0NDoxNVrOGddg7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzo0NTowNVrOGddhtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU0NTQ1Mw==", "bodyText": "There are a couple of implementations inside core which should be adapted, though they would ignore the EnvVars argument.", "url": "https://github.com/jenkinsci/jenkins/pull/4766#discussion_r433545453", "createdAt": "2020-06-01T23:44:15Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -80,9 +82,37 @@\n      * @param listener a place to send output\n      * @throws InterruptedException if the step is interrupted\n      * @throws IOException if something goes wrong; use {@link AbortException} for a polite error\n+     * @deprecated Use {@link #perform(Run, FilePath, EnvVars, Launcher, TaskListener) instead.}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbc5f5d7a1c0b045400a8ab4749d0b852072ad65"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU0NTY1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @TestExtension(\"jenkins29144\")\n          \n          \n            \n                    @TestExtension\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @TestExtension(\"jenkins29144\")\n          \n          \n            \n                    @TestExtension(\"builderReceivesEnvVars\")", "url": "https://github.com/jenkinsci/jenkins/pull/4766#discussion_r433545654", "createdAt": "2020-06-01T23:45:05Z", "author": {"login": "jglick"}, "path": "test/src/test/java/jenkins/tasks/SimpleBuildStepTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package jenkins.tasks;\n+\n+import hudson.EnvVars;\n+import hudson.FilePath;\n+import hudson.Launcher;\n+import hudson.model.AbstractBuild;\n+import hudson.model.AbstractProject;\n+import hudson.model.Action;\n+import hudson.model.Build;\n+import hudson.model.BuildListener;\n+import hudson.model.FreeStyleBuild;\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Label;\n+import hudson.model.ParametersAction;\n+import hudson.model.Project;\n+import hudson.model.Run;\n+import hudson.model.Slave;\n+import hudson.model.StringParameterValue;\n+import hudson.model.TaskListener;\n+import hudson.tasks.BuildStep;\n+import hudson.tasks.BuildStepDescriptor;\n+import hudson.tasks.Builder;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.jvnet.hudson.test.Issue;\n+import org.jvnet.hudson.test.JenkinsRule;\n+import org.jvnet.hudson.test.TestExtension;\n+\n+public class SimpleBuildStepTest {\n+\n+    private static class StepThatGetsEnvironmentContents extends Builder implements SimpleBuildStep {\n+\n+        @Override\n+        public void perform(@Nonnull Run<?, ?> run, @Nonnull FilePath workspace, @Nonnull EnvVars env, @Nonnull Launcher launcher, @Nonnull TaskListener listener) throws InterruptedException, IOException {\n+            // Check that the environment we get includes values from the slave\n+            Assert.assertEquals(\"JENKINS-29144\", env.get(\"TICKET\"));\n+            // FIXME: Should this test any other envvars? Or Parameters?\n+        }\n+\n+        @TestExtension(\"jenkins29144\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbc5f5d7a1c0b045400a8ab4749d0b852072ad65"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95c74696b1e6d404848f1113955c44c50af32c0c", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/95c74696b1e6d404848f1113955c44c50af32c0c", "committedDate": "2020-06-02T20:37:30Z", "message": "Apply suggested code change\n\nCo-authored-by: Jesse Glick <jglick@cloudbees.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e413c40d28a79828d089a1225468f3bd45eff9b", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/5e413c40d28a79828d089a1225468f3bd45eff9b", "committedDate": "2020-06-02T20:44:36Z", "message": "[JENKINS-29144] Update BuildStepCompatibilityLayer to use the new SimpleBuildStep API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d12c9cb7771e8a894c04b66bf81a94b60d2d67b", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/4d12c9cb7771e8a894c04b66bf81a94b60d2d67b", "committedDate": "2020-06-02T20:52:36Z", "message": "[JENKINS-29144] Update ArtifactArchiver and Fingerprinter to use the new SimpleBuildStep API\n\nBoth will only use the environment for substitution when the Run being passed is an AbstractBuild, following the guidelines that for pipelines, the user does their own substitution in Groovy.\nThis causes a small behaviour change; before, even in pipelines, substitution would be done by these steps using the (tiny) initial environment."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDUxNzQz", "url": "https://github.com/jenkinsci/jenkins/pull/4766#pullrequestreview-423051743", "createdAt": "2020-06-02T20:57:01Z", "commit": {"oid": "4d12c9cb7771e8a894c04b66bf81a94b60d2d67b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo1NzowMVrOGeDscQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo1NzozMlrOGeDtdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MDk5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (build instanceof AbstractBuild) // no expansion in pipelines\n          \n          \n            \n                            artifacts = environment.expand(artifacts);\n          \n          \n            \n                        if (build instanceof AbstractBuild) { // no expansion in pipelines\n          \n          \n            \n                            artifacts = environment.expand(artifacts);\n          \n          \n            \n                        }", "url": "https://github.com/jenkinsci/jenkins/pull/4766#discussion_r434170993", "createdAt": "2020-06-02T20:57:01Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/tasks/ArtifactArchiver.java", "diffHunk": "@@ -245,7 +247,9 @@ public void perform(Run<?,?> build, FilePath ws, Launcher launcher, TaskListener\n \n         listener.getLogger().println(Messages.ArtifactArchiver_ARCHIVING_ARTIFACTS());\n         try {\n-            String artifacts = build.getEnvironment(listener).expand(this.artifacts);\n+            String artifacts = this.artifacts;\n+            if (build instanceof AbstractBuild) // no expansion in pipelines\n+                artifacts = environment.expand(artifacts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d12c9cb7771e8a894c04b66bf81a94b60d2d67b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MTI1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (build instanceof AbstractBuild) // no expansion for pipelines\n          \n          \n            \n                                expandedTargets = environment.expand(expandedTargets);\n          \n          \n            \n                            if (build instanceof AbstractBuild) { // no expansion for pipelines\n          \n          \n            \n                                expandedTargets = environment.expand(expandedTargets);\n          \n          \n            \n                            }", "url": "https://github.com/jenkinsci/jenkins/pull/4766#discussion_r434171252", "createdAt": "2020-06-02T20:57:32Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/tasks/Fingerprinter.java", "diffHunk": "@@ -168,15 +168,16 @@ public boolean getRecordBuildArtifacts() {\n     }\n \n     @Override\n-    public void perform(Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws InterruptedException {\n+    public void perform(Run<?,?> build, FilePath workspace, EnvVars environment, Launcher launcher, TaskListener listener) throws InterruptedException {\n         try {\n             listener.getLogger().println(Messages.Fingerprinter_Recording());\n \n             Map<String,String> record = new HashMap<>();\n             \n-            EnvVars environment = build.getEnvironment(listener);\n             if(targets.length()!=0) {\n-                String expandedTargets = environment.expand(targets);\n+                String expandedTargets = targets;\n+                if (build instanceof AbstractBuild) // no expansion for pipelines\n+                    expandedTargets = environment.expand(expandedTargets);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d12c9cb7771e8a894c04b66bf81a94b60d2d67b"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDU2NzYx", "url": "https://github.com/jenkinsci/jenkins/pull/4766#pullrequestreview-423056761", "createdAt": "2020-06-02T21:04:59Z", "commit": {"oid": "4d12c9cb7771e8a894c04b66bf81a94b60d2d67b"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTowNTowMFrOGeD7iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTowNjo0M1rOGeD-sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3NDg1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!Util.isOverridden(SimpleBuildStep.class, this.getClass(),\n          \n          \n            \n                            \"perform\", Run.class, FilePath.class, Launcher.class, TaskListener.class)) {\n          \n          \n            \n                        throw new AbstractMethodError();\n          \n          \n            \n                    }\n          \n          \n            \n                    this.perform(run, workspace, launcher, listener);\n          \n          \n            \n                    if (Util.isOverridden(SimpleBuildStep.class, this.getClass(),\n          \n          \n            \n                            \"perform\", Run.class, FilePath.class, Launcher.class, TaskListener.class)) {\n          \n          \n            \n                        this.perform(run, workspace, launcher, listener);\n          \n          \n            \n                    } else {\n          \n          \n            \n                        throw new AbstractMethodError();\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nmay be easier to follow", "url": "https://github.com/jenkinsci/jenkins/pull/4766#discussion_r434174856", "createdAt": "2020-06-02T21:05:00Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -80,9 +82,37 @@\n      * @param listener a place to send output\n      * @throws InterruptedException if the step is interrupted\n      * @throws IOException if something goes wrong; use {@link AbortException} for a polite error\n+     * @deprecated Use {@link #perform(Run, FilePath, EnvVars, Launcher, TaskListener) instead.}\n      */\n-    void perform(@NonNull Run<?,?> run, @NonNull FilePath workspace, @NonNull Launcher launcher,\n-                 @NonNull TaskListener listener) throws InterruptedException, IOException;\n+    @Deprecated\n+    default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNull Launcher launcher,\n+                         @NonNull TaskListener listener) throws InterruptedException, IOException {\n+        // No additional environment available; just use that from the Run.\n+        this.perform(run, workspace, run.getEnvironment(listener), launcher, listener);\n+    }\n+\n+    /**\n+     * Run this step.\n+     * @param run a build this is running as a part of\n+     * @param workspace a workspace to use for any file operations\n+     * @param env environment variables applicable to this step\n+     * @param launcher a way to start processes\n+     * @param listener a place to send output\n+     * @throws InterruptedException if the step is interrupted\n+     * @throws IOException if something goes wrong; use {@link AbortException} for a polite error\n+     * @since 2.2xx\n+     */\n+    default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNull EnvVars env, @NonNull Launcher launcher,\n+                         @NonNull TaskListener listener) throws InterruptedException, IOException {\n+        // If this is called, this must be an implementer of the previous API, in which case we call that, discarding\n+        // the environment we were given.\n+        // But for that to work, that API method must have been implemented.\n+        if (!Util.isOverridden(SimpleBuildStep.class, this.getClass(),\n+                \"perform\", Run.class, FilePath.class, Launcher.class, TaskListener.class)) {\n+            throw new AbstractMethodError();\n+        }\n+        this.perform(run, workspace, launcher, listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d12c9cb7771e8a894c04b66bf81a94b60d2d67b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3NTM3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // FIXME: Should this test any other envvars? Or Parameters?\n          \n      \n    \n    \n  \n\nI suggested ParametersAction as a somewhat simpler test setup, but I do not suppose it really matters.", "url": "https://github.com/jenkinsci/jenkins/pull/4766#discussion_r434175375", "createdAt": "2020-06-02T21:06:06Z", "author": {"login": "jglick"}, "path": "test/src/test/java/jenkins/tasks/SimpleBuildStepTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package jenkins.tasks;\n+\n+import hudson.EnvVars;\n+import hudson.FilePath;\n+import hudson.Launcher;\n+import hudson.model.AbstractBuild;\n+import hudson.model.AbstractProject;\n+import hudson.model.Action;\n+import hudson.model.Build;\n+import hudson.model.BuildListener;\n+import hudson.model.FreeStyleBuild;\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Label;\n+import hudson.model.ParametersAction;\n+import hudson.model.Project;\n+import hudson.model.Run;\n+import hudson.model.Slave;\n+import hudson.model.StringParameterValue;\n+import hudson.model.TaskListener;\n+import hudson.tasks.BuildStep;\n+import hudson.tasks.BuildStepDescriptor;\n+import hudson.tasks.Builder;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.jvnet.hudson.test.Issue;\n+import org.jvnet.hudson.test.JenkinsRule;\n+import org.jvnet.hudson.test.TestExtension;\n+\n+public class SimpleBuildStepTest {\n+\n+    private static class StepThatGetsEnvironmentContents extends Builder implements SimpleBuildStep {\n+\n+        @Override\n+        public void perform(@Nonnull Run<?, ?> run, @Nonnull FilePath workspace, @Nonnull EnvVars env, @Nonnull Launcher launcher, @Nonnull TaskListener listener) throws InterruptedException, IOException {\n+            // Check that the environment we get includes values from the slave\n+            Assert.assertEquals(\"JENKINS-29144\", env.get(\"TICKET\"));\n+            // FIXME: Should this test any other envvars? Or Parameters?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d12c9cb7771e8a894c04b66bf81a94b60d2d67b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3NTU3Mg==", "bodyText": "unused I think\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Rule\n          \n          \n            \n                public TemporaryFolder tmp = new TemporaryFolder();", "url": "https://github.com/jenkinsci/jenkins/pull/4766#discussion_r434175572", "createdAt": "2020-06-02T21:06:32Z", "author": {"login": "jglick"}, "path": "test/src/test/java/jenkins/tasks/SimpleBuildStepTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package jenkins.tasks;\n+\n+import hudson.EnvVars;\n+import hudson.FilePath;\n+import hudson.Launcher;\n+import hudson.model.AbstractBuild;\n+import hudson.model.AbstractProject;\n+import hudson.model.Action;\n+import hudson.model.Build;\n+import hudson.model.BuildListener;\n+import hudson.model.FreeStyleBuild;\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Label;\n+import hudson.model.ParametersAction;\n+import hudson.model.Project;\n+import hudson.model.Run;\n+import hudson.model.Slave;\n+import hudson.model.StringParameterValue;\n+import hudson.model.TaskListener;\n+import hudson.tasks.BuildStep;\n+import hudson.tasks.BuildStepDescriptor;\n+import hudson.tasks.Builder;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.jvnet.hudson.test.Issue;\n+import org.jvnet.hudson.test.JenkinsRule;\n+import org.jvnet.hudson.test.TestExtension;\n+\n+public class SimpleBuildStepTest {\n+\n+    private static class StepThatGetsEnvironmentContents extends Builder implements SimpleBuildStep {\n+\n+        @Override\n+        public void perform(@Nonnull Run<?, ?> run, @Nonnull FilePath workspace, @Nonnull EnvVars env, @Nonnull Launcher launcher, @Nonnull TaskListener listener) throws InterruptedException, IOException {\n+            // Check that the environment we get includes values from the slave\n+            Assert.assertEquals(\"JENKINS-29144\", env.get(\"TICKET\"));\n+            // FIXME: Should this test any other envvars? Or Parameters?\n+        }\n+\n+        @TestExtension(\"builderReceivesEnvVars\")\n+        public static class DescriptorImpl extends BuildStepDescriptor<Builder> {\n+\n+            @Override\n+            public boolean isApplicable(Class<? extends AbstractProject> jobType) {\n+                return true;\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Rule\n+    public TemporaryFolder tmp = new TemporaryFolder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d12c9cb7771e8a894c04b66bf81a94b60d2d67b"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3NTY2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.junit.rules.TemporaryFolder;\n          \n      \n    \n    \n  \n\nand fix imports generally", "url": "https://github.com/jenkinsci/jenkins/pull/4766#discussion_r434175664", "createdAt": "2020-06-02T21:06:43Z", "author": {"login": "jglick"}, "path": "test/src/test/java/jenkins/tasks/SimpleBuildStepTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package jenkins.tasks;\n+\n+import hudson.EnvVars;\n+import hudson.FilePath;\n+import hudson.Launcher;\n+import hudson.model.AbstractBuild;\n+import hudson.model.AbstractProject;\n+import hudson.model.Action;\n+import hudson.model.Build;\n+import hudson.model.BuildListener;\n+import hudson.model.FreeStyleBuild;\n+import hudson.model.FreeStyleProject;\n+import hudson.model.Label;\n+import hudson.model.ParametersAction;\n+import hudson.model.Project;\n+import hudson.model.Run;\n+import hudson.model.Slave;\n+import hudson.model.StringParameterValue;\n+import hudson.model.TaskListener;\n+import hudson.tasks.BuildStep;\n+import hudson.tasks.BuildStepDescriptor;\n+import hudson.tasks.Builder;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d12c9cb7771e8a894c04b66bf81a94b60d2d67b"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb1b00ab090f34ada505c53e8520918628c8cdc2", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/bb1b00ab090f34ada505c53e8520918628c8cdc2", "committedDate": "2020-06-02T21:10:04Z", "message": "Code style: add missing braces to if statement."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "181251bc2ddab0d623c98e89f3853cd937a065e1", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/181251bc2ddab0d623c98e89f3853cd937a065e1", "committedDate": "2020-06-02T21:31:03Z", "message": "Applied suggested code change."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6791fa667050d0074b22b377cd2f0b4fa9f08404", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/6791fa667050d0074b22b377cd2f0b4fa9f08404", "committedDate": "2020-06-02T21:31:38Z", "message": "Removed unused rule and imports."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eda1a0ea5bc5eeb509903d8320d20d2d074b28e0", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/eda1a0ea5bc5eeb509903d8320d20d2d074b28e0", "committedDate": "2020-06-02T21:41:16Z", "message": "[JENKINS-29144] Also test that a build parameter arrives in the step's environment."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNTczNjY2", "url": "https://github.com/jenkinsci/jenkins/pull/4766#pullrequestreview-423573666", "createdAt": "2020-06-03T13:51:24Z", "commit": {"oid": "eda1a0ea5bc5eeb509903d8320d20d2d074b28e0"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo1MToyNFrOGec0iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo1MjoyNFrOGec3iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4MjY2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @since 2.2xx\n          \n          \n            \n                 * @since FIXME\n          \n      \n    \n    \n  \n\n(gets patched up by a core committer after merge)", "url": "https://github.com/jenkinsci/jenkins/pull/4766#discussion_r434582664", "createdAt": "2020-06-03T13:51:24Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -80,9 +82,38 @@\n      * @param listener a place to send output\n      * @throws InterruptedException if the step is interrupted\n      * @throws IOException if something goes wrong; use {@link AbortException} for a polite error\n+     * @deprecated Use {@link #perform(Run, FilePath, EnvVars, Launcher, TaskListener) instead.}\n      */\n-    void perform(@NonNull Run<?,?> run, @NonNull FilePath workspace, @NonNull Launcher launcher,\n-                 @NonNull TaskListener listener) throws InterruptedException, IOException;\n+    @Deprecated\n+    default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNull Launcher launcher,\n+                         @NonNull TaskListener listener) throws InterruptedException, IOException {\n+        // No additional environment available; just use that from the Run.\n+        this.perform(run, workspace, run.getEnvironment(listener), launcher, listener);\n+    }\n+\n+    /**\n+     * Run this step.\n+     * @param run a build this is running as a part of\n+     * @param workspace a workspace to use for any file operations\n+     * @param env environment variables applicable to this step\n+     * @param launcher a way to start processes\n+     * @param listener a place to send output\n+     * @throws InterruptedException if the step is interrupted\n+     * @throws IOException if something goes wrong; use {@link AbortException} for a polite error\n+     * @since 2.2xx", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eda1a0ea5bc5eeb509903d8320d20d2d074b28e0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4MzQzNQ==", "bodyText": "BTW you can use TestBuilder to make things shorter (inner class) if you like.", "url": "https://github.com/jenkinsci/jenkins/pull/4766#discussion_r434583435", "createdAt": "2020-06-03T13:52:24Z", "author": {"login": "jglick"}, "path": "test/src/test/java/jenkins/tasks/SimpleBuildStepTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package jenkins.tasks;\n+\n+import hudson.EnvVars;\n+import hudson.FilePath;\n+import hudson.Launcher;\n+import hudson.model.AbstractProject;\n+import hudson.model.FreeStyleProject;\n+import hudson.model.ParametersDefinitionProperty;\n+import hudson.model.Run;\n+import hudson.model.Slave;\n+import hudson.model.StringParameterDefinition;\n+import hudson.model.TaskListener;\n+import hudson.tasks.BuildStepDescriptor;\n+import hudson.tasks.Builder;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.jvnet.hudson.test.Issue;\n+import org.jvnet.hudson.test.JenkinsRule;\n+import org.jvnet.hudson.test.TestExtension;\n+\n+public class SimpleBuildStepTest {\n+\n+    private static class StepThatGetsEnvironmentContents extends Builder implements SimpleBuildStep {\n+\n+        @Override\n+        public void perform(@Nonnull Run<?, ?> run, @Nonnull FilePath workspace, @Nonnull EnvVars env, @Nonnull Launcher launcher, @Nonnull TaskListener listener) throws InterruptedException, IOException {\n+            // Check that the environment we get includes values from the slave\n+            Assert.assertEquals(\"JENKINS-29144\", env.get(\"TICKET\"));\n+            // And that parameters appear too\n+            Assert.assertEquals(\"WORLD\", env.get(\"HELLO\"));\n+        }\n+\n+        @TestExtension(\"builderReceivesEnvVars\")\n+        public static class DescriptorImpl extends BuildStepDescriptor<Builder> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eda1a0ea5bc5eeb509903d8320d20d2d074b28e0"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16c928b46fc4125ce8406dbdfdd0b1b747a4202c", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/16c928b46fc4125ce8406dbdfdd0b1b747a4202c", "committedDate": "2020-06-03T21:20:55Z", "message": "Merge branch 'master' into JENKINS-29144"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b2492d9c96ff5ca22a3e1132fa0ee47048d30fd", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/6b2492d9c96ff5ca22a3e1132fa0ee47048d30fd", "committedDate": "2020-06-03T21:24:10Z", "message": "Use FIXME for @since."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjYzMTYz", "url": "https://github.com/jenkinsci/jenkins/pull/4766#pullrequestreview-424263163", "createdAt": "2020-06-04T09:27:08Z", "commit": {"oid": "6b2492d9c96ff5ca22a3e1132fa0ee47048d30fd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjYzMjQx", "url": "https://github.com/jenkinsci/jenkins/pull/4766#pullrequestreview-424263241", "createdAt": "2020-06-04T09:27:13Z", "commit": {"oid": "6b2492d9c96ff5ca22a3e1132fa0ee47048d30fd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NjUyNjA3", "url": "https://github.com/jenkinsci/jenkins/pull/4766#pullrequestreview-425652607", "createdAt": "2020-06-05T21:59:26Z", "commit": {"oid": "6b2492d9c96ff5ca22a3e1132fa0ee47048d30fd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f59bbb0bf6a575be3ae4e5d79a7d08a1d4125b5", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/0f59bbb0bf6a575be3ae4e5d79a7d08a1d4125b5", "committedDate": "2020-06-06T13:51:51Z", "message": "Merge branch 'master' into JENKINS-29144"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9c9939aabb829dd53f34d546e08289f534718bd", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/c9c9939aabb829dd53f34d546e08289f534718bd", "committedDate": "2020-06-06T19:35:08Z", "message": "Merge branch 'master' into JENKINS-29144"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzY3MzQ5", "url": "https://github.com/jenkinsci/jenkins/pull/4766#pullrequestreview-425767349", "createdAt": "2020-06-06T20:37:05Z", "commit": {"oid": "6b2492d9c96ff5ca22a3e1132fa0ee47048d30fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMDozNzowNlrOGgFkkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMDozNzowNlrOGgFkkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5ODg5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @since FIXME\n          \n          \n            \n                 * @since TODO\n          \n      \n    \n    \n  \n\nper \n  \n    \n      jenkins/update-since-todo.sh\n    \n    \n         Line 13\n      in\n      2980940\n    \n    \n    \n    \n\n        \n          \n           for todo in $( git grep --line-number '@since TODO' | grep -v \"$me\" )", "url": "https://github.com/jenkinsci/jenkins/pull/4766#discussion_r436298896", "createdAt": "2020-06-06T20:37:06Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -100,7 +100,7 @@ default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNu\n      * @param listener a place to send output\n      * @throws InterruptedException if the step is interrupted\n      * @throws IOException if something goes wrong; use {@link AbortException} for a polite error\n-     * @since 2.2xx\n+     * @since FIXME", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b2492d9c96ff5ca22a3e1132fa0ee47048d30fd"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a9c198e2a331a1a41684e58f1276a827a0048a2", "author": {"user": {"login": "Zastai", "name": "Tim Van Holder"}}, "url": "https://github.com/jenkinsci/jenkins/commit/5a9c198e2a331a1a41684e58f1276a827a0048a2", "committedDate": "2020-06-06T20:40:43Z", "message": "Use TODO, not FIXME, for @since."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNzc2MjU0", "url": "https://github.com/jenkinsci/jenkins/pull/4766#pullrequestreview-443776254", "createdAt": "2020-07-07T10:49:05Z", "commit": {"oid": "5a9c198e2a331a1a41684e58f1276a827a0048a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDo0OTowNlrOGt5J6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDo0OTowNlrOGt5J6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3NTUzMA==", "bodyText": "@jglick @oleg-nenashev this requires perform method not to be final and breaks backward compatibility with uber/phabricator-jenkins-plugin#344", "url": "https://github.com/jenkinsci/jenkins/pull/4766#discussion_r450775530", "createdAt": "2020-07-07T10:49:06Z", "author": {"login": "KostyaSha"}, "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -80,9 +82,38 @@\n      * @param listener a place to send output\n      * @throws InterruptedException if the step is interrupted\n      * @throws IOException if something goes wrong; use {@link AbortException} for a polite error\n+     * @deprecated Use {@link #perform(Run, FilePath, EnvVars, Launcher, TaskListener) instead.}\n      */\n-    void perform(@NonNull Run<?,?> run, @NonNull FilePath workspace, @NonNull Launcher launcher,\n-                 @NonNull TaskListener listener) throws InterruptedException, IOException;\n+    @Deprecated\n+    default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNull Launcher launcher,\n+                         @NonNull TaskListener listener) throws InterruptedException, IOException {\n+        // No additional environment available; just use that from the Run.\n+        this.perform(run, workspace, run.getEnvironment(listener), launcher, listener);\n+    }\n+\n+    /**\n+     * Run this step.\n+     * @param run a build this is running as a part of\n+     * @param workspace a workspace to use for any file operations\n+     * @param env environment variables applicable to this step\n+     * @param launcher a way to start processes\n+     * @param listener a place to send output\n+     * @throws InterruptedException if the step is interrupted\n+     * @throws IOException if something goes wrong; use {@link AbortException} for a polite error\n+     * @since TODO\n+     */\n+    default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNull EnvVars env, @NonNull Launcher launcher,\n+                         @NonNull TaskListener listener) throws InterruptedException, IOException {\n+        // If this is called, this must be an implementer of the previous API, in which case we call that, discarding\n+        // the environment we were given.\n+        // But for that to work, that API method must have been implemented.\n+        if (Util.isOverridden(SimpleBuildStep.class, this.getClass(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a9c198e2a331a1a41684e58f1276a827a0048a2"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2323, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}