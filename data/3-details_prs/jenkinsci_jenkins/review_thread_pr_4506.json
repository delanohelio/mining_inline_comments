{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2ODI3NzM3", "number": 4506, "reviewThreads": {"totalCount": 49, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDo1OTo1NVrODg2c-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNTowOTo0NVrODh6Oug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzczMTc3OnYy", "diffSide": "LEFT", "path": "core/src/main/java/jenkins/management/ConfigureLink.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDo1OTo1NVrOFrSOQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDo1OTo1NVrOFrSOQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMTY0OA==", "bodyText": "I like Oleg's idea of just using Overall/Read here. That might actually make isShowLink unnecessary (for now).", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380931648", "createdAt": "2020-02-18T20:59:55Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/jenkins/management/ConfigureLink.java", "diffHunk": "@@ -52,10 +49,10 @@ public String getDescription() {\n         return Messages.ConfigureLink_Description();\n     }\n \n-    @Nonnull\n     @Override\n-    public Permission getRequiredPermission() {\n-        return Jenkins.MANAGE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzczNDQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/model/Jenkins.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTowMDo0NlrOFrSP5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTowMDo0NlrOFrSP5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMjA3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * but that options editable by users with {@link #MANAGE} only remain editable.\n          \n          \n            \n                 * but that only options editable by users with {@link #MANAGE} are editable.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380932071", "createdAt": "2020-02-18T21:00:46Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/jenkins/model/Jenkins.java", "diffHunk": "@@ -5263,6 +5263,22 @@ private static void computeVersion(ServletContext context) {\n             SystemProperties.getBoolean(\"jenkins.security.ManagePermission\"),\n             new PermissionScope[]{PermissionScope.JENKINS});\n \n+    /**\n+     * Allows read-only access to large parts of the system configuration.\n+     *\n+     * When combined with {@link #MANAGE}, it is expected that everything is shown as if only {@link #SYSTEM_READ} was granted,\n+     * but that options editable by users with {@link #MANAGE} only remain editable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzczNzQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/hudson/model/Messages.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTowMTo0OFrOFrSRyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTowMTo0OFrOFrSRyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMjU1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              that are not expected to have an impact on the overall stability and security of the system.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380932552", "createdAt": "2020-02-18T21:01:48Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/resources/hudson/model/Messages.properties", "diffHunk": "@@ -166,6 +166,9 @@ Hudson.AdministerPermission.Description=\\\n Jenkins.Manage.Description=\\\n   This permission grants the ability to configure parts of the overall system configuration \\\n   that are not expected to have an impact on the overall stability and security of the system.\n+Jenkins.SystemRead.Description=\\\n+  This permission grants read-only access to large parts of the overall system configuration. \\\n+  that are not expected to have an impact on the overall stability and security of the system.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzczOTIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/lib/layout/layout.jelly", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTowMjozMVrOFrSS8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTowMjozMVrOFrSS8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMjg1MA==", "bodyText": "For consistency with permission, call it just permissions or perhaps anyPermission?", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380932850", "createdAt": "2020-02-18T21:02:31Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/resources/lib/layout/layout.jelly", "diffHunk": "@@ -52,6 +52,10 @@ THE SOFTWARE.\n       If given, this page is only made available to users that has the specified permission.\n       (The permission will be checked against the \"it\" object.)\n     </st:attribute>\n+    <st:attribute name=\"allowedPermissions\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzc0MjUxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/Functions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTowMzo0MVrOFrSVBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTowMzo0MVrOFrSVBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMzM4Mw==", "bodyText": "?", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380933383", "createdAt": "2020-02-18T21:03:41Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1082,29 +1078,55 @@ public static String getFooterURL() {\n      * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+        return getSortedDescriptorsForGlobalConfig(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigUnclassified();\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but for unclassified descriptors only.\n+     * Descriptors in the global configuration form that users with {@link Jenkins#MANAGE} permission can configure.\n+     *\n      * @since 1.506\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {\n-        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {\n-            public boolean apply(GlobalConfigurationCategory cat) {\n-                return cat instanceof GlobalConfigurationCategory.Unclassified;\n+        return getSortedDescriptorsForGlobalConfig(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));\n+    }\n+\n+    /**\n+     * Descriptors shown in the global configuration form to users with {@link Jenkins#SYSTEM_READ} permission.\n+     *\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzc0NTAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/Functions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTowNDozMlrOFrSWow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTowNDozMlrOFrSWow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMzc5NQ==", "bodyText": "I think this is wrong (there's also tool configurations). Better to retain the existing behavior and just adapt the Predicate as needed.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380933795", "createdAt": "2020-02-18T21:04:32Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1082,29 +1078,55 @@ public static String getFooterURL() {\n      * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+        return getSortedDescriptorsForGlobalConfig(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigUnclassified();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzc1Mzg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/ManagementLink.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTowNzozOVrOFrScAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToyNTo1MlrOFrS-pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNTE2OQ==", "bodyText": "requiredPermission == null\n\nI don't think this is possible anymore.\nAlso, this method may no longer be even needed if instead checking for Overall/Read in getRequiredPermission.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380935169", "createdAt": "2020-02-18T21:07:39Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -122,6 +122,16 @@ public boolean getRequiresConfirmation() {\n         return Jenkins.ADMINISTER;\n     }\n \n+    /**\n+     * Whether to show this link on /manage\n+     *\n+     * @return true if and only if the link should be shown\n+     */\n+    public boolean isShowLink() {\n+        final Permission requiredPermission = getRequiredPermission();\n+        return requiredPermission == null || Jenkins.get().hasPermission(requiredPermission);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NDAzNw==", "bodyText": "correct, intellij says this is impossible", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380944037", "createdAt": "2020-02-18T21:25:52Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -122,6 +122,16 @@ public boolean getRequiresConfirmation() {\n         return Jenkins.ADMINISTER;\n     }\n \n+    /**\n+     * Whether to show this link on /manage\n+     *\n+     * @return true if and only if the link should be shown\n+     */\n+    public boolean isShowLink() {\n+        final Permission requiredPermission = getRequiredPermission();\n+        return requiredPermission == null || Jenkins.get().hasPermission(requiredPermission);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNTE2OQ=="}, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzc1NTY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/jenkins/model/Jenkins/configure.jelly", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTowODoxOVrOFrSdIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTowODoxOVrOFrSdIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNTQ1OA==", "bodyText": "This never changes, so can be pulled out of the loop.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380935458", "createdAt": "2020-02-18T21:08:19Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/resources/jenkins/model/Jenkins/configure.jelly", "diffHunk": "@@ -45,7 +45,9 @@ THE SOFTWARE.\n       </f:entry>\n \n       <!-- global configuration from everyone -->\n-      <j:forEach var=\"descriptor\" items=\"${h.getSortedDescriptorsForGlobalConfigUnclassified()}\">\n+      <j:forEach var=\"descriptor\" items=\"${h.getSortedDescriptorsForGlobalConfigUnclassifiedReadable()}\">\n+        <j:set var=\"editable\" value=\"${h.getSortedDescriptorsForGlobalConfigUnclassified()}\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzc2MDQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/lib/layout/isAdminOrManage.jelly", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTowOTo1M1rOFrSgDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTowOTo1M1rOFrSgDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNjIwNA==", "bodyText": "Naming-wise, it seems to make more sense for this to be called isAdminOrManager. Or perhaps hasAdmin[ister]OrManage?", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380936204", "createdAt": "2020-02-18T21:09:53Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/resources/lib/layout/isAdminOrManage.jelly", "diffHunk": "@@ -0,0 +1,6 @@\n+<?jelly escape-by-default='true'?>\n+<j:jelly xmlns:j=\"jelly:core\" xmlns:d=\"jelly:define\" xmlns:s=\"jelly:stapler\">\n+  <j:if test=\"${h.hasPermission(app.ADMINISTER) || h.hasPermission(app.MANAGE)}\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzc2NDc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/Functions.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToxMDo0N1rOFrSiRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOToyNjo1NlrOFsL7tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNjc3NA==", "bodyText": "isn't this going to break callers that pass in something expectiing to be called with a GlobalConfigurationCategory?\nI found a few calls in the jenkinsci org.\nnoteably the credentials plugin here", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380936774", "createdAt": "2020-02-18T21:10:47Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1051,22 +1051,18 @@ public static String getFooterURL() {\n      * we needed this for {@link GlobalConfiguration}s are for backward compatibility.\n      *\n      * @param predicate\n-     *      Filter the descriptors based on {@link GlobalConfigurationCategory}\n+     *      Filter the descriptors based on this predicate\n      * @since 1.494\n      */\n-    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(Predicate<GlobalConfigurationCategory> predicate) {\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(Predicate<Descriptor> predicate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2OTk2MA==", "bodyText": "Oh no \ud83d\ude2d", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380969960", "createdAt": "2020-02-18T22:19:26Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1051,22 +1051,18 @@ public static String getFooterURL() {\n      * we needed this for {@link GlobalConfiguration}s are for backward compatibility.\n      *\n      * @param predicate\n-     *      Filter the descriptors based on {@link GlobalConfigurationCategory}\n+     *      Filter the descriptors based on this predicate\n      * @since 1.494\n      */\n-    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(Predicate<GlobalConfigurationCategory> predicate) {\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(Predicate<Descriptor> predicate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNjc3NA=="}, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUyMDA3Mw==", "bodyText": "very much broken \ud83d\ude22 , two references I can see, credentials and aws-global-configuration-plugin", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381520073", "createdAt": "2020-02-19T20:16:54Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1051,22 +1051,18 @@ public static String getFooterURL() {\n      * we needed this for {@link GlobalConfiguration}s are for backward compatibility.\n      *\n      * @param predicate\n-     *      Filter the descriptors based on {@link GlobalConfigurationCategory}\n+     *      Filter the descriptors based on this predicate\n      * @since 1.494\n      */\n-    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(Predicate<GlobalConfigurationCategory> predicate) {\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(Predicate<Descriptor> predicate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNjc3NA=="}, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUyMzM5MQ==", "bodyText": "anyone got an idea on the best option?\ncould update both plugins, but it'd be a compatibility break \ud83d\ude22", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381523391", "createdAt": "2020-02-19T20:23:49Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1051,22 +1051,18 @@ public static String getFooterURL() {\n      * we needed this for {@link GlobalConfiguration}s are for backward compatibility.\n      *\n      * @param predicate\n-     *      Filter the descriptors based on {@link GlobalConfigurationCategory}\n+     *      Filter the descriptors based on this predicate\n      * @since 1.494\n      */\n-    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(Predicate<GlobalConfigurationCategory> predicate) {\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(Predicate<Descriptor> predicate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNjc3NA=="}, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg2MTA1Nw==", "bodyText": "Can we introduce this as a new function and leave the old function alone but deprecate and restrict it?", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381861057", "createdAt": "2020-02-20T08:57:35Z", "author": {"login": "res0nance"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1051,22 +1051,18 @@ public static String getFooterURL() {\n      * we needed this for {@link GlobalConfiguration}s are for backward compatibility.\n      *\n      * @param predicate\n-     *      Filter the descriptors based on {@link GlobalConfigurationCategory}\n+     *      Filter the descriptors based on this predicate\n      * @since 1.494\n      */\n-    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(Predicate<GlobalConfigurationCategory> predicate) {\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(Predicate<Descriptor> predicate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNjc3NA=="}, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg3NzE3NA==", "bodyText": "that was that I was thinking, there's ~4 functions, I need to check each one to see if all of them would need the same treatment,\n(for background the change is required so we can get the descriptors required permission due to the manage permission)", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381877174", "createdAt": "2020-02-20T09:26:56Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1051,22 +1051,18 @@ public static String getFooterURL() {\n      * we needed this for {@link GlobalConfiguration}s are for backward compatibility.\n      *\n      * @param predicate\n-     *      Filter the descriptors based on {@link GlobalConfigurationCategory}\n+     *      Filter the descriptors based on this predicate\n      * @since 1.494\n      */\n-    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(Predicate<GlobalConfigurationCategory> predicate) {\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(Predicate<Descriptor> predicate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNjc3NA=="}, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzc2NTM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/lib/form/textarea.jelly", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToxMDo1NFrOFrSikg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToxMDo1NFrOFrSikg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNjg1MA==", "bodyText": "I really like how elegantly this works \ud83d\udc4d", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380936850", "createdAt": "2020-02-18T21:10:54Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/resources/lib/form/textarea.jelly", "diffHunk": "@@ -86,17 +86,19 @@ THE SOFTWARE.\n         org.kohsuke.stapler.codemirror.theme.default\"/>\n   </j:if>\n   <j:set var=\"name\" value=\"${attrs.name ?: '_.'+attrs.field}\"/>\n-  <textarea id=\"${attrs.id}\" style=\"${attrs.style}\"\n-            name =\"${name}\"\n-            class=\"setting-input ${attrs.checkUrl!=null?'validated':''} ${attrs['codemirror-mode']!=null?'codemirror':''} ${attrs.class}\"\n-            checkUrl=\"${attrs.checkUrl}\" checkDependsOn=\"${attrs.checkDependsOn}\" checkMethod=\"${attrs.checkMethod}\"\n-            rows=\"${h.determineRows(value)}\"\n-            readonly=\"${attrs.readonly}\"\n-            codemirror-mode=\"${attrs['codemirror-mode']}\"\n-            codemirror-config=\"${attrs['codemirror-config']}\">\n-    <j:if test=\"${value != null &amp;&amp; !empty(value.toString()) &amp;&amp; (value.toString().codePointAt(0) == 10 || value.toString().codePointAt(0) == 13)}\"><j:whitespace>&#10;</j:whitespace></j:if>\n-    <st:out value=\"${value}\" />\n-  </textarea>\n+  <f:possibleReadOnlyField>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzc3MjEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/Functions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToxMjozOFrOFrSmRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzo0ODo1OVrOFrd6yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNzc5OA==", "bodyText": "ArrayIndexOutOfBOundsException if passed in a zero length array.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380937798", "createdAt": "2020-02-18T21:12:38Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1082,29 +1078,55 @@ public static String getFooterURL() {\n      * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+        return getSortedDescriptorsForGlobalConfig(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigUnclassified();\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but for unclassified descriptors only.\n+     * Descriptors in the global configuration form that users with {@link Jenkins#MANAGE} permission can configure.\n+     *\n      * @since 1.506\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {\n-        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {\n-            public boolean apply(GlobalConfigurationCategory cat) {\n-                return cat instanceof GlobalConfigurationCategory.Unclassified;\n+        return getSortedDescriptorsForGlobalConfig(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));\n+    }\n+\n+    /**\n+     * Descriptors shown in the global configuration form to users with {@link Jenkins#SYSTEM_READ} permission.\n+     *\n+     * @return\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassifiedReadable() {\n+        return getSortedDescriptorsForGlobalConfig(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && (\n+                Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ)));\n+    }\n+\n+    @Restricted(NoExternalUse.class)\n+    public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n+        if (permissions == null) {\n+            return;\n+        }\n+\n+        boolean failed = true;\n+        for (Permission permission : permissions) {\n+            if (ac.hasPermission(permission)) {\n+                failed = false;\n             }\n-        });\n+        }\n+        if (failed) {\n+            ac.checkPermission(permissions[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyMzI3NQ==", "bodyText": "https://github.com/jenkinsci/jenkins/pull/4506/files#diff-841df66889e3c3214c68de134dfe05beR1115\nchanged it earlier", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381123275", "createdAt": "2020-02-19T07:48:59Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1082,29 +1078,55 @@ public static String getFooterURL() {\n      * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+        return getSortedDescriptorsForGlobalConfig(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigUnclassified();\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but for unclassified descriptors only.\n+     * Descriptors in the global configuration form that users with {@link Jenkins#MANAGE} permission can configure.\n+     *\n      * @since 1.506\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {\n-        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {\n-            public boolean apply(GlobalConfigurationCategory cat) {\n-                return cat instanceof GlobalConfigurationCategory.Unclassified;\n+        return getSortedDescriptorsForGlobalConfig(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));\n+    }\n+\n+    /**\n+     * Descriptors shown in the global configuration form to users with {@link Jenkins#SYSTEM_READ} permission.\n+     *\n+     * @return\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassifiedReadable() {\n+        return getSortedDescriptorsForGlobalConfig(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && (\n+                Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ)));\n+    }\n+\n+    @Restricted(NoExternalUse.class)\n+    public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n+        if (permissions == null) {\n+            return;\n+        }\n+\n+        boolean failed = true;\n+        for (Permission permission : permissions) {\n+            if (ac.hasPermission(permission)) {\n+                failed = false;\n             }\n-        });\n+        }\n+        if (failed) {\n+            ac.checkPermission(permissions[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNzc5OA=="}, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzc3NTI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/lib/form/checkbox.jelly", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToxMzozNlrOFrSoLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToxMzozNlrOFrSoLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzODI4NA==", "bodyText": "This diff can easily be minimized by just putting disabled on the line above checked. No need to put /> on a new line.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380938284", "createdAt": "2020-02-18T21:13:36Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/resources/lib/form/checkbox.jelly", "diffHunk": "@@ -68,7 +68,9 @@ THE SOFTWARE.\n          title=\"${attrs.tooltip}\"\n          onclick=\"${attrs.readonly=='true' ? 'return false;' : attrs.onclick}\" id=\"${attrs.id}\" class=\"${attrs.class} ${attrs.negative!=null ? 'negative' : null} ${attrs.checkUrl!=null?'validated':''}\"\n          checkUrl=\"${attrs.checkUrl}\" checkDependsOn=\"${attrs.checkDependsOn}\" json=\"${attrs.json}\"\n-         checked=\"${value ? 'true' : null}\"/>\n+         checked=\"${value ? 'true' : null}\"\n+         disabled=\"${readOnlyMode ? 'true' : null}\"\n+  />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzc4MDYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/Functions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToxNTo0NVrOFrSrwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDoyODo1M1rOFri4uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzOTIwMQ==", "bodyText": "if you only want to see if any permission matches break the loop (or return) after the fist match.\nthe error here is looking not so good.  whilst the exception would show user is missing foobar permision they may only need wibble permission.  can we be explicit in the error that they are missing any of the permissions by throwing a AUthZ exception with a populated message?", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380939201", "createdAt": "2020-02-18T21:15:45Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1082,29 +1078,55 @@ public static String getFooterURL() {\n      * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+        return getSortedDescriptorsForGlobalConfig(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigUnclassified();\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but for unclassified descriptors only.\n+     * Descriptors in the global configuration form that users with {@link Jenkins#MANAGE} permission can configure.\n+     *\n      * @since 1.506\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {\n-        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {\n-            public boolean apply(GlobalConfigurationCategory cat) {\n-                return cat instanceof GlobalConfigurationCategory.Unclassified;\n+        return getSortedDescriptorsForGlobalConfig(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));\n+    }\n+\n+    /**\n+     * Descriptors shown in the global configuration form to users with {@link Jenkins#SYSTEM_READ} permission.\n+     *\n+     * @return\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassifiedReadable() {\n+        return getSortedDescriptorsForGlobalConfig(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && (\n+                Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ)));\n+    }\n+\n+    @Restricted(NoExternalUse.class)\n+    public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n+        if (permissions == null) {\n+            return;\n+        }\n+\n+        boolean failed = true;\n+        for (Permission permission : permissions) {\n+            if (ac.hasPermission(permission)) {\n+                failed = false;\n             }\n-        });\n+        }\n+        if (failed) {\n+            ac.checkPermission(permissions[0]);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwNDY2Nw==", "bodyText": "should be simpler now,", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381204667", "createdAt": "2020-02-19T10:28:53Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1082,29 +1078,55 @@ public static String getFooterURL() {\n      * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+        return getSortedDescriptorsForGlobalConfig(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigUnclassified();\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but for unclassified descriptors only.\n+     * Descriptors in the global configuration form that users with {@link Jenkins#MANAGE} permission can configure.\n+     *\n      * @since 1.506\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {\n-        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {\n-            public boolean apply(GlobalConfigurationCategory cat) {\n-                return cat instanceof GlobalConfigurationCategory.Unclassified;\n+        return getSortedDescriptorsForGlobalConfig(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));\n+    }\n+\n+    /**\n+     * Descriptors shown in the global configuration form to users with {@link Jenkins#SYSTEM_READ} permission.\n+     *\n+     * @return\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassifiedReadable() {\n+        return getSortedDescriptorsForGlobalConfig(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && (\n+                Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ)));\n+    }\n+\n+    @Restricted(NoExternalUse.class)\n+    public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n+        if (permissions == null) {\n+            return;\n+        }\n+\n+        boolean failed = true;\n+        for (Permission permission : permissions) {\n+            if (ac.hasPermission(permission)) {\n+                failed = false;\n             }\n-        });\n+        }\n+        if (failed) {\n+            ac.checkPermission(permissions[0]);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzOTIwMQ=="}, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzc4MjAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/Functions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToxNjowNVrOFrSsgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToxNjowNVrOFrSsgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzOTM5NA==", "bodyText": "Array can be empty too.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380939394", "createdAt": "2020-02-18T21:16:05Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1082,29 +1078,55 @@ public static String getFooterURL() {\n      * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+        return getSortedDescriptorsForGlobalConfig(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigUnclassified();\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but for unclassified descriptors only.\n+     * Descriptors in the global configuration form that users with {@link Jenkins#MANAGE} permission can configure.\n+     *\n      * @since 1.506\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {\n-        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {\n-            public boolean apply(GlobalConfigurationCategory cat) {\n-                return cat instanceof GlobalConfigurationCategory.Unclassified;\n+        return getSortedDescriptorsForGlobalConfig(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));\n+    }\n+\n+    /**\n+     * Descriptors shown in the global configuration form to users with {@link Jenkins#SYSTEM_READ} permission.\n+     *\n+     * @return\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassifiedReadable() {\n+        return getSortedDescriptorsForGlobalConfig(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && (\n+                Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ)));\n+    }\n+\n+    @Restricted(NoExternalUse.class)\n+    public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n+        if (permissions == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzc5MDM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/ManageJenkinsAction.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToxODozOVrOFrSxcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDo0ODoxMlrOFrrCpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDY1Nw==", "bodyText": "could we instead add 2 new methods to AccessControlled  hasAnyPermission(Permission... permission) / checkAnyPermission(Permission ... permission)?\nthat would also make https://github.com/jenkinsci/jenkins/pull/4506/files#diff-841df66889e3c3214c68de134dfe05beR1114 more elegant", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380940657", "createdAt": "2020-02-18T21:18:39Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManageJenkinsAction.java", "diffHunk": "@@ -35,7 +35,7 @@\n @Extension(ordinal=100) @Symbol(\"manageJenkins\")\n public class ManageJenkinsAction implements RootAction {\n     public String getIconFileName() {\n-        if (Jenkins.get().hasPermission(Jenkins.MANAGE))\n+        if (Jenkins.get().hasPermission(Jenkins.MANAGE) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2ODUwMA==", "bodyText": "that would also make https://github.com/jenkinsci/jenkins/pull/4506/files#diff-841df66889e3c3214c68de134dfe05beR1114 more elegant\n\nIt wouldn't because Jelly doesn't like varargs. That was my first try.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380968500", "createdAt": "2020-02-18T22:16:08Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/ManageJenkinsAction.java", "diffHunk": "@@ -35,7 +35,7 @@\n @Extension(ordinal=100) @Symbol(\"manageJenkins\")\n public class ManageJenkinsAction implements RootAction {\n     public String getIconFileName() {\n-        if (Jenkins.get().hasPermission(Jenkins.MANAGE))\n+        if (Jenkins.get().hasPermission(Jenkins.MANAGE) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDY1Nw=="}, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MDM3NQ==", "bodyText": "I also gave varargs a go and wasn\u2019t able to make it work", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380970375", "createdAt": "2020-02-18T22:20:27Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/model/ManageJenkinsAction.java", "diffHunk": "@@ -35,7 +35,7 @@\n @Extension(ordinal=100) @Symbol(\"manageJenkins\")\n public class ManageJenkinsAction implements RootAction {\n     public String getIconFileName() {\n-        if (Jenkins.get().hasPermission(Jenkins.MANAGE))\n+        if (Jenkins.get().hasPermission(Jenkins.MANAGE) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDY1Nw=="}, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwNjg5OQ==", "bodyText": "improving this anyway, there's a special method in functions for jelly, the rest of the code can be nice", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381206899", "createdAt": "2020-02-19T10:33:05Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/model/ManageJenkinsAction.java", "diffHunk": "@@ -35,7 +35,7 @@\n @Extension(ordinal=100) @Symbol(\"manageJenkins\")\n public class ManageJenkinsAction implements RootAction {\n     public String getIconFileName() {\n-        if (Jenkins.get().hasPermission(Jenkins.MANAGE))\n+        if (Jenkins.get().hasPermission(Jenkins.MANAGE) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDY1Nw=="}, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMwMDM4OQ==", "bodyText": "s/vararg/array/ ?  or can you not do arrays in jelly either?", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381300389", "createdAt": "2020-02-19T13:49:15Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManageJenkinsAction.java", "diffHunk": "@@ -35,7 +35,7 @@\n @Extension(ordinal=100) @Symbol(\"manageJenkins\")\n public class ManageJenkinsAction implements RootAction {\n     public String getIconFileName() {\n-        if (Jenkins.get().hasPermission(Jenkins.MANAGE))\n+        if (Jenkins.get().hasPermission(Jenkins.MANAGE) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDY1Nw=="}, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMwNjUxOQ==", "bodyText": "jelly can do an array (which is what's currently being done), but not varargs", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381306519", "createdAt": "2020-02-19T13:59:28Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/model/ManageJenkinsAction.java", "diffHunk": "@@ -35,7 +35,7 @@\n @Extension(ordinal=100) @Symbol(\"manageJenkins\")\n public class ManageJenkinsAction implements RootAction {\n     public String getIconFileName() {\n-        if (Jenkins.get().hasPermission(Jenkins.MANAGE))\n+        if (Jenkins.get().hasPermission(Jenkins.MANAGE) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDY1Nw=="}, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMwODQxMA==", "bodyText": "so can we have 2 new methods to AccessControlled hasAnyPermission(Permission[] permissions) / checkAnyPermission(Permission[] permissions)`?\nStrange jelly can not do varargs - you can call a vararg method with an array (in java) if that enables a single varags method rather than an array based one.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381308410", "createdAt": "2020-02-19T14:02:30Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManageJenkinsAction.java", "diffHunk": "@@ -35,7 +35,7 @@\n @Extension(ordinal=100) @Symbol(\"manageJenkins\")\n public class ManageJenkinsAction implements RootAction {\n     public String getIconFileName() {\n-        if (Jenkins.get().hasPermission(Jenkins.MANAGE))\n+        if (Jenkins.get().hasPermission(Jenkins.MANAGE) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDY1Nw=="}, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMxMTAwNw==", "bodyText": "https://github.com/jenkinsci/jenkins/pull/4506/files#diff-416282a0bfa144ea94854dff20c12b67R82-R134\nthose methods are there,\nYes I know it's weird, DB tried it first, and then I also tried =/", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381311007", "createdAt": "2020-02-19T14:06:49Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/model/ManageJenkinsAction.java", "diffHunk": "@@ -35,7 +35,7 @@\n @Extension(ordinal=100) @Symbol(\"manageJenkins\")\n public class ManageJenkinsAction implements RootAction {\n     public String getIconFileName() {\n-        if (Jenkins.get().hasPermission(Jenkins.MANAGE))\n+        if (Jenkins.get().hasPermission(Jenkins.MANAGE) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDY1Nw=="}, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzODI3Nw==", "bodyText": "Strange jelly can not do varargs\n\nIIRC it was even stranger: It worked (i.e. correct result wrt permissions) but spewed exceptions.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381338277", "createdAt": "2020-02-19T14:48:12Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/ManageJenkinsAction.java", "diffHunk": "@@ -35,7 +35,7 @@\n @Extension(ordinal=100) @Symbol(\"manageJenkins\")\n public class ManageJenkinsAction implements RootAction {\n     public String getIconFileName() {\n-        if (Jenkins.get().hasPermission(Jenkins.MANAGE))\n+        if (Jenkins.get().hasPermission(Jenkins.MANAGE) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDY1Nw=="}, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzc5NTkxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/ManagementLink.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToyMDo0M1rOFrS1LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToyODo0MlrOFrTEMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MTYxMg==", "bodyText": "I beleive this is incorrect with the rephrasing of the javadoc for getRequiredPermission", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380941612", "createdAt": "2020-02-18T21:20:43Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -122,6 +122,16 @@ public boolean getRequiresConfirmation() {\n         return Jenkins.ADMINISTER;\n     }\n \n+    /**\n+     * Whether to show this link on /manage\n+     *\n+     * @return true if and only if the link should be shown\n+     */\n+    public boolean isShowLink() {\n+        final Permission requiredPermission = getRequiredPermission();\n+        return requiredPermission == null || Jenkins.get().hasPermission(requiredPermission);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NTQ1OQ==", "bodyText": "there is a lot of boilerplate repeated here, wonder if the base class could be changed to use have public Permission[] getRequiredPermissions() {...} which defaulted to calling getRequiredPermission() then all we need to call is hasAnyPermission(getRequiredPermissions())?", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380945459", "createdAt": "2020-02-18T21:28:42Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -122,6 +122,16 @@ public boolean getRequiresConfirmation() {\n         return Jenkins.ADMINISTER;\n     }\n \n+    /**\n+     * Whether to show this link on /manage\n+     *\n+     * @return true if and only if the link should be shown\n+     */\n+    public boolean isShowLink() {\n+        final Permission requiredPermission = getRequiredPermission();\n+        return requiredPermission == null || Jenkins.get().hasPermission(requiredPermission);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MTYxMg=="}, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzc5ODI2OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/hudson/model/Messages.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToyMToyN1rOFrS2nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToyMToyN1rOFrS2nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MTk4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              This permission grants read-only access to large parts of the overall system configuration. \\\n          \n          \n            \n              This permission grants read-only access to large parts of the overall system configuration.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380941983", "createdAt": "2020-02-18T21:21:27Z", "author": {"login": "timja"}, "path": "core/src/main/resources/hudson/model/Messages.properties", "diffHunk": "@@ -166,6 +166,9 @@ Hudson.AdministerPermission.Description=\\\n Jenkins.Manage.Description=\\\n   This permission grants the ability to configure parts of the overall system configuration \\\n   that are not expected to have an impact on the overall stability and security of the system.\n+Jenkins.SystemRead.Description=\\\n+  This permission grants read-only access to large parts of the overall system configuration. \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzgwNTMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/ManagementLink.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToyMzo1MVrOFrS7Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjoxODoxM1rOFrUh6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MzE1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return true if and only if the link should be shown\n          \n          \n            \n                 * @return {@code true} iff the link should be shown.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380943154", "createdAt": "2020-02-18T21:23:51Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -122,6 +122,16 @@ public boolean getRequiresConfirmation() {\n         return Jenkins.ADMINISTER;\n     }\n \n+    /**\n+     * Whether to show this link on /manage\n+     *\n+     * @return true if and only if the link should be shown", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2OTQ0OQ==", "bodyText": "I used to do that and was sick of code reviews claiming it's a typo. Accessibility > academic superiority.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380969449", "createdAt": "2020-02-18T22:18:13Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -122,6 +122,16 @@ public boolean getRequiresConfirmation() {\n         return Jenkins.ADMINISTER;\n     }\n \n+    /**\n+     * Whether to show this link on /manage\n+     *\n+     * @return true if and only if the link should be shown", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MzE1NA=="}, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzgyNjc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/hudson/model/Messages.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozMDo1N1rOFrTIpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozMDo1N1rOFrTIpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NjU5OA==", "bodyText": "cut and paste error.  at least as I understand it SYSTEM_READ will allow you read access to everything?  (its like ADMINISTRATOR but without the ability to save/apply?", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380946598", "createdAt": "2020-02-18T21:30:57Z", "author": {"login": "jtnord"}, "path": "core/src/main/resources/hudson/model/Messages.properties", "diffHunk": "@@ -166,6 +166,9 @@ Hudson.AdministerPermission.Description=\\\n Jenkins.Manage.Description=\\\n   This permission grants the ability to configure parts of the overall system configuration \\\n   that are not expected to have an impact on the overall stability and security of the system.\n+Jenkins.SystemRead.Description=\\\n+  This permission grants read-only access to large parts of the overall system configuration. \\\n+  that are not expected to have an impact on the overall stability and security of the system.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzgzMjA1OnYy", "diffSide": "LEFT", "path": "core/src/main/resources/jenkins/model/Jenkins/manage.jelly", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozMjo0N1rOFrTMHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozMjo0N1rOFrTMHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NzQ4Ng==", "bodyText": "see comment about accessCOntrolled and being able to have multiple permissions.\nsimilar could be used in the layout taglib  l:hasAnyPermission persionnsion=\"m.requiredPermissions\"?", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380947486", "createdAt": "2020-02-18T21:32:47Z", "author": {"login": "jtnord"}, "path": "core/src/main/resources/jenkins/model/Jenkins/manage.jelly", "diffHunk": "@@ -49,7 +48,7 @@ THE SOFTWARE.\n     </div>\n \n     <j:forEach var=\"m\" items=\"${it.managementLinks}\">\n-      <l:hasPermission permission=\"${m.requiredPermission}\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzgzNzc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/lib/form/radioBlock.jelly", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozNDoyNVrOFrTPcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozNDoyNVrOFrTPcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0ODMzNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380948337", "createdAt": "2020-02-18T21:34:25Z", "author": {"login": "jtnord"}, "path": "core/src/main/resources/lib/form/radioBlock.jelly", "diffHunk": "@@ -57,8 +57,13 @@ THE SOFTWARE.\n \t<tr class=\"radio-block-start row-group-start ${attrs.inline?'':'row-set-start'}\" hasHelp=\"${attrs.help!=null}\"><!-- this ID marks the beginning -->\n \t  <td colspan=\"3\">\n       <label>\n-\t      <input type=\"radio\" name=\"${name}\" value=\"${value}\"\n-             class=\"radio-block-control block-control\" checked=\"${checked?'true':null}\" />\n+\t      <input type=\"radio\"\n+               name=\"${name}\"\n+               value=\"${value}\"\n+               class=\"radio-block-control block-control\"\n+               checked=\"${checked ? 'true' : null}\"\n+               disabled=\"${readOnlyMode ? 'true' : null}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTQ5MTQxOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/hudson/security/ACLTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDozMTowNFrOFri9OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDozMTowNFrOFri9OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwNTgxNw==", "bodyText": "@jtnord this is what the error message looks like now", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381205817", "createdAt": "2020-02-19T10:31:04Z", "author": {"login": "timja"}, "path": "test/src/test/java/hudson/security/ACLTest.java", "diffHunk": "@@ -53,6 +61,54 @@ public void bypassStrategyOnSystem() throws Exception {\n         assertEquals(Collections.singletonList(p), r.jenkins.getAllItems());\n     }\n \n+    @Test\n+    public void checkAnyPermissionPassedIfOneIsValid() throws Exception {\n+        Jenkins jenkins = r.jenkins;\n+        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n+        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n+        );\n+\n+        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n+        try (ACLContext ignored = ACL.as(manager.impersonate())) {\n+            jenkins.getACL().checkAnyPermission(Jenkins.MANAGE);\n+        }\n+    }\n+\n+    @Test\n+    public void checkAnyPermissionThrowsIfPermissionIsMissing() throws Exception {\n+        Jenkins jenkins = r.jenkins;\n+        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n+        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n+        );\n+\n+        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n+\n+        expectedException.expectMessage(\"manager is missing the Overall/Administer permission\");\n+        expectedException.expect(AccessDeniedException.class);\n+        try (ACLContext ignored = ACL.as(manager.impersonate())) {\n+            jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER);\n+        }\n+    }\n+\n+    @Test\n+    public void checkAnyPermissionThrowsIfMissingMoreThanOne() throws Exception {\n+        Jenkins jenkins = r.jenkins;\n+        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n+        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n+        );\n+\n+        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n+\n+        expectedException.expectMessage(\"manager is missing a permission, one of Overall/Administer, Overall/Read is required\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "147ef295ff583762f9fa9ae116535baaf9af3f1a"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDM1MDA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/AccessControlled.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDo1MToyNFrOFrrLSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOToyMTo0M1rOFr0Yiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0MDQ5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                default void checkAnyPermission(@Nonnull Permission... permission) throws AccessDeniedException {\n          \n          \n            \n                /**\n          \n          \n            \n                 * Convenient short-cut for {@code getACL().checkAnyPermission(permission)}\n          \n          \n            \n                 * @see ACL#checkAnyPermission(Permission)\n          \n          \n            \n                 */\n          \n          \n            \n                default void checkAnyPermission(@Nonnull Permission... permission) throws AccessDeniedException {\n          \n      \n    \n    \n  \n\n(NB: untested suggestion link needs to be checked.)", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381340490", "createdAt": "2020-02-19T14:51:24Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/security/AccessControlled.java", "diffHunk": "@@ -47,13 +47,24 @@ default void checkPermission(@Nonnull Permission permission) throws AccessDenied\n         getACL().checkPermission(permission);\n     }\n \n+    default void checkAnyPermission(@Nonnull Permission... permission) throws AccessDeniedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e808a64485eac9555dc22c2bff71c2100b833ef0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ5MTMzOQ==", "bodyText": "close, was missing ... on the Permission on line 52", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381491339", "createdAt": "2020-02-19T19:21:43Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/security/AccessControlled.java", "diffHunk": "@@ -47,13 +47,24 @@ default void checkPermission(@Nonnull Permission permission) throws AccessDenied\n         getACL().checkPermission(permission);\n     }\n \n+    default void checkAnyPermission(@Nonnull Permission... permission) throws AccessDeniedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0MDQ5MA=="}, "originalCommit": {"oid": "e808a64485eac9555dc22c2bff71c2100b833ef0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDM2MzA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/AccessControlled.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDo1NDowNlrOFrrTQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDo1NDowNlrOFrrTQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0MjUzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 */\n          \n          \n            \n                      * @see ACL#hasAnyPermission(Permission...)\n          \n          \n            \n                      */\n          \n      \n    \n    \n  \n\n(NB: untested see reference)", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381342530", "createdAt": "2020-02-19T14:54:06Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/security/AccessControlled.java", "diffHunk": "@@ -47,13 +47,24 @@ default void checkPermission(@Nonnull Permission permission) throws AccessDenied\n         getACL().checkPermission(permission);\n     }\n \n+    default void checkAnyPermission(@Nonnull Permission... permission) throws AccessDeniedException {\n+        getACL().checkAnyPermission(permission);\n+    }\n+\n     /**\n      * Convenient short-cut for {@code getACL().hasPermission(permission)}\n      */\n     default boolean hasPermission(@Nonnull Permission permission) {\n         return getACL().hasPermission(permission);\n     }\n \n+    /**\n+     * Convenient short-cut for {@code getACL().hasAnyPermission(permission)}\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e808a64485eac9555dc22c2bff71c2100b833ef0"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDM4NDA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/ACL.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDo1ODoyOVrOFrrgOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOToyOTozNlrOFr0peQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0NTg1MQ==", "bodyText": "Not sure this would work in the case that there are no Permissions?   (hasAnyPermission())\nin this case permissions is non null but has a length of zero.\nthus it think it will return false whereas logically you may expect it to do the oposite.\nI'm fine with false - but this should probably be added to the javadoc if this is intentional (and maybe covered by a unit test to make sure it does not change and introduce a securioty issue in some plugin in the future if it changes?)", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381345851", "createdAt": "2020-02-19T14:58:29Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/security/ACL.java", "diffHunk": "@@ -91,6 +113,26 @@ public final boolean hasPermission(@Nonnull Permission p) {\n         return hasPermission(a, p);\n     }\n \n+    /**\n+     * Checks if the current security principal has any of the permissions.\n+     *\n+     * @return false\n+     *      if the user doesn't have one of the required permissions.\n+     */\n+    public final boolean hasAnyPermission(@Nonnull Permission... permissions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e808a64485eac9555dc22c2bff71c2100b833ef0"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ5NTY3Mw==", "bodyText": "this method now throws an exception in that case", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381495673", "createdAt": "2020-02-19T19:29:36Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/security/ACL.java", "diffHunk": "@@ -91,6 +113,26 @@ public final boolean hasPermission(@Nonnull Permission p) {\n         return hasPermission(a, p);\n     }\n \n+    /**\n+     * Checks if the current security principal has any of the permissions.\n+     *\n+     * @return false\n+     *      if the user doesn't have one of the required permissions.\n+     */\n+    public final boolean hasAnyPermission(@Nonnull Permission... permissions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0NTg1MQ=="}, "originalCommit": {"oid": "e808a64485eac9555dc22c2bff71c2100b833ef0"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDQxODQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/ACL.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNTowNTozNlrOFrr1Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOToyOToyMFrOFr0o8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM1MTI3MA==", "bodyText": "if an empty set of permissions was passed in does this work as expected?  (permissionsDisplayName would be an empty string) - so would the error message be correct?", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381351270", "createdAt": "2020-02-19T15:05:36Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/security/ACL.java", "diffHunk": "@@ -77,6 +79,26 @@ public final void checkPermission(@Nonnull Permission p) {\n         }\n     }\n \n+    public final void checkAnyPermission(@Nonnull Permission... permissions) {\n+        boolean failed = !hasAnyPermission(permissions);\n+\n+        Authentication authentication = Jenkins.getAuthentication();\n+        if (failed) {\n+            String permissionsDisplayName = Arrays.stream(permissions)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e808a64485eac9555dc22c2bff71c2100b833ef0"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ5NTUzOQ==", "bodyText": "this method now throws an exception in that case", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381495539", "createdAt": "2020-02-19T19:29:20Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/security/ACL.java", "diffHunk": "@@ -77,6 +79,26 @@ public final void checkPermission(@Nonnull Permission p) {\n         }\n     }\n \n+    public final void checkAnyPermission(@Nonnull Permission... permissions) {\n+        boolean failed = !hasAnyPermission(permissions);\n+\n+        Authentication authentication = Jenkins.getAuthentication();\n+        if (failed) {\n+            String permissionsDisplayName = Arrays.stream(permissions)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM1MTI3MA=="}, "originalCommit": {"oid": "e808a64485eac9555dc22c2bff71c2100b833ef0"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDQxODc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/ACL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNTowNTo0MVrOFrr1lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNTowNTo0MVrOFrr1lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM1MTMxNw==", "bodyText": "Not sure this would work in the case that there are no Permissions?   (hasAnyPermission())\nin this case permissions is non null but has a length of zero.\nthus it think it will return false whereas logically you may expect it to do the oposite.\nI'm fine with false - but this should probably be added to the javadoc if this is intentional (and maybe covered by a unit test to make sure it does not change and introduce a securioty issue in some plugin in the future if it changes?)", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381351317", "createdAt": "2020-02-19T15:05:41Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/security/ACL.java", "diffHunk": "@@ -91,6 +113,26 @@ public final boolean hasPermission(@Nonnull Permission p) {\n         return hasPermission(a, p);\n     }\n \n+    /**\n+     * Checks if the current security principal has any of the permissions.\n+     *\n+     * @return false\n+     *      if the user doesn't have one of the required permissions.\n+     */\n+    public final boolean hasAnyPermission(@Nonnull Permission... permissions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e808a64485eac9555dc22c2bff71c2100b833ef0"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTY4OTMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/Functions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNzoxNToyNFrOFscBBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDoyMzowOFrOFsh60A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0MDY3OA==", "bodyText": "this has different behaviour that ACL.checkAnyPermission in the face of an zero length Permission[].  not a bug in itself but would not be obvious and could potentially cause some fun security issues?", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382140678", "createdAt": "2020-02-20T17:15:24Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1079,32 +1082,92 @@ public static String getFooterURL() {\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n+     * Gets all the descriptors sorted by their inheritance tree of {@link Describable}\n+     * so that descriptors of similar types come nearby.\n+     *\n+     * <p>\n+     * We sort them by {@link Extension#ordinal()} but only for {@link GlobalConfiguration}s,\n+     * as the value is normally used to compare similar kinds of extensions, and we needed\n+     * {@link GlobalConfiguration}s to be able to position themselves in a layer above.\n+     * This however creates some asymmetry between regular {@link Descriptor}s and {@link GlobalConfiguration}s.\n+     * Perhaps it is better to introduce another annotation element? But then,\n+     * extensions shouldn't normally concern themselves about ordering too much, and the only reason\n+     * we needed this for {@link GlobalConfiguration}s are for backward compatibility.\n+     *\n+     * @param predicate\n+     *      Filter the descriptors based on this predicate\n+     * @since TODO\n      */\n-    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor(Predicate<Descriptor> predicate) {\n+        ExtensionList<Descriptor> exts = ExtensionList.lookup(Descriptor.class);\n+        List<Tag> r = new ArrayList<>(exts.size());\n+\n+        for (ExtensionComponent<Descriptor> c : exts.getComponents()) {\n+            Descriptor d = c.getInstance();\n+            if (d.getGlobalConfigPage()==null)  continue;\n+\n+            if (predicate.test(d)) {\n+                r.add(new Tag(c.ordinal(), d));\n+            }\n+        }\n+        Collections.sort(r);\n+\n+        List<Descriptor> answer = new ArrayList<>(r.size());\n+        for (Tag d : r) answer.add(d.d);\n+\n+        return DescriptorVisibilityFilter.apply(Jenkins.get(),answer);\n+    }\n+\n+    /**\n+     * Like {@link #getSortedDescriptorsForGlobalConfigByDescriptor(Predicate)} but with a constant truth predicate, to include all descriptors.\n+     */\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor() {\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d != GlobalSecurityConfiguration.FILTER);\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but for unclassified descriptors only.\n+     * Descriptors in the global configuration form that users with {@link Jenkins#MANAGE} permission can configure.\n+     *\n      * @since 1.506\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {\n-        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {\n-            public boolean apply(GlobalConfigurationCategory cat) {\n-                return cat instanceof GlobalConfigurationCategory.Unclassified;\n-            }\n-        });\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));\n     }\n-    \n+\n+    /**\n+     * Descriptors shown in the global configuration form to users with {@link Jenkins#SYSTEM_READ} permission.\n+     *\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassifiedReadable() {\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && (\n+                Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ)));\n+    }\n+\n+    /**\n+     * Checks if the current security principal has one of the supplied permissions.\n+     *\n+     * @throws AccessDeniedException\n+     *      if the user doesn't have the permission.\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n+        if (permissions == null || permissions.length == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f21916a0199897fc1beffb4565b9bec932467b1"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE1Mjk4OQ==", "bodyText": "I think it can be probably removed, it was added to make jelly more forgiving, similar functions in this class have it I believe, I\u2019ll try remove it later on and check it behaves fine", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382152989", "createdAt": "2020-02-20T17:37:53Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1079,32 +1082,92 @@ public static String getFooterURL() {\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n+     * Gets all the descriptors sorted by their inheritance tree of {@link Describable}\n+     * so that descriptors of similar types come nearby.\n+     *\n+     * <p>\n+     * We sort them by {@link Extension#ordinal()} but only for {@link GlobalConfiguration}s,\n+     * as the value is normally used to compare similar kinds of extensions, and we needed\n+     * {@link GlobalConfiguration}s to be able to position themselves in a layer above.\n+     * This however creates some asymmetry between regular {@link Descriptor}s and {@link GlobalConfiguration}s.\n+     * Perhaps it is better to introduce another annotation element? But then,\n+     * extensions shouldn't normally concern themselves about ordering too much, and the only reason\n+     * we needed this for {@link GlobalConfiguration}s are for backward compatibility.\n+     *\n+     * @param predicate\n+     *      Filter the descriptors based on this predicate\n+     * @since TODO\n      */\n-    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor(Predicate<Descriptor> predicate) {\n+        ExtensionList<Descriptor> exts = ExtensionList.lookup(Descriptor.class);\n+        List<Tag> r = new ArrayList<>(exts.size());\n+\n+        for (ExtensionComponent<Descriptor> c : exts.getComponents()) {\n+            Descriptor d = c.getInstance();\n+            if (d.getGlobalConfigPage()==null)  continue;\n+\n+            if (predicate.test(d)) {\n+                r.add(new Tag(c.ordinal(), d));\n+            }\n+        }\n+        Collections.sort(r);\n+\n+        List<Descriptor> answer = new ArrayList<>(r.size());\n+        for (Tag d : r) answer.add(d.d);\n+\n+        return DescriptorVisibilityFilter.apply(Jenkins.get(),answer);\n+    }\n+\n+    /**\n+     * Like {@link #getSortedDescriptorsForGlobalConfigByDescriptor(Predicate)} but with a constant truth predicate, to include all descriptors.\n+     */\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor() {\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d != GlobalSecurityConfiguration.FILTER);\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but for unclassified descriptors only.\n+     * Descriptors in the global configuration form that users with {@link Jenkins#MANAGE} permission can configure.\n+     *\n      * @since 1.506\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {\n-        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {\n-            public boolean apply(GlobalConfigurationCategory cat) {\n-                return cat instanceof GlobalConfigurationCategory.Unclassified;\n-            }\n-        });\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));\n     }\n-    \n+\n+    /**\n+     * Descriptors shown in the global configuration form to users with {@link Jenkins#SYSTEM_READ} permission.\n+     *\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassifiedReadable() {\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && (\n+                Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ)));\n+    }\n+\n+    /**\n+     * Checks if the current security principal has one of the supplied permissions.\n+     *\n+     * @throws AccessDeniedException\n+     *      if the user doesn't have the permission.\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n+        if (permissions == null || permissions.length == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0MDY3OA=="}, "originalCommit": {"oid": "4f21916a0199897fc1beffb4565b9bec932467b1"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIzNzM5Mg==", "bodyText": "this is needed as both checkPermission and checkAnyPermission are always called in l:layout,\nWithout this check logging in causes:\nFeb 20, 2020 8:21:21 PM hudson.ExpressionFactory2$JexlExpression evaluate\nWARNING: Caught exception evaluating: h.checkAnyPermission(it, permissions) in /jenkins/. Reason: java.lang.NullPointerException\njava.lang.NullPointerException\n\tat hudson.security.ACL.checkAnyPermission(ACL.java:94)\n\tat hudson.security.AccessControlled.checkAnyPermission(AccessControlled.java:55)\n\tat hudson.Functions.checkAnyPermission(Functions.java:1164)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\nnote checkPermission has the same behaviour", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382237392", "createdAt": "2020-02-20T20:23:08Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1079,32 +1082,92 @@ public static String getFooterURL() {\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n+     * Gets all the descriptors sorted by their inheritance tree of {@link Describable}\n+     * so that descriptors of similar types come nearby.\n+     *\n+     * <p>\n+     * We sort them by {@link Extension#ordinal()} but only for {@link GlobalConfiguration}s,\n+     * as the value is normally used to compare similar kinds of extensions, and we needed\n+     * {@link GlobalConfiguration}s to be able to position themselves in a layer above.\n+     * This however creates some asymmetry between regular {@link Descriptor}s and {@link GlobalConfiguration}s.\n+     * Perhaps it is better to introduce another annotation element? But then,\n+     * extensions shouldn't normally concern themselves about ordering too much, and the only reason\n+     * we needed this for {@link GlobalConfiguration}s are for backward compatibility.\n+     *\n+     * @param predicate\n+     *      Filter the descriptors based on this predicate\n+     * @since TODO\n      */\n-    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor(Predicate<Descriptor> predicate) {\n+        ExtensionList<Descriptor> exts = ExtensionList.lookup(Descriptor.class);\n+        List<Tag> r = new ArrayList<>(exts.size());\n+\n+        for (ExtensionComponent<Descriptor> c : exts.getComponents()) {\n+            Descriptor d = c.getInstance();\n+            if (d.getGlobalConfigPage()==null)  continue;\n+\n+            if (predicate.test(d)) {\n+                r.add(new Tag(c.ordinal(), d));\n+            }\n+        }\n+        Collections.sort(r);\n+\n+        List<Descriptor> answer = new ArrayList<>(r.size());\n+        for (Tag d : r) answer.add(d.d);\n+\n+        return DescriptorVisibilityFilter.apply(Jenkins.get(),answer);\n+    }\n+\n+    /**\n+     * Like {@link #getSortedDescriptorsForGlobalConfigByDescriptor(Predicate)} but with a constant truth predicate, to include all descriptors.\n+     */\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor() {\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d != GlobalSecurityConfiguration.FILTER);\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but for unclassified descriptors only.\n+     * Descriptors in the global configuration form that users with {@link Jenkins#MANAGE} permission can configure.\n+     *\n      * @since 1.506\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {\n-        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {\n-            public boolean apply(GlobalConfigurationCategory cat) {\n-                return cat instanceof GlobalConfigurationCategory.Unclassified;\n-            }\n-        });\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));\n     }\n-    \n+\n+    /**\n+     * Descriptors shown in the global configuration form to users with {@link Jenkins#SYSTEM_READ} permission.\n+     *\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassifiedReadable() {\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && (\n+                Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ)));\n+    }\n+\n+    /**\n+     * Checks if the current security principal has one of the supplied permissions.\n+     *\n+     * @throws AccessDeniedException\n+     *      if the user doesn't have the permission.\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n+        if (permissions == null || permissions.length == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0MDY3OA=="}, "originalCommit": {"oid": "4f21916a0199897fc1beffb4565b9bec932467b1"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQ2NTc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/GlobalSecurityConfiguration.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMToyMjo1OVrOFsjnSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDo0MTowMVrOFsyvhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2NTE2MQ==", "bodyText": "Strictly speaking, this is an incompatible change. Are we OK with that?", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382265161", "createdAt": "2020-02-20T21:22:59Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/security/GlobalSecurityConfiguration.java", "diffHunk": "@@ -184,15 +185,13 @@ public Permission getRequiredPermission() {\n         return Jenkins.ADMINISTER;\n     }\n \n-    public static Predicate<GlobalConfigurationCategory> FILTER = new Predicate<GlobalConfigurationCategory>() {\n-        public boolean apply(GlobalConfigurationCategory input) {\n-            return input instanceof GlobalConfigurationCategory.Security;\n-        }\n-    };\n+    @Restricted(NoExternalUse.class)\n+    @RestrictedSince(\"TODO\")\n+    public static Predicate<Descriptor> FILTER = input -> input.getCategory() instanceof GlobalConfigurationCategory.Security;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQzNzg4Nw==", "bodyText": "I can only see mentions of this class in core: https://github.com/search?q=org%3Ajenkinsci+GlobalSecurityConfiguration&type=Code\nand manual testing didn't show any issues", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382437887", "createdAt": "2020-02-21T07:48:20Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/security/GlobalSecurityConfiguration.java", "diffHunk": "@@ -184,15 +185,13 @@ public Permission getRequiredPermission() {\n         return Jenkins.ADMINISTER;\n     }\n \n-    public static Predicate<GlobalConfigurationCategory> FILTER = new Predicate<GlobalConfigurationCategory>() {\n-        public boolean apply(GlobalConfigurationCategory input) {\n-            return input instanceof GlobalConfigurationCategory.Security;\n-        }\n-    };\n+    @Restricted(NoExternalUse.class)\n+    @RestrictedSince(\"TODO\")\n+    public static Predicate<Descriptor> FILTER = input -> input.getCategory() instanceof GlobalConfigurationCategory.Security;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2NTE2MQ=="}, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxMzAzMA==", "bodyText": "More of a question for @oleg-nenashev who wasn't happy with our recent unnecessary breakages.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382513030", "createdAt": "2020-02-21T10:41:01Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/security/GlobalSecurityConfiguration.java", "diffHunk": "@@ -184,15 +185,13 @@ public Permission getRequiredPermission() {\n         return Jenkins.ADMINISTER;\n     }\n \n-    public static Predicate<GlobalConfigurationCategory> FILTER = new Predicate<GlobalConfigurationCategory>() {\n-        public boolean apply(GlobalConfigurationCategory input) {\n-            return input instanceof GlobalConfigurationCategory.Security;\n-        }\n-    };\n+    @Restricted(NoExternalUse.class)\n+    @RestrictedSince(\"TODO\")\n+    public static Predicate<Descriptor> FILTER = input -> input.getCategory() instanceof GlobalConfigurationCategory.Security;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2NTE2MQ=="}, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQ2NjgyOnYy", "diffSide": "LEFT", "path": "core/src/main/java/jenkins/management/ConfigureLink.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMToyMzoyMFrOFsjn7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMToyMzoyMFrOFsjn7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2NTMyNg==", "bodyText": "Nit: Unnecessary change.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382265326", "createdAt": "2020-02-20T21:23:20Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/jenkins/management/ConfigureLink.java", "diffHunk": "@@ -27,11 +27,10 @@\n import hudson.Extension;\n import hudson.model.ManagementLink;\n import hudson.security.Permission;\n+import javax.annotation.Nonnull;\n import jenkins.model.Jenkins;\n import org.jenkinsci.Symbol;\n \n-import javax.annotation.Nonnull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQ3MDYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/tools/GlobalToolConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMToyNDo0MlrOFsjqXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMToyNDo0MlrOFsjqXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2NTk1MQ==", "bodyText": "(Note to self: Not an incompatible change because the entire class is @Restricted.)", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382265951", "createdAt": "2020-02-20T21:24:42Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/jenkins/tools/GlobalToolConfiguration.java", "diffHunk": "@@ -101,11 +100,7 @@ private boolean configureDescriptor(StaplerRequest req, JSONObject json, Descrip\n         return d.configure(req, js);\n     }\n \n-    public static Predicate<GlobalConfigurationCategory> FILTER = new Predicate<GlobalConfigurationCategory>() {\n-        public boolean apply(GlobalConfigurationCategory input) {\n-            return input instanceof ToolConfigurationCategory;\n-        }\n-    };\n+    public static Predicate<Descriptor> FILTER = input -> input.getCategory() instanceof ToolConfigurationCategory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQ3NzQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/tools/GlobalToolConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMToyNzoyMVrOFsju1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMToyNzoyMVrOFsju1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2NzA5Mw==", "bodyText": "(Note to self: This change makes sense since the old method is being deprecated.)", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382267093", "createdAt": "2020-02-20T21:27:21Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/jenkins/tools/GlobalToolConfiguration.java", "diffHunk": "@@ -81,12 +80,12 @@ public synchronized void doConfigure(StaplerRequest req, StaplerResponse rsp) th\n         FormApply.success(req.getContextPath() + \"/manage\").generateResponse(req, rsp, null);\n     }\n \n-    private boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException, IOException {\n+    private boolean configure(StaplerRequest req, JSONObject json) throws Descriptor.FormException, IOException {\n         Jenkins j = Jenkins.get();\n         j.checkPermission(Jenkins.ADMINISTER);\n \n         boolean result = true;\n-        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n+        for (Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfigByDescriptor(FILTER)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQ4MjUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/jenkins/model/Jenkins/configure.jelly", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMToyOToyMFrOFsjyEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMToyOToyMFrOFsjyEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2NzkyMQ==", "bodyText": "Nit: Diff can be minimized.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382267921", "createdAt": "2020-02-20T21:29:20Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/resources/jenkins/model/Jenkins/configure.jelly", "diffHunk": "@@ -27,7 +27,7 @@ THE SOFTWARE.\n -->\n <?jelly escape-by-default='true'?>\n <j:jelly xmlns:j=\"jelly:core\" xmlns:st=\"jelly:stapler\" xmlns:d=\"jelly:define\" xmlns:l=\"/lib/layout\" xmlns:t=\"/lib/hudson\" xmlns:f=\"/lib/form\">\n-<l:layout norefresh=\"true\" permission=\"${it.MANAGE}\" title=\"${%Configure System}\">\n+<l:layout norefresh=\"true\" title=\"${%Configure System}\" permissions=\"${app.MANAGE_AND_SYSTEM_READ}\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQ4OTc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/lib/layout/layout.jelly", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozMjowOFrOFsj2mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozMjowOFrOFsj2mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2OTA4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  If given, this page is made available to users that has one or more of the specified permissions.\n          \n          \n            \n                  If given, this page is made available to users who have one or more of the specified permissions.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382269083", "createdAt": "2020-02-20T21:32:08Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/resources/lib/layout/layout.jelly", "diffHunk": "@@ -52,6 +52,10 @@ THE SOFTWARE.\n       If given, this page is only made available to users that has the specified permission.\n       (The permission will be checked against the \"it\" object.)\n     </st:attribute>\n+    <st:attribute name=\"permissions\">\n+      If given, this page is made available to users that has one or more of the specified permissions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQ5MDEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/lib/layout/layout.jelly", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozMjoxNVrOFsj22A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozMjoxNVrOFsj22A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2OTE0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  (The permission will be checked against the \"it\" object.)\n          \n          \n            \n                  (The permissions will be checked against the \"it\" object.)", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382269144", "createdAt": "2020-02-20T21:32:15Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/resources/lib/layout/layout.jelly", "diffHunk": "@@ -52,6 +52,10 @@ THE SOFTWARE.\n       If given, this page is only made available to users that has the specified permission.\n       (The permission will be checked against the \"it\" object.)\n     </st:attribute>\n+    <st:attribute name=\"permissions\">\n+      If given, this page is made available to users that has one or more of the specified permissions.\n+      (The permission will be checked against the \"it\" object.)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQ5MDU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/lib/layout/layout.jelly", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozMjoyNVrOFsj3Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozMjoyNVrOFsj3Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2OTIxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  If given, this page is only made available to users that has the specified permission.\n          \n          \n            \n                  If given, this page is only made available to users who have the specified permission.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382269214", "createdAt": "2020-02-20T21:32:25Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/resources/lib/layout/layout.jelly", "diffHunk": "@@ -52,6 +52,10 @@ THE SOFTWARE.\n       If given, this page is only made available to users that has the specified permission.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQ5MzExOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/AccessControlled.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozMzoyMlrOFsj4uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozMzoyMlrOFsj4uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2OTYyNQ==", "bodyText": "@since TODO", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382269625", "createdAt": "2020-02-20T21:33:22Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/security/AccessControlled.java", "diffHunk": "@@ -47,13 +47,29 @@ default void checkPermission(@Nonnull Permission permission) throws AccessDenied\n         getACL().checkPermission(permission);\n     }\n \n+    /**\n+     * Convenient short-cut for {@code getACL().checkAnyPermission(permission)}\n+     * @see ACL#checkAnyPermission(Permission...)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQ5MzQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/AccessControlled.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozMzoyOVrOFsj46w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozMzoyOVrOFsj46w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2OTY3NQ==", "bodyText": "@since TODO", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382269675", "createdAt": "2020-02-20T21:33:29Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/security/AccessControlled.java", "diffHunk": "@@ -47,13 +47,29 @@ default void checkPermission(@Nonnull Permission permission) throws AccessDenied\n         getACL().checkPermission(permission);\n     }\n \n+    /**\n+     * Convenient short-cut for {@code getACL().checkAnyPermission(permission)}\n+     * @see ACL#checkAnyPermission(Permission...)\n+     */\n+    default void checkAnyPermission(@Nonnull Permission... permission) throws AccessDeniedException {\n+        getACL().checkAnyPermission(permission);\n+    }\n+\n     /**\n      * Convenient short-cut for {@code getACL().hasPermission(permission)}\n      */\n     default boolean hasPermission(@Nonnull Permission permission) {\n         return getACL().hasPermission(permission);\n     }\n \n+    /**\n+     * Convenient short-cut for {@code getACL().hasAnyPermission(permission)}\n+     * @see ACL#hasAnyPermission(Permission...)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQ5NDMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/ACL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozMzo0NlrOFsj5bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozMzo0NlrOFsj5bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2OTgwNw==", "bodyText": "@since TODO", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382269807", "createdAt": "2020-02-20T21:33:46Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/security/ACL.java", "diffHunk": "@@ -77,6 +79,41 @@ public final void checkPermission(@Nonnull Permission p) {\n         }\n     }\n \n+    /**\n+     * Checks if the current security principal has one of the supplied permissions.\n+     *\n+     * <p>\n+     * This is just a convenience function.\n+     *\n+     * @throws AccessDeniedException\n+     *      if the user doesn't have the permission.\n+     * @throws IllegalArgumentException\n+     *      if no permissions are provided\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQ5NDU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/ACL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozMzo1MVrOFsj5kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozMzo1MVrOFsj5kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2OTg0Mg==", "bodyText": "@since TODO", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382269842", "createdAt": "2020-02-20T21:33:51Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/security/ACL.java", "diffHunk": "@@ -91,6 +128,33 @@ public final boolean hasPermission(@Nonnull Permission p) {\n         return hasPermission(a, p);\n     }\n \n+    /**\n+     * Checks if the current security principal has any of the permissions.\n+     *\n+     * @return false\n+     *      if the user doesn't have one of the required permissions.\n+     *\n+     * @throws IllegalArgumentException\n+     *      if no permissions are provided\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQ5NjY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/Functions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozNDo0MFrOFsj7AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozNDo0MFrOFsj7AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI3MDIwOQ==", "bodyText": "Really? Isn't this convenient elsewhere too? Or are we just relying on it not being checked from Jelly?", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382270209", "createdAt": "2020-02-20T21:34:40Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1079,32 +1082,92 @@ public static String getFooterURL() {\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n+     * Gets all the descriptors sorted by their inheritance tree of {@link Describable}\n+     * so that descriptors of similar types come nearby.\n+     *\n+     * <p>\n+     * We sort them by {@link Extension#ordinal()} but only for {@link GlobalConfiguration}s,\n+     * as the value is normally used to compare similar kinds of extensions, and we needed\n+     * {@link GlobalConfiguration}s to be able to position themselves in a layer above.\n+     * This however creates some asymmetry between regular {@link Descriptor}s and {@link GlobalConfiguration}s.\n+     * Perhaps it is better to introduce another annotation element? But then,\n+     * extensions shouldn't normally concern themselves about ordering too much, and the only reason\n+     * we needed this for {@link GlobalConfiguration}s are for backward compatibility.\n+     *\n+     * @param predicate\n+     *      Filter the descriptors based on this predicate\n+     * @since TODO\n      */\n-    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor(Predicate<Descriptor> predicate) {\n+        ExtensionList<Descriptor> exts = ExtensionList.lookup(Descriptor.class);\n+        List<Tag> r = new ArrayList<>(exts.size());\n+\n+        for (ExtensionComponent<Descriptor> c : exts.getComponents()) {\n+            Descriptor d = c.getInstance();\n+            if (d.getGlobalConfigPage()==null)  continue;\n+\n+            if (predicate.test(d)) {\n+                r.add(new Tag(c.ordinal(), d));\n+            }\n+        }\n+        Collections.sort(r);\n+\n+        List<Descriptor> answer = new ArrayList<>(r.size());\n+        for (Tag d : r) answer.add(d.d);\n+\n+        return DescriptorVisibilityFilter.apply(Jenkins.get(),answer);\n+    }\n+\n+    /**\n+     * Like {@link #getSortedDescriptorsForGlobalConfigByDescriptor(Predicate)} but with a constant truth predicate, to include all descriptors.\n+     */\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor() {\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> GlobalSecurityConfiguration.FILTER.negate().test(d));\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but for unclassified descriptors only.\n+     * Descriptors in the global configuration form that users with {@link Jenkins#MANAGE} permission can configure.\n+     *\n      * @since 1.506\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {\n-        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {\n-            public boolean apply(GlobalConfigurationCategory cat) {\n-                return cat instanceof GlobalConfigurationCategory.Unclassified;\n-            }\n-        });\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));\n     }\n-    \n+\n+    /**\n+     * Descriptors shown in the global configuration form to users with {@link Jenkins#SYSTEM_READ} permission.\n+     *\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassifiedReadable() {\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && (\n+                Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ)));\n+    }\n+\n+    /**\n+     * Checks if the current security principal has one of the supplied permissions.\n+     *\n+     * @throws AccessDeniedException\n+     *      if the user doesn't have the permission.\n+     */\n+    @Restricted(NoExternalUse.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQ5NzEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/Functions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozNDo1MFrOFsj7VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozNDo1MFrOFsj7VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI3MDI5Mw==", "bodyText": "@since TODO since strictly speaking, it's Jelly API.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382270293", "createdAt": "2020-02-20T21:34:50Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1079,32 +1082,92 @@ public static String getFooterURL() {\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n+     * Gets all the descriptors sorted by their inheritance tree of {@link Describable}\n+     * so that descriptors of similar types come nearby.\n+     *\n+     * <p>\n+     * We sort them by {@link Extension#ordinal()} but only for {@link GlobalConfiguration}s,\n+     * as the value is normally used to compare similar kinds of extensions, and we needed\n+     * {@link GlobalConfiguration}s to be able to position themselves in a layer above.\n+     * This however creates some asymmetry between regular {@link Descriptor}s and {@link GlobalConfiguration}s.\n+     * Perhaps it is better to introduce another annotation element? But then,\n+     * extensions shouldn't normally concern themselves about ordering too much, and the only reason\n+     * we needed this for {@link GlobalConfiguration}s are for backward compatibility.\n+     *\n+     * @param predicate\n+     *      Filter the descriptors based on this predicate\n+     * @since TODO\n      */\n-    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor(Predicate<Descriptor> predicate) {\n+        ExtensionList<Descriptor> exts = ExtensionList.lookup(Descriptor.class);\n+        List<Tag> r = new ArrayList<>(exts.size());\n+\n+        for (ExtensionComponent<Descriptor> c : exts.getComponents()) {\n+            Descriptor d = c.getInstance();\n+            if (d.getGlobalConfigPage()==null)  continue;\n+\n+            if (predicate.test(d)) {\n+                r.add(new Tag(c.ordinal(), d));\n+            }\n+        }\n+        Collections.sort(r);\n+\n+        List<Descriptor> answer = new ArrayList<>(r.size());\n+        for (Tag d : r) answer.add(d.d);\n+\n+        return DescriptorVisibilityFilter.apply(Jenkins.get(),answer);\n+    }\n+\n+    /**\n+     * Like {@link #getSortedDescriptorsForGlobalConfigByDescriptor(Predicate)} but with a constant truth predicate, to include all descriptors.\n+     */\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor() {\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> GlobalSecurityConfiguration.FILTER.negate().test(d));\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but for unclassified descriptors only.\n+     * Descriptors in the global configuration form that users with {@link Jenkins#MANAGE} permission can configure.\n+     *\n      * @since 1.506\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {\n-        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {\n-            public boolean apply(GlobalConfigurationCategory cat) {\n-                return cat instanceof GlobalConfigurationCategory.Unclassified;\n-            }\n-        });\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));\n     }\n-    \n+\n+    /**\n+     * Descriptors shown in the global configuration form to users with {@link Jenkins#SYSTEM_READ} permission.\n+     *\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassifiedReadable() {\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && (\n+                Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ)));\n+    }\n+\n+    /**\n+     * Checks if the current security principal has one of the supplied permissions.\n+     *\n+     * @throws AccessDeniedException\n+     *      if the user doesn't have the permission.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjUxMTI4OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTo0MDoxMVrOFskEgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTo0MDoxMVrOFskEgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI3MjY0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String SYSTEM_READER = \"systemReader\";\n          \n          \n            \n                private static final String SYSTEM_READER_AND_MANAGER = \"systemReaderAndManager\";\n          \n      \n    \n    \n  \n\nPlus corresponding changes.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382272643", "createdAt": "2020-02-20T21:40:11Z", "author": {"login": "daniel-beck"}, "path": "test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package jenkins.model;\n+\n+import com.gargoylesoftware.htmlunit.html.HtmlForm;\n+import com.gargoylesoftware.htmlunit.html.HtmlPage;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.jvnet.hudson.test.JenkinsRule;\n+import org.jvnet.hudson.test.MockAuthorizationStrategy;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class JenkinsSystemReadAndManagePermissionTest {\n+\n+    private static final String SYSTEM_READER = \"systemReader\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjUxNjc1OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTo0MjowNlrOFskH8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOTo0NToyOVrOFsxI1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI3MzUyMg==", "bodyText": "Could we get a test that ensures that non-editable fields remain so (e.g. master executors), and that manipulated form submissions aren't effective. Basically, test the \u2026Unclassified/\u2026UnclassifiedReadable separation.\nProbably easiest with a test-only descriptor whose global.jelly bypasses the read-only mode, and sets its non-default value directly on the Jelly/Groovy view, so no messing around with the UI in HTMLUnit is needed.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382273522", "createdAt": "2020-02-20T21:42:06Z", "author": {"login": "daniel-beck"}, "path": "test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package jenkins.model;\n+\n+import com.gargoylesoftware.htmlunit.html.HtmlForm;\n+import com.gargoylesoftware.htmlunit.html.HtmlPage;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.jvnet.hudson.test.JenkinsRule;\n+import org.jvnet.hudson.test.MockAuthorizationStrategy;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class JenkinsSystemReadAndManagePermissionTest {\n+\n+    private static final String SYSTEM_READER = \"systemReader\";\n+\n+    @BeforeClass\n+    public static void enablePermissions() {\n+        System.setProperty(\"jenkins.security.SystemReadPermission\", \"true\");\n+        System.setProperty(\"jenkins.security.ManagePermission\", \"true\");\n+    }\n+\n+    @AfterClass\n+    public static void disablePermissions() {\n+        System.clearProperty(\"jenkins.security.SystemReadPermission\");\n+        System.clearProperty(\"jenkins.security.ManagePermission\");\n+    }\n+\n+    @ClassRule\n+    public static JenkinsRule j = new JenkinsRule();\n+\n+    private JenkinsRule.WebClient webClient;\n+\n+    @Before\n+    public void setup() {\n+        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n+        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.MANAGE, Jenkins.SYSTEM_READ, Jenkins.READ).everywhere().to(SYSTEM_READER));\n+\n+        webClient = j.createWebClient();\n+        webClient.setThrowExceptionOnFailingStatusCode(false);\n+    }\n+\n+    @Test\n+    public void configureReadAllowedWithSystemReadAndManagePermission() throws Exception {\n+        HtmlPage configure = webClient.login(SYSTEM_READER)\n+                .goTo(\"configure\");\n+        assertThat(configure.getWebResponse().getStatusCode(), is(200));\n+    }\n+\n+    @Test\n+    public void configureConfigSubmitAllowedWithSystemReadAndManagePermission() throws Exception {\n+        HtmlPage configure = webClient.login(SYSTEM_READER)\n+                .goTo(\"configure\");\n+        assertThat(configure.getWebResponse().getStatusCode(), is(200));\n+\n+        HtmlForm configureForm = configure.getFormByName(\"config\");\n+        HtmlPage submit = j.submit(configureForm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4Njc0MA==", "bodyText": "done, please check it covers what you wanted", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382486740", "createdAt": "2020-02-21T09:45:29Z", "author": {"login": "timja"}, "path": "test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package jenkins.model;\n+\n+import com.gargoylesoftware.htmlunit.html.HtmlForm;\n+import com.gargoylesoftware.htmlunit.html.HtmlPage;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.jvnet.hudson.test.JenkinsRule;\n+import org.jvnet.hudson.test.MockAuthorizationStrategy;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class JenkinsSystemReadAndManagePermissionTest {\n+\n+    private static final String SYSTEM_READER = \"systemReader\";\n+\n+    @BeforeClass\n+    public static void enablePermissions() {\n+        System.setProperty(\"jenkins.security.SystemReadPermission\", \"true\");\n+        System.setProperty(\"jenkins.security.ManagePermission\", \"true\");\n+    }\n+\n+    @AfterClass\n+    public static void disablePermissions() {\n+        System.clearProperty(\"jenkins.security.SystemReadPermission\");\n+        System.clearProperty(\"jenkins.security.ManagePermission\");\n+    }\n+\n+    @ClassRule\n+    public static JenkinsRule j = new JenkinsRule();\n+\n+    private JenkinsRule.WebClient webClient;\n+\n+    @Before\n+    public void setup() {\n+        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n+        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.MANAGE, Jenkins.SYSTEM_READ, Jenkins.READ).everywhere().to(SYSTEM_READER));\n+\n+        webClient = j.createWebClient();\n+        webClient.setThrowExceptionOnFailingStatusCode(false);\n+    }\n+\n+    @Test\n+    public void configureReadAllowedWithSystemReadAndManagePermission() throws Exception {\n+        HtmlPage configure = webClient.login(SYSTEM_READER)\n+                .goTo(\"configure\");\n+        assertThat(configure.getWebResponse().getStatusCode(), is(200));\n+    }\n+\n+    @Test\n+    public void configureConfigSubmitAllowedWithSystemReadAndManagePermission() throws Exception {\n+        HtmlPage configure = webClient.login(SYSTEM_READER)\n+                .goTo(\"configure\");\n+        assertThat(configure.getWebResponse().getStatusCode(), is(200));\n+\n+        HtmlForm configureForm = configure.getFormByName(\"config\");\n+        HtmlPage submit = j.submit(configureForm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI3MzUyMg=="}, "originalCommit": {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODEzNDM3OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTowNTozMVrOFszaCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTowNTozMVrOFszaCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMzkxNA==", "bodyText": "Very nice \ud83d\udc4d\nTested locally with\n        public Permission getRequiredGlobalConfigPagePermission() {\n            return Jenkins.MANAGE;\n        }\n\nAnd it failed as expected \ud83d\ude03", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382523914", "createdAt": "2020-02-21T11:05:31Z", "author": {"login": "daniel-beck"}, "path": "test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java", "diffHunk": "@@ -62,4 +65,40 @@ public void configureConfigSubmitAllowedWithSystemReadAndManagePermission() thro\n \n         assertThat(submit.getWebResponse().getStatusCode(), is(200));\n     }\n+\n+    @Test\n+    public void cannotModifyReadOnlyConfiguration() throws Exception {\n+        HtmlPage configure = webClient.login(SYSTEM_READER_AND_MANAGER)\n+                .goTo(\"configure\");\n+\n+        //GIVEN the Global Configuration Form, with some changes unsaved\n+        HtmlForm form = configure.getFormByName(\"config\");\n+\n+        // WHEN a user with Jenkins.MANAGE and Jenkins.SYSTEM_READ permission tries to save the changes\n+        j.submit(form);\n+        // THEN the changes on fields forbidden to a Jenkins.MANAGE permission are not saved\n+        Config config = GlobalConfiguration.all().get(Config.class);\n+\n+        assert config != null;\n+        assertNull(\"shouldn't be allowed to change the number of executors\", config.getNumber());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2372c516030c03165a60ef8f3bbc2ea5cf05fbd"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODE0MTc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/jenkins/management/ConfigureLink.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTowODoyM1rOFszemQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTowODoyM1rOFszemQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyNTA4MQ==", "bodyText": "Should have been removed from line 30 too, sorry I wasn't clear.", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382525081", "createdAt": "2020-02-21T11:08:23Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/jenkins/management/ConfigureLink.java", "diffHunk": "@@ -31,6 +31,8 @@\n import jenkins.model.Jenkins;\n import org.jenkinsci.Symbol;\n \n+import javax.annotation.Nonnull;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2372c516030c03165a60ef8f3bbc2ea5cf05fbd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODgzNDIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/ACL.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNTowOTowMlrOFs6EFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNTowOTowMlrOFs6EFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYzMjk4Mg==", "bodyText": "Not needed. Javadoc will consider the first sentence as a summary anyway", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382632982", "createdAt": "2020-02-21T15:09:02Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/security/ACL.java", "diffHunk": "@@ -77,6 +79,43 @@ public final void checkPermission(@Nonnull Permission p) {\n         }\n     }\n \n+    /**\n+     * Checks if the current security principal has one of the supplied permissions.\n+     *\n+     * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9ec7bee8e1fd8002330bcf278d13a1739cc23ab"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODgzNjQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/security/ACL.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNTowOTo0NVrOFs6FfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNTowOTo0NVrOFs6FfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYzMzM0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return false\n          \n          \n            \n                 * @return {@code false}", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382633341", "createdAt": "2020-02-21T15:09:45Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/security/ACL.java", "diffHunk": "@@ -91,6 +130,33 @@ public final boolean hasPermission(@Nonnull Permission p) {\n         return hasPermission(a, p);\n     }\n \n+    /**\n+     * Checks if the current security principal has any of the permissions.\n+     *\n+     * @return false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9ec7bee8e1fd8002330bcf278d13a1739cc23ab"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 801, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}