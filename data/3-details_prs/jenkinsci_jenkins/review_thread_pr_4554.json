{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MjY4MjIx", "number": 4554, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTowNDozOFrODmVgHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo0Njo1MVrODmlpWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTI0NzY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/util/jna/DotNet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTowNDozOFrOFzseSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo1NzowOFrOF1botQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc1MDM0NA==", "bodyText": "Do we really need to worry about 1.0 or other REALLY old frameworks?", "url": "https://github.com/jenkinsci/jenkins/pull/4554#discussion_r389750344", "createdAt": "2020-03-09T15:04:38Z", "author": {"login": "slide"}, "path": "core/src/main/java/hudson/util/jna/DotNet.java", "diffHunk": "@@ -30,83 +30,232 @@\n import org.jinterop.winreg.JIWinRegFactory;\n \n import java.net.UnknownHostException;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n /**\n  * .NET related code.\n  * \n  * @author Kohsuke Kawaguchi\n  */\n public class DotNet {\n+    private static final String PATH10 = \"SOFTWARE\\\\Microsoft\\\\.NETFramework\\\\Policy\\\\v1.0\\\\3705\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3fcca999243ad9b43752068cb274e4fe79d6c37"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MTYzNw==", "bodyText": "Done for completeness. We could directly return false as well.", "url": "https://github.com/jenkinsci/jenkins/pull/4554#discussion_r391571637", "createdAt": "2020-03-12T11:57:08Z", "author": {"login": "nxtn"}, "path": "core/src/main/java/hudson/util/jna/DotNet.java", "diffHunk": "@@ -30,83 +30,232 @@\n import org.jinterop.winreg.JIWinRegFactory;\n \n import java.net.UnknownHostException;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n /**\n  * .NET related code.\n  * \n  * @author Kohsuke Kawaguchi\n  */\n public class DotNet {\n+    private static final String PATH10 = \"SOFTWARE\\\\Microsoft\\\\.NETFramework\\\\Policy\\\\v1.0\\\\3705\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc1MDM0NA=="}, "originalCommit": {"oid": "f3fcca999243ad9b43752068cb274e4fe79d6c37"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzg3OTA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/util/jna/DotNet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo0MjoyNFrOF0FkHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODo0MjowNFrOF0tfMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MTQzNw==", "bodyText": "There is some duplication below which could be prevented IMHO. Not a blocker", "url": "https://github.com/jenkinsci/jenkins/pull/4554#discussion_r390161437", "createdAt": "2020-03-10T08:42:24Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/util/jna/DotNet.java", "diffHunk": "@@ -30,83 +30,232 @@\n import org.jinterop.winreg.JIWinRegFactory;\n \n import java.net.UnknownHostException;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n /**\n  * .NET related code.\n  * \n  * @author Kohsuke Kawaguchi\n  */\n public class DotNet {\n+    private static final String PATH10 = \"SOFTWARE\\\\Microsoft\\\\.NETFramework\\\\Policy\\\\v1.0\\\\3705\";\n+    private static final String PATH11 = \"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v1.1.4322\";\n+    private static final String PATH20 = \"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v2.0.50727\";\n+    private static final String PATH30 = \"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v3.0\\\\Setup\";\n+    private static final String PATH35 = \"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v3.5\";\n+    private static final String PATH4  = \"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\";\n+\n+    private static final String VALUE_INSTALL = \"Install\";\n+    private static final String VALUE_INSTALL_SUCCESS = \"InstallSuccess\";\n+    private static final String VALUE_RELEASE = \"Release\";\n+\n     /**\n-     * Returns true if the .NET framework of the given version (or greater) is installed.\n+     * Returns true if the .NET framework of a compatible version is installed.\n      */\n     public static boolean isInstalled(int major, int minor) {\n         try {\n-            // see http://support.microsoft.com/?scid=kb;en-us;315291 for the basic algorithm\n-            // observation in my registry shows that the actual key name can be things like \"v2.0 SP1\"\n-            // or \"v2.0.50727\", so the regexp is written to accommodate this.\n-            RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(\"SOFTWARE\\\\Microsoft\\\\.NETFramework\");\n-            try {\n-                for( String keyName : key.getSubKeys() ) {\n-                    if (matches(keyName, major, minor))\n-                        return true;\n-                }\n+            if (major == 4 && minor >= 5) {\n+                return isV45PlusInstalled(minor);\n+            } else if (major == 4 && minor == 0) {\n+                return isV40Installed();\n+            } else if (major == 3 && minor == 5) {\n+                return isV35Installed();\n+            } else if (major == 3 && minor == 0) {\n+                return isV35Installed() || isV30Installed();\n+            } else if (major == 2 && minor == 0) {\n+                return isV35Installed() || isV30Installed() || isV20Installed();\n+            } else if (major == 1 && minor == 1) {\n+                return isV11Installed();\n+            } else if (major == 1 && minor == 0) {\n+                return isV11Installed() || isV10Installed();\n+            } else {\n                 return false;\n-            } finally {\n-                key.dispose();\n             }\n         } catch (JnaException e) {\n-            if(e.getErrorCode()==2) // thrown when openReadonly fails because the key doesn't exist.\n+            if (e.getErrorCode() == 2) {\n+                // thrown when openReadonly fails because the key doesn't exist.\n                 return false;\n+            }\n             throw e;\n         }\n     }\n \n+    private static boolean isV45PlusInstalled(int minor) {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH4)) {\n+            return key.getIntValue(VALUE_RELEASE) >= GetV45PlusMinRelease(minor);\n+        }\n+    }\n+\n+    private static boolean isV40Installed() {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH4)) {\n+            return key.getIntValue(VALUE_INSTALL) == 1;\n+        }\n+    }\n+\n+    private static boolean isV35Installed() {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH35)) {\n+            return key.getIntValue(VALUE_INSTALL) == 1;\n+        }\n+    }\n+\n+    private static boolean isV30Installed() {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH30)) {\n+            return key.getIntValue(VALUE_INSTALL_SUCCESS) == 1;\n+        }\n+    }\n+\n+    private static boolean isV20Installed() {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH20)) {\n+            return key.getIntValue(VALUE_INSTALL) == 1;\n+        }\n+    }\n+\n+    private static boolean isV11Installed() {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH11)) {\n+            return key.getIntValue(VALUE_INSTALL) == 1;\n+        }\n+    }\n+\n+    private static boolean isV10Installed() {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH10)) {\n+            return key.getStringValue(VALUE_INSTALL) == \"1\";\n+        }\n+    }\n+\n     /**\n-     * Returns true if the .NET framework of the given version (or grater) is installed\n-     * on a remote machine. \n+     * Returns true if the .NET framework of a compatible version is installed on a remote machine. \n      */\n     public static boolean isInstalled(int major, int minor, String targetMachine, IJIAuthInfo session) throws JIException, UnknownHostException {\n-        IJIWinReg registry = JIWinRegFactory.getSingleTon().getWinreg(session,targetMachine,true);\n-        JIPolicyHandle hklm=null;\n-        JIPolicyHandle key=null;\n-\n+        IJIWinReg registry = JIWinRegFactory.getSingleTon().getWinreg(session, targetMachine, true);\n+        JIPolicyHandle hklm = null;\n         try {\n             hklm = registry.winreg_OpenHKLM();\n-            key = registry.winreg_OpenKey(hklm,\"SOFTWARE\\\\Microsoft\\\\.NETFramework\", IJIWinReg.KEY_READ );\n-\n-            for( int i=0; ; i++ ) {\n-                String keyName = registry.winreg_EnumKey(key,i)[0];\n-                if(matches(keyName,major,minor))\n-                    return true;\n+            if (major == 4 && minor >= 5) {\n+                return isV45PlusInstalled(minor, registry, hklm);\n+            } else if (major == 4 && minor == 0) {\n+                return isV40Installed(registry, hklm);\n+            } else if (major == 3 && minor == 5) {\n+                return isV35Installed(registry, hklm);\n+            } else if (major == 3 && minor == 0) {\n+                return isV35Installed(registry, hklm) || isV30Installed(registry, hklm);\n+            } else if (major == 2 && minor == 0) {\n+                return isV35Installed(registry, hklm) || isV30Installed(registry, hklm) || isV20Installed(registry, hklm);\n+            } else if (major == 1 && minor == 1) {\n+                return isV11Installed(registry, hklm);\n+            } else if (major == 1 && minor == 0) {\n+                return isV11Installed(registry, hklm) || isV10Installed(registry, hklm);\n+            } else {\n+                return false;\n             }\n         } catch (JIException e) {\n-            if(e.getErrorCode()==2)\n-                return false;       // not found\n+            if (e.getErrorCode() == 2) {\n+                // not found\n+                return false;\n+            }\n             throw e;\n         } finally {\n-            if(hklm!=null)\n+            if (hklm != null) {\n                 registry.winreg_CloseKey(hklm);\n-            if(key!=null)\n-                registry.winreg_CloseKey(key);\n+            }\n             registry.closeConnection();\n         }\n     }\n \n-    private static boolean matches(String keyName, int major, int minor) {\n-        Matcher m = VERSION_PATTERN.matcher(keyName);\n-        if(m.matches()) {\n-            int mj = Integer.parseInt(m.group(1));\n-            if(mj>=major) {\n-                int mn = Integer.parseInt(m.group(2));\n-                if(mn>=minor)\n-                    return true;\n+    private static boolean isV45PlusInstalled(int minor, IJIWinReg registry, JIPolicyHandle hklm) throws JIException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3fcca999243ad9b43752068cb274e4fe79d6c37"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgxNTUzNg==", "bodyText": "Updated. I've never seen a library any uglier than this org.jinterop.winreg.", "url": "https://github.com/jenkinsci/jenkins/pull/4554#discussion_r390815536", "createdAt": "2020-03-11T08:42:04Z", "author": {"login": "nxtn"}, "path": "core/src/main/java/hudson/util/jna/DotNet.java", "diffHunk": "@@ -30,83 +30,232 @@\n import org.jinterop.winreg.JIWinRegFactory;\n \n import java.net.UnknownHostException;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n /**\n  * .NET related code.\n  * \n  * @author Kohsuke Kawaguchi\n  */\n public class DotNet {\n+    private static final String PATH10 = \"SOFTWARE\\\\Microsoft\\\\.NETFramework\\\\Policy\\\\v1.0\\\\3705\";\n+    private static final String PATH11 = \"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v1.1.4322\";\n+    private static final String PATH20 = \"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v2.0.50727\";\n+    private static final String PATH30 = \"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v3.0\\\\Setup\";\n+    private static final String PATH35 = \"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v3.5\";\n+    private static final String PATH4  = \"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\";\n+\n+    private static final String VALUE_INSTALL = \"Install\";\n+    private static final String VALUE_INSTALL_SUCCESS = \"InstallSuccess\";\n+    private static final String VALUE_RELEASE = \"Release\";\n+\n     /**\n-     * Returns true if the .NET framework of the given version (or greater) is installed.\n+     * Returns true if the .NET framework of a compatible version is installed.\n      */\n     public static boolean isInstalled(int major, int minor) {\n         try {\n-            // see http://support.microsoft.com/?scid=kb;en-us;315291 for the basic algorithm\n-            // observation in my registry shows that the actual key name can be things like \"v2.0 SP1\"\n-            // or \"v2.0.50727\", so the regexp is written to accommodate this.\n-            RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(\"SOFTWARE\\\\Microsoft\\\\.NETFramework\");\n-            try {\n-                for( String keyName : key.getSubKeys() ) {\n-                    if (matches(keyName, major, minor))\n-                        return true;\n-                }\n+            if (major == 4 && minor >= 5) {\n+                return isV45PlusInstalled(minor);\n+            } else if (major == 4 && minor == 0) {\n+                return isV40Installed();\n+            } else if (major == 3 && minor == 5) {\n+                return isV35Installed();\n+            } else if (major == 3 && minor == 0) {\n+                return isV35Installed() || isV30Installed();\n+            } else if (major == 2 && minor == 0) {\n+                return isV35Installed() || isV30Installed() || isV20Installed();\n+            } else if (major == 1 && minor == 1) {\n+                return isV11Installed();\n+            } else if (major == 1 && minor == 0) {\n+                return isV11Installed() || isV10Installed();\n+            } else {\n                 return false;\n-            } finally {\n-                key.dispose();\n             }\n         } catch (JnaException e) {\n-            if(e.getErrorCode()==2) // thrown when openReadonly fails because the key doesn't exist.\n+            if (e.getErrorCode() == 2) {\n+                // thrown when openReadonly fails because the key doesn't exist.\n                 return false;\n+            }\n             throw e;\n         }\n     }\n \n+    private static boolean isV45PlusInstalled(int minor) {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH4)) {\n+            return key.getIntValue(VALUE_RELEASE) >= GetV45PlusMinRelease(minor);\n+        }\n+    }\n+\n+    private static boolean isV40Installed() {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH4)) {\n+            return key.getIntValue(VALUE_INSTALL) == 1;\n+        }\n+    }\n+\n+    private static boolean isV35Installed() {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH35)) {\n+            return key.getIntValue(VALUE_INSTALL) == 1;\n+        }\n+    }\n+\n+    private static boolean isV30Installed() {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH30)) {\n+            return key.getIntValue(VALUE_INSTALL_SUCCESS) == 1;\n+        }\n+    }\n+\n+    private static boolean isV20Installed() {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH20)) {\n+            return key.getIntValue(VALUE_INSTALL) == 1;\n+        }\n+    }\n+\n+    private static boolean isV11Installed() {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH11)) {\n+            return key.getIntValue(VALUE_INSTALL) == 1;\n+        }\n+    }\n+\n+    private static boolean isV10Installed() {\n+        try (RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly(PATH10)) {\n+            return key.getStringValue(VALUE_INSTALL) == \"1\";\n+        }\n+    }\n+\n     /**\n-     * Returns true if the .NET framework of the given version (or grater) is installed\n-     * on a remote machine. \n+     * Returns true if the .NET framework of a compatible version is installed on a remote machine. \n      */\n     public static boolean isInstalled(int major, int minor, String targetMachine, IJIAuthInfo session) throws JIException, UnknownHostException {\n-        IJIWinReg registry = JIWinRegFactory.getSingleTon().getWinreg(session,targetMachine,true);\n-        JIPolicyHandle hklm=null;\n-        JIPolicyHandle key=null;\n-\n+        IJIWinReg registry = JIWinRegFactory.getSingleTon().getWinreg(session, targetMachine, true);\n+        JIPolicyHandle hklm = null;\n         try {\n             hklm = registry.winreg_OpenHKLM();\n-            key = registry.winreg_OpenKey(hklm,\"SOFTWARE\\\\Microsoft\\\\.NETFramework\", IJIWinReg.KEY_READ );\n-\n-            for( int i=0; ; i++ ) {\n-                String keyName = registry.winreg_EnumKey(key,i)[0];\n-                if(matches(keyName,major,minor))\n-                    return true;\n+            if (major == 4 && minor >= 5) {\n+                return isV45PlusInstalled(minor, registry, hklm);\n+            } else if (major == 4 && minor == 0) {\n+                return isV40Installed(registry, hklm);\n+            } else if (major == 3 && minor == 5) {\n+                return isV35Installed(registry, hklm);\n+            } else if (major == 3 && minor == 0) {\n+                return isV35Installed(registry, hklm) || isV30Installed(registry, hklm);\n+            } else if (major == 2 && minor == 0) {\n+                return isV35Installed(registry, hklm) || isV30Installed(registry, hklm) || isV20Installed(registry, hklm);\n+            } else if (major == 1 && minor == 1) {\n+                return isV11Installed(registry, hklm);\n+            } else if (major == 1 && minor == 0) {\n+                return isV11Installed(registry, hklm) || isV10Installed(registry, hklm);\n+            } else {\n+                return false;\n             }\n         } catch (JIException e) {\n-            if(e.getErrorCode()==2)\n-                return false;       // not found\n+            if (e.getErrorCode() == 2) {\n+                // not found\n+                return false;\n+            }\n             throw e;\n         } finally {\n-            if(hklm!=null)\n+            if (hklm != null) {\n                 registry.winreg_CloseKey(hklm);\n-            if(key!=null)\n-                registry.winreg_CloseKey(key);\n+            }\n             registry.closeConnection();\n         }\n     }\n \n-    private static boolean matches(String keyName, int major, int minor) {\n-        Matcher m = VERSION_PATTERN.matcher(keyName);\n-        if(m.matches()) {\n-            int mj = Integer.parseInt(m.group(1));\n-            if(mj>=major) {\n-                int mn = Integer.parseInt(m.group(2));\n-                if(mn>=minor)\n-                    return true;\n+    private static boolean isV45PlusInstalled(int minor, IJIWinReg registry, JIPolicyHandle hklm) throws JIException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MTQzNw=="}, "originalCommit": {"oid": "f3fcca999243ad9b43752068cb274e4fe79d6c37"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzg5MjczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/util/jna/RegistryKey.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo0Njo1MVrOF0FsXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo0Njo1MVrOF0FsXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MzU0OA==", "bodyText": "It is used in  3 plugins outside the Jenkins core: https://github.com/search?q=org%3Ajenkinsci+%22hudson.util.jna.RegistryKey%22&type=Code . All of them implement try/catch properly, but I agree this enhancement would help. Maybe we should note it in the a developer API changelog entry, but it is fairly minor", "url": "https://github.com/jenkinsci/jenkins/pull/4554#discussion_r390163548", "createdAt": "2020-03-10T08:46:51Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/util/jna/RegistryKey.java", "diffHunk": "@@ -27,7 +27,7 @@\n  *\n  * @author Kohsuke Kawaguchi\n  */\n-public class RegistryKey {\n+public class RegistryKey implements AutoCloseable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3fcca999243ad9b43752068cb274e4fe79d6c37"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 602, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}