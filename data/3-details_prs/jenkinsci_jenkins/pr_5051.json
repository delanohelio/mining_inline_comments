{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3OTk4MjA3", "number": 5051, "title": "JENKINS-64196 Move PluginManager available page to client side", "bodyText": "See JENKINS-64196.\nI tested this on a released version of Jenkins:\n2850ms till complete load\nWhen I demoed it at ux-sig meeting it was 17 seconds to do a complete load \ud83e\udd2f\nand on this PR:\n490ms load time on new\nTest me\ndocker run --rm -ti -p 8080:8080 -e ID=5051 jenkins/core-pr-tester\n\nProposed changelog entries\n\nEntry 1: JENKINS-64196 Massive performance enhancement to available plugins page, exact matches of plugin name are moved to the top\nEntry 2: JENKINS-63684 Fix incorrect striping of rows on available page\n\n\nProposed upgrade guidelines\nN/A\nSubmitter checklist\n\n (If applicable) Jira issue is well described\n Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). Examples\n\nFill-in the Proposed changelog entries section only if there are breaking changes or other changes which may require extra steps from users during the upgrade\n\n\n Appropriate autotests or explanation to why this change has no tests\n For dependency updates: links to external changelogs and, if possible, full diffs\n\n\nDesired reviewers\n@mention\n\nMaintainer checklist\nBefore the changes are marked as ready-for-merge:\n\n There are at least 2 approvals for the pull request and no outstanding requests for change\n Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n Changelog entries in the PR title and/or Proposed changelog entries are correct\n Proper changelog labels are set so that the changelog can be generated automatically\n If the change needs additional upgrade steps from users, upgrade-guide-needed label is set and there is a Proposed upgrade guidelines section in the PR title. (example)\n If it would make sense to backport the change to LTS, a Jira issue must exist, be a Bug or Improvement, and be labeled as lts-candidate to be considered (see query).", "createdAt": "2020-11-09T19:46:30Z", "url": "https://github.com/jenkinsci/jenkins/pull/5051", "merged": true, "mergeCommit": {"oid": "09307ea11687bf1571a584c2d119f0f5b3618f5a"}, "closed": true, "closedAt": "2020-12-08T07:29:22Z", "author": {"login": "timja"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABda5_lDAH2gAyNTE3OTk4MjA3OjhlMjE3ZGI5OTZjMzUwNGUyM2U2ZjBjY2RmZmEzZjE2MDEyZWQyYmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdjWapUAFqTU0NTY2MTU2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/8e217db996c3504e23e6f0ccdffa3f16012ed2be", "committedDate": "2020-11-09T19:33:18Z", "message": "Move PluginManager available to client side"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NjAxMDAy", "url": "https://github.com/jenkinsci/jenkins/pull/5051#pullrequestreview-526601002", "createdAt": "2020-11-09T19:50:20Z", "commit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo1MDoyMFrOHv_Ffg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo1ODowM1rOHv_XJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3ODcxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Restricted(Beta.class)\n          \n          \n            \n                @Restricted(NoExternalUse.class)", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r520078718", "createdAt": "2020-11-09T19:50:20Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/model/UpdateCenter.java", "diffHunk": "@@ -971,6 +976,119 @@ private XmlFile getConfigFile() {\n                                     UpdateCenter.class.getName()+\".xml\"));\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public static boolean isNonMetaLabel(String label) {\n+        return !(\"adopt-this-plugin\".equals(label) || \"deprecated\".equals(label));\n+    }\n+\n+    @Restricted(NoExternalUse.class)\n+    public static boolean hasAdoptThisPluginLabel(UpdateSite.Plugin plugin) {\n+        final String[] categories = plugin.categories;\n+        if (categories == null) {\n+            return false;\n+        }\n+        return Arrays.asList(categories).contains(\"adopt-this-plugin\");\n+    }\n+\n+    @Restricted(NoExternalUse.class)\n+    public static boolean hasLatestVersionNewerThanOffered(UpdateSite.Plugin plugin) {\n+        if (plugin.latest == null) {\n+            return false;\n+        }\n+        return !plugin.latest.equalsIgnoreCase(plugin.version); // we can assume that any defined 'latest' will be newer than the actual offered version\n+    }\n+    \n+    @JavaScriptMethod\n+    @Restricted(Beta.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4MDUwNg==", "bodyText": "I think I got all of the relevant warnings, some of them are only on the updates page", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r520080506", "createdAt": "2020-11-09T19:53:36Z", "author": {"login": "timja"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki\n+                            htmlAnchorElement.text = plugin.displayName\n+                            htmlAnchorElement.target = '_blank'\n+                            htmlAnchorElement.rel = 'noopener noreferrer'\n+                            htmlDivElement.append(htmlAnchorElement)\n+                            htmlTableDataCellElement.append(htmlDivElement)\n+\n+                            if (plugin.categories) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('plugin-manager__categories');\n+                                plugin.categories.forEach(function (category) {\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = '?filter=' + category;\n+                                    htmlAnchorElement.classList.add('plugin-manager__category-label')\n+                                    htmlAnchorElement.text = category\n+                                    htmlDivElement.append(htmlAnchorElement)\n+                                })\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            if (plugin.excerpt) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('excerpt');\n+                                htmlDivElement.innerHTML = plugin.excerpt\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                            \n+                            if (plugin.newerCoreRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerCoreRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerJavaRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerJavaRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.dependenciesNewerJava) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.dependenciesNewerJava\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.unresolvedSecurityWarnings) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerText = plugin.unresolvedSecurityWarnings.text\n+                                var listElement = document.createElement('ul');\n+                                plugin.unresolvedSecurityWarnings.warnings.forEach(function(warning) {\n+                                    var li = document.createElement('li');\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = warning.url\n+                                    htmlAnchorElement.text = warning.message\n+                                    htmlAnchorElement.target = '_blank'\n+                                    htmlAnchorElement.rel = 'noopener noreferrer'\n+                                    li.append(htmlAnchorElement)\n+                                    listElement.append(li)\n+                                })\n+                                htmlDivElement.append(listElement)\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.deprecated) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-warning');\n+                                htmlDivElement.innerHTML = plugin.deprecated\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.adoptMe) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-warning');\n+                                htmlDivElement.innerHTML = plugin.adoptMe\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerVersionAvailableNotOffered) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4MDg2NQ==", "bodyText": "shout if any one knows a more Jenkins' way to do this.\nIt's not very nice, but huge performance gain", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r520080865", "createdAt": "2020-11-09T19:54:16Z", "author": {"login": "timja"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4MjE2MA==", "bodyText": "this code is just moved and not used on the available page", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r520082160", "createdAt": "2020-11-09T19:56:15Z", "author": {"login": "timja"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki\n+                            htmlAnchorElement.text = plugin.displayName\n+                            htmlAnchorElement.target = '_blank'\n+                            htmlAnchorElement.rel = 'noopener noreferrer'\n+                            htmlDivElement.append(htmlAnchorElement)\n+                            htmlTableDataCellElement.append(htmlDivElement)\n+\n+                            if (plugin.categories) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('plugin-manager__categories');\n+                                plugin.categories.forEach(function (category) {\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = '?filter=' + category;\n+                                    htmlAnchorElement.classList.add('plugin-manager__category-label')\n+                                    htmlAnchorElement.text = category\n+                                    htmlDivElement.append(htmlAnchorElement)\n+                                })\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            if (plugin.excerpt) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('excerpt');\n+                                htmlDivElement.innerHTML = plugin.excerpt\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                            \n+                            if (plugin.newerCoreRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerCoreRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerJavaRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerJavaRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.dependenciesNewerJava) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.dependenciesNewerJava\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.unresolvedSecurityWarnings) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerText = plugin.unresolvedSecurityWarnings.text\n+                                var listElement = document.createElement('ul');\n+                                plugin.unresolvedSecurityWarnings.warnings.forEach(function(warning) {\n+                                    var li = document.createElement('li');\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = warning.url\n+                                    htmlAnchorElement.text = warning.message\n+                                    htmlAnchorElement.target = '_blank'\n+                                    htmlAnchorElement.rel = 'noopener noreferrer'\n+                                    li.append(htmlAnchorElement)\n+                                    listElement.append(li)\n+                                })\n+                                htmlDivElement.append(listElement)\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.deprecated) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-warning');\n+                                htmlDivElement.innerHTML = plugin.deprecated\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.adoptMe) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-warning');\n+                                htmlDivElement.innerHTML = plugin.adoptMe\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerVersionAvailableNotOffered) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-info');\n+                                htmlDivElement.innerHTML = plugin.newerVersionAvailableNotOffered\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                        }\n+\n+                        function createVersionEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            htmlTableDataCellElement.append(document.createTextNode(plugin.version));\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createReleasedAgo() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            if (plugin.releaseTimestamp) {\n+                                var htmlTimeElement = document.createElement('time');\n+                                htmlTimeElement.dateTime = plugin.releaseTimestamp.iso8601;\n+                                htmlTimeElement.textContent = plugin.releaseTimestamp.displayValue;\n+                                htmlTableDataCellElement.append(htmlTimeElement);\n+                            }\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        if (pluginsTable.dataset.hasadmin === 'true') {\n+                            createCheckBox();\n+                        }\n+                        createNameEntry();\n+                        createVersionEntry();\n+                        createReleasedAgo();\n+\n+                        tbody.append(htmlTableRowElement);\n+                    })\n+                })\n             } else {\n-                items[i].addClassName(\"hidden\");\n+                var filter = e.value.toLowerCase().trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4MjYzNQ==", "bodyText": "these are all duplicated with table.properties so that I can access them in java. \ud83d\ude22", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r520082635", "createdAt": "2020-11-09T19:57:04Z", "author": {"login": "timja"}, "path": "core/src/main/resources/hudson/model/Messages.properties", "diffHunk": "@@ -333,6 +333,49 @@ UpdateCenter.PluginCategory.view=Views\n UpdateCenter.PluginCategory.must-be-labeled=Uncategorized\n UpdateCenter.PluginCategory.unrecognized=Misc ({0})\n \n+UpdateCenter.compatWarning=\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4Mjg0MQ==", "bodyText": "there's more to copy / move if the approach is validated", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r520082841", "createdAt": "2020-11-09T19:57:22Z", "author": {"login": "timja"}, "path": "core/src/main/resources/hudson/model/Messages_bg.properties", "diffHunk": "@@ -700,6 +700,10 @@ Hudson.NoParamsSpecified=\\\n # Update Center\n UpdateCenter.DisplayName=\\\n  \\u0426\\u0435\\u043d\\u0442\\u044a\\u0440 \\u0437\\u0430 \\u043e\\u0431\\u043d\\u043e\\u0432\\u044f\\u0432\\u0430\\u043d\\u0435\n+# Warning: This plugin version may not be safe to use. Please review the following security notices:\n+UpdateCenter.securityWarning=\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4MzIzOA==", "bodyText": "haven't tested the functionality in IE 11, but this would be needed at least", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r520083238", "createdAt": "2020-11-09T19:58:03Z", "author": {"login": "timja"}, "path": "war/src/main/webapp/scripts/polyfills.js", "diffHunk": "@@ -18,3 +18,13 @@ if (!Element.prototype.closest) {\n }\n \n // end closest / matches polyfill\n+\n+// https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach#Polyfill\n+if (window.NodeList && !NodeList.prototype.forEach) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3ODQxMDc5", "url": "https://github.com/jenkinsci/jenkins/pull/5051#pullrequestreview-527841079", "createdAt": "2020-11-11T03:44:10Z", "commit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo0NDoxMFrOHw8-EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo0NDoxMFrOHw8-EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5MjYyNQ==", "bodyText": "hasClassName and addClassName seem to be prototypejs funcitons.\nclassList is the official one - https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\nitems[i].classList.contains('hidden-by-default')\nitems[i].classList.add('hidden')\n(or even use toggle)", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521092625", "createdAt": "2020-11-11T03:44:10Z", "author": {"login": "halkeye"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki\n+                            htmlAnchorElement.text = plugin.displayName\n+                            htmlAnchorElement.target = '_blank'\n+                            htmlAnchorElement.rel = 'noopener noreferrer'\n+                            htmlDivElement.append(htmlAnchorElement)\n+                            htmlTableDataCellElement.append(htmlDivElement)\n+\n+                            if (plugin.categories) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('plugin-manager__categories');\n+                                plugin.categories.forEach(function (category) {\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = '?filter=' + category;\n+                                    htmlAnchorElement.classList.add('plugin-manager__category-label')\n+                                    htmlAnchorElement.text = category\n+                                    htmlDivElement.append(htmlAnchorElement)\n+                                })\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            if (plugin.excerpt) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('excerpt');\n+                                htmlDivElement.innerHTML = plugin.excerpt\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                            \n+                            if (plugin.newerCoreRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerCoreRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerJavaRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerJavaRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.dependenciesNewerJava) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.dependenciesNewerJava\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.unresolvedSecurityWarnings) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerText = plugin.unresolvedSecurityWarnings.text\n+                                var listElement = document.createElement('ul');\n+                                plugin.unresolvedSecurityWarnings.warnings.forEach(function(warning) {\n+                                    var li = document.createElement('li');\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = warning.url\n+                                    htmlAnchorElement.text = warning.message\n+                                    htmlAnchorElement.target = '_blank'\n+                                    htmlAnchorElement.rel = 'noopener noreferrer'\n+                                    li.append(htmlAnchorElement)\n+                                    listElement.append(li)\n+                                })\n+                                htmlDivElement.append(listElement)\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.deprecated) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-warning');\n+                                htmlDivElement.innerHTML = plugin.deprecated\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.adoptMe) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-warning');\n+                                htmlDivElement.innerHTML = plugin.adoptMe\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerVersionAvailableNotOffered) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-info');\n+                                htmlDivElement.innerHTML = plugin.newerVersionAvailableNotOffered\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                        }\n+\n+                        function createVersionEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            htmlTableDataCellElement.append(document.createTextNode(plugin.version));\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createReleasedAgo() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            if (plugin.releaseTimestamp) {\n+                                var htmlTimeElement = document.createElement('time');\n+                                htmlTimeElement.dateTime = plugin.releaseTimestamp.iso8601;\n+                                htmlTimeElement.textContent = plugin.releaseTimestamp.displayValue;\n+                                htmlTableDataCellElement.append(htmlTimeElement);\n+                            }\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        if (pluginsTable.dataset.hasadmin === 'true') {\n+                            createCheckBox();\n+                        }\n+                        createNameEntry();\n+                        createVersionEntry();\n+                        createReleasedAgo();\n+\n+                        tbody.append(htmlTableRowElement);\n+                    })\n+                })\n             } else {\n-                items[i].addClassName(\"hidden\");\n+                var filter = e.value.toLowerCase().trim();\n+                var filterParts = filter.split(/ +/).filter(function (word) {\n+                    return word.length > 0;\n+                });\n+                var items = document.getElementsBySelector(\"TR.plugin\");\n+                var anyVisible = false;\n+                for (var i = 0; i < items.length; i++) {\n+                    if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 202}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3ODQyMTY5", "url": "https://github.com/jenkinsci/jenkins/pull/5051#pullrequestreview-527842169", "createdAt": "2020-11-11T03:47:53Z", "commit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo0Nzo1M1rOHw9G9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo0Nzo1M1rOHw9G9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5NDkwMA==", "bodyText": "Its probably fine, but i think textContent is safer, and from reading online, faster - https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521094900", "createdAt": "2020-11-11T03:47:53Z", "author": {"login": "halkeye"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki\n+                            htmlAnchorElement.text = plugin.displayName\n+                            htmlAnchorElement.target = '_blank'\n+                            htmlAnchorElement.rel = 'noopener noreferrer'\n+                            htmlDivElement.append(htmlAnchorElement)\n+                            htmlTableDataCellElement.append(htmlDivElement)\n+\n+                            if (plugin.categories) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('plugin-manager__categories');\n+                                plugin.categories.forEach(function (category) {\n+                                    var htmlAnchorElement = document.createElement('a');\n+                                    htmlAnchorElement.href = '?filter=' + category;\n+                                    htmlAnchorElement.classList.add('plugin-manager__category-label')\n+                                    htmlAnchorElement.text = category\n+                                    htmlDivElement.append(htmlAnchorElement)\n+                                })\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            if (plugin.excerpt) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('excerpt');\n+                                htmlDivElement.innerHTML = plugin.excerpt\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                            \n+                            if (plugin.newerCoreRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerCoreRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.newerJavaRequired) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.newerJavaRequired\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.dependenciesNewerJava) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerHTML = plugin.dependenciesNewerJava\n+                                htmlTableDataCellElement.append(htmlDivElement)\n+                            }\n+\n+                            if (plugin.unresolvedSecurityWarnings) {\n+                                htmlDivElement = document.createElement('div');\n+                                htmlDivElement.classList.add('alert', 'alert-danger');\n+                                htmlDivElement.innerText = plugin.unresolvedSecurityWarnings.text", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3ODQyNTc3", "url": "https://github.com/jenkinsci/jenkins/pull/5051#pullrequestreview-527842577", "createdAt": "2020-11-11T03:49:18Z", "commit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo0OToxOFrOHw9IKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo0OToxOFrOHw9IKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5NTIwOQ==", "bodyText": "so technically this is controlled by the pom right? so technically they could have a wiki link of javascript:alert(\"foo\")? do we need to sanitize this at all? make sure its a parsed url in the backend?", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r521095209", "createdAt": "2020-11-11T03:49:18Z", "author": {"login": "halkeye"}, "path": "core/src/main/resources/hudson/PluginManager/_table.js", "diffHunk": "@@ -10,46 +10,214 @@ function checkPluginsWithoutWarnings() {\n \n Behaviour.specify(\"#filter-box\", '_table', 0, function(e) {\n     function applyFilter() {\n-        var filter = e.value.toLowerCase().trim();\n-        var filterParts = filter.split(/ +/).filter (function(word) { return word.length > 0; });\n-        var items = document.getElementsBySelector(\"TR.plugin\");\n-        var anyVisible = false;\n-        for (var i=0; i<items.length; i++) {\n-            if ((filterParts.length < 1 || filter.length < 2) && items[i].hasClassName(\"hidden-by-default\")) {\n-                items[i].addClassName(\"hidden\");\n-                continue;\n-            }\n-            var makeVisible = true;\n-\n-            var content = items[i].innerHTML.toLowerCase();\n-            for (var j = 0; j < filterParts.length; j++) {\n-                var part = filterParts[j];\n-                if (content.indexOf(part) < 0) {\n-                    makeVisible = false;\n-                    break;\n-                }\n-            }\n-            if (makeVisible) {\n-                items[i].removeClassName(\"hidden\");\n-                anyVisible = true;\n+        clearTimeout(debounce);\n+        // debounce reduces number of server side calls while typing\n+        debounce = setTimeout(function() {\n+            var pluginsTable = document.getElementById('plugins');\n+\n+            // only on available tab\n+            if (pluginsTable.dataset.page === 'available') {\n+                view.availablePlugins(e.value.toLowerCase().trim(), 20, function (plugins) {\n+                    var availablePlugins = JSON.parse(plugins.responseObject());\n+\n+                    var tbody = pluginsTable.querySelector('tbody');\n+\n+                    function clearOldResults() {\n+                        if (pluginsTable.dataset.hasadmin !== 'true') {\n+                            tbody.innerHTML = '';\n+                        } else {\n+                            var rows = tbody.querySelectorAll('tr');\n+                            if (rows) {\n+                                rows.forEach(function (row) {\n+                                    var input = row.firstChild.firstChild;\n+                                    if (input.checked !== true) {\n+                                        row.remove();\n+                                    }\n+                                })\n+                            }\n+                        }\n+                    }\n+\n+                    clearOldResults();\n+\n+                    availablePlugins.forEach(function (plugin) {\n+                        var htmlTableRowElement = document.createElement('tr');\n+                        htmlTableRowElement.classList.add('plugin');\n+\n+                        function createCheckBox() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlInputElement = document.createElement('input');\n+                            htmlInputElement.type = 'checkbox';\n+                            htmlInputElement.name = 'plugin.' + plugin.name + '.' + plugin.sourceId;\n+                            htmlTableDataCellElement.append(htmlInputElement);\n+                            htmlTableRowElement.append(htmlTableDataCellElement);\n+                        }\n+\n+                        function createNameEntry() {\n+                            var htmlTableDataCellElement = document.createElement('td');\n+                            htmlTableDataCellElement.classList.add('pane')\n+                            var htmlDivElement = document.createElement('div');\n+                            var htmlAnchorElement = document.createElement('a');\n+                            htmlAnchorElement.href = plugin.wiki", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3ODQyODMz", "url": "https://github.com/jenkinsci/jenkins/pull/5051#pullrequestreview-527842833", "createdAt": "2020-11-11T03:50:14Z", "commit": {"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce9da0cd85c832df6f693d6b51ea3da3de9b4498", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/ce9da0cd85c832df6f693d6b51ea3da3de9b4498", "committedDate": "2020-11-11T09:56:29Z", "message": "Fix in IE"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MDk2MTk2", "url": "https://github.com/jenkinsci/jenkins/pull/5051#pullrequestreview-528096196", "createdAt": "2020-11-11T11:39:46Z", "commit": {"oid": "ce9da0cd85c832df6f693d6b51ea3da3de9b4498"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1965b837d92b6d0c4c459ed674d554d1a0add172", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/1965b837d92b6d0c4c459ed674d554d1a0add172", "committedDate": "2020-11-12T12:03:06Z", "message": "Merge branch 'master' into plugin-manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c91e9b13fc24efab7e3f6a68f72e3ff31792e24", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/1c91e9b13fc24efab7e3f6a68f72e3ff31792e24", "committedDate": "2020-11-12T14:59:26Z", "message": "Address feedback from ux-sig demo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5418f7e856011b94a77a41d65b2ec51c4e95dc8a", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/5418f7e856011b94a77a41d65b2ec51c4e95dc8a", "committedDate": "2020-11-12T16:36:31Z", "message": "Add handlebars module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab3c1bcfd9b54f1f934af574d00811e56fc142e3", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/ab3c1bcfd9b54f1f934af574d00811e56fc142e3", "committedDate": "2020-11-13T14:14:44Z", "message": "Handlebars plugin manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11ee569e0ab05e53e3b0ff654477c4aedc90073f", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/11ee569e0ab05e53e3b0ff654477c4aedc90073f", "committedDate": "2020-11-13T14:15:48Z", "message": "Update core/src/main/java/hudson/model/UpdateCenter.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ef60f235038569785669659cbff8cf50660baf9", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/5ef60f235038569785669659cbff8cf50660baf9", "committedDate": "2020-11-13T14:16:34Z", "message": "Remove import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a93dec0d1d772a77d01399992431fb77c805dc37", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/a93dec0d1d772a77d01399992431fb77c805dc37", "committedDate": "2020-11-13T14:26:26Z", "message": "Fix input"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54a6b84512ab7c471cda81f981ceb2fb94f44891", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/54a6b84512ab7c471cda81f981ceb2fb94f44891", "committedDate": "2020-11-13T14:27:11Z", "message": "Remove debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4ce1357a47eb84cae41faa192d3f52034f41de4", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/b4ce1357a47eb84cae41faa192d3f52034f41de4", "committedDate": "2020-11-13T15:29:45Z", "message": "Use rest client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d0b1198ba0a9c33fe9970535c98ea77b35231fb", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/8d0b1198ba0a9c33fe9970535c98ea77b35231fb", "committedDate": "2020-11-13T15:34:13Z", "message": "Fix bug"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMjk2Njk3", "url": "https://github.com/jenkinsci/jenkins/pull/5051#pullrequestreview-530296697", "createdAt": "2020-11-13T18:14:04Z", "commit": {"oid": "8d0b1198ba0a9c33fe9970535c98ea77b35231fb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODoxNDowNFrOHy5sZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODoxNDowNFrOHy5sZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEzNjEwMQ==", "bodyText": "you can bring in lodash.debounce and use it here", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r523136101", "createdAt": "2020-11-13T18:14:04Z", "author": {"login": "fqueiruga"}, "path": "war/src/main/js/plugin-manager-ui.js", "diffHunk": "@@ -0,0 +1,59 @@\n+import pluginManagerAvailable from './templates/plugin-manager/available.hbs'\n+import pluginManager from './api/pluginManager';\n+\n+var debounce = null;\n+\n+function applyFilter(searchQuery) {\n+    clearTimeout(debounce);\n+    // debounce reduces number of server side calls while typing\n+    debounce = setTimeout(function () {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d0b1198ba0a9c33fe9970535c98ea77b35231fb"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bef659de081308754f63824c1c1b6044fcd6683d", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/bef659de081308754f63824c1c1b6044fcd6683d", "committedDate": "2020-11-13T19:51:09Z", "message": "Move properties to right location"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "553ddd714b77aeae2014d66ac4dfeaf255b4ffe2", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/553ddd714b77aeae2014d66ac4dfeaf255b4ffe2", "committedDate": "2020-11-13T19:51:35Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a01bd001b3dc2c88e8f75684476d9bcd10fc3724", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/a01bd001b3dc2c88e8f75684476d9bcd10fc3724", "committedDate": "2020-11-13T20:20:56Z", "message": "Use lodash debounce"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea475b74f2c5e27631a17047e7d4463f61ac538f", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/ea475b74f2c5e27631a17047e7d4463f61ac538f", "committedDate": "2020-11-13T20:22:02Z", "message": "Revert properties change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c7d27d2b2d1e843b5cce53df64a4a347d2cc53f", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/7c7d27d2b2d1e843b5cce53df64a4a347d2cc53f", "committedDate": "2020-11-13T20:23:27Z", "message": "Fmt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf635cc57aaabe67c76cf2c2e14f034e556543f0", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/bf635cc57aaabe67c76cf2c2e14f034e556543f0", "committedDate": "2020-11-20T12:29:51Z", "message": "Rank exact matches at the top"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NDA2ODY3", "url": "https://github.com/jenkinsci/jenkins/pull/5051#pullrequestreview-535406867", "createdAt": "2020-11-20T13:00:24Z", "commit": {"oid": "bf635cc57aaabe67c76cf2c2e14f034e556543f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzowMDoyNFrOH3Ovnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzowMDoyNFrOH3Ovnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NTI5NQ==", "bodyText": "So what's the Turkish locale situation in JS?\nAre they going to search for GIT and not find git because it's not g\u0131t?", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r527675295", "createdAt": "2020-11-20T13:00:24Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -1344,6 +1346,121 @@ public void stop() {\n         LogFactory.release(uberClassLoader);\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public static boolean isNonMetaLabel(String label) {\n+        return !(\"adopt-this-plugin\".equals(label) || \"deprecated\".equals(label));\n+    }\n+    \n+    @Restricted(NoExternalUse.class)\n+    public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParameter Integer limit) {\n+        String lowerSearchQuery = query != null ? query.toLowerCase() : null;\n+        List<JSONObject> plugins = new ArrayList<>();\n+        for (UpdateSite site : Jenkins.get().getUpdateCenter().getSiteList()) {\n+            plugins = site.getAvailables().stream()\n+                .filter(plugin -> {\n+                    if (StringUtils.isBlank(query)) {\n+                        return true;\n+                    }\n+                    return plugin.name.toLowerCase().contains(lowerSearchQuery) ||\n+                        plugin.title.toLowerCase().contains(lowerSearchQuery) ||\n+                        plugin.excerpt.toLowerCase().contains(lowerSearchQuery) ||\n+                        Arrays.asList(plugin.categories).contains(query) ||\n+                        Arrays.stream(plugin.categories)\n+                            .map(UpdateCenter::getCategoryDisplayName)\n+                            .anyMatch(category -> category.toLowerCase().contains(query)) ||\n+                        plugin.hasWarnings() && lowerSearchQuery.equals(\"warning:\");\n+                })\n+                .limit(limit)\n+                .map(plugin -> {\n+                    JSONObject jsonObject = new JSONObject();\n+                    jsonObject.put(\"name\", plugin.name);\n+                    jsonObject.put(\"sourceId\", plugin.sourceId);\n+                    jsonObject.put(\"title\", plugin.title);\n+                    jsonObject.put(\"displayName\", plugin.getDisplayName());\n+                    jsonObject.put(\"wiki\", plugin.wiki);\n+                    jsonObject.put(\"categories\", Arrays.stream(plugin.categories)\n+                        .filter(PluginManager::isNonMetaLabel)\n+                        .map(UpdateCenter::getCategoryDisplayName)\n+                        .collect(toList())\n+                    );\n+\n+                    if (hasAdoptThisPluginLabel(plugin)) {\n+                        jsonObject.put(\"adoptMe\", Messages.PluginManager_adoptThisPlugin());\n+                    }\n+                    if (plugin.isDeprecated()) {\n+                        jsonObject.put(\"deprecated\", Messages.PluginManager_deprecationWarning(plugin.getDeprecation().url));\n+                    }\n+                    jsonObject.put(\"excerpt\", plugin.excerpt);\n+                    jsonObject.put(\"version\", plugin.version);\n+                    jsonObject.put(\"popularity\", plugin.popularity);\n+                    if (plugin.isForNewerHudson()) {\n+                        jsonObject.put(\"newerCoreRequired\", Messages.PluginManager_coreWarning(plugin.requiredCore));\n+                    }\n+                    if (plugin.isForNewerJava()) {\n+                        jsonObject.put(\"newerJavaRequired\", Messages.PluginManager_javaWarning(plugin.minimumJavaVersion));\n+                    }\n+                    if (plugin.isNeededDependenciesForNewerJava()) {\n+                        VersionNumber javaVersion = plugin.getNeededDependenciesMinimumJavaVersion();\n+                        if (javaVersion == null) {\n+                            throw new IllegalStateException(\"java version cannot be null here\");\n+                        }\n+                        jsonObject.put(\"dependenciesNewerJava\", Messages.PluginManager_depJavaWarning(javaVersion.toString()));\n+                    }\n+                    if (plugin.hasWarnings()) {\n+                        JSONObject unresolvedSecurityWarnings = new JSONObject();\n+                        unresolvedSecurityWarnings.put(\"text\", Messages.PluginManager_securityWarning());\n+                        Set<UpdateSite.Warning> pluginWarnings = plugin.getWarnings();\n+                        if (pluginWarnings == null) {\n+                            throw new IllegalStateException(\"warnings cannot be null here\");\n+                        }\n+                        List<JSONObject> warnings = pluginWarnings.stream()\n+                            .map(warning -> {\n+                                JSONObject jsonWarning = new JSONObject();\n+                                jsonWarning.put(\"url\", warning.url);\n+                                jsonWarning.put(\"message\", warning.message);\n+                                return jsonWarning;\n+                            }).collect(toList());\n+                        unresolvedSecurityWarnings.put(\"warnings\", warnings);\n+                        jsonObject.put(\"unresolvedSecurityWarnings\", unresolvedSecurityWarnings);\n+                    }\n+                    if (plugin.releaseTimestamp != null) {\n+                        JSONObject releaseTimestamp = new JSONObject();\n+                        releaseTimestamp.put(\"iso8601\", Functions.iso8601DateTime(plugin.releaseTimestamp));\n+                        releaseTimestamp.put(\"displayValue\", Messages.PluginManager_ago(Functions.getTimeSpanString(plugin.releaseTimestamp)));\n+                        jsonObject.put(\"releaseTimestamp\", releaseTimestamp);\n+                    }\n+                    if (hasLatestVersionNewerThanOffered(plugin)) {\n+                        jsonObject.put(\"newerVersionAvailableNotOffered\", Messages.PluginManager_newerVersionExists(plugin.latest));\n+                    }\n+                    return jsonObject;\n+                })\n+                .sorted((o1, o2) -> {\n+                    String o1DisplayName = o1.getString(\"displayName\");\n+                    if (o1.getString(\"name\").toLowerCase().equals(lowerSearchQuery) || o1DisplayName.toLowerCase().equals(lowerSearchQuery)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf635cc57aaabe67c76cf2c2e14f034e556543f0"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "492a24a98c119f6ff4989119618d9e6f43eaea0a", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/492a24a98c119f6ff4989119618d9e6f43eaea0a", "committedDate": "2020-11-20T13:06:06Z", "message": "Set locale"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ad75d1bbaceb3538187656dbee275f938a31654", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/9ad75d1bbaceb3538187656dbee275f938a31654", "committedDate": "2020-11-20T13:43:32Z", "message": "Spotbugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c996c91e86f01614203d34ec3caf5c7ba2e10178", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/c996c91e86f01614203d34ec3caf5c7ba2e10178", "committedDate": "2020-11-20T13:48:48Z", "message": "ignore case in nicer way"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4640102086f7c8524347f0b32432e985467772c", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/a4640102086f7c8524347f0b32432e985467772c", "committedDate": "2020-11-23T21:33:05Z", "message": "Merge branch 'master' into plugin-manager"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NjkxMzk2", "url": "https://github.com/jenkinsci/jenkins/pull/5051#pullrequestreview-538691396", "createdAt": "2020-11-25T16:55:29Z", "commit": {"oid": "a4640102086f7c8524347f0b32432e985467772c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4Njk0MDY3", "url": "https://github.com/jenkinsci/jenkins/pull/5051#pullrequestreview-538694067", "createdAt": "2020-11-25T16:58:47Z", "commit": {"oid": "a4640102086f7c8524347f0b32432e985467772c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjo1ODo0N1rOH58bEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjo1ODo0N1rOH58bEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMDg0OQ==", "bodyText": "does this not need to be reflective also?  if o2 is direct match for the search term then return +1?", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r530520849", "createdAt": "2020-11-25T16:58:47Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -1344,6 +1346,120 @@ public void stop() {\n         LogFactory.release(uberClassLoader);\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public static boolean isNonMetaLabel(String label) {\n+        return !(\"adopt-this-plugin\".equals(label) || \"deprecated\".equals(label));\n+    }\n+    \n+    @Restricted(NoExternalUse.class)\n+    public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParameter Integer limit) {\n+        List<JSONObject> plugins = new ArrayList<>();\n+        for (UpdateSite site : Jenkins.get().getUpdateCenter().getSiteList()) {\n+            plugins = site.getAvailables().stream()\n+                .filter(plugin -> {\n+                    if (StringUtils.isBlank(query)) {\n+                        return true;\n+                    }\n+                    return StringUtils.containsIgnoreCase(plugin.name, query) ||\n+                        StringUtils.containsIgnoreCase(plugin.title, query) ||\n+                        StringUtils.containsIgnoreCase(plugin.excerpt, query) ||\n+                        Arrays.asList(plugin.categories).contains(query) ||\n+                        Arrays.stream(plugin.categories)\n+                            .map(UpdateCenter::getCategoryDisplayName)\n+                            .anyMatch(category -> StringUtils.containsIgnoreCase(category, query)) ||\n+                        plugin.hasWarnings() && query.equalsIgnoreCase(\"warning:\");\n+                })\n+                .limit(limit)\n+                .map(plugin -> {\n+                    JSONObject jsonObject = new JSONObject();\n+                    jsonObject.put(\"name\", plugin.name);\n+                    jsonObject.put(\"sourceId\", plugin.sourceId);\n+                    jsonObject.put(\"title\", plugin.title);\n+                    jsonObject.put(\"displayName\", plugin.getDisplayName());\n+                    jsonObject.put(\"wiki\", plugin.wiki);\n+                    jsonObject.put(\"categories\", Arrays.stream(plugin.categories)\n+                        .filter(PluginManager::isNonMetaLabel)\n+                        .map(UpdateCenter::getCategoryDisplayName)\n+                        .collect(toList())\n+                    );\n+\n+                    if (hasAdoptThisPluginLabel(plugin)) {\n+                        jsonObject.put(\"adoptMe\", Messages.PluginManager_adoptThisPlugin());\n+                    }\n+                    if (plugin.isDeprecated()) {\n+                        jsonObject.put(\"deprecated\", Messages.PluginManager_deprecationWarning(plugin.getDeprecation().url));\n+                    }\n+                    jsonObject.put(\"excerpt\", plugin.excerpt);\n+                    jsonObject.put(\"version\", plugin.version);\n+                    jsonObject.put(\"popularity\", plugin.popularity);\n+                    if (plugin.isForNewerHudson()) {\n+                        jsonObject.put(\"newerCoreRequired\", Messages.PluginManager_coreWarning(plugin.requiredCore));\n+                    }\n+                    if (plugin.isForNewerJava()) {\n+                        jsonObject.put(\"newerJavaRequired\", Messages.PluginManager_javaWarning(plugin.minimumJavaVersion));\n+                    }\n+                    if (plugin.isNeededDependenciesForNewerJava()) {\n+                        VersionNumber javaVersion = plugin.getNeededDependenciesMinimumJavaVersion();\n+                        if (javaVersion == null) {\n+                            throw new IllegalStateException(\"java version cannot be null here\");\n+                        }\n+                        jsonObject.put(\"dependenciesNewerJava\", Messages.PluginManager_depJavaWarning(javaVersion.toString()));\n+                    }\n+                    if (plugin.hasWarnings()) {\n+                        JSONObject unresolvedSecurityWarnings = new JSONObject();\n+                        unresolvedSecurityWarnings.put(\"text\", Messages.PluginManager_securityWarning());\n+                        Set<UpdateSite.Warning> pluginWarnings = plugin.getWarnings();\n+                        if (pluginWarnings == null) {\n+                            throw new IllegalStateException(\"warnings cannot be null here\");\n+                        }\n+                        List<JSONObject> warnings = pluginWarnings.stream()\n+                            .map(warning -> {\n+                                JSONObject jsonWarning = new JSONObject();\n+                                jsonWarning.put(\"url\", warning.url);\n+                                jsonWarning.put(\"message\", warning.message);\n+                                return jsonWarning;\n+                            }).collect(toList());\n+                        unresolvedSecurityWarnings.put(\"warnings\", warnings);\n+                        jsonObject.put(\"unresolvedSecurityWarnings\", unresolvedSecurityWarnings);\n+                    }\n+                    if (plugin.releaseTimestamp != null) {\n+                        JSONObject releaseTimestamp = new JSONObject();\n+                        releaseTimestamp.put(\"iso8601\", Functions.iso8601DateTime(plugin.releaseTimestamp));\n+                        releaseTimestamp.put(\"displayValue\", Messages.PluginManager_ago(Functions.getTimeSpanString(plugin.releaseTimestamp)));\n+                        jsonObject.put(\"releaseTimestamp\", releaseTimestamp);\n+                    }\n+                    if (hasLatestVersionNewerThanOffered(plugin)) {\n+                        jsonObject.put(\"newerVersionAvailableNotOffered\", Messages.PluginManager_newerVersionExists(plugin.latest));\n+                    }\n+                    return jsonObject;\n+                })\n+                .sorted((o1, o2) -> {\n+                    String o1DisplayName = o1.getString(\"displayName\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4640102086f7c8524347f0b32432e985467772c"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NzAwNTE1", "url": "https://github.com/jenkinsci/jenkins/pull/5051#pullrequestreview-538700515", "createdAt": "2020-11-25T17:06:46Z", "commit": {"oid": "a4640102086f7c8524347f0b32432e985467772c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowNjo0NlrOH58ubQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowNjo0NlrOH58ubQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTgwNQ==", "bodyText": "missing permission check?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<JSONObject> plugins = new ArrayList<>();\n          \n          \n            \n                    Jenkins.get().checkPermission(Jenkins.SYSTEM_READ);\n          \n          \n            \n                    List<JSONObject> plugins = new ArrayList<>();", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r530525805", "createdAt": "2020-11-25T17:06:46Z", "author": {"login": "jtnord"}, "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -1344,6 +1346,120 @@ public void stop() {\n         LogFactory.release(uberClassLoader);\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public static boolean isNonMetaLabel(String label) {\n+        return !(\"adopt-this-plugin\".equals(label) || \"deprecated\".equals(label));\n+    }\n+    \n+    @Restricted(NoExternalUse.class)\n+    public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParameter Integer limit) {\n+        List<JSONObject> plugins = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4640102086f7c8524347f0b32432e985467772c"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fab36afa58c43c18f462dbab6312dee4a0dff5a9", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/fab36afa58c43c18f462dbab6312dee4a0dff5a9", "committedDate": "2020-12-03T07:59:06Z", "message": "Merge branch 'master' into plugin-manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1a76dbd2df823aa8c4ab442b4b3121014c7dba2", "author": {"user": {"login": "timja", "name": "Tim Jacomb"}}, "url": "https://github.com/jenkinsci/jenkins/commit/d1a76dbd2df823aa8c4ab442b4b3121014c7dba2", "committedDate": "2020-12-03T08:18:29Z", "message": "Sorting improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MjQ5MjEz", "url": "https://github.com/jenkinsci/jenkins/pull/5051#pullrequestreview-544249213", "createdAt": "2020-12-03T18:19:02Z", "commit": {"oid": "d1a76dbd2df823aa8c4ab442b4b3121014c7dba2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NjYxNTY3", "url": "https://github.com/jenkinsci/jenkins/pull/5051#pullrequestreview-545661567", "createdAt": "2020-12-06T01:11:36Z", "commit": {"oid": "d1a76dbd2df823aa8c4ab442b4b3121014c7dba2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1814, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}