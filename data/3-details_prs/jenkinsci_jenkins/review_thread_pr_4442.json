{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MDE2MjI1", "number": 4442, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDoxOToxMlrODZcIlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjozMToxNFrODdUI6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDAxOTQxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/model/RSS.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDoxOToxMlrOFf01HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzo1NDozNFrOFgTDQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxNTc0MA==", "bodyText": "Fix the broken \"All all ...\" title\n\nNot sure it's a bug as the default view is called \"All\", as the code adds \"all builds\" as it's the option chosen for RSS (compared to \"failed builds\"). I would say it's an improvement, if desired.\n\"if desired\" => we are not correcting the behavior here, just hiding the symptom. For example, in french, the default view is called \"Tous\" (= All in english), and the RSS will have as title and description: \"Tous all builds\". Perhaps a \"better\" way to change this is to just put a \":\", like All: all builds.\nSecond thoughts: after having seen the rssHeader.jelly, I am convinced we need to change the behavior, but not in the way proposed.", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r368915740", "createdAt": "2020-01-21T10:19:12Z", "author": {"login": "Wadeck"}, "path": "core/src/main/java/hudson/model/RSS.java", "diffHunk": "@@ -75,7 +56,14 @@ public static void doTrackback( Object it, StaplerRequest req, StaplerResponse r\n      */\n     public static <E> void forwardToRss(String title, String url, Collection<? extends E> entries, FeedAdapter<E> adapter, StaplerRequest req, HttpServletResponse rsp) throws IOException, ServletException {\n         req.setAttribute(\"adapter\",adapter);\n-        req.setAttribute(\"title\",title);\n+        String fixedTitle = title;\n+        String brokenFragment = \"All all \";\n+        if (title.startsWith(brokenFragment)) {\n+            StringBuilder fixing = new StringBuilder(\"All \");\n+            fixing.append(title.substring(brokenFragment.length()));\n+            fixedTitle = fixing.toString();\n+        }\n+        req.setAttribute(\"title\",fixedTitle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff813649621cd536b48965d8fe112e91fde65ba"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NTMwNA==", "bodyText": "What's your proposal here Wadeck? \"All all builds\" is pretty bad.", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r369255304", "createdAt": "2020-01-21T21:35:25Z", "author": {"login": "jeffret-b"}, "path": "core/src/main/java/hudson/model/RSS.java", "diffHunk": "@@ -75,7 +56,14 @@ public static void doTrackback( Object it, StaplerRequest req, StaplerResponse r\n      */\n     public static <E> void forwardToRss(String title, String url, Collection<? extends E> entries, FeedAdapter<E> adapter, StaplerRequest req, HttpServletResponse rsp) throws IOException, ServletException {\n         req.setAttribute(\"adapter\",adapter);\n-        req.setAttribute(\"title\",title);\n+        String fixedTitle = title;\n+        String brokenFragment = \"All all \";\n+        if (title.startsWith(brokenFragment)) {\n+            StringBuilder fixing = new StringBuilder(\"All \");\n+            fixing.append(title.substring(brokenFragment.length()));\n+            fixedTitle = fixing.toString();\n+        }\n+        req.setAttribute(\"title\",fixedTitle);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxNTc0MA=="}, "originalCommit": {"oid": "3ff813649621cd536b48965d8fe112e91fde65ba"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1ODI5NA==", "bodyText": "Here's what it looks like in Thunderbird:\n\nIt doesn't make much sense to separate this fix out, though changing the title is better and it probably needs a ticket filed.", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r369258294", "createdAt": "2020-01-21T21:42:16Z", "author": {"login": "jeffret-b"}, "path": "core/src/main/java/hudson/model/RSS.java", "diffHunk": "@@ -75,7 +56,14 @@ public static void doTrackback( Object it, StaplerRequest req, StaplerResponse r\n      */\n     public static <E> void forwardToRss(String title, String url, Collection<? extends E> entries, FeedAdapter<E> adapter, StaplerRequest req, HttpServletResponse rsp) throws IOException, ServletException {\n         req.setAttribute(\"adapter\",adapter);\n-        req.setAttribute(\"title\",title);\n+        String fixedTitle = title;\n+        String brokenFragment = \"All all \";\n+        if (title.startsWith(brokenFragment)) {\n+            StringBuilder fixing = new StringBuilder(\"All \");\n+            fixing.append(title.substring(brokenFragment.length()));\n+            fixedTitle = fixing.toString();\n+        }\n+        req.setAttribute(\"title\",fixedTitle);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxNTc0MA=="}, "originalCommit": {"oid": "3ff813649621cd536b48965d8fe112e91fde65ba"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQxMDg4MQ==", "bodyText": "As the RSS titles are potentially more debatable, I am in favor of separating the addition of test and the change on the title / description.\nThe proposal would be to just apply the same naming as in the header => Jenkins:all (all builds)", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r369410881", "createdAt": "2020-01-22T07:54:34Z", "author": {"login": "Wadeck"}, "path": "core/src/main/java/hudson/model/RSS.java", "diffHunk": "@@ -75,7 +56,14 @@ public static void doTrackback( Object it, StaplerRequest req, StaplerResponse r\n      */\n     public static <E> void forwardToRss(String title, String url, Collection<? extends E> entries, FeedAdapter<E> adapter, StaplerRequest req, HttpServletResponse rsp) throws IOException, ServletException {\n         req.setAttribute(\"adapter\",adapter);\n-        req.setAttribute(\"title\",title);\n+        String fixedTitle = title;\n+        String brokenFragment = \"All all \";\n+        if (title.startsWith(brokenFragment)) {\n+            StringBuilder fixing = new StringBuilder(\"All \");\n+            fixing.append(title.substring(brokenFragment.length()));\n+            fixedTitle = fixing.toString();\n+        }\n+        req.setAttribute(\"title\",fixedTitle);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxNTc0MA=="}, "originalCommit": {"oid": "3ff813649621cd536b48965d8fe112e91fde65ba"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDE1NjE0OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/hudson/model/RSSTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMTowMjo1NFrOFf2IdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjozNDowOFrOFgLEag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzNzA3Ng==", "bodyText": "\u274c Does not cover the regression corrected by #4148. The \"published\" was empty and so, is still not null.", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r368937076", "createdAt": "2020-01-21T11:02:54Z", "author": {"login": "Wadeck"}, "path": "test/src/test/java/hudson/model/RSSTest.java", "diffHunk": "@@ -63,16 +64,89 @@ public void absoluteURLsPresentInRSS_evenWithoutRootUrlSetup() throws Exception\n         assertAllRSSLinksContainRootUrl(allLinks);\n     }\n \n-    private XmlPage getRssAllPage() throws Exception {\n-        return (XmlPage) j.createWebClient().goTo(\"rssAll?flavor=rss20\", \"text/xml\");\n+    @Test\n+    public void checkInitialContentAllRss() throws Exception {\n+        XmlPage page = getRssAllPage();\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"rss\"));\n+        assertThat(documentElement.getAttribute(\"version\"), is(\"2.0\"));\n+        assertThat(documentElement.getChildNodes().getLength(), is(1));\n+        Node channelNode = documentElement.getFirstChild();\n+        assertThat(channelNode.getNodeName(), is(\"channel\"));\n+        checkRssBasicNodes(channelNode, \"All builds\", 3);\n     }\n \n-    private void assertAllRSSLinksContainRootUrl(NodeList allLinks) throws Exception {\n-        for (int i = 0; i < allLinks.getLength(); i++) {\n-            Node item = allLinks.item(i);\n-            String url = item.getTextContent();\n-            assertThat(url, containsString(j.getURL().toString()));\n-        }\n+    @Test\n+    public void checkInitialContentFailedRss() throws Exception {\n+        XmlPage page = (XmlPage) j.createWebClient().goTo(\"rssFailed?flavor=rss20\", \"text/xml\");\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"rss\"));\n+        assertThat(documentElement.getAttribute(\"version\"), is(\"2.0\"));\n+        assertThat(documentElement.getChildNodes().getLength(), is(1));\n+        Node channelNode = documentElement.getFirstChild();\n+        assertThat(channelNode.getNodeName(), is(\"channel\"));\n+        checkRssBasicNodes(channelNode, \"All failed builds\", 3);\n+    }\n+\n+    @Test\n+    public void checkInitialContentAllAtom() throws Exception {\n+        XmlPage page = getRssAllAtomPage();\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"feed\"));\n+        checkAtomBasicNodes(documentElement, \"All builds\", 5);\n+    }\n+\n+    @Test\n+    public void checkWithSingleBuildAllRss() throws Exception {\n+        FreeStyleProject p = j.createFreeStyleProject();\n+        j.assertBuildStatusSuccess(p.scheduleBuild2(0));\n+\n+        XmlPage page = getRssAllPage();\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"rss\"));\n+        assertThat(documentElement.getAttribute(\"version\"), is(\"2.0\"));\n+        assertThat(documentElement.getChildNodes().getLength(), is(1));\n+        Node channelNode = documentElement.getFirstChild();\n+        assertThat(channelNode.getNodeName(), is(\"channel\"));\n+        checkRssBasicNodes(channelNode, \"All builds\", 4);\n+        NodeList items = xmlDocument.getElementsByTagName(\"item\");\n+        assertThat(items.getLength(), is(1));\n+        Node firstBuild = items.item(0);\n+        assertThat(firstBuild.getChildNodes().getLength(), is(5));\n+        assertThat(getSingleNode(firstBuild, \"title\").getTextContent(), is(\"test0 #1 (stable)\"));\n+        assertNotNull(getSingleNode(firstBuild, \"pubDate\").getTextContent());\n+        assertNotNull(getSingleNode(firstBuild, \"author\").getTextContent());\n+        Node guidNode = getSingleNode(firstBuild, \"guid\");\n+        assertThat(guidNode.getAttributes().getNamedItem(\"isPermaLink\").getTextContent(), is(\"false\"));\n+        assertNotNull(guidNode.getTextContent());\n+    }\n+\n+    @Test\n+    public void checkWithSingleBuildAllAtom() throws Exception {\n+        FreeStyleProject p = j.createFreeStyleProject();\n+        j.assertBuildStatusSuccess(p.scheduleBuild2(0));\n+\n+        XmlPage page = getRssAllAtomPage();\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"feed\"));\n+        checkAtomBasicNodes(documentElement, \"All builds\", 6);\n+        NodeList entries = xmlDocument.getElementsByTagName(\"entry\");\n+        assertThat(entries.getLength(), is(1));\n+        Node firstBuild = entries.item(0);\n+        assertThat(firstBuild.getChildNodes().getLength(), is(5));\n+        assertThat(getSingleNode(firstBuild, \"title\").getTextContent(), is(\"test0 #1 (stable)\"));\n+        assertNotNull(getSingleNode(firstBuild, \"published\").getTextContent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff813649621cd536b48965d8fe112e91fde65ba"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4MDEwNg==", "bodyText": "Added checks to validate the dates. There are advantages and disadvantages to canned data. It can mask or complicate other things. There isn't any real need for canned data here.", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r369280106", "createdAt": "2020-01-21T22:34:08Z", "author": {"login": "jeffret-b"}, "path": "test/src/test/java/hudson/model/RSSTest.java", "diffHunk": "@@ -63,16 +64,89 @@ public void absoluteURLsPresentInRSS_evenWithoutRootUrlSetup() throws Exception\n         assertAllRSSLinksContainRootUrl(allLinks);\n     }\n \n-    private XmlPage getRssAllPage() throws Exception {\n-        return (XmlPage) j.createWebClient().goTo(\"rssAll?flavor=rss20\", \"text/xml\");\n+    @Test\n+    public void checkInitialContentAllRss() throws Exception {\n+        XmlPage page = getRssAllPage();\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"rss\"));\n+        assertThat(documentElement.getAttribute(\"version\"), is(\"2.0\"));\n+        assertThat(documentElement.getChildNodes().getLength(), is(1));\n+        Node channelNode = documentElement.getFirstChild();\n+        assertThat(channelNode.getNodeName(), is(\"channel\"));\n+        checkRssBasicNodes(channelNode, \"All builds\", 3);\n     }\n \n-    private void assertAllRSSLinksContainRootUrl(NodeList allLinks) throws Exception {\n-        for (int i = 0; i < allLinks.getLength(); i++) {\n-            Node item = allLinks.item(i);\n-            String url = item.getTextContent();\n-            assertThat(url, containsString(j.getURL().toString()));\n-        }\n+    @Test\n+    public void checkInitialContentFailedRss() throws Exception {\n+        XmlPage page = (XmlPage) j.createWebClient().goTo(\"rssFailed?flavor=rss20\", \"text/xml\");\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"rss\"));\n+        assertThat(documentElement.getAttribute(\"version\"), is(\"2.0\"));\n+        assertThat(documentElement.getChildNodes().getLength(), is(1));\n+        Node channelNode = documentElement.getFirstChild();\n+        assertThat(channelNode.getNodeName(), is(\"channel\"));\n+        checkRssBasicNodes(channelNode, \"All failed builds\", 3);\n+    }\n+\n+    @Test\n+    public void checkInitialContentAllAtom() throws Exception {\n+        XmlPage page = getRssAllAtomPage();\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"feed\"));\n+        checkAtomBasicNodes(documentElement, \"All builds\", 5);\n+    }\n+\n+    @Test\n+    public void checkWithSingleBuildAllRss() throws Exception {\n+        FreeStyleProject p = j.createFreeStyleProject();\n+        j.assertBuildStatusSuccess(p.scheduleBuild2(0));\n+\n+        XmlPage page = getRssAllPage();\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"rss\"));\n+        assertThat(documentElement.getAttribute(\"version\"), is(\"2.0\"));\n+        assertThat(documentElement.getChildNodes().getLength(), is(1));\n+        Node channelNode = documentElement.getFirstChild();\n+        assertThat(channelNode.getNodeName(), is(\"channel\"));\n+        checkRssBasicNodes(channelNode, \"All builds\", 4);\n+        NodeList items = xmlDocument.getElementsByTagName(\"item\");\n+        assertThat(items.getLength(), is(1));\n+        Node firstBuild = items.item(0);\n+        assertThat(firstBuild.getChildNodes().getLength(), is(5));\n+        assertThat(getSingleNode(firstBuild, \"title\").getTextContent(), is(\"test0 #1 (stable)\"));\n+        assertNotNull(getSingleNode(firstBuild, \"pubDate\").getTextContent());\n+        assertNotNull(getSingleNode(firstBuild, \"author\").getTextContent());\n+        Node guidNode = getSingleNode(firstBuild, \"guid\");\n+        assertThat(guidNode.getAttributes().getNamedItem(\"isPermaLink\").getTextContent(), is(\"false\"));\n+        assertNotNull(guidNode.getTextContent());\n+    }\n+\n+    @Test\n+    public void checkWithSingleBuildAllAtom() throws Exception {\n+        FreeStyleProject p = j.createFreeStyleProject();\n+        j.assertBuildStatusSuccess(p.scheduleBuild2(0));\n+\n+        XmlPage page = getRssAllAtomPage();\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"feed\"));\n+        checkAtomBasicNodes(documentElement, \"All builds\", 6);\n+        NodeList entries = xmlDocument.getElementsByTagName(\"entry\");\n+        assertThat(entries.getLength(), is(1));\n+        Node firstBuild = entries.item(0);\n+        assertThat(firstBuild.getChildNodes().getLength(), is(5));\n+        assertThat(getSingleNode(firstBuild, \"title\").getTextContent(), is(\"test0 #1 (stable)\"));\n+        assertNotNull(getSingleNode(firstBuild, \"published\").getTextContent());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzNzA3Ng=="}, "originalCommit": {"oid": "3ff813649621cd536b48965d8fe112e91fde65ba"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzIzMDY2OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/hudson/model/RSSTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODoyNDoxNlrOFgTrig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzo1MDozN1rOFglUVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyMTE5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Date date = formatter.parse(\"Sat, 24 Apr 2010 14:01:00 GMT\");\n          \n          \n            \n                    Date date = formatter.parse(pubDate);\n          \n      \n    \n    \n  \n\nOtherwise the test does not test what you want.\nAdditionnally, the parse will throw an exception if the date is not parseable, so the assertNotNull does not provide any value except confusion.", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r369421194", "createdAt": "2020-01-22T08:24:16Z", "author": {"login": "Wadeck"}, "path": "test/src/test/java/hudson/model/RSSTest.java", "diffHunk": "@@ -135,6 +201,86 @@ public void latestBuilds() throws Exception {\n         assertEquals(6, allLinks.getLength());\n     }\n \n+    private void checkRssBasicNodes(Node channelNode, String expectedTitle, int expectedNodes) throws IOException {\n+        assertThat(channelNode.getChildNodes().getLength(), is(expectedNodes));\n+        assertThat(getSingleNode(channelNode, \"link\").getTextContent(), is(j.getURL().toString()));\n+        assertThat(getSingleNode(channelNode, \"description\").getTextContent(), is(expectedTitle));\n+        assertThat(getSingleNode(channelNode, \"title\").getTextContent(), is(expectedTitle));\n+    }\n+\n+    private void checkAtomBasicNodes(Node feedNode, String expectedTitle, int expectedNodes) throws IOException {\n+        assertThat(feedNode.getChildNodes().getLength(), is(expectedNodes));\n+        Node linkNode = getSingleNode(feedNode, \"link\");\n+        assertThat(linkNode.getAttributes().getNamedItem(\"rel\").getTextContent(), is(\"alternate\"));\n+        assertThat(linkNode.getAttributes().getNamedItem(\"type\").getTextContent(), is(\"text/html\"));\n+        assertThat(linkNode.getAttributes().getNamedItem(\"href\").getTextContent(), is(j.getURL().toString()));\n+        assertNotNull(getSingleNode(feedNode, \"updated\"));\n+        assertThat(getSingleNode(feedNode, \"title\").getTextContent(), is(expectedTitle));\n+        Node authorNode = getSingleNode(feedNode, \"author\");\n+        NodeList authorNodes = authorNode.getChildNodes();\n+        assertThat(authorNodes.getLength(), is(1));\n+        Node nameNode = authorNodes.item(0);\n+        assertThat(nameNode.getTextContent(), is(\"Jenkins Server\"));\n+        Node idNode = getSingleNode(feedNode, \"id\");\n+        assertFalse(idNode.getTextContent().isEmpty());\n+    }\n+\n+    private Node getSingleNode(Node parentNode, String nodeName) {\n+        Node childNode = null;\n+        NodeList childNodes = parentNode.getChildNodes();\n+        for (int i = 0; i < childNodes.getLength(); i++) {\n+            if (childNodes.item(i).getNodeName().equals(nodeName)) {\n+                if (childNode == null) {\n+                    childNode = childNodes.item(i);\n+                } else {\n+                    fail(\"Too many children.\");\n+                }\n+            }\n+        }\n+        return childNode;\n+    }\n+\n+    private void checkRssTimeNode(Node firstBuild, String nodeName) throws ParseException {\n+        String pubDate = getSingleNode(firstBuild, nodeName).getTextContent();\n+        assertNotNull(pubDate);\n+        DateFormat formatter = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\");\n+        Date date = formatter.parse(\"Sat, 24 Apr 2010 14:01:00 GMT\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0244339945447207df3007ff313a8452b010f4e0"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxMDE2Nw==", "bodyText": "I tried with and without. It felt kind of weird and more confusing to have it there without any assertion.", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r369710167", "createdAt": "2020-01-22T17:50:37Z", "author": {"login": "jeffret-b"}, "path": "test/src/test/java/hudson/model/RSSTest.java", "diffHunk": "@@ -135,6 +201,86 @@ public void latestBuilds() throws Exception {\n         assertEquals(6, allLinks.getLength());\n     }\n \n+    private void checkRssBasicNodes(Node channelNode, String expectedTitle, int expectedNodes) throws IOException {\n+        assertThat(channelNode.getChildNodes().getLength(), is(expectedNodes));\n+        assertThat(getSingleNode(channelNode, \"link\").getTextContent(), is(j.getURL().toString()));\n+        assertThat(getSingleNode(channelNode, \"description\").getTextContent(), is(expectedTitle));\n+        assertThat(getSingleNode(channelNode, \"title\").getTextContent(), is(expectedTitle));\n+    }\n+\n+    private void checkAtomBasicNodes(Node feedNode, String expectedTitle, int expectedNodes) throws IOException {\n+        assertThat(feedNode.getChildNodes().getLength(), is(expectedNodes));\n+        Node linkNode = getSingleNode(feedNode, \"link\");\n+        assertThat(linkNode.getAttributes().getNamedItem(\"rel\").getTextContent(), is(\"alternate\"));\n+        assertThat(linkNode.getAttributes().getNamedItem(\"type\").getTextContent(), is(\"text/html\"));\n+        assertThat(linkNode.getAttributes().getNamedItem(\"href\").getTextContent(), is(j.getURL().toString()));\n+        assertNotNull(getSingleNode(feedNode, \"updated\"));\n+        assertThat(getSingleNode(feedNode, \"title\").getTextContent(), is(expectedTitle));\n+        Node authorNode = getSingleNode(feedNode, \"author\");\n+        NodeList authorNodes = authorNode.getChildNodes();\n+        assertThat(authorNodes.getLength(), is(1));\n+        Node nameNode = authorNodes.item(0);\n+        assertThat(nameNode.getTextContent(), is(\"Jenkins Server\"));\n+        Node idNode = getSingleNode(feedNode, \"id\");\n+        assertFalse(idNode.getTextContent().isEmpty());\n+    }\n+\n+    private Node getSingleNode(Node parentNode, String nodeName) {\n+        Node childNode = null;\n+        NodeList childNodes = parentNode.getChildNodes();\n+        for (int i = 0; i < childNodes.getLength(); i++) {\n+            if (childNodes.item(i).getNodeName().equals(nodeName)) {\n+                if (childNode == null) {\n+                    childNode = childNodes.item(i);\n+                } else {\n+                    fail(\"Too many children.\");\n+                }\n+            }\n+        }\n+        return childNode;\n+    }\n+\n+    private void checkRssTimeNode(Node firstBuild, String nodeName) throws ParseException {\n+        String pubDate = getSingleNode(firstBuild, nodeName).getTextContent();\n+        assertNotNull(pubDate);\n+        DateFormat formatter = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\");\n+        Date date = formatter.parse(\"Sat, 24 Apr 2010 14:01:00 GMT\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyMTE5NA=="}, "originalCommit": {"oid": "0244339945447207df3007ff313a8452b010f4e0"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzI1OTY1OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/hudson/model/RSSTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODozNTo1MlrOFgT9kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODozNTo1MlrOFgT9kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyNTgwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertNotNull(pubDate);\n          \n          \n            \n                    assertThat(pubDate, not(emptyString()));\n          \n      \n    \n    \n  \n\ngetTextContent never returns null. If the node does not exist, it's an NPE before the method being called.\nThat also prevent the next suggestion to not throw an exception if the string is empty.", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r369425808", "createdAt": "2020-01-22T08:35:52Z", "author": {"login": "Wadeck"}, "path": "test/src/test/java/hudson/model/RSSTest.java", "diffHunk": "@@ -135,6 +201,86 @@ public void latestBuilds() throws Exception {\n         assertEquals(6, allLinks.getLength());\n     }\n \n+    private void checkRssBasicNodes(Node channelNode, String expectedTitle, int expectedNodes) throws IOException {\n+        assertThat(channelNode.getChildNodes().getLength(), is(expectedNodes));\n+        assertThat(getSingleNode(channelNode, \"link\").getTextContent(), is(j.getURL().toString()));\n+        assertThat(getSingleNode(channelNode, \"description\").getTextContent(), is(expectedTitle));\n+        assertThat(getSingleNode(channelNode, \"title\").getTextContent(), is(expectedTitle));\n+    }\n+\n+    private void checkAtomBasicNodes(Node feedNode, String expectedTitle, int expectedNodes) throws IOException {\n+        assertThat(feedNode.getChildNodes().getLength(), is(expectedNodes));\n+        Node linkNode = getSingleNode(feedNode, \"link\");\n+        assertThat(linkNode.getAttributes().getNamedItem(\"rel\").getTextContent(), is(\"alternate\"));\n+        assertThat(linkNode.getAttributes().getNamedItem(\"type\").getTextContent(), is(\"text/html\"));\n+        assertThat(linkNode.getAttributes().getNamedItem(\"href\").getTextContent(), is(j.getURL().toString()));\n+        assertNotNull(getSingleNode(feedNode, \"updated\"));\n+        assertThat(getSingleNode(feedNode, \"title\").getTextContent(), is(expectedTitle));\n+        Node authorNode = getSingleNode(feedNode, \"author\");\n+        NodeList authorNodes = authorNode.getChildNodes();\n+        assertThat(authorNodes.getLength(), is(1));\n+        Node nameNode = authorNodes.item(0);\n+        assertThat(nameNode.getTextContent(), is(\"Jenkins Server\"));\n+        Node idNode = getSingleNode(feedNode, \"id\");\n+        assertFalse(idNode.getTextContent().isEmpty());\n+    }\n+\n+    private Node getSingleNode(Node parentNode, String nodeName) {\n+        Node childNode = null;\n+        NodeList childNodes = parentNode.getChildNodes();\n+        for (int i = 0; i < childNodes.getLength(); i++) {\n+            if (childNodes.item(i).getNodeName().equals(nodeName)) {\n+                if (childNode == null) {\n+                    childNode = childNodes.item(i);\n+                } else {\n+                    fail(\"Too many children.\");\n+                }\n+            }\n+        }\n+        return childNode;\n+    }\n+\n+    private void checkRssTimeNode(Node firstBuild, String nodeName) throws ParseException {\n+        String pubDate = getSingleNode(firstBuild, nodeName).getTextContent();\n+        assertNotNull(pubDate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0244339945447207df3007ff313a8452b010f4e0"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDY1MjU2OnYy", "diffSide": "LEFT", "path": "core/src/main/java/hudson/model/RSS.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjozMToxNFrOFl2F-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjozMToxNFrOFl2F-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyNzg5OA==", "bodyText": "I was unable to find any usages, but it would be great to have some binary compatibility analysis when such changes are submitted. Also not sure why it needs to be renamed", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r375227898", "createdAt": "2020-02-05T12:31:14Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/RSS.java", "diffHunk": "@@ -42,25 +41,6 @@\n  */\n public final class RSS {\n \n-    /**\n-     * Parses trackback ping.\n-     */\n-    public static void doTrackback( Object it, StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12aaaee183a7c20c6e5632f7e8967e5dea4c3990"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 705, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}