{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2OTIzNTYy", "number": 4922, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjo0OTo0NFrOEfvR6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDowOTowOFrOEiIyPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzE1OTQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/slaves/Cloud.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjo0OTo0NFrOHMNjIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjo0OTo0NFrOHMNjIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU2Njk0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @since XXX\n          \n          \n            \n                 * @since TODO", "url": "https://github.com/jenkinsci/jenkins/pull/4922#discussion_r482566945", "createdAt": "2020-09-02T22:49:44Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/slaves/Cloud.java", "diffHunk": "@@ -194,4 +256,42 @@ public ACL getACL() {\n     public static final Permission PROVISION = new Permission(\n             Computer.PERMISSIONS, \"Provision\", Messages._Cloud_ProvisionPermission_Description(), Jenkins.ADMINISTER, PERMISSION_SCOPE\n     );\n+\n+    /**\n+     * Parameter object for {@link hudson.slaves.Cloud}.\n+     * @since XXX", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b97ba5ed8d379f3ce48a7c1088b688b5c47a6f43"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTExNzExOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/slaves/Cloud.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDoyMTozMFrOHMgI2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjowOTo0MFrOHMjnkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3MTUxMw==", "bodyText": "Curious as to why this has to be synchronized", "url": "https://github.com/jenkinsci/jenkins/pull/4922#discussion_r482871513", "createdAt": "2020-09-03T10:21:30Z", "author": {"login": "res0nance"}, "path": "core/src/main/java/hudson/slaves/Cloud.java", "diffHunk": "@@ -194,4 +256,42 @@ public ACL getACL() {\n     public static final Permission PROVISION = new Permission(\n             Computer.PERMISSIONS, \"Provision\", Messages._Cloud_ProvisionPermission_Description(), Jenkins.ADMINISTER, PERMISSION_SCOPE\n     );\n+\n+    /**\n+     * Parameter object for {@link hudson.slaves.Cloud}.\n+     * @since XXX\n+     */\n+    public static final class CloudState {\n+        /**\n+         * The label under consideration.\n+         */\n+        @CheckForNull\n+        private final Label label;\n+        /**\n+         * The additional planned capacity for this {@link #label} and provisioned by previous strategies during the\n+         * current updating of the {@link NodeProvisioner}.\n+         */\n+        private final int additionalPlannedCapacity;\n+\n+        public CloudState(@CheckForNull Label label, int additionalPlannedCapacity) {\n+            this.label = label;\n+            this.additionalPlannedCapacity = additionalPlannedCapacity;\n+        }\n+\n+        /**\n+         * The label under consideration.\n+         */\n+        @CheckForNull\n+        public Label getLabel() {\n+            return label;\n+        }\n+\n+        /**\n+         * The additional planned capacity for this {@link #getLabel()} and provisioned by previous strategies during\n+         * the current updating of the {@link NodeProvisioner}.\n+         */\n+        public synchronized int getAdditionalPlannedCapacity() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b97ba5ed8d379f3ce48a7c1088b688b5c47a6f43"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyODUyOA==", "bodyText": "It doesn't need to be, this comes from copy-paste from StrategyState. In CloudState it's just readonly so I'll remove it.", "url": "https://github.com/jenkinsci/jenkins/pull/4922#discussion_r482928528", "createdAt": "2020-09-03T12:09:40Z", "author": {"login": "Vlatombe"}, "path": "core/src/main/java/hudson/slaves/Cloud.java", "diffHunk": "@@ -194,4 +256,42 @@ public ACL getACL() {\n     public static final Permission PROVISION = new Permission(\n             Computer.PERMISSIONS, \"Provision\", Messages._Cloud_ProvisionPermission_Description(), Jenkins.ADMINISTER, PERMISSION_SCOPE\n     );\n+\n+    /**\n+     * Parameter object for {@link hudson.slaves.Cloud}.\n+     * @since XXX\n+     */\n+    public static final class CloudState {\n+        /**\n+         * The label under consideration.\n+         */\n+        @CheckForNull\n+        private final Label label;\n+        /**\n+         * The additional planned capacity for this {@link #label} and provisioned by previous strategies during the\n+         * current updating of the {@link NodeProvisioner}.\n+         */\n+        private final int additionalPlannedCapacity;\n+\n+        public CloudState(@CheckForNull Label label, int additionalPlannedCapacity) {\n+            this.label = label;\n+            this.additionalPlannedCapacity = additionalPlannedCapacity;\n+        }\n+\n+        /**\n+         * The label under consideration.\n+         */\n+        @CheckForNull\n+        public Label getLabel() {\n+            return label;\n+        }\n+\n+        /**\n+         * The additional planned capacity for this {@link #getLabel()} and provisioned by previous strategies during\n+         * the current updating of the {@link NodeProvisioner}.\n+         */\n+        public synchronized int getAdditionalPlannedCapacity() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3MTUxMw=="}, "originalCommit": {"oid": "b97ba5ed8d379f3ce48a7c1088b688b5c47a6f43"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTQ4ODA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/slaves/Cloud.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjoxMDowMFrOHMjoMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjoxMDowMFrOHMjoMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyODY4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public synchronized int getAdditionalPlannedCapacity() {\n          \n          \n            \n                    public int getAdditionalPlannedCapacity() {", "url": "https://github.com/jenkinsci/jenkins/pull/4922#discussion_r482928689", "createdAt": "2020-09-03T12:10:00Z", "author": {"login": "Vlatombe"}, "path": "core/src/main/java/hudson/slaves/Cloud.java", "diffHunk": "@@ -194,4 +256,42 @@ public ACL getACL() {\n     public static final Permission PROVISION = new Permission(\n             Computer.PERMISSIONS, \"Provision\", Messages._Cloud_ProvisionPermission_Description(), Jenkins.ADMINISTER, PERMISSION_SCOPE\n     );\n+\n+    /**\n+     * Parameter object for {@link hudson.slaves.Cloud}.\n+     * @since TODO\n+     */\n+    public static final class CloudState {\n+        /**\n+         * The label under consideration.\n+         */\n+        @CheckForNull\n+        private final Label label;\n+        /**\n+         * The additional planned capacity for this {@link #label} and provisioned by previous strategies during the\n+         * current updating of the {@link NodeProvisioner}.\n+         */\n+        private final int additionalPlannedCapacity;\n+\n+        public CloudState(@CheckForNull Label label, int additionalPlannedCapacity) {\n+            this.label = label;\n+            this.additionalPlannedCapacity = additionalPlannedCapacity;\n+        }\n+\n+        /**\n+         * The label under consideration.\n+         */\n+        @CheckForNull\n+        public Label getLabel() {\n+            return label;\n+        }\n+\n+        /**\n+         * The additional planned capacity for this {@link #getLabel()} and provisioned by previous strategies during\n+         * the current updating of the {@link NodeProvisioner}.\n+         */\n+        public synchronized int getAdditionalPlannedCapacity() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bae9205d35464937a4ded42bd66dcc07796637a"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTU0MjExOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/slaves/Cloud.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjoyNDo1MVrOHMkJDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjozNjoxM1rOHMkilQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkzNzEwMg==", "bodyText": "Found a problem with this aproach if there are several levels of subclassing. I wonder if there is already a utility covering this case in the Jenkins codebase...", "url": "https://github.com/jenkinsci/jenkins/pull/4922#discussion_r482937102", "createdAt": "2020-09-03T12:24:51Z", "author": {"login": "Vlatombe"}, "path": "core/src/main/java/hudson/slaves/Cloud.java", "diffHunk": "@@ -156,13 +158,73 @@ public ACL getACL() {\n      *      just needs to return {@link PlannedNode}s that each contain an object that implements {@link Future}.\n      *      When the {@link Future} has completed its work, {@link Future#get} will be called to obtain the\n      *      provisioned {@link Node} object.\n+     * @deprecated Use {@link #provision(CloudState, int)} instead.\n      */\n-    public abstract Collection<PlannedNode> provision(Label label, int excessWorkload);\n+    @Deprecated\n+    public Collection<PlannedNode> provision(Label label, int excessWorkload){\n+        try {\n+            // Check if the new method is implemented\n+            getClass().getDeclaredMethod(\"provision\", CloudState.class, int.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc608fe7e4fa427fcafee8420eacdf23b20c0f8c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0MzYzNw==", "bodyText": "Util.isOverridden", "url": "https://github.com/jenkinsci/jenkins/pull/4922#discussion_r482943637", "createdAt": "2020-09-03T12:36:13Z", "author": {"login": "Vlatombe"}, "path": "core/src/main/java/hudson/slaves/Cloud.java", "diffHunk": "@@ -156,13 +158,73 @@ public ACL getACL() {\n      *      just needs to return {@link PlannedNode}s that each contain an object that implements {@link Future}.\n      *      When the {@link Future} has completed its work, {@link Future#get} will be called to obtain the\n      *      provisioned {@link Node} object.\n+     * @deprecated Use {@link #provision(CloudState, int)} instead.\n      */\n-    public abstract Collection<PlannedNode> provision(Label label, int excessWorkload);\n+    @Deprecated\n+    public Collection<PlannedNode> provision(Label label, int excessWorkload){\n+        try {\n+            // Check if the new method is implemented\n+            getClass().getDeclaredMethod(\"provision\", CloudState.class, int.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkzNzEwMg=="}, "originalCommit": {"oid": "bc608fe7e4fa427fcafee8420eacdf23b20c0f8c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjMwOTc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/hudson/slaves/Cloud.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDowOTowOFrOHP16qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDo0MzowOVrOHP3jDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3NDA1Nw==", "bodyText": "You can create a private method to avoid duplicating this method, kinda callIfOverriden passing the code to call. WDYT?", "url": "https://github.com/jenkinsci/jenkins/pull/4922#discussion_r486374057", "createdAt": "2020-09-10T14:09:08Z", "author": {"login": "MRamonLeon"}, "path": "core/src/main/java/hudson/slaves/Cloud.java", "diffHunk": "@@ -156,13 +158,71 @@ public ACL getACL() {\n      *      just needs to return {@link PlannedNode}s that each contain an object that implements {@link Future}.\n      *      When the {@link Future} has completed its work, {@link Future#get} will be called to obtain the\n      *      provisioned {@link Node} object.\n+     * @deprecated Use {@link #provision(CloudState, int)} instead.\n      */\n-    public abstract Collection<PlannedNode> provision(Label label, int excessWorkload);\n+    @Deprecated\n+    public Collection<PlannedNode> provision(Label label, int excessWorkload) {\n+        String methodName = \"provision\";\n+        if (Util.isOverridden(Cloud.class, getClass(), methodName, CloudState.class, int.class)) {\n+            return provision(new CloudState(label, 0), excessWorkload);\n+        } else {\n+            throw new AbstractMethodError(\"you must override at least one of the \"\n+                    + Cloud.class.getSimpleName() + \".\" + methodName + \" methods\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "640ca7d87333edc3ebecc4f3636aa57e09636d5d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQwMDc4Mw==", "bodyText": "Good idea.", "url": "https://github.com/jenkinsci/jenkins/pull/4922#discussion_r486400783", "createdAt": "2020-09-10T14:43:09Z", "author": {"login": "Vlatombe"}, "path": "core/src/main/java/hudson/slaves/Cloud.java", "diffHunk": "@@ -156,13 +158,71 @@ public ACL getACL() {\n      *      just needs to return {@link PlannedNode}s that each contain an object that implements {@link Future}.\n      *      When the {@link Future} has completed its work, {@link Future#get} will be called to obtain the\n      *      provisioned {@link Node} object.\n+     * @deprecated Use {@link #provision(CloudState, int)} instead.\n      */\n-    public abstract Collection<PlannedNode> provision(Label label, int excessWorkload);\n+    @Deprecated\n+    public Collection<PlannedNode> provision(Label label, int excessWorkload) {\n+        String methodName = \"provision\";\n+        if (Util.isOverridden(Cloud.class, getClass(), methodName, CloudState.class, int.class)) {\n+            return provision(new CloudState(label, 0), excessWorkload);\n+        } else {\n+            throw new AbstractMethodError(\"you must override at least one of the \"\n+                    + Cloud.class.getSimpleName() + \".\" + methodName + \" methods\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3NDA1Nw=="}, "originalCommit": {"oid": "640ca7d87333edc3ebecc4f3636aa57e09636d5d"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 165, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}