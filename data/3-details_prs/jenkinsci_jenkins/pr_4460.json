{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4ODA5ODQz", "number": 4460, "title": "[JENKINS-33596, JENKINS-60913] Remove network discovery services ", "bodyText": "See JENKINS-60913 for an explanation of the motivation. As discussed in Jenkins Security Advisory 2020-01-29 these services are vulnerable to SECURITY-1641 / CVE-2020-2100. The security release disables these protocols but they should be completely removed to finish the clean up.\nI can post in the User and Dev lists to see if anyone objects to this removal.\nProposed changelog entries\n\nRemove network discovery services (UDP and DNS).\n\nProposed upgrade guidelines\nNetwork discovery features, DNS multicast and UDP broadcast, were previously disabled and discouraged because of various problems including Jenkins Security Advisory 2020-01-29. They have now been removed. There is no replacement.\nSwarm Plugin needs to be updated to version 3.18 or above, otherwise the error described in JENKINS-61029 occurs. This also removes the network discovery capability of the plugin.\nSubmitter checklist\n\n JIRA issue is well described\n Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). Examples\n\nFill-in the Proposed changelog entries section only if there are breaking changes or other changes which may require extra steps from users during the upgrade\n\n\n Appropriate autotests or explanation to why this change has no tests\nNo tests needed for removed capability.\n[n/a] For dependency updates: links to external changelogs and, if possible, full diffs\n\nMaintainer checklist\nBefore the changes are marked as ready-for-merge:\n\n There are at least 2 approvals for the pull request and no outstanding requests for change\n Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n Changelog entries in the PR title and/or Proposed changelog entries are correct\n Proper changelog labels are set so that the changelog can be generated automatically\n If the change needs additional upgrade steps from users, upgrade-guide-needed label is set and there is a Proposed upgrade guidelines section in the PR title. (example)\n If it would make sense to backport the change to LTS, a JIRA issue should exist and be labeled as lts-candidate", "createdAt": "2020-01-29T23:02:05Z", "url": "https://github.com/jenkinsci/jenkins/pull/4460", "merged": true, "mergeCommit": {"oid": "f10d9f95fc6346858c1204e65b737743f8924597"}, "closed": true, "closedAt": "2020-02-07T08:53:55Z", "author": {"login": "jeffret-b"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_L8D7gH2gAyMzY4ODA5ODQzOjlhZmM2M2ZiMGMyNmVlM2EwZGE3YzM0NGYwNmY5YjAxMzY5YmFhZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBsmWVgH2gAyMzY4ODA5ODQzOjRiNDcxYTFkZTE1ZjBlNzhjZWQyN2ViNWZiMjVlZDg5MWU0N2VhMDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9afc63fb0c26ee3a0da7c344f06f9b01369baaef", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/9afc63fb0c26ee3a0da7c344f06f9b01369baaef", "committedDate": "2020-01-29T20:26:43Z", "message": "Remove multicast discovery services."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61d9c675de24d97d19b01e7a9963a0d8a51ca7d8", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/61d9c675de24d97d19b01e7a9963a0d8a51ca7d8", "committedDate": "2020-01-29T22:12:41Z", "message": "Refine clean up with DNSMultiCast.\n\nDoesn't need to be referenced in the other pom any more.\nWe need to keep the class and the property around for a while.\nJenkins Test Harness sets the property. Until we can get all\nversions aligned so it isn't needed, it's best to keep the property\ndoing nothing."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNTEzNDQ5", "url": "https://github.com/jenkinsci/jenkins/pull/4460#pullrequestreview-350513449", "createdAt": "2020-01-30T00:17:57Z", "commit": {"oid": "61d9c675de24d97d19b01e7a9963a0d8a51ca7d8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNjg5MTQ4", "url": "https://github.com/jenkinsci/jenkins/pull/4460#pullrequestreview-350689148", "createdAt": "2020-01-30T09:41:40Z", "commit": {"oid": "61d9c675de24d97d19b01e7a9963a0d8a51ca7d8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwODk1MTc0", "url": "https://github.com/jenkinsci/jenkins/pull/4460#pullrequestreview-350895174", "createdAt": "2020-01-30T15:08:07Z", "commit": {"oid": "61d9c675de24d97d19b01e7a9963a0d8a51ca7d8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTowODowOFrOFjuYQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTowODowOFrOFjuYQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAwNDM1Mg==", "bodyText": "Might be worth marking this field (or the class in general) as deprecated?", "url": "https://github.com/jenkinsci/jenkins/pull/4460#discussion_r373004352", "createdAt": "2020-01-30T15:08:08Z", "author": {"login": "jvz"}, "path": "core/src/main/java/hudson/DNSMultiCast.java", "diffHunk": "@@ -1,205 +1,20 @@\n package hudson;\n \n import jenkins.util.SystemProperties;\n-import jenkins.model.Jenkins;\n-import jenkins.model.Jenkins.MasterComputer;\n \n-import javax.jmdns.ServiceInfo;\n-import javax.jmdns.impl.JmDNSImpl;\n import java.io.Closeable;\n import java.io.IOException;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.net.InetAddress;\n-import java.net.URL;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.ExecutorService;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n \n /**\n  * Registers a DNS multi-cast service-discovery support.\n  *\n  * @author Kohsuke Kawaguchi\n+ *\n  */\n public class DNSMultiCast implements Closeable {\n-    private JenkinsJmDNS jmdns;\n-\n-    public DNSMultiCast(final Jenkins jenkins) {\n-        if (disabled)   return; // escape hatch\n-        \n-        // the registerService call can be slow. run these asynchronously\n-        MasterComputer.threadPoolForRemoting.submit(new Callable<Object>() {\n-            public Object call() {\n-                try {\n-                    jmdns = new JenkinsJmDNS(null, null);\n-\n-                    Map<String,String> props = new HashMap<>();\n-                    String rootURL = jenkins.getRootUrl();\n-                    if (rootURL==null)  return null;\n-\n-                    props.put(\"url\", rootURL);\n-                    try {\n-                        props.put(\"version\",String.valueOf(Jenkins.getVersion()));\n-                    } catch (IllegalArgumentException e) {\n-                        // failed to parse the version number\n-                    }\n-\n-                    TcpSlaveAgentListener tal = jenkins.getTcpSlaveAgentListener();\n-                    if (tal!=null)\n-                        props.put(\"slave-port\",String.valueOf(tal.getPort()));\n-\n-                    props.put(\"server-id\", jenkins.getLegacyInstanceId());\n-\n-                    URL jenkins_url = new URL(rootURL);\n-                    int jenkins_port = jenkins_url.getPort();\n-                    if (jenkins_port == -1) {\n-                        jenkins_port = 80;\n-                    }\n-                    if (jenkins_url.getPath().length() > 0) {\n-                        props.put(\"path\", jenkins_url.getPath());\n-                    }\n-\n-                    jmdns.registerService(ServiceInfo.create(\"_hudson._tcp.local.\",\"jenkins\",\n-                            jenkins_port,0,0,props));\t// for backward compatibility\n-                    jmdns.registerService(ServiceInfo.create(\"_jenkins._tcp.local.\",\"jenkins\",\n-                            jenkins_port,0,0,props));\n-\n-                    // Make Jenkins appear in Safari's Bonjour bookmarks\n-                    jmdns.registerService(ServiceInfo.create(\"_http._tcp.local.\",\"Jenkins\",\n-                            jenkins_port,0,0,props));\n-                } catch (IOException e) {\n-                    LOGGER.log(Level.INFO, \"Cannot advertise service to DNS multi-cast, skipping: {0}\", e);\n-                    LOGGER.log(Level.FINE, null, e);\n-                }\n-                return null;\n-            }\n-        });\n-    }\n-\n-    public void close() {\n-        if (jmdns!=null) {\n-            try {\n-                jmdns.abort();\n-                jmdns = null;\n-            } catch (final IOException e) {\n-                LOGGER.log(Level.WARNING,\"Failed to close down JmDNS instance!\",e);\n-            }\n-        }\n-    }\n-\n-    private static final Logger LOGGER = Logger.getLogger(DNSMultiCast.class.getName());\n-\n-    /**\n-     * Class that extends {@link JmDNSImpl} to add an abort method. Since {@link javax.jmdns.JmDNS#close()} might\n-     * make the instance hang during the shutdown, the abort method terminate uncleanly, but rapidly and\n-     * without blocking.\n-     *\n-     * Initially it was part of the jenkinsci/jmdns forked library, but now this class is responsible for aborting,\n-     * allowing to have a direct and clean dependency to the original library.\n-     *\n-     * The abort() method is pretty similar to close() method. To access private methods and fields uses\n-     * reflection.\n-     *\n-     * @since 2.178\n-     *\n-     * See JENKINS-25369 for further details\n-     */\n-    private static class JenkinsJmDNS extends JmDNSImpl {\n-        private static Logger logger = Logger.getLogger(JmDNSImpl.class.getName());\n-        private final Class parent;\n-\n-        /**\n-         * Create an instance of JmDNS and bind it to a specific network interface given its IP-address.\n-         *\n-         * @param address IP address to bind to.\n-         * @param name    name of the newly created JmDNS\n-         * @throws IOException\n-         */\n-        public JenkinsJmDNS(InetAddress address, String name) throws IOException {\n-            super(address, name);\n-            this.parent = this.getClass().getSuperclass();\n-        }\n-\n-        /**\n-         * Works like {@link #close()} but terminate uncleanly, but rapidly and without blocking.\n-         */\n-        public void abort() throws IOException {\n-            if (this.isClosing()) {\n-                return;\n-            }\n-\n-           if (logger.isLoggable(Level.FINER)) {\n-                logger.finer(\"Aborting JmDNS: \" + this);\n-            }\n-            // Stop JmDNS\n-            // This protects against recursive calls\n-            if (this.closeState()) {\n-                // We got the tie break now clean up\n-\n-                // Stop the timer\n-                logger.finer(\"Canceling the timer\");\n-                this.cancelTimer();\n-\n-                // Cancel all services\n-                // KK: this is a blocking call that doesn't fit 'abort'\n-                // this.unregisterAllServices();\n-                executePrivateParentMethod(\"disposeServiceCollectors\");\n-\n-// KK: another blocking call\n-//                if (logger.isLoggable(Level.FINER)) {\n-//                    logger.finer(\"Wait for JmDNS cancel: \" + this);\n-//                }\n-//                this.waitForCanceled(DNSConstants.CLOSE_TIMEOUT);\n-\n-                // Stop the canceler timer\n-                logger.finer(\"Canceling the state timer\");\n-                this.cancelStateTimer();\n-\n-                // Stop the executor\n-                shutdown();\n-\n-                // close socket\n-                executePrivateParentMethod(\"closeMulticastSocket\");\n-\n-                // remove the shutdown hook\n-                if (_shutdown != null) {\n-                    Runtime.getRuntime().removeShutdownHook(_shutdown);\n-                }\n-\n-                if (logger.isLoggable(Level.FINER)) {\n-                    logger.finer(\"JmDNS closed.\");\n-                }\n-            }\n-            advanceState(null);\n-        }\n-\n-        private void shutdown() throws IOException {\n-            try {\n-                Field executor = this.parent.getDeclaredField(\"_executor\");\n-                executor.setAccessible(true);\n-                ExecutorService _executor = (ExecutorService) executor.get(this);\n-                _executor.shutdown();\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                logger.log(Level.SEVERE, \"Error trying to abort JmDNS\", e);\n-                throw new IOException(e);\n-            }\n-        }\n-\n-        private void executePrivateParentMethod(String method) throws IOException {\n-            try {\n-                Method m = this.parent.getDeclaredMethod(method);\n-                m.setAccessible(true);\n-                m.invoke(this);\n-            } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n-                logger.log(Level.SEVERE, \"Error trying to abort JmDNS\", e);\n-                throw new IOException(e);\n-            }\n-        }\n+    public static boolean disabled = SystemProperties.getBoolean(DNSMultiCast.class.getName()+\".disabled\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61d9c675de24d97d19b01e7a9963a0d8a51ca7d8"}, "originalPosition": 203}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43096a915208f63c688c718cf309ae26183f1d9c", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/43096a915208f63c688c718cf309ae26183f1d9c", "committedDate": "2020-01-30T16:05:22Z", "message": "Deprecate remaining class fragment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "684fbbd359225bfc3e5712b77fb231a2bb553c92", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/684fbbd359225bfc3e5712b77fb231a2bb553c92", "committedDate": "2020-01-30T16:22:26Z", "message": "Remove unneeded dependency."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMDEyNjY2", "url": "https://github.com/jenkinsci/jenkins/pull/4460#pullrequestreview-351012666", "createdAt": "2020-01-30T17:37:11Z", "commit": {"oid": "684fbbd359225bfc3e5712b77fb231a2bb553c92"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMDcyNTM4", "url": "https://github.com/jenkinsci/jenkins/pull/4460#pullrequestreview-351072538", "createdAt": "2020-01-30T19:11:23Z", "commit": {"oid": "684fbbd359225bfc3e5712b77fb231a2bb553c92"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTY2NTQ3", "url": "https://github.com/jenkinsci/jenkins/pull/4460#pullrequestreview-351166547", "createdAt": "2020-01-30T21:50:26Z", "commit": {"oid": "684fbbd359225bfc3e5712b77fb231a2bb553c92"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo1MDoyNlrOFj7Eyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo1MjowN1rOFj7Hog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMjM2Mg==", "bodyText": "You are deleting the original constructor so is there some reason you are even keeping this class around?", "url": "https://github.com/jenkinsci/jenkins/pull/4460#discussion_r373212362", "createdAt": "2020-01-30T21:50:26Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/DNSMultiCast.java", "diffHunk": "@@ -1,205 +1,21 @@\n package hudson;\n \n import jenkins.util.SystemProperties;\n-import jenkins.model.Jenkins;\n-import jenkins.model.Jenkins.MasterComputer;\n \n-import javax.jmdns.ServiceInfo;\n-import javax.jmdns.impl.JmDNSImpl;\n import java.io.Closeable;\n import java.io.IOException;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.net.InetAddress;\n-import java.net.URL;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.ExecutorService;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n \n /**\n  * Registers a DNS multi-cast service-discovery support.\n  *\n  * @author Kohsuke Kawaguchi\n+ * @deprecated\n  */\n+@Deprecated\n public class DNSMultiCast implements Closeable {\n-    private JenkinsJmDNS jmdns;\n-\n-    public DNSMultiCast(final Jenkins jenkins) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684fbbd359225bfc3e5712b77fb231a2bb553c92"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMzA5MA==", "bodyText": "Still in use apparently:\nhttps://github.com/jenkinsci/swarm-plugin/blob/fbf7b55a665a1439f8bb9471336300381c097948/plugin/src/main/java/hudson/plugins/swarm/UDPFragmentImpl.java#L14\nIf swarm needs it, then this sounds like an argument for detaching to a plugin\u2026or moving to the swarm plugin.\n@basil?", "url": "https://github.com/jenkinsci/jenkins/pull/4460#discussion_r373213090", "createdAt": "2020-01-30T21:52:07Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/UDPBroadcastFragment.java", "diffHunk": "@@ -1,58 +0,0 @@\n-/*\n- * The MIT License\n- *\n- * Copyright (c) 2004-2009, Sun Microsystems, Inc., Kohsuke Kawaguchi\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package hudson;\n-\n-\n-import java.net.SocketAddress;\n-\n-/**\n- * Extension point that contributes an XML fragment to the UDP broadcast.\n- *\n- * <p>\n- * Put {@link Extension} on your implementation class to have it auto-discovered.\n- * \n- * @author Kohsuke Kawaguchi\n- * @since 1.304\n- * @see UDPBroadcastThread\n- */\n-public abstract class UDPBroadcastFragment implements ExtensionPoint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684fbbd359225bfc3e5712b77fb231a2bb553c92"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTg3NjEx", "url": "https://github.com/jenkinsci/jenkins/pull/4460#pullrequestreview-351187611", "createdAt": "2020-01-30T22:30:00Z", "commit": {"oid": "684fbbd359225bfc3e5712b77fb231a2bb553c92"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjozMDowMVrOFj8FYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjozMDozOFrOFj8GSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyODg5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @deprecated\n          \n          \n            \n             * @deprecated No longer does anything.", "url": "https://github.com/jenkinsci/jenkins/pull/4460#discussion_r373228896", "createdAt": "2020-01-30T22:30:01Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/DNSMultiCast.java", "diffHunk": "@@ -1,205 +1,21 @@\n package hudson;\n \n import jenkins.util.SystemProperties;\n-import jenkins.model.Jenkins;\n-import jenkins.model.Jenkins.MasterComputer;\n \n-import javax.jmdns.ServiceInfo;\n-import javax.jmdns.impl.JmDNSImpl;\n import java.io.Closeable;\n import java.io.IOException;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.net.InetAddress;\n-import java.net.URL;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.ExecutorService;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n \n /**\n  * Registers a DNS multi-cast service-discovery support.\n  *\n  * @author Kohsuke Kawaguchi\n+ * @deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684fbbd359225bfc3e5712b77fb231a2bb553c92"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyOTEzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static boolean disabled = SystemProperties.getBoolean(DNSMultiCast.class.getName()+\".disabled\", true);\n          \n          \n            \n                /** retained for compatibility with {@code jenkins-test-harness} and {@code jenkinsfile-runner} */\n          \n          \n            \n                public static boolean disabled = SystemProperties.getBoolean(DNSMultiCast.class.getName()+\".disabled\", true);", "url": "https://github.com/jenkinsci/jenkins/pull/4460#discussion_r373229131", "createdAt": "2020-01-30T22:30:38Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/DNSMultiCast.java", "diffHunk": "@@ -1,205 +1,21 @@\n package hudson;\n \n import jenkins.util.SystemProperties;\n-import jenkins.model.Jenkins;\n-import jenkins.model.Jenkins.MasterComputer;\n \n-import javax.jmdns.ServiceInfo;\n-import javax.jmdns.impl.JmDNSImpl;\n import java.io.Closeable;\n import java.io.IOException;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.net.InetAddress;\n-import java.net.URL;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.ExecutorService;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n \n /**\n  * Registers a DNS multi-cast service-discovery support.\n  *\n  * @author Kohsuke Kawaguchi\n+ * @deprecated\n  */\n+@Deprecated\n public class DNSMultiCast implements Closeable {\n-    private JenkinsJmDNS jmdns;\n-\n-    public DNSMultiCast(final Jenkins jenkins) {\n-        if (disabled)   return; // escape hatch\n-        \n-        // the registerService call can be slow. run these asynchronously\n-        MasterComputer.threadPoolForRemoting.submit(new Callable<Object>() {\n-            public Object call() {\n-                try {\n-                    jmdns = new JenkinsJmDNS(null, null);\n-\n-                    Map<String,String> props = new HashMap<>();\n-                    String rootURL = jenkins.getRootUrl();\n-                    if (rootURL==null)  return null;\n-\n-                    props.put(\"url\", rootURL);\n-                    try {\n-                        props.put(\"version\",String.valueOf(Jenkins.getVersion()));\n-                    } catch (IllegalArgumentException e) {\n-                        // failed to parse the version number\n-                    }\n-\n-                    TcpSlaveAgentListener tal = jenkins.getTcpSlaveAgentListener();\n-                    if (tal!=null)\n-                        props.put(\"slave-port\",String.valueOf(tal.getPort()));\n-\n-                    props.put(\"server-id\", jenkins.getLegacyInstanceId());\n-\n-                    URL jenkins_url = new URL(rootURL);\n-                    int jenkins_port = jenkins_url.getPort();\n-                    if (jenkins_port == -1) {\n-                        jenkins_port = 80;\n-                    }\n-                    if (jenkins_url.getPath().length() > 0) {\n-                        props.put(\"path\", jenkins_url.getPath());\n-                    }\n-\n-                    jmdns.registerService(ServiceInfo.create(\"_hudson._tcp.local.\",\"jenkins\",\n-                            jenkins_port,0,0,props));\t// for backward compatibility\n-                    jmdns.registerService(ServiceInfo.create(\"_jenkins._tcp.local.\",\"jenkins\",\n-                            jenkins_port,0,0,props));\n-\n-                    // Make Jenkins appear in Safari's Bonjour bookmarks\n-                    jmdns.registerService(ServiceInfo.create(\"_http._tcp.local.\",\"Jenkins\",\n-                            jenkins_port,0,0,props));\n-                } catch (IOException e) {\n-                    LOGGER.log(Level.INFO, \"Cannot advertise service to DNS multi-cast, skipping: {0}\", e);\n-                    LOGGER.log(Level.FINE, null, e);\n-                }\n-                return null;\n-            }\n-        });\n-    }\n-\n-    public void close() {\n-        if (jmdns!=null) {\n-            try {\n-                jmdns.abort();\n-                jmdns = null;\n-            } catch (final IOException e) {\n-                LOGGER.log(Level.WARNING,\"Failed to close down JmDNS instance!\",e);\n-            }\n-        }\n-    }\n-\n-    private static final Logger LOGGER = Logger.getLogger(DNSMultiCast.class.getName());\n-\n-    /**\n-     * Class that extends {@link JmDNSImpl} to add an abort method. Since {@link javax.jmdns.JmDNS#close()} might\n-     * make the instance hang during the shutdown, the abort method terminate uncleanly, but rapidly and\n-     * without blocking.\n-     *\n-     * Initially it was part of the jenkinsci/jmdns forked library, but now this class is responsible for aborting,\n-     * allowing to have a direct and clean dependency to the original library.\n-     *\n-     * The abort() method is pretty similar to close() method. To access private methods and fields uses\n-     * reflection.\n-     *\n-     * @since 2.178\n-     *\n-     * See JENKINS-25369 for further details\n-     */\n-    private static class JenkinsJmDNS extends JmDNSImpl {\n-        private static Logger logger = Logger.getLogger(JmDNSImpl.class.getName());\n-        private final Class parent;\n-\n-        /**\n-         * Create an instance of JmDNS and bind it to a specific network interface given its IP-address.\n-         *\n-         * @param address IP address to bind to.\n-         * @param name    name of the newly created JmDNS\n-         * @throws IOException\n-         */\n-        public JenkinsJmDNS(InetAddress address, String name) throws IOException {\n-            super(address, name);\n-            this.parent = this.getClass().getSuperclass();\n-        }\n-\n-        /**\n-         * Works like {@link #close()} but terminate uncleanly, but rapidly and without blocking.\n-         */\n-        public void abort() throws IOException {\n-            if (this.isClosing()) {\n-                return;\n-            }\n-\n-           if (logger.isLoggable(Level.FINER)) {\n-                logger.finer(\"Aborting JmDNS: \" + this);\n-            }\n-            // Stop JmDNS\n-            // This protects against recursive calls\n-            if (this.closeState()) {\n-                // We got the tie break now clean up\n-\n-                // Stop the timer\n-                logger.finer(\"Canceling the timer\");\n-                this.cancelTimer();\n-\n-                // Cancel all services\n-                // KK: this is a blocking call that doesn't fit 'abort'\n-                // this.unregisterAllServices();\n-                executePrivateParentMethod(\"disposeServiceCollectors\");\n-\n-// KK: another blocking call\n-//                if (logger.isLoggable(Level.FINER)) {\n-//                    logger.finer(\"Wait for JmDNS cancel: \" + this);\n-//                }\n-//                this.waitForCanceled(DNSConstants.CLOSE_TIMEOUT);\n-\n-                // Stop the canceler timer\n-                logger.finer(\"Canceling the state timer\");\n-                this.cancelStateTimer();\n-\n-                // Stop the executor\n-                shutdown();\n-\n-                // close socket\n-                executePrivateParentMethod(\"closeMulticastSocket\");\n-\n-                // remove the shutdown hook\n-                if (_shutdown != null) {\n-                    Runtime.getRuntime().removeShutdownHook(_shutdown);\n-                }\n-\n-                if (logger.isLoggable(Level.FINER)) {\n-                    logger.finer(\"JmDNS closed.\");\n-                }\n-            }\n-            advanceState(null);\n-        }\n-\n-        private void shutdown() throws IOException {\n-            try {\n-                Field executor = this.parent.getDeclaredField(\"_executor\");\n-                executor.setAccessible(true);\n-                ExecutorService _executor = (ExecutorService) executor.get(this);\n-                _executor.shutdown();\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                logger.log(Level.SEVERE, \"Error trying to abort JmDNS\", e);\n-                throw new IOException(e);\n-            }\n-        }\n-\n-        private void executePrivateParentMethod(String method) throws IOException {\n-            try {\n-                Method m = this.parent.getDeclaredMethod(method);\n-                m.setAccessible(true);\n-                m.invoke(this);\n-            } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n-                logger.log(Level.SEVERE, \"Error trying to abort JmDNS\", e);\n-                throw new IOException(e);\n-            }\n-        }\n+    public static boolean disabled = SystemProperties.getBoolean(DNSMultiCast.class.getName()+\".disabled\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684fbbd359225bfc3e5712b77fb231a2bb553c92"}, "originalPosition": 204}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7afc8a982668fa39866ddb4fcefb841cbd3455d", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/c7afc8a982668fa39866ddb4fcefb841cbd3455d", "committedDate": "2020-01-30T22:33:56Z", "message": "Improve code comments for external usages.\n\nCo-Authored-By: Jesse Glick <jglick@cloudbees.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODcwMzc5", "url": "https://github.com/jenkinsci/jenkins/pull/4460#pullrequestreview-351870379", "createdAt": "2020-02-01T07:12:35Z", "commit": {"oid": "c7afc8a982668fa39866ddb4fcefb841cbd3455d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNzoxMjozNVrOFkcuRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNzoxMjozNVrOFkcuRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2MzY1Mw==", "bodyText": "Add Restricted(DoNotUse) to fail builds?", "url": "https://github.com/jenkinsci/jenkins/pull/4460#discussion_r373763653", "createdAt": "2020-02-01T07:12:35Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/DNSMultiCast.java", "diffHunk": "@@ -1,205 +1,22 @@\n package hudson;\n \n import jenkins.util.SystemProperties;\n-import jenkins.model.Jenkins;\n-import jenkins.model.Jenkins.MasterComputer;\n \n-import javax.jmdns.ServiceInfo;\n-import javax.jmdns.impl.JmDNSImpl;\n import java.io.Closeable;\n import java.io.IOException;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.net.InetAddress;\n-import java.net.URL;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.ExecutorService;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n \n /**\n  * Registers a DNS multi-cast service-discovery support.\n  *\n  * @author Kohsuke Kawaguchi\n+ * @deprecated No longer does anything.\n  */\n+@Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7afc8a982668fa39866ddb4fcefb841cbd3455d"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTQ5NTAx", "url": "https://github.com/jenkinsci/jenkins/pull/4460#pullrequestreview-351949501", "createdAt": "2020-02-02T15:39:28Z", "commit": {"oid": "c7afc8a982668fa39866ddb4fcefb841cbd3455d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTUzNTA3", "url": "https://github.com/jenkinsci/jenkins/pull/4460#pullrequestreview-352953507", "createdAt": "2020-02-04T12:57:43Z", "commit": {"oid": "c7afc8a982668fa39866ddb4fcefb841cbd3455d"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4274291bf7de4b9951691467239ae3f0b534b580", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/4274291bf7de4b9951691467239ae3f0b534b580", "committedDate": "2020-02-05T17:48:08Z", "message": "Remove multicast discovery services."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "746d004f66202f1623df1e667a40092fa824d090", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/746d004f66202f1623df1e667a40092fa824d090", "committedDate": "2020-02-05T17:48:08Z", "message": "Refine clean up with DNSMultiCast.\n\nDoesn't need to be referenced in the other pom any more.\nWe need to keep the class and the property around for a while.\nJenkins Test Harness sets the property. Until we can get all\nversions aligned so it isn't needed, it's best to keep the property\ndoing nothing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d18c7b55cdba8e1d7fdd54190d3d7813156c6a7a", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/d18c7b55cdba8e1d7fdd54190d3d7813156c6a7a", "committedDate": "2020-02-05T17:48:08Z", "message": "Deprecate remaining class fragment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5afcead9537e3cf9bfc1ffdf2ae4974e23df9b12", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/5afcead9537e3cf9bfc1ffdf2ae4974e23df9b12", "committedDate": "2020-02-05T17:48:08Z", "message": "Remove unneeded dependency."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fec924c913644eccfdf85765771f1f82fbfa751", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/8fec924c913644eccfdf85765771f1f82fbfa751", "committedDate": "2020-02-05T18:13:49Z", "message": "Add log warning messages."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21bc110760afd10461a63aadbd949771bfe487a9", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/21bc110760afd10461a63aadbd949771bfe487a9", "committedDate": "2020-02-05T18:18:16Z", "message": "Don't need to implement the interface anymore."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8394ae15886b3fc67abedc1055ada8c45d816c76", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/8394ae15886b3fc67abedc1055ada8c45d816c76", "committedDate": "2020-02-05T18:24:17Z", "message": "Merge remote-tracking branch 'origin/removeMulticast' into removeMulticast"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MDQ2NDQ1", "url": "https://github.com/jenkinsci/jenkins/pull/4460#pullrequestreview-354046445", "createdAt": "2020-02-05T21:17:47Z", "commit": {"oid": "8394ae15886b3fc67abedc1055ada8c45d816c76"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMToxNzo0OFrOFmHeMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMToxNzo1N1rOFmHefw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMjYyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Logger logger = Logger.getLogger(DNSMultiCast.class.getName());\n          \n          \n            \n                private static final Logger LOGGER = Logger.getLogger(DNSMultiCast.class.getName());", "url": "https://github.com/jenkinsci/jenkins/pull/4460#discussion_r375512624", "createdAt": "2020-02-05T21:17:48Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/DNSMultiCast.java", "diffHunk": "@@ -1,205 +1,32 @@\n package hudson;\n \n+import hudson.init.Initializer;\n import jenkins.util.SystemProperties;\n-import jenkins.model.Jenkins;\n-import jenkins.model.Jenkins.MasterComputer;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n \n-import javax.jmdns.ServiceInfo;\n-import javax.jmdns.impl.JmDNSImpl;\n-import java.io.Closeable;\n-import java.io.IOException;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.net.InetAddress;\n-import java.net.URL;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.ExecutorService;\n-import java.util.logging.Level;\n import java.util.logging.Logger;\n \n+import static hudson.init.InitMilestone.COMPLETED;\n+\n /**\n  * Registers a DNS multi-cast service-discovery support.\n  *\n  * @author Kohsuke Kawaguchi\n+ * @deprecated No longer does anything.\n  */\n-public class DNSMultiCast implements Closeable {\n-    private JenkinsJmDNS jmdns;\n-\n-    public DNSMultiCast(final Jenkins jenkins) {\n-        if (disabled)   return; // escape hatch\n-        \n-        // the registerService call can be slow. run these asynchronously\n-        MasterComputer.threadPoolForRemoting.submit(new Callable<Object>() {\n-            public Object call() {\n-                try {\n-                    jmdns = new JenkinsJmDNS(null, null);\n-\n-                    Map<String,String> props = new HashMap<>();\n-                    String rootURL = jenkins.getRootUrl();\n-                    if (rootURL==null)  return null;\n-\n-                    props.put(\"url\", rootURL);\n-                    try {\n-                        props.put(\"version\",String.valueOf(Jenkins.getVersion()));\n-                    } catch (IllegalArgumentException e) {\n-                        // failed to parse the version number\n-                    }\n-\n-                    TcpSlaveAgentListener tal = jenkins.getTcpSlaveAgentListener();\n-                    if (tal!=null)\n-                        props.put(\"slave-port\",String.valueOf(tal.getPort()));\n-\n-                    props.put(\"server-id\", jenkins.getLegacyInstanceId());\n-\n-                    URL jenkins_url = new URL(rootURL);\n-                    int jenkins_port = jenkins_url.getPort();\n-                    if (jenkins_port == -1) {\n-                        jenkins_port = 80;\n-                    }\n-                    if (jenkins_url.getPath().length() > 0) {\n-                        props.put(\"path\", jenkins_url.getPath());\n-                    }\n-\n-                    jmdns.registerService(ServiceInfo.create(\"_hudson._tcp.local.\",\"jenkins\",\n-                            jenkins_port,0,0,props));\t// for backward compatibility\n-                    jmdns.registerService(ServiceInfo.create(\"_jenkins._tcp.local.\",\"jenkins\",\n-                            jenkins_port,0,0,props));\n+@Deprecated\n+@Restricted(NoExternalUse.class)\n+public class DNSMultiCast {\n+    private static final Logger logger = Logger.getLogger(DNSMultiCast.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8394ae15886b3fc67abedc1055ada8c45d816c76"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMjcwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.warning(\"DNS multicast capability has been removed from Jenkins.\");\n          \n          \n            \n                        LOGGER.warning(\"DNS multicast capability has been removed from Jenkins.\");", "url": "https://github.com/jenkinsci/jenkins/pull/4460#discussion_r375512703", "createdAt": "2020-02-05T21:17:57Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/DNSMultiCast.java", "diffHunk": "@@ -1,205 +1,32 @@\n package hudson;\n \n+import hudson.init.Initializer;\n import jenkins.util.SystemProperties;\n-import jenkins.model.Jenkins;\n-import jenkins.model.Jenkins.MasterComputer;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n \n-import javax.jmdns.ServiceInfo;\n-import javax.jmdns.impl.JmDNSImpl;\n-import java.io.Closeable;\n-import java.io.IOException;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.net.InetAddress;\n-import java.net.URL;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.ExecutorService;\n-import java.util.logging.Level;\n import java.util.logging.Logger;\n \n+import static hudson.init.InitMilestone.COMPLETED;\n+\n /**\n  * Registers a DNS multi-cast service-discovery support.\n  *\n  * @author Kohsuke Kawaguchi\n+ * @deprecated No longer does anything.\n  */\n-public class DNSMultiCast implements Closeable {\n-    private JenkinsJmDNS jmdns;\n-\n-    public DNSMultiCast(final Jenkins jenkins) {\n-        if (disabled)   return; // escape hatch\n-        \n-        // the registerService call can be slow. run these asynchronously\n-        MasterComputer.threadPoolForRemoting.submit(new Callable<Object>() {\n-            public Object call() {\n-                try {\n-                    jmdns = new JenkinsJmDNS(null, null);\n-\n-                    Map<String,String> props = new HashMap<>();\n-                    String rootURL = jenkins.getRootUrl();\n-                    if (rootURL==null)  return null;\n-\n-                    props.put(\"url\", rootURL);\n-                    try {\n-                        props.put(\"version\",String.valueOf(Jenkins.getVersion()));\n-                    } catch (IllegalArgumentException e) {\n-                        // failed to parse the version number\n-                    }\n-\n-                    TcpSlaveAgentListener tal = jenkins.getTcpSlaveAgentListener();\n-                    if (tal!=null)\n-                        props.put(\"slave-port\",String.valueOf(tal.getPort()));\n-\n-                    props.put(\"server-id\", jenkins.getLegacyInstanceId());\n-\n-                    URL jenkins_url = new URL(rootURL);\n-                    int jenkins_port = jenkins_url.getPort();\n-                    if (jenkins_port == -1) {\n-                        jenkins_port = 80;\n-                    }\n-                    if (jenkins_url.getPath().length() > 0) {\n-                        props.put(\"path\", jenkins_url.getPath());\n-                    }\n-\n-                    jmdns.registerService(ServiceInfo.create(\"_hudson._tcp.local.\",\"jenkins\",\n-                            jenkins_port,0,0,props));\t// for backward compatibility\n-                    jmdns.registerService(ServiceInfo.create(\"_jenkins._tcp.local.\",\"jenkins\",\n-                            jenkins_port,0,0,props));\n+@Deprecated\n+@Restricted(NoExternalUse.class)\n+public class DNSMultiCast {\n+    private static final Logger logger = Logger.getLogger(DNSMultiCast.class.getName());\n \n-                    // Make Jenkins appear in Safari's Bonjour bookmarks\n-                    jmdns.registerService(ServiceInfo.create(\"_http._tcp.local.\",\"Jenkins\",\n-                            jenkins_port,0,0,props));\n-                } catch (IOException e) {\n-                    LOGGER.log(Level.INFO, \"Cannot advertise service to DNS multi-cast, skipping: {0}\", e);\n-                    LOGGER.log(Level.FINE, null, e);\n-                }\n-                return null;\n-            }\n-        });\n-    }\n+    public static boolean disabled = SystemProperties.getBoolean(DNSMultiCast.class.getName()+\".disabled\", true);\n \n-    public void close() {\n-        if (jmdns!=null) {\n-            try {\n-                jmdns.abort();\n-                jmdns = null;\n-            } catch (final IOException e) {\n-                LOGGER.log(Level.WARNING,\"Failed to close down JmDNS instance!\",e);\n-            }\n+    @Initializer(before=COMPLETED)\n+    public void warn() {\n+        if (!disabled) {\n+            logger.warning(\"DNS multicast capability has been removed from Jenkins.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8394ae15886b3fc67abedc1055ada8c45d816c76"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b118ce351cb3f62aebf737fe062efcac9cbdd9a", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/6b118ce351cb3f62aebf737fe062efcac9cbdd9a", "committedDate": "2020-02-05T21:24:00Z", "message": "Fix initializer.\n\nChange capitalization for logger."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzMwMzU5", "url": "https://github.com/jenkinsci/jenkins/pull/4460#pullrequestreview-354330359", "createdAt": "2020-02-06T10:07:32Z", "commit": {"oid": "6b118ce351cb3f62aebf737fe062efcac9cbdd9a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzMwNzM1", "url": "https://github.com/jenkinsci/jenkins/pull/4460#pullrequestreview-354330735", "createdAt": "2020-02-06T10:08:06Z", "commit": {"oid": "6b118ce351cb3f62aebf737fe062efcac9cbdd9a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NDEzMjU3", "url": "https://github.com/jenkinsci/jenkins/pull/4460#pullrequestreview-354413257", "createdAt": "2020-02-06T12:30:18Z", "commit": {"oid": "6b118ce351cb3f62aebf737fe062efcac9cbdd9a"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjozMDoxOFrOFmZa1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjozMDo0MlrOFmZbdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwNjY3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.warning(\"DNS multicast capability has been removed from Jenkins.\");\n          \n          \n            \n                        LOGGER.warning(\"DNS multicast capability has been removed from Jenkins. More information: https://jenkins.io/redirect/dns-multicast\");", "url": "https://github.com/jenkinsci/jenkins/pull/4460#discussion_r375806677", "createdAt": "2020-02-06T12:30:18Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/DNSMultiCast.java", "diffHunk": "@@ -1,205 +1,32 @@\n package hudson;\n \n+import hudson.init.Initializer;\n import jenkins.util.SystemProperties;\n-import jenkins.model.Jenkins;\n-import jenkins.model.Jenkins.MasterComputer;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n \n-import javax.jmdns.ServiceInfo;\n-import javax.jmdns.impl.JmDNSImpl;\n-import java.io.Closeable;\n-import java.io.IOException;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.net.InetAddress;\n-import java.net.URL;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.ExecutorService;\n-import java.util.logging.Level;\n import java.util.logging.Logger;\n \n+import static hudson.init.InitMilestone.COMPLETED;\n+\n /**\n  * Registers a DNS multi-cast service-discovery support.\n  *\n  * @author Kohsuke Kawaguchi\n+ * @deprecated No longer does anything.\n  */\n-public class DNSMultiCast implements Closeable {\n-    private JenkinsJmDNS jmdns;\n-\n-    public DNSMultiCast(final Jenkins jenkins) {\n-        if (disabled)   return; // escape hatch\n-        \n-        // the registerService call can be slow. run these asynchronously\n-        MasterComputer.threadPoolForRemoting.submit(new Callable<Object>() {\n-            public Object call() {\n-                try {\n-                    jmdns = new JenkinsJmDNS(null, null);\n-\n-                    Map<String,String> props = new HashMap<>();\n-                    String rootURL = jenkins.getRootUrl();\n-                    if (rootURL==null)  return null;\n-\n-                    props.put(\"url\", rootURL);\n-                    try {\n-                        props.put(\"version\",String.valueOf(Jenkins.getVersion()));\n-                    } catch (IllegalArgumentException e) {\n-                        // failed to parse the version number\n-                    }\n-\n-                    TcpSlaveAgentListener tal = jenkins.getTcpSlaveAgentListener();\n-                    if (tal!=null)\n-                        props.put(\"slave-port\",String.valueOf(tal.getPort()));\n-\n-                    props.put(\"server-id\", jenkins.getLegacyInstanceId());\n-\n-                    URL jenkins_url = new URL(rootURL);\n-                    int jenkins_port = jenkins_url.getPort();\n-                    if (jenkins_port == -1) {\n-                        jenkins_port = 80;\n-                    }\n-                    if (jenkins_url.getPath().length() > 0) {\n-                        props.put(\"path\", jenkins_url.getPath());\n-                    }\n-\n-                    jmdns.registerService(ServiceInfo.create(\"_hudson._tcp.local.\",\"jenkins\",\n-                            jenkins_port,0,0,props));\t// for backward compatibility\n-                    jmdns.registerService(ServiceInfo.create(\"_jenkins._tcp.local.\",\"jenkins\",\n-                            jenkins_port,0,0,props));\n-\n-                    // Make Jenkins appear in Safari's Bonjour bookmarks\n-                    jmdns.registerService(ServiceInfo.create(\"_http._tcp.local.\",\"Jenkins\",\n-                            jenkins_port,0,0,props));\n-                } catch (IOException e) {\n-                    LOGGER.log(Level.INFO, \"Cannot advertise service to DNS multi-cast, skipping: {0}\", e);\n-                    LOGGER.log(Level.FINE, null, e);\n-                }\n-                return null;\n-            }\n-        });\n-    }\n-\n-    public void close() {\n-        if (jmdns!=null) {\n-            try {\n-                jmdns.abort();\n-                jmdns = null;\n-            } catch (final IOException e) {\n-                LOGGER.log(Level.WARNING,\"Failed to close down JmDNS instance!\",e);\n-            }\n-        }\n-    }\n-\n+@Deprecated\n+@Restricted(NoExternalUse.class)\n+public class DNSMultiCast {\n     private static final Logger LOGGER = Logger.getLogger(DNSMultiCast.class.getName());\n \n-    /**\n-     * Class that extends {@link JmDNSImpl} to add an abort method. Since {@link javax.jmdns.JmDNS#close()} might\n-     * make the instance hang during the shutdown, the abort method terminate uncleanly, but rapidly and\n-     * without blocking.\n-     *\n-     * Initially it was part of the jenkinsci/jmdns forked library, but now this class is responsible for aborting,\n-     * allowing to have a direct and clean dependency to the original library.\n-     *\n-     * The abort() method is pretty similar to close() method. To access private methods and fields uses\n-     * reflection.\n-     *\n-     * @since 2.178\n-     *\n-     * See JENKINS-25369 for further details\n-     */\n-    private static class JenkinsJmDNS extends JmDNSImpl {\n-        private static Logger logger = Logger.getLogger(JmDNSImpl.class.getName());\n-        private final Class parent;\n-\n-        /**\n-         * Create an instance of JmDNS and bind it to a specific network interface given its IP-address.\n-         *\n-         * @param address IP address to bind to.\n-         * @param name    name of the newly created JmDNS\n-         * @throws IOException\n-         */\n-        public JenkinsJmDNS(InetAddress address, String name) throws IOException {\n-            super(address, name);\n-            this.parent = this.getClass().getSuperclass();\n-        }\n-\n-        /**\n-         * Works like {@link #close()} but terminate uncleanly, but rapidly and without blocking.\n-         */\n-        public void abort() throws IOException {\n-            if (this.isClosing()) {\n-                return;\n-            }\n-\n-           if (logger.isLoggable(Level.FINER)) {\n-                logger.finer(\"Aborting JmDNS: \" + this);\n-            }\n-            // Stop JmDNS\n-            // This protects against recursive calls\n-            if (this.closeState()) {\n-                // We got the tie break now clean up\n-\n-                // Stop the timer\n-                logger.finer(\"Canceling the timer\");\n-                this.cancelTimer();\n-\n-                // Cancel all services\n-                // KK: this is a blocking call that doesn't fit 'abort'\n-                // this.unregisterAllServices();\n-                executePrivateParentMethod(\"disposeServiceCollectors\");\n-\n-// KK: another blocking call\n-//                if (logger.isLoggable(Level.FINER)) {\n-//                    logger.finer(\"Wait for JmDNS cancel: \" + this);\n-//                }\n-//                this.waitForCanceled(DNSConstants.CLOSE_TIMEOUT);\n-\n-                // Stop the canceler timer\n-                logger.finer(\"Canceling the state timer\");\n-                this.cancelStateTimer();\n-\n-                // Stop the executor\n-                shutdown();\n-\n-                // close socket\n-                executePrivateParentMethod(\"closeMulticastSocket\");\n-\n-                // remove the shutdown hook\n-                if (_shutdown != null) {\n-                    Runtime.getRuntime().removeShutdownHook(_shutdown);\n-                }\n-\n-                if (logger.isLoggable(Level.FINER)) {\n-                    logger.finer(\"JmDNS closed.\");\n-                }\n-            }\n-            advanceState(null);\n-        }\n-\n-        private void shutdown() throws IOException {\n-            try {\n-                Field executor = this.parent.getDeclaredField(\"_executor\");\n-                executor.setAccessible(true);\n-                ExecutorService _executor = (ExecutorService) executor.get(this);\n-                _executor.shutdown();\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                logger.log(Level.SEVERE, \"Error trying to abort JmDNS\", e);\n-                throw new IOException(e);\n-            }\n-        }\n+    public static boolean disabled = SystemProperties.getBoolean(DNSMultiCast.class.getName()+\".disabled\", true);\n \n-        private void executePrivateParentMethod(String method) throws IOException {\n-            try {\n-                Method m = this.parent.getDeclaredMethod(method);\n-                m.setAccessible(true);\n-                m.invoke(this);\n-            } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n-                logger.log(Level.SEVERE, \"Error trying to abort JmDNS\", e);\n-                throw new IOException(e);\n-            }\n+    @Initializer(before=COMPLETED)\n+    public static void warn() {\n+        if (!disabled) {\n+            LOGGER.warning(\"DNS multicast capability has been removed from Jenkins.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b118ce351cb3f62aebf737fe062efcac9cbdd9a"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwNjgzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.warning(\"UDP broadcast capability has been removed from Jenkins.\");\n          \n          \n            \n                        LOGGER.warning(\"UDP broadcast capability has been removed from Jenkins. More information: https://jenkins.io/redirect/udp-broadcast\");", "url": "https://github.com/jenkinsci/jenkins/pull/4460#discussion_r375806838", "createdAt": "2020-02-06T12:30:42Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/UDPBroadcastThread.java", "diffHunk": "@@ -23,129 +24,40 @@\n  */\n package hudson;\n \n-import jenkins.util.SystemProperties;\n-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n-import hudson.model.Hudson;\n+import hudson.init.Initializer;\n import jenkins.model.Jenkins;\n-import hudson.util.OneShotEvent;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n \n import java.io.IOException;\n-import java.net.DatagramPacket;\n-import java.net.InetAddress;\n-import java.net.MulticastSocket;\n-import java.net.SocketAddress;\n-import java.net.SocketException;\n-import java.net.UnknownHostException;\n-import java.nio.channels.ClosedByInterruptException;\n-import java.nio.charset.StandardCharsets;\n-import java.util.logging.Level;\n import java.util.logging.Logger;\n \n+import static hudson.init.InitMilestone.COMPLETED;\n+\n /**\n  * Monitors a UDP multicast broadcast and respond with the location of the Hudson service.\n  *\n  * <p>\n  * Useful for auto-discovery of Hudson in the network.\n  *\n  * @author Kohsuke Kawaguchi\n+ * @deprecated No longer does anything.\n  */\n-public class UDPBroadcastThread extends Thread {\n-    private final Jenkins jenkins;\n-\n-    public final OneShotEvent ready = new OneShotEvent();\n-    private MulticastSocket mcs;\n-    private boolean shutdown;\n-    static boolean udpHandlingProblem; // for tests\n-\n-    /**\n-     * @deprecated as of 1.416\n-     *      Use {@link #UDPBroadcastThread(Jenkins)}\n-     */\n-    @Deprecated\n-    public UDPBroadcastThread(Hudson jenkins) throws IOException {\n-        this((Jenkins)jenkins);\n-    }\n-\n-    public UDPBroadcastThread(Jenkins jenkins) throws IOException {\n-        super(\"Jenkins UDP \"+PORT+\" monitoring thread\");\n-        this.jenkins = jenkins;\n-        mcs = new MulticastSocket(PORT);\n-    }\n-\n-    @SuppressFBWarnings(\"ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD\")\n-    @Override\n-    public void run() {\n-        try {\n-            mcs.joinGroup(MULTICAST);\n-            ready.signal();\n-\n-            //noinspection InfiniteLoopStatement\n-            while(true) {\n-                byte[] buf = new byte[2048];\n-                DatagramPacket p = new DatagramPacket(buf,buf.length);\n-                mcs.receive(p);\n-\n-                SocketAddress sender = p.getSocketAddress();\n-\n-                // prepare a response\n-                TcpSlaveAgentListener tal = jenkins.getTcpSlaveAgentListener();\n-\n-                StringBuilder rsp = new StringBuilder(\"<hudson>\");\n-                tag(rsp,\"version\", Jenkins.VERSION);\n-                tag(rsp,\"url\", jenkins.getRootUrl());\n-                tag(rsp,\"server-id\", jenkins.getLegacyInstanceId());\n-                tag(rsp,\"slave-port\",tal==null?null:tal.getPort());\n-\n-                for (UDPBroadcastFragment f : UDPBroadcastFragment.all())\n-                    f.buildFragment(rsp,sender);\n-\n-                rsp.append(\"</hudson>\");\n-\n-                byte[] response = rsp.toString().getBytes(StandardCharsets.UTF_8);\n-                mcs.send(new DatagramPacket(response,response.length,sender));\n-            }\n-        } catch (ClosedByInterruptException e) {\n-            // shut down\n-        } catch (SocketException e) {\n-            if (shutdown) { // forcibly closed\n-                return;\n-            }            // if we failed to listen to UDP, just silently abandon it, as a stack trace\n-            // makes people unnecessarily concerned, for a feature that currently does no good.\n-            LOGGER.log(Level.INFO, \"Cannot listen to UDP port {0}, skipping: {1}\", new Object[] {PORT, e});\n-            LOGGER.log(Level.FINE, null, e);\n-        } catch (IOException e) {\n-            if (shutdown)   return; // forcibly closed\n-            LOGGER.log(Level.WARNING, \"UDP handling problem\",e);\n-            udpHandlingProblem = true;\n-        }\n-    }\n-\n-    private void tag(StringBuilder buf, String tag, Object value) {\n-        if(value==null) return;\n-        buf.append('<').append(tag).append('>').append(value).append(\"</\").append(tag).append('>');\n-    }\n-\n-    public void shutdown() {\n-        shutdown = true;\n-        mcs.close();\n-        interrupt();\n-    }\n+@Deprecated\n+@Restricted(NoExternalUse.class)\n+public class UDPBroadcastThread {\n \n     // The previous default port was 33848, before the \"disabled by default\" change\n     public static final int PORT = SystemProperties.getInteger(\"hudson.udp\", -1);\n \n     private static final Logger LOGGER = Logger.getLogger(UDPBroadcastThread.class.getName());\n \n-    /**\n-     * Multicast socket address.\n-     */\n-    public static InetAddress MULTICAST;\n-\n-    static {\n-        try {\n-            MULTICAST = InetAddress.getByAddress(new byte[]{(byte)239, (byte)77, (byte)124, (byte)213});\n-        } catch (UnknownHostException e) {\n-            throw new Error(e);\n+    @Initializer(before=COMPLETED)\n+    public static void warn() {\n+        if (PORT > 0) {\n+            LOGGER.warning(\"UDP broadcast capability has been removed from Jenkins.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b118ce351cb3f62aebf737fe062efcac9cbdd9a"}, "originalPosition": 148}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b471a1de15f0e78ced27eb5fb25ed891e47ea06", "author": {"user": {"login": "jeffret-b", "name": "Jeff Thompson"}}, "url": "https://github.com/jenkinsci/jenkins/commit/4b471a1de15f0e78ced27eb5fb25ed891e47ea06", "committedDate": "2020-02-06T15:37:43Z", "message": "Add URLs to log messages.\n\nCo-Authored-By: Daniel Beck <1831569+daniel-beck@users.noreply.github.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1470, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}