{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NjczMjQz", "number": 4731, "title": "[JENKINS-62345] Introduce FingerprintStorage API in core", "bodyText": "See JENKINS-62345.\nSee JEP-226\n\nProposed changelog entries\n\n\nDeveloper: Introduce new Fingerprint API methods: Fingerprint#getPersistedFacets(), Fingerprint#delete(String). Deprecated methods: Fingerprint#save(File). This API expects usage of standard CRUD operations like Fingerprint#save(), Fingerprint#load(String) and Fingerprint#delete(String)\nDeveloper: Add experimental External Fingerprint Storage API\n\nJEP-226 - https://github.com/jenkinsci/jep/tree/master/jep/226\nReference Implementation - https://github.com/jenkinsci/redis-fingerprint-storage-plugin\n\n\n\nProposed upgrade guidelines\nN/A\n\nSubmitter checklist\n\n (If applicable) Jira issue is well described\n Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). Examples\n\nFill-in the Proposed changelog entries section only if there are breaking changes or other changes which may require extra steps from users during the upgrade\n\n\n Appropriate autotests or explanation to why this change has no tests\n For dependency updates: links to external changelogs and, if possible, full diffs\n\n\nDesired reviewers\n@mention\n\nMaintainer checklist\nBefore the changes are marked as ready-for-merge:\n\n There are at least 2 approvals for the pull request and no outstanding requests for change\n Conversations in the pull request are over OR it is explicit that a reviewer does not block the change\n Changelog entries in the PR title and/or Proposed changelog entries are correct\n Proper changelog labels are set so that the changelog can be generated automatically\n If the change needs additional upgrade steps from users, upgrade-guide-needed label is set and there is a Proposed upgrade guidelines section in the PR title. (example)\n If it would make sense to backport the change to LTS, a Jira issue must exist, be a Bug or Improvement, and be labeled as lts-candidate to be considered (see query).", "createdAt": "2020-05-18T18:37:42Z", "url": "https://github.com/jenkinsci/jenkins/pull/4731", "merged": true, "mergeCommit": {"oid": "a5310b10d6f4489eab4316cda8ab5a5d7ce14771"}, "closed": true, "closedAt": "2020-06-22T07:42:09Z", "author": {"login": "stellargo"}, "timelineItems": {"totalCount": 133, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp0uOkAH2gAyNDE5NjczMjQzOmZhYTg5YjM3NTZmYzAwYTJjMDYzNjFiNmRhZTZlNWNkZWVkMjk2MGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc49gvsgFqTQ1NTU3NDg1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "committedDate": "2020-06-10T07:42:32Z", "message": "Suppress fingerprint cleanup thread when external storage is configured"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6e6cba58c4493be3ba2b3a8c7d655d06a8f1d9e", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/b6e6cba58c4493be3ba2b3a8c7d655d06a8f1d9e", "committedDate": "2020-06-10T09:05:48Z", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "815f3d7ee1281da2f32250096469cd771ebaaead", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/815f3d7ee1281da2f32250096469cd771ebaaead", "committedDate": "2020-06-10T09:10:00Z", "message": "Add TODO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09f594f8d1adddeecf634b0d400736b44177363f", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/09f594f8d1adddeecf634b0d400736b44177363f", "committedDate": "2020-06-10T19:31:46Z", "message": "Fix negation bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2463bcdaa03f8ce16f007ea8bbad6db3041fba88", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/2463bcdaa03f8ce16f007ea8bbad6db3041fba88", "committedDate": "2020-06-10T19:37:10Z", "message": "Move FingerprintCleanupThreadTest from core to test (needs JTH)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70da6e9398629eda41d8a169965b58d2686929a8", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/70da6e9398629eda41d8a169965b58d2686929a8", "committedDate": "2020-06-12T06:55:12Z", "message": "Revert to using ordinal for extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc7670c98b313c1f9da6b682aca956369e791648", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/cc7670c98b313c1f9da6b682aca956369e791648", "committedDate": "2020-06-12T06:55:49Z", "message": "Remove redundant import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/472883515e96b7436f19b87a24c3dcc79f4b79f3", "committedDate": "2020-06-12T15:01:27Z", "message": "Add note on ID"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5ODIyMDM2", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-429822036", "createdAt": "2020-06-12T15:10:36Z", "commit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxMDozN1rOGjHpew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxNjoxM1rOGjH12Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODY1MQ==", "bodyText": "Still todo? This seems like a simple getter :)", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439478651", "createdAt": "2020-06-12T15:10:37Z", "author": {"login": "afalko"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1193,6 +1189,15 @@ public int size() {\n         };\n     }\n \n+    /**\n+     * Returns the persisted facets.\n+     *\n+     * @since TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODkzNg==", "bodyText": "Curlies around this if please", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439478936", "createdAt": "2020-06-12T15:11:07Z", "author": {"login": "afalko"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1239,34 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) {\n+            return;\n+        }\n \n-        long start=0;\n+        long start = 0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n-        File file = getFingerprintFile(md5sum);\n-        save(file);\n-        SaveableListener.fireOnChange(this, getConfigFile(file));\n+        // Implementations are expected to invoke SaveableListener on their own if relevant\n+        // TODO: Consider improving Saveable Listener API: https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        FingerprintStorage.get().save(this);\n \n         if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            logger.fine(\"Saving fingerprint \" + getHashString() + \" took \" + (System.currentTimeMillis() - start) + \"ms\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MDIwMQ==", "bodyText": "I think the style is to add spaces around the ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439480201", "createdAt": "2020-06-12T15:13:24Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(NoExternalUse.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists()) {\n+            return null;\n+        }\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MDk2OA==", "bodyText": "Do we need to check for null lookup?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439480968", "createdAt": "2020-06-12T15:14:41Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ * Note: The ID supplied as arguments in various methods to uniquely identify fingerprints should not contain the\n+ * character '|'.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        return ExtensionList.lookup(FingerprintStorage.class).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MTgxNw==", "bodyText": "better to name jenkinsRule", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439481817", "createdAt": "2020-06-12T15:16:13Z", "author": {"login": "afalko"}, "path": "test/src/test/java/hudson/model/FingerprintCleanupThreadTest.java", "diffHunk": "@@ -52,6 +54,9 @@\n     private Path tempDirectory;\n     private Path fpFile;\n \n+    @Rule\n+    public JenkinsRule j = new JenkinsRule();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de7a107343f9f67da4ff22863c76ae71109a1af6", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/de7a107343f9f67da4ff22863c76ae71109a1af6", "committedDate": "2020-06-12T15:28:28Z", "message": "spacing changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e713c9215a102d075f22c913354228d36cd07e1", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/9e713c9215a102d075f22c913354228d36cd07e1", "committedDate": "2020-06-12T15:30:02Z", "message": "Add spacing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db532e9c174e1cbf2b32a00040a809f7c33e36ae", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/db532e9c174e1cbf2b32a00040a809f7c33e36ae", "committedDate": "2020-06-12T15:32:38Z", "message": "Add ordinal to extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e35c664db263ef1ee41f999daa79b29b110d2efa", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/e35c664db263ef1ee41f999daa79b29b110d2efa", "committedDate": "2020-06-12T15:41:54Z", "message": "Add curlies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5ODQzMTg1", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-429843185", "createdAt": "2020-06-12T15:38:33Z", "commit": {"oid": "db532e9c174e1cbf2b32a00040a809f7c33e36ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTozODozM1rOGjIlng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTozODozM1rOGjIlng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NDA0Ng==", "bodyText": "Why is that? Could the reference implementation simply escape such a character if it is ever used?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439494046", "createdAt": "2020-06-12T15:38:33Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -30,12 +30,13 @@\n import java.io.IOException;\n \n import hudson.model.Fingerprint;\n-import jenkins.util.SystemProperties;\n import org.kohsuke.accmod.restrictions.Beta;\n import org.kohsuke.accmod.Restricted;\n \n /**\n  * Pluggable fingerprint storage API for fingerprints.\n+ * Note: The ID supplied as arguments in various methods to uniquely identify fingerprints should not contain the\n+ * character '|'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db532e9c174e1cbf2b32a00040a809f7c33e36ae"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae82e0e14ba29a829b0edec46bbce2468ca7adbb", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/ae82e0e14ba29a829b0edec46bbce2468ca7adbb", "committedDate": "2020-06-12T15:43:49Z", "message": "remove curlies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b4bc56ce9536aa47ca90f71f1b1ba309737d822", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/0b4bc56ce9536aa47ca90f71f1b1ba309737d822", "committedDate": "2020-06-13T06:29:03Z", "message": "j -> jenkinsRule"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTUyNzQx", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-430152741", "createdAt": "2020-06-13T17:14:07Z", "commit": {"oid": "0b4bc56ce9536aa47ca90f71f1b1ba309737d822"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36ab9b326954df2f9e0d2c3c24ad17402b941701", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/36ab9b326954df2f9e0d2c3c24ad17402b941701", "committedDate": "2020-06-16T07:43:50Z", "message": "Remove note on | delimeter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7923ce298718a663628fbba731e1735fc1553be8", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/7923ce298718a663628fbba731e1735fc1553be8", "committedDate": "2020-06-16T08:21:34Z", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMjgzNzM2", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-431283736", "createdAt": "2020-06-16T08:38:33Z", "commit": {"oid": "7923ce298718a663628fbba731e1735fc1553be8"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODozODozNFrOGkRKaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODo0MDowN1rOGkROVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4MzExMg==", "bodyText": "It is rather important to provide guidelines what to do here.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r440683112", "createdAt": "2020-06-16T08:38:34Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1239,34 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) {\n+            return;\n+        }\n \n         long start=0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n-        File file = getFingerprintFile(md5sum);\n-        save(file);\n-        SaveableListener.fireOnChange(this, getConfigFile(file));\n+        // Implementations are expected to invoke SaveableListener on their own if relevant\n+        // TODO: Consider improving Saveable Listener API: https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        FingerprintStorage.get().save(this);\n \n         if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            logger.fine(\"Saving fingerprint \" + getHashString() + \" took \" + (System.currentTimeMillis() - start) + \"ms\");\n     }\n \n+    /**\n+     * Save the Fingerprint in the given file locally\n+     * @throws IOException Save error\n+     * @deprecated as of TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7923ce298718a663628fbba731e1735fc1553be8"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4MzMxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n          \n          \n            \n                 * @return Loaded {@link Fingerprint}. {@code null} if the config file does not exist or", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r440683310", "createdAt": "2020-06-16T08:38:52Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,83 +1313,64 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7923ce298718a663628fbba731e1735fc1553be8"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4NDAwMA==", "bodyText": "Same as above, guidelines are needed. I would also keep the existing API documentation even if it is deprecated\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @deprecated as of TODO\n          \n          \n            \n                 * Determines the file name from md5sum.\n          \n          \n            \n                 * @deprecated as of TODO", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r440684000", "createdAt": "2020-06-16T08:39:56Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,83 +1313,64 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE)) {\n+            start = System.currentTimeMillis();\n+        }\n+\n+        Fingerprint loaded = FingerprintStorage.get().load(id);\n+        initFacets(loaded);\n+\n+        if(logger.isLoggable(Level.FINE)) {\n+            logger.fine(\"Loading fingerprint took \" + (System.currentTimeMillis() - start) + \"ms\");\n+        }\n+\n+        return loaded;\n     }\n \n     /**\n-     * Determines the file name from md5sum.\n+     * @deprecated as of TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7923ce298718a663628fbba731e1735fc1553be8"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4NDExOA==", "bodyText": "same", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r440684118", "createdAt": "2020-06-16T08:40:07Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,83 +1313,64 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE)) {\n+            start = System.currentTimeMillis();\n+        }\n+\n+        Fingerprint loaded = FingerprintStorage.get().load(id);\n+        initFacets(loaded);\n+\n+        if(logger.isLoggable(Level.FINE)) {\n+            logger.fine(\"Loading fingerprint took \" + (System.currentTimeMillis() - start) + \"ms\");\n+        }\n+\n+        return loaded;\n     }\n \n     /**\n-     * Determines the file name from md5sum.\n+     * @deprecated as of TODO\n      */\n-    private static @NonNull File getFingerprintFile(@NonNull byte[] md5sum) {\n-        assert md5sum.length==16;\n-        return new File( Jenkins.get().getRootDir(),\n-            \"fingerprints/\"+ Util.toHexString(md5sum,0,1)+'/'+Util.toHexString(md5sum,1,1)+'/'+Util.toHexString(md5sum,2,md5sum.length-2)+\".xml\");\n+    @Deprecated\n+    /*package*/ static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+        return load(Util.toHexString(md5sum));\n     }\n \n     /**\n-     * Loads a {@link Fingerprint} from a file in the image.\n-     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n-     * malformed.\n+     * @deprecated as of TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7923ce298718a663628fbba731e1735fc1553be8"}, "originalPosition": 209}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9aa86ef29991ce56b19a1eb95fa24df33ed91e81", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/9aa86ef29991ce56b19a1eb95fa24df33ed91e81", "committedDate": "2020-06-16T09:11:26Z", "message": "Improve docstring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0d44bce44008b4f275da4c9bf74292a313c03a0", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/f0d44bce44008b4f275da4c9bf74292a313c03a0", "committedDate": "2020-06-16T09:11:41Z", "message": "null -> {@code null}"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16e9d6560104b2068ad4879d1ec24aa81083f9ea", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/16e9d6560104b2068ad4879d1ec24aa81083f9ea", "committedDate": "2020-06-16T09:14:54Z", "message": "Improve docstring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1fbc87eeca1920d9a0c5d5cd4887e30ed25a67a", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/e1fbc87eeca1920d9a0c5d5cd4887e30ed25a67a", "committedDate": "2020-06-16T09:55:55Z", "message": "Improve documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2306ff578289cb9e1ce75c69bba9202b55c93af", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/b2306ff578289cb9e1ce75c69bba9202b55c93af", "committedDate": "2020-06-16T09:58:01Z", "message": "Fix typos"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTUyODMz", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-431552833", "createdAt": "2020-06-16T14:17:08Z", "commit": {"oid": "b2306ff578289cb9e1ce75c69bba9202b55c93af"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMzgxNjYx", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-433381661", "createdAt": "2020-06-18T15:09:03Z", "commit": {"oid": "b2306ff578289cb9e1ce75c69bba9202b55c93af"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTowOTowM1rOGlz16g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxNDo1M1rOGl0FFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5OTg4Mg==", "bodyText": "is there no API for this in external or just not needed?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442299882", "createdAt": "2020-06-18T15:09:03Z", "author": {"login": "timja"}, "path": "core/src/main/java/hudson/model/FingerprintCleanupThread.java", "diffHunk": "@@ -71,6 +75,12 @@ private static FingerprintCleanupThread getInstance() {\n     }\n \n     public void execute(TaskListener listener) {\n+        Object fingerprintStorage = FingerprintStorage.get();\n+        if (!(fingerprintStorage instanceof FileFingerprintStorage)) {\n+            LOGGER.fine(\"External fingerprint storage is configured. Skipping execution\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2306ff578289cb9e1ce75c69bba9202b55c93af"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMDg1Ng==", "bodyText": "could update this reference while moving it\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n          \n          \n            \n                            // but if the file size is 0, which is what's reported in JENKINS-2012, then it seems", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442300856", "createdAt": "2020-06-18T15:10:33Z", "author": {"login": "timja"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(NoExternalUse.class)\n+@Extension(ordinal=-100)\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists()) {\n+            return null;\n+        }\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length() == 0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2306ff578289cb9e1ce75c69bba9202b55c93af"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMjEyNg==", "bodyText": "there's certainly nicer ways to print this, but not worth doing in this PR \ud83d\udc4d", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442302126", "createdAt": "2020-06-18T15:12:23Z", "author": {"login": "timja"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(NoExternalUse.class)\n+@Extension(ordinal=-100)\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists()) {\n+            return null;\n+        }\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length() == 0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \" + configFile, e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2306ff578289cb9e1ce75c69bba9202b55c93af"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMjUwMg==", "bodyText": "could rename this var to follow java naming standards\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String[] inner_files = inner.list();\n          \n          \n            \n                    String[] innerFiles = inner.list();", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442302502", "createdAt": "2020-06-18T15:12:57Z", "author": {"login": "timja"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(NoExternalUse.class)\n+@Extension(ordinal=-100)\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists()) {\n+            return null;\n+        }\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length() == 0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \" + configFile, e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) throws IOException {\n+        File file = getFingerprintFile(id);\n+        if (!file.exists()) {\n+            return;\n+        }\n+\n+        if (!file.delete()) {\n+            throw new IOException(\"Error occurred in deleting Fingerprint \" + id);\n+        }\n+\n+        File inner = new File(Jenkins.get().getRootDir(), \"fingerprints/\" + id.substring(0,2) + \"/\" + id.substring(2,4));\n+        String[] inner_files = inner.list();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2306ff578289cb9e1ce75c69bba9202b55c93af"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMzc2NA==", "bodyText": "This doesn't seem to be the configured one? afaict it's the first one and you've set the file one to have low priority so that an external one gets picked up first\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns the configured FingerprintStorage for the instance.\n          \n          \n            \n                 * Returns the first implementation of FingerprintStorage for the instance.\n          \n          \n            \n                 * Implementation ordering is done via the ordinal attribute on the Extension", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442303764", "createdAt": "2020-06-18T15:14:53Z", "author": {"login": "timja"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2306ff578289cb9e1ce75c69bba9202b55c93af"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67db5b1f00e9658dd8cd4035876c86c7d84b8cc3", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/67db5b1f00e9658dd8cd4035876c86c7d84b8cc3", "committedDate": "2020-06-18T17:55:07Z", "message": "Minor changes to variable names and docstrings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b40ecd1844fc5a250fb1f0a3e0c71ebc5dfd22c4", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/b40ecd1844fc5a250fb1f0a3e0c71ebc5dfd22c4", "committedDate": "2020-06-18T17:56:46Z", "message": "Update docstring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTIzNjUx", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-433523651", "createdAt": "2020-06-18T18:02:03Z", "commit": {"oid": "b40ecd1844fc5a250fb1f0a3e0c71ebc5dfd22c4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MDA2NjI1", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-434006625", "createdAt": "2020-06-19T11:34:25Z", "commit": {"oid": "b40ecd1844fc5a250fb1f0a3e0c71ebc5dfd22c4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NTcyOTk3", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-455572997", "createdAt": "2020-07-27T08:23:22Z", "commit": {"oid": "b40ecd1844fc5a250fb1f0a3e0c71ebc5dfd22c4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoyMzoyMlrOG3YaCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoyMzoyMlrOG3YaCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcyNDc0NQ==", "bodyText": "This entire class needs an @since TODO, same with FileFingerprintStorage.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r460724745", "createdAt": "2020-07-27T08:23:22Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b40ecd1844fc5a250fb1f0a3e0c71ebc5dfd22c4"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NTc0ODUx", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-455574851", "createdAt": "2020-07-27T08:25:49Z", "commit": {"oid": "b40ecd1844fc5a250fb1f0a3e0c71ebc5dfd22c4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoyNTo0OVrOG3Yfqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoyNTo0OVrOG3Yfqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcyNjE4Nw==", "bodyText": "@since?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r460726187", "createdAt": "2020-07-27T08:25:49Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,83 +1313,68 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. {@code null} if the config file does not exist or\n+     * malformed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b40ecd1844fc5a250fb1f0a3e0c71ebc5dfd22c4"}, "originalPosition": 172}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzOTYxNzk2", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-413961796", "createdAt": "2020-05-18T21:48:04Z", "commit": {"oid": "13889975d1e03f00e41f92bf6f67ebb6f73946f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTo0ODowNVrOGXImJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTo0ODowNVrOGXImJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxMTI2OA==", "bodyText": "Please rather get used to setters./getters in the code. Public fields are nightmare in Java when it comes to maintaining binary compatibility", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r426911268", "createdAt": "2020-05-18T21:48:05Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -851,30 +851,32 @@ private void locationChanged(Item item, String oldName, String newName) {\n     /**\n      * Time when the fingerprint has been captured.\n      */\n-    private final @Nonnull Date timestamp;\n+    public final @Nonnull Date timestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13889975d1e03f00e41f92bf6f67ebb6f73946f4"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MjQyNjI0", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-414242624", "createdAt": "2020-05-19T08:59:17Z", "commit": {"oid": "13889975d1e03f00e41f92bf6f67ebb6f73946f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo1OToxN1rOGXWtww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo1OToxN1rOGXWtww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0MjU5NQ==", "bodyText": "Unless there are startup sequence related issues, this should be fairly straightforward to do in a \"Jenkins\" way:\n\nRemove the field in Fingerprint.\nAnnotate this class @Extension(ordinal=100) after making sure it has a no-arg constructor.\nAdd an abstract superclass FingerprintStorage implements ExtensionPoint and extend it here.\nHave a static FingerprintStorage get() in the superclass that returns ExtensionList.lookup(FingerprintStorage.class).get(0).\n\nAny @Extension WhateverFingerprintStorage extends FingerprintStorage will take precedence.\nEven if the final PR looks nothing like I write above, looking into these Jenkins-isms if you don't know them yet will prepare you for writing code \"the Jenkins way\" \ud83d\ude03", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r427142595", "createdAt": "2020-05-19T08:59:17Z", "author": {"login": "daniel-beck"}, "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package hudson.model;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.BulkChange;\n+import hudson.Util;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+public class FileFingerprintStorage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13889975d1e03f00e41f92bf6f67ebb6f73946f4"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c778655fa2904a2986d460282da2ce3162fceff4", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/c778655fa2904a2986d460282da2ce3162fceff4", "committedDate": "2020-05-20T14:13:52Z", "message": "Merge branch 'master' into external-fingerprint-storage"}, "afterCommit": {"oid": "6b873a4f6e8e7eab97d05b3091b2fbbb31033793", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/6b873a4f6e8e7eab97d05b3091b2fbbb31033793", "committedDate": "2020-05-20T17:03:48Z", "message": "[JENKINS-62345] Introduce FingerprintStorage API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8801887d2fbabc2d9eef8ea0ea657564d55f7d16", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/8801887d2fbabc2d9eef8ea0ea657564d55f7d16", "committedDate": "2020-05-22T12:10:25Z", "message": "[JENKINS-62345] Introduce FingerprintStorage API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cab3222063b5b2bc68bfce05f87d426f74f8b18", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/4cab3222063b5b2bc68bfce05f87d426f74f8b18", "committedDate": "2020-05-22T12:10:25Z", "message": "Fix FingerprintTest by adding JenkinsRule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baddacd1780837ad75d02d870c67878ecef13b91", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/baddacd1780837ad75d02d870c67878ecef13b91", "committedDate": "2020-05-22T12:10:25Z", "message": "Add licenses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5dfcf32865ae12c26177414fb3be4cc0ced33d5", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/f5dfcf32865ae12c26177414fb3be4cc0ced33d5", "committedDate": "2020-05-22T12:10:25Z", "message": "Undo Adding JTH to core"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22ceaab9ac147e65ebfb0e7dcb9ee734eb57c68e", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/22ceaab9ac147e65ebfb0e7dcb9ee734eb57c68e", "committedDate": "2020-05-22T12:10:25Z", "message": "Move roundTrip test to JTH"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a98412fd0c81974986bf4288dbad5c646ef2a1ed", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/a98412fd0c81974986bf4288dbad5c646ef2a1ed", "committedDate": "2020-05-22T12:11:30Z", "message": "Move toByteArray method to Fingerprint class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e3c1f46411e339c969be91346dc453b343397df", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/1e3c1f46411e339c969be91346dc453b343397df", "committedDate": "2020-05-21T10:50:36Z", "message": "Move roundTrip test to JTH"}, "afterCommit": {"oid": "a98412fd0c81974986bf4288dbad5c646ef2a1ed", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/a98412fd0c81974986bf4288dbad5c646ef2a1ed", "committedDate": "2020-05-22T12:11:30Z", "message": "Move toByteArray method to Fingerprint class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MjA2NzQy", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-417206742", "createdAt": "2020-05-22T22:06:24Z", "commit": {"oid": "a98412fd0c81974986bf4288dbad5c646ef2a1ed"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjowNjoyNFrOGZlCEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjowNzoyNlrOGZlC3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NDMyMw==", "bodyText": "Maybe something to leave within the abstraction. It is hard to expect the implementations to handle it correctly", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r429474323", "createdAt": "2020-05-22T22:06:24Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.BulkChange;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+import hudson.util.PersistedList;\n+import jenkins.model.FingerprintFacet;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(Fingerprint.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    public @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+        return load(Fingerprint.getFingerprintFile(md5sum));\n+    }\n+\n+    static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = Fingerprint.getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))\n+            start = System.currentTimeMillis();\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            if(logger.isLoggable(Level.FINE))\n+                logger.fine(\"Loading fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            if (f.facets==null)\n+                f.facets = new PersistedList<>(f);\n+            for (FingerprintFacet facet : f.facets)\n+                facet._setOwner(f);\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = Fingerprint.messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        if(BulkChange.contains(fp))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a98412fd0c81974986bf4288dbad5c646ef2a1ed"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NDUyNQ==", "bodyText": "Something to leave in the abstraction as well?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r429474525", "createdAt": "2020-05-22T22:07:26Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.BulkChange;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+import hudson.util.PersistedList;\n+import jenkins.model.FingerprintFacet;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(Fingerprint.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    public @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+        return load(Fingerprint.getFingerprintFile(md5sum));\n+    }\n+\n+    static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = Fingerprint.getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))\n+            start = System.currentTimeMillis();\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            if(logger.isLoggable(Level.FINE))\n+                logger.fine(\"Loading fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            if (f.facets==null)\n+                f.facets = new PersistedList<>(f);\n+            for (FingerprintFacet facet : f.facets)\n+                facet._setOwner(f);\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = Fingerprint.messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        if(BulkChange.contains(fp))\n+            return;\n+\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))\n+            start = System.currentTimeMillis();\n+\n+        File file = Fingerprint.getFingerprintFile(Fingerprint.toByteArray(fp.getHashString()));\n+        save(fp, file);\n+        SaveableListener.fireOnChange(fp, Fingerprint.getConfigFile(file));\n+\n+        if(logger.isLoggable(Level.FINE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a98412fd0c81974986bf4288dbad5c646ef2a1ed"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92b10ec9218e83ed372f36517b8fe711dc87e399", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/92b10ec9218e83ed372f36517b8fe711dc87e399", "committedDate": "2020-05-23T10:32:38Z", "message": "Decrease extension ordinal value for FileFingerprintStorage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61dbf95009596cb922068b4a622c61772b573cb8", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/61dbf95009596cb922068b4a622c61772b573cb8", "committedDate": "2020-05-23T10:40:35Z", "message": "abstract logging and bulkchange into fingerprint class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9ca3b8fd5c9f9acaf7672311cdab6fccbc42c36", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/a9ca3b8fd5c9f9acaf7672311cdab6fccbc42c36", "committedDate": "2020-05-23T11:54:10Z", "message": "Move loading logs into Fingerprint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dfa5369253fde8baf0adbd54acce047a25551db", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/2dfa5369253fde8baf0adbd54acce047a25551db", "committedDate": "2020-05-24T06:46:43Z", "message": "Expose setPersistedFacets in Fingerprint class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "563c280a55881be4a5637dafc3c91b8794bf5131", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/563c280a55881be4a5637dafc3c91b8794bf5131", "committedDate": "2020-05-24T07:08:40Z", "message": "Annotate FingerprintStorage as Beta"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afaa0eb6a3a7e54c8243fd211e087d3756ac87c9", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/afaa0eb6a3a7e54c8243fd211e087d3756ac87c9", "committedDate": "2020-05-24T08:18:04Z", "message": "Add docstring for FingerprintStorage and FileFingerprintStorage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MzczODgz", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-417373883", "createdAt": "2020-05-24T16:44:06Z", "commit": {"oid": "afaa0eb6a3a7e54c8243fd211e087d3756ac87c9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNjo0NDowNlrOGZwBaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNjo0NDowNlrOGZwBaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDM3Ng==", "bodyText": "Been a while for such conversions for me, but do you need to watch for any overflows or anything?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r429654376", "createdAt": "2020-05-24T16:44:06Z", "author": {"login": "afalko"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -927,6 +923,18 @@ public Fingerprint(@CheckForNull Run build, @NonNull String fileName, @NonNull b\n         return Util.toHexString(md5sum);\n     }\n \n+    /**\n+     * Converts md5 hash string to byte array.\n+     *\n+     * @since TODO\n+     */\n+    public static byte[] toByteArray(String md5sum) {\n+        byte[] data = new byte[16];\n+        for( int i=0; i<md5sum.length(); i+=2 )\n+            data[i/2] = (byte)Integer.parseInt(md5sum.substring(i,i+2),16);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afaa0eb6a3a7e54c8243fd211e087d3756ac87c9"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ef152b652405f78a0098fb77bddc1beab2d4731", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/8ef152b652405f78a0098fb77bddc1beab2d4731", "committedDate": "2020-05-25T15:10:14Z", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34559a937753b4c8cb4c4c8fd03f4b7955869f79", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/34559a937753b4c8cb4c4c8fd03f4b7955869f79", "committedDate": "2020-05-26T17:55:06Z", "message": "Remove nonnull annotation from getPersistedFacets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c9dd59f0096e1e1edee2799fd929dbe593b8d87", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/0c9dd59f0096e1e1edee2799fd929dbe593b8d87", "committedDate": "2020-05-26T18:52:52Z", "message": "Add System property to choose FingerprintStorage engine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dffa0e5e4bb308b7c6d50541e361cdd2d7e5fede", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/dffa0e5e4bb308b7c6d50541e361cdd2d7e5fede", "committedDate": "2020-05-26T20:30:20Z", "message": "Introduce initFacets method for abstraction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37bb27ceaadbab448bb7beab0191ae491cc51b35", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/37bb27ceaadbab448bb7beab0191ae491cc51b35", "committedDate": "2020-05-26T20:33:36Z", "message": "Remove setPersistedFacets method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19d37c9031cf055dfb933cbe6b854e66886bbeae", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/19d37c9031cf055dfb933cbe6b854e66886bbeae", "committedDate": "2020-05-26T20:42:59Z", "message": "Change scope of getPersistedFacets to default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a454a6513f1df1cb9762c7c6822e4266a709d261", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/a454a6513f1df1cb9762c7c6822e4266a709d261", "committedDate": "2020-05-26T20:52:36Z", "message": "Single line return statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac199863e8af51bf97bf07bdc60d2bb50d81c466", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/ac199863e8af51bf97bf07bdc60d2bb50d81c466", "committedDate": "2020-05-27T07:07:18Z", "message": "Add check for null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9e0e60d3a7946631780031096fd260388a0d870", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/c9e0e60d3a7946631780031096fd260388a0d870", "committedDate": "2020-05-27T07:10:57Z", "message": "Remove checkForNull annotation from initFacets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f404266f82545cd865c53036a33c926914c6c9a", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/1f404266f82545cd865c53036a33c926914c6c9a", "committedDate": "2020-05-29T12:04:36Z", "message": "change access scope from package to public for load"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b75a3b85c5d1c09b60ee077888b9ce719a1a925e", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/b75a3b85c5d1c09b60ee077888b9ce719a1a925e", "committedDate": "2020-05-29T15:13:50Z", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b73a56821050651229d8d483f9968e1b8f7fa62", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/4b73a56821050651229d8d483f9968e1b8f7fa62", "committedDate": "2020-05-30T06:25:21Z", "message": "Remove No external use from FingerprintStorageEngine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "984b8fb41b61c6139d959e489576c61d249c37e1", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/984b8fb41b61c6139d959e489576c61d249c37e1", "committedDate": "2020-05-30T09:54:09Z", "message": "fingerprintStorageEngine moved inside constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "544476c34a3ae0cc75616875aef879469abf864b", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/544476c34a3ae0cc75616875aef879469abf864b", "committedDate": "2020-05-30T09:57:59Z", "message": "Make get function static"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39b42fd80428cc902cc771f25c51208600bbc44c", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/39b42fd80428cc902cc771f25c51208600bbc44c", "committedDate": "2020-05-30T10:06:59Z", "message": "Remove ordinal value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf4b124aa40bf09df8c81f30970ef4200485a2ae", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/bf4b124aa40bf09df8c81f30970ef4200485a2ae", "committedDate": "2020-05-30T10:43:21Z", "message": "Make get method public"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/1c1f9e7741d0fd2987cee12678bc17eb75d82cb9", "committedDate": "2020-06-01T05:58:02Z", "message": "make getPersistedFacets public"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNjM2Mzkz", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-421636393", "createdAt": "2020-06-01T07:11:12Z", "commit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxMToxMlrOGdA3mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoyMzoxMlrOGdBH1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NjEyMA==", "bodyText": "+1 to what @StefanSpieker proposed. Please put all new code within the jenkins.* namespace. FileFingerprintStorage  is not actually a part of the Data Model, so I would rather suggest creating a new jenkins.fingerprints package for the implementations. No strong opinion.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433076120", "createdAt": "2020-06-01T07:11:12Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NjE3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Extension()\n          \n          \n            \n            @Extension", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433076175", "createdAt": "2020-06-01T07:11:21Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+import hudson.util.PersistedList;\n+import jenkins.model.FingerprintFacet;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Extension()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NjQwMw==", "bodyText": "It would make sense to at least restrict the API as Beta.\nhttps://www.jenkins.io/blog/2018/04/30/using-the-beta-annotation/", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433076403", "createdAt": "2020-06-01T07:12:08Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+import hudson.util.PersistedList;\n+import jenkins.model.FingerprintFacet;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Extension()\n+public class FileFingerprintStorage extends FingerprintStorage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzIwMQ==", "bodyText": "What does block you from using string.getBytes() with a 8-bit encoding? Why would it need a manual implementation?|", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433077201", "createdAt": "2020-06-01T07:14:25Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -927,6 +923,18 @@ public Fingerprint(@CheckForNull Run build, @NonNull String fileName, @NonNull b\n         return Util.toHexString(md5sum);\n     }\n \n+    /**\n+     * Converts md5 hash string to byte array.\n+     *\n+     * @since TODO\n+     */\n+    public static byte[] toByteArray(String md5sum) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzYxNQ==", "bodyText": "It still needs some kind of fingerprint identifier in the message, e.g. just its ID/hash", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433077615", "createdAt": "2020-06-01T07:15:35Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1251,28 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) return;\n \n         long start=0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n-        File file = getFingerprintFile(md5sum);\n-        save(file);\n-        SaveableListener.fireOnChange(this, getConfigFile(file));\n+        FingerprintStorage.get().save(this);\n \n         if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            logger.fine(\"Saving fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3ODIzNQ==", "bodyText": "It is not a public method though it can be accessed from the same package in plugins. Do you see examples of that?\n\nIf yes, then it makes sense to deprecate the method\nIf not, we could consider removing it entirely", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433078235", "createdAt": "2020-06-01T07:17:30Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1251,28 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) return;\n \n         long start=0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n-        File file = getFingerprintFile(md5sum);\n-        save(file);\n-        SaveableListener.fireOnChange(this, getConfigFile(file));\n+        FingerprintStorage.get().save(this);\n \n         if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            logger.fine(\"Saving fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n     }\n \n+    /**\n+     * Save the Fingerprint in the given file locally\n+     * @throws IOException Save error\n+     */\n     void save(File file) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3ODg0Mg==", "bodyText": "It does not look to be a good public API. Why would you need it here? Could it be just moved to the storage?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433078842", "createdAt": "2020-06-01T07:19:07Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1350,14 +1321,14 @@ public Api getApi() {\n     /**\n      * The file we save our configuration.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3ODg3MQ==", "bodyText": "same", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433078871", "createdAt": "2020-06-01T07:19:12Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1350,14 +1321,14 @@ public Api getApi() {\n     /**\n      * The file we save our configuration.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n+    public static @NonNull XmlFile getConfigFile(@NonNull File file) {\n         return new XmlFile(XSTREAM,file);\n     }\n \n     /**\n      * Determines the file name from md5sum.\n      */\n-    private static @NonNull File getFingerprintFile(@NonNull byte[] md5sum) {\n+    public static @NonNull File getFingerprintFile(@NonNull byte[] md5sum) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3OTE2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Performs Initialization of facets on a new loaded Fingerprint.\n          \n          \n            \n                 * Performs Initialization of facets on a newly loaded Fingerprint.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433079162", "createdAt": "2020-06-01T07:20:03Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1428,6 +1370,18 @@ private static String messageOfParseException(Throwable t) {\n         }\n     }\n \n+    /**\n+     * Performs Initialization of facets on a new loaded Fingerprint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3OTg3MQ==", "bodyText": "As discussed on Thursday, I suggest to avoid using explicit MD5 references in the API. We would rather need a variable-length key with a transformation on the storage level. E.g. we already have an issue with Docker image/container fingerprints which much longer IDs than md5", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433079871", "createdAt": "2020-06-01T07:22:06Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import jenkins.util.SystemProperties;\n+\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get(){\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"hudson.model.FileFingerprintStorage\");\n+        return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in the storage.\n+     */\n+    public abstract void save(Fingerprint fp) throws IOException;\n+\n+    /**\n+     * Returns the Fingerprint with the given MD5.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4MDI3Ng==", "bodyText": "make it final? I doubt there is a need to override them.\nAlso, for such new APIs it makes sense to explicitly document nullness via FindBugs annotations", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433080276", "createdAt": "2020-06-01T07:23:12Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1193,6 +1201,15 @@ public int size() {\n         };\n     }\n \n+    /**\n+     * Returns the persisted facets.\n+     *\n+     * @since TODO\n+     */\n+    public PersistedList<FingerprintFacet> getPersistedFacets() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2d84a0be68ceb14153f20121d373e7a2920dbfa", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/f2d84a0be68ceb14153f20121d373e7a2920dbfa", "committedDate": "2020-06-01T16:12:20Z", "message": "Remove brackets from Extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "441b848459447f254b18e5bf78a9c1b587b5e452", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/441b848459447f254b18e5bf78a9c1b587b5e452", "committedDate": "2020-06-01T16:13:33Z", "message": "Mark FileFingerprintStorage Beta"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3024f798d52f6dcd22a04e12a27c9d18b0c7b76c", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/3024f798d52f6dcd22a04e12a27c9d18b0c7b76c", "committedDate": "2020-06-01T16:54:24Z", "message": "Add fingerprint's hash to logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f3e26efce47dad9385a60129ae14944f502e65b", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/8f3e26efce47dad9385a60129ae14944f502e65b", "committedDate": "2020-06-01T17:01:48Z", "message": "Spelling fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82fe6973cb48f32384e9803f8d6312921c4909bc", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/82fe6973cb48f32384e9803f8d6312921c4909bc", "committedDate": "2020-06-01T17:08:03Z", "message": "Remove toByteArray method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38be5bf6d4b332dcdabb9ad6cc321a54d0b3dfa1", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/38be5bf6d4b332dcdabb9ad6cc321a54d0b3dfa1", "committedDate": "2020-06-01T18:34:00Z", "message": "Move getConfigFile and getFingerprintFile to FileFingerprintStorage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60df0b865126924fc039b3fe2ebb178847b9805d", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/60df0b865126924fc039b3fe2ebb178847b9805d", "committedDate": "2020-06-01T18:34:33Z", "message": "Annotate and make final: getPersistedFacets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58f77a6edafc4a8d53a646582d9d25595aa962c6", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/58f77a6edafc4a8d53a646582d9d25595aa962c6", "committedDate": "2020-06-01T21:32:43Z", "message": "getBytes -> fromHex"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dfd288ef9f79f18e93a4160a7b274dea393a5e8", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/6dfd288ef9f79f18e93a4160a7b274dea393a5e8", "committedDate": "2020-06-01T22:19:02Z", "message": "Deprecate Fingerprint.save(File file)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b05d292008f949d0dcacbfff4169511e9b709bd", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/0b05d292008f949d0dcacbfff4169511e9b709bd", "committedDate": "2020-06-01T22:20:21Z", "message": "add version since deprecated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "217310c998d75c305253f5459be903b0f2969aaa", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/217310c998d75c305253f5459be903b0f2969aaa", "committedDate": "2020-06-02T06:04:25Z", "message": "Deprecate Fingerprint.load(file) method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b2d3a0600534a665cba742b59299f63da78c24e", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/7b2d3a0600534a665cba742b59299f63da78c24e", "committedDate": "2020-06-02T06:48:33Z", "message": "Move FingerprintStorage,FileFingerprintStorage -> jenkins.fingerprints package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "beba5cb64caac0de8e5cfd215b6acdf771507260", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/beba5cb64caac0de8e5cfd215b6acdf771507260", "committedDate": "2020-06-02T06:48:58Z", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNDMxMDAz", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-422431003", "createdAt": "2020-06-02T07:58:05Z", "commit": {"oid": "beba5cb64caac0de8e5cfd215b6acdf771507260"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzo1ODowNlrOGdmU9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzo1ODowNlrOGdmU9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4OTg0NA==", "bodyText": "Please also move the test to the jenkins package.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433689844", "createdAt": "2020-06-02T07:58:06Z", "author": {"login": "StefanSpieker"}, "path": "test/src/test/java/hudson/model/FingerprintTest.java", "diffHunk": "@@ -23,6 +23,7 @@\n  */\n package hudson.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beba5cb64caac0de8e5cfd215b6acdf771507260"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f12fb8ba78ec42600ae1571185bd23aef8351c1e", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/f12fb8ba78ec42600ae1571185bd23aef8351c1e", "committedDate": "2020-06-03T11:04:58Z", "message": "Deprecate Fingerprint load(@NonNull byte[] md5sum) and move to String id"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/2a099808f55a9f82b1e4d93c9b3d33a02a336b98", "committedDate": "2020-06-03T11:09:59Z", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNDc2MDM2", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-423476036", "createdAt": "2020-06-03T11:53:14Z", "commit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMTo1MzoxNFrOGeYXdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjoxMjo1OVrOGeZApg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwOTY4Ng==", "bodyText": "If you make an API public, it needs to be documented.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434509686", "createdAt": "2020-06-03T11:53:14Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -774,7 +772,7 @@ public static RangeSet fromString(String list, boolean skipError) {\n             return rs;\n         }\n \n-        static final class ConverterImpl implements Converter {\n+        public static final class ConverterImpl implements Converter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNDQxNg==", "bodyText": "I would say that it is a Jenkins API issue. SaveableListener is equipped to work only with the Filesystem storage. It might be out of the scope for this project, so I raised https://issues.jenkins-ci.org/browse/JENKINS-62543 . It would be great to add a TODO comment to the code so that visitors\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    FingerprintStorage.get().save(this);\n          \n          \n            \n                    // Implementations are expected to invoke SaveableListener on their own if relevant\n          \n          \n            \n                    // TODO: Consider improving Saveable Listener API: https://issues.jenkins-ci.org/browse/JENKINS-62543\n          \n          \n            \n                    FingerprintStorage.get().save(this);", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434514416", "createdAt": "2020-06-03T12:01:56Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1241,30 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) return;\n \n         long start=0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n-        File file = getFingerprintFile(md5sum);\n-        save(file);\n-        SaveableListener.fireOnChange(this, getConfigFile(file));\n+        FingerprintStorage.get().save(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNDc4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SaveableListener.fireOnChange(fp, getConfigFile(file));\n          \n          \n            \n                    // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations. https://issues.jenkins-ci.org/browse/JENKINS-62543 \n          \n          \n            \n                    SaveableListener.fireOnChange(fp, getConfigFile(file));", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434514781", "createdAt": "2020-06-03T12:02:42Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNTcwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static void initFacets(Fingerprint fingerprint){\n          \n          \n            \n                private static void initFacets(@CheckForNull Fingerprint fingerprint){", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434515704", "createdAt": "2020-06-03T12:04:36Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1428,6 +1364,16 @@ private static String messageOfParseException(Throwable t) {\n         }\n     }\n \n+    /**\n+     * Performs Initialization of facets on a newly loaded Fingerprint.\n+     */\n+    private static void initFacets(Fingerprint fingerprint){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 284}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNjEzMA==", "bodyText": "This method was prvate before. No need to deprecate it, you can just remove it", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434516130", "createdAt": "2020-06-03T12:05:23Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,75 +1311,48 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))\n+            start = System.currentTimeMillis();\n+\n+        Fingerprint loaded = FingerprintStorage.get().load(id);\n+        initFacets(loaded);\n+\n+        if(logger.isLoggable(Level.FINE))\n+            logger.fine(\"Loading fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n+\n+        return loaded;\n     }\n \n     /**\n-     * Determines the file name from md5sum.\n+     * @deprecated as of TODO\n      */\n-    private static @NonNull File getFingerprintFile(@NonNull byte[] md5sum) {\n-        assert md5sum.length==16;\n-        return new File( Jenkins.get().getRootDir(),\n-            \"fingerprints/\"+ Util.toHexString(md5sum,0,1)+'/'+Util.toHexString(md5sum,1,1)+'/'+Util.toHexString(md5sum,2,md5sum.length-2)+\".xml\");\n+    @Deprecated\n+    /*package*/ static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+        return load(Util.toHexString(md5sum));\n     }\n \n     /**\n-     * Loads a {@link Fingerprint} from a file in the image.\n-     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n-     * malformed.\n+     * @deprecated as of TODO\n      */\n-    /*package*/ static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n-        return load(getFingerprintFile(md5sum));\n-    }\n+    @Deprecated\n     /*package*/ static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n-        XmlFile configFile = getConfigFile(file);\n-        if(!configFile.exists())\n-            return null;\n-\n-        long start=0;\n-        if(logger.isLoggable(Level.FINE))\n-            start = System.currentTimeMillis();\n+        Fingerprint fingerprint = FileFingerprintStorage.load(file);\n+        initFacets(fingerprint);\n \n-        try {\n-            Object loaded = configFile.read();\n-            if (!(loaded instanceof Fingerprint)) {\n-                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n-                        + (loaded != null ? loaded.getClass() : \"null\"));\n-            }\n-            Fingerprint f = (Fingerprint) loaded;\n-            if(logger.isLoggable(Level.FINE))\n-                logger.fine(\"Loading fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n-            if (f.facets==null)\n-                f.facets = new PersistedList<>(f);\n-            for (FingerprintFacet facet : f.facets)\n-                facet._setOwner(f);\n-            return f;\n-        } catch (IOException e) {\n-            if(file.exists() && file.length()==0) {\n-                // Despite the use of AtomicFile, there are reports indicating that people often see\n-                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n-                // power loss, etc.) or abnormal program termination.\n-                // generally we don't want to wipe out user data just because we can't load it,\n-                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n-                // like recovering it silently by deleting the file is not a bad idea.\n-                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n-                file.delete();\n-                return null;\n-            }\n-            String parseError = messageOfParseException(e);\n-            if (parseError != null) {\n-                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n-                file.delete();\n-                return null;\n-            }\n-            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n-            throw e;\n-        }\n+        return fingerprint;\n     }\n-    private static String messageOfParseException(Throwable t) {\n+\n+    /**\n+     * @deprecated as of TODO\n+     */\n+    @Deprecated\n+    static String messageOfParseException(Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxODMyMQ==", "bodyText": "This tag might become a source of confusion later if the fingerprint size is expanded. Anyway, we can worry about it when we get there.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            w.print(\"  <md5sum>\");\n          \n          \n            \n                            // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n          \n          \n            \n                            w.print(\"  <md5sum>\");", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434518321", "createdAt": "2020-06-03T12:09:26Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                w.print(\"  <md5sum>\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyMDIzMA==", "bodyText": "Do we need to introduce methods which iterate fingerprints without loading them?\nAFAICT they are required for effective implementations of  https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/FingerprintMap.java . Same might be needed for bulk loading which is a common use-case for Jenkins Web UI\nCan be done later from what I can dell", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434520230", "createdAt": "2020-06-03T12:12:59Z", "author": {"login": "oleg-nenashev"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8758fc5ddafc7eb4451b72d42981034f44be9d09", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/8758fc5ddafc7eb4451b72d42981034f44be9d09", "committedDate": "2020-06-03T12:44:03Z", "message": "Delete private deprecated method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99722d6d5a036c0efef7e69c2ebbea4ec91c1cbb", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/99722d6d5a036c0efef7e69c2ebbea4ec91c1cbb", "committedDate": "2020-06-03T12:45:47Z", "message": "CheckForNull added"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b8ec4b16e5be0224093e5a478f12039b6701c53", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/3b8ec4b16e5be0224093e5a478f12039b6701c53", "committedDate": "2020-06-03T12:47:52Z", "message": "Add comments about implementing Saveable Listener"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e18c45fc589c8e9794b70531400cb6774dcf4143", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/e18c45fc589c8e9794b70531400cb6774dcf4143", "committedDate": "2020-06-03T12:49:42Z", "message": "Add TODO for Saveable Listener"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a728fb12c9759478373ebe6c532278186efcfe7", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/7a728fb12c9759478373ebe6c532278186efcfe7", "committedDate": "2020-06-03T12:52:40Z", "message": "Add TODO for renaming md5 in xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28df37bf16699049bb8cf7e2be67afb07d096449", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/28df37bf16699049bb8cf7e2be67afb07d096449", "committedDate": "2020-06-03T16:12:29Z", "message": "Move serialize to FileFingerprintStorage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa3bcac940b993c00b81b2c0d1926510df407d0c", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/fa3bcac940b993c00b81b2c0d1926510df407d0c", "committedDate": "2020-06-03T16:13:20Z", "message": "Make serialize method private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c743d539363f6a727543327703232528f46c56a", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/7c743d539363f6a727543327703232528f46c56a", "committedDate": "2020-06-03T16:18:18Z", "message": "Add docstrings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f74d7a0139cc9398526158899ccf87999ee918f0", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/f74d7a0139cc9398526158899ccf87999ee918f0", "committedDate": "2020-06-03T16:19:49Z", "message": "Revert serialize to static"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d6cd230202529277c004c335183f5f59b0bdcbb", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/6d6cd230202529277c004c335183f5f59b0bdcbb", "committedDate": "2020-06-03T20:15:09Z", "message": "Introduce deletion in the API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e620e5156485916c221b3ec22da9087cc77a62e", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/9e620e5156485916c221b3ec22da9087cc77a62e", "committedDate": "2020-06-03T20:16:22Z", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7576931c2afd98729cb0de412086899079bcf2c4", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/7576931c2afd98729cb0de412086899079bcf2c4", "committedDate": "2020-06-03T20:22:55Z", "message": "Make messageOfParseException private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fc92c6950c14bc33f507fcc1d6fbe4c87f8b7dc", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/1fc92c6950c14bc33f507fcc1d6fbe4c87f8b7dc", "committedDate": "2020-06-03T20:29:58Z", "message": "Remove Redundant imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b911586bc9c729487c5ae137119d073124004857", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/b911586bc9c729487c5ae137119d073124004857", "committedDate": "2020-06-04T09:57:15Z", "message": "Add test for fingerprint deletion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3770b3739d7efa0ad25cb2a6b2f702fd51df151d", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/3770b3739d7efa0ad25cb2a6b2f702fd51df151d", "committedDate": "2020-06-04T10:01:34Z", "message": "Make methods private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/387b2491bbe8e7486c5de9834cc9c81d4e327d6a", "committedDate": "2020-06-04T10:09:55Z", "message": "Move deletion test to FingerprintTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDczODM1", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-424473835", "createdAt": "2020-06-04T13:54:56Z", "commit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1NDo1N1rOGfHKlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1NDo1N1rOGfHKlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3NjQzNw==", "bodyText": "Use curlies on split-line ifs", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435276437", "createdAt": "2020-06-04T13:54:57Z", "author": {"login": "afalko"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,84 +1311,60 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 176}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDc0MTk2", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-424474196", "createdAt": "2020-06-04T13:55:15Z", "commit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1NToxNVrOGfHLng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1NToxNVrOGfHLng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3NjcwMg==", "bodyText": "Curlies on split-line ifs please", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435276702", "createdAt": "2020-06-04T13:55:15Z", "author": {"login": "afalko"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,84 +1311,60 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))\n+            start = System.currentTimeMillis();\n+\n+        Fingerprint loaded = FingerprintStorage.get().load(id);\n+        initFacets(loaded);\n+\n+        if(logger.isLoggable(Level.FINE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 182}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDc3NTk2", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-424477596", "createdAt": "2020-06-04T13:58:37Z", "commit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1ODozN1rOGfHVZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1ODozN1rOGfHVZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3OTIwNw==", "bodyText": "Please add curlies here", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435279207", "createdAt": "2020-06-04T13:58:37Z", "author": {"login": "afalko"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,84 +1311,60 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))\n+            start = System.currentTimeMillis();\n+\n+        Fingerprint loaded = FingerprintStorage.get().load(id);\n+        initFacets(loaded);\n+\n+        if(logger.isLoggable(Level.FINE))\n+            logger.fine(\"Loading fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n+\n+        return loaded;\n     }\n \n     /**\n-     * Determines the file name from md5sum.\n+     * @deprecated as of TODO\n      */\n-    private static @NonNull File getFingerprintFile(@NonNull byte[] md5sum) {\n-        assert md5sum.length==16;\n-        return new File( Jenkins.get().getRootDir(),\n-            \"fingerprints/\"+ Util.toHexString(md5sum,0,1)+'/'+Util.toHexString(md5sum,1,1)+'/'+Util.toHexString(md5sum,2,md5sum.length-2)+\".xml\");\n+    @Deprecated\n+    /*package*/ static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+        return load(Util.toHexString(md5sum));\n     }\n \n     /**\n-     * Loads a {@link Fingerprint} from a file in the image.\n-     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n-     * malformed.\n+     * @deprecated as of TODO\n      */\n-    /*package*/ static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n-        return load(getFingerprintFile(md5sum));\n-    }\n+    @Deprecated\n     /*package*/ static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n-        XmlFile configFile = getConfigFile(file);\n-        if(!configFile.exists())\n-            return null;\n+        Fingerprint fingerprint = FileFingerprintStorage.load(file);\n+        initFacets(fingerprint);\n \n-        long start=0;\n-        if(logger.isLoggable(Level.FINE))\n-            start = System.currentTimeMillis();\n+        return fingerprint;\n+    }\n \n-        try {\n-            Object loaded = configFile.read();\n-            if (!(loaded instanceof Fingerprint)) {\n-                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n-                        + (loaded != null ? loaded.getClass() : \"null\"));\n-            }\n-            Fingerprint f = (Fingerprint) loaded;\n-            if(logger.isLoggable(Level.FINE))\n-                logger.fine(\"Loading fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n-            if (f.facets==null)\n-                f.facets = new PersistedList<>(f);\n-            for (FingerprintFacet facet : f.facets)\n-                facet._setOwner(f);\n-            return f;\n-        } catch (IOException e) {\n-            if(file.exists() && file.length()==0) {\n-                // Despite the use of AtomicFile, there are reports indicating that people often see\n-                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n-                // power loss, etc.) or abnormal program termination.\n-                // generally we don't want to wipe out user data just because we can't load it,\n-                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n-                // like recovering it silently by deleting the file is not a bad idea.\n-                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n-                file.delete();\n-                return null;\n-            }\n-            String parseError = messageOfParseException(e);\n-            if (parseError != null) {\n-                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n-                file.delete();\n-                return null;\n-            }\n-            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n-            throw e;\n-        }\n+    /**\n+     * Deletes the {@link Fingerprint} in the Storage with the given unique id.\n+     *\n+     * @since TODO\n+     */\n+    public static void delete(@NonNull String id) {\n+        FingerprintStorage.get().delete(id);\n     }\n-    private static String messageOfParseException(Throwable t) {\n-        if (t instanceof XmlPullParserException || t instanceof EOFException) {\n-            return t.getMessage();\n-        }\n-        Throwable t2 = t.getCause();\n-        if (t2 != null) {\n-            return messageOfParseException(t2);\n-        } else {\n-            return null;\n-        }\n+\n+    /**\n+     * Performs Initialization of facets on a newly loaded Fingerprint.\n+     */\n+    private static void initFacets(@CheckForNull Fingerprint fingerprint){\n+        if (fingerprint==null) return;\n+\n+        for (FingerprintFacet facet : fingerprint.facets)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 284}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDc3ODI3", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-424477827", "createdAt": "2020-06-04T13:58:50Z", "commit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1ODo1MFrOGfHWGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1ODo1MFrOGfHWGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3OTM4NA==", "bodyText": "Curlies", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435279384", "createdAt": "2020-06-04T13:58:50Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDgzMDA5", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-424483009", "createdAt": "2020-06-04T14:03:48Z", "commit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowMzo0OFrOGfHlNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowMzo0OFrOGfHlNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4MzI1NQ==", "bodyText": "Do we need to valid that delete was successful?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435283255", "createdAt": "2020-06-04T14:03:48Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) {\n+        File file = getFingerprintFile(id);\n+        file.delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 180}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDg0MTIx", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-424484121", "createdAt": "2020-06-04T14:04:51Z", "commit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNDo1MVrOGfHoig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNDo1MVrOGfHoig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NDEwNg==", "bodyText": "Can we use Paths.get to put the path together? What you are doing right now won't be portable to Windows systems.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435284106", "createdAt": "2020-06-04T14:04:51Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) {\n+        File file = getFingerprintFile(id);\n+        file.delete();\n+\n+        File inner = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2)+\"/\"+id.substring(2,4));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 182}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDg0ODM2", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-424484836", "createdAt": "2020-06-04T14:05:34Z", "commit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNTozNFrOGfHqpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNTozNFrOGfHqpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NDY0Ng==", "bodyText": "Same comment here: non-portable path concatenation", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435284646", "createdAt": "2020-06-04T14:05:34Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) {\n+        File file = getFingerprintFile(id);\n+        file.delete();\n+\n+        File inner = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2)+\"/\"+id.substring(2,4));\n+        String[] inner_files = inner.list();\n+        if (inner_files!=null && inner_files.length==0) inner.delete();\n+\n+        File outer = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2));\n+        String[] outer_files = outer.list();\n+        if (outer_files!=null && outer_files.length==0) outer.delete();\n+    }\n+\n+    /**\n+     * The file we save our configuration.\n+     */\n+    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n+        return new XmlFile(Fingerprint.getXStream(), file);\n+    }\n+\n+    /**\n+     * Determines the file name from unique id (md5sum).\n+     */\n+    private static @NonNull File getFingerprintFile(@NonNull String id) {\n+        return new File( Jenkins.get().getRootDir(),\n+                \"fingerprints/\"+id.substring(0,2)+'/'+id.substring(2,4)+'/'+id.substring(4)+\".xml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 203}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDg1MzQ4", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-424485348", "createdAt": "2020-06-04T14:06:05Z", "commit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNjowNVrOGfHsQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNjowNVrOGfHsQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NTA1OA==", "bodyText": "Improve the variable names t and t2", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435285058", "createdAt": "2020-06-04T14:06:05Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) {\n+        File file = getFingerprintFile(id);\n+        file.delete();\n+\n+        File inner = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2)+\"/\"+id.substring(2,4));\n+        String[] inner_files = inner.list();\n+        if (inner_files!=null && inner_files.length==0) inner.delete();\n+\n+        File outer = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2));\n+        String[] outer_files = outer.list();\n+        if (outer_files!=null && outer_files.length==0) outer.delete();\n+    }\n+\n+    /**\n+     * The file we save our configuration.\n+     */\n+    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n+        return new XmlFile(Fingerprint.getXStream(), file);\n+    }\n+\n+    /**\n+     * Determines the file name from unique id (md5sum).\n+     */\n+    private static @NonNull File getFingerprintFile(@NonNull String id) {\n+        return new File( Jenkins.get().getRootDir(),\n+                \"fingerprints/\"+id.substring(0,2)+'/'+id.substring(2,4)+'/'+id.substring(4)+\".xml\");\n+    }\n+\n+    private static String messageOfParseException(Throwable t) {\n+        if (t instanceof XmlPullParserException || t instanceof EOFException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 207}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDg2MTgw", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-424486180", "createdAt": "2020-06-04T14:06:52Z", "commit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNjo1M1rOGfHu4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNjo1M1rOGfHu4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NTcyOA==", "bodyText": "In the comment can you give an example input and output?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435285728", "createdAt": "2020-06-04T14:06:53Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) {\n+        File file = getFingerprintFile(id);\n+        file.delete();\n+\n+        File inner = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2)+\"/\"+id.substring(2,4));\n+        String[] inner_files = inner.list();\n+        if (inner_files!=null && inner_files.length==0) inner.delete();\n+\n+        File outer = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2));\n+        String[] outer_files = outer.list();\n+        if (outer_files!=null && outer_files.length==0) outer.delete();\n+    }\n+\n+    /**\n+     * The file we save our configuration.\n+     */\n+    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n+        return new XmlFile(Fingerprint.getXStream(), file);\n+    }\n+\n+    /**\n+     * Determines the file name from unique id (md5sum).\n+     */\n+    private static @NonNull File getFingerprintFile(@NonNull String id) {\n+        return new File( Jenkins.get().getRootDir(),\n+                \"fingerprints/\"+id.substring(0,2)+'/'+id.substring(2,4)+'/'+id.substring(4)+\".xml\");\n+    }\n+\n+    private static String messageOfParseException(Throwable t) {\n+        if (t instanceof XmlPullParserException || t instanceof EOFException) {\n+            return t.getMessage();\n+        }\n+        Throwable t2 = t.getCause();\n+        if (t2 != null) {\n+            return messageOfParseException(t2);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Used to serialize the range sets (builds) of the fingerprint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 219}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDg2ODQ2", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-424486846", "createdAt": "2020-06-04T14:07:31Z", "commit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNzozMVrOGfHxBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowNzozMVrOGfHxBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NjI3OQ==", "bodyText": "nit: space between get() and {", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435286279", "createdAt": "2020-06-04T14:07:31Z", "author": {"login": "afalko"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDg3NjMw", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-424487630", "createdAt": "2020-06-04T14:08:20Z", "commit": {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d27f46cb3a27ee538fa90042786d600ea08c50d8", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/d27f46cb3a27ee538fa90042786d600ea08c50d8", "committedDate": "2020-06-04T19:45:12Z", "message": "Improve code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d81767f7e06876cbdc3864d7ffa991ae4d4fd0f7", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/d81767f7e06876cbdc3864d7ffa991ae4d4fd0f7", "committedDate": "2020-06-04T19:51:20Z", "message": "Improve code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0e3c7a8a878a4245549001b69ac2847225012b2", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/e0e3c7a8a878a4245549001b69ac2847225012b2", "committedDate": "2020-06-04T20:19:25Z", "message": "Add deletion errors in FileFingerprintStorage#delete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccf31bb21b0fc2cb8d31d7d3fb21473a2e6f94d8", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/ccf31bb21b0fc2cb8d31d7d3fb21473a2e6f94d8", "committedDate": "2020-06-04T20:20:52Z", "message": "Add spaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51664e011730eb97a5cecdf666776be2da4cc4a9", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/51664e011730eb97a5cecdf666776be2da4cc4a9", "committedDate": "2020-06-04T20:37:11Z", "message": "Remove extra empty line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dfc22fd0537b8402664081e0f7982aa1e17bc03", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/7dfc22fd0537b8402664081e0f7982aa1e17bc03", "committedDate": "2020-06-05T05:47:52Z", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4e5c6a37256b2c2feed64d7a20a3e0db87fa572", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/d4e5c6a37256b2c2feed64d7a20a3e0db87fa572", "committedDate": "2020-06-06T08:39:39Z", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e759ffff07e7c07fd4818139b95523035c2cb71", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/2e759ffff07e7c07fd4818139b95523035c2cb71", "committedDate": "2020-06-07T11:47:08Z", "message": "Variable renaming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5e973b183481900b47ec0c2533de9efa138a270", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/b5e973b183481900b47ec0c2533de9efa138a270", "committedDate": "2020-06-07T11:51:37Z", "message": "Add documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d30cf15c0bf3626ec06de2c04fa9a50bf4071ed", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/5d30cf15c0bf3626ec06de2c04fa9a50bf4071ed", "committedDate": "2020-06-07T11:51:55Z", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MDQ2MjAw", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-426046200", "createdAt": "2020-06-08T09:11:35Z", "commit": {"oid": "5d30cf15c0bf3626ec06de2c04fa9a50bf4071ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOToxMTozNVrOGgVYaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOToxMTozNVrOGgVYaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NzkyOA==", "bodyText": "please stick to the same format:\nstart = 0;", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r436557928", "createdAt": "2020-06-08T09:11:35Z", "author": {"login": "StefanSpieker"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,83 +1313,64 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d30cf15c0bf3626ec06de2c04fa9a50bf4071ed"}, "originalPosition": 178}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/542e8614ae4c26244f7fc9b29b561b74fa415532", "committedDate": "2020-06-08T09:19:49Z", "message": "Add spacing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MzYzNDI5", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-426363429", "createdAt": "2020-06-08T15:34:50Z", "commit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDg2NTQ2", "url": "https://github.com/jenkinsci/jenkins/pull/4731#pullrequestreview-427086546", "createdAt": "2020-06-09T12:24:40Z", "commit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoyNDo0MFrOGhG1og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozNToxMFrOGhHZNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2ODIyNg==", "bodyText": "BTW please avoid gratuitous reformatting of otherwise untouched code.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437368226", "createdAt": "2020-06-09T12:24:40Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1239,34 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) {\n+            return;\n+        }\n \n-        long start=0;\n+        long start = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3MDYyMw==", "bodyText": "This whole task should be suppressed if not using FileFingerprintStorage.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437370623", "createdAt": "2020-06-09T12:27:18Z", "author": {"login": "jglick"}, "path": "core/src/main/java/hudson/model/FingerprintCleanupThread.java", "diffHunk": "@@ -130,7 +131,7 @@ private boolean check(File fingerprintFile, TaskListener listener) {\n     }\n \n     protected Fingerprint loadFingerprint(File fingerprintFile) throws IOException {\n-        return Fingerprint.load(fingerprintFile);\n+        return FileFingerprintStorage.load(fingerprintFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3MDk2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Restricted(Beta.class)\n          \n          \n            \n            @Restricted(NoExternalUse.class)", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437370967", "createdAt": "2020-06-09T12:27:40Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NDMwOA==", "bodyText": "At any rate, seems that at least FingerprintMap.isReady needs to be amended.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437374308", "createdAt": "2020-06-09T12:31:21Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyMDIzMA=="}, "originalCommit": {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NTA4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"jenkins.fingerprints.FileFingerprintStorage\");\n          \n          \n            \n                            FileFingerprintStorage.class.getName());", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437375080", "createdAt": "2020-06-09T12:32:18Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"jenkins.fingerprints.FileFingerprintStorage\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NjQ1Nw==", "bodyText": "Unsafe, this will return null rather than fall back to FileFingerprintStorage. I would suggest simply\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);\n          \n          \n            \n                    return ExtensionList.lookup(FingerprintStorage.class).get(0);\n          \n      \n    \n    \n  \n\nand let Extension.ordinal be used to control which implementation is used. If you want users to select a storage system beyond merely installing a plugin, then introduce a GlobalConfiguration.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437376457", "createdAt": "2020-06-09T12:33:53Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"jenkins.fingerprints.FileFingerprintStorage\");\n+        return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3Njc0Mw==", "bodyText": "Define the ID. @link etc.", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437376743", "createdAt": "2020-06-09T12:34:11Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"jenkins.fingerprints.FileFingerprintStorage\");\n+        return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in the storage.\n+     */\n+    public abstract void save(Fingerprint fp) throws IOException;\n+\n+    /**\n+     * Returns the Fingerprint with the given unique ID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzAyMA==", "bodyText": "Can this return null?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437377020", "createdAt": "2020-06-09T12:34:39Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"jenkins.fingerprints.FileFingerprintStorage\");\n+        return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in the storage.\n+     */\n+    public abstract void save(Fingerprint fp) throws IOException;\n+\n+    /**\n+     * Returns the Fingerprint with the given unique ID.\n+     */\n+    public abstract Fingerprint load(String id) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzMzMw==", "bodyText": "Is this a blocking operation\u2014does it really need to throw IOException or can we just assume it is queued for save?", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437377333", "createdAt": "2020-06-09T12:35:10Z", "author": {"login": "jglick"}, "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"jenkins.fingerprints.FileFingerprintStorage\");\n+        return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in the storage.\n+     */\n+    public abstract void save(Fingerprint fp) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d82300e17452ecc8c6b35e73d29abd4b0930e625", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/d82300e17452ecc8c6b35e73d29abd4b0930e625", "committedDate": "2020-06-09T18:13:41Z", "message": "Remove spacing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1de00d183e7bc6d3a4c5c58ce372ee18d7dc30e", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/d1de00d183e7bc6d3a4c5c58ce372ee18d7dc30e", "committedDate": "2020-06-09T18:33:48Z", "message": "Beta -> NoExternalUse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19c4bc1aaec858086265373fba6a8667078008b4", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/19c4bc1aaec858086265373fba6a8667078008b4", "committedDate": "2020-06-09T19:27:47Z", "message": "Refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ba36ebc6a037c4295c12565c69dd950c7dd2700", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/0ba36ebc6a037c4295c12565c69dd950c7dd2700", "committedDate": "2020-06-09T19:34:07Z", "message": "Add CheckForNull annotation in save method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17bb8a73b539bb5f93df206e15e1d6aa86313e7f", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/17bb8a73b539bb5f93df206e15e1d6aa86313e7f", "committedDate": "2020-06-10T07:14:32Z", "message": "Add documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f8266d7b05a9ee5b0f07b9cb34a2a83569189aa", "author": {"user": {"login": "stellargo", "name": null}}, "url": "https://github.com/jenkinsci/jenkins/commit/9f8266d7b05a9ee5b0f07b9cb34a2a83569189aa", "committedDate": "2020-06-10T07:22:50Z", "message": "Refactor FingerprintMap#isReady to FingerprintStorage"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1195, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}