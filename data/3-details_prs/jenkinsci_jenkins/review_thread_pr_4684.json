{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NTA2NDAz", "number": 4684, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMzozMjowOVrOD4tOeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMzozMjowOVrOD4tOeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzg3ODMyOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/hudson/model/ItemGroupMixInTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMzozMjowOVrOGPnCKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QyMzozMjowMFrOGPwZ3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyMTM1Mg==", "bodyText": "JUnit assertThrows is now available (JUnit 4.13) to make these types of assertion checks cleaner.\nLearned something new here, that the Failure class is a Jenkins exception class.", "url": "https://github.com/jenkinsci/jenkins/pull/4684#discussion_r419021352", "createdAt": "2020-05-02T23:32:09Z", "author": {"login": "MarkEWaite"}, "path": "test/src/test/java/hudson/model/ItemGroupMixInTest.java", "diffHunk": "@@ -207,4 +208,62 @@ public boolean isApplicable(Class jobType) {\n         assertThat(Items.getConfigFile(foo).asString(), containsString(\"<description/>\"));\n     }\n \n+  @Issue(\"JENKINS-61956\")\n+  @Test\n+  public void copy_checkGoodName() throws Failure, IOException {\n+    final String goodName = \"calvin-jenkins\";\n+    final String badName = \"calvin@jenkins\";\n+\n+    Project goodProject = r.jenkins.createProject(FreeStyleProject.class, goodName);\n+\n+    try {\n+      r.jenkins.copy(goodProject, badName);\n+      fail(\"@ is an unsafe character therefore copying to a project named \" + badName + \" should have failed\");\n+    } catch (Failure x) {\n+      assertEquals(x.getMessage(), Messages.Hudson_UnsafeChar(\"@\"));\n+    }\n+  }\n+\n+  @Issue(\"JENKINS-61956\")\n+  @Test\n+  public void createProject_checkGoodName() throws Failure, IOException {\n+    final String badName = \"calvin@jenkins\";\n+\n+    try {\n+      r.jenkins.createProject(MockFolder.class, badName);\n+      fail(\"@ is an unsafe character therefore creating a folder named \" + badName + \" should have failed\");\n+    } catch (Failure x) {\n+      assertEquals(x.getMessage(), Messages.Hudson_UnsafeChar(\"@\"));\n+    }\n+  }\n+\n+  @Issue(\"JENKINS-61956\")\n+  @Test\n+  public void createProjectFromXML_checkGoodName() throws Failure, IOException {\n+    final String badName = \"calvin@jenkins\";\n+\n+    final String xml = \"<?xml version='1.0' encoding='UTF-8'?>\\n\" +\n+            \"<!DOCTYPE project[\\n\" +\n+            \"  <!ENTITY foo SYSTEM \\\"file:///\\\">\\n\" +\n+            \"]>\\n\" +\n+            \"<project>\\n\" +\n+            \"  <actions/>\\n\" +\n+            \"  <description>&foo;</description>\\n\" +\n+            \"  <keepDependencies>false</keepDependencies>\\n\" +\n+            \"  <properties/>\\n\" +\n+            \"  <scm class=\\\"hudson.scm.NullSCM\\\"/>\\n\" +\n+            \"  <canRoam>true</canRoam>\\n\" +\n+            \"  <triggers/>\\n\" +\n+            \"  <builders/>\\n\" +\n+            \"  <publishers/>\\n\" +\n+            \"  <buildWrappers/>\\n\" +\n+            \"</project>\";\n+\n+    try {\n+      r.jenkins.createProjectFromXML(badName, new ByteArrayInputStream(xml.getBytes()));\n+      fail(\"@ is an unsafe character therefore creating a project named \" + badName + \" should have failed\");\n+    } catch (Failure x) {\n+      assertEquals(x.getMessage(), Messages.Hudson_UnsafeChar(\"@\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1321c9e0467d494a293f621f3d2eee9169f24d8f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMDY4Nw==", "bodyText": "Would you like to me to change it to use assertThrows?", "url": "https://github.com/jenkinsci/jenkins/pull/4684#discussion_r419030687", "createdAt": "2020-05-03T01:20:55Z", "author": {"login": "calvinpark"}, "path": "test/src/test/java/hudson/model/ItemGroupMixInTest.java", "diffHunk": "@@ -207,4 +208,62 @@ public boolean isApplicable(Class jobType) {\n         assertThat(Items.getConfigFile(foo).asString(), containsString(\"<description/>\"));\n     }\n \n+  @Issue(\"JENKINS-61956\")\n+  @Test\n+  public void copy_checkGoodName() throws Failure, IOException {\n+    final String goodName = \"calvin-jenkins\";\n+    final String badName = \"calvin@jenkins\";\n+\n+    Project goodProject = r.jenkins.createProject(FreeStyleProject.class, goodName);\n+\n+    try {\n+      r.jenkins.copy(goodProject, badName);\n+      fail(\"@ is an unsafe character therefore copying to a project named \" + badName + \" should have failed\");\n+    } catch (Failure x) {\n+      assertEquals(x.getMessage(), Messages.Hudson_UnsafeChar(\"@\"));\n+    }\n+  }\n+\n+  @Issue(\"JENKINS-61956\")\n+  @Test\n+  public void createProject_checkGoodName() throws Failure, IOException {\n+    final String badName = \"calvin@jenkins\";\n+\n+    try {\n+      r.jenkins.createProject(MockFolder.class, badName);\n+      fail(\"@ is an unsafe character therefore creating a folder named \" + badName + \" should have failed\");\n+    } catch (Failure x) {\n+      assertEquals(x.getMessage(), Messages.Hudson_UnsafeChar(\"@\"));\n+    }\n+  }\n+\n+  @Issue(\"JENKINS-61956\")\n+  @Test\n+  public void createProjectFromXML_checkGoodName() throws Failure, IOException {\n+    final String badName = \"calvin@jenkins\";\n+\n+    final String xml = \"<?xml version='1.0' encoding='UTF-8'?>\\n\" +\n+            \"<!DOCTYPE project[\\n\" +\n+            \"  <!ENTITY foo SYSTEM \\\"file:///\\\">\\n\" +\n+            \"]>\\n\" +\n+            \"<project>\\n\" +\n+            \"  <actions/>\\n\" +\n+            \"  <description>&foo;</description>\\n\" +\n+            \"  <keepDependencies>false</keepDependencies>\\n\" +\n+            \"  <properties/>\\n\" +\n+            \"  <scm class=\\\"hudson.scm.NullSCM\\\"/>\\n\" +\n+            \"  <canRoam>true</canRoam>\\n\" +\n+            \"  <triggers/>\\n\" +\n+            \"  <builders/>\\n\" +\n+            \"  <publishers/>\\n\" +\n+            \"  <buildWrappers/>\\n\" +\n+            \"</project>\";\n+\n+    try {\n+      r.jenkins.createProjectFromXML(badName, new ByteArrayInputStream(xml.getBytes()));\n+      fail(\"@ is an unsafe character therefore creating a project named \" + badName + \" should have failed\");\n+    } catch (Failure x) {\n+      assertEquals(x.getMessage(), Messages.Hudson_UnsafeChar(\"@\"));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyMTM1Mg=="}, "originalCommit": {"oid": "1321c9e0467d494a293f621f3d2eee9169f24d8f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE3NDg3Nw==", "bodyText": "Changed", "url": "https://github.com/jenkinsci/jenkins/pull/4684#discussion_r419174877", "createdAt": "2020-05-03T23:32:00Z", "author": {"login": "calvinpark"}, "path": "test/src/test/java/hudson/model/ItemGroupMixInTest.java", "diffHunk": "@@ -207,4 +208,62 @@ public boolean isApplicable(Class jobType) {\n         assertThat(Items.getConfigFile(foo).asString(), containsString(\"<description/>\"));\n     }\n \n+  @Issue(\"JENKINS-61956\")\n+  @Test\n+  public void copy_checkGoodName() throws Failure, IOException {\n+    final String goodName = \"calvin-jenkins\";\n+    final String badName = \"calvin@jenkins\";\n+\n+    Project goodProject = r.jenkins.createProject(FreeStyleProject.class, goodName);\n+\n+    try {\n+      r.jenkins.copy(goodProject, badName);\n+      fail(\"@ is an unsafe character therefore copying to a project named \" + badName + \" should have failed\");\n+    } catch (Failure x) {\n+      assertEquals(x.getMessage(), Messages.Hudson_UnsafeChar(\"@\"));\n+    }\n+  }\n+\n+  @Issue(\"JENKINS-61956\")\n+  @Test\n+  public void createProject_checkGoodName() throws Failure, IOException {\n+    final String badName = \"calvin@jenkins\";\n+\n+    try {\n+      r.jenkins.createProject(MockFolder.class, badName);\n+      fail(\"@ is an unsafe character therefore creating a folder named \" + badName + \" should have failed\");\n+    } catch (Failure x) {\n+      assertEquals(x.getMessage(), Messages.Hudson_UnsafeChar(\"@\"));\n+    }\n+  }\n+\n+  @Issue(\"JENKINS-61956\")\n+  @Test\n+  public void createProjectFromXML_checkGoodName() throws Failure, IOException {\n+    final String badName = \"calvin@jenkins\";\n+\n+    final String xml = \"<?xml version='1.0' encoding='UTF-8'?>\\n\" +\n+            \"<!DOCTYPE project[\\n\" +\n+            \"  <!ENTITY foo SYSTEM \\\"file:///\\\">\\n\" +\n+            \"]>\\n\" +\n+            \"<project>\\n\" +\n+            \"  <actions/>\\n\" +\n+            \"  <description>&foo;</description>\\n\" +\n+            \"  <keepDependencies>false</keepDependencies>\\n\" +\n+            \"  <properties/>\\n\" +\n+            \"  <scm class=\\\"hudson.scm.NullSCM\\\"/>\\n\" +\n+            \"  <canRoam>true</canRoam>\\n\" +\n+            \"  <triggers/>\\n\" +\n+            \"  <builders/>\\n\" +\n+            \"  <publishers/>\\n\" +\n+            \"  <buildWrappers/>\\n\" +\n+            \"</project>\";\n+\n+    try {\n+      r.jenkins.createProjectFromXML(badName, new ByteArrayInputStream(xml.getBytes()));\n+      fail(\"@ is an unsafe character therefore creating a project named \" + badName + \" should have failed\");\n+    } catch (Failure x) {\n+      assertEquals(x.getMessage(), Messages.Hudson_UnsafeChar(\"@\"));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyMTM1Mg=="}, "originalCommit": {"oid": "1321c9e0467d494a293f621f3d2eee9169f24d8f"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 505, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}