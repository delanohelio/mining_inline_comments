{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NjQ0ODc0", "number": 2474, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQyMzo1MjozM1rOEgpJ9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzo1Mzo1MFrOEiVMmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjY0MTgxOnYy", "diffSide": "RIGHT", "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQyMzo1MjozM1rOHNlGJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQyMzo1MjozM1rOHNlGJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAwMTMxNw==", "bodyText": "Related to my question on RESTEASY-2650, about using the same Application on two different paths, wouldn't you want to add a servlet for each path? Maybe I'm on the wrong track here.", "url": "https://github.com/resteasy/resteasy/pull/2474#discussion_r484001317", "createdAt": "2020-09-05T23:52:33Z", "author": {"login": "ronsigal"}, "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "diffHunk": "@@ -99,69 +91,82 @@ protected void handleNoApplicationClass(Set<Class<?>> providers, Set<Class<?>> r\n    protected void register(Class<?> applicationClass, Set<Class<?>> providers, Set<Class<?>> resources, ServletContext servletContext)\r\n    {\r\n       ApplicationPath path = applicationClass.getAnnotation(ApplicationPath.class);\r\n+      ServletRegistration.Dynamic reg;\r\n+      String mapping;\r\n+      String prefix;\r\n       if (path == null)\r\n       {\r\n-         // todo we don't support this yet, i'm not sure if partial deployments are supported in all servlet containers\r\n-         return;\r\n+          if (servletContext.getServletRegistration(applicationClass.getName()) == null)\r\n+          {\r\n+              // Application subclass has no @ApplicationPath and no declared mappings to use\r\n+              return;\r\n+          }\r\n+          reg = servletContext.addServlet(applicationClass.getName(), HttpServlet30Dispatcher.class);\r\n+          Collection<String> mappings = reg.getMappings();\r\n+          if (mappings == null || mappings.isEmpty())\r\n+          {\r\n+              // no declared mappings\r\n+              return;\r\n+          }\r\n+          mapping = mappings.iterator().next();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4857ca8c13d11b8e9e46d3279d72367e04d6165"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjY0MzU1OnYy", "diffSide": "RIGHT", "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQyMzo1NTowMlrOHNlG4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQyMzo1NTowMlrOHNlG4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAwMTUwNQ==", "bodyText": "Shouldn't this go after the test \"if (mappings == null || mappings.isEmpty())\"?", "url": "https://github.com/resteasy/resteasy/pull/2474#discussion_r484001505", "createdAt": "2020-09-05T23:55:02Z", "author": {"login": "ronsigal"}, "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "diffHunk": "@@ -99,69 +91,82 @@ protected void handleNoApplicationClass(Set<Class<?>> providers, Set<Class<?>> r\n    protected void register(Class<?> applicationClass, Set<Class<?>> providers, Set<Class<?>> resources, ServletContext servletContext)\r\n    {\r\n       ApplicationPath path = applicationClass.getAnnotation(ApplicationPath.class);\r\n+      ServletRegistration.Dynamic reg;\r\n+      String mapping;\r\n+      String prefix;\r\n       if (path == null)\r\n       {\r\n-         // todo we don't support this yet, i'm not sure if partial deployments are supported in all servlet containers\r\n-         return;\r\n+          if (servletContext.getServletRegistration(applicationClass.getName()) == null)\r\n+          {\r\n+              // Application subclass has no @ApplicationPath and no declared mappings to use\r\n+              return;\r\n+          }\r\n+          reg = servletContext.addServlet(applicationClass.getName(), HttpServlet30Dispatcher.class);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4857ca8c13d11b8e9e46d3279d72367e04d6165"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDMzMjUyOnYy", "diffSide": "RIGHT", "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzo0OTowMVrOHQJcXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTo0Mjo1N1rOHQkGWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5Mzk4Mg==", "bodyText": "I'm just speculating here, not objecting.\nIn the JIRA you mentioned having two different servlets for the same Application. I suppose, in general, you would have two explicit  declarations, but I gather this is legal:\n<web-app>\n   <servlet-mapping>\n      <servlet-name>org.example.MyApplication</servlet-name>\n      <url-pattern>/myresources/*</url-pattern>\n      <url-pattern>/secure/myresources/*</url-pattern>\n   </servlet-mapping>\n</web-app>\n\nThe JAX-RS spec doesn't seem to say anything about that, so I guess it would be a new feature. Is it worth doing for RESTEasy 4.x?", "url": "https://github.com/resteasy/resteasy/pull/2474#discussion_r486693982", "createdAt": "2020-09-10T23:49:01Z", "author": {"login": "ronsigal"}, "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "diffHunk": "@@ -95,51 +85,91 @@ protected void handleNoApplicationClass(Set<Class<?>> providers, Set<Class<?>> r\n \r\n    }\r\n \r\n+   private Set<ServletRegistration> getServletsForApplication(Class<?> applicationClass, ServletContext servletContext)\r\n+   {\r\n+      Set<ServletRegistration> set = new HashSet<>();\r\n+      ServletRegistration reg = servletContext.getServletRegistration(applicationClass.getName());\r\n+      if (reg != null && reg.getMappings().size() == 1)\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd833f0a7841b69c36200be7b6a0e021b5470e2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA4MDEzMQ==", "bodyText": "I've never seen that done before, but I think it is a good idea.  There might need to be more corresponding changes to account for different mapped paths though.  I can open up a new feature JIRA for allowing a single app to be mapped to multiple paths without needing multiple servlets.  Good idea!", "url": "https://github.com/resteasy/resteasy/pull/2474#discussion_r487080131", "createdAt": "2020-09-11T14:24:09Z", "author": {"login": "andymc12"}, "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "diffHunk": "@@ -95,51 +85,91 @@ protected void handleNoApplicationClass(Set<Class<?>> providers, Set<Class<?>> r\n \r\n    }\r\n \r\n+   private Set<ServletRegistration> getServletsForApplication(Class<?> applicationClass, ServletContext servletContext)\r\n+   {\r\n+      Set<ServletRegistration> set = new HashSet<>();\r\n+      ServletRegistration reg = servletContext.getServletRegistration(applicationClass.getName());\r\n+      if (reg != null && reg.getMappings().size() == 1)\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5Mzk4Mg=="}, "originalCommit": {"oid": "9fd833f0a7841b69c36200be7b6a0e021b5470e2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzMDcxNQ==", "bodyText": "The JAX-RS spec doesn't seem to say anything about that, so I guess it would be a new feature. Is it worth doing for RESTEasy 4.x?\n\nyes, we're currently planning to use RESTEasy 4.5.X in Open Liberty.", "url": "https://github.com/resteasy/resteasy/pull/2474#discussion_r487130715", "createdAt": "2020-09-11T15:42:57Z", "author": {"login": "andymc12"}, "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "diffHunk": "@@ -95,51 +85,91 @@ protected void handleNoApplicationClass(Set<Class<?>> providers, Set<Class<?>> r\n \r\n    }\r\n \r\n+   private Set<ServletRegistration> getServletsForApplication(Class<?> applicationClass, ServletContext servletContext)\r\n+   {\r\n+      Set<ServletRegistration> set = new HashSet<>();\r\n+      ServletRegistration reg = servletContext.getServletRegistration(applicationClass.getName());\r\n+      if (reg != null && reg.getMappings().size() == 1)\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5Mzk4Mg=="}, "originalCommit": {"oid": "9fd833f0a7841b69c36200be7b6a0e021b5470e2"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDMzMzk3OnYy", "diffSide": "RIGHT", "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzo0OTozMlrOHQJdHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzo0OTozMlrOHQJdHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NDE3NQ==", "bodyText": "Same comment.", "url": "https://github.com/resteasy/resteasy/pull/2474#discussion_r486694175", "createdAt": "2020-09-10T23:49:32Z", "author": {"login": "ronsigal"}, "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "diffHunk": "@@ -95,51 +85,91 @@ protected void handleNoApplicationClass(Set<Class<?>> providers, Set<Class<?>> r\n \r\n    }\r\n \r\n+   private Set<ServletRegistration> getServletsForApplication(Class<?> applicationClass, ServletContext servletContext)\r\n+   {\r\n+      Set<ServletRegistration> set = new HashSet<>();\r\n+      ServletRegistration reg = servletContext.getServletRegistration(applicationClass.getName());\r\n+      if (reg != null && reg.getMappings().size() == 1)\r\n+         set.add(reg);\r\n+\r\n+      for (ServletRegistration sr : servletContext.getServletRegistrations().values())\r\n+      {\r\n+         String appClassName = sr.getInitParameter(APPLICATION);\r\n+         if (applicationClass.getName().equals(appClassName) && sr.getMappings().size() == 1)\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd833f0a7841b69c36200be7b6a0e021b5470e2"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDM0MzI5OnYy", "diffSide": "RIGHT", "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzo1Mzo1MFrOHQJiLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDowNzoxNFrOHXcsNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NTQ2OQ==", "bodyText": "The spec says\nIf the Application subclass is annotated with @ApplicationPath, implementations are REQUIRED to use\nthe value of this annotation appended with \u201d/*\u201d to define a mapping for the added server.  Otherwise,\nthe application MUST be packaged with a web.xml that specifies a servlet mapping. \n\nShouldn't this bit go first?", "url": "https://github.com/resteasy/resteasy/pull/2474#discussion_r486695469", "createdAt": "2020-09-10T23:53:50Z", "author": {"login": "ronsigal"}, "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "diffHunk": "@@ -95,51 +85,91 @@ protected void handleNoApplicationClass(Set<Class<?>> providers, Set<Class<?>> r\n \r\n    }\r\n \r\n+   private Set<ServletRegistration> getServletsForApplication(Class<?> applicationClass, ServletContext servletContext)\r\n+   {\r\n+      Set<ServletRegistration> set = new HashSet<>();\r\n+      ServletRegistration reg = servletContext.getServletRegistration(applicationClass.getName());\r\n+      if (reg != null && reg.getMappings().size() == 1)\r\n+         set.add(reg);\r\n+\r\n+      for (ServletRegistration sr : servletContext.getServletRegistrations().values())\r\n+      {\r\n+         String appClassName = sr.getInitParameter(APPLICATION);\r\n+         if (applicationClass.getName().equals(appClassName) && sr.getMappings().size() == 1)\r\n+            set.add(sr);\r\n+      }\r\n+      return set;\r\n+   }\r\n \r\n    protected void register(Class<?> applicationClass, Set<Class<?>> providers, Set<Class<?>> resources, ServletContext servletContext)\r\n    {\r\n+      Set<ServletRegistration> servletsForApp = getServletsForApplication(applicationClass, servletContext);\r\n+      // ignore @ApplicationPath if application is already mapped in web.xml\r\n+      if (!servletsForApp.isEmpty())\r\n+      {\r\n+         for (ServletRegistration servletReg : servletsForApp)\r\n+         {\r\n+            String servletClassName = servletReg.getClassName();\r\n+            if (servletClassName == null)\r\n+               servletContext.addServlet(servletReg.getName(), HttpServlet30Dispatcher.class);\r\n+            String prefix = servletReg.getMappings().iterator().next();\r\n+            if (prefix.endsWith(\"*\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            if (prefix.length() > 1 && prefix.endsWith(\"/\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            registerResourcesAndProviders(servletReg, providers, resources, applicationClass, prefix);\r\n+         }\r\n+         return;\r\n+      }\r\n       ApplicationPath path = applicationClass.getAnnotation(ApplicationPath.class);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd833f0a7841b69c36200be7b6a0e021b5470e2"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA4MzM3MA==", "bodyText": "Agreed.  My original reading of that led me to think that @ApplicationPath would be overridden if it was specified in the web.xml, but on further reflection I think your interpretation is correct.\nIn general, I don't like that approach as it means that a deployer has no way of changing the app path without re-coding/re-building the app. But in this case, it looks like that would be required.  I'll re-code this section.\nThanks for catching this!", "url": "https://github.com/resteasy/resteasy/pull/2474#discussion_r487083370", "createdAt": "2020-09-11T14:29:21Z", "author": {"login": "andymc12"}, "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "diffHunk": "@@ -95,51 +85,91 @@ protected void handleNoApplicationClass(Set<Class<?>> providers, Set<Class<?>> r\n \r\n    }\r\n \r\n+   private Set<ServletRegistration> getServletsForApplication(Class<?> applicationClass, ServletContext servletContext)\r\n+   {\r\n+      Set<ServletRegistration> set = new HashSet<>();\r\n+      ServletRegistration reg = servletContext.getServletRegistration(applicationClass.getName());\r\n+      if (reg != null && reg.getMappings().size() == 1)\r\n+         set.add(reg);\r\n+\r\n+      for (ServletRegistration sr : servletContext.getServletRegistrations().values())\r\n+      {\r\n+         String appClassName = sr.getInitParameter(APPLICATION);\r\n+         if (applicationClass.getName().equals(appClassName) && sr.getMappings().size() == 1)\r\n+            set.add(sr);\r\n+      }\r\n+      return set;\r\n+   }\r\n \r\n    protected void register(Class<?> applicationClass, Set<Class<?>> providers, Set<Class<?>> resources, ServletContext servletContext)\r\n    {\r\n+      Set<ServletRegistration> servletsForApp = getServletsForApplication(applicationClass, servletContext);\r\n+      // ignore @ApplicationPath if application is already mapped in web.xml\r\n+      if (!servletsForApp.isEmpty())\r\n+      {\r\n+         for (ServletRegistration servletReg : servletsForApp)\r\n+         {\r\n+            String servletClassName = servletReg.getClassName();\r\n+            if (servletClassName == null)\r\n+               servletContext.addServlet(servletReg.getName(), HttpServlet30Dispatcher.class);\r\n+            String prefix = servletReg.getMappings().iterator().next();\r\n+            if (prefix.endsWith(\"*\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            if (prefix.length() > 1 && prefix.endsWith(\"/\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            registerResourcesAndProviders(servletReg, providers, resources, applicationClass, prefix);\r\n+         }\r\n+         return;\r\n+      }\r\n       ApplicationPath path = applicationClass.getAnnotation(ApplicationPath.class);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NTQ2OQ=="}, "originalCommit": {"oid": "9fd833f0a7841b69c36200be7b6a0e021b5470e2"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyOTg4MQ==", "bodyText": "I added a new commit to ensure that the @ApplicationPath path is not overridden.", "url": "https://github.com/resteasy/resteasy/pull/2474#discussion_r487129881", "createdAt": "2020-09-11T15:41:30Z", "author": {"login": "andymc12"}, "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "diffHunk": "@@ -95,51 +85,91 @@ protected void handleNoApplicationClass(Set<Class<?>> providers, Set<Class<?>> r\n \r\n    }\r\n \r\n+   private Set<ServletRegistration> getServletsForApplication(Class<?> applicationClass, ServletContext servletContext)\r\n+   {\r\n+      Set<ServletRegistration> set = new HashSet<>();\r\n+      ServletRegistration reg = servletContext.getServletRegistration(applicationClass.getName());\r\n+      if (reg != null && reg.getMappings().size() == 1)\r\n+         set.add(reg);\r\n+\r\n+      for (ServletRegistration sr : servletContext.getServletRegistrations().values())\r\n+      {\r\n+         String appClassName = sr.getInitParameter(APPLICATION);\r\n+         if (applicationClass.getName().equals(appClassName) && sr.getMappings().size() == 1)\r\n+            set.add(sr);\r\n+      }\r\n+      return set;\r\n+   }\r\n \r\n    protected void register(Class<?> applicationClass, Set<Class<?>> providers, Set<Class<?>> resources, ServletContext servletContext)\r\n    {\r\n+      Set<ServletRegistration> servletsForApp = getServletsForApplication(applicationClass, servletContext);\r\n+      // ignore @ApplicationPath if application is already mapped in web.xml\r\n+      if (!servletsForApp.isEmpty())\r\n+      {\r\n+         for (ServletRegistration servletReg : servletsForApp)\r\n+         {\r\n+            String servletClassName = servletReg.getClassName();\r\n+            if (servletClassName == null)\r\n+               servletContext.addServlet(servletReg.getName(), HttpServlet30Dispatcher.class);\r\n+            String prefix = servletReg.getMappings().iterator().next();\r\n+            if (prefix.endsWith(\"*\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            if (prefix.length() > 1 && prefix.endsWith(\"/\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            registerResourcesAndProviders(servletReg, providers, resources, applicationClass, prefix);\r\n+         }\r\n+         return;\r\n+      }\r\n       ApplicationPath path = applicationClass.getAnnotation(ApplicationPath.class);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NTQ2OQ=="}, "originalCommit": {"oid": "9fd833f0a7841b69c36200be7b6a0e021b5470e2"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1Mzg1Mg==", "bodyText": "At times like this I think of the song from Fiddler on the Roof: \"Posing questions that would cross a rabbi's eyes\". ;-)\nThe first part of register(),\n      if (!servletsForApp.isEmpty())\n      {\n\nhandles the case where a servlet is declared in web.xml for the Application. The spec says\nIf there is already a servlet that handles this application. That is, a servlet that has an initialization\nparameter named  javax.ws.rs.Application whose value is the fully qualified name of the \nApplication subclass, then no additional configuration steps are required by the JAX-RS implementation\n\nThat suggests that it's illegal to have a <servlet> element without a matching <servlet-mapping> element., although I haven't checked that. Also, it's saying, in effect, that @ApplicationPath has no role to play.\nMy interpretation is that the return statement you took out was correct. That is, if there IS a servlet, just use the servlet and matching <servlet-mapping> and return. Maybe it's worth checking for the existence of a <servlet-mapping>. It sounds like the JAX-RS spec is saying there must be a <servlet-mapping>, so it would be an error if there is none. But maybe that should get caught by the servlet container. I haven't checked that.\nOn the other hand, the spec says\nIf no servlet handles this  application, JAX-RS  implementations are REQUIRED  to dynamically\nadd a servlet whose fully qualified name must be that of the Application subclass.  If the Application\nsubclass is annotated with @ApplicationPath, implementations are REQUIRED to use the value of \nthis annotation appended with \u201d/*\u201d to define a mapping for the added server.  Otherwise, the application\nMUST be packaged with a web.xml that specifies a servlet mapping. \n\nThat suggests that it's legal to have a <servlet-mapping> element without a matching <servlet> element. So, if there's no declared servlet, and the Application doesn't have an @ApplicationPath, it sounds like we should then look for a <servlet-mapping> instead of giving up.\nWDYT?", "url": "https://github.com/resteasy/resteasy/pull/2474#discussion_r487353852", "createdAt": "2020-09-12T02:03:47Z", "author": {"login": "ronsigal"}, "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "diffHunk": "@@ -95,51 +85,91 @@ protected void handleNoApplicationClass(Set<Class<?>> providers, Set<Class<?>> r\n \r\n    }\r\n \r\n+   private Set<ServletRegistration> getServletsForApplication(Class<?> applicationClass, ServletContext servletContext)\r\n+   {\r\n+      Set<ServletRegistration> set = new HashSet<>();\r\n+      ServletRegistration reg = servletContext.getServletRegistration(applicationClass.getName());\r\n+      if (reg != null && reg.getMappings().size() == 1)\r\n+         set.add(reg);\r\n+\r\n+      for (ServletRegistration sr : servletContext.getServletRegistrations().values())\r\n+      {\r\n+         String appClassName = sr.getInitParameter(APPLICATION);\r\n+         if (applicationClass.getName().equals(appClassName) && sr.getMappings().size() == 1)\r\n+            set.add(sr);\r\n+      }\r\n+      return set;\r\n+   }\r\n \r\n    protected void register(Class<?> applicationClass, Set<Class<?>> providers, Set<Class<?>> resources, ServletContext servletContext)\r\n    {\r\n+      Set<ServletRegistration> servletsForApp = getServletsForApplication(applicationClass, servletContext);\r\n+      // ignore @ApplicationPath if application is already mapped in web.xml\r\n+      if (!servletsForApp.isEmpty())\r\n+      {\r\n+         for (ServletRegistration servletReg : servletsForApp)\r\n+         {\r\n+            String servletClassName = servletReg.getClassName();\r\n+            if (servletClassName == null)\r\n+               servletContext.addServlet(servletReg.getName(), HttpServlet30Dispatcher.class);\r\n+            String prefix = servletReg.getMappings().iterator().next();\r\n+            if (prefix.endsWith(\"*\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            if (prefix.length() > 1 && prefix.endsWith(\"/\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            registerResourcesAndProviders(servletReg, providers, resources, applicationClass, prefix);\r\n+         }\r\n+         return;\r\n+      }\r\n       ApplicationPath path = applicationClass.getAnnotation(ApplicationPath.class);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NTQ2OQ=="}, "originalCommit": {"oid": "9fd833f0a7841b69c36200be7b6a0e021b5470e2"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3MjcwNg==", "bodyText": "And \"if I were a rich man\" then I could just retire and leave this issue to somebody else!  :-)\nOk, that spec text aligns with my previous understanding.  Use @ApplicationPath path if the path is not specified in the web.xml.  If it is specified in the web.xml, then ignore the @ApplicationPath path.  So, first off, I think I need to remove my last commit.\nIt looks like it is possible for a servlet to be defined in the web.xml without a mapping ( see https://stackoverflow.com/questions/12602805/can-we-invoke-a-servlet-without-servlet-mapping-in-web-xml-entry ).  The spec says that if an Application class is handled by a servlet, then no further configuration is necessary - unfortunately, it doesn't say one way or the other about whether the servlet must be mapped or not...\nSo, in the case where the servlet is mapped, I think we're fine.  None of my code is destructive if the user has specified things like the servlet class to handle it, etc. It does add RESTEASY init parameters (for scanned classes, etc.) - I don't think this should be a problem, but if we want to absolutely sure we could check that the servlet class name is a RESTEasy servlet before setting those parameters.\nIn the case where the application is handled by a servlet in the web.xml but does not have a mapping - I tend to think this is a bug - or best case using the jaws of life to remove a staple (using a JAX-RS application just to run something at app startup when a simple servlet would do).  The code as it is now (and as it will be after I remove the latest commit) would map the application to the @ApplicationPath path.  I think that this makes sense since we have no other path to use.  Another option would be to ignore the application and issue a warning to the user indicating that they should either delete the unmapped servlet from the web.xml or they should map it in the web.xml.  I'd be fine with either approach.\nSo:\n\nShould we check the servlet class name to be sure it is a RESTEasy servlet before adding RESTEasy init parameters?\nShould we ignore an application in the unmapped-servlet case and issue a warning?  Or default to the @ApplicationPath path?\n\nand whichever way we go on 1 and 2, I will plan to revert the commit that removes the early return.\nThanks again!", "url": "https://github.com/resteasy/resteasy/pull/2474#discussion_r488172706", "createdAt": "2020-09-14T19:33:59Z", "author": {"login": "andymc12"}, "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "diffHunk": "@@ -95,51 +85,91 @@ protected void handleNoApplicationClass(Set<Class<?>> providers, Set<Class<?>> r\n \r\n    }\r\n \r\n+   private Set<ServletRegistration> getServletsForApplication(Class<?> applicationClass, ServletContext servletContext)\r\n+   {\r\n+      Set<ServletRegistration> set = new HashSet<>();\r\n+      ServletRegistration reg = servletContext.getServletRegistration(applicationClass.getName());\r\n+      if (reg != null && reg.getMappings().size() == 1)\r\n+         set.add(reg);\r\n+\r\n+      for (ServletRegistration sr : servletContext.getServletRegistrations().values())\r\n+      {\r\n+         String appClassName = sr.getInitParameter(APPLICATION);\r\n+         if (applicationClass.getName().equals(appClassName) && sr.getMappings().size() == 1)\r\n+            set.add(sr);\r\n+      }\r\n+      return set;\r\n+   }\r\n \r\n    protected void register(Class<?> applicationClass, Set<Class<?>> providers, Set<Class<?>> resources, ServletContext servletContext)\r\n    {\r\n+      Set<ServletRegistration> servletsForApp = getServletsForApplication(applicationClass, servletContext);\r\n+      // ignore @ApplicationPath if application is already mapped in web.xml\r\n+      if (!servletsForApp.isEmpty())\r\n+      {\r\n+         for (ServletRegistration servletReg : servletsForApp)\r\n+         {\r\n+            String servletClassName = servletReg.getClassName();\r\n+            if (servletClassName == null)\r\n+               servletContext.addServlet(servletReg.getName(), HttpServlet30Dispatcher.class);\r\n+            String prefix = servletReg.getMappings().iterator().next();\r\n+            if (prefix.endsWith(\"*\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            if (prefix.length() > 1 && prefix.endsWith(\"/\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            registerResourcesAndProviders(servletReg, providers, resources, applicationClass, prefix);\r\n+         }\r\n+         return;\r\n+      }\r\n       ApplicationPath path = applicationClass.getAnnotation(ApplicationPath.class);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NTQ2OQ=="}, "originalCommit": {"oid": "9fd833f0a7841b69c36200be7b6a0e021b5470e2"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMTQxOQ==", "bodyText": "re: \"I could just retire and leave this issue to somebody else\"\nLolll. Don't tempt me!!\nI will think about this some more tomorrow. :)", "url": "https://github.com/resteasy/resteasy/pull/2474#discussion_r489101419", "createdAt": "2020-09-16T01:06:04Z", "author": {"login": "ronsigal"}, "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "diffHunk": "@@ -95,51 +85,91 @@ protected void handleNoApplicationClass(Set<Class<?>> providers, Set<Class<?>> r\n \r\n    }\r\n \r\n+   private Set<ServletRegistration> getServletsForApplication(Class<?> applicationClass, ServletContext servletContext)\r\n+   {\r\n+      Set<ServletRegistration> set = new HashSet<>();\r\n+      ServletRegistration reg = servletContext.getServletRegistration(applicationClass.getName());\r\n+      if (reg != null && reg.getMappings().size() == 1)\r\n+         set.add(reg);\r\n+\r\n+      for (ServletRegistration sr : servletContext.getServletRegistrations().values())\r\n+      {\r\n+         String appClassName = sr.getInitParameter(APPLICATION);\r\n+         if (applicationClass.getName().equals(appClassName) && sr.getMappings().size() == 1)\r\n+            set.add(sr);\r\n+      }\r\n+      return set;\r\n+   }\r\n \r\n    protected void register(Class<?> applicationClass, Set<Class<?>> providers, Set<Class<?>> resources, ServletContext servletContext)\r\n    {\r\n+      Set<ServletRegistration> servletsForApp = getServletsForApplication(applicationClass, servletContext);\r\n+      // ignore @ApplicationPath if application is already mapped in web.xml\r\n+      if (!servletsForApp.isEmpty())\r\n+      {\r\n+         for (ServletRegistration servletReg : servletsForApp)\r\n+         {\r\n+            String servletClassName = servletReg.getClassName();\r\n+            if (servletClassName == null)\r\n+               servletContext.addServlet(servletReg.getName(), HttpServlet30Dispatcher.class);\r\n+            String prefix = servletReg.getMappings().iterator().next();\r\n+            if (prefix.endsWith(\"*\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            if (prefix.length() > 1 && prefix.endsWith(\"/\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            registerResourcesAndProviders(servletReg, providers, resources, applicationClass, prefix);\r\n+         }\r\n+         return;\r\n+      }\r\n       ApplicationPath path = applicationClass.getAnnotation(ApplicationPath.class);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NTQ2OQ=="}, "originalCommit": {"oid": "9fd833f0a7841b69c36200be7b6a0e021b5470e2"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMDQ0OA==", "bodyText": "This looks different every time I look at it. Holy Rashoman, Batman!!\nI'm going to try to write out all of the possibilities, for my own understanding.\nI. No Application\nWe MUST create a servlet, and there MUST be a <servlet-mapping> in the web.xml.  Technically, the Servlet spec would be ok without the <servlet-mapping>, but JAX-RS considers that an error.\nII. Application exists\nA. Matching servlet exists\nThe JAX-RS spec says, \"no additional configuration steps are required [my emphasis]\". However, the Servlet spec allows for the absence of a <servlet-mapping>, and JAX-RS doesn't FORBID using an @ApplicationPath path if it exists. In fact, it doesn't FORBID using \"/*\" if @ApplicationPath doesn't exist. So that's different from my previous understanding. Actually, I think assuming we can use \"/*\" as a default is probably a bad idea. It's probably better to consider it an error if there's no <servlet-mapping> and no @ApplicationPath.\nB. Matching servlet doesn't exist\nWe MUST create a servlet. If @ApplicationPath exists, we MUST use it. Otherwise, the web.xml MUST have a matching <servlet-mapping>. [I agree that this feels backwards, btw.]\nI think that's all consistent with your last comment, so that's good.\nAs for your questions:\n\n\nIf we find a servlet based on an Application name, then the servlet must be intended to be a JAX-RS servlet, right? So I think we're good, unless I'm missing something.\n\n\nI like the idea of using the @ApplicationPath. The developer probably meant it to be used.\n\n\nAnd finally, I think I've finally put my finger on something that's been bothering me semi-consciously. Suppose you have\n@ApplicationPath(\"/foo\")\npublic class MyApp extends Application { ... }\n\nIf web.xml is\n<web-app>\n  <servlet>\n    <servlet-name>MyApp</servlet-name>\n  </servlet>\n  <servlet-mapping>\n    <servlet-name>MyApp</servlet-name>\n    <url-pattern>/myresources/*</url-pattern>\n  </servlet-mapping>\n</web-app>\n\nThen there is a matching servlet, and /myresources overrides /foo. But suppose web.xml is\n<web-app>\n  <servlet-mapping>\n    <servlet-name>MyApp</servlet-name>\n    <url-pattern>/myresources/*</url-pattern>\n  </servlet-mapping>\n</web-app>\n\nThen, I guess, there isn't a matching servlet, and /foo overrides /myresources.\nIf I'm right, then\n\nthat's weird, and\nprobably <servlet-mapping> should override @ApplicationPath in both cases, for consistency.\n\nIf I'm right, maybe we should create an issue.", "url": "https://github.com/resteasy/resteasy/pull/2474#discussion_r489730448", "createdAt": "2020-09-16T20:19:34Z", "author": {"login": "ronsigal"}, "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "diffHunk": "@@ -95,51 +85,91 @@ protected void handleNoApplicationClass(Set<Class<?>> providers, Set<Class<?>> r\n \r\n    }\r\n \r\n+   private Set<ServletRegistration> getServletsForApplication(Class<?> applicationClass, ServletContext servletContext)\r\n+   {\r\n+      Set<ServletRegistration> set = new HashSet<>();\r\n+      ServletRegistration reg = servletContext.getServletRegistration(applicationClass.getName());\r\n+      if (reg != null && reg.getMappings().size() == 1)\r\n+         set.add(reg);\r\n+\r\n+      for (ServletRegistration sr : servletContext.getServletRegistrations().values())\r\n+      {\r\n+         String appClassName = sr.getInitParameter(APPLICATION);\r\n+         if (applicationClass.getName().equals(appClassName) && sr.getMappings().size() == 1)\r\n+            set.add(sr);\r\n+      }\r\n+      return set;\r\n+   }\r\n \r\n    protected void register(Class<?> applicationClass, Set<Class<?>> providers, Set<Class<?>> resources, ServletContext servletContext)\r\n    {\r\n+      Set<ServletRegistration> servletsForApp = getServletsForApplication(applicationClass, servletContext);\r\n+      // ignore @ApplicationPath if application is already mapped in web.xml\r\n+      if (!servletsForApp.isEmpty())\r\n+      {\r\n+         for (ServletRegistration servletReg : servletsForApp)\r\n+         {\r\n+            String servletClassName = servletReg.getClassName();\r\n+            if (servletClassName == null)\r\n+               servletContext.addServlet(servletReg.getName(), HttpServlet30Dispatcher.class);\r\n+            String prefix = servletReg.getMappings().iterator().next();\r\n+            if (prefix.endsWith(\"*\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            if (prefix.length() > 1 && prefix.endsWith(\"/\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            registerResourcesAndProviders(servletReg, providers, resources, applicationClass, prefix);\r\n+         }\r\n+         return;\r\n+      }\r\n       ApplicationPath path = applicationClass.getAnnotation(ApplicationPath.class);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NTQ2OQ=="}, "originalCommit": {"oid": "9fd833f0a7841b69c36200be7b6a0e021b5470e2"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NDQ0OA==", "bodyText": "@ronsigal everything looks right there.\nI don't think my changes handle case 1 (No Application subclass), but I don't think the previous code handled it either (looks like it was commented out...).  If we want to handle that case, I'd propose that we create an inner class like:\n@ApplicationPath(\"/\")\nclass DefaultApplication extends Application {}\n\nand then add that class if there are no other Application subclasses in the web module.\nAs for the case where there is a servlet-mapping but not a servlet, that seems like a configuration error to me, but I'm checking with members of the web container team here at IBM to verify.  If a user is allowed to specify a servlet-mapping without a servlet, then I agree that if the servlet-mapping/servlet-name matches the Application subclass, then it makes sense to map that app subclass to the associated url-pattern.  That might be something we should clarify in the spec...\nPlease let me know whether you want me to handle these cases in this PR or a separate issue - either way works for me.  Thanks!", "url": "https://github.com/resteasy/resteasy/pull/2474#discussion_r489784448", "createdAt": "2020-09-16T22:16:13Z", "author": {"login": "andymc12"}, "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "diffHunk": "@@ -95,51 +85,91 @@ protected void handleNoApplicationClass(Set<Class<?>> providers, Set<Class<?>> r\n \r\n    }\r\n \r\n+   private Set<ServletRegistration> getServletsForApplication(Class<?> applicationClass, ServletContext servletContext)\r\n+   {\r\n+      Set<ServletRegistration> set = new HashSet<>();\r\n+      ServletRegistration reg = servletContext.getServletRegistration(applicationClass.getName());\r\n+      if (reg != null && reg.getMappings().size() == 1)\r\n+         set.add(reg);\r\n+\r\n+      for (ServletRegistration sr : servletContext.getServletRegistrations().values())\r\n+      {\r\n+         String appClassName = sr.getInitParameter(APPLICATION);\r\n+         if (applicationClass.getName().equals(appClassName) && sr.getMappings().size() == 1)\r\n+            set.add(sr);\r\n+      }\r\n+      return set;\r\n+   }\r\n \r\n    protected void register(Class<?> applicationClass, Set<Class<?>> providers, Set<Class<?>> resources, ServletContext servletContext)\r\n    {\r\n+      Set<ServletRegistration> servletsForApp = getServletsForApplication(applicationClass, servletContext);\r\n+      // ignore @ApplicationPath if application is already mapped in web.xml\r\n+      if (!servletsForApp.isEmpty())\r\n+      {\r\n+         for (ServletRegistration servletReg : servletsForApp)\r\n+         {\r\n+            String servletClassName = servletReg.getClassName();\r\n+            if (servletClassName == null)\r\n+               servletContext.addServlet(servletReg.getName(), HttpServlet30Dispatcher.class);\r\n+            String prefix = servletReg.getMappings().iterator().next();\r\n+            if (prefix.endsWith(\"*\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            if (prefix.length() > 1 && prefix.endsWith(\"/\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            registerResourcesAndProviders(servletReg, providers, resources, applicationClass, prefix);\r\n+         }\r\n+         return;\r\n+      }\r\n       ApplicationPath path = applicationClass.getAnnotation(ApplicationPath.class);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NTQ2OQ=="}, "originalCommit": {"oid": "9fd833f0a7841b69c36200be7b6a0e021b5470e2"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ1NDA0NA==", "bodyText": "Good morning. ;-)\n\n\nI feel a little uncomfortable putting @ApplicationPath on DefaultApplication just because, if there were an Application, its @ApplicationPath would override the <servlet-mapping>.\n\n\nI agree that having a <servlet-mapping> without a <servlet> seems strange, but otherwise I don't know how to make sense of\n\n\nIf no servlet  handles  this  application,  JAX-RS  implementations  are  REQUIRED  to  dynamically\nadd a servlet ... .  If the Application subclass is annotated with @ApplicationPath, ... .  Otherwise, the application\nMUST be packaged with a web.xml that specifies a servlet mapping.\n\n\nGiven the title of the JIRA, \"Use servlet mapping from web.xml when not specified in @ApplicationPath\", I think these new things can go here. The only thing I would break out is the code that allows a class to be both an Application and a resource, since that's more of a new feature.\n\nThanks!", "url": "https://github.com/resteasy/resteasy/pull/2474#discussion_r490454044", "createdAt": "2020-09-17T18:01:01Z", "author": {"login": "ronsigal"}, "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "diffHunk": "@@ -95,51 +85,91 @@ protected void handleNoApplicationClass(Set<Class<?>> providers, Set<Class<?>> r\n \r\n    }\r\n \r\n+   private Set<ServletRegistration> getServletsForApplication(Class<?> applicationClass, ServletContext servletContext)\r\n+   {\r\n+      Set<ServletRegistration> set = new HashSet<>();\r\n+      ServletRegistration reg = servletContext.getServletRegistration(applicationClass.getName());\r\n+      if (reg != null && reg.getMappings().size() == 1)\r\n+         set.add(reg);\r\n+\r\n+      for (ServletRegistration sr : servletContext.getServletRegistrations().values())\r\n+      {\r\n+         String appClassName = sr.getInitParameter(APPLICATION);\r\n+         if (applicationClass.getName().equals(appClassName) && sr.getMappings().size() == 1)\r\n+            set.add(sr);\r\n+      }\r\n+      return set;\r\n+   }\r\n \r\n    protected void register(Class<?> applicationClass, Set<Class<?>> providers, Set<Class<?>> resources, ServletContext servletContext)\r\n    {\r\n+      Set<ServletRegistration> servletsForApp = getServletsForApplication(applicationClass, servletContext);\r\n+      // ignore @ApplicationPath if application is already mapped in web.xml\r\n+      if (!servletsForApp.isEmpty())\r\n+      {\r\n+         for (ServletRegistration servletReg : servletsForApp)\r\n+         {\r\n+            String servletClassName = servletReg.getClassName();\r\n+            if (servletClassName == null)\r\n+               servletContext.addServlet(servletReg.getName(), HttpServlet30Dispatcher.class);\r\n+            String prefix = servletReg.getMappings().iterator().next();\r\n+            if (prefix.endsWith(\"*\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            if (prefix.length() > 1 && prefix.endsWith(\"/\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            registerResourcesAndProviders(servletReg, providers, resources, applicationClass, prefix);\r\n+         }\r\n+         return;\r\n+      }\r\n       ApplicationPath path = applicationClass.getAnnotation(ApplicationPath.class);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NTQ2OQ=="}, "originalCommit": {"oid": "9fd833f0a7841b69c36200be7b6a0e021b5470e2"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0OTM2Ng==", "bodyText": "Sorry for the slow reply on this - I feel like I've been pulled in a hundred different directions since last week!\n\n\nI feel a little uncomfortable putting @ApplicationPath on DefaultApplication just because, if there were an Application, its @ApplicationPath would override the .\n\n\nNo problem.  The behavior of the no Application subclass case is the same in this change as it was before this change.  If we want to address that case further, I'd suggest we open a new JIRA for it.\n\n\nI agree that having a  without a  seems strange, but otherwise I don't know how to make sense of\n\n\nIf no servlet  handles  this  application,  JAX-RS  implementations  are  REQUIRED  to  dynamically\nadd a servlet ... .  If the Application subclass is annotated with @ApplicationPath, ... .  Otherwise, the application\nMUST be packaged with a web.xml that specifies a servlet mapping.\n\nI think the spec clarifies it further using an example and table.  In the example of the web.xml it shows both a servlet and a servlet-mapping element.  The table says:\n\nThat says to me that the same web.xml content is required for an Application subclass without the @ApplicationPath as for the case where there is no Application subclass - and in that case too, the servlet and servlet-mapping are present in the web.xml.\nMy take on the text in question is that if there is no @ApplicationPath annotation, then the user MUST provide a web.xml that contains a servlet and servlet-mapping.  If there is an @ApplicationPath annotation, then the user does not need to provide a web.xml at all, but they can if they want to override the path specified in the application.\n\n\nGiven the title of the JIRA, \"Use servlet mapping from web.xml when not specified in @ApplicationPath\", I think these new things can go here. The only thing I would break out is the code that allows a class to be both an Application and a resource, since that's more of a new feature.\n\n\nThat works for me.  I'll split it out today and open a separate JIRA and PR for that feature.\nThanks again for all the review on this!", "url": "https://github.com/resteasy/resteasy/pull/2474#discussion_r494349366", "createdAt": "2020-09-24T14:07:14Z", "author": {"login": "andymc12"}, "path": "resteasy-servlet-initializer/src/main/java/org/jboss/resteasy/plugins/servlet/ResteasyServletInitializer.java", "diffHunk": "@@ -95,51 +85,91 @@ protected void handleNoApplicationClass(Set<Class<?>> providers, Set<Class<?>> r\n \r\n    }\r\n \r\n+   private Set<ServletRegistration> getServletsForApplication(Class<?> applicationClass, ServletContext servletContext)\r\n+   {\r\n+      Set<ServletRegistration> set = new HashSet<>();\r\n+      ServletRegistration reg = servletContext.getServletRegistration(applicationClass.getName());\r\n+      if (reg != null && reg.getMappings().size() == 1)\r\n+         set.add(reg);\r\n+\r\n+      for (ServletRegistration sr : servletContext.getServletRegistrations().values())\r\n+      {\r\n+         String appClassName = sr.getInitParameter(APPLICATION);\r\n+         if (applicationClass.getName().equals(appClassName) && sr.getMappings().size() == 1)\r\n+            set.add(sr);\r\n+      }\r\n+      return set;\r\n+   }\r\n \r\n    protected void register(Class<?> applicationClass, Set<Class<?>> providers, Set<Class<?>> resources, ServletContext servletContext)\r\n    {\r\n+      Set<ServletRegistration> servletsForApp = getServletsForApplication(applicationClass, servletContext);\r\n+      // ignore @ApplicationPath if application is already mapped in web.xml\r\n+      if (!servletsForApp.isEmpty())\r\n+      {\r\n+         for (ServletRegistration servletReg : servletsForApp)\r\n+         {\r\n+            String servletClassName = servletReg.getClassName();\r\n+            if (servletClassName == null)\r\n+               servletContext.addServlet(servletReg.getName(), HttpServlet30Dispatcher.class);\r\n+            String prefix = servletReg.getMappings().iterator().next();\r\n+            if (prefix.endsWith(\"*\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            if (prefix.length() > 1 && prefix.endsWith(\"/\"))\r\n+               prefix = prefix.substring(0, prefix.length() - 1);\r\n+            registerResourcesAndProviders(servletReg, providers, resources, applicationClass, prefix);\r\n+         }\r\n+         return;\r\n+      }\r\n       ApplicationPath path = applicationClass.getAnnotation(ApplicationPath.class);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NTQ2OQ=="}, "originalCommit": {"oid": "9fd833f0a7841b69c36200be7b6a0e021b5470e2"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4910, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}