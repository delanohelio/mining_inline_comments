{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExOTAwMjAz", "number": 2380, "title": "[RESTEASY-2406] Incorporate MicroProfile Config into RESTEasy", "bodyText": "", "createdAt": "2020-04-30T23:50:32Z", "url": "https://github.com/resteasy/resteasy/pull/2380", "merged": true, "mergeCommit": {"oid": "a94b72ace15575d6fcadb3d578bcc8bd12ee3dc6"}, "closed": true, "closedAt": "2020-05-16T17:00:02Z", "author": {"login": "ronsigal"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdd8jCABqjMyOTY4NjUzNzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABch5su_AH2gAyNDExOTAwMjAzOjM1ZTg2NGRmY2RjMmY0NWUwNGI3MGVmOGY2ZDc0NTkxZmIzOGZlZjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "403edb1c100caf3ff91802ac63bedde7f415d733", "author": {"user": {"login": "ronsigal", "name": "Ron Sigal"}}, "url": "https://github.com/resteasy/resteasy/commit/403edb1c100caf3ff91802ac63bedde7f415d733", "committedDate": "2020-05-01T00:37:05Z", "message": "Update Async_job_service.xml\n\nBogus change to restart tests."}, "afterCommit": {"oid": "99fa4d16bc872ee14e8daf2bb1dfd146b6dfcce4", "author": {"user": {"login": "ronsigal", "name": "Ron Sigal"}}, "url": "https://github.com/resteasy/resteasy/commit/99fa4d16bc872ee14e8daf2bb1dfd146b6dfcce4", "committedDate": "2020-05-02T22:21:39Z", "message": "[RESTEASY-2406] Updated RESTEasy User Guide"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0OTMxMjgw", "url": "https://github.com/resteasy/resteasy/pull/2380#pullrequestreview-404931280", "createdAt": "2020-05-04T12:15:09Z", "commit": {"oid": "99fa4d16bc872ee14e8daf2bb1dfd146b6dfcce4"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxNTowOVrOGP9pGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxNjoxNVrOGP9rMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MTc3MQ==", "bodyText": "s/Wildfly/WildFly/", "url": "https://github.com/resteasy/resteasy/pull/2380#discussion_r419391771", "createdAt": "2020-05-04T12:15:09Z", "author": {"login": "asoldano"}, "path": "docbook/reference/en/en-US/modules/Installation_Configuration.xml", "diffHunk": "@@ -442,9 +442,299 @@ public class MyApplication extends Application\n         </para>\r\n         </section>\r\n     </section>\r\n+    \r\n+    \r\n+    <section id=\"config_mechanisms\">\r\n+        <title>Configuring RESTEasy</title>\r\n+        \r\n+        <para>\r\n+        RESTEasy has two mutually exclusive mechanisms for retrieving configuration parameters\r\n+        (see <xref linkend=\"configuration_switches\"/>).\r\n+        The classic mechanism depends predominantly on context-params and init-params. Alternatively,\r\n+        the Eclipse MicroProfile Config project\r\n+        (<ulink url=\"https://github.com/eclipse/microprofile-config\">https://github.com/eclipse/microprofile-config</ulink>)\r\n+        provides a flexible parameter retrieval mechanism that  RESTEasy will use if the necessary\r\n+        dependencies are available. See <xref linkend=\"configuring_mp_config\"/> for more about that. If \r\n+        they are not available, it will fall back to the classic mechanism.\r\n+        </para>\r\n+        \r\n+        <section id=\"microprofile_config\">\r\n+        <title>RESTEasy with MicroProfile Config</title>\r\n+        <para>\r\n+            In the presence of the Eclipse MicroProfile Config API jar and an implementation\r\n+            of the API (see <xref linkend=\"configuring_mp_config\"/>), RESTEasy will use the facilities\r\n+            of MicroProfile Config for accessing configuration properties (see <xref linkend=\"configuration_switches\"/>). \r\n+            MicroProfile Config offers to both RESTEasy users and RESTEasy developers a great deal of\r\n+            flexibility in controlling runtime configuration.\t\r\n+        </para>\r\n+        <para>\r\n+            In MicroProfile Config, a <classname>ConfigSource</classname> represents a <classname>Map&lt;String, String&gt;</classname>\r\n+            of property names to values, and a <classname>Config</classname> represents a sequence of <classname>ConfigSource</classname>s,\r\n+            ordered by priority. The priority of a <classname>ConfigSource</classname> is given by an ordinal (represented by an\r\n+            <classname>int</classname>), with a higher value indicating a higher priority. For a given property name, the\r\n+            <classname>ConfigSource</classname>s are searched in order until a value is found.\r\n+        </para>\r\n+        <para>\r\n+            MicroProfile Config mandates the presence of the following <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getProperties() (ordinal = 400)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getenv() (ordinal = 300)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> for each META-INF/microprofile-config.properties file on the ClassPath,\r\n+            separately configurable via a config_ordinal property inside each file (default ordinal = 100)</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            Note that a property which is found among the System properties and which is also in the System environment will be assigned\r\n+            the System property value because of the relative priorities of the <classname>ConfigSource</classname>s.\r\n+        </para>\r\n+        <para>\r\n+            The set of <classname>ConfigSources</classname> is extensible. For example, smallrye-config\r\n+            (<ulink url=\"https://github.com/smallrye/smallrye-config\">https://github.com/smallrye/smallrye-config</ulink>),\r\n+            the implementation of the MicroProfile Config specification currently used by RESTEasy, adds, among others,\r\n+            the following kinds of <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem><classname>PropertiesConfigSource</classname> creates a <classname>ConfigSource</classname> from a\r\n+            Java <classname>Properties</classname> object or a Map&lt;String, String&gt; object or a properties file\r\n+            (referenced by its URL) (default ordinal = 100).</listitem>\r\n+            <listitem><classname>DirConfigSource</classname> creates a <classname>ConfigSource</classname> that will look into a directory\r\n+            where each file corresponds to a property (the file name is the property key and its textual content is the property value).\r\n+            This <classname>ConfigSource</classname> can be used to read configuration from Kubernetes ConfigMap (default ordinal = 100).</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            These can be registered programmatically by using an instance of <classname>ConfigProviderResolver</classname>:\r\n+        </para>\r\n+        <programlisting>\r\n+Config config = new PropertiesConfigSource(\"file:/// ...\");\r\n+ConfigProviderResolver.instance().registerConfig(config, getClass().getClassLoader());\r\n+        </programlisting>\r\n+        <para>where <classname>ConfigProviderResolver</classname> is part of the Eclipse MicroProfile Config API.</para>\r\n+        <para>\r\n+            If the application is running in Wildfly, then Wildfly provides another set of <classname>ConfigSource</classname>s,\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99fa4d16bc872ee14e8daf2bb1dfd146b6dfcce4"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MjAyMQ==", "bodyText": "s/Wildfly/WildFly/", "url": "https://github.com/resteasy/resteasy/pull/2380#discussion_r419392021", "createdAt": "2020-05-04T12:15:41Z", "author": {"login": "asoldano"}, "path": "docbook/reference/en/en-US/modules/Installation_Configuration.xml", "diffHunk": "@@ -442,9 +442,299 @@ public class MyApplication extends Application\n         </para>\r\n         </section>\r\n     </section>\r\n+    \r\n+    \r\n+    <section id=\"config_mechanisms\">\r\n+        <title>Configuring RESTEasy</title>\r\n+        \r\n+        <para>\r\n+        RESTEasy has two mutually exclusive mechanisms for retrieving configuration parameters\r\n+        (see <xref linkend=\"configuration_switches\"/>).\r\n+        The classic mechanism depends predominantly on context-params and init-params. Alternatively,\r\n+        the Eclipse MicroProfile Config project\r\n+        (<ulink url=\"https://github.com/eclipse/microprofile-config\">https://github.com/eclipse/microprofile-config</ulink>)\r\n+        provides a flexible parameter retrieval mechanism that  RESTEasy will use if the necessary\r\n+        dependencies are available. See <xref linkend=\"configuring_mp_config\"/> for more about that. If \r\n+        they are not available, it will fall back to the classic mechanism.\r\n+        </para>\r\n+        \r\n+        <section id=\"microprofile_config\">\r\n+        <title>RESTEasy with MicroProfile Config</title>\r\n+        <para>\r\n+            In the presence of the Eclipse MicroProfile Config API jar and an implementation\r\n+            of the API (see <xref linkend=\"configuring_mp_config\"/>), RESTEasy will use the facilities\r\n+            of MicroProfile Config for accessing configuration properties (see <xref linkend=\"configuration_switches\"/>). \r\n+            MicroProfile Config offers to both RESTEasy users and RESTEasy developers a great deal of\r\n+            flexibility in controlling runtime configuration.\t\r\n+        </para>\r\n+        <para>\r\n+            In MicroProfile Config, a <classname>ConfigSource</classname> represents a <classname>Map&lt;String, String&gt;</classname>\r\n+            of property names to values, and a <classname>Config</classname> represents a sequence of <classname>ConfigSource</classname>s,\r\n+            ordered by priority. The priority of a <classname>ConfigSource</classname> is given by an ordinal (represented by an\r\n+            <classname>int</classname>), with a higher value indicating a higher priority. For a given property name, the\r\n+            <classname>ConfigSource</classname>s are searched in order until a value is found.\r\n+        </para>\r\n+        <para>\r\n+            MicroProfile Config mandates the presence of the following <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getProperties() (ordinal = 400)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getenv() (ordinal = 300)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> for each META-INF/microprofile-config.properties file on the ClassPath,\r\n+            separately configurable via a config_ordinal property inside each file (default ordinal = 100)</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            Note that a property which is found among the System properties and which is also in the System environment will be assigned\r\n+            the System property value because of the relative priorities of the <classname>ConfigSource</classname>s.\r\n+        </para>\r\n+        <para>\r\n+            The set of <classname>ConfigSources</classname> is extensible. For example, smallrye-config\r\n+            (<ulink url=\"https://github.com/smallrye/smallrye-config\">https://github.com/smallrye/smallrye-config</ulink>),\r\n+            the implementation of the MicroProfile Config specification currently used by RESTEasy, adds, among others,\r\n+            the following kinds of <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem><classname>PropertiesConfigSource</classname> creates a <classname>ConfigSource</classname> from a\r\n+            Java <classname>Properties</classname> object or a Map&lt;String, String&gt; object or a properties file\r\n+            (referenced by its URL) (default ordinal = 100).</listitem>\r\n+            <listitem><classname>DirConfigSource</classname> creates a <classname>ConfigSource</classname> that will look into a directory\r\n+            where each file corresponds to a property (the file name is the property key and its textual content is the property value).\r\n+            This <classname>ConfigSource</classname> can be used to read configuration from Kubernetes ConfigMap (default ordinal = 100).</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            These can be registered programmatically by using an instance of <classname>ConfigProviderResolver</classname>:\r\n+        </para>\r\n+        <programlisting>\r\n+Config config = new PropertiesConfigSource(\"file:/// ...\");\r\n+ConfigProviderResolver.instance().registerConfig(config, getClass().getClassLoader());\r\n+        </programlisting>\r\n+        <para>where <classname>ConfigProviderResolver</classname> is part of the Eclipse MicroProfile Config API.</para>\r\n+        <para>\r\n+            If the application is running in Wildfly, then Wildfly provides another set of <classname>ConfigSource</classname>s,\r\n+            as described in the \"MicroProfile Config Subsystem Configuration\" section of the WildFly Admin guide\r\n+            (<ulink url=\"https://docs.wildfly.org/19/Admin_Guide.html#MicroProfile_Config_SmallRye\">\r\n+            https://docs.wildfly.org/19/Admin_Guide.html#MicroProfile_Config_SmallRye</ulink>).\r\n+        </para>\r\n+        <para>\r\n+            Finally, RESTEasy automatically provides three more <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <itemizedlist>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.ServletConfigSource</classname> represents\r\n+            a servlet's &lt;init-param&gt;s from web.xml (ordinal = 60).</listitem>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.FilterConfigSource</classname> represents\r\n+            a filter's &lt;init-param&gt;s from web.xml (ordinal = 50). (See <xref linkend=\"filter\"/> for more information.)\r\n+            </listitem>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.ServletContextConfigSource</classname> represents\r\n+            &lt;context-param&gt;s from web.xml (ordinal = 40).</listitem>\r\n+        </itemizedlist>\r\n+        \r\n+        <section>\r\n+            <title>Using MicroProfileConfig</title>\r\n+            \r\n+            <para>\r\n+                The MicroProfile Config API is very simple. A <classname>Config</classname> may be obtained either\r\n+                programatically:\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+Config config = ConfigProvider.getConfig();\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                or, in the presence of CDI, by way of injection:\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+@Inject Config config;\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                Once a <classname>Config</classname> has been obtained, a property can be queried. For example,\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+String s = config.getValue(\"prop_name\", String.class);\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                or\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+String s = config.getOptionalValue(\"prop_name\", String.class).orElse(\"d'oh\");\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                Now, consider a situation in which \"prop_name\" has been set by <code>System.setProperty(\"prop_name\", \"system\")</code>\r\n+                and also by\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+   &lt;context-param&gt;\r\n+      &lt;param-name&gt;prop_name&lt;/param-name&gt;\r\n+      &lt;param-value&gt;context&lt;/param-value&gt;\r\n+   &lt;/context-param&gt;\r\n+            </programlisting>\r\n+               \r\n+            <para>\r\n+                Then, since the system parameter <classname>ConfigSource</classname> has precedence over (has a higher ordinal than)\r\n+                <classname>ServletContextConfigSource</classname>, <code>config.getValue(\"prop_name\", String.class)</code> will\r\n+                return \"system\" rather than \"context\".\r\n+            </para>\r\n+\r\n+        </section>\r\n+        \r\n+        <section id=\"configuring_mp_config\">\r\n+            <title>Configuring MicroProfile Config</title>\r\n+            \r\n+            <para>\r\n+                If an application is running inside Wildfly, then the MicroProfile Config dependencies are available\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99fa4d16bc872ee14e8daf2bb1dfd146b6dfcce4"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MjIyMA==", "bodyText": "s/Wildfly/WildFly/", "url": "https://github.com/resteasy/resteasy/pull/2380#discussion_r419392220", "createdAt": "2020-05-04T12:16:02Z", "author": {"login": "asoldano"}, "path": "docbook/reference/en/en-US/modules/Installation_Configuration.xml", "diffHunk": "@@ -442,9 +442,299 @@ public class MyApplication extends Application\n         </para>\r\n         </section>\r\n     </section>\r\n+    \r\n+    \r\n+    <section id=\"config_mechanisms\">\r\n+        <title>Configuring RESTEasy</title>\r\n+        \r\n+        <para>\r\n+        RESTEasy has two mutually exclusive mechanisms for retrieving configuration parameters\r\n+        (see <xref linkend=\"configuration_switches\"/>).\r\n+        The classic mechanism depends predominantly on context-params and init-params. Alternatively,\r\n+        the Eclipse MicroProfile Config project\r\n+        (<ulink url=\"https://github.com/eclipse/microprofile-config\">https://github.com/eclipse/microprofile-config</ulink>)\r\n+        provides a flexible parameter retrieval mechanism that  RESTEasy will use if the necessary\r\n+        dependencies are available. See <xref linkend=\"configuring_mp_config\"/> for more about that. If \r\n+        they are not available, it will fall back to the classic mechanism.\r\n+        </para>\r\n+        \r\n+        <section id=\"microprofile_config\">\r\n+        <title>RESTEasy with MicroProfile Config</title>\r\n+        <para>\r\n+            In the presence of the Eclipse MicroProfile Config API jar and an implementation\r\n+            of the API (see <xref linkend=\"configuring_mp_config\"/>), RESTEasy will use the facilities\r\n+            of MicroProfile Config for accessing configuration properties (see <xref linkend=\"configuration_switches\"/>). \r\n+            MicroProfile Config offers to both RESTEasy users and RESTEasy developers a great deal of\r\n+            flexibility in controlling runtime configuration.\t\r\n+        </para>\r\n+        <para>\r\n+            In MicroProfile Config, a <classname>ConfigSource</classname> represents a <classname>Map&lt;String, String&gt;</classname>\r\n+            of property names to values, and a <classname>Config</classname> represents a sequence of <classname>ConfigSource</classname>s,\r\n+            ordered by priority. The priority of a <classname>ConfigSource</classname> is given by an ordinal (represented by an\r\n+            <classname>int</classname>), with a higher value indicating a higher priority. For a given property name, the\r\n+            <classname>ConfigSource</classname>s are searched in order until a value is found.\r\n+        </para>\r\n+        <para>\r\n+            MicroProfile Config mandates the presence of the following <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getProperties() (ordinal = 400)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getenv() (ordinal = 300)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> for each META-INF/microprofile-config.properties file on the ClassPath,\r\n+            separately configurable via a config_ordinal property inside each file (default ordinal = 100)</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            Note that a property which is found among the System properties and which is also in the System environment will be assigned\r\n+            the System property value because of the relative priorities of the <classname>ConfigSource</classname>s.\r\n+        </para>\r\n+        <para>\r\n+            The set of <classname>ConfigSources</classname> is extensible. For example, smallrye-config\r\n+            (<ulink url=\"https://github.com/smallrye/smallrye-config\">https://github.com/smallrye/smallrye-config</ulink>),\r\n+            the implementation of the MicroProfile Config specification currently used by RESTEasy, adds, among others,\r\n+            the following kinds of <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem><classname>PropertiesConfigSource</classname> creates a <classname>ConfigSource</classname> from a\r\n+            Java <classname>Properties</classname> object or a Map&lt;String, String&gt; object or a properties file\r\n+            (referenced by its URL) (default ordinal = 100).</listitem>\r\n+            <listitem><classname>DirConfigSource</classname> creates a <classname>ConfigSource</classname> that will look into a directory\r\n+            where each file corresponds to a property (the file name is the property key and its textual content is the property value).\r\n+            This <classname>ConfigSource</classname> can be used to read configuration from Kubernetes ConfigMap (default ordinal = 100).</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            These can be registered programmatically by using an instance of <classname>ConfigProviderResolver</classname>:\r\n+        </para>\r\n+        <programlisting>\r\n+Config config = new PropertiesConfigSource(\"file:/// ...\");\r\n+ConfigProviderResolver.instance().registerConfig(config, getClass().getClassLoader());\r\n+        </programlisting>\r\n+        <para>where <classname>ConfigProviderResolver</classname> is part of the Eclipse MicroProfile Config API.</para>\r\n+        <para>\r\n+            If the application is running in Wildfly, then Wildfly provides another set of <classname>ConfigSource</classname>s,\r\n+            as described in the \"MicroProfile Config Subsystem Configuration\" section of the WildFly Admin guide\r\n+            (<ulink url=\"https://docs.wildfly.org/19/Admin_Guide.html#MicroProfile_Config_SmallRye\">\r\n+            https://docs.wildfly.org/19/Admin_Guide.html#MicroProfile_Config_SmallRye</ulink>).\r\n+        </para>\r\n+        <para>\r\n+            Finally, RESTEasy automatically provides three more <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <itemizedlist>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.ServletConfigSource</classname> represents\r\n+            a servlet's &lt;init-param&gt;s from web.xml (ordinal = 60).</listitem>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.FilterConfigSource</classname> represents\r\n+            a filter's &lt;init-param&gt;s from web.xml (ordinal = 50). (See <xref linkend=\"filter\"/> for more information.)\r\n+            </listitem>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.ServletContextConfigSource</classname> represents\r\n+            &lt;context-param&gt;s from web.xml (ordinal = 40).</listitem>\r\n+        </itemizedlist>\r\n+        \r\n+        <section>\r\n+            <title>Using MicroProfileConfig</title>\r\n+            \r\n+            <para>\r\n+                The MicroProfile Config API is very simple. A <classname>Config</classname> may be obtained either\r\n+                programatically:\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+Config config = ConfigProvider.getConfig();\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                or, in the presence of CDI, by way of injection:\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+@Inject Config config;\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                Once a <classname>Config</classname> has been obtained, a property can be queried. For example,\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+String s = config.getValue(\"prop_name\", String.class);\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                or\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+String s = config.getOptionalValue(\"prop_name\", String.class).orElse(\"d'oh\");\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                Now, consider a situation in which \"prop_name\" has been set by <code>System.setProperty(\"prop_name\", \"system\")</code>\r\n+                and also by\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+   &lt;context-param&gt;\r\n+      &lt;param-name&gt;prop_name&lt;/param-name&gt;\r\n+      &lt;param-value&gt;context&lt;/param-value&gt;\r\n+   &lt;/context-param&gt;\r\n+            </programlisting>\r\n+               \r\n+            <para>\r\n+                Then, since the system parameter <classname>ConfigSource</classname> has precedence over (has a higher ordinal than)\r\n+                <classname>ServletContextConfigSource</classname>, <code>config.getValue(\"prop_name\", String.class)</code> will\r\n+                return \"system\" rather than \"context\".\r\n+            </para>\r\n+\r\n+        </section>\r\n+        \r\n+        <section id=\"configuring_mp_config\">\r\n+            <title>Configuring MicroProfile Config</title>\r\n+            \r\n+            <para>\r\n+                If an application is running inside Wildfly, then the MicroProfile Config dependencies are available\r\n+                in the MicroProfile Extension pack. See the Wildfly Admin Guide for more infomation:\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99fa4d16bc872ee14e8daf2bb1dfd146b6dfcce4"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MjMwNA==", "bodyText": "s/Wildfly/WildFly/", "url": "https://github.com/resteasy/resteasy/pull/2380#discussion_r419392304", "createdAt": "2020-05-04T12:16:15Z", "author": {"login": "asoldano"}, "path": "docbook/reference/en/en-US/modules/Installation_Configuration.xml", "diffHunk": "@@ -442,9 +442,299 @@ public class MyApplication extends Application\n         </para>\r\n         </section>\r\n     </section>\r\n+    \r\n+    \r\n+    <section id=\"config_mechanisms\">\r\n+        <title>Configuring RESTEasy</title>\r\n+        \r\n+        <para>\r\n+        RESTEasy has two mutually exclusive mechanisms for retrieving configuration parameters\r\n+        (see <xref linkend=\"configuration_switches\"/>).\r\n+        The classic mechanism depends predominantly on context-params and init-params. Alternatively,\r\n+        the Eclipse MicroProfile Config project\r\n+        (<ulink url=\"https://github.com/eclipse/microprofile-config\">https://github.com/eclipse/microprofile-config</ulink>)\r\n+        provides a flexible parameter retrieval mechanism that  RESTEasy will use if the necessary\r\n+        dependencies are available. See <xref linkend=\"configuring_mp_config\"/> for more about that. If \r\n+        they are not available, it will fall back to the classic mechanism.\r\n+        </para>\r\n+        \r\n+        <section id=\"microprofile_config\">\r\n+        <title>RESTEasy with MicroProfile Config</title>\r\n+        <para>\r\n+            In the presence of the Eclipse MicroProfile Config API jar and an implementation\r\n+            of the API (see <xref linkend=\"configuring_mp_config\"/>), RESTEasy will use the facilities\r\n+            of MicroProfile Config for accessing configuration properties (see <xref linkend=\"configuration_switches\"/>). \r\n+            MicroProfile Config offers to both RESTEasy users and RESTEasy developers a great deal of\r\n+            flexibility in controlling runtime configuration.\t\r\n+        </para>\r\n+        <para>\r\n+            In MicroProfile Config, a <classname>ConfigSource</classname> represents a <classname>Map&lt;String, String&gt;</classname>\r\n+            of property names to values, and a <classname>Config</classname> represents a sequence of <classname>ConfigSource</classname>s,\r\n+            ordered by priority. The priority of a <classname>ConfigSource</classname> is given by an ordinal (represented by an\r\n+            <classname>int</classname>), with a higher value indicating a higher priority. For a given property name, the\r\n+            <classname>ConfigSource</classname>s are searched in order until a value is found.\r\n+        </para>\r\n+        <para>\r\n+            MicroProfile Config mandates the presence of the following <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getProperties() (ordinal = 400)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getenv() (ordinal = 300)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> for each META-INF/microprofile-config.properties file on the ClassPath,\r\n+            separately configurable via a config_ordinal property inside each file (default ordinal = 100)</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            Note that a property which is found among the System properties and which is also in the System environment will be assigned\r\n+            the System property value because of the relative priorities of the <classname>ConfigSource</classname>s.\r\n+        </para>\r\n+        <para>\r\n+            The set of <classname>ConfigSources</classname> is extensible. For example, smallrye-config\r\n+            (<ulink url=\"https://github.com/smallrye/smallrye-config\">https://github.com/smallrye/smallrye-config</ulink>),\r\n+            the implementation of the MicroProfile Config specification currently used by RESTEasy, adds, among others,\r\n+            the following kinds of <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem><classname>PropertiesConfigSource</classname> creates a <classname>ConfigSource</classname> from a\r\n+            Java <classname>Properties</classname> object or a Map&lt;String, String&gt; object or a properties file\r\n+            (referenced by its URL) (default ordinal = 100).</listitem>\r\n+            <listitem><classname>DirConfigSource</classname> creates a <classname>ConfigSource</classname> that will look into a directory\r\n+            where each file corresponds to a property (the file name is the property key and its textual content is the property value).\r\n+            This <classname>ConfigSource</classname> can be used to read configuration from Kubernetes ConfigMap (default ordinal = 100).</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            These can be registered programmatically by using an instance of <classname>ConfigProviderResolver</classname>:\r\n+        </para>\r\n+        <programlisting>\r\n+Config config = new PropertiesConfigSource(\"file:/// ...\");\r\n+ConfigProviderResolver.instance().registerConfig(config, getClass().getClassLoader());\r\n+        </programlisting>\r\n+        <para>where <classname>ConfigProviderResolver</classname> is part of the Eclipse MicroProfile Config API.</para>\r\n+        <para>\r\n+            If the application is running in Wildfly, then Wildfly provides another set of <classname>ConfigSource</classname>s,\r\n+            as described in the \"MicroProfile Config Subsystem Configuration\" section of the WildFly Admin guide\r\n+            (<ulink url=\"https://docs.wildfly.org/19/Admin_Guide.html#MicroProfile_Config_SmallRye\">\r\n+            https://docs.wildfly.org/19/Admin_Guide.html#MicroProfile_Config_SmallRye</ulink>).\r\n+        </para>\r\n+        <para>\r\n+            Finally, RESTEasy automatically provides three more <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <itemizedlist>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.ServletConfigSource</classname> represents\r\n+            a servlet's &lt;init-param&gt;s from web.xml (ordinal = 60).</listitem>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.FilterConfigSource</classname> represents\r\n+            a filter's &lt;init-param&gt;s from web.xml (ordinal = 50). (See <xref linkend=\"filter\"/> for more information.)\r\n+            </listitem>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.ServletContextConfigSource</classname> represents\r\n+            &lt;context-param&gt;s from web.xml (ordinal = 40).</listitem>\r\n+        </itemizedlist>\r\n+        \r\n+        <section>\r\n+            <title>Using MicroProfileConfig</title>\r\n+            \r\n+            <para>\r\n+                The MicroProfile Config API is very simple. A <classname>Config</classname> may be obtained either\r\n+                programatically:\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+Config config = ConfigProvider.getConfig();\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                or, in the presence of CDI, by way of injection:\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+@Inject Config config;\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                Once a <classname>Config</classname> has been obtained, a property can be queried. For example,\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+String s = config.getValue(\"prop_name\", String.class);\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                or\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+String s = config.getOptionalValue(\"prop_name\", String.class).orElse(\"d'oh\");\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                Now, consider a situation in which \"prop_name\" has been set by <code>System.setProperty(\"prop_name\", \"system\")</code>\r\n+                and also by\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+   &lt;context-param&gt;\r\n+      &lt;param-name&gt;prop_name&lt;/param-name&gt;\r\n+      &lt;param-value&gt;context&lt;/param-value&gt;\r\n+   &lt;/context-param&gt;\r\n+            </programlisting>\r\n+               \r\n+            <para>\r\n+                Then, since the system parameter <classname>ConfigSource</classname> has precedence over (has a higher ordinal than)\r\n+                <classname>ServletContextConfigSource</classname>, <code>config.getValue(\"prop_name\", String.class)</code> will\r\n+                return \"system\" rather than \"context\".\r\n+            </para>\r\n+\r\n+        </section>\r\n+        \r\n+        <section id=\"configuring_mp_config\">\r\n+            <title>Configuring MicroProfile Config</title>\r\n+            \r\n+            <para>\r\n+                If an application is running inside Wildfly, then the MicroProfile Config dependencies are available\r\n+                in the MicroProfile Extension pack. See the Wildfly Admin Guide for more infomation:\r\n+                <ulink url=\"https://docs.wildfly.org/19/Admin_Guide.html\">https://docs.wildfly.org/19/Admin_Guide.html</ulink>.\r\n+                Outside of Wildfly, an application will need the\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99fa4d16bc872ee14e8daf2bb1dfd146b6dfcce4"}, "originalPosition": 241}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NjYzMTAx", "url": "https://github.com/resteasy/resteasy/pull/2380#pullrequestreview-405663101", "createdAt": "2020-05-05T10:25:35Z", "commit": {"oid": "d8504a9d604bce91c05096dcdd93fdb0cffbe8fd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3dcb4a527b124223da70b480ef775822ddc7b377", "author": {"user": {"login": "ronsigal", "name": "Ron Sigal"}}, "url": "https://github.com/resteasy/resteasy/commit/3dcb4a527b124223da70b480ef775822ddc7b377", "committedDate": "2020-05-07T00:57:32Z", "message": "Update RestClientProxyRedeployTest.java\n\nAdd MicroProfileDependent to deployment."}, "afterCommit": {"oid": "56f15b350345f04db030def3e0ce74e1915d8cc9", "author": {"user": {"login": "ronsigal", "name": "Ron Sigal"}}, "url": "https://github.com/resteasy/resteasy/commit/56f15b350345f04db030def3e0ce74e1915d8cc9", "committedDate": "2020-05-07T23:54:55Z", "message": "[RESTEASY-2406] 1. Added profiles to testsuite/pom.xml to allow disabling MicroProfile tests\n\n2. Minor changes to User Guide\n3. Fixed one test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85f48041e82f52ae2d9b4cb14add6e3ec9066edc", "author": {"user": {"login": "ronsigal", "name": "Ron Sigal"}}, "url": "https://github.com/resteasy/resteasy/commit/85f48041e82f52ae2d9b4cb14add6e3ec9066edc", "committedDate": "2020-05-08T00:02:11Z", "message": "Merge branch '3.12' into 3.12_2406"}, "afterCommit": {"oid": "fcb9c2f7d3f8973d24216d7d671d95b25c409bdc", "author": {"user": {"login": "ronsigal", "name": "Ron Sigal"}}, "url": "https://github.com/resteasy/resteasy/commit/fcb9c2f7d3f8973d24216d7d671d95b25c409bdc", "committedDate": "2020-05-11T15:47:04Z", "message": "[RESTEASY-2406] Removed forward.compatibility profile from resteasy-testsuite/pom.xml"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bbfc8f88fdea613e75590fdf1cada0addf0e0eb2", "author": {"user": {"login": "ronsigal", "name": "Ron Sigal"}}, "url": "https://github.com/resteasy/resteasy/commit/bbfc8f88fdea613e75590fdf1cada0addf0e0eb2", "committedDate": "2020-05-11T16:13:08Z", "message": "Update RestClientProxyTest.java"}, "afterCommit": {"oid": "aab1fb1a1acda4b2abfd98b7c917573962c34b9f", "author": {"user": {"login": "ronsigal", "name": "Ron Sigal"}}, "url": "https://github.com/resteasy/resteasy/commit/aab1fb1a1acda4b2abfd98b7c917573962c34b9f", "committedDate": "2020-05-11T18:49:29Z", "message": "[RESTEASY-2406] Updated RestClientProxyTest to match official version"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f75e29e46f64b2012a2b7e1d0953b5154e8f6dcc", "author": {"user": {"login": "ronsigal", "name": "Ron Sigal"}}, "url": "https://github.com/resteasy/resteasy/commit/f75e29e46f64b2012a2b7e1d0953b5154e8f6dcc", "committedDate": "2020-05-11T18:55:17Z", "message": "Merge branch '3.12' into 3.12_2406"}, "afterCommit": {"oid": "ee3083161b2a9f889784131e885281fab7fdb45c", "author": {"user": {"login": "ronsigal", "name": "Ron Sigal"}}, "url": "https://github.com/resteasy/resteasy/commit/ee3083161b2a9f889784131e885281fab7fdb45c", "committedDate": "2020-05-13T01:40:26Z", "message": "[RESTEASY-2406] Made ConfigSources Serializable, as per MP Config TCK."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3dc876058b514612b79b85a9567c7fe2b69edc6b", "author": {"user": {"login": "ronsigal", "name": "Ron Sigal"}}, "url": "https://github.com/resteasy/resteasy/commit/3dc876058b514612b79b85a9567c7fe2b69edc6b", "committedDate": "2020-05-13T01:44:09Z", "message": "Merge branch '3.12' into 3.12_2406"}, "afterCommit": {"oid": "a6d4bcf9cbf3bf89b37faedcd2e77fe9787db773", "author": {"user": {"login": "ronsigal", "name": "Ron Sigal"}}, "url": "https://github.com/resteasy/resteasy/commit/a6d4bcf9cbf3bf89b37faedcd2e77fe9787db773", "committedDate": "2020-05-13T14:55:41Z", "message": "[RESTEASY-2406] Removed \"forward.compatible\" from default testsuite profile."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e158cb111720cb1e33e60149e0dfe8ac78a8047c", "author": {"user": {"login": "asoldano", "name": "Alessio Soldano"}}, "url": "https://github.com/resteasy/resteasy/commit/e158cb111720cb1e33e60149e0dfe8ac78a8047c", "committedDate": "2020-05-16T16:56:37Z", "message": "[RESTEASY-2541] Fix RestClientListeners\n\n[RESTEASY-2406] Port use of Microprofile Config to 3.x\n\n[RESTEASY-2406] Additional User Guide changes\n\n[RESTEASY-2406] Adjusted version numbers in test javadoc.\n\n[RESTEASY-2406] Incorporate MicroProfile Config into RESTEasy\n\n[RESTEASY-2406] Updated RESTEasy User Guide\n\n[RESTEASY-2406] 1. Updated links to configuration section. 2. Wildfly->WildFly\n\n[RESTEASY-2406] 1. Remove reference to Extension Packs from User Guide.\n\n2. Fix bug with ConfigSource names.\n3. MicroProfile exclusion profile (WIP).\n\n[RESTEASY-2406] 1. Added profiles to testsuite/pom.xml to allow disabling MicroProfile tests\n\n2. Minor changes to User Guide\n3. Fixed one test\n\n[RESTEASY-2406] Removed forward.compatibility profile from resteasy-testsuite/pom.xml\n\n[RESTEASY-2406] Updated RestClientProxyTest to match official version\n\n[RESTEASY-2406] Made ConfigSources Serializable, as per MP Config TCK.\n\n[RESTEASY-2406] Removed \"forward.compatible\" from default testsuite profile."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d37b0d265977d2183a97e43625f0ad352ac959b4", "author": {"user": {"login": "ronsigal", "name": "Ron Sigal"}}, "url": "https://github.com/resteasy/resteasy/commit/d37b0d265977d2183a97e43625f0ad352ac959b4", "committedDate": "2020-05-13T14:58:26Z", "message": "Merge branch '3.12' into 3.12_2406"}, "afterCommit": {"oid": "e158cb111720cb1e33e60149e0dfe8ac78a8047c", "author": {"user": {"login": "asoldano", "name": "Alessio Soldano"}}, "url": "https://github.com/resteasy/resteasy/commit/e158cb111720cb1e33e60149e0dfe8ac78a8047c", "committedDate": "2020-05-16T16:56:37Z", "message": "[RESTEASY-2541] Fix RestClientListeners\n\n[RESTEASY-2406] Port use of Microprofile Config to 3.x\n\n[RESTEASY-2406] Additional User Guide changes\n\n[RESTEASY-2406] Adjusted version numbers in test javadoc.\n\n[RESTEASY-2406] Incorporate MicroProfile Config into RESTEasy\n\n[RESTEASY-2406] Updated RESTEasy User Guide\n\n[RESTEASY-2406] 1. Updated links to configuration section. 2. Wildfly->WildFly\n\n[RESTEASY-2406] 1. Remove reference to Extension Packs from User Guide.\n\n2. Fix bug with ConfigSource names.\n3. MicroProfile exclusion profile (WIP).\n\n[RESTEASY-2406] 1. Added profiles to testsuite/pom.xml to allow disabling MicroProfile tests\n\n2. Minor changes to User Guide\n3. Fixed one test\n\n[RESTEASY-2406] Removed forward.compatibility profile from resteasy-testsuite/pom.xml\n\n[RESTEASY-2406] Updated RestClientProxyTest to match official version\n\n[RESTEASY-2406] Made ConfigSources Serializable, as per MP Config TCK.\n\n[RESTEASY-2406] Removed \"forward.compatible\" from default testsuite profile."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35e864dfcdc2f45e04b70ef8f6d74591fb38fef9", "author": {"user": {"login": "ronsigal", "name": "Ron Sigal"}}, "url": "https://github.com/resteasy/resteasy/commit/35e864dfcdc2f45e04b70ef8f6d74591fb38fef9", "committedDate": "2020-05-16T16:59:02Z", "message": "Merge branch '3.12' into 3.12_2406"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1716, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}