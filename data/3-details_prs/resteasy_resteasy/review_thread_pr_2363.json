{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2OTM0NDk1", "number": 2363, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTozNjo0M1rOD1r4xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTozNzo1NlrOD1r6vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjIwMTY1OnYy", "diffSide": "RIGHT", "path": "resteasy-core/src/main/java/org/jboss/resteasy/plugins/providers/JaxrsServerFormUrlEncodedProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTozNjo0M1rOGLPP_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTozNjo0M1rOGLPP_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQzNzM3Mw==", "bodyText": "Do we really need to create a new instance of FormUrlEncodedProvider for each invocation?", "url": "https://github.com/resteasy/resteasy/pull/2363#discussion_r414437373", "createdAt": "2020-04-24T09:36:43Z", "author": {"login": "asoldano"}, "path": "resteasy-core/src/main/java/org/jboss/resteasy/plugins/providers/JaxrsServerFormUrlEncodedProvider.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package org.jboss.resteasy.plugins.providers;\n+\n+import org.jboss.resteasy.resteasy_jaxrs.i18n.LogMessages;\n+import org.jboss.resteasy.spi.AsyncMessageBodyWriter;\n+import org.jboss.resteasy.spi.AsyncOutputStream;\n+import org.jboss.resteasy.spi.HttpRequest;\n+import org.jboss.resteasy.spi.util.FindAnnotation;\n+\n+import javax.annotation.Priority;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.Encoded;\n+import javax.ws.rs.Priorities;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Form;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.ext.MessageBodyReader;\n+import javax.ws.rs.ext.Provider;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.util.concurrent.CompletionStage;\n+\n+@Priority(Priorities.AUTHORIZATION)\n+@Provider\n+@Produces(\"application/x-www-form-urlencoded\")\n+@Consumes(\"application/x-www-form-urlencoded\")\n+public class JaxrsServerFormUrlEncodedProvider  implements MessageBodyReader<Form>, AsyncMessageBodyWriter<Form>\n+{\n+    protected boolean useContainerParams;\n+\n+    public JaxrsServerFormUrlEncodedProvider(final boolean useContainerParams)\n+    {\n+        this.useContainerParams = useContainerParams;\n+    }\n+\n+    @Override\n+    public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)\n+    {\n+        return (useContainerParams && Form.class.isAssignableFrom(type));\n+    }\n+\n+    @Context\n+    HttpRequest request;\n+\n+    @Override\n+    public Form readFrom(Class<Form> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream) throws IOException, WebApplicationException\n+    {\n+        LogMessages.LOGGER.debugf(\"Provider : %s,  Method : readFrom\", getClass().getName());\n+        @SuppressWarnings(value = \"unchecked\")\n+        MultivaluedMap<String, String> map = null;\n+        if (useContainerParams) {\n+            boolean encoded = FindAnnotation.findAnnotation(annotations, Encoded.class) != null;\n+            if (encoded) {\n+                map = request.getFormParameters();\n+            } else {\n+                map = request.getDecodedFormParameters();\n+            }\n+        } else {\n+            map = new FormUrlEncodedProvider().readFrom(null, null,\n+                    annotations, mediaType, httpHeaders, entityStream);\n+        }\n+        return new Form(map);\n+    }\n+\n+    @Override\n+    public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)\n+    {\n+        return Form.class.isAssignableFrom(type);\n+    }\n+\n+    @Override\n+    public long getSize(Form form, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)\n+    {\n+        return -1;\n+    }\n+\n+    @Override\n+    public void writeTo(Form form, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream) throws IOException, WebApplicationException\n+    {\n+        LogMessages.LOGGER.debugf(\"Provider : %s,  Method : writeTo\", getClass().getName());\n+        new FormUrlEncodedProvider().writeTo(form.asMap(), null, null, annotations, mediaType, httpHeaders, entityStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c730a10f121cafa7e9200871c1ce4d63e59ca7e3"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjIwMjY3OnYy", "diffSide": "RIGHT", "path": "resteasy-core/src/main/java/org/jboss/resteasy/plugins/providers/JaxrsServerFormUrlEncodedProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTozNjo1NVrOGLPQlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTozNjo1NVrOGLPQlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQzNzUyNQ==", "bodyText": "Same as above", "url": "https://github.com/resteasy/resteasy/pull/2363#discussion_r414437525", "createdAt": "2020-04-24T09:36:55Z", "author": {"login": "asoldano"}, "path": "resteasy-core/src/main/java/org/jboss/resteasy/plugins/providers/JaxrsServerFormUrlEncodedProvider.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package org.jboss.resteasy.plugins.providers;\n+\n+import org.jboss.resteasy.resteasy_jaxrs.i18n.LogMessages;\n+import org.jboss.resteasy.spi.AsyncMessageBodyWriter;\n+import org.jboss.resteasy.spi.AsyncOutputStream;\n+import org.jboss.resteasy.spi.HttpRequest;\n+import org.jboss.resteasy.spi.util.FindAnnotation;\n+\n+import javax.annotation.Priority;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.Encoded;\n+import javax.ws.rs.Priorities;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Form;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.ext.MessageBodyReader;\n+import javax.ws.rs.ext.Provider;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.util.concurrent.CompletionStage;\n+\n+@Priority(Priorities.AUTHORIZATION)\n+@Provider\n+@Produces(\"application/x-www-form-urlencoded\")\n+@Consumes(\"application/x-www-form-urlencoded\")\n+public class JaxrsServerFormUrlEncodedProvider  implements MessageBodyReader<Form>, AsyncMessageBodyWriter<Form>\n+{\n+    protected boolean useContainerParams;\n+\n+    public JaxrsServerFormUrlEncodedProvider(final boolean useContainerParams)\n+    {\n+        this.useContainerParams = useContainerParams;\n+    }\n+\n+    @Override\n+    public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)\n+    {\n+        return (useContainerParams && Form.class.isAssignableFrom(type));\n+    }\n+\n+    @Context\n+    HttpRequest request;\n+\n+    @Override\n+    public Form readFrom(Class<Form> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream) throws IOException, WebApplicationException\n+    {\n+        LogMessages.LOGGER.debugf(\"Provider : %s,  Method : readFrom\", getClass().getName());\n+        @SuppressWarnings(value = \"unchecked\")\n+        MultivaluedMap<String, String> map = null;\n+        if (useContainerParams) {\n+            boolean encoded = FindAnnotation.findAnnotation(annotations, Encoded.class) != null;\n+            if (encoded) {\n+                map = request.getFormParameters();\n+            } else {\n+                map = request.getDecodedFormParameters();\n+            }\n+        } else {\n+            map = new FormUrlEncodedProvider().readFrom(null, null,\n+                    annotations, mediaType, httpHeaders, entityStream);\n+        }\n+        return new Form(map);\n+    }\n+\n+    @Override\n+    public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)\n+    {\n+        return Form.class.isAssignableFrom(type);\n+    }\n+\n+    @Override\n+    public long getSize(Form form, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)\n+    {\n+        return -1;\n+    }\n+\n+    @Override\n+    public void writeTo(Form form, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream) throws IOException, WebApplicationException\n+    {\n+        LogMessages.LOGGER.debugf(\"Provider : %s,  Method : writeTo\", getClass().getName());\n+        new FormUrlEncodedProvider().writeTo(form.asMap(), null, null, annotations, mediaType, httpHeaders, entityStream);\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> asyncWriteTo(Form form, Class<?> type, Type genericType, Annotation[] annotations,\n+                                              MediaType mediaType, MultivaluedMap<String, Object> httpHeaders,\n+                                              AsyncOutputStream entityStream)\n+    {\n+        LogMessages.LOGGER.debugf(\"Provider : %s,  Method : writeTo\", getClass().getName());\n+        return new FormUrlEncodedProvider().asyncWriteTo(form.asMap(), null, null, annotations, mediaType, httpHeaders, entityStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c730a10f121cafa7e9200871c1ce4d63e59ca7e3"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjIwNjY5OnYy", "diffSide": "RIGHT", "path": "resteasy-core/src/main/java/org/jboss/resteasy/plugins/providers/JaxrsServerFormUrlEncodedProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTozNzo1NlrOGLPTDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTozNzo1NlrOGLPTDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQzODE1OQ==", "bodyText": "Do we really need to create a new instance of FormUrlEncodedProvider for each invocation?", "url": "https://github.com/resteasy/resteasy/pull/2363#discussion_r414438159", "createdAt": "2020-04-24T09:37:56Z", "author": {"login": "asoldano"}, "path": "resteasy-core/src/main/java/org/jboss/resteasy/plugins/providers/JaxrsServerFormUrlEncodedProvider.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package org.jboss.resteasy.plugins.providers;\n+\n+import org.jboss.resteasy.resteasy_jaxrs.i18n.LogMessages;\n+import org.jboss.resteasy.spi.AsyncMessageBodyWriter;\n+import org.jboss.resteasy.spi.AsyncOutputStream;\n+import org.jboss.resteasy.spi.HttpRequest;\n+import org.jboss.resteasy.spi.util.FindAnnotation;\n+\n+import javax.annotation.Priority;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.Encoded;\n+import javax.ws.rs.Priorities;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Form;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.ext.MessageBodyReader;\n+import javax.ws.rs.ext.Provider;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.util.concurrent.CompletionStage;\n+\n+@Priority(Priorities.AUTHORIZATION)\n+@Provider\n+@Produces(\"application/x-www-form-urlencoded\")\n+@Consumes(\"application/x-www-form-urlencoded\")\n+public class JaxrsServerFormUrlEncodedProvider  implements MessageBodyReader<Form>, AsyncMessageBodyWriter<Form>\n+{\n+    protected boolean useContainerParams;\n+\n+    public JaxrsServerFormUrlEncodedProvider(final boolean useContainerParams)\n+    {\n+        this.useContainerParams = useContainerParams;\n+    }\n+\n+    @Override\n+    public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)\n+    {\n+        return (useContainerParams && Form.class.isAssignableFrom(type));\n+    }\n+\n+    @Context\n+    HttpRequest request;\n+\n+    @Override\n+    public Form readFrom(Class<Form> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream) throws IOException, WebApplicationException\n+    {\n+        LogMessages.LOGGER.debugf(\"Provider : %s,  Method : readFrom\", getClass().getName());\n+        @SuppressWarnings(value = \"unchecked\")\n+        MultivaluedMap<String, String> map = null;\n+        if (useContainerParams) {\n+            boolean encoded = FindAnnotation.findAnnotation(annotations, Encoded.class) != null;\n+            if (encoded) {\n+                map = request.getFormParameters();\n+            } else {\n+                map = request.getDecodedFormParameters();\n+            }\n+        } else {\n+            map = new FormUrlEncodedProvider().readFrom(null, null,\n+                    annotations, mediaType, httpHeaders, entityStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c730a10f121cafa7e9200871c1ce4d63e59ca7e3"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4938, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}