{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExOTAwMjAz", "number": 2380, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxNTowOVrOD49gwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxNjoxNVrOD49iEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDU0NjU3OnYy", "diffSide": "RIGHT", "path": "docbook/reference/en/en-US/modules/Installation_Configuration.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxNTowOVrOGP9pGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDowNjozMVrOGQWc1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MTc3MQ==", "bodyText": "s/Wildfly/WildFly/", "url": "https://github.com/resteasy/resteasy/pull/2380#discussion_r419391771", "createdAt": "2020-05-04T12:15:09Z", "author": {"login": "asoldano"}, "path": "docbook/reference/en/en-US/modules/Installation_Configuration.xml", "diffHunk": "@@ -442,9 +442,299 @@ public class MyApplication extends Application\n         </para>\r\n         </section>\r\n     </section>\r\n+    \r\n+    \r\n+    <section id=\"config_mechanisms\">\r\n+        <title>Configuring RESTEasy</title>\r\n+        \r\n+        <para>\r\n+        RESTEasy has two mutually exclusive mechanisms for retrieving configuration parameters\r\n+        (see <xref linkend=\"configuration_switches\"/>).\r\n+        The classic mechanism depends predominantly on context-params and init-params. Alternatively,\r\n+        the Eclipse MicroProfile Config project\r\n+        (<ulink url=\"https://github.com/eclipse/microprofile-config\">https://github.com/eclipse/microprofile-config</ulink>)\r\n+        provides a flexible parameter retrieval mechanism that  RESTEasy will use if the necessary\r\n+        dependencies are available. See <xref linkend=\"configuring_mp_config\"/> for more about that. If \r\n+        they are not available, it will fall back to the classic mechanism.\r\n+        </para>\r\n+        \r\n+        <section id=\"microprofile_config\">\r\n+        <title>RESTEasy with MicroProfile Config</title>\r\n+        <para>\r\n+            In the presence of the Eclipse MicroProfile Config API jar and an implementation\r\n+            of the API (see <xref linkend=\"configuring_mp_config\"/>), RESTEasy will use the facilities\r\n+            of MicroProfile Config for accessing configuration properties (see <xref linkend=\"configuration_switches\"/>). \r\n+            MicroProfile Config offers to both RESTEasy users and RESTEasy developers a great deal of\r\n+            flexibility in controlling runtime configuration.\t\r\n+        </para>\r\n+        <para>\r\n+            In MicroProfile Config, a <classname>ConfigSource</classname> represents a <classname>Map&lt;String, String&gt;</classname>\r\n+            of property names to values, and a <classname>Config</classname> represents a sequence of <classname>ConfigSource</classname>s,\r\n+            ordered by priority. The priority of a <classname>ConfigSource</classname> is given by an ordinal (represented by an\r\n+            <classname>int</classname>), with a higher value indicating a higher priority. For a given property name, the\r\n+            <classname>ConfigSource</classname>s are searched in order until a value is found.\r\n+        </para>\r\n+        <para>\r\n+            MicroProfile Config mandates the presence of the following <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getProperties() (ordinal = 400)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getenv() (ordinal = 300)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> for each META-INF/microprofile-config.properties file on the ClassPath,\r\n+            separately configurable via a config_ordinal property inside each file (default ordinal = 100)</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            Note that a property which is found among the System properties and which is also in the System environment will be assigned\r\n+            the System property value because of the relative priorities of the <classname>ConfigSource</classname>s.\r\n+        </para>\r\n+        <para>\r\n+            The set of <classname>ConfigSources</classname> is extensible. For example, smallrye-config\r\n+            (<ulink url=\"https://github.com/smallrye/smallrye-config\">https://github.com/smallrye/smallrye-config</ulink>),\r\n+            the implementation of the MicroProfile Config specification currently used by RESTEasy, adds, among others,\r\n+            the following kinds of <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem><classname>PropertiesConfigSource</classname> creates a <classname>ConfigSource</classname> from a\r\n+            Java <classname>Properties</classname> object or a Map&lt;String, String&gt; object or a properties file\r\n+            (referenced by its URL) (default ordinal = 100).</listitem>\r\n+            <listitem><classname>DirConfigSource</classname> creates a <classname>ConfigSource</classname> that will look into a directory\r\n+            where each file corresponds to a property (the file name is the property key and its textual content is the property value).\r\n+            This <classname>ConfigSource</classname> can be used to read configuration from Kubernetes ConfigMap (default ordinal = 100).</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            These can be registered programmatically by using an instance of <classname>ConfigProviderResolver</classname>:\r\n+        </para>\r\n+        <programlisting>\r\n+Config config = new PropertiesConfigSource(\"file:/// ...\");\r\n+ConfigProviderResolver.instance().registerConfig(config, getClass().getClassLoader());\r\n+        </programlisting>\r\n+        <para>where <classname>ConfigProviderResolver</classname> is part of the Eclipse MicroProfile Config API.</para>\r\n+        <para>\r\n+            If the application is running in Wildfly, then Wildfly provides another set of <classname>ConfigSource</classname>s,\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99fa4d16bc872ee14e8daf2bb1dfd146b6dfcce4"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMzAyNw==", "bodyText": "@asoldano, wow. I don't think I ever noticed that!! ;-)", "url": "https://github.com/resteasy/resteasy/pull/2380#discussion_r419613027", "createdAt": "2020-05-04T17:45:25Z", "author": {"login": "ronsigal"}, "path": "docbook/reference/en/en-US/modules/Installation_Configuration.xml", "diffHunk": "@@ -442,9 +442,299 @@ public class MyApplication extends Application\n         </para>\r\n         </section>\r\n     </section>\r\n+    \r\n+    \r\n+    <section id=\"config_mechanisms\">\r\n+        <title>Configuring RESTEasy</title>\r\n+        \r\n+        <para>\r\n+        RESTEasy has two mutually exclusive mechanisms for retrieving configuration parameters\r\n+        (see <xref linkend=\"configuration_switches\"/>).\r\n+        The classic mechanism depends predominantly on context-params and init-params. Alternatively,\r\n+        the Eclipse MicroProfile Config project\r\n+        (<ulink url=\"https://github.com/eclipse/microprofile-config\">https://github.com/eclipse/microprofile-config</ulink>)\r\n+        provides a flexible parameter retrieval mechanism that  RESTEasy will use if the necessary\r\n+        dependencies are available. See <xref linkend=\"configuring_mp_config\"/> for more about that. If \r\n+        they are not available, it will fall back to the classic mechanism.\r\n+        </para>\r\n+        \r\n+        <section id=\"microprofile_config\">\r\n+        <title>RESTEasy with MicroProfile Config</title>\r\n+        <para>\r\n+            In the presence of the Eclipse MicroProfile Config API jar and an implementation\r\n+            of the API (see <xref linkend=\"configuring_mp_config\"/>), RESTEasy will use the facilities\r\n+            of MicroProfile Config for accessing configuration properties (see <xref linkend=\"configuration_switches\"/>). \r\n+            MicroProfile Config offers to both RESTEasy users and RESTEasy developers a great deal of\r\n+            flexibility in controlling runtime configuration.\t\r\n+        </para>\r\n+        <para>\r\n+            In MicroProfile Config, a <classname>ConfigSource</classname> represents a <classname>Map&lt;String, String&gt;</classname>\r\n+            of property names to values, and a <classname>Config</classname> represents a sequence of <classname>ConfigSource</classname>s,\r\n+            ordered by priority. The priority of a <classname>ConfigSource</classname> is given by an ordinal (represented by an\r\n+            <classname>int</classname>), with a higher value indicating a higher priority. For a given property name, the\r\n+            <classname>ConfigSource</classname>s are searched in order until a value is found.\r\n+        </para>\r\n+        <para>\r\n+            MicroProfile Config mandates the presence of the following <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getProperties() (ordinal = 400)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getenv() (ordinal = 300)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> for each META-INF/microprofile-config.properties file on the ClassPath,\r\n+            separately configurable via a config_ordinal property inside each file (default ordinal = 100)</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            Note that a property which is found among the System properties and which is also in the System environment will be assigned\r\n+            the System property value because of the relative priorities of the <classname>ConfigSource</classname>s.\r\n+        </para>\r\n+        <para>\r\n+            The set of <classname>ConfigSources</classname> is extensible. For example, smallrye-config\r\n+            (<ulink url=\"https://github.com/smallrye/smallrye-config\">https://github.com/smallrye/smallrye-config</ulink>),\r\n+            the implementation of the MicroProfile Config specification currently used by RESTEasy, adds, among others,\r\n+            the following kinds of <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem><classname>PropertiesConfigSource</classname> creates a <classname>ConfigSource</classname> from a\r\n+            Java <classname>Properties</classname> object or a Map&lt;String, String&gt; object or a properties file\r\n+            (referenced by its URL) (default ordinal = 100).</listitem>\r\n+            <listitem><classname>DirConfigSource</classname> creates a <classname>ConfigSource</classname> that will look into a directory\r\n+            where each file corresponds to a property (the file name is the property key and its textual content is the property value).\r\n+            This <classname>ConfigSource</classname> can be used to read configuration from Kubernetes ConfigMap (default ordinal = 100).</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            These can be registered programmatically by using an instance of <classname>ConfigProviderResolver</classname>:\r\n+        </para>\r\n+        <programlisting>\r\n+Config config = new PropertiesConfigSource(\"file:/// ...\");\r\n+ConfigProviderResolver.instance().registerConfig(config, getClass().getClassLoader());\r\n+        </programlisting>\r\n+        <para>where <classname>ConfigProviderResolver</classname> is part of the Eclipse MicroProfile Config API.</para>\r\n+        <para>\r\n+            If the application is running in Wildfly, then Wildfly provides another set of <classname>ConfigSource</classname>s,\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MTc3MQ=="}, "originalCommit": {"oid": "99fa4d16bc872ee14e8daf2bb1dfd146b6dfcce4"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc5ODIzMA==", "bodyText": "Done", "url": "https://github.com/resteasy/resteasy/pull/2380#discussion_r419798230", "createdAt": "2020-05-05T00:06:31Z", "author": {"login": "ronsigal"}, "path": "docbook/reference/en/en-US/modules/Installation_Configuration.xml", "diffHunk": "@@ -442,9 +442,299 @@ public class MyApplication extends Application\n         </para>\r\n         </section>\r\n     </section>\r\n+    \r\n+    \r\n+    <section id=\"config_mechanisms\">\r\n+        <title>Configuring RESTEasy</title>\r\n+        \r\n+        <para>\r\n+        RESTEasy has two mutually exclusive mechanisms for retrieving configuration parameters\r\n+        (see <xref linkend=\"configuration_switches\"/>).\r\n+        The classic mechanism depends predominantly on context-params and init-params. Alternatively,\r\n+        the Eclipse MicroProfile Config project\r\n+        (<ulink url=\"https://github.com/eclipse/microprofile-config\">https://github.com/eclipse/microprofile-config</ulink>)\r\n+        provides a flexible parameter retrieval mechanism that  RESTEasy will use if the necessary\r\n+        dependencies are available. See <xref linkend=\"configuring_mp_config\"/> for more about that. If \r\n+        they are not available, it will fall back to the classic mechanism.\r\n+        </para>\r\n+        \r\n+        <section id=\"microprofile_config\">\r\n+        <title>RESTEasy with MicroProfile Config</title>\r\n+        <para>\r\n+            In the presence of the Eclipse MicroProfile Config API jar and an implementation\r\n+            of the API (see <xref linkend=\"configuring_mp_config\"/>), RESTEasy will use the facilities\r\n+            of MicroProfile Config for accessing configuration properties (see <xref linkend=\"configuration_switches\"/>). \r\n+            MicroProfile Config offers to both RESTEasy users and RESTEasy developers a great deal of\r\n+            flexibility in controlling runtime configuration.\t\r\n+        </para>\r\n+        <para>\r\n+            In MicroProfile Config, a <classname>ConfigSource</classname> represents a <classname>Map&lt;String, String&gt;</classname>\r\n+            of property names to values, and a <classname>Config</classname> represents a sequence of <classname>ConfigSource</classname>s,\r\n+            ordered by priority. The priority of a <classname>ConfigSource</classname> is given by an ordinal (represented by an\r\n+            <classname>int</classname>), with a higher value indicating a higher priority. For a given property name, the\r\n+            <classname>ConfigSource</classname>s are searched in order until a value is found.\r\n+        </para>\r\n+        <para>\r\n+            MicroProfile Config mandates the presence of the following <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getProperties() (ordinal = 400)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getenv() (ordinal = 300)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> for each META-INF/microprofile-config.properties file on the ClassPath,\r\n+            separately configurable via a config_ordinal property inside each file (default ordinal = 100)</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            Note that a property which is found among the System properties and which is also in the System environment will be assigned\r\n+            the System property value because of the relative priorities of the <classname>ConfigSource</classname>s.\r\n+        </para>\r\n+        <para>\r\n+            The set of <classname>ConfigSources</classname> is extensible. For example, smallrye-config\r\n+            (<ulink url=\"https://github.com/smallrye/smallrye-config\">https://github.com/smallrye/smallrye-config</ulink>),\r\n+            the implementation of the MicroProfile Config specification currently used by RESTEasy, adds, among others,\r\n+            the following kinds of <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem><classname>PropertiesConfigSource</classname> creates a <classname>ConfigSource</classname> from a\r\n+            Java <classname>Properties</classname> object or a Map&lt;String, String&gt; object or a properties file\r\n+            (referenced by its URL) (default ordinal = 100).</listitem>\r\n+            <listitem><classname>DirConfigSource</classname> creates a <classname>ConfigSource</classname> that will look into a directory\r\n+            where each file corresponds to a property (the file name is the property key and its textual content is the property value).\r\n+            This <classname>ConfigSource</classname> can be used to read configuration from Kubernetes ConfigMap (default ordinal = 100).</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            These can be registered programmatically by using an instance of <classname>ConfigProviderResolver</classname>:\r\n+        </para>\r\n+        <programlisting>\r\n+Config config = new PropertiesConfigSource(\"file:/// ...\");\r\n+ConfigProviderResolver.instance().registerConfig(config, getClass().getClassLoader());\r\n+        </programlisting>\r\n+        <para>where <classname>ConfigProviderResolver</classname> is part of the Eclipse MicroProfile Config API.</para>\r\n+        <para>\r\n+            If the application is running in Wildfly, then Wildfly provides another set of <classname>ConfigSource</classname>s,\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MTc3MQ=="}, "originalCommit": {"oid": "99fa4d16bc872ee14e8daf2bb1dfd146b6dfcce4"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDU0ODE4OnYy", "diffSide": "RIGHT", "path": "docbook/reference/en/en-US/modules/Installation_Configuration.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxNTo0MVrOGP9qFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDowNjo0MFrOGQWdBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MjAyMQ==", "bodyText": "s/Wildfly/WildFly/", "url": "https://github.com/resteasy/resteasy/pull/2380#discussion_r419392021", "createdAt": "2020-05-04T12:15:41Z", "author": {"login": "asoldano"}, "path": "docbook/reference/en/en-US/modules/Installation_Configuration.xml", "diffHunk": "@@ -442,9 +442,299 @@ public class MyApplication extends Application\n         </para>\r\n         </section>\r\n     </section>\r\n+    \r\n+    \r\n+    <section id=\"config_mechanisms\">\r\n+        <title>Configuring RESTEasy</title>\r\n+        \r\n+        <para>\r\n+        RESTEasy has two mutually exclusive mechanisms for retrieving configuration parameters\r\n+        (see <xref linkend=\"configuration_switches\"/>).\r\n+        The classic mechanism depends predominantly on context-params and init-params. Alternatively,\r\n+        the Eclipse MicroProfile Config project\r\n+        (<ulink url=\"https://github.com/eclipse/microprofile-config\">https://github.com/eclipse/microprofile-config</ulink>)\r\n+        provides a flexible parameter retrieval mechanism that  RESTEasy will use if the necessary\r\n+        dependencies are available. See <xref linkend=\"configuring_mp_config\"/> for more about that. If \r\n+        they are not available, it will fall back to the classic mechanism.\r\n+        </para>\r\n+        \r\n+        <section id=\"microprofile_config\">\r\n+        <title>RESTEasy with MicroProfile Config</title>\r\n+        <para>\r\n+            In the presence of the Eclipse MicroProfile Config API jar and an implementation\r\n+            of the API (see <xref linkend=\"configuring_mp_config\"/>), RESTEasy will use the facilities\r\n+            of MicroProfile Config for accessing configuration properties (see <xref linkend=\"configuration_switches\"/>). \r\n+            MicroProfile Config offers to both RESTEasy users and RESTEasy developers a great deal of\r\n+            flexibility in controlling runtime configuration.\t\r\n+        </para>\r\n+        <para>\r\n+            In MicroProfile Config, a <classname>ConfigSource</classname> represents a <classname>Map&lt;String, String&gt;</classname>\r\n+            of property names to values, and a <classname>Config</classname> represents a sequence of <classname>ConfigSource</classname>s,\r\n+            ordered by priority. The priority of a <classname>ConfigSource</classname> is given by an ordinal (represented by an\r\n+            <classname>int</classname>), with a higher value indicating a higher priority. For a given property name, the\r\n+            <classname>ConfigSource</classname>s are searched in order until a value is found.\r\n+        </para>\r\n+        <para>\r\n+            MicroProfile Config mandates the presence of the following <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getProperties() (ordinal = 400)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getenv() (ordinal = 300)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> for each META-INF/microprofile-config.properties file on the ClassPath,\r\n+            separately configurable via a config_ordinal property inside each file (default ordinal = 100)</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            Note that a property which is found among the System properties and which is also in the System environment will be assigned\r\n+            the System property value because of the relative priorities of the <classname>ConfigSource</classname>s.\r\n+        </para>\r\n+        <para>\r\n+            The set of <classname>ConfigSources</classname> is extensible. For example, smallrye-config\r\n+            (<ulink url=\"https://github.com/smallrye/smallrye-config\">https://github.com/smallrye/smallrye-config</ulink>),\r\n+            the implementation of the MicroProfile Config specification currently used by RESTEasy, adds, among others,\r\n+            the following kinds of <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem><classname>PropertiesConfigSource</classname> creates a <classname>ConfigSource</classname> from a\r\n+            Java <classname>Properties</classname> object or a Map&lt;String, String&gt; object or a properties file\r\n+            (referenced by its URL) (default ordinal = 100).</listitem>\r\n+            <listitem><classname>DirConfigSource</classname> creates a <classname>ConfigSource</classname> that will look into a directory\r\n+            where each file corresponds to a property (the file name is the property key and its textual content is the property value).\r\n+            This <classname>ConfigSource</classname> can be used to read configuration from Kubernetes ConfigMap (default ordinal = 100).</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            These can be registered programmatically by using an instance of <classname>ConfigProviderResolver</classname>:\r\n+        </para>\r\n+        <programlisting>\r\n+Config config = new PropertiesConfigSource(\"file:/// ...\");\r\n+ConfigProviderResolver.instance().registerConfig(config, getClass().getClassLoader());\r\n+        </programlisting>\r\n+        <para>where <classname>ConfigProviderResolver</classname> is part of the Eclipse MicroProfile Config API.</para>\r\n+        <para>\r\n+            If the application is running in Wildfly, then Wildfly provides another set of <classname>ConfigSource</classname>s,\r\n+            as described in the \"MicroProfile Config Subsystem Configuration\" section of the WildFly Admin guide\r\n+            (<ulink url=\"https://docs.wildfly.org/19/Admin_Guide.html#MicroProfile_Config_SmallRye\">\r\n+            https://docs.wildfly.org/19/Admin_Guide.html#MicroProfile_Config_SmallRye</ulink>).\r\n+        </para>\r\n+        <para>\r\n+            Finally, RESTEasy automatically provides three more <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <itemizedlist>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.ServletConfigSource</classname> represents\r\n+            a servlet's &lt;init-param&gt;s from web.xml (ordinal = 60).</listitem>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.FilterConfigSource</classname> represents\r\n+            a filter's &lt;init-param&gt;s from web.xml (ordinal = 50). (See <xref linkend=\"filter\"/> for more information.)\r\n+            </listitem>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.ServletContextConfigSource</classname> represents\r\n+            &lt;context-param&gt;s from web.xml (ordinal = 40).</listitem>\r\n+        </itemizedlist>\r\n+        \r\n+        <section>\r\n+            <title>Using MicroProfileConfig</title>\r\n+            \r\n+            <para>\r\n+                The MicroProfile Config API is very simple. A <classname>Config</classname> may be obtained either\r\n+                programatically:\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+Config config = ConfigProvider.getConfig();\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                or, in the presence of CDI, by way of injection:\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+@Inject Config config;\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                Once a <classname>Config</classname> has been obtained, a property can be queried. For example,\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+String s = config.getValue(\"prop_name\", String.class);\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                or\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+String s = config.getOptionalValue(\"prop_name\", String.class).orElse(\"d'oh\");\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                Now, consider a situation in which \"prop_name\" has been set by <code>System.setProperty(\"prop_name\", \"system\")</code>\r\n+                and also by\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+   &lt;context-param&gt;\r\n+      &lt;param-name&gt;prop_name&lt;/param-name&gt;\r\n+      &lt;param-value&gt;context&lt;/param-value&gt;\r\n+   &lt;/context-param&gt;\r\n+            </programlisting>\r\n+               \r\n+            <para>\r\n+                Then, since the system parameter <classname>ConfigSource</classname> has precedence over (has a higher ordinal than)\r\n+                <classname>ServletContextConfigSource</classname>, <code>config.getValue(\"prop_name\", String.class)</code> will\r\n+                return \"system\" rather than \"context\".\r\n+            </para>\r\n+\r\n+        </section>\r\n+        \r\n+        <section id=\"configuring_mp_config\">\r\n+            <title>Configuring MicroProfile Config</title>\r\n+            \r\n+            <para>\r\n+                If an application is running inside Wildfly, then the MicroProfile Config dependencies are available\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99fa4d16bc872ee14e8daf2bb1dfd146b6dfcce4"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc5ODI3Ng==", "bodyText": "Done", "url": "https://github.com/resteasy/resteasy/pull/2380#discussion_r419798276", "createdAt": "2020-05-05T00:06:40Z", "author": {"login": "ronsigal"}, "path": "docbook/reference/en/en-US/modules/Installation_Configuration.xml", "diffHunk": "@@ -442,9 +442,299 @@ public class MyApplication extends Application\n         </para>\r\n         </section>\r\n     </section>\r\n+    \r\n+    \r\n+    <section id=\"config_mechanisms\">\r\n+        <title>Configuring RESTEasy</title>\r\n+        \r\n+        <para>\r\n+        RESTEasy has two mutually exclusive mechanisms for retrieving configuration parameters\r\n+        (see <xref linkend=\"configuration_switches\"/>).\r\n+        The classic mechanism depends predominantly on context-params and init-params. Alternatively,\r\n+        the Eclipse MicroProfile Config project\r\n+        (<ulink url=\"https://github.com/eclipse/microprofile-config\">https://github.com/eclipse/microprofile-config</ulink>)\r\n+        provides a flexible parameter retrieval mechanism that  RESTEasy will use if the necessary\r\n+        dependencies are available. See <xref linkend=\"configuring_mp_config\"/> for more about that. If \r\n+        they are not available, it will fall back to the classic mechanism.\r\n+        </para>\r\n+        \r\n+        <section id=\"microprofile_config\">\r\n+        <title>RESTEasy with MicroProfile Config</title>\r\n+        <para>\r\n+            In the presence of the Eclipse MicroProfile Config API jar and an implementation\r\n+            of the API (see <xref linkend=\"configuring_mp_config\"/>), RESTEasy will use the facilities\r\n+            of MicroProfile Config for accessing configuration properties (see <xref linkend=\"configuration_switches\"/>). \r\n+            MicroProfile Config offers to both RESTEasy users and RESTEasy developers a great deal of\r\n+            flexibility in controlling runtime configuration.\t\r\n+        </para>\r\n+        <para>\r\n+            In MicroProfile Config, a <classname>ConfigSource</classname> represents a <classname>Map&lt;String, String&gt;</classname>\r\n+            of property names to values, and a <classname>Config</classname> represents a sequence of <classname>ConfigSource</classname>s,\r\n+            ordered by priority. The priority of a <classname>ConfigSource</classname> is given by an ordinal (represented by an\r\n+            <classname>int</classname>), with a higher value indicating a higher priority. For a given property name, the\r\n+            <classname>ConfigSource</classname>s are searched in order until a value is found.\r\n+        </para>\r\n+        <para>\r\n+            MicroProfile Config mandates the presence of the following <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getProperties() (ordinal = 400)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getenv() (ordinal = 300)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> for each META-INF/microprofile-config.properties file on the ClassPath,\r\n+            separately configurable via a config_ordinal property inside each file (default ordinal = 100)</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            Note that a property which is found among the System properties and which is also in the System environment will be assigned\r\n+            the System property value because of the relative priorities of the <classname>ConfigSource</classname>s.\r\n+        </para>\r\n+        <para>\r\n+            The set of <classname>ConfigSources</classname> is extensible. For example, smallrye-config\r\n+            (<ulink url=\"https://github.com/smallrye/smallrye-config\">https://github.com/smallrye/smallrye-config</ulink>),\r\n+            the implementation of the MicroProfile Config specification currently used by RESTEasy, adds, among others,\r\n+            the following kinds of <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem><classname>PropertiesConfigSource</classname> creates a <classname>ConfigSource</classname> from a\r\n+            Java <classname>Properties</classname> object or a Map&lt;String, String&gt; object or a properties file\r\n+            (referenced by its URL) (default ordinal = 100).</listitem>\r\n+            <listitem><classname>DirConfigSource</classname> creates a <classname>ConfigSource</classname> that will look into a directory\r\n+            where each file corresponds to a property (the file name is the property key and its textual content is the property value).\r\n+            This <classname>ConfigSource</classname> can be used to read configuration from Kubernetes ConfigMap (default ordinal = 100).</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            These can be registered programmatically by using an instance of <classname>ConfigProviderResolver</classname>:\r\n+        </para>\r\n+        <programlisting>\r\n+Config config = new PropertiesConfigSource(\"file:/// ...\");\r\n+ConfigProviderResolver.instance().registerConfig(config, getClass().getClassLoader());\r\n+        </programlisting>\r\n+        <para>where <classname>ConfigProviderResolver</classname> is part of the Eclipse MicroProfile Config API.</para>\r\n+        <para>\r\n+            If the application is running in Wildfly, then Wildfly provides another set of <classname>ConfigSource</classname>s,\r\n+            as described in the \"MicroProfile Config Subsystem Configuration\" section of the WildFly Admin guide\r\n+            (<ulink url=\"https://docs.wildfly.org/19/Admin_Guide.html#MicroProfile_Config_SmallRye\">\r\n+            https://docs.wildfly.org/19/Admin_Guide.html#MicroProfile_Config_SmallRye</ulink>).\r\n+        </para>\r\n+        <para>\r\n+            Finally, RESTEasy automatically provides three more <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <itemizedlist>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.ServletConfigSource</classname> represents\r\n+            a servlet's &lt;init-param&gt;s from web.xml (ordinal = 60).</listitem>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.FilterConfigSource</classname> represents\r\n+            a filter's &lt;init-param&gt;s from web.xml (ordinal = 50). (See <xref linkend=\"filter\"/> for more information.)\r\n+            </listitem>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.ServletContextConfigSource</classname> represents\r\n+            &lt;context-param&gt;s from web.xml (ordinal = 40).</listitem>\r\n+        </itemizedlist>\r\n+        \r\n+        <section>\r\n+            <title>Using MicroProfileConfig</title>\r\n+            \r\n+            <para>\r\n+                The MicroProfile Config API is very simple. A <classname>Config</classname> may be obtained either\r\n+                programatically:\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+Config config = ConfigProvider.getConfig();\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                or, in the presence of CDI, by way of injection:\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+@Inject Config config;\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                Once a <classname>Config</classname> has been obtained, a property can be queried. For example,\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+String s = config.getValue(\"prop_name\", String.class);\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                or\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+String s = config.getOptionalValue(\"prop_name\", String.class).orElse(\"d'oh\");\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                Now, consider a situation in which \"prop_name\" has been set by <code>System.setProperty(\"prop_name\", \"system\")</code>\r\n+                and also by\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+   &lt;context-param&gt;\r\n+      &lt;param-name&gt;prop_name&lt;/param-name&gt;\r\n+      &lt;param-value&gt;context&lt;/param-value&gt;\r\n+   &lt;/context-param&gt;\r\n+            </programlisting>\r\n+               \r\n+            <para>\r\n+                Then, since the system parameter <classname>ConfigSource</classname> has precedence over (has a higher ordinal than)\r\n+                <classname>ServletContextConfigSource</classname>, <code>config.getValue(\"prop_name\", String.class)</code> will\r\n+                return \"system\" rather than \"context\".\r\n+            </para>\r\n+\r\n+        </section>\r\n+        \r\n+        <section id=\"configuring_mp_config\">\r\n+            <title>Configuring MicroProfile Config</title>\r\n+            \r\n+            <para>\r\n+                If an application is running inside Wildfly, then the MicroProfile Config dependencies are available\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MjAyMQ=="}, "originalCommit": {"oid": "99fa4d16bc872ee14e8daf2bb1dfd146b6dfcce4"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDU0OTQzOnYy", "diffSide": "RIGHT", "path": "docbook/reference/en/en-US/modules/Installation_Configuration.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxNjowMlrOGP9q3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxNjowMlrOGP9q3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MjIyMA==", "bodyText": "s/Wildfly/WildFly/", "url": "https://github.com/resteasy/resteasy/pull/2380#discussion_r419392220", "createdAt": "2020-05-04T12:16:02Z", "author": {"login": "asoldano"}, "path": "docbook/reference/en/en-US/modules/Installation_Configuration.xml", "diffHunk": "@@ -442,9 +442,299 @@ public class MyApplication extends Application\n         </para>\r\n         </section>\r\n     </section>\r\n+    \r\n+    \r\n+    <section id=\"config_mechanisms\">\r\n+        <title>Configuring RESTEasy</title>\r\n+        \r\n+        <para>\r\n+        RESTEasy has two mutually exclusive mechanisms for retrieving configuration parameters\r\n+        (see <xref linkend=\"configuration_switches\"/>).\r\n+        The classic mechanism depends predominantly on context-params and init-params. Alternatively,\r\n+        the Eclipse MicroProfile Config project\r\n+        (<ulink url=\"https://github.com/eclipse/microprofile-config\">https://github.com/eclipse/microprofile-config</ulink>)\r\n+        provides a flexible parameter retrieval mechanism that  RESTEasy will use if the necessary\r\n+        dependencies are available. See <xref linkend=\"configuring_mp_config\"/> for more about that. If \r\n+        they are not available, it will fall back to the classic mechanism.\r\n+        </para>\r\n+        \r\n+        <section id=\"microprofile_config\">\r\n+        <title>RESTEasy with MicroProfile Config</title>\r\n+        <para>\r\n+            In the presence of the Eclipse MicroProfile Config API jar and an implementation\r\n+            of the API (see <xref linkend=\"configuring_mp_config\"/>), RESTEasy will use the facilities\r\n+            of MicroProfile Config for accessing configuration properties (see <xref linkend=\"configuration_switches\"/>). \r\n+            MicroProfile Config offers to both RESTEasy users and RESTEasy developers a great deal of\r\n+            flexibility in controlling runtime configuration.\t\r\n+        </para>\r\n+        <para>\r\n+            In MicroProfile Config, a <classname>ConfigSource</classname> represents a <classname>Map&lt;String, String&gt;</classname>\r\n+            of property names to values, and a <classname>Config</classname> represents a sequence of <classname>ConfigSource</classname>s,\r\n+            ordered by priority. The priority of a <classname>ConfigSource</classname> is given by an ordinal (represented by an\r\n+            <classname>int</classname>), with a higher value indicating a higher priority. For a given property name, the\r\n+            <classname>ConfigSource</classname>s are searched in order until a value is found.\r\n+        </para>\r\n+        <para>\r\n+            MicroProfile Config mandates the presence of the following <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getProperties() (ordinal = 400)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getenv() (ordinal = 300)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> for each META-INF/microprofile-config.properties file on the ClassPath,\r\n+            separately configurable via a config_ordinal property inside each file (default ordinal = 100)</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            Note that a property which is found among the System properties and which is also in the System environment will be assigned\r\n+            the System property value because of the relative priorities of the <classname>ConfigSource</classname>s.\r\n+        </para>\r\n+        <para>\r\n+            The set of <classname>ConfigSources</classname> is extensible. For example, smallrye-config\r\n+            (<ulink url=\"https://github.com/smallrye/smallrye-config\">https://github.com/smallrye/smallrye-config</ulink>),\r\n+            the implementation of the MicroProfile Config specification currently used by RESTEasy, adds, among others,\r\n+            the following kinds of <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem><classname>PropertiesConfigSource</classname> creates a <classname>ConfigSource</classname> from a\r\n+            Java <classname>Properties</classname> object or a Map&lt;String, String&gt; object or a properties file\r\n+            (referenced by its URL) (default ordinal = 100).</listitem>\r\n+            <listitem><classname>DirConfigSource</classname> creates a <classname>ConfigSource</classname> that will look into a directory\r\n+            where each file corresponds to a property (the file name is the property key and its textual content is the property value).\r\n+            This <classname>ConfigSource</classname> can be used to read configuration from Kubernetes ConfigMap (default ordinal = 100).</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            These can be registered programmatically by using an instance of <classname>ConfigProviderResolver</classname>:\r\n+        </para>\r\n+        <programlisting>\r\n+Config config = new PropertiesConfigSource(\"file:/// ...\");\r\n+ConfigProviderResolver.instance().registerConfig(config, getClass().getClassLoader());\r\n+        </programlisting>\r\n+        <para>where <classname>ConfigProviderResolver</classname> is part of the Eclipse MicroProfile Config API.</para>\r\n+        <para>\r\n+            If the application is running in Wildfly, then Wildfly provides another set of <classname>ConfigSource</classname>s,\r\n+            as described in the \"MicroProfile Config Subsystem Configuration\" section of the WildFly Admin guide\r\n+            (<ulink url=\"https://docs.wildfly.org/19/Admin_Guide.html#MicroProfile_Config_SmallRye\">\r\n+            https://docs.wildfly.org/19/Admin_Guide.html#MicroProfile_Config_SmallRye</ulink>).\r\n+        </para>\r\n+        <para>\r\n+            Finally, RESTEasy automatically provides three more <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <itemizedlist>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.ServletConfigSource</classname> represents\r\n+            a servlet's &lt;init-param&gt;s from web.xml (ordinal = 60).</listitem>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.FilterConfigSource</classname> represents\r\n+            a filter's &lt;init-param&gt;s from web.xml (ordinal = 50). (See <xref linkend=\"filter\"/> for more information.)\r\n+            </listitem>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.ServletContextConfigSource</classname> represents\r\n+            &lt;context-param&gt;s from web.xml (ordinal = 40).</listitem>\r\n+        </itemizedlist>\r\n+        \r\n+        <section>\r\n+            <title>Using MicroProfileConfig</title>\r\n+            \r\n+            <para>\r\n+                The MicroProfile Config API is very simple. A <classname>Config</classname> may be obtained either\r\n+                programatically:\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+Config config = ConfigProvider.getConfig();\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                or, in the presence of CDI, by way of injection:\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+@Inject Config config;\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                Once a <classname>Config</classname> has been obtained, a property can be queried. For example,\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+String s = config.getValue(\"prop_name\", String.class);\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                or\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+String s = config.getOptionalValue(\"prop_name\", String.class).orElse(\"d'oh\");\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                Now, consider a situation in which \"prop_name\" has been set by <code>System.setProperty(\"prop_name\", \"system\")</code>\r\n+                and also by\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+   &lt;context-param&gt;\r\n+      &lt;param-name&gt;prop_name&lt;/param-name&gt;\r\n+      &lt;param-value&gt;context&lt;/param-value&gt;\r\n+   &lt;/context-param&gt;\r\n+            </programlisting>\r\n+               \r\n+            <para>\r\n+                Then, since the system parameter <classname>ConfigSource</classname> has precedence over (has a higher ordinal than)\r\n+                <classname>ServletContextConfigSource</classname>, <code>config.getValue(\"prop_name\", String.class)</code> will\r\n+                return \"system\" rather than \"context\".\r\n+            </para>\r\n+\r\n+        </section>\r\n+        \r\n+        <section id=\"configuring_mp_config\">\r\n+            <title>Configuring MicroProfile Config</title>\r\n+            \r\n+            <para>\r\n+                If an application is running inside Wildfly, then the MicroProfile Config dependencies are available\r\n+                in the MicroProfile Extension pack. See the Wildfly Admin Guide for more infomation:\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99fa4d16bc872ee14e8daf2bb1dfd146b6dfcce4"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDU0OTkzOnYy", "diffSide": "RIGHT", "path": "docbook/reference/en/en-US/modules/Installation_Configuration.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxNjoxNVrOGP9rMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDowNzowM1rOGQWdag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MjMwNA==", "bodyText": "s/Wildfly/WildFly/", "url": "https://github.com/resteasy/resteasy/pull/2380#discussion_r419392304", "createdAt": "2020-05-04T12:16:15Z", "author": {"login": "asoldano"}, "path": "docbook/reference/en/en-US/modules/Installation_Configuration.xml", "diffHunk": "@@ -442,9 +442,299 @@ public class MyApplication extends Application\n         </para>\r\n         </section>\r\n     </section>\r\n+    \r\n+    \r\n+    <section id=\"config_mechanisms\">\r\n+        <title>Configuring RESTEasy</title>\r\n+        \r\n+        <para>\r\n+        RESTEasy has two mutually exclusive mechanisms for retrieving configuration parameters\r\n+        (see <xref linkend=\"configuration_switches\"/>).\r\n+        The classic mechanism depends predominantly on context-params and init-params. Alternatively,\r\n+        the Eclipse MicroProfile Config project\r\n+        (<ulink url=\"https://github.com/eclipse/microprofile-config\">https://github.com/eclipse/microprofile-config</ulink>)\r\n+        provides a flexible parameter retrieval mechanism that  RESTEasy will use if the necessary\r\n+        dependencies are available. See <xref linkend=\"configuring_mp_config\"/> for more about that. If \r\n+        they are not available, it will fall back to the classic mechanism.\r\n+        </para>\r\n+        \r\n+        <section id=\"microprofile_config\">\r\n+        <title>RESTEasy with MicroProfile Config</title>\r\n+        <para>\r\n+            In the presence of the Eclipse MicroProfile Config API jar and an implementation\r\n+            of the API (see <xref linkend=\"configuring_mp_config\"/>), RESTEasy will use the facilities\r\n+            of MicroProfile Config for accessing configuration properties (see <xref linkend=\"configuration_switches\"/>). \r\n+            MicroProfile Config offers to both RESTEasy users and RESTEasy developers a great deal of\r\n+            flexibility in controlling runtime configuration.\t\r\n+        </para>\r\n+        <para>\r\n+            In MicroProfile Config, a <classname>ConfigSource</classname> represents a <classname>Map&lt;String, String&gt;</classname>\r\n+            of property names to values, and a <classname>Config</classname> represents a sequence of <classname>ConfigSource</classname>s,\r\n+            ordered by priority. The priority of a <classname>ConfigSource</classname> is given by an ordinal (represented by an\r\n+            <classname>int</classname>), with a higher value indicating a higher priority. For a given property name, the\r\n+            <classname>ConfigSource</classname>s are searched in order until a value is found.\r\n+        </para>\r\n+        <para>\r\n+            MicroProfile Config mandates the presence of the following <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getProperties() (ordinal = 400)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getenv() (ordinal = 300)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> for each META-INF/microprofile-config.properties file on the ClassPath,\r\n+            separately configurable via a config_ordinal property inside each file (default ordinal = 100)</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            Note that a property which is found among the System properties and which is also in the System environment will be assigned\r\n+            the System property value because of the relative priorities of the <classname>ConfigSource</classname>s.\r\n+        </para>\r\n+        <para>\r\n+            The set of <classname>ConfigSources</classname> is extensible. For example, smallrye-config\r\n+            (<ulink url=\"https://github.com/smallrye/smallrye-config\">https://github.com/smallrye/smallrye-config</ulink>),\r\n+            the implementation of the MicroProfile Config specification currently used by RESTEasy, adds, among others,\r\n+            the following kinds of <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem><classname>PropertiesConfigSource</classname> creates a <classname>ConfigSource</classname> from a\r\n+            Java <classname>Properties</classname> object or a Map&lt;String, String&gt; object or a properties file\r\n+            (referenced by its URL) (default ordinal = 100).</listitem>\r\n+            <listitem><classname>DirConfigSource</classname> creates a <classname>ConfigSource</classname> that will look into a directory\r\n+            where each file corresponds to a property (the file name is the property key and its textual content is the property value).\r\n+            This <classname>ConfigSource</classname> can be used to read configuration from Kubernetes ConfigMap (default ordinal = 100).</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            These can be registered programmatically by using an instance of <classname>ConfigProviderResolver</classname>:\r\n+        </para>\r\n+        <programlisting>\r\n+Config config = new PropertiesConfigSource(\"file:/// ...\");\r\n+ConfigProviderResolver.instance().registerConfig(config, getClass().getClassLoader());\r\n+        </programlisting>\r\n+        <para>where <classname>ConfigProviderResolver</classname> is part of the Eclipse MicroProfile Config API.</para>\r\n+        <para>\r\n+            If the application is running in Wildfly, then Wildfly provides another set of <classname>ConfigSource</classname>s,\r\n+            as described in the \"MicroProfile Config Subsystem Configuration\" section of the WildFly Admin guide\r\n+            (<ulink url=\"https://docs.wildfly.org/19/Admin_Guide.html#MicroProfile_Config_SmallRye\">\r\n+            https://docs.wildfly.org/19/Admin_Guide.html#MicroProfile_Config_SmallRye</ulink>).\r\n+        </para>\r\n+        <para>\r\n+            Finally, RESTEasy automatically provides three more <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <itemizedlist>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.ServletConfigSource</classname> represents\r\n+            a servlet's &lt;init-param&gt;s from web.xml (ordinal = 60).</listitem>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.FilterConfigSource</classname> represents\r\n+            a filter's &lt;init-param&gt;s from web.xml (ordinal = 50). (See <xref linkend=\"filter\"/> for more information.)\r\n+            </listitem>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.ServletContextConfigSource</classname> represents\r\n+            &lt;context-param&gt;s from web.xml (ordinal = 40).</listitem>\r\n+        </itemizedlist>\r\n+        \r\n+        <section>\r\n+            <title>Using MicroProfileConfig</title>\r\n+            \r\n+            <para>\r\n+                The MicroProfile Config API is very simple. A <classname>Config</classname> may be obtained either\r\n+                programatically:\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+Config config = ConfigProvider.getConfig();\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                or, in the presence of CDI, by way of injection:\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+@Inject Config config;\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                Once a <classname>Config</classname> has been obtained, a property can be queried. For example,\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+String s = config.getValue(\"prop_name\", String.class);\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                or\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+String s = config.getOptionalValue(\"prop_name\", String.class).orElse(\"d'oh\");\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                Now, consider a situation in which \"prop_name\" has been set by <code>System.setProperty(\"prop_name\", \"system\")</code>\r\n+                and also by\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+   &lt;context-param&gt;\r\n+      &lt;param-name&gt;prop_name&lt;/param-name&gt;\r\n+      &lt;param-value&gt;context&lt;/param-value&gt;\r\n+   &lt;/context-param&gt;\r\n+            </programlisting>\r\n+               \r\n+            <para>\r\n+                Then, since the system parameter <classname>ConfigSource</classname> has precedence over (has a higher ordinal than)\r\n+                <classname>ServletContextConfigSource</classname>, <code>config.getValue(\"prop_name\", String.class)</code> will\r\n+                return \"system\" rather than \"context\".\r\n+            </para>\r\n+\r\n+        </section>\r\n+        \r\n+        <section id=\"configuring_mp_config\">\r\n+            <title>Configuring MicroProfile Config</title>\r\n+            \r\n+            <para>\r\n+                If an application is running inside Wildfly, then the MicroProfile Config dependencies are available\r\n+                in the MicroProfile Extension pack. See the Wildfly Admin Guide for more infomation:\r\n+                <ulink url=\"https://docs.wildfly.org/19/Admin_Guide.html\">https://docs.wildfly.org/19/Admin_Guide.html</ulink>.\r\n+                Outside of Wildfly, an application will need the\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99fa4d16bc872ee14e8daf2bb1dfd146b6dfcce4"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc5ODM3OA==", "bodyText": "Done", "url": "https://github.com/resteasy/resteasy/pull/2380#discussion_r419798378", "createdAt": "2020-05-05T00:07:03Z", "author": {"login": "ronsigal"}, "path": "docbook/reference/en/en-US/modules/Installation_Configuration.xml", "diffHunk": "@@ -442,9 +442,299 @@ public class MyApplication extends Application\n         </para>\r\n         </section>\r\n     </section>\r\n+    \r\n+    \r\n+    <section id=\"config_mechanisms\">\r\n+        <title>Configuring RESTEasy</title>\r\n+        \r\n+        <para>\r\n+        RESTEasy has two mutually exclusive mechanisms for retrieving configuration parameters\r\n+        (see <xref linkend=\"configuration_switches\"/>).\r\n+        The classic mechanism depends predominantly on context-params and init-params. Alternatively,\r\n+        the Eclipse MicroProfile Config project\r\n+        (<ulink url=\"https://github.com/eclipse/microprofile-config\">https://github.com/eclipse/microprofile-config</ulink>)\r\n+        provides a flexible parameter retrieval mechanism that  RESTEasy will use if the necessary\r\n+        dependencies are available. See <xref linkend=\"configuring_mp_config\"/> for more about that. If \r\n+        they are not available, it will fall back to the classic mechanism.\r\n+        </para>\r\n+        \r\n+        <section id=\"microprofile_config\">\r\n+        <title>RESTEasy with MicroProfile Config</title>\r\n+        <para>\r\n+            In the presence of the Eclipse MicroProfile Config API jar and an implementation\r\n+            of the API (see <xref linkend=\"configuring_mp_config\"/>), RESTEasy will use the facilities\r\n+            of MicroProfile Config for accessing configuration properties (see <xref linkend=\"configuration_switches\"/>). \r\n+            MicroProfile Config offers to both RESTEasy users and RESTEasy developers a great deal of\r\n+            flexibility in controlling runtime configuration.\t\r\n+        </para>\r\n+        <para>\r\n+            In MicroProfile Config, a <classname>ConfigSource</classname> represents a <classname>Map&lt;String, String&gt;</classname>\r\n+            of property names to values, and a <classname>Config</classname> represents a sequence of <classname>ConfigSource</classname>s,\r\n+            ordered by priority. The priority of a <classname>ConfigSource</classname> is given by an ordinal (represented by an\r\n+            <classname>int</classname>), with a higher value indicating a higher priority. For a given property name, the\r\n+            <classname>ConfigSource</classname>s are searched in order until a value is found.\r\n+        </para>\r\n+        <para>\r\n+            MicroProfile Config mandates the presence of the following <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getProperties() (ordinal = 400)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> based on System.getenv() (ordinal = 300)</listitem>\r\n+            <listitem>a <classname>ConfigSource</classname> for each META-INF/microprofile-config.properties file on the ClassPath,\r\n+            separately configurable via a config_ordinal property inside each file (default ordinal = 100)</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            Note that a property which is found among the System properties and which is also in the System environment will be assigned\r\n+            the System property value because of the relative priorities of the <classname>ConfigSource</classname>s.\r\n+        </para>\r\n+        <para>\r\n+            The set of <classname>ConfigSources</classname> is extensible. For example, smallrye-config\r\n+            (<ulink url=\"https://github.com/smallrye/smallrye-config\">https://github.com/smallrye/smallrye-config</ulink>),\r\n+            the implementation of the MicroProfile Config specification currently used by RESTEasy, adds, among others,\r\n+            the following kinds of <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <orderedlist>\r\n+            <listitem><classname>PropertiesConfigSource</classname> creates a <classname>ConfigSource</classname> from a\r\n+            Java <classname>Properties</classname> object or a Map&lt;String, String&gt; object or a properties file\r\n+            (referenced by its URL) (default ordinal = 100).</listitem>\r\n+            <listitem><classname>DirConfigSource</classname> creates a <classname>ConfigSource</classname> that will look into a directory\r\n+            where each file corresponds to a property (the file name is the property key and its textual content is the property value).\r\n+            This <classname>ConfigSource</classname> can be used to read configuration from Kubernetes ConfigMap (default ordinal = 100).</listitem>\r\n+        </orderedlist>\r\n+        <para>\r\n+            These can be registered programmatically by using an instance of <classname>ConfigProviderResolver</classname>:\r\n+        </para>\r\n+        <programlisting>\r\n+Config config = new PropertiesConfigSource(\"file:/// ...\");\r\n+ConfigProviderResolver.instance().registerConfig(config, getClass().getClassLoader());\r\n+        </programlisting>\r\n+        <para>where <classname>ConfigProviderResolver</classname> is part of the Eclipse MicroProfile Config API.</para>\r\n+        <para>\r\n+            If the application is running in Wildfly, then Wildfly provides another set of <classname>ConfigSource</classname>s,\r\n+            as described in the \"MicroProfile Config Subsystem Configuration\" section of the WildFly Admin guide\r\n+            (<ulink url=\"https://docs.wildfly.org/19/Admin_Guide.html#MicroProfile_Config_SmallRye\">\r\n+            https://docs.wildfly.org/19/Admin_Guide.html#MicroProfile_Config_SmallRye</ulink>).\r\n+        </para>\r\n+        <para>\r\n+            Finally, RESTEasy automatically provides three more <classname>ConfigSource</classname>s:\r\n+        </para>\r\n+        <itemizedlist>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.ServletConfigSource</classname> represents\r\n+            a servlet's &lt;init-param&gt;s from web.xml (ordinal = 60).</listitem>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.FilterConfigSource</classname> represents\r\n+            a filter's &lt;init-param&gt;s from web.xml (ordinal = 50). (See <xref linkend=\"filter\"/> for more information.)\r\n+            </listitem>\r\n+            <listitem><classname>org.jboss.resteasy.microprofile.config.ServletContextConfigSource</classname> represents\r\n+            &lt;context-param&gt;s from web.xml (ordinal = 40).</listitem>\r\n+        </itemizedlist>\r\n+        \r\n+        <section>\r\n+            <title>Using MicroProfileConfig</title>\r\n+            \r\n+            <para>\r\n+                The MicroProfile Config API is very simple. A <classname>Config</classname> may be obtained either\r\n+                programatically:\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+Config config = ConfigProvider.getConfig();\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                or, in the presence of CDI, by way of injection:\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+@Inject Config config;\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                Once a <classname>Config</classname> has been obtained, a property can be queried. For example,\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+String s = config.getValue(\"prop_name\", String.class);\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                or\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+String s = config.getOptionalValue(\"prop_name\", String.class).orElse(\"d'oh\");\r\n+            </programlisting>\r\n+            \r\n+            <para>\r\n+                Now, consider a situation in which \"prop_name\" has been set by <code>System.setProperty(\"prop_name\", \"system\")</code>\r\n+                and also by\r\n+            </para>\r\n+            \r\n+            <programlisting>\r\n+   &lt;context-param&gt;\r\n+      &lt;param-name&gt;prop_name&lt;/param-name&gt;\r\n+      &lt;param-value&gt;context&lt;/param-value&gt;\r\n+   &lt;/context-param&gt;\r\n+            </programlisting>\r\n+               \r\n+            <para>\r\n+                Then, since the system parameter <classname>ConfigSource</classname> has precedence over (has a higher ordinal than)\r\n+                <classname>ServletContextConfigSource</classname>, <code>config.getValue(\"prop_name\", String.class)</code> will\r\n+                return \"system\" rather than \"context\".\r\n+            </para>\r\n+\r\n+        </section>\r\n+        \r\n+        <section id=\"configuring_mp_config\">\r\n+            <title>Configuring MicroProfile Config</title>\r\n+            \r\n+            <para>\r\n+                If an application is running inside Wildfly, then the MicroProfile Config dependencies are available\r\n+                in the MicroProfile Extension pack. See the Wildfly Admin Guide for more infomation:\r\n+                <ulink url=\"https://docs.wildfly.org/19/Admin_Guide.html\">https://docs.wildfly.org/19/Admin_Guide.html</ulink>.\r\n+                Outside of Wildfly, an application will need the\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MjMwNA=="}, "originalCommit": {"oid": "99fa4d16bc872ee14e8daf2bb1dfd146b6dfcce4"}, "originalPosition": 241}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4944, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}