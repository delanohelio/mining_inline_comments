{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMjc0NjMy", "number": 1210, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMToxODoxMlrOEVySng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToxODo1NlrOEWJJCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjc5NTE4OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring-example-common/src/test/java/pro/taskana/rest/security/SpringBootWebSecurityConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMToxODoxMlrOG8vPCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzoyNTo1MVrOG9PaFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM0MTY0Mg==", "bodyText": "Does the above config.addAllowedMethod(\"*\"); not already include POST?", "url": "https://github.com/Taskana/taskana/pull/1210#discussion_r466341642", "createdAt": "2020-08-06T11:18:12Z", "author": {"login": "gitgoodjhe"}, "path": "rest/taskana-rest-spring-example-common/src/test/java/pro/taskana/rest/security/SpringBootWebSecurityConfig.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package pro.taskana.rest.security;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.web.servlet.FilterRegistrationBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper;\n+import org.springframework.security.core.authority.mapping.SimpleAuthorityMapper;\n+import org.springframework.security.ldap.DefaultSpringSecurityContextSource;\n+import org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator;\n+import org.springframework.security.ldap.userdetails.LdapAuthoritiesPopulator;\n+import org.springframework.security.web.jaasapi.JaasApiIntegrationFilter;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.web.cors.CorsConfiguration;\n+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n+import org.springframework.web.filter.CorsFilter;\n+import org.springframework.web.servlet.config.annotation.CorsRegistry;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n+\n+/** Default basic configuration for taskana web example. */\n+@Configuration\n+@EnableWebSecurity\n+public class SpringBootWebSecurityConfig extends WebSecurityConfigurerAdapter {\n+\n+  @Value(\"${taskana.ldap.serverUrl:ldap://localhost:10389}\")\n+  private String ldapServerUrl;\n+\n+  @Value(\"${taskana.ldap.baseDn:OU=Test,O=TASKANA}\")\n+  private String ldapBaseDn;\n+\n+  @Value(\"${taskana.ldap.groupSearchBase:cn=groups}\")\n+  private String ldapGroupSearchBase;\n+\n+  @Value(\"${taskana.ldap.userDnPatterns:uid={0},cn=users}\")\n+  private String ldapUserDnPatterns;\n+\n+  @Value(\"${taskana.ldap.groupSearchFilter:uniqueMember={0}}\")\n+  private String ldapGroupSearchFilter;\n+\n+  @Value(\"${devMode:false}\")\n+  private boolean devMode;\n+\n+  @Bean\n+  public WebMvcConfigurer corsConfigurer() {\n+    return new CorsWebMvcConfigurer();\n+  }\n+\n+  @Bean\n+  public FilterRegistrationBean<CorsFilter> corsFilter() {\n+    final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n+    CorsConfiguration config = new CorsConfiguration();\n+    config.setAllowCredentials(true);\n+    config.addAllowedOrigin(\"*\");\n+    config.addAllowedHeader(\"*\");\n+    config.addAllowedMethod(\"*\");\n+    config.addAllowedMethod(\"POST\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5e65918f4ef78134bd8b25a49636bfe508d41cb"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2ODc1OQ==", "bodyText": "done", "url": "https://github.com/Taskana/taskana/pull/1210#discussion_r466868759", "createdAt": "2020-08-07T07:25:51Z", "author": {"login": "holgerhagen"}, "path": "rest/taskana-rest-spring-example-common/src/test/java/pro/taskana/rest/security/SpringBootWebSecurityConfig.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package pro.taskana.rest.security;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.web.servlet.FilterRegistrationBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper;\n+import org.springframework.security.core.authority.mapping.SimpleAuthorityMapper;\n+import org.springframework.security.ldap.DefaultSpringSecurityContextSource;\n+import org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator;\n+import org.springframework.security.ldap.userdetails.LdapAuthoritiesPopulator;\n+import org.springframework.security.web.jaasapi.JaasApiIntegrationFilter;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.web.cors.CorsConfiguration;\n+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n+import org.springframework.web.filter.CorsFilter;\n+import org.springframework.web.servlet.config.annotation.CorsRegistry;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n+\n+/** Default basic configuration for taskana web example. */\n+@Configuration\n+@EnableWebSecurity\n+public class SpringBootWebSecurityConfig extends WebSecurityConfigurerAdapter {\n+\n+  @Value(\"${taskana.ldap.serverUrl:ldap://localhost:10389}\")\n+  private String ldapServerUrl;\n+\n+  @Value(\"${taskana.ldap.baseDn:OU=Test,O=TASKANA}\")\n+  private String ldapBaseDn;\n+\n+  @Value(\"${taskana.ldap.groupSearchBase:cn=groups}\")\n+  private String ldapGroupSearchBase;\n+\n+  @Value(\"${taskana.ldap.userDnPatterns:uid={0},cn=users}\")\n+  private String ldapUserDnPatterns;\n+\n+  @Value(\"${taskana.ldap.groupSearchFilter:uniqueMember={0}}\")\n+  private String ldapGroupSearchFilter;\n+\n+  @Value(\"${devMode:false}\")\n+  private boolean devMode;\n+\n+  @Bean\n+  public WebMvcConfigurer corsConfigurer() {\n+    return new CorsWebMvcConfigurer();\n+  }\n+\n+  @Bean\n+  public FilterRegistrationBean<CorsFilter> corsFilter() {\n+    final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n+    CorsConfiguration config = new CorsConfiguration();\n+    config.setAllowCredentials(true);\n+    config.addAllowedOrigin(\"*\");\n+    config.addAllowedHeader(\"*\");\n+    config.addAllowedMethod(\"*\");\n+    config.addAllowedMethod(\"POST\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM0MTY0Mg=="}, "originalCommit": {"oid": "f5e65918f4ef78134bd8b25a49636bfe508d41cb"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjg0ODQyOnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring-example-wildfly/src/main/java/pro/taskana/wildfly/security/LogoutController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTozNTo0MVrOG8vvAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTozNTo0MVrOG8vvAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM0OTgyNg==", "bodyText": "please remove this", "url": "https://github.com/Taskana/taskana/pull/1210#discussion_r466349826", "createdAt": "2020-08-06T11:35:41Z", "author": {"login": "gitgoodjhe"}, "path": "rest/taskana-rest-spring-example-wildfly/src/main/java/pro/taskana/wildfly/security/LogoutController.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package pro.taskana.wildfly.security;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.servlet.view.RedirectView;\n+\n+/** The logout controller. */\n+@Controller\n+public class LogoutController {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(LogoutController.class);\n+\n+  @GetMapping(path = \"/logout\")\n+  public RedirectView loginErrorGet(HttpServletRequest request) {\n+    return logout(request);\n+  }\n+\n+  @PostMapping(path = \"/logout\")\n+  public RedirectView loginErrorPost(HttpServletRequest request) {\n+    return logout(request);\n+  }\n+\n+  public RedirectView logout(HttpServletRequest request) {\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Logging out...\");\n+    }\n+\n+    if (request.getSession(false) != null) {\n+      request.getSession(false).invalidate(); // remove session.\n+    }\n+    if (request.getSession() != null) {\n+      request.getSession().invalidate(); // remove session.\n+    }\n+\n+    try {\n+      request.logout();\n+    } catch (ServletException e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5e65918f4ef78134bd8b25a49636bfe508d41cb"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjg1MjAwOnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring-example-wildfly/src/main/java/pro/taskana/wildfly/security/WildflyWebSecurityConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTozNzowMFrOG8vxSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzoyNTo1N1rOG9PaTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1MDQxMA==", "bodyText": "see above", "url": "https://github.com/Taskana/taskana/pull/1210#discussion_r466350410", "createdAt": "2020-08-06T11:37:00Z", "author": {"login": "gitgoodjhe"}, "path": "rest/taskana-rest-spring-example-wildfly/src/main/java/pro/taskana/wildfly/security/WildflyWebSecurityConfig.java", "diffHunk": "@@ -1,141 +1,65 @@\n package pro.taskana.wildfly.security;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n-import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.web.servlet.FilterRegistrationBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.annotation.Order;\n-import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n-import org.springframework.security.core.Authentication;\n-import org.springframework.security.core.AuthenticationException;\n-import org.springframework.security.core.GrantedAuthority;\n-import org.springframework.security.core.authority.SimpleGrantedAuthority;\n-import org.springframework.security.core.userdetails.AuthenticationUserDetailsService;\n-import org.springframework.security.core.userdetails.UserDetails;\n-import org.springframework.security.core.userdetails.UsernameNotFoundException;\n-import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider;\n-import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;\n-import org.springframework.security.web.authentication.preauth.j2ee.J2eePreAuthenticatedProcessingFilter;\n-import org.wildfly.security.auth.server.SecurityDomain;\n-import org.wildfly.security.auth.server.SecurityIdentity;\n-import org.wildfly.security.authz.Roles;\n-\n-import pro.taskana.rest.security.WebSecurityConfig;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.web.jaasapi.JaasApiIntegrationFilter;\n+import org.springframework.web.cors.CorsConfiguration;\n+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n+import org.springframework.web.filter.CorsFilter;\n+import org.springframework.web.servlet.config.annotation.CorsRegistry;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n \n /**\n  * Default basic configuration for taskana web example running on Wildfly / JBoss with Elytron or\n  * JAAS Security.\n  */\n @Configuration\n @EnableWebSecurity\n-@Order(1)\n-public class WildflyWebSecurityConfig extends WebSecurityConfig {\n-\n-  @Value(\"${devMode:false}\")\n-  private boolean devMode;\n+public class WildflyWebSecurityConfig extends WebSecurityConfigurerAdapter {\n \n   @Bean\n-  public J2eePreAuthenticatedProcessingFilter preAuthFilter() {\n-    J2eePreAuthenticatedProcessingFilter filter = new J2eePreAuthenticatedProcessingFilter();\n-    filter.setAuthenticationManager(preAuthManager());\n-    return filter;\n+  public WebMvcConfigurer corsConfigurer() {\n+    return new CorsWebMvcConfigurer();\n   }\n \n   @Bean\n-  public AuthenticationManager preAuthManager() {\n-    return new AuthenticationManager() {\n-\n-      @Override\n-      public Authentication authenticate(Authentication authentication)\n-          throws AuthenticationException {\n-        return preauthAuthProvider().authenticate(authentication);\n-      }\n-    };\n+  public FilterRegistrationBean<CorsFilter> corsFilter() {\n+    final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n+    CorsConfiguration config = new CorsConfiguration();\n+    config.setAllowCredentials(true);\n+    config.addAllowedOrigin(\"*\");\n+    config.addAllowedHeader(\"*\");\n+    config.addAllowedMethod(\"*\");\n+    config.addAllowedMethod(\"POST\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5e65918f4ef78134bd8b25a49636bfe508d41cb"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2ODgxMg==", "bodyText": "done", "url": "https://github.com/Taskana/taskana/pull/1210#discussion_r466868812", "createdAt": "2020-08-07T07:25:57Z", "author": {"login": "holgerhagen"}, "path": "rest/taskana-rest-spring-example-wildfly/src/main/java/pro/taskana/wildfly/security/WildflyWebSecurityConfig.java", "diffHunk": "@@ -1,141 +1,65 @@\n package pro.taskana.wildfly.security;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n-import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.web.servlet.FilterRegistrationBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.annotation.Order;\n-import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n-import org.springframework.security.core.Authentication;\n-import org.springframework.security.core.AuthenticationException;\n-import org.springframework.security.core.GrantedAuthority;\n-import org.springframework.security.core.authority.SimpleGrantedAuthority;\n-import org.springframework.security.core.userdetails.AuthenticationUserDetailsService;\n-import org.springframework.security.core.userdetails.UserDetails;\n-import org.springframework.security.core.userdetails.UsernameNotFoundException;\n-import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider;\n-import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;\n-import org.springframework.security.web.authentication.preauth.j2ee.J2eePreAuthenticatedProcessingFilter;\n-import org.wildfly.security.auth.server.SecurityDomain;\n-import org.wildfly.security.auth.server.SecurityIdentity;\n-import org.wildfly.security.authz.Roles;\n-\n-import pro.taskana.rest.security.WebSecurityConfig;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.web.jaasapi.JaasApiIntegrationFilter;\n+import org.springframework.web.cors.CorsConfiguration;\n+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n+import org.springframework.web.filter.CorsFilter;\n+import org.springframework.web.servlet.config.annotation.CorsRegistry;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n \n /**\n  * Default basic configuration for taskana web example running on Wildfly / JBoss with Elytron or\n  * JAAS Security.\n  */\n @Configuration\n @EnableWebSecurity\n-@Order(1)\n-public class WildflyWebSecurityConfig extends WebSecurityConfig {\n-\n-  @Value(\"${devMode:false}\")\n-  private boolean devMode;\n+public class WildflyWebSecurityConfig extends WebSecurityConfigurerAdapter {\n \n   @Bean\n-  public J2eePreAuthenticatedProcessingFilter preAuthFilter() {\n-    J2eePreAuthenticatedProcessingFilter filter = new J2eePreAuthenticatedProcessingFilter();\n-    filter.setAuthenticationManager(preAuthManager());\n-    return filter;\n+  public WebMvcConfigurer corsConfigurer() {\n+    return new CorsWebMvcConfigurer();\n   }\n \n   @Bean\n-  public AuthenticationManager preAuthManager() {\n-    return new AuthenticationManager() {\n-\n-      @Override\n-      public Authentication authenticate(Authentication authentication)\n-          throws AuthenticationException {\n-        return preauthAuthProvider().authenticate(authentication);\n-      }\n-    };\n+  public FilterRegistrationBean<CorsFilter> corsFilter() {\n+    final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n+    CorsConfiguration config = new CorsConfiguration();\n+    config.setAllowCredentials(true);\n+    config.addAllowedOrigin(\"*\");\n+    config.addAllowedHeader(\"*\");\n+    config.addAllowedMethod(\"*\");\n+    config.addAllowedMethod(\"POST\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1MDQxMA=="}, "originalCommit": {"oid": "f5e65918f4ef78134bd8b25a49636bfe508d41cb"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjg2OTU0OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring-example-wildfly/src/test/java/pro/taskana/TaskanaWildflyTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTo0Mjo0M1rOG8v8FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTo0Mjo0M1rOG8v8FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1MzE3Mg==", "bodyText": "Shouldn't we use a logger for this?", "url": "https://github.com/Taskana/taskana/pull/1210#discussion_r466353172", "createdAt": "2020-08-06T11:42:43Z", "author": {"login": "gitgoodjhe"}, "path": "rest/taskana-rest-spring-example-wildfly/src/test/java/pro/taskana/TaskanaWildflyTest.java", "diffHunk": "@@ -34,9 +43,23 @@\n @RunWith(Arquillian.class)\n public class TaskanaWildflyTest {\n \n+  public static final String AUTHORIZATION_TEAMLEAD_1 = \"Basic dGVhbWxlYWQtMTp0ZWFtbGVhZC0x\";\n+\n   @Deployment(testable = false)\n   public static Archive<?> createTestArchive() {\n \n+    String applicationPropertyFile = \"application.properties\";\n+    String dbType = System.getProperty(\"db.type\");\n+    if (dbType != null && !dbType.isEmpty()) {\n+      applicationPropertyFile = \"application-\" + dbType + \".properties\";\n+    }\n+    System.err.println(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5e65918f4ef78134bd8b25a49636bfe508d41cb"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjkwNzc0OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring-example-wildfly/src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTo1NToyM1rOG8wTpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTo1NToyM1rOG8wTpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1OTIwNA==", "bodyText": "do we still need this? If yes, why is it empty?", "url": "https://github.com/Taskana/taskana/pull/1210#discussion_r466359204", "createdAt": "2020-08-06T11:55:23Z", "author": {"login": "gitgoodjhe"}, "path": "rest/taskana-rest-spring-example-wildfly/src/main/resources/application.properties", "diffHunk": "@@ -5,27 +5,29 @@ taskana.schemaName=TASKANA\n \n ####### properties to connect to LDAP\n taskana.ldap.serverUrl=ldap://localhost:10389\n-taskana.ldap.bindDn=uid=admin,ou=system\n+taskana.ldap.bindDn=uid=admin\n taskana.ldap.bindPassword=secret\n-taskana.ldap.baseDn=o=TaskanaTest\n-####### properties that control search for users and groups\n-taskana.ldap.userSearchBase=ou=people\n+taskana.ldap.baseDn=ou=Test,O=TASKANA\n+taskana.ldap.userSearchBase=cn=users\n taskana.ldap.userSearchFilterName=objectclass\n taskana.ldap.userSearchFilterValue=person\n taskana.ldap.userFirstnameAttribute=givenName\n taskana.ldap.userLastnameAttribute=sn\n taskana.ldap.userIdAttribute=uid\n-taskana.ldap.groupSearchBase=ou=groups\n+taskana.ldap.groupSearchBase=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5e65918f4ef78134bd8b25a49636bfe508d41cb"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjUzMjg2OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring-example-boot/src/main/java/pro/taskana/rest/security/SpringBootWebSecurityConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToxNzowM1rOG9SvRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToxNzowM1rOG9SvRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMzMzMw==", "bodyText": "I've never done something with websecurityconfig.\nIs something special done here?", "url": "https://github.com/Taskana/taskana/pull/1210#discussion_r466923333", "createdAt": "2020-08-07T09:17:03Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring-example-boot/src/main/java/pro/taskana/rest/security/SpringBootWebSecurityConfig.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package pro.taskana.rest.security;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6624667e2afd34ce362d6778224b858f226599e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjUzNjk5OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring-example-wildfly/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToxODoyMFrOG9Sxuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToxODoyMFrOG9Sxuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMzk2Mw==", "bodyText": "why did you add junit4 as a dependency? We agreed on using junit5", "url": "https://github.com/Taskana/taskana/pull/1210#discussion_r466923963", "createdAt": "2020-08-07T09:18:20Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring-example-wildfly/pom.xml", "diffHunk": "@@ -95,15 +81,25 @@\n         <dependency>\n             <groupId>org.jboss.resteasy</groupId>\n             <artifactId>resteasy-client</artifactId>\n-            <version>${version.resteasy}</version>\n             <scope>test</scope>\n         </dependency>\n-        <!-- Brought in via WildFly Swarm bom -->\n         <dependency>\n-            <groupId>io.thorntail</groupId>\n-            <artifactId>arquillian</artifactId>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <scope>test</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6624667e2afd34ce362d6778224b858f226599e"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjUzODk3OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring-example-wildfly/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToxODo1NlrOG9Sy6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToxODo1NlrOG9Sy6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNDI2NA==", "bodyText": "remove version (inherited from bom)", "url": "https://github.com/Taskana/taskana/pull/1210#discussion_r466924264", "createdAt": "2020-08-07T09:18:56Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring-example-wildfly/pom.xml", "diffHunk": "@@ -95,15 +81,25 @@\n         <dependency>\n             <groupId>org.jboss.resteasy</groupId>\n             <artifactId>resteasy-client</artifactId>\n-            <version>${version.resteasy}</version>\n             <scope>test</scope>\n         </dependency>\n-        <!-- Brought in via WildFly Swarm bom -->\n         <dependency>\n-            <groupId>io.thorntail</groupId>\n-            <artifactId>arquillian</artifactId>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-test</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <!-- Brought in via WildFly Swarm bom -->\n+        <dependency>\n+            <groupId>org.wildfly.arquillian</groupId>\n+            <artifactId>wildfly-arquillian-container-managed</artifactId>\n+            <version>2.2.0.Final</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6624667e2afd34ce362d6778224b858f226599e"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4137, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}