{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNTc1MzYw", "number": 914, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTo1NjoxNFrODexrvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTo1NjoxNFrODexrvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTk3ODg0OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/ClassificationAssemblerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTo1NjoxNFrOFoGSsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTo1NjoxNFrOFoGSsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU5MDQ0OA==", "bodyText": "Pls use AssertJ for this and future tests. If the dependency is not already added, add it like this to the corresponding\npom.xml:\n<dependency>\n<groupId>org.assertj</groupId>\n<artifactId>assertj-core</artifactId>\n<version>${version.assertj}</version>\n<scope>test</scope>\n</dependency>\nThen you can import the static assertthat...() methods", "url": "https://github.com/Taskana/taskana/pull/914#discussion_r377590448", "createdAt": "2020-02-11T11:56:14Z", "author": {"login": "gitgoodjhe"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/resource/ClassificationAssemblerTest.java", "diffHunk": "@@ -99,26 +99,27 @@ private void testLinks(ClassificationResource resource) {\n   private void testEquality(\n       Classification classification, ClassificationResource classificationResource) {\n     Assert.assertEquals(\n-        classification.getApplicationEntryPoint(), classificationResource.applicationEntryPoint);\n-    Assert.assertEquals(classification.getKey(), classificationResource.key);\n-    Assert.assertEquals(classification.getDomain(), classificationResource.domain);\n-    Assert.assertEquals(classification.getId(), classificationResource.classificationId);\n-    Assert.assertEquals(classification.getDescription(), classificationResource.description);\n-    Assert.assertEquals(classification.getName(), classificationResource.name);\n-    Assert.assertEquals(classification.getServiceLevel(), classificationResource.serviceLevel);\n-    Assert.assertEquals(classification.getCategory(), classificationResource.category);\n-    Assert.assertEquals(classification.getCustom1(), classificationResource.custom1);\n-    Assert.assertEquals(classification.getCustom2(), classificationResource.custom2);\n-    Assert.assertEquals(classification.getCustom3(), classificationResource.custom3);\n-    Assert.assertEquals(classification.getCustom4(), classificationResource.custom4);\n-    Assert.assertEquals(classification.getCustom5(), classificationResource.custom5);\n-    Assert.assertEquals(classification.getCustom6(), classificationResource.custom6);\n-    Assert.assertEquals(classification.getCustom7(), classificationResource.custom7);\n-    Assert.assertEquals(classification.getCustom8(), classificationResource.custom8);\n-    Assert.assertEquals(classification.getParentId(), classificationResource.parentId);\n-    Assert.assertEquals(classification.getType(), classificationResource.type);\n-    Assert.assertEquals(classification.getPriority(), classificationResource.priority);\n+        classification.getApplicationEntryPoint(),\n+        classificationResource.getApplicationEntryPoint());\n+    Assert.assertEquals(classification.getKey(), classificationResource.getKey());\n+    Assert.assertEquals(classification.getDomain(), classificationResource.getDomain());\n+    Assert.assertEquals(classification.getId(), classificationResource.getClassificationId());\n+    Assert.assertEquals(classification.getDescription(), classificationResource.getDescription());\n+    Assert.assertEquals(classification.getName(), classificationResource.getName());\n+    Assert.assertEquals(classification.getServiceLevel(), classificationResource.getServiceLevel());\n+    Assert.assertEquals(classification.getCategory(), classificationResource.getCategory());\n+    Assert.assertEquals(classification.getCustom1(), classificationResource.getCustom1());\n+    Assert.assertEquals(classification.getCustom2(), classificationResource.getCustom2());\n+    Assert.assertEquals(classification.getCustom3(), classificationResource.getCustom3());\n+    Assert.assertEquals(classification.getCustom4(), classificationResource.getCustom4());\n+    Assert.assertEquals(classification.getCustom5(), classificationResource.getCustom5());\n+    Assert.assertEquals(classification.getCustom6(), classificationResource.getCustom6());\n+    Assert.assertEquals(classification.getCustom7(), classificationResource.getCustom7());\n+    Assert.assertEquals(classification.getCustom8(), classificationResource.getCustom8());\n+    Assert.assertEquals(classification.getParentId(), classificationResource.getParentId());\n+    Assert.assertEquals(classification.getType(), classificationResource.getType());\n+    Assert.assertEquals(classification.getPriority(), classificationResource.getPriority());\n     Assert.assertEquals(\n-        classification.getIsValidInDomain(), classificationResource.isValidInDomain);\n+        classification.getIsValidInDomain(), classificationResource.getIsValidInDomain());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "874a4cf4f4380a6ceb405de60c4de4bf4f28dea3"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4410, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}