{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MTAyNzQw", "number": 1246, "title": "TSK-1349: Workbasket access items unit tests", "bodyText": "https://sonarcloud.io/dashboard?branch=TSK-1349-workbasket-access-items&id=cnguyen-de_taskana\nhttps://taskana.atlassian.net/browse/TSK-1349\nnotes: commits will be squashed during merge", "createdAt": "2020-09-01T14:00:12Z", "url": "https://github.com/Taskana/taskana/pull/1246", "merged": true, "mergeCommit": {"oid": "88b8486a491a414d9185865eb18746f9ea368a9c"}, "closed": true, "closedAt": "2020-09-02T09:04:00Z", "author": {"login": "cnguyen-de"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCT6NyAH2gAyNDc3MTAyNzQwOjFkMjE3ODM4N2EyOWVlMDNmZmIwY2VjNjYwNGYzNjY1ZjBmYmM4NjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdE4NmKAFqTQ4MDYyMzcwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1d2178387a29ee03ffb0cec6604f3665f0fbc862", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/1d2178387a29ee03ffb0cec6604f3665f0fbc862", "committedDate": "2020-08-25T09:36:52Z", "message": "TSK-1349: remove html coverage to optimize test speed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa2b310de678fecb02d8c8c8675bcd78f59e73b7", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/aa2b310de678fecb02d8c8c8675bcd78f59e73b7", "committedDate": "2020-08-25T12:34:56Z", "message": "TSK-1349: init workbasket access items testing env"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "785bfc09332f6c53251dede16b1de15578de247d", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/785bfc09332f6c53251dede16b1de15578de247d", "committedDate": "2020-09-01T13:52:30Z", "message": "TSK-1349: update workbasket access items unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59cd848c0c4d5d958fc44e7d3a0491961ebb6fcd", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/59cd848c0c4d5d958fc44e7d3a0491961ebb6fcd", "committedDate": "2020-09-01T13:52:49Z", "message": "TSK-1349: remove html coverage to optimize test speed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c18179c45529594f0f645dee8c24295fb3f19598", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/c18179c45529594f0f645dee8c24295fb3f19598", "committedDate": "2020-09-01T13:52:49Z", "message": "TSK-1349: init workbasket access items testing env"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29e1237a0aef21f80b7137ec2c592878861911e7", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/29e1237a0aef21f80b7137ec2c592878861911e7", "committedDate": "2020-09-01T13:52:49Z", "message": "TSK-1349: update workbasket access items unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76d2fd10a39c0ae95e74a20093e801e4bb743b18", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/76d2fd10a39c0ae95e74a20093e801e4bb743b18", "committedDate": "2020-09-01T13:53:13Z", "message": "Merge branch 'TSK-1349-workbasket-access-items' of https://github.com/cnguyen-de/taskana into TSK-1349-workbasket-access-items"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bf22b1c6b8bd0ab432ccf423a55647ee09b600b", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/4bf22b1c6b8bd0ab432ccf423a55647ee09b600b", "committedDate": "2020-09-01T13:58:12Z", "message": "TSK-1349: fixed duplicated classifications entry in mock store"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5Nzk5MTY3", "url": "https://github.com/Taskana/taskana/pull/1246#pullrequestreview-479799167", "createdAt": "2020-09-01T14:29:36Z", "commit": {"oid": "4bf22b1c6b8bd0ab432ccf423a55647ee09b600b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNDoyOTozNlrOHK49Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNDozNzoyMlrOHK5UfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE4MDk2Mw==", "bodyText": "'done' is unused, isn't it?", "url": "https://github.com/Taskana/taskana/pull/1246#discussion_r481180963", "createdAt": "2020-09-01T14:29:36Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-access-items/workbasket-access-items.component.spec.ts", "diffHunk": "@@ -0,0 +1,194 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketAccessItemsComponent } from './workbasket-access-items.component';\n+import { Component, DebugElement, Input } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { TypeAheadComponent } from '../../../shared/components/type-ahead/type-ahead.component';\n+import { TypeaheadModule } from 'ngx-bootstrap';\n+import { SavingWorkbasketService } from '../../services/saving-workbaskets.service';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { SelectedRouteService } from '../../../shared/services/selected-route/selected-route';\n+import { StartupService } from '../../../shared/services/startup/startup.service';\n+import { TaskanaEngineService } from '../../../shared/services/taskana-engine/taskana-engine.service';\n+import { WindowRefService } from '../../../shared/services/window/window.service';\n+import {\n+  workbasketAccessItemsMock,\n+  engineConfigurationMock,\n+  selectedWorkbasketMock\n+} from '../../../shared/store/mock-data/mock-store';\n+import {\n+  GetWorkbasketAccessItems,\n+  UpdateWorkbasketAccessItems\n+} from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { ACTION } from '../../../shared/models/action';\n+import { WorkbasketAccessItems } from '../../../shared/models/workbasket-access-items';\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+  @Input() positionClass: string;\n+}\n+\n+const savingWorkbasketServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<SavingWorkbasketService> => ({\n+    triggeredAccessItemsSaving: jest.fn().mockReturnValue(of(true))\n+  })\n+);\n+\n+const requestInProgressServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<RequestInProgressService> => ({\n+    setRequestInProgress: jest.fn()\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const notificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    triggerError: showDialogFn,\n+    showToast: showDialogFn\n+  })\n+);\n+\n+const validateFormInformationFn = jest.fn().mockImplementation((): Promise<any> => Promise.resolve(true));\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: jest.fn().mockReturnValue(true),\n+    validateInputOverflow: jest.fn(),\n+    validateFormInformation: validateFormInformationFn,\n+    get inputOverflowObservable(): Observable<Map<string, boolean>> {\n+      return of(new Map<string, boolean>());\n+    }\n+  })\n+);\n+\n+describe('WorkbasketAccessItemsComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketAccessItemsComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketAccessItemsComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        FormsModule,\n+        ReactiveFormsModule,\n+        TypeaheadModule.forRoot(),\n+        NgxsModule.forRoot([WorkbasketState, EngineConfigurationState]),\n+        HttpClientTestingModule,\n+        RouterTestingModule.withRoutes([]),\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [WorkbasketAccessItemsComponent, TypeAheadComponent, SpinnerStub],\n+      providers: [\n+        { provide: SavingWorkbasketService, useClass: savingWorkbasketServiceSpy },\n+        { provide: RequestInProgressService, useClass: requestInProgressServiceSpy },\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: notificationServiceSpy },\n+        ClassificationCategoriesService,\n+        WorkbasketService,\n+        DomainService,\n+        SelectedRouteService,\n+        StartupService,\n+        TaskanaEngineService,\n+        WindowRefService\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketAccessItemsComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    component.workbasket = { ...selectedWorkbasketMock };\n+    component.accessItemsRepresentation = workbasketAccessItemsMock;\n+    store.reset({\n+      ...store.snapshot(),\n+      engineConfiguration: engineConfigurationMock,\n+      workbasket: {\n+        workbasketAccessItems: workbasketAccessItemsMock\n+      }\n+    });\n+    fixture.detectChanges();\n+  }));\n+\n+  afterEach(async(() => {\n+    component.workbasket = { ...selectedWorkbasketMock };\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should initialize when accessItems exist', async((done) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bf22b1c6b8bd0ab432ccf423a55647ee09b600b"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE4Njk0MQ==", "bodyText": "Is it better to call expect(checkAllButton).toBeTruthy(); before checkAllButton.click();? In case this test fails, the click and the other test would have failed anyway.", "url": "https://github.com/Taskana/taskana/pull/1246#discussion_r481186941", "createdAt": "2020-09-01T14:37:22Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-access-items/workbasket-access-items.component.spec.ts", "diffHunk": "@@ -0,0 +1,194 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketAccessItemsComponent } from './workbasket-access-items.component';\n+import { Component, DebugElement, Input } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { TypeAheadComponent } from '../../../shared/components/type-ahead/type-ahead.component';\n+import { TypeaheadModule } from 'ngx-bootstrap';\n+import { SavingWorkbasketService } from '../../services/saving-workbaskets.service';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { SelectedRouteService } from '../../../shared/services/selected-route/selected-route';\n+import { StartupService } from '../../../shared/services/startup/startup.service';\n+import { TaskanaEngineService } from '../../../shared/services/taskana-engine/taskana-engine.service';\n+import { WindowRefService } from '../../../shared/services/window/window.service';\n+import {\n+  workbasketAccessItemsMock,\n+  engineConfigurationMock,\n+  selectedWorkbasketMock\n+} from '../../../shared/store/mock-data/mock-store';\n+import {\n+  GetWorkbasketAccessItems,\n+  UpdateWorkbasketAccessItems\n+} from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { ACTION } from '../../../shared/models/action';\n+import { WorkbasketAccessItems } from '../../../shared/models/workbasket-access-items';\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+  @Input() positionClass: string;\n+}\n+\n+const savingWorkbasketServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<SavingWorkbasketService> => ({\n+    triggeredAccessItemsSaving: jest.fn().mockReturnValue(of(true))\n+  })\n+);\n+\n+const requestInProgressServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<RequestInProgressService> => ({\n+    setRequestInProgress: jest.fn()\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const notificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    triggerError: showDialogFn,\n+    showToast: showDialogFn\n+  })\n+);\n+\n+const validateFormInformationFn = jest.fn().mockImplementation((): Promise<any> => Promise.resolve(true));\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: jest.fn().mockReturnValue(true),\n+    validateInputOverflow: jest.fn(),\n+    validateFormInformation: validateFormInformationFn,\n+    get inputOverflowObservable(): Observable<Map<string, boolean>> {\n+      return of(new Map<string, boolean>());\n+    }\n+  })\n+);\n+\n+describe('WorkbasketAccessItemsComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketAccessItemsComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketAccessItemsComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        FormsModule,\n+        ReactiveFormsModule,\n+        TypeaheadModule.forRoot(),\n+        NgxsModule.forRoot([WorkbasketState, EngineConfigurationState]),\n+        HttpClientTestingModule,\n+        RouterTestingModule.withRoutes([]),\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [WorkbasketAccessItemsComponent, TypeAheadComponent, SpinnerStub],\n+      providers: [\n+        { provide: SavingWorkbasketService, useClass: savingWorkbasketServiceSpy },\n+        { provide: RequestInProgressService, useClass: requestInProgressServiceSpy },\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: notificationServiceSpy },\n+        ClassificationCategoriesService,\n+        WorkbasketService,\n+        DomainService,\n+        SelectedRouteService,\n+        StartupService,\n+        TaskanaEngineService,\n+        WindowRefService\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketAccessItemsComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    component.workbasket = { ...selectedWorkbasketMock };\n+    component.accessItemsRepresentation = workbasketAccessItemsMock;\n+    store.reset({\n+      ...store.snapshot(),\n+      engineConfiguration: engineConfigurationMock,\n+      workbasket: {\n+        workbasketAccessItems: workbasketAccessItemsMock\n+      }\n+    });\n+    fixture.detectChanges();\n+  }));\n+\n+  afterEach(async(() => {\n+    component.workbasket = { ...selectedWorkbasketMock };\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should initialize when accessItems exist', async((done) => {\n+    component.action = ACTION.COPY;\n+    let actionDispatched = false;\n+    component.onSave = jest.fn().mockImplementation();\n+    actions$.pipe(ofActionDispatched(GetWorkbasketAccessItems)).subscribe(() => (actionDispatched = true));\n+    component.init();\n+    expect(component.initialized).toBe(true);\n+    expect(actionDispatched).toBe(true);\n+    expect(component.onSave).toHaveBeenCalled();\n+  }));\n+\n+  it(\"should discard initializing when accessItems don't exist\", () => {\n+    component.workbasket._links.accessItems = null;\n+    component.init();\n+    expect(component.initialized).toBe(false);\n+  });\n+\n+  it('should add accessItems when add access item button is clicked', () => {\n+    const addAccessItemButton = debugElement.nativeElement.querySelector('button.add-access-item');\n+    const clearSpy = jest.spyOn(component, 'addAccessItem');\n+    addAccessItemButton.click();\n+    expect(addAccessItemButton.title).toMatch('Add new access');\n+    expect(clearSpy).toHaveBeenCalled();\n+  });\n+\n+  it('should undo changes when undo button is clicked', () => {\n+    const undoButton = debugElement.nativeElement.querySelector('button.undo-button');\n+    const clearSpy = jest.spyOn(component, 'clear');\n+    undoButton.click();\n+    expect(undoButton.title).toMatch('Undo Changes');\n+    expect(clearSpy).toHaveBeenCalled();\n+  });\n+\n+  it('should check all permissions when check all box is checked', () => {\n+    const checkAllSpy = jest.spyOn(component, 'checkAll');\n+    const checkAllButton = debugElement.nativeElement.querySelector('#checkbox-0-00');\n+    checkAllButton.click();\n+    expect(checkAllSpy).toHaveBeenCalled();\n+    expect(checkAllButton).toBeTruthy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bf22b1c6b8bd0ab432ccf423a55647ee09b600b"}, "originalPosition": 172}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e1db8864f89d6a448275682b5a1a5a48544bbad", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/3e1db8864f89d6a448275682b5a1a5a48544bbad", "committedDate": "2020-09-02T08:39:47Z", "message": "TSK-1349: refine tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ea50915ac68830716a69795ed0ba89d7a789968", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/3ea50915ac68830716a69795ed0ba89d7a789968", "committedDate": "2020-09-02T08:53:43Z", "message": "TSK-1349: update test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNjIzNzAz", "url": "https://github.com/Taskana/taskana/pull/1246#pullrequestreview-480623703", "createdAt": "2020-09-02T09:02:28Z", "commit": {"oid": "3ea50915ac68830716a69795ed0ba89d7a789968"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4474, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}