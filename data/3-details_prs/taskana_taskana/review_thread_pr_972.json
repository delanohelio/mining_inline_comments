{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2Njk2NzAw", "number": 972, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTowODo0MVrODnYhKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODo0MzowM1rODooKTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjIyNzYyOnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTowODo0MVrOF1WP1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMzoyMDoxOFrOF1eQoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ4MzM0OA==", "bodyText": "Factory method 'newTaskComment' missing", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r391483348", "createdAt": "2020-03-12T09:08:41Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "diffHunk": "@@ -366,6 +370,77 @@ void forceDeleteTask(String taskId)\n   List<String> updateTasks(List<String> taskIds, Map<String, String> customFieldsToUpdate)\n       throws InvalidArgumentException;\n \n+  /**\n+   * Create a task comment.\n+   *\n+   * @param taskComment the task comment to be created.\n+   * @return the created task comment.\n+   * @throws NotAuthorizedException If the current user has no authorization to create a task\n+   *     comment for the given taskId in the TaskComment.\n+   * @throws TaskCommentAlreadyExistException If the task comment already exists.\n+   * @throws TaskNotFoundException If the given taskId in the TaskComment does not refer to an\n+   *     existing task.\n+   */\n+  TaskComment createTaskComment(TaskComment taskComment)\n+      throws NotAuthorizedException, TaskCommentAlreadyExistException, TaskNotFoundException;\n+\n+  /**\n+   * Update a task comment.\n+   *\n+   * @param taskComment the task comment to be updated in the database.\n+   * @return the updated task comment.\n+   * @throws NotAuthorizedException If the current user has no authorization to update a task\n+   *     comment.\n+   * @throws ConcurrencyException if an attempt is made to update the task comment and another user.\n+   *     updated it already.\n+   * @throws TaskCommentNotFoundException If the given taskCommentId in the TaskComment does not\n+   *     refer to an existing taskComment.\n+   * @throws TaskNotFoundException If the given taskId in the TaskComment does not refer to an\n+   *     existing task.\n+   */\n+  TaskComment updateTaskComment(TaskComment taskComment)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException;\n+\n+  /**\n+   * Deletes the task comment with the given Id.\n+   *\n+   * @param taskCommentId The id of the task comment to delete.\n+   * @throws NotAuthorizedException If the current user has no authorization to delete a task\n+   *     comment\n+   * @throws InvalidArgumentException If the taskCommentId is null/empty\n+   * @throws TaskCommentNotFoundException If the given taskCommentId in the TaskComment does not\n+   *     refer to an existing taskComment.\n+   * @throws TaskNotFoundException If the given taskId in the TaskComment does not refer to an\n+   *     existing task.\n+   */\n+  void deleteTaskComment(String taskCommentId)\n+      throws NotAuthorizedException, TaskCommentNotFoundException, TaskNotFoundException,\n+          InvalidArgumentException;\n+\n+  /**\n+   * Retrieves a task comment for a given taskCommentId.\n+   *\n+   * @param taskCommentId The id of the task comment which should be retrieved\n+   * @throws TaskCommentNotFoundException If the given taskCommentId in the TaskComment does not\n+   *     refer to an existing taskComment.\n+   */\n+  TaskComment getTaskComment(String taskCommentId) throws TaskCommentNotFoundException;\n+\n+  /**\n+   * Retrieves a list of task comments for a given taskId.\n+   *\n+   * @param taskId The id of the task for which all task comments should be retrieved\n+   * @throws TaskCommentNotFoundException If the given taskCommentId in the TaskComment does not\n+   *     refer to an existing taskComment.\n+   * @throws NotAuthorizedException If the current user has no authorization to retrieve a\n+   *     taskComment from a certain task\n+   * @throws TaskNotFoundException If the given taskId in the TaskComment does not refer to an\n+   *     existing task.\n+   */\n+  List<TaskCommentImpl> getTaskComments(String taskId)\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0179487f7244b9e86ab8089e9b49986b55378733"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYxNDYyNQ==", "bodyText": "Added factory method", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r391614625", "createdAt": "2020-03-12T13:20:18Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "diffHunk": "@@ -366,6 +370,77 @@ void forceDeleteTask(String taskId)\n   List<String> updateTasks(List<String> taskIds, Map<String, String> customFieldsToUpdate)\n       throws InvalidArgumentException;\n \n+  /**\n+   * Create a task comment.\n+   *\n+   * @param taskComment the task comment to be created.\n+   * @return the created task comment.\n+   * @throws NotAuthorizedException If the current user has no authorization to create a task\n+   *     comment for the given taskId in the TaskComment.\n+   * @throws TaskCommentAlreadyExistException If the task comment already exists.\n+   * @throws TaskNotFoundException If the given taskId in the TaskComment does not refer to an\n+   *     existing task.\n+   */\n+  TaskComment createTaskComment(TaskComment taskComment)\n+      throws NotAuthorizedException, TaskCommentAlreadyExistException, TaskNotFoundException;\n+\n+  /**\n+   * Update a task comment.\n+   *\n+   * @param taskComment the task comment to be updated in the database.\n+   * @return the updated task comment.\n+   * @throws NotAuthorizedException If the current user has no authorization to update a task\n+   *     comment.\n+   * @throws ConcurrencyException if an attempt is made to update the task comment and another user.\n+   *     updated it already.\n+   * @throws TaskCommentNotFoundException If the given taskCommentId in the TaskComment does not\n+   *     refer to an existing taskComment.\n+   * @throws TaskNotFoundException If the given taskId in the TaskComment does not refer to an\n+   *     existing task.\n+   */\n+  TaskComment updateTaskComment(TaskComment taskComment)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException;\n+\n+  /**\n+   * Deletes the task comment with the given Id.\n+   *\n+   * @param taskCommentId The id of the task comment to delete.\n+   * @throws NotAuthorizedException If the current user has no authorization to delete a task\n+   *     comment\n+   * @throws InvalidArgumentException If the taskCommentId is null/empty\n+   * @throws TaskCommentNotFoundException If the given taskCommentId in the TaskComment does not\n+   *     refer to an existing taskComment.\n+   * @throws TaskNotFoundException If the given taskId in the TaskComment does not refer to an\n+   *     existing task.\n+   */\n+  void deleteTaskComment(String taskCommentId)\n+      throws NotAuthorizedException, TaskCommentNotFoundException, TaskNotFoundException,\n+          InvalidArgumentException;\n+\n+  /**\n+   * Retrieves a task comment for a given taskCommentId.\n+   *\n+   * @param taskCommentId The id of the task comment which should be retrieved\n+   * @throws TaskCommentNotFoundException If the given taskCommentId in the TaskComment does not\n+   *     refer to an existing taskComment.\n+   */\n+  TaskComment getTaskComment(String taskCommentId) throws TaskCommentNotFoundException;\n+\n+  /**\n+   * Retrieves a list of task comments for a given taskId.\n+   *\n+   * @param taskId The id of the task for which all task comments should be retrieved\n+   * @throws TaskCommentNotFoundException If the given taskCommentId in the TaskComment does not\n+   *     refer to an existing taskComment.\n+   * @throws NotAuthorizedException If the current user has no authorization to retrieve a\n+   *     taskComment from a certain task\n+   * @throws TaskNotFoundException If the given taskId in the TaskComment does not refer to an\n+   *     existing task.\n+   */\n+  List<TaskCommentImpl> getTaskComments(String taskId)\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ4MzM0OA=="}, "originalCommit": {"oid": "0179487f7244b9e86ab8089e9b49986b55378733"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjIzMDY1OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/models/TaskComment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTowOTo0MFrOF1WRqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMzoxOToxM1rOF1eOMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ4MzgxOA==", "bodyText": "Setter methods missing. The API user should be able to do all required work by only using interfaces.", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r391483818", "createdAt": "2020-03-12T09:09:40Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/models/TaskComment.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package pro.taskana.task.api.models;\n+\n+import java.time.Instant;\n+\n+/** TaskComment-Interface to specify TaskComment Attributes. */\n+public interface TaskComment {\n+\n+  /**\n+   * Gets the id of the task comment.\n+   *\n+   * @return taskId\n+   */\n+  String getId();\n+\n+  /**\n+   * Gets the id of the associated task.\n+   *\n+   * @return taskId\n+   */\n+  String getTaskId();\n+\n+  /**\n+   * Gets the name of the task comment-creator.\n+   *\n+   * @return creator\n+   */\n+  String getCreator();\n+\n+  /**\n+   * Gets the text field of the task comment.\n+   *\n+   * @return textField\n+   */\n+  String getTextField();\n+\n+  /**\n+   * Gets the time when the task comment was created.\n+   *\n+   * @return the created Instant\n+   */\n+  Instant getCreated();\n+\n+  /**\n+   * Gets the time when the task comment was last modified.\n+   *\n+   * @return the last modified Instant\n+   */\n+  Instant getModified();\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0179487f7244b9e86ab8089e9b49986b55378733"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYxNDAwMA==", "bodyText": "Added setter for textField", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r391614000", "createdAt": "2020-03-12T13:19:13Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/models/TaskComment.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package pro.taskana.task.api.models;\n+\n+import java.time.Instant;\n+\n+/** TaskComment-Interface to specify TaskComment Attributes. */\n+public interface TaskComment {\n+\n+  /**\n+   * Gets the id of the task comment.\n+   *\n+   * @return taskId\n+   */\n+  String getId();\n+\n+  /**\n+   * Gets the id of the associated task.\n+   *\n+   * @return taskId\n+   */\n+  String getTaskId();\n+\n+  /**\n+   * Gets the name of the task comment-creator.\n+   *\n+   * @return creator\n+   */\n+  String getCreator();\n+\n+  /**\n+   * Gets the text field of the task comment.\n+   *\n+   * @return textField\n+   */\n+  String getTextField();\n+\n+  /**\n+   * Gets the time when the task comment was created.\n+   *\n+   * @return the created Instant\n+   */\n+  Instant getCreated();\n+\n+  /**\n+   * Gets the time when the task comment was last modified.\n+   *\n+   * @return the last modified Instant\n+   */\n+  Instant getModified();\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ4MzgxOA=="}, "originalCommit": {"oid": "0179487f7244b9e86ab8089e9b49986b55378733"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjM2MjA2OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTo0Nzo1OFrOF1XjkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMzoxOToyMVrOF1eOfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwNDc4NA==", "bodyText": "should return taskCommentImplToCreate", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r391504784", "createdAt": "2020-03-12T09:47:58Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "diffHunk": "@@ -0,0 +1,279 @@\n+package pro.taskana.task.internal;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import pro.taskana.common.api.exceptions.ConcurrencyException;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.InternalTaskanaEngine;\n+import pro.taskana.common.internal.security.CurrentUserContext;\n+import pro.taskana.common.internal.util.IdGenerator;\n+import pro.taskana.task.api.exceptions.TaskCommentAlreadyExistException;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskCommentServiceImpl {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TaskCommentServiceImpl.class);\n+\n+  private static final String NOT_AUTHORIZED =\n+      \" Not authorized, TaskComment creator and current user must match. TaskComment creator is \";\n+  private static final String BUT_CURRENT_USER_IS = \" but current user is \";\n+  private static final String ID_PREFIX_TASK_COMMENT = \"TCI\";\n+  private InternalTaskanaEngine taskanaEngine;\n+  private TaskServiceImpl taskService;\n+  private TaskCommentMapper taskCommentMapper;\n+\n+  TaskCommentServiceImpl(\n+      InternalTaskanaEngine taskanaEngine,\n+      TaskCommentMapper taskCommentMapper,\n+      TaskServiceImpl taskService) {\n+    super();\n+    this.taskanaEngine = taskanaEngine;\n+    this.taskService = taskService;\n+    this.taskCommentMapper = taskCommentMapper;\n+  }\n+\n+  TaskComment updateTaskComment(TaskComment taskCommentToUpdate)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to updateTaskComment (taskComment = {})\", taskCommentToUpdate);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    TaskCommentImpl taskCommentImplToUpdate = (TaskCommentImpl) taskCommentToUpdate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToUpdate.getTaskId());\n+\n+      if (taskCommentToUpdate.getCreator().equals(userId)) {\n+\n+        TaskCommentImpl oldTaskComment = getTaskComment(taskCommentImplToUpdate.getId());\n+\n+        checkModifiedHasNotChanged(oldTaskComment, taskCommentImplToUpdate);\n+\n+        taskCommentImplToUpdate.setModified(Instant.now());\n+\n+        taskCommentMapper.update(taskCommentImplToUpdate);\n+\n+        LOGGER.debug(\n+            \"Method updateTaskComment() updated taskComment '{}' for user '{}'.\",\n+            taskCommentImplToUpdate.getId(),\n+            userId);\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentImplToUpdate.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from updateTaskComment()\");\n+    }\n+\n+    return taskCommentToUpdate;\n+  }\n+\n+  TaskComment createTaskComment(TaskComment taskCommentToCreate)\n+      throws NotAuthorizedException, TaskCommentAlreadyExistException, TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to setTaskComment (taskCommentToCreate = {})\", taskCommentToCreate);\n+\n+    TaskCommentImpl taskCommentImplToCreate = (TaskCommentImpl) taskCommentToCreate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToCreate.getTaskId());\n+\n+      if (isTaskCommentAlreadyExisting(taskCommentImplToCreate.getId())) {\n+        throw new TaskCommentAlreadyExistException(taskCommentImplToCreate.getId());\n+      }\n+\n+      initDefaultTaskCommentValues(taskCommentImplToCreate);\n+\n+      taskCommentMapper.insert(taskCommentImplToCreate);\n+\n+    } finally {\n+\n+      taskanaEngine.returnConnection();\n+\n+      LOGGER.debug(\"exit from setTaskComment()\");\n+    }\n+\n+    return taskCommentToCreate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0179487f7244b9e86ab8089e9b49986b55378733"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYxNDA3OQ==", "bodyText": "Done", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r391614079", "createdAt": "2020-03-12T13:19:21Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "diffHunk": "@@ -0,0 +1,279 @@\n+package pro.taskana.task.internal;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import pro.taskana.common.api.exceptions.ConcurrencyException;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.InternalTaskanaEngine;\n+import pro.taskana.common.internal.security.CurrentUserContext;\n+import pro.taskana.common.internal.util.IdGenerator;\n+import pro.taskana.task.api.exceptions.TaskCommentAlreadyExistException;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskCommentServiceImpl {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TaskCommentServiceImpl.class);\n+\n+  private static final String NOT_AUTHORIZED =\n+      \" Not authorized, TaskComment creator and current user must match. TaskComment creator is \";\n+  private static final String BUT_CURRENT_USER_IS = \" but current user is \";\n+  private static final String ID_PREFIX_TASK_COMMENT = \"TCI\";\n+  private InternalTaskanaEngine taskanaEngine;\n+  private TaskServiceImpl taskService;\n+  private TaskCommentMapper taskCommentMapper;\n+\n+  TaskCommentServiceImpl(\n+      InternalTaskanaEngine taskanaEngine,\n+      TaskCommentMapper taskCommentMapper,\n+      TaskServiceImpl taskService) {\n+    super();\n+    this.taskanaEngine = taskanaEngine;\n+    this.taskService = taskService;\n+    this.taskCommentMapper = taskCommentMapper;\n+  }\n+\n+  TaskComment updateTaskComment(TaskComment taskCommentToUpdate)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to updateTaskComment (taskComment = {})\", taskCommentToUpdate);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    TaskCommentImpl taskCommentImplToUpdate = (TaskCommentImpl) taskCommentToUpdate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToUpdate.getTaskId());\n+\n+      if (taskCommentToUpdate.getCreator().equals(userId)) {\n+\n+        TaskCommentImpl oldTaskComment = getTaskComment(taskCommentImplToUpdate.getId());\n+\n+        checkModifiedHasNotChanged(oldTaskComment, taskCommentImplToUpdate);\n+\n+        taskCommentImplToUpdate.setModified(Instant.now());\n+\n+        taskCommentMapper.update(taskCommentImplToUpdate);\n+\n+        LOGGER.debug(\n+            \"Method updateTaskComment() updated taskComment '{}' for user '{}'.\",\n+            taskCommentImplToUpdate.getId(),\n+            userId);\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentImplToUpdate.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from updateTaskComment()\");\n+    }\n+\n+    return taskCommentToUpdate;\n+  }\n+\n+  TaskComment createTaskComment(TaskComment taskCommentToCreate)\n+      throws NotAuthorizedException, TaskCommentAlreadyExistException, TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to setTaskComment (taskCommentToCreate = {})\", taskCommentToCreate);\n+\n+    TaskCommentImpl taskCommentImplToCreate = (TaskCommentImpl) taskCommentToCreate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToCreate.getTaskId());\n+\n+      if (isTaskCommentAlreadyExisting(taskCommentImplToCreate.getId())) {\n+        throw new TaskCommentAlreadyExistException(taskCommentImplToCreate.getId());\n+      }\n+\n+      initDefaultTaskCommentValues(taskCommentImplToCreate);\n+\n+      taskCommentMapper.insert(taskCommentImplToCreate);\n+\n+    } finally {\n+\n+      taskanaEngine.returnConnection();\n+\n+      LOGGER.debug(\"exit from setTaskComment()\");\n+    }\n+\n+    return taskCommentToCreate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwNDc4NA=="}, "originalCommit": {"oid": "0179487f7244b9e86ab8089e9b49986b55378733"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjM2NzY0OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTo0OTozOFrOF1Xm9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMzoxOTozMVrOF1eO5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwNTY1NQ==", "bodyText": "if the Id is already set on createTaskComment call, an  InvalidArgumentException should be thrown.\nPlease modify createTask correspondingly...", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r391505655", "createdAt": "2020-03-12T09:49:38Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "diffHunk": "@@ -0,0 +1,279 @@\n+package pro.taskana.task.internal;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import pro.taskana.common.api.exceptions.ConcurrencyException;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.InternalTaskanaEngine;\n+import pro.taskana.common.internal.security.CurrentUserContext;\n+import pro.taskana.common.internal.util.IdGenerator;\n+import pro.taskana.task.api.exceptions.TaskCommentAlreadyExistException;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskCommentServiceImpl {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TaskCommentServiceImpl.class);\n+\n+  private static final String NOT_AUTHORIZED =\n+      \" Not authorized, TaskComment creator and current user must match. TaskComment creator is \";\n+  private static final String BUT_CURRENT_USER_IS = \" but current user is \";\n+  private static final String ID_PREFIX_TASK_COMMENT = \"TCI\";\n+  private InternalTaskanaEngine taskanaEngine;\n+  private TaskServiceImpl taskService;\n+  private TaskCommentMapper taskCommentMapper;\n+\n+  TaskCommentServiceImpl(\n+      InternalTaskanaEngine taskanaEngine,\n+      TaskCommentMapper taskCommentMapper,\n+      TaskServiceImpl taskService) {\n+    super();\n+    this.taskanaEngine = taskanaEngine;\n+    this.taskService = taskService;\n+    this.taskCommentMapper = taskCommentMapper;\n+  }\n+\n+  TaskComment updateTaskComment(TaskComment taskCommentToUpdate)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to updateTaskComment (taskComment = {})\", taskCommentToUpdate);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    TaskCommentImpl taskCommentImplToUpdate = (TaskCommentImpl) taskCommentToUpdate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToUpdate.getTaskId());\n+\n+      if (taskCommentToUpdate.getCreator().equals(userId)) {\n+\n+        TaskCommentImpl oldTaskComment = getTaskComment(taskCommentImplToUpdate.getId());\n+\n+        checkModifiedHasNotChanged(oldTaskComment, taskCommentImplToUpdate);\n+\n+        taskCommentImplToUpdate.setModified(Instant.now());\n+\n+        taskCommentMapper.update(taskCommentImplToUpdate);\n+\n+        LOGGER.debug(\n+            \"Method updateTaskComment() updated taskComment '{}' for user '{}'.\",\n+            taskCommentImplToUpdate.getId(),\n+            userId);\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentImplToUpdate.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from updateTaskComment()\");\n+    }\n+\n+    return taskCommentToUpdate;\n+  }\n+\n+  TaskComment createTaskComment(TaskComment taskCommentToCreate)\n+      throws NotAuthorizedException, TaskCommentAlreadyExistException, TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to setTaskComment (taskCommentToCreate = {})\", taskCommentToCreate);\n+\n+    TaskCommentImpl taskCommentImplToCreate = (TaskCommentImpl) taskCommentToCreate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToCreate.getTaskId());\n+\n+      if (isTaskCommentAlreadyExisting(taskCommentImplToCreate.getId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0179487f7244b9e86ab8089e9b49986b55378733"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYxNDE4Mg==", "bodyText": "Done", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r391614182", "createdAt": "2020-03-12T13:19:31Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "diffHunk": "@@ -0,0 +1,279 @@\n+package pro.taskana.task.internal;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import pro.taskana.common.api.exceptions.ConcurrencyException;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.InternalTaskanaEngine;\n+import pro.taskana.common.internal.security.CurrentUserContext;\n+import pro.taskana.common.internal.util.IdGenerator;\n+import pro.taskana.task.api.exceptions.TaskCommentAlreadyExistException;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskCommentServiceImpl {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TaskCommentServiceImpl.class);\n+\n+  private static final String NOT_AUTHORIZED =\n+      \" Not authorized, TaskComment creator and current user must match. TaskComment creator is \";\n+  private static final String BUT_CURRENT_USER_IS = \" but current user is \";\n+  private static final String ID_PREFIX_TASK_COMMENT = \"TCI\";\n+  private InternalTaskanaEngine taskanaEngine;\n+  private TaskServiceImpl taskService;\n+  private TaskCommentMapper taskCommentMapper;\n+\n+  TaskCommentServiceImpl(\n+      InternalTaskanaEngine taskanaEngine,\n+      TaskCommentMapper taskCommentMapper,\n+      TaskServiceImpl taskService) {\n+    super();\n+    this.taskanaEngine = taskanaEngine;\n+    this.taskService = taskService;\n+    this.taskCommentMapper = taskCommentMapper;\n+  }\n+\n+  TaskComment updateTaskComment(TaskComment taskCommentToUpdate)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to updateTaskComment (taskComment = {})\", taskCommentToUpdate);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    TaskCommentImpl taskCommentImplToUpdate = (TaskCommentImpl) taskCommentToUpdate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToUpdate.getTaskId());\n+\n+      if (taskCommentToUpdate.getCreator().equals(userId)) {\n+\n+        TaskCommentImpl oldTaskComment = getTaskComment(taskCommentImplToUpdate.getId());\n+\n+        checkModifiedHasNotChanged(oldTaskComment, taskCommentImplToUpdate);\n+\n+        taskCommentImplToUpdate.setModified(Instant.now());\n+\n+        taskCommentMapper.update(taskCommentImplToUpdate);\n+\n+        LOGGER.debug(\n+            \"Method updateTaskComment() updated taskComment '{}' for user '{}'.\",\n+            taskCommentImplToUpdate.getId(),\n+            userId);\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentImplToUpdate.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from updateTaskComment()\");\n+    }\n+\n+    return taskCommentToUpdate;\n+  }\n+\n+  TaskComment createTaskComment(TaskComment taskCommentToCreate)\n+      throws NotAuthorizedException, TaskCommentAlreadyExistException, TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to setTaskComment (taskCommentToCreate = {})\", taskCommentToCreate);\n+\n+    TaskCommentImpl taskCommentImplToCreate = (TaskCommentImpl) taskCommentToCreate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToCreate.getTaskId());\n+\n+      if (isTaskCommentAlreadyExisting(taskCommentImplToCreate.getId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwNTY1NQ=="}, "originalCommit": {"oid": "0179487f7244b9e86ab8089e9b49986b55378733"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDA0NjM2OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwODoxOToxNVrOF167pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzo0OTowOVrOF2EUyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA4NDM5MA==", "bodyText": "This implies that only the creator of the task comment is able to delete it.\nShouldn't there be the possibility for someone else to delete the task comment, may be an administrator ???", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392084390", "createdAt": "2020-03-13T08:19:15Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package pro.taskana.task.internal;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import pro.taskana.common.api.exceptions.ConcurrencyException;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.InternalTaskanaEngine;\n+import pro.taskana.common.internal.security.CurrentUserContext;\n+import pro.taskana.common.internal.util.IdGenerator;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskCommentServiceImpl {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TaskCommentServiceImpl.class);\n+\n+  private static final String NOT_AUTHORIZED =\n+      \" Not authorized, TaskComment creator and current user must match. TaskComment creator is \";\n+  private static final String BUT_CURRENT_USER_IS = \" but current user is \";\n+  private static final String ID_PREFIX_TASK_COMMENT = \"TCI\";\n+  private InternalTaskanaEngine taskanaEngine;\n+  private TaskServiceImpl taskService;\n+  private TaskCommentMapper taskCommentMapper;\n+\n+  TaskCommentServiceImpl(\n+      InternalTaskanaEngine taskanaEngine,\n+      TaskCommentMapper taskCommentMapper,\n+      TaskServiceImpl taskService) {\n+    super();\n+    this.taskanaEngine = taskanaEngine;\n+    this.taskService = taskService;\n+    this.taskCommentMapper = taskCommentMapper;\n+  }\n+\n+  TaskComment newTaskComment(String taskId) {\n+\n+    LOGGER.debug(\"entry to newTaskComment (taskId = {})\", taskId);\n+\n+    TaskCommentImpl taskComment = new TaskCommentImpl();\n+    taskComment.setTaskId(taskId);\n+\n+    LOGGER.debug(\"exit from newTaskComment(), returning {}\", taskComment);\n+\n+    return taskComment;\n+  }\n+\n+  TaskComment updateTaskComment(TaskComment taskCommentToUpdate)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to updateTaskComment (taskComment = {})\", taskCommentToUpdate);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    TaskCommentImpl taskCommentImplToUpdate = (TaskCommentImpl) taskCommentToUpdate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToUpdate.getTaskId());\n+\n+      if (taskCommentToUpdate.getCreator().equals(userId)) {\n+\n+        TaskComment oldTaskComment = getTaskComment(taskCommentImplToUpdate.getId());\n+\n+        checkModifiedHasNotChanged(oldTaskComment, taskCommentImplToUpdate);\n+\n+        taskCommentImplToUpdate.setModified(Instant.now());\n+\n+        taskCommentMapper.update(taskCommentImplToUpdate);\n+\n+        LOGGER.debug(\n+            \"Method updateTaskComment() updated taskComment '{}' for user '{}'.\",\n+            taskCommentImplToUpdate.getId(),\n+            userId);\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentImplToUpdate.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from updateTaskComment()\");\n+    }\n+\n+    return taskCommentImplToUpdate;\n+  }\n+\n+  TaskComment createTaskComment(TaskComment taskCommentToCreate)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to setTaskComment (taskCommentToCreate = {})\", taskCommentToCreate);\n+\n+    TaskCommentImpl taskCommentImplToCreate = (TaskCommentImpl) taskCommentToCreate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToCreate.getTaskId());\n+\n+      validateNoneExistingTaskCommentId(taskCommentImplToCreate.getId());\n+\n+      initDefaultTaskCommentValues(taskCommentImplToCreate);\n+\n+      taskCommentMapper.insert(taskCommentImplToCreate);\n+\n+    } finally {\n+\n+      taskanaEngine.returnConnection();\n+\n+      LOGGER.debug(\"exit from setTaskComment()\");\n+    }\n+\n+    return taskCommentImplToCreate;\n+  }\n+\n+  void deleteTaskComment(String taskCommentId)\n+      throws NotAuthorizedException, TaskCommentNotFoundException, TaskNotFoundException,\n+          InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to deleteTaskComment (taskComment = {}\", taskCommentId);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    validateExistingTaskCommentId(taskCommentId);\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      TaskComment taskCommentToDelete = getTaskComment(taskCommentId);\n+\n+      if (taskCommentToDelete != null) {\n+\n+        taskService.getTask(taskCommentToDelete.getTaskId());\n+\n+      } else {\n+        throw new TaskCommentNotFoundException(\n+            taskCommentId, String.format(\"The TaskComment with ID %s wasn't found\", taskCommentId));\n+      }\n+\n+      if (taskCommentToDelete.getCreator().equals(userId)) {\n+\n+        taskCommentMapper.delete(taskCommentId);\n+\n+        LOGGER.debug(\"taskComment {} deleted\", taskCommentToDelete.getId());\n+\n+      } else {\n+        throw new NotAuthorizedException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIzODI4MA==", "bodyText": "Added possibility for admin (also for update)", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392238280", "createdAt": "2020-03-13T13:49:09Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package pro.taskana.task.internal;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import pro.taskana.common.api.exceptions.ConcurrencyException;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.InternalTaskanaEngine;\n+import pro.taskana.common.internal.security.CurrentUserContext;\n+import pro.taskana.common.internal.util.IdGenerator;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskCommentServiceImpl {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TaskCommentServiceImpl.class);\n+\n+  private static final String NOT_AUTHORIZED =\n+      \" Not authorized, TaskComment creator and current user must match. TaskComment creator is \";\n+  private static final String BUT_CURRENT_USER_IS = \" but current user is \";\n+  private static final String ID_PREFIX_TASK_COMMENT = \"TCI\";\n+  private InternalTaskanaEngine taskanaEngine;\n+  private TaskServiceImpl taskService;\n+  private TaskCommentMapper taskCommentMapper;\n+\n+  TaskCommentServiceImpl(\n+      InternalTaskanaEngine taskanaEngine,\n+      TaskCommentMapper taskCommentMapper,\n+      TaskServiceImpl taskService) {\n+    super();\n+    this.taskanaEngine = taskanaEngine;\n+    this.taskService = taskService;\n+    this.taskCommentMapper = taskCommentMapper;\n+  }\n+\n+  TaskComment newTaskComment(String taskId) {\n+\n+    LOGGER.debug(\"entry to newTaskComment (taskId = {})\", taskId);\n+\n+    TaskCommentImpl taskComment = new TaskCommentImpl();\n+    taskComment.setTaskId(taskId);\n+\n+    LOGGER.debug(\"exit from newTaskComment(), returning {}\", taskComment);\n+\n+    return taskComment;\n+  }\n+\n+  TaskComment updateTaskComment(TaskComment taskCommentToUpdate)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to updateTaskComment (taskComment = {})\", taskCommentToUpdate);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    TaskCommentImpl taskCommentImplToUpdate = (TaskCommentImpl) taskCommentToUpdate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToUpdate.getTaskId());\n+\n+      if (taskCommentToUpdate.getCreator().equals(userId)) {\n+\n+        TaskComment oldTaskComment = getTaskComment(taskCommentImplToUpdate.getId());\n+\n+        checkModifiedHasNotChanged(oldTaskComment, taskCommentImplToUpdate);\n+\n+        taskCommentImplToUpdate.setModified(Instant.now());\n+\n+        taskCommentMapper.update(taskCommentImplToUpdate);\n+\n+        LOGGER.debug(\n+            \"Method updateTaskComment() updated taskComment '{}' for user '{}'.\",\n+            taskCommentImplToUpdate.getId(),\n+            userId);\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentImplToUpdate.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from updateTaskComment()\");\n+    }\n+\n+    return taskCommentImplToUpdate;\n+  }\n+\n+  TaskComment createTaskComment(TaskComment taskCommentToCreate)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to setTaskComment (taskCommentToCreate = {})\", taskCommentToCreate);\n+\n+    TaskCommentImpl taskCommentImplToCreate = (TaskCommentImpl) taskCommentToCreate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToCreate.getTaskId());\n+\n+      validateNoneExistingTaskCommentId(taskCommentImplToCreate.getId());\n+\n+      initDefaultTaskCommentValues(taskCommentImplToCreate);\n+\n+      taskCommentMapper.insert(taskCommentImplToCreate);\n+\n+    } finally {\n+\n+      taskanaEngine.returnConnection();\n+\n+      LOGGER.debug(\"exit from setTaskComment()\");\n+    }\n+\n+    return taskCommentImplToCreate;\n+  }\n+\n+  void deleteTaskComment(String taskCommentId)\n+      throws NotAuthorizedException, TaskCommentNotFoundException, TaskNotFoundException,\n+          InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to deleteTaskComment (taskComment = {}\", taskCommentId);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    validateExistingTaskCommentId(taskCommentId);\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      TaskComment taskCommentToDelete = getTaskComment(taskCommentId);\n+\n+      if (taskCommentToDelete != null) {\n+\n+        taskService.getTask(taskCommentToDelete.getTaskId());\n+\n+      } else {\n+        throw new TaskCommentNotFoundException(\n+            taskCommentId, String.format(\"The TaskComment with ID %s wasn't found\", taskCommentId));\n+      }\n+\n+      if (taskCommentToDelete.getCreator().equals(userId)) {\n+\n+        taskCommentMapper.delete(taskCommentId);\n+\n+        LOGGER.debug(\"taskComment {} deleted\", taskCommentToDelete.getId());\n+\n+      } else {\n+        throw new NotAuthorizedException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA4NDM5MA=="}, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDA5OTYxOnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/resources/sql/taskana-schema-db2.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwODo0MDozNVrOF17coA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzo0OToxOFrOF2EVGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA5MjgzMg==", "bodyText": "We are currently in version 2.0.2-SNAPSHOT. This implies, the feature is introduced with version 2.0.2\nTherefore, the schema version should be '2.0.2'", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392092832", "createdAt": "2020-03-13T08:40:35Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/resources/sql/taskana-schema-db2.sql", "diffHunk": "@@ -7,7 +7,7 @@ CREATE TABLE TASKANA_SCHEMA_VERSION(\n         PRIMARY KEY (ID)\n );\n -- The VERSION value must match the value of TaskanaEngineConfiguration.TASKANA_SCHEMA_VERSION\n-INSERT INTO TASKANA_SCHEMA_VERSION (VERSION, CREATED) VALUES ('1.2.1', CURRENT_TIMESTAMP);\n+INSERT INTO TASKANA_SCHEMA_VERSION (VERSION, CREATED) VALUES ('2.0.1', CURRENT_TIMESTAMP);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIzODM2MQ==", "bodyText": "done", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392238361", "createdAt": "2020-03-13T13:49:18Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/resources/sql/taskana-schema-db2.sql", "diffHunk": "@@ -7,7 +7,7 @@ CREATE TABLE TASKANA_SCHEMA_VERSION(\n         PRIMARY KEY (ID)\n );\n -- The VERSION value must match the value of TaskanaEngineConfiguration.TASKANA_SCHEMA_VERSION\n-INSERT INTO TASKANA_SCHEMA_VERSION (VERSION, CREATED) VALUES ('1.2.1', CURRENT_TIMESTAMP);\n+INSERT INTO TASKANA_SCHEMA_VERSION (VERSION, CREATED) VALUES ('2.0.1', CURRENT_TIMESTAMP);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA5MjgzMg=="}, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDEwMTg1OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/TaskanaEngineConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwODo0MToxNlrOF17d9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzo1MjoxNFrOF2Eb4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA5MzE3Mg==", "bodyText": "should be '2.0.2'", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392093172", "createdAt": "2020-03-13T08:41:16Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/TaskanaEngineConfiguration.java", "diffHunk": "@@ -43,7 +43,7 @@\n public class TaskanaEngineConfiguration {\n \n   protected static final String TASKANA_SCHEMA_VERSION =\n-      \"1.2.1\"; // must match the VERSION value in table\n+      \"2.0.1\"; // must match the VERSION value in table", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0MDA5Nw==", "bodyText": "done", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392240097", "createdAt": "2020-03-13T13:52:14Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/java/pro/taskana/TaskanaEngineConfiguration.java", "diffHunk": "@@ -43,7 +43,7 @@\n public class TaskanaEngineConfiguration {\n \n   protected static final String TASKANA_SCHEMA_VERSION =\n-      \"1.2.1\"; // must match the VERSION value in table\n+      \"2.0.1\"; // must match the VERSION value in table", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA5MzE3Mg=="}, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDEwMzA4OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/resources/sql/taskana-schema-postgres.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwODo0MTo0MlrOF17euw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzo0OToyNFrOF2EVVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA5MzM3MQ==", "bodyText": "Should be '2.0.2'", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392093371", "createdAt": "2020-03-13T08:41:42Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/resources/sql/taskana-schema-postgres.sql", "diffHunk": "@@ -9,7 +9,7 @@ CREATE TABLE TASKANA_SCHEMA_VERSION(\n         PRIMARY KEY (ID)\n );\n -- The VERSION value must match the value of TaskanaEngineConfiguration.TASKANA_SCHEMA_VERSION\n-INSERT INTO TASKANA_SCHEMA_VERSION (VERSION, CREATED) VALUES ('1.2.1', CURRENT_TIMESTAMP);\n+INSERT INTO TASKANA_SCHEMA_VERSION (VERSION, CREATED) VALUES ('2.0.1', CURRENT_TIMESTAMP);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIzODQyMw==", "bodyText": "done", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392238423", "createdAt": "2020-03-13T13:49:24Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/resources/sql/taskana-schema-postgres.sql", "diffHunk": "@@ -9,7 +9,7 @@ CREATE TABLE TASKANA_SCHEMA_VERSION(\n         PRIMARY KEY (ID)\n );\n -- The VERSION value must match the value of TaskanaEngineConfiguration.TASKANA_SCHEMA_VERSION\n-INSERT INTO TASKANA_SCHEMA_VERSION (VERSION, CREATED) VALUES ('1.2.1', CURRENT_TIMESTAMP);\n+INSERT INTO TASKANA_SCHEMA_VERSION (VERSION, CREATED) VALUES ('2.0.1', CURRENT_TIMESTAMP);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA5MzM3MQ=="}, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDEwMzk0OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/resources/sql/taskana-schema.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwODo0MTo1OVrOF17fRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzo0OTozMFrOF2EVog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA5MzUxMA==", "bodyText": "should be '2.0.2'", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392093510", "createdAt": "2020-03-13T08:41:59Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/resources/sql/taskana-schema.sql", "diffHunk": "@@ -9,7 +9,7 @@ CREATE TABLE TASKANA_SCHEMA_VERSION(\n         PRIMARY KEY (ID)\n );\n -- The VERSION value must match the value of TaskanaEngineConfiguration.TASKANA_SCHEMA_VERSION\n-INSERT INTO TASKANA_SCHEMA_VERSION (VERSION, CREATED) VALUES ('1.2.1', CURRENT_TIMESTAMP);\n+INSERT INTO TASKANA_SCHEMA_VERSION (VERSION, CREATED) VALUES ('2.0.1', CURRENT_TIMESTAMP);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIzODQ5OA==", "bodyText": "done", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392238498", "createdAt": "2020-03-13T13:49:30Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/resources/sql/taskana-schema.sql", "diffHunk": "@@ -9,7 +9,7 @@ CREATE TABLE TASKANA_SCHEMA_VERSION(\n         PRIMARY KEY (ID)\n );\n -- The VERSION value must match the value of TaskanaEngineConfiguration.TASKANA_SCHEMA_VERSION\n-INSERT INTO TASKANA_SCHEMA_VERSION (VERSION, CREATED) VALUES ('1.2.1', CURRENT_TIMESTAMP);\n+INSERT INTO TASKANA_SCHEMA_VERSION (VERSION, CREATED) VALUES ('2.0.1', CURRENT_TIMESTAMP);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA5MzUxMA=="}, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDEyNTQ2OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/test/java/acceptance/task/CreateTaskCommentAccTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwODo0OToxN1rOF17saQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzo1MTo1MlrOF2EbGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA5Njg3Mw==", "bodyText": "there is missing a testcase that creates a task comment with null taskId:   taskService.newTaskComment(null)", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392096873", "createdAt": "2020-03-13T08:49:17Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/test/java/acceptance/task/CreateTaskCommentAccTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+\n+@ExtendWith(JaasExtension.class)\n+public class CreateTaskCommentAccTest extends AbstractAccTest {\n+\n+  CreateTaskCommentAccTest() {\n+    super();\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testCreateTaskComment()\n+      throws TaskCommentNotFoundException, TaskNotFoundException, NotAuthorizedException,\n+          InvalidArgumentException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    List<TaskComment> taskComments =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000026\");\n+    assertThat(taskComments).hasSize(2);\n+\n+    TaskComment taskCommentToCreate =\n+        taskService.newTaskComment(\"TKI:000000000000000000000000000000000026\");\n+    taskCommentToCreate.setTextField(\"a newly created taskComment\");\n+\n+    taskService.createTaskComment(taskCommentToCreate);\n+\n+    // make sure that the new task comment was added\n+    List<TaskComment> taskCommentsAfterInsert =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000026\");\n+    assertThat(taskCommentsAfterInsert).hasSize(3);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testCreateTaskCommentForNonExistingTaskShouldFail() {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    TaskComment newTaskComment = taskService.newTaskComment(\"Definately non existing ID\");\n+    newTaskComment.setTextField(\"a newly created taskComment\");\n+\n+    assertThatThrownBy(() -> taskService.createTaskComment(newTaskComment))\n+        .isInstanceOf(TaskNotFoundException.class);\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIzOTg5Nw==", "bodyText": "Added this case in the already existing  test testCreateTaskCommentForNullOrNonExistingTaskIdShouldFail()", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392239897", "createdAt": "2020-03-13T13:51:52Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/test/java/acceptance/task/CreateTaskCommentAccTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+\n+@ExtendWith(JaasExtension.class)\n+public class CreateTaskCommentAccTest extends AbstractAccTest {\n+\n+  CreateTaskCommentAccTest() {\n+    super();\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testCreateTaskComment()\n+      throws TaskCommentNotFoundException, TaskNotFoundException, NotAuthorizedException,\n+          InvalidArgumentException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    List<TaskComment> taskComments =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000026\");\n+    assertThat(taskComments).hasSize(2);\n+\n+    TaskComment taskCommentToCreate =\n+        taskService.newTaskComment(\"TKI:000000000000000000000000000000000026\");\n+    taskCommentToCreate.setTextField(\"a newly created taskComment\");\n+\n+    taskService.createTaskComment(taskCommentToCreate);\n+\n+    // make sure that the new task comment was added\n+    List<TaskComment> taskCommentsAfterInsert =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000026\");\n+    assertThat(taskCommentsAfterInsert).hasSize(3);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testCreateTaskCommentForNonExistingTaskShouldFail() {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    TaskComment newTaskComment = taskService.newTaskComment(\"Definately non existing ID\");\n+    newTaskComment.setTextField(\"a newly created taskComment\");\n+\n+    assertThatThrownBy(() -> taskService.createTaskComment(newTaskComment))\n+        .isInstanceOf(TaskNotFoundException.class);\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA5Njg3Mw=="}, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDEzNDI2OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/test/java/acceptance/task/DeleteTaskCommentAccTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwODo1MjowOVrOF17xnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzo1MDoxMFrOF2EXFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA5ODIwNQ==", "bodyText": "There is missing a testcase that deletes a task comment with null Id", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392098205", "createdAt": "2020-03-13T08:52:09Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/test/java/acceptance/task/DeleteTaskCommentAccTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+\n+@ExtendWith(JaasExtension.class)\n+public class DeleteTaskCommentAccTest extends AbstractAccTest {\n+\n+  DeleteTaskCommentAccTest() {\n+    super();\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testDeleteTaskComment()\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException,\n+          InvalidArgumentException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    List<TaskComment> taskComments =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000001\");\n+    assertThat(taskComments).hasSize(2);\n+\n+    taskService.deleteTaskComment(\"TCI:000000000000000000000000000000000004\");\n+\n+    // make sure the task comment was deleted\n+    List<TaskComment> taskCommentsAfterDeletion =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000001\");\n+    assertThat(taskCommentsAfterDeletion).hasSize(1);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_2\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testDeleteTaskCommentWithNoAuthorizationShouldFail()\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    List<TaskComment> taskComments =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000002\");\n+    assertThat(taskComments).hasSize(2);\n+\n+    assertThatThrownBy(\n+        () -> taskService.deleteTaskComment(\"TCI:000000000000000000000000000000000005\"))\n+        .isInstanceOf(NotAuthorizedException.class);\n+\n+    // make sure the task comment was not deleted\n+    List<TaskComment> taskCommentsAfterDeletion =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000002\");\n+    assertThat(taskCommentsAfterDeletion).hasSize(2);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testDeleteTaskCommentWithInvalidTaskCommentIdShouldFail()\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    List<TaskComment> taskComments =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000002\");\n+    assertThat(taskComments).hasSize(2);\n+\n+    assertThatThrownBy(() -> taskService.deleteTaskComment(\"\"))\n+        .isInstanceOf(InvalidArgumentException.class);\n+\n+    // make sure the task comment was not deleted\n+    List<TaskComment> taskCommentsAfterDeletion =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000002\");\n+    assertThat(taskCommentsAfterDeletion).hasSize(2);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testDeleteNonExistingTaskCommentShouldFail()\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    List<TaskComment> taskComments =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000002\");\n+    assertThat(taskComments).hasSize(2);\n+\n+    assertThatThrownBy(() -> taskService.deleteTaskComment(\"non existing task comment id\"))\n+        .isInstanceOf(TaskCommentNotFoundException.class);\n+\n+    // make sure the task comment was not deleted\n+    List<TaskComment> taskCommentsAfterDeletion =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000002\");\n+    assertThat(taskCommentsAfterDeletion).hasSize(2);\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIzODg3MA==", "bodyText": "added this to the already existing testcase \"testDeleteTaskCommentWithInvalidTaskCommentIdShouldFail\"", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392238870", "createdAt": "2020-03-13T13:50:10Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/test/java/acceptance/task/DeleteTaskCommentAccTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+\n+@ExtendWith(JaasExtension.class)\n+public class DeleteTaskCommentAccTest extends AbstractAccTest {\n+\n+  DeleteTaskCommentAccTest() {\n+    super();\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testDeleteTaskComment()\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException,\n+          InvalidArgumentException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    List<TaskComment> taskComments =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000001\");\n+    assertThat(taskComments).hasSize(2);\n+\n+    taskService.deleteTaskComment(\"TCI:000000000000000000000000000000000004\");\n+\n+    // make sure the task comment was deleted\n+    List<TaskComment> taskCommentsAfterDeletion =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000001\");\n+    assertThat(taskCommentsAfterDeletion).hasSize(1);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_2\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testDeleteTaskCommentWithNoAuthorizationShouldFail()\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    List<TaskComment> taskComments =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000002\");\n+    assertThat(taskComments).hasSize(2);\n+\n+    assertThatThrownBy(\n+        () -> taskService.deleteTaskComment(\"TCI:000000000000000000000000000000000005\"))\n+        .isInstanceOf(NotAuthorizedException.class);\n+\n+    // make sure the task comment was not deleted\n+    List<TaskComment> taskCommentsAfterDeletion =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000002\");\n+    assertThat(taskCommentsAfterDeletion).hasSize(2);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testDeleteTaskCommentWithInvalidTaskCommentIdShouldFail()\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    List<TaskComment> taskComments =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000002\");\n+    assertThat(taskComments).hasSize(2);\n+\n+    assertThatThrownBy(() -> taskService.deleteTaskComment(\"\"))\n+        .isInstanceOf(InvalidArgumentException.class);\n+\n+    // make sure the task comment was not deleted\n+    List<TaskComment> taskCommentsAfterDeletion =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000002\");\n+    assertThat(taskCommentsAfterDeletion).hasSize(2);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testDeleteNonExistingTaskCommentShouldFail()\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    List<TaskComment> taskComments =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000002\");\n+    assertThat(taskComments).hasSize(2);\n+\n+    assertThatThrownBy(() -> taskService.deleteTaskComment(\"non existing task comment id\"))\n+        .isInstanceOf(TaskCommentNotFoundException.class);\n+\n+    // make sure the task comment was not deleted\n+    List<TaskComment> taskCommentsAfterDeletion =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000002\");\n+    assertThat(taskCommentsAfterDeletion).hasSize(2);\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA5ODIwNQ=="}, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDE1MzAwOnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwODo1ODoxN1rOF179GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzo1MDozNlrOF2EYHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwMTE0NQ==", "bodyText": "Please move this statement inside the try .. catch block after openConnection(). All database access statements should be nested between taskanaEngine.openConnection() and taskanaEngine.returnConnection();", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392101145", "createdAt": "2020-03-13T08:58:17Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package pro.taskana.task.internal;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import pro.taskana.common.api.exceptions.ConcurrencyException;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.InternalTaskanaEngine;\n+import pro.taskana.common.internal.security.CurrentUserContext;\n+import pro.taskana.common.internal.util.IdGenerator;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskCommentServiceImpl {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TaskCommentServiceImpl.class);\n+\n+  private static final String NOT_AUTHORIZED =\n+      \" Not authorized, TaskComment creator and current user must match. TaskComment creator is \";\n+  private static final String BUT_CURRENT_USER_IS = \" but current user is \";\n+  private static final String ID_PREFIX_TASK_COMMENT = \"TCI\";\n+  private InternalTaskanaEngine taskanaEngine;\n+  private TaskServiceImpl taskService;\n+  private TaskCommentMapper taskCommentMapper;\n+\n+  TaskCommentServiceImpl(\n+      InternalTaskanaEngine taskanaEngine,\n+      TaskCommentMapper taskCommentMapper,\n+      TaskServiceImpl taskService) {\n+    super();\n+    this.taskanaEngine = taskanaEngine;\n+    this.taskService = taskService;\n+    this.taskCommentMapper = taskCommentMapper;\n+  }\n+\n+  TaskComment newTaskComment(String taskId) {\n+\n+    LOGGER.debug(\"entry to newTaskComment (taskId = {})\", taskId);\n+\n+    TaskCommentImpl taskComment = new TaskCommentImpl();\n+    taskComment.setTaskId(taskId);\n+\n+    LOGGER.debug(\"exit from newTaskComment(), returning {}\", taskComment);\n+\n+    return taskComment;\n+  }\n+\n+  TaskComment updateTaskComment(TaskComment taskCommentToUpdate)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to updateTaskComment (taskComment = {})\", taskCommentToUpdate);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    TaskCommentImpl taskCommentImplToUpdate = (TaskCommentImpl) taskCommentToUpdate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToUpdate.getTaskId());\n+\n+      if (taskCommentToUpdate.getCreator().equals(userId)) {\n+\n+        TaskComment oldTaskComment = getTaskComment(taskCommentImplToUpdate.getId());\n+\n+        checkModifiedHasNotChanged(oldTaskComment, taskCommentImplToUpdate);\n+\n+        taskCommentImplToUpdate.setModified(Instant.now());\n+\n+        taskCommentMapper.update(taskCommentImplToUpdate);\n+\n+        LOGGER.debug(\n+            \"Method updateTaskComment() updated taskComment '{}' for user '{}'.\",\n+            taskCommentImplToUpdate.getId(),\n+            userId);\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentImplToUpdate.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from updateTaskComment()\");\n+    }\n+\n+    return taskCommentImplToUpdate;\n+  }\n+\n+  TaskComment createTaskComment(TaskComment taskCommentToCreate)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to setTaskComment (taskCommentToCreate = {})\", taskCommentToCreate);\n+\n+    TaskCommentImpl taskCommentImplToCreate = (TaskCommentImpl) taskCommentToCreate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToCreate.getTaskId());\n+\n+      validateNoneExistingTaskCommentId(taskCommentImplToCreate.getId());\n+\n+      initDefaultTaskCommentValues(taskCommentImplToCreate);\n+\n+      taskCommentMapper.insert(taskCommentImplToCreate);\n+\n+    } finally {\n+\n+      taskanaEngine.returnConnection();\n+\n+      LOGGER.debug(\"exit from setTaskComment()\");\n+    }\n+\n+    return taskCommentImplToCreate;\n+  }\n+\n+  void deleteTaskComment(String taskCommentId)\n+      throws NotAuthorizedException, TaskCommentNotFoundException, TaskNotFoundException,\n+          InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to deleteTaskComment (taskComment = {}\", taskCommentId);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    validateExistingTaskCommentId(taskCommentId);\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      TaskComment taskCommentToDelete = getTaskComment(taskCommentId);\n+\n+      if (taskCommentToDelete != null) {\n+\n+        taskService.getTask(taskCommentToDelete.getTaskId());\n+\n+      } else {\n+        throw new TaskCommentNotFoundException(\n+            taskCommentId, String.format(\"The TaskComment with ID %s wasn't found\", taskCommentId));\n+      }\n+\n+      if (taskCommentToDelete.getCreator().equals(userId)) {\n+\n+        taskCommentMapper.delete(taskCommentId);\n+\n+        LOGGER.debug(\"taskComment {} deleted\", taskCommentToDelete.getId());\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentToDelete.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from deleteTaskComment()\");\n+    }\n+  }\n+\n+  List<TaskComment> getTaskComments(String taskId)\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to getTaskComments (taskId = {})\", taskId);\n+\n+    List<TaskComment> result =\n+        taskCommentMapper.findByTaskId(taskId).stream().collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIzOTEzNQ==", "bodyText": "done", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392239135", "createdAt": "2020-03-13T13:50:36Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package pro.taskana.task.internal;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import pro.taskana.common.api.exceptions.ConcurrencyException;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.InternalTaskanaEngine;\n+import pro.taskana.common.internal.security.CurrentUserContext;\n+import pro.taskana.common.internal.util.IdGenerator;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskCommentServiceImpl {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TaskCommentServiceImpl.class);\n+\n+  private static final String NOT_AUTHORIZED =\n+      \" Not authorized, TaskComment creator and current user must match. TaskComment creator is \";\n+  private static final String BUT_CURRENT_USER_IS = \" but current user is \";\n+  private static final String ID_PREFIX_TASK_COMMENT = \"TCI\";\n+  private InternalTaskanaEngine taskanaEngine;\n+  private TaskServiceImpl taskService;\n+  private TaskCommentMapper taskCommentMapper;\n+\n+  TaskCommentServiceImpl(\n+      InternalTaskanaEngine taskanaEngine,\n+      TaskCommentMapper taskCommentMapper,\n+      TaskServiceImpl taskService) {\n+    super();\n+    this.taskanaEngine = taskanaEngine;\n+    this.taskService = taskService;\n+    this.taskCommentMapper = taskCommentMapper;\n+  }\n+\n+  TaskComment newTaskComment(String taskId) {\n+\n+    LOGGER.debug(\"entry to newTaskComment (taskId = {})\", taskId);\n+\n+    TaskCommentImpl taskComment = new TaskCommentImpl();\n+    taskComment.setTaskId(taskId);\n+\n+    LOGGER.debug(\"exit from newTaskComment(), returning {}\", taskComment);\n+\n+    return taskComment;\n+  }\n+\n+  TaskComment updateTaskComment(TaskComment taskCommentToUpdate)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to updateTaskComment (taskComment = {})\", taskCommentToUpdate);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    TaskCommentImpl taskCommentImplToUpdate = (TaskCommentImpl) taskCommentToUpdate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToUpdate.getTaskId());\n+\n+      if (taskCommentToUpdate.getCreator().equals(userId)) {\n+\n+        TaskComment oldTaskComment = getTaskComment(taskCommentImplToUpdate.getId());\n+\n+        checkModifiedHasNotChanged(oldTaskComment, taskCommentImplToUpdate);\n+\n+        taskCommentImplToUpdate.setModified(Instant.now());\n+\n+        taskCommentMapper.update(taskCommentImplToUpdate);\n+\n+        LOGGER.debug(\n+            \"Method updateTaskComment() updated taskComment '{}' for user '{}'.\",\n+            taskCommentImplToUpdate.getId(),\n+            userId);\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentImplToUpdate.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from updateTaskComment()\");\n+    }\n+\n+    return taskCommentImplToUpdate;\n+  }\n+\n+  TaskComment createTaskComment(TaskComment taskCommentToCreate)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to setTaskComment (taskCommentToCreate = {})\", taskCommentToCreate);\n+\n+    TaskCommentImpl taskCommentImplToCreate = (TaskCommentImpl) taskCommentToCreate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToCreate.getTaskId());\n+\n+      validateNoneExistingTaskCommentId(taskCommentImplToCreate.getId());\n+\n+      initDefaultTaskCommentValues(taskCommentImplToCreate);\n+\n+      taskCommentMapper.insert(taskCommentImplToCreate);\n+\n+    } finally {\n+\n+      taskanaEngine.returnConnection();\n+\n+      LOGGER.debug(\"exit from setTaskComment()\");\n+    }\n+\n+    return taskCommentImplToCreate;\n+  }\n+\n+  void deleteTaskComment(String taskCommentId)\n+      throws NotAuthorizedException, TaskCommentNotFoundException, TaskNotFoundException,\n+          InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to deleteTaskComment (taskComment = {}\", taskCommentId);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    validateExistingTaskCommentId(taskCommentId);\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      TaskComment taskCommentToDelete = getTaskComment(taskCommentId);\n+\n+      if (taskCommentToDelete != null) {\n+\n+        taskService.getTask(taskCommentToDelete.getTaskId());\n+\n+      } else {\n+        throw new TaskCommentNotFoundException(\n+            taskCommentId, String.format(\"The TaskComment with ID %s wasn't found\", taskCommentId));\n+      }\n+\n+      if (taskCommentToDelete.getCreator().equals(userId)) {\n+\n+        taskCommentMapper.delete(taskCommentId);\n+\n+        LOGGER.debug(\"taskComment {} deleted\", taskCommentToDelete.getId());\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentToDelete.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from deleteTaskComment()\");\n+    }\n+  }\n+\n+  List<TaskComment> getTaskComments(String taskId)\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to getTaskComments (taskId = {})\", taskId);\n+\n+    List<TaskComment> result =\n+        taskCommentMapper.findByTaskId(taskId).stream().collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwMTE0NQ=="}, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDE2ODI2OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOTowMzo0NFrOF18GwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzo1MjowNVrOF2Ebgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwMzYxNw==", "bodyText": "You should return an empty list in this case, because this is no exceptional situation.\nIn other places of the product there is also returned an empty list in such cases.\nRefer e.g. to queries, or to TaskService.updateTasks(..)", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392103617", "createdAt": "2020-03-13T09:03:44Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package pro.taskana.task.internal;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import pro.taskana.common.api.exceptions.ConcurrencyException;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.InternalTaskanaEngine;\n+import pro.taskana.common.internal.security.CurrentUserContext;\n+import pro.taskana.common.internal.util.IdGenerator;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskCommentServiceImpl {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TaskCommentServiceImpl.class);\n+\n+  private static final String NOT_AUTHORIZED =\n+      \" Not authorized, TaskComment creator and current user must match. TaskComment creator is \";\n+  private static final String BUT_CURRENT_USER_IS = \" but current user is \";\n+  private static final String ID_PREFIX_TASK_COMMENT = \"TCI\";\n+  private InternalTaskanaEngine taskanaEngine;\n+  private TaskServiceImpl taskService;\n+  private TaskCommentMapper taskCommentMapper;\n+\n+  TaskCommentServiceImpl(\n+      InternalTaskanaEngine taskanaEngine,\n+      TaskCommentMapper taskCommentMapper,\n+      TaskServiceImpl taskService) {\n+    super();\n+    this.taskanaEngine = taskanaEngine;\n+    this.taskService = taskService;\n+    this.taskCommentMapper = taskCommentMapper;\n+  }\n+\n+  TaskComment newTaskComment(String taskId) {\n+\n+    LOGGER.debug(\"entry to newTaskComment (taskId = {})\", taskId);\n+\n+    TaskCommentImpl taskComment = new TaskCommentImpl();\n+    taskComment.setTaskId(taskId);\n+\n+    LOGGER.debug(\"exit from newTaskComment(), returning {}\", taskComment);\n+\n+    return taskComment;\n+  }\n+\n+  TaskComment updateTaskComment(TaskComment taskCommentToUpdate)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to updateTaskComment (taskComment = {})\", taskCommentToUpdate);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    TaskCommentImpl taskCommentImplToUpdate = (TaskCommentImpl) taskCommentToUpdate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToUpdate.getTaskId());\n+\n+      if (taskCommentToUpdate.getCreator().equals(userId)) {\n+\n+        TaskComment oldTaskComment = getTaskComment(taskCommentImplToUpdate.getId());\n+\n+        checkModifiedHasNotChanged(oldTaskComment, taskCommentImplToUpdate);\n+\n+        taskCommentImplToUpdate.setModified(Instant.now());\n+\n+        taskCommentMapper.update(taskCommentImplToUpdate);\n+\n+        LOGGER.debug(\n+            \"Method updateTaskComment() updated taskComment '{}' for user '{}'.\",\n+            taskCommentImplToUpdate.getId(),\n+            userId);\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentImplToUpdate.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from updateTaskComment()\");\n+    }\n+\n+    return taskCommentImplToUpdate;\n+  }\n+\n+  TaskComment createTaskComment(TaskComment taskCommentToCreate)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to setTaskComment (taskCommentToCreate = {})\", taskCommentToCreate);\n+\n+    TaskCommentImpl taskCommentImplToCreate = (TaskCommentImpl) taskCommentToCreate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToCreate.getTaskId());\n+\n+      validateNoneExistingTaskCommentId(taskCommentImplToCreate.getId());\n+\n+      initDefaultTaskCommentValues(taskCommentImplToCreate);\n+\n+      taskCommentMapper.insert(taskCommentImplToCreate);\n+\n+    } finally {\n+\n+      taskanaEngine.returnConnection();\n+\n+      LOGGER.debug(\"exit from setTaskComment()\");\n+    }\n+\n+    return taskCommentImplToCreate;\n+  }\n+\n+  void deleteTaskComment(String taskCommentId)\n+      throws NotAuthorizedException, TaskCommentNotFoundException, TaskNotFoundException,\n+          InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to deleteTaskComment (taskComment = {}\", taskCommentId);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    validateExistingTaskCommentId(taskCommentId);\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      TaskComment taskCommentToDelete = getTaskComment(taskCommentId);\n+\n+      if (taskCommentToDelete != null) {\n+\n+        taskService.getTask(taskCommentToDelete.getTaskId());\n+\n+      } else {\n+        throw new TaskCommentNotFoundException(\n+            taskCommentId, String.format(\"The TaskComment with ID %s wasn't found\", taskCommentId));\n+      }\n+\n+      if (taskCommentToDelete.getCreator().equals(userId)) {\n+\n+        taskCommentMapper.delete(taskCommentId);\n+\n+        LOGGER.debug(\"taskComment {} deleted\", taskCommentToDelete.getId());\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentToDelete.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from deleteTaskComment()\");\n+    }\n+  }\n+\n+  List<TaskComment> getTaskComments(String taskId)\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to getTaskComments (taskId = {})\", taskId);\n+\n+    List<TaskComment> result =\n+        taskCommentMapper.findByTaskId(taskId).stream().collect(Collectors.toList());\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskId);\n+\n+      if (result == null || result.isEmpty()) {\n+        throw new TaskCommentNotFoundException(\n+            taskId, \"TaskComments for TaskId \" + taskId + \" were not found\");\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0MDAwMg==", "bodyText": "done", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392240002", "createdAt": "2020-03-13T13:52:05Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package pro.taskana.task.internal;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import pro.taskana.common.api.exceptions.ConcurrencyException;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.InternalTaskanaEngine;\n+import pro.taskana.common.internal.security.CurrentUserContext;\n+import pro.taskana.common.internal.util.IdGenerator;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskCommentServiceImpl {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TaskCommentServiceImpl.class);\n+\n+  private static final String NOT_AUTHORIZED =\n+      \" Not authorized, TaskComment creator and current user must match. TaskComment creator is \";\n+  private static final String BUT_CURRENT_USER_IS = \" but current user is \";\n+  private static final String ID_PREFIX_TASK_COMMENT = \"TCI\";\n+  private InternalTaskanaEngine taskanaEngine;\n+  private TaskServiceImpl taskService;\n+  private TaskCommentMapper taskCommentMapper;\n+\n+  TaskCommentServiceImpl(\n+      InternalTaskanaEngine taskanaEngine,\n+      TaskCommentMapper taskCommentMapper,\n+      TaskServiceImpl taskService) {\n+    super();\n+    this.taskanaEngine = taskanaEngine;\n+    this.taskService = taskService;\n+    this.taskCommentMapper = taskCommentMapper;\n+  }\n+\n+  TaskComment newTaskComment(String taskId) {\n+\n+    LOGGER.debug(\"entry to newTaskComment (taskId = {})\", taskId);\n+\n+    TaskCommentImpl taskComment = new TaskCommentImpl();\n+    taskComment.setTaskId(taskId);\n+\n+    LOGGER.debug(\"exit from newTaskComment(), returning {}\", taskComment);\n+\n+    return taskComment;\n+  }\n+\n+  TaskComment updateTaskComment(TaskComment taskCommentToUpdate)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to updateTaskComment (taskComment = {})\", taskCommentToUpdate);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    TaskCommentImpl taskCommentImplToUpdate = (TaskCommentImpl) taskCommentToUpdate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToUpdate.getTaskId());\n+\n+      if (taskCommentToUpdate.getCreator().equals(userId)) {\n+\n+        TaskComment oldTaskComment = getTaskComment(taskCommentImplToUpdate.getId());\n+\n+        checkModifiedHasNotChanged(oldTaskComment, taskCommentImplToUpdate);\n+\n+        taskCommentImplToUpdate.setModified(Instant.now());\n+\n+        taskCommentMapper.update(taskCommentImplToUpdate);\n+\n+        LOGGER.debug(\n+            \"Method updateTaskComment() updated taskComment '{}' for user '{}'.\",\n+            taskCommentImplToUpdate.getId(),\n+            userId);\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentImplToUpdate.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from updateTaskComment()\");\n+    }\n+\n+    return taskCommentImplToUpdate;\n+  }\n+\n+  TaskComment createTaskComment(TaskComment taskCommentToCreate)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to setTaskComment (taskCommentToCreate = {})\", taskCommentToCreate);\n+\n+    TaskCommentImpl taskCommentImplToCreate = (TaskCommentImpl) taskCommentToCreate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToCreate.getTaskId());\n+\n+      validateNoneExistingTaskCommentId(taskCommentImplToCreate.getId());\n+\n+      initDefaultTaskCommentValues(taskCommentImplToCreate);\n+\n+      taskCommentMapper.insert(taskCommentImplToCreate);\n+\n+    } finally {\n+\n+      taskanaEngine.returnConnection();\n+\n+      LOGGER.debug(\"exit from setTaskComment()\");\n+    }\n+\n+    return taskCommentImplToCreate;\n+  }\n+\n+  void deleteTaskComment(String taskCommentId)\n+      throws NotAuthorizedException, TaskCommentNotFoundException, TaskNotFoundException,\n+          InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to deleteTaskComment (taskComment = {}\", taskCommentId);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    validateExistingTaskCommentId(taskCommentId);\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      TaskComment taskCommentToDelete = getTaskComment(taskCommentId);\n+\n+      if (taskCommentToDelete != null) {\n+\n+        taskService.getTask(taskCommentToDelete.getTaskId());\n+\n+      } else {\n+        throw new TaskCommentNotFoundException(\n+            taskCommentId, String.format(\"The TaskComment with ID %s wasn't found\", taskCommentId));\n+      }\n+\n+      if (taskCommentToDelete.getCreator().equals(userId)) {\n+\n+        taskCommentMapper.delete(taskCommentId);\n+\n+        LOGGER.debug(\"taskComment {} deleted\", taskCommentToDelete.getId());\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentToDelete.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from deleteTaskComment()\");\n+    }\n+  }\n+\n+  List<TaskComment> getTaskComments(String taskId)\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to getTaskComments (taskId = {})\", taskId);\n+\n+    List<TaskComment> result =\n+        taskCommentMapper.findByTaskId(taskId).stream().collect(Collectors.toList());\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskId);\n+\n+      if (result == null || result.isEmpty()) {\n+        throw new TaskCommentNotFoundException(\n+            taskId, \"TaskComments for TaskId \" + taskId + \" were not found\");\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwMzYxNw=="}, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDE4MzE4OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/test/java/acceptance/task/GetTaskCommentAccTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOTowODo0N1rOF18P-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzo1MDo0NlrOF2EYaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNTk3OA==", "bodyText": "if the task exists and has no comments, an empty list should be returned. See comment in TaskCommentServiceImpl and TaskService.", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392105978", "createdAt": "2020-03-13T09:08:47Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/test/java/acceptance/task/GetTaskCommentAccTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+\n+@ExtendWith(JaasExtension.class)\n+public class GetTaskCommentAccTest extends AbstractAccTest {\n+\n+  GetTaskCommentAccTest() {\n+    super();\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testGetTaskComments()\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    taskService.getTask(\"TKI:000000000000000000000000000000000000\");\n+    List<TaskComment> taskComments =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000000\");\n+    assertThat(taskComments).hasSize(3);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testGetNonExistingTaskCommentsShouldFail() {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    assertThatThrownBy(\n+        () -> taskService.getTaskComments(\"TKI:000000000000000000000000000000000036\"))\n+        .isInstanceOf(TaskCommentNotFoundException.class);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIzOTIwOQ==", "bodyText": "changed", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r392239209", "createdAt": "2020-03-13T13:50:46Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/test/java/acceptance/task/GetTaskCommentAccTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+\n+@ExtendWith(JaasExtension.class)\n+public class GetTaskCommentAccTest extends AbstractAccTest {\n+\n+  GetTaskCommentAccTest() {\n+    super();\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testGetTaskComments()\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    taskService.getTask(\"TKI:000000000000000000000000000000000000\");\n+    List<TaskComment> taskComments =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000000\");\n+    assertThat(taskComments).hasSize(3);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testGetNonExistingTaskCommentsShouldFail() {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    assertThatThrownBy(\n+        () -> taskService.getTaskComments(\"TKI:000000000000000000000000000000000036\"))\n+        .isInstanceOf(TaskCommentNotFoundException.class);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNTk3OA=="}, "originalCommit": {"oid": "e4539a3638aeb856a58299c8a2406b8c3772b27c"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTIxODM3OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyNDowOVrOF3R7Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDoyODozM1rOF3WK2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwOTY1MQ==", "bodyText": "please add \"or if the user is not authorized to access the task\".", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r393509651", "createdAt": "2020-03-17T08:24:09Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "diffHunk": "@@ -366,6 +376,80 @@ void forceDeleteTask(String taskId)\n   List<String> updateTasks(List<String> taskIds, Map<String, String> customFieldsToUpdate)\n       throws InvalidArgumentException;\n \n+  /**\n+   * Create a task comment.\n+   *\n+   * @param taskComment the task comment to be created.\n+   * @return the created task comment.\n+   * @throws NotAuthorizedException If the current user has no authorization to create a task\n+   *     comment for the given taskId in the TaskComment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a4d6567fe619ea81ce3c83f507611ba2488579"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU3OTIyNg==", "bodyText": "done", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r393579226", "createdAt": "2020-03-17T10:28:33Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "diffHunk": "@@ -366,6 +376,80 @@ void forceDeleteTask(String taskId)\n   List<String> updateTasks(List<String> taskIds, Map<String, String> customFieldsToUpdate)\n       throws InvalidArgumentException;\n \n+  /**\n+   * Create a task comment.\n+   *\n+   * @param taskComment the task comment to be created.\n+   * @return the created task comment.\n+   * @throws NotAuthorizedException If the current user has no authorization to create a task\n+   *     comment for the given taskId in the TaskComment.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwOTY1MQ=="}, "originalCommit": {"oid": "35a4d6567fe619ea81ce3c83f507611ba2488579"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTIxOTk5OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyNDo0MFrOF3R8Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyNDo0MFrOF3R8Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwOTkyMg==", "bodyText": "also here: please add \"or if the user is not authorized to access the task\".", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r393509922", "createdAt": "2020-03-17T08:24:40Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "diffHunk": "@@ -366,6 +376,80 @@ void forceDeleteTask(String taskId)\n   List<String> updateTasks(List<String> taskIds, Map<String, String> customFieldsToUpdate)\n       throws InvalidArgumentException;\n \n+  /**\n+   * Create a task comment.\n+   *\n+   * @param taskComment the task comment to be created.\n+   * @return the created task comment.\n+   * @throws NotAuthorizedException If the current user has no authorization to create a task\n+   *     comment for the given taskId in the TaskComment.\n+   * @throws TaskNotFoundException If the given taskId in the TaskComment does not refer to an\n+   *     existing task.\n+   */\n+  TaskComment createTaskComment(TaskComment taskComment)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidArgumentException;\n+\n+  /**\n+   * Update a task comment.\n+   *\n+   * @param taskComment the task comment to be updated in the database.\n+   * @return the updated task comment.\n+   * @throws NotAuthorizedException If the current user has no authorization to update a task\n+   *     comment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a4d6567fe619ea81ce3c83f507611ba2488579"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTIyMDk1OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyNTowMVrOF3R8xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyNTowMVrOF3R8xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxMDA4NQ==", "bodyText": "ditto... please add \"or if the user is not authorized to access the task\".", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r393510085", "createdAt": "2020-03-17T08:25:01Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "diffHunk": "@@ -366,6 +376,80 @@ void forceDeleteTask(String taskId)\n   List<String> updateTasks(List<String> taskIds, Map<String, String> customFieldsToUpdate)\n       throws InvalidArgumentException;\n \n+  /**\n+   * Create a task comment.\n+   *\n+   * @param taskComment the task comment to be created.\n+   * @return the created task comment.\n+   * @throws NotAuthorizedException If the current user has no authorization to create a task\n+   *     comment for the given taskId in the TaskComment.\n+   * @throws TaskNotFoundException If the given taskId in the TaskComment does not refer to an\n+   *     existing task.\n+   */\n+  TaskComment createTaskComment(TaskComment taskComment)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidArgumentException;\n+\n+  /**\n+   * Update a task comment.\n+   *\n+   * @param taskComment the task comment to be updated in the database.\n+   * @return the updated task comment.\n+   * @throws NotAuthorizedException If the current user has no authorization to update a task\n+   *     comment.\n+   * @throws ConcurrencyException if an attempt is made to update the task comment and another user.\n+   *     updated it already.\n+   * @throws TaskCommentNotFoundException If the given taskCommentId in the TaskComment does not\n+   *     refer to an existing taskComment.\n+   * @throws TaskNotFoundException If the given taskId in the TaskComment does not refer to an\n+   *     existing task.\n+   */\n+  TaskComment updateTaskComment(TaskComment taskComment)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException;\n+\n+  /**\n+   * Deletes the task comment with the given Id.\n+   *\n+   * @param taskCommentId The id of the task comment to delete.\n+   * @throws NotAuthorizedException If the current user has no authorization to delete a task\n+   *     comment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a4d6567fe619ea81ce3c83f507611ba2488579"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTIyMjUyOnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyNTozMVrOF3R9tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyNTozMVrOF3R9tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxMDMyNg==", "bodyText": "same game: please add \"or if the user is not authorized to access the task\".", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r393510326", "createdAt": "2020-03-17T08:25:31Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "diffHunk": "@@ -366,6 +376,80 @@ void forceDeleteTask(String taskId)\n   List<String> updateTasks(List<String> taskIds, Map<String, String> customFieldsToUpdate)\n       throws InvalidArgumentException;\n \n+  /**\n+   * Create a task comment.\n+   *\n+   * @param taskComment the task comment to be created.\n+   * @return the created task comment.\n+   * @throws NotAuthorizedException If the current user has no authorization to create a task\n+   *     comment for the given taskId in the TaskComment.\n+   * @throws TaskNotFoundException If the given taskId in the TaskComment does not refer to an\n+   *     existing task.\n+   */\n+  TaskComment createTaskComment(TaskComment taskComment)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidArgumentException;\n+\n+  /**\n+   * Update a task comment.\n+   *\n+   * @param taskComment the task comment to be updated in the database.\n+   * @return the updated task comment.\n+   * @throws NotAuthorizedException If the current user has no authorization to update a task\n+   *     comment.\n+   * @throws ConcurrencyException if an attempt is made to update the task comment and another user.\n+   *     updated it already.\n+   * @throws TaskCommentNotFoundException If the given taskCommentId in the TaskComment does not\n+   *     refer to an existing taskComment.\n+   * @throws TaskNotFoundException If the given taskId in the TaskComment does not refer to an\n+   *     existing task.\n+   */\n+  TaskComment updateTaskComment(TaskComment taskComment)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException;\n+\n+  /**\n+   * Deletes the task comment with the given Id.\n+   *\n+   * @param taskCommentId The id of the task comment to delete.\n+   * @throws NotAuthorizedException If the current user has no authorization to delete a task\n+   *     comment\n+   * @throws InvalidArgumentException If the taskCommentId is null/empty\n+   * @throws TaskCommentNotFoundException If the given taskCommentId in the TaskComment does not\n+   *     refer to an existing taskComment.\n+   * @throws TaskNotFoundException If the given taskId in the TaskComment does not refer to an\n+   *     existing task.\n+   */\n+  void deleteTaskComment(String taskCommentId)\n+      throws NotAuthorizedException, TaskCommentNotFoundException, TaskNotFoundException,\n+          InvalidArgumentException;\n+\n+  /**\n+   * Retrieves a task comment for a given taskCommentId.\n+   *\n+   * @param taskCommentId The id of the task comment which should be retrieved\n+   * @throws TaskCommentNotFoundException If the given taskCommentId in the TaskComment does not\n+   *     refer to an existing taskComment.\n+   * @throws NotAuthorizedException If the current user has no authorization to retrieve a *\n+   *     taskComment from a certain task", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a4d6567fe619ea81ce3c83f507611ba2488579"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTIyNDExOnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyNjowM1rOF3R-yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyNjowM1rOF3R-yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxMDYwMg==", "bodyText": "last but not least please add \"or if the user is not authorized to access the task\".", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r393510602", "createdAt": "2020-03-17T08:26:03Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "diffHunk": "@@ -366,6 +376,80 @@ void forceDeleteTask(String taskId)\n   List<String> updateTasks(List<String> taskIds, Map<String, String> customFieldsToUpdate)\n       throws InvalidArgumentException;\n \n+  /**\n+   * Create a task comment.\n+   *\n+   * @param taskComment the task comment to be created.\n+   * @return the created task comment.\n+   * @throws NotAuthorizedException If the current user has no authorization to create a task\n+   *     comment for the given taskId in the TaskComment.\n+   * @throws TaskNotFoundException If the given taskId in the TaskComment does not refer to an\n+   *     existing task.\n+   */\n+  TaskComment createTaskComment(TaskComment taskComment)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidArgumentException;\n+\n+  /**\n+   * Update a task comment.\n+   *\n+   * @param taskComment the task comment to be updated in the database.\n+   * @return the updated task comment.\n+   * @throws NotAuthorizedException If the current user has no authorization to update a task\n+   *     comment.\n+   * @throws ConcurrencyException if an attempt is made to update the task comment and another user.\n+   *     updated it already.\n+   * @throws TaskCommentNotFoundException If the given taskCommentId in the TaskComment does not\n+   *     refer to an existing taskComment.\n+   * @throws TaskNotFoundException If the given taskId in the TaskComment does not refer to an\n+   *     existing task.\n+   */\n+  TaskComment updateTaskComment(TaskComment taskComment)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException;\n+\n+  /**\n+   * Deletes the task comment with the given Id.\n+   *\n+   * @param taskCommentId The id of the task comment to delete.\n+   * @throws NotAuthorizedException If the current user has no authorization to delete a task\n+   *     comment\n+   * @throws InvalidArgumentException If the taskCommentId is null/empty\n+   * @throws TaskCommentNotFoundException If the given taskCommentId in the TaskComment does not\n+   *     refer to an existing taskComment.\n+   * @throws TaskNotFoundException If the given taskId in the TaskComment does not refer to an\n+   *     existing task.\n+   */\n+  void deleteTaskComment(String taskCommentId)\n+      throws NotAuthorizedException, TaskCommentNotFoundException, TaskNotFoundException,\n+          InvalidArgumentException;\n+\n+  /**\n+   * Retrieves a task comment for a given taskCommentId.\n+   *\n+   * @param taskCommentId The id of the task comment which should be retrieved\n+   * @throws TaskCommentNotFoundException If the given taskCommentId in the TaskComment does not\n+   *     refer to an existing taskComment.\n+   * @throws NotAuthorizedException If the current user has no authorization to retrieve a *\n+   *     taskComment from a certain task\n+   * @throws TaskNotFoundException If the given taskId in the TaskComment does not refer to an *\n+   *     existing task.\n+   */\n+  TaskComment getTaskComment(String taskCommentId)\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException;\n+\n+  /**\n+   * Retrieves a list of task comments for a given taskId.\n+   *\n+   * @param taskId The id of the task for which all task comments should be retrieved\n+   *\n+   * @throws NotAuthorizedException If the current user has no authorization to retrieve a\n+   *     taskComment from a certain task", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a4d6567fe619ea81ce3c83f507611ba2488579"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTI1NjYzOnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODozNjo0NlrOF3SToQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDoyOTozNlrOF3WNTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNTkzNw==", "bodyText": "I don't like the method name 'validateExistingTaskCommentId' because it implies that it validates that the id 'exists'. However, it simply validates that the id is not null or empty. I would propose to find a name that better describes what the method does, e.g. verifyTaskCommentIdIsNotEmpty or something similar", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r393515937", "createdAt": "2020-03-17T08:36:46Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "diffHunk": "@@ -0,0 +1,268 @@\n+package pro.taskana.task.internal;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import pro.taskana.common.api.TaskanaRole;\n+import pro.taskana.common.api.exceptions.ConcurrencyException;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.InternalTaskanaEngine;\n+import pro.taskana.common.internal.security.CurrentUserContext;\n+import pro.taskana.common.internal.util.IdGenerator;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskCommentServiceImpl {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TaskCommentServiceImpl.class);\n+\n+  private static final String NOT_AUTHORIZED =\n+      \" Not authorized, TaskComment creator and current user must match. TaskComment creator is \";\n+  private static final String BUT_CURRENT_USER_IS = \" but current user is \";\n+  private static final String ID_PREFIX_TASK_COMMENT = \"TCI\";\n+  private InternalTaskanaEngine taskanaEngine;\n+  private TaskServiceImpl taskService;\n+  private TaskCommentMapper taskCommentMapper;\n+\n+  TaskCommentServiceImpl(\n+      InternalTaskanaEngine taskanaEngine,\n+      TaskCommentMapper taskCommentMapper,\n+      TaskServiceImpl taskService) {\n+    super();\n+    this.taskanaEngine = taskanaEngine;\n+    this.taskService = taskService;\n+    this.taskCommentMapper = taskCommentMapper;\n+  }\n+\n+  TaskComment newTaskComment(String taskId) {\n+\n+    LOGGER.debug(\"entry to newTaskComment (taskId = {})\", taskId);\n+\n+    TaskCommentImpl taskComment = new TaskCommentImpl();\n+    taskComment.setTaskId(taskId);\n+\n+    LOGGER.debug(\"exit from newTaskComment(), returning {}\", taskComment);\n+\n+    return taskComment;\n+  }\n+\n+  TaskComment updateTaskComment(TaskComment taskCommentToUpdate)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to updateTaskComment (taskComment = {})\", taskCommentToUpdate);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    TaskCommentImpl taskCommentImplToUpdate = (TaskCommentImpl) taskCommentToUpdate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToUpdate.getTaskId());\n+\n+      if (taskCommentToUpdate.getCreator().equals(userId)\n+          || taskanaEngine.getEngine().isUserInRole(TaskanaRole.ADMIN)) {\n+\n+        TaskComment oldTaskComment = getTaskComment(taskCommentImplToUpdate.getId());\n+\n+        checkModifiedHasNotChanged(oldTaskComment, taskCommentImplToUpdate);\n+\n+        taskCommentImplToUpdate.setModified(Instant.now());\n+\n+        taskCommentMapper.update(taskCommentImplToUpdate);\n+\n+        LOGGER.debug(\n+            \"Method updateTaskComment() updated taskComment '{}' for user '{}'.\",\n+            taskCommentImplToUpdate.getId(),\n+            userId);\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentImplToUpdate.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from updateTaskComment()\");\n+    }\n+\n+    return taskCommentImplToUpdate;\n+  }\n+\n+  TaskComment createTaskComment(TaskComment taskCommentToCreate)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to setTaskComment (taskCommentToCreate = {})\", taskCommentToCreate);\n+\n+    TaskCommentImpl taskCommentImplToCreate = (TaskCommentImpl) taskCommentToCreate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToCreate.getTaskId());\n+\n+      validateNoneExistingTaskCommentId(taskCommentImplToCreate.getId());\n+\n+      initDefaultTaskCommentValues(taskCommentImplToCreate);\n+\n+      taskCommentMapper.insert(taskCommentImplToCreate);\n+\n+    } finally {\n+\n+      taskanaEngine.returnConnection();\n+\n+      LOGGER.debug(\"exit from setTaskComment()\");\n+    }\n+\n+    return taskCommentImplToCreate;\n+  }\n+\n+  void deleteTaskComment(String taskCommentId)\n+      throws NotAuthorizedException, TaskCommentNotFoundException, TaskNotFoundException,\n+          InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to deleteTaskComment (taskComment = {}\", taskCommentId);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    validateExistingTaskCommentId(taskCommentId);\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      TaskComment taskCommentToDelete = getTaskComment(taskCommentId);\n+\n+      if (taskCommentToDelete.getCreator().equals(userId)\n+          || taskanaEngine.getEngine().isUserInRole(TaskanaRole.ADMIN)) {\n+\n+        taskCommentMapper.delete(taskCommentId);\n+\n+        LOGGER.debug(\"taskComment {} deleted\", taskCommentToDelete.getId());\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentToDelete.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from deleteTaskComment()\");\n+    }\n+  }\n+\n+  List<TaskComment> getTaskComments(String taskId)\n+      throws NotAuthorizedException, TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to getTaskComments (taskId = {})\", taskId);\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskId);\n+\n+      List<TaskComment> taskComments =\n+          taskCommentMapper.findByTaskId(taskId).stream().collect(Collectors.toList());\n+\n+      if (taskComments.isEmpty()) {\n+        LOGGER.debug(\"getTaskComments() found no comments for the provided taskId\");\n+      }\n+\n+      return taskComments;\n+\n+    } finally {\n+\n+      taskanaEngine.returnConnection();\n+\n+      LOGGER.debug(\"exit from getTaskComments()\");\n+    }\n+  }\n+\n+  TaskComment getTaskComment(String taskCommentId)\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to getTaskComment (taskCommentId = {})\", taskCommentId);\n+\n+    TaskCommentImpl result = null;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      result = taskCommentMapper.findById(taskCommentId);\n+\n+      if (result == null) {\n+        throw new TaskCommentNotFoundException(\n+            taskCommentId, \"TaskComment for id \" + taskCommentId + \" was not found\");\n+      }\n+\n+      taskService.getTask(result.getTaskId());\n+\n+      return result;\n+\n+    } finally {\n+\n+      taskanaEngine.returnConnection();\n+\n+      LOGGER.debug(\"exit from getTaskComment()\");\n+    }\n+  }\n+\n+  private void checkModifiedHasNotChanged(\n+      TaskComment oldTaskComment, TaskComment taskCommentImplToUpdate) throws ConcurrencyException {\n+\n+    if (!oldTaskComment.getModified().equals(taskCommentImplToUpdate.getModified())) {\n+\n+      throw new ConcurrencyException(\n+          \"The current TaskComment has been modified while editing. \"\n+              + \"The values can not be updated. TaskComment \"\n+              + taskCommentImplToUpdate.toString());\n+    }\n+  }\n+\n+  private void initDefaultTaskCommentValues(TaskCommentImpl taskCommentImplToCreate) {\n+\n+    Instant now = Instant.now();\n+\n+    taskCommentImplToCreate.setId(IdGenerator.generateWithPrefix(ID_PREFIX_TASK_COMMENT));\n+    taskCommentImplToCreate.setModified(now);\n+    taskCommentImplToCreate.setCreated(now);\n+\n+    String creator = CurrentUserContext.getUserid();\n+    if (taskanaEngine.getEngine().getConfiguration().isSecurityEnabled() && creator == null) {\n+      throw new SystemException(\n+          \"TaskanaSecurity is enabled, but the current UserId is\"\n+              + \" NULL while creating a TaskComment.\");\n+    }\n+    taskCommentImplToCreate.setCreator(creator);\n+  }\n+\n+  private void validateNoneExistingTaskCommentId(String taskCommentId)\n+      throws InvalidArgumentException {\n+\n+    if (taskCommentId != null && !taskCommentId.equals(\"\")) {\n+      throw new InvalidArgumentException(\n+          String.format(\n+              \"taskCommentId must be null/empty for creation, but found %s\", taskCommentId));\n+    }\n+  }\n+\n+  private void validateExistingTaskCommentId(String taskCommentId) throws InvalidArgumentException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a4d6567fe619ea81ce3c83f507611ba2488579"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU3OTg1NA==", "bodyText": "changed the name to verifyTaskCommentIdIsNotNullOrEmpty", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r393579854", "createdAt": "2020-03-17T10:29:36Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "diffHunk": "@@ -0,0 +1,268 @@\n+package pro.taskana.task.internal;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import pro.taskana.common.api.TaskanaRole;\n+import pro.taskana.common.api.exceptions.ConcurrencyException;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.InternalTaskanaEngine;\n+import pro.taskana.common.internal.security.CurrentUserContext;\n+import pro.taskana.common.internal.util.IdGenerator;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskCommentServiceImpl {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TaskCommentServiceImpl.class);\n+\n+  private static final String NOT_AUTHORIZED =\n+      \" Not authorized, TaskComment creator and current user must match. TaskComment creator is \";\n+  private static final String BUT_CURRENT_USER_IS = \" but current user is \";\n+  private static final String ID_PREFIX_TASK_COMMENT = \"TCI\";\n+  private InternalTaskanaEngine taskanaEngine;\n+  private TaskServiceImpl taskService;\n+  private TaskCommentMapper taskCommentMapper;\n+\n+  TaskCommentServiceImpl(\n+      InternalTaskanaEngine taskanaEngine,\n+      TaskCommentMapper taskCommentMapper,\n+      TaskServiceImpl taskService) {\n+    super();\n+    this.taskanaEngine = taskanaEngine;\n+    this.taskService = taskService;\n+    this.taskCommentMapper = taskCommentMapper;\n+  }\n+\n+  TaskComment newTaskComment(String taskId) {\n+\n+    LOGGER.debug(\"entry to newTaskComment (taskId = {})\", taskId);\n+\n+    TaskCommentImpl taskComment = new TaskCommentImpl();\n+    taskComment.setTaskId(taskId);\n+\n+    LOGGER.debug(\"exit from newTaskComment(), returning {}\", taskComment);\n+\n+    return taskComment;\n+  }\n+\n+  TaskComment updateTaskComment(TaskComment taskCommentToUpdate)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to updateTaskComment (taskComment = {})\", taskCommentToUpdate);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    TaskCommentImpl taskCommentImplToUpdate = (TaskCommentImpl) taskCommentToUpdate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToUpdate.getTaskId());\n+\n+      if (taskCommentToUpdate.getCreator().equals(userId)\n+          || taskanaEngine.getEngine().isUserInRole(TaskanaRole.ADMIN)) {\n+\n+        TaskComment oldTaskComment = getTaskComment(taskCommentImplToUpdate.getId());\n+\n+        checkModifiedHasNotChanged(oldTaskComment, taskCommentImplToUpdate);\n+\n+        taskCommentImplToUpdate.setModified(Instant.now());\n+\n+        taskCommentMapper.update(taskCommentImplToUpdate);\n+\n+        LOGGER.debug(\n+            \"Method updateTaskComment() updated taskComment '{}' for user '{}'.\",\n+            taskCommentImplToUpdate.getId(),\n+            userId);\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentImplToUpdate.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from updateTaskComment()\");\n+    }\n+\n+    return taskCommentImplToUpdate;\n+  }\n+\n+  TaskComment createTaskComment(TaskComment taskCommentToCreate)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to setTaskComment (taskCommentToCreate = {})\", taskCommentToCreate);\n+\n+    TaskCommentImpl taskCommentImplToCreate = (TaskCommentImpl) taskCommentToCreate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToCreate.getTaskId());\n+\n+      validateNoneExistingTaskCommentId(taskCommentImplToCreate.getId());\n+\n+      initDefaultTaskCommentValues(taskCommentImplToCreate);\n+\n+      taskCommentMapper.insert(taskCommentImplToCreate);\n+\n+    } finally {\n+\n+      taskanaEngine.returnConnection();\n+\n+      LOGGER.debug(\"exit from setTaskComment()\");\n+    }\n+\n+    return taskCommentImplToCreate;\n+  }\n+\n+  void deleteTaskComment(String taskCommentId)\n+      throws NotAuthorizedException, TaskCommentNotFoundException, TaskNotFoundException,\n+          InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to deleteTaskComment (taskComment = {}\", taskCommentId);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    validateExistingTaskCommentId(taskCommentId);\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      TaskComment taskCommentToDelete = getTaskComment(taskCommentId);\n+\n+      if (taskCommentToDelete.getCreator().equals(userId)\n+          || taskanaEngine.getEngine().isUserInRole(TaskanaRole.ADMIN)) {\n+\n+        taskCommentMapper.delete(taskCommentId);\n+\n+        LOGGER.debug(\"taskComment {} deleted\", taskCommentToDelete.getId());\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentToDelete.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from deleteTaskComment()\");\n+    }\n+  }\n+\n+  List<TaskComment> getTaskComments(String taskId)\n+      throws NotAuthorizedException, TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to getTaskComments (taskId = {})\", taskId);\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskId);\n+\n+      List<TaskComment> taskComments =\n+          taskCommentMapper.findByTaskId(taskId).stream().collect(Collectors.toList());\n+\n+      if (taskComments.isEmpty()) {\n+        LOGGER.debug(\"getTaskComments() found no comments for the provided taskId\");\n+      }\n+\n+      return taskComments;\n+\n+    } finally {\n+\n+      taskanaEngine.returnConnection();\n+\n+      LOGGER.debug(\"exit from getTaskComments()\");\n+    }\n+  }\n+\n+  TaskComment getTaskComment(String taskCommentId)\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to getTaskComment (taskCommentId = {})\", taskCommentId);\n+\n+    TaskCommentImpl result = null;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      result = taskCommentMapper.findById(taskCommentId);\n+\n+      if (result == null) {\n+        throw new TaskCommentNotFoundException(\n+            taskCommentId, \"TaskComment for id \" + taskCommentId + \" was not found\");\n+      }\n+\n+      taskService.getTask(result.getTaskId());\n+\n+      return result;\n+\n+    } finally {\n+\n+      taskanaEngine.returnConnection();\n+\n+      LOGGER.debug(\"exit from getTaskComment()\");\n+    }\n+  }\n+\n+  private void checkModifiedHasNotChanged(\n+      TaskComment oldTaskComment, TaskComment taskCommentImplToUpdate) throws ConcurrencyException {\n+\n+    if (!oldTaskComment.getModified().equals(taskCommentImplToUpdate.getModified())) {\n+\n+      throw new ConcurrencyException(\n+          \"The current TaskComment has been modified while editing. \"\n+              + \"The values can not be updated. TaskComment \"\n+              + taskCommentImplToUpdate.toString());\n+    }\n+  }\n+\n+  private void initDefaultTaskCommentValues(TaskCommentImpl taskCommentImplToCreate) {\n+\n+    Instant now = Instant.now();\n+\n+    taskCommentImplToCreate.setId(IdGenerator.generateWithPrefix(ID_PREFIX_TASK_COMMENT));\n+    taskCommentImplToCreate.setModified(now);\n+    taskCommentImplToCreate.setCreated(now);\n+\n+    String creator = CurrentUserContext.getUserid();\n+    if (taskanaEngine.getEngine().getConfiguration().isSecurityEnabled() && creator == null) {\n+      throw new SystemException(\n+          \"TaskanaSecurity is enabled, but the current UserId is\"\n+              + \" NULL while creating a TaskComment.\");\n+    }\n+    taskCommentImplToCreate.setCreator(creator);\n+  }\n+\n+  private void validateNoneExistingTaskCommentId(String taskCommentId)\n+      throws InvalidArgumentException {\n+\n+    if (taskCommentId != null && !taskCommentId.equals(\"\")) {\n+      throw new InvalidArgumentException(\n+          String.format(\n+              \"taskCommentId must be null/empty for creation, but found %s\", taskCommentId));\n+    }\n+  }\n+\n+  private void validateExistingTaskCommentId(String taskCommentId) throws InvalidArgumentException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNTkzNw=="}, "originalCommit": {"oid": "35a4d6567fe619ea81ce3c83f507611ba2488579"}, "originalPosition": 262}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTI3NjI4OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODo0MzowM1rOF3SgXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDozMDowMlrOF3WOOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxOTE5OQ==", "bodyText": "why don't you check for null or empty taskCommentId in this method like in the other methods that have an id as parameter?", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r393519199", "createdAt": "2020-03-17T08:43:03Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "diffHunk": "@@ -0,0 +1,268 @@\n+package pro.taskana.task.internal;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import pro.taskana.common.api.TaskanaRole;\n+import pro.taskana.common.api.exceptions.ConcurrencyException;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.InternalTaskanaEngine;\n+import pro.taskana.common.internal.security.CurrentUserContext;\n+import pro.taskana.common.internal.util.IdGenerator;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskCommentServiceImpl {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TaskCommentServiceImpl.class);\n+\n+  private static final String NOT_AUTHORIZED =\n+      \" Not authorized, TaskComment creator and current user must match. TaskComment creator is \";\n+  private static final String BUT_CURRENT_USER_IS = \" but current user is \";\n+  private static final String ID_PREFIX_TASK_COMMENT = \"TCI\";\n+  private InternalTaskanaEngine taskanaEngine;\n+  private TaskServiceImpl taskService;\n+  private TaskCommentMapper taskCommentMapper;\n+\n+  TaskCommentServiceImpl(\n+      InternalTaskanaEngine taskanaEngine,\n+      TaskCommentMapper taskCommentMapper,\n+      TaskServiceImpl taskService) {\n+    super();\n+    this.taskanaEngine = taskanaEngine;\n+    this.taskService = taskService;\n+    this.taskCommentMapper = taskCommentMapper;\n+  }\n+\n+  TaskComment newTaskComment(String taskId) {\n+\n+    LOGGER.debug(\"entry to newTaskComment (taskId = {})\", taskId);\n+\n+    TaskCommentImpl taskComment = new TaskCommentImpl();\n+    taskComment.setTaskId(taskId);\n+\n+    LOGGER.debug(\"exit from newTaskComment(), returning {}\", taskComment);\n+\n+    return taskComment;\n+  }\n+\n+  TaskComment updateTaskComment(TaskComment taskCommentToUpdate)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to updateTaskComment (taskComment = {})\", taskCommentToUpdate);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    TaskCommentImpl taskCommentImplToUpdate = (TaskCommentImpl) taskCommentToUpdate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToUpdate.getTaskId());\n+\n+      if (taskCommentToUpdate.getCreator().equals(userId)\n+          || taskanaEngine.getEngine().isUserInRole(TaskanaRole.ADMIN)) {\n+\n+        TaskComment oldTaskComment = getTaskComment(taskCommentImplToUpdate.getId());\n+\n+        checkModifiedHasNotChanged(oldTaskComment, taskCommentImplToUpdate);\n+\n+        taskCommentImplToUpdate.setModified(Instant.now());\n+\n+        taskCommentMapper.update(taskCommentImplToUpdate);\n+\n+        LOGGER.debug(\n+            \"Method updateTaskComment() updated taskComment '{}' for user '{}'.\",\n+            taskCommentImplToUpdate.getId(),\n+            userId);\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentImplToUpdate.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from updateTaskComment()\");\n+    }\n+\n+    return taskCommentImplToUpdate;\n+  }\n+\n+  TaskComment createTaskComment(TaskComment taskCommentToCreate)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to setTaskComment (taskCommentToCreate = {})\", taskCommentToCreate);\n+\n+    TaskCommentImpl taskCommentImplToCreate = (TaskCommentImpl) taskCommentToCreate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToCreate.getTaskId());\n+\n+      validateNoneExistingTaskCommentId(taskCommentImplToCreate.getId());\n+\n+      initDefaultTaskCommentValues(taskCommentImplToCreate);\n+\n+      taskCommentMapper.insert(taskCommentImplToCreate);\n+\n+    } finally {\n+\n+      taskanaEngine.returnConnection();\n+\n+      LOGGER.debug(\"exit from setTaskComment()\");\n+    }\n+\n+    return taskCommentImplToCreate;\n+  }\n+\n+  void deleteTaskComment(String taskCommentId)\n+      throws NotAuthorizedException, TaskCommentNotFoundException, TaskNotFoundException,\n+          InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to deleteTaskComment (taskComment = {}\", taskCommentId);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    validateExistingTaskCommentId(taskCommentId);\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      TaskComment taskCommentToDelete = getTaskComment(taskCommentId);\n+\n+      if (taskCommentToDelete.getCreator().equals(userId)\n+          || taskanaEngine.getEngine().isUserInRole(TaskanaRole.ADMIN)) {\n+\n+        taskCommentMapper.delete(taskCommentId);\n+\n+        LOGGER.debug(\"taskComment {} deleted\", taskCommentToDelete.getId());\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentToDelete.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from deleteTaskComment()\");\n+    }\n+  }\n+\n+  List<TaskComment> getTaskComments(String taskId)\n+      throws NotAuthorizedException, TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to getTaskComments (taskId = {})\", taskId);\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskId);\n+\n+      List<TaskComment> taskComments =\n+          taskCommentMapper.findByTaskId(taskId).stream().collect(Collectors.toList());\n+\n+      if (taskComments.isEmpty()) {\n+        LOGGER.debug(\"getTaskComments() found no comments for the provided taskId\");\n+      }\n+\n+      return taskComments;\n+\n+    } finally {\n+\n+      taskanaEngine.returnConnection();\n+\n+      LOGGER.debug(\"exit from getTaskComments()\");\n+    }\n+  }\n+\n+  TaskComment getTaskComment(String taskCommentId)\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to getTaskComment (taskCommentId = {})\", taskCommentId);\n+\n+    TaskCommentImpl result = null;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      result = taskCommentMapper.findById(taskCommentId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a4d6567fe619ea81ce3c83f507611ba2488579"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4MDA5MA==", "bodyText": "check added", "url": "https://github.com/Taskana/taskana/pull/972#discussion_r393580090", "createdAt": "2020-03-17T10:30:02Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "diffHunk": "@@ -0,0 +1,268 @@\n+package pro.taskana.task.internal;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import pro.taskana.common.api.TaskanaRole;\n+import pro.taskana.common.api.exceptions.ConcurrencyException;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.InternalTaskanaEngine;\n+import pro.taskana.common.internal.security.CurrentUserContext;\n+import pro.taskana.common.internal.util.IdGenerator;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskCommentServiceImpl {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TaskCommentServiceImpl.class);\n+\n+  private static final String NOT_AUTHORIZED =\n+      \" Not authorized, TaskComment creator and current user must match. TaskComment creator is \";\n+  private static final String BUT_CURRENT_USER_IS = \" but current user is \";\n+  private static final String ID_PREFIX_TASK_COMMENT = \"TCI\";\n+  private InternalTaskanaEngine taskanaEngine;\n+  private TaskServiceImpl taskService;\n+  private TaskCommentMapper taskCommentMapper;\n+\n+  TaskCommentServiceImpl(\n+      InternalTaskanaEngine taskanaEngine,\n+      TaskCommentMapper taskCommentMapper,\n+      TaskServiceImpl taskService) {\n+    super();\n+    this.taskanaEngine = taskanaEngine;\n+    this.taskService = taskService;\n+    this.taskCommentMapper = taskCommentMapper;\n+  }\n+\n+  TaskComment newTaskComment(String taskId) {\n+\n+    LOGGER.debug(\"entry to newTaskComment (taskId = {})\", taskId);\n+\n+    TaskCommentImpl taskComment = new TaskCommentImpl();\n+    taskComment.setTaskId(taskId);\n+\n+    LOGGER.debug(\"exit from newTaskComment(), returning {}\", taskComment);\n+\n+    return taskComment;\n+  }\n+\n+  TaskComment updateTaskComment(TaskComment taskCommentToUpdate)\n+      throws NotAuthorizedException, ConcurrencyException, TaskCommentNotFoundException,\n+          TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to updateTaskComment (taskComment = {})\", taskCommentToUpdate);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    TaskCommentImpl taskCommentImplToUpdate = (TaskCommentImpl) taskCommentToUpdate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToUpdate.getTaskId());\n+\n+      if (taskCommentToUpdate.getCreator().equals(userId)\n+          || taskanaEngine.getEngine().isUserInRole(TaskanaRole.ADMIN)) {\n+\n+        TaskComment oldTaskComment = getTaskComment(taskCommentImplToUpdate.getId());\n+\n+        checkModifiedHasNotChanged(oldTaskComment, taskCommentImplToUpdate);\n+\n+        taskCommentImplToUpdate.setModified(Instant.now());\n+\n+        taskCommentMapper.update(taskCommentImplToUpdate);\n+\n+        LOGGER.debug(\n+            \"Method updateTaskComment() updated taskComment '{}' for user '{}'.\",\n+            taskCommentImplToUpdate.getId(),\n+            userId);\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentImplToUpdate.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from updateTaskComment()\");\n+    }\n+\n+    return taskCommentImplToUpdate;\n+  }\n+\n+  TaskComment createTaskComment(TaskComment taskCommentToCreate)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to setTaskComment (taskCommentToCreate = {})\", taskCommentToCreate);\n+\n+    TaskCommentImpl taskCommentImplToCreate = (TaskCommentImpl) taskCommentToCreate;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskCommentImplToCreate.getTaskId());\n+\n+      validateNoneExistingTaskCommentId(taskCommentImplToCreate.getId());\n+\n+      initDefaultTaskCommentValues(taskCommentImplToCreate);\n+\n+      taskCommentMapper.insert(taskCommentImplToCreate);\n+\n+    } finally {\n+\n+      taskanaEngine.returnConnection();\n+\n+      LOGGER.debug(\"exit from setTaskComment()\");\n+    }\n+\n+    return taskCommentImplToCreate;\n+  }\n+\n+  void deleteTaskComment(String taskCommentId)\n+      throws NotAuthorizedException, TaskCommentNotFoundException, TaskNotFoundException,\n+          InvalidArgumentException {\n+\n+    LOGGER.debug(\"entry to deleteTaskComment (taskComment = {}\", taskCommentId);\n+\n+    String userId = CurrentUserContext.getUserid();\n+\n+    validateExistingTaskCommentId(taskCommentId);\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      TaskComment taskCommentToDelete = getTaskComment(taskCommentId);\n+\n+      if (taskCommentToDelete.getCreator().equals(userId)\n+          || taskanaEngine.getEngine().isUserInRole(TaskanaRole.ADMIN)) {\n+\n+        taskCommentMapper.delete(taskCommentId);\n+\n+        LOGGER.debug(\"taskComment {} deleted\", taskCommentToDelete.getId());\n+\n+      } else {\n+        throw new NotAuthorizedException(\n+            NOT_AUTHORIZED + taskCommentToDelete.getCreator() + BUT_CURRENT_USER_IS + userId,\n+            userId);\n+      }\n+\n+    } finally {\n+      taskanaEngine.returnConnection();\n+      LOGGER.debug(\"exit from deleteTaskComment()\");\n+    }\n+  }\n+\n+  List<TaskComment> getTaskComments(String taskId)\n+      throws NotAuthorizedException, TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to getTaskComments (taskId = {})\", taskId);\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      taskService.getTask(taskId);\n+\n+      List<TaskComment> taskComments =\n+          taskCommentMapper.findByTaskId(taskId).stream().collect(Collectors.toList());\n+\n+      if (taskComments.isEmpty()) {\n+        LOGGER.debug(\"getTaskComments() found no comments for the provided taskId\");\n+      }\n+\n+      return taskComments;\n+\n+    } finally {\n+\n+      taskanaEngine.returnConnection();\n+\n+      LOGGER.debug(\"exit from getTaskComments()\");\n+    }\n+  }\n+\n+  TaskComment getTaskComment(String taskCommentId)\n+      throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException {\n+\n+    LOGGER.debug(\"entry to getTaskComment (taskCommentId = {})\", taskCommentId);\n+\n+    TaskCommentImpl result = null;\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      result = taskCommentMapper.findById(taskCommentId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxOTE5OQ=="}, "originalCommit": {"oid": "35a4d6567fe619ea81ce3c83f507611ba2488579"}, "originalPosition": 204}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4292, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}