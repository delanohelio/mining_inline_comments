{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MTU2MjMy", "number": 965, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOToyNToyNFrODlWLdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTozMjozOVrODlWV8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDg3Mjg0OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOToyNToyNFrOFyL9GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOToyNTo0MVrOFyL9rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2ODk4NQ==", "bodyText": "Can you please create a ticket that we still have to find a solution for our formatter in xml?", "url": "https://github.com/Taskana/taskana/pull/965#discussion_r388168985", "createdAt": "2020-03-05T09:25:24Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/pom.xml", "diffHunk": "@@ -1,196 +1,201 @@\n <project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f9b8bec8d84caaff5a4c53e2ba628ff66ff669"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2OTEzNQ==", "bodyText": "This is the second time we get reminded :)", "url": "https://github.com/Taskana/taskana/pull/965#discussion_r388169135", "createdAt": "2020-03-05T09:25:41Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/pom.xml", "diffHunk": "@@ -1,196 +1,201 @@\n <project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2ODk4NQ=="}, "originalCommit": {"oid": "81f9b8bec8d84caaff5a4c53e2ba628ff66ff669"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDg3NTgxOnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOToyNjowNVrOFyL-tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOToyNjowNVrOFyL-tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2OTM5OQ==", "bodyText": "Very nice \ud83d\udc4d", "url": "https://github.com/Taskana/taskana/pull/965#discussion_r388169399", "createdAt": "2020-03-05T09:26:05Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java", "diffHunk": "@@ -70,16 +68,15 @@\n     isInitOrFail();\n     testMinSearchForLength(name);\n \n-    List<AccessIdResource> accessIds = new ArrayList<>(searchUsersByName(name));\n-    accessIds.addAll(searchGroupsByName(name));\n-    // TODO: remove try/catch as once the fix is verified\n-    try {\n+    List<AccessIdResource> accessIds = new ArrayList<>();\n+    if (nameIsDn(name)) {\n       AccessIdResource groupByDn = searchGroupByDn(name);\n       if (groupByDn != null) {\n-        accessIds.add(searchGroupByDn(name));\n+        accessIds.add(groupByDn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f9b8bec8d84caaff5a4c53e2ba628ff66ff669"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDg3ODM3OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOToyNjo0N1rOFyMARQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOToyNjo0N1rOFyMARQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2OTc5Nw==", "bodyText": "Should we test this?", "url": "https://github.com/Taskana/taskana/pull/965#discussion_r388169797", "createdAt": "2020-03-05T09:26:47Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java", "diffHunk": "@@ -93,6 +90,10 @@\n     return result;\n   }\n \n+  private boolean nameIsDn(String name) {\n+    return name.toLowerCase().endsWith(getBaseDn().toLowerCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f9b8bec8d84caaff5a4c53e2ba628ff66ff669"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDg4MDgyOnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOToyNzozMVrOFyMB3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOToyNzozMVrOFyMB3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3MDIwNg==", "bodyText": "This is now defiantly unit testable. Please create one or two test scenarios", "url": "https://github.com/Taskana/taskana/pull/965#discussion_r388170206", "createdAt": "2020-03-05T09:27:31Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java", "diffHunk": "@@ -353,14 +354,19 @@ void testMinSearchForLength(final String name) throws InvalidArgumentException {\n     @Override\n     public AccessIdResource doMapFromContext(final DirContextOperations context) {\n       final AccessIdResource accessId = new AccessIdResource();\n-      LdapName dn = (LdapName) context.getDn();\n-      if (!dn.getRdn(0).toString().equalsIgnoreCase(getBaseDn())) {\n-        dn = LdapNameBuilder.newInstance(getBaseDn()).add(dn).build();\n-      }\n-      accessId.setAccessId(dn.toString()); // fully qualified dn\n+      String dn = getDnWithBaseDn(context);\n+      accessId.setAccessId(dn); // fully qualified dn\n       accessId.setName(context.getStringAttribute(getGroupNameAttribute()));\n       return accessId;\n     }\n+\n+    private String getDnWithBaseDn(final DirContextOperations context) {\n+      String dn = context.getDn().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f9b8bec8d84caaff5a4c53e2ba628ff66ff669"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDg5NTQ3OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/test/resources/application-ldap.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTozMToyN1rOFyMKrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTozMToyN1rOFyMKrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3MjQ2MA==", "bodyText": "Something we missed during our spring-boot-update. This property is now deprecated and replaced with server.forward-headers-strategy. Should we create a new ticket to replace this property in all property files + check for further deprecation warnings?", "url": "https://github.com/Taskana/taskana/pull/965#discussion_r388172460", "createdAt": "2020-03-05T09:31:27Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/resources/application-ldap.properties", "diffHunk": "@@ -0,0 +1,51 @@\n+logging.level.pro.taskana=INFO\n+### logging.level.org.springframework=DEBUG\n+######## Taskana DB #######\n+datasource.url=jdbc:h2:mem:taskana;IGNORECASE=TRUE;LOCK_MODE=0\n+datasource.driverClassName=org.h2.Driver\n+datasource.username=sa\n+datasource.password=sa\n+taskana.schemaName=TASKANA\n+####### property that control rest api security deploy use true for no security.\n+devMode=false\n+\n+####### Property that informs about the Taskana's version. This version is shown the application web\n+version=@project.version@\n+\n+####### control LDAP usage\n+taskana.ldap.useLdap=true\n+####### properties to connect to LDAP\n+taskana.ldap.serverUrl=ldap://localhost:10389\n+taskana.ldap.bindDn=uid=admin\n+taskana.ldap.bindPassword=secret\n+taskana.ldap.baseDn=ou=Test,O=TASKANA\n+####### properties that control search for users and groups\n+taskana.ldap.userSearchBase=cn=users\n+taskana.ldap.userSearchFilterName=objectclass\n+taskana.ldap.userSearchFilterValue=person\n+taskana.ldap.userFirstnameAttribute=givenName\n+taskana.ldap.userLastnameAttribute=sn\n+taskana.ldap.userIdAttribute=uid\n+taskana.ldap.groupSearchBase=cn=groups\n+taskana.ldap.groupSearchFilterName=objectclass\n+taskana.ldap.groupSearchFilterValue=groupOfUniqueNames\n+taskana.ldap.groupNameAttribute=cn\n+taskana.ldap.minSearchForLength=3\n+taskana.ldap.maxNumberOfReturnedAccessIds=50\n+taskana.ldap.groupsOfUser=memberUid\n+####### JobScheduler cron expression that specifies when the JobSchedler runs\n+taskana.jobscheduler.async.cron=0 0 * * * *\n+####### cache static resources properties\n+spring.resources.cache.cachecontrol.cache-private=true\n+spring.main.allow-bean-definition-overriding=true\n+####### tomcat is not detecting the x-forward headers from bluemix as a trustworthy proxy\n+server.tomcat.internal-proxies=.*\n+server.use-forward-headers=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f9b8bec8d84caaff5a4c53e2ba628ff66ff669"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDg5OTY4OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/AccessIdControllerIntTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTozMjozOVrOFyMNVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTozMjozOVrOFyMNVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3MzE0Mw==", "bodyText": "can we use the accessId instead? Personally I think people tend to change names more often than ids", "url": "https://github.com/Taskana/taskana/pull/965#discussion_r388173143", "createdAt": "2020-03-05T09:32:39Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/AccessIdControllerIntTest.java", "diffHunk": "@@ -33,48 +35,52 @@ static void init() {\n \n   @Test\n   void testQueryGroupsByDn() {\n-    ResponseEntity<List<AccessIdResource>> response =\n+    ResponseEntity<AccessIdListResource> response =\n         template.exchange(\n             restHelper.toUrl(Mapping.URL_ACCESSID)\n-                + \"?search-for=cn=developersgroup,ou=groups,o=taskanatest\",\n+                + \"?search-for=cn=ksc-users,cn=groups,OU=Test,O=TASKANA\",\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n-            ParameterizedTypeReference.forType(List.class));\n+            ParameterizedTypeReference.forType(AccessIdListResource.class));\n     assertThat(response.getBody()).hasSize(1);\n+    assertThat(response.getBody().get(0).getAccessId())\n+        .isEqualToIgnoringCase(\"cn=ksc-users,cn=groups,OU=Test,O=TASKANA\");\n   }\n \n   @Test\n   void testQueryGroupsByCn() {\n-    ResponseEntity<List<AccessIdResource>> response =\n+    ResponseEntity<AccessIdListResource> response =\n         template.exchange(\n-            restHelper.toUrl(Mapping.URL_ACCESSID) + \"?search-for=developer\",\n+            restHelper.toUrl(Mapping.URL_ACCESSID) + \"?search-for=ksc\",\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n-            ParameterizedTypeReference.forType(List.class));\n+            ParameterizedTypeReference.forType(AccessIdListResource.class));\n     assertThat(response.getBody()).hasSize(1);\n+    assertThat(response.getBody().get(0).getAccessId())\n+        .isEqualToIgnoringCase(\"cn=ksc-users,cn=groups,OU=Test,O=TASKANA\");\n   }\n \n   @Test\n   void testGetMatches() {\n     ResponseEntity<List<AccessIdResource>> response =\n         template.exchange(\n-            restHelper.toUrl(Mapping.URL_ACCESSID) + \"?search-for=ali\",\n+            restHelper.toUrl(Mapping.URL_ACCESSID) + \"?search-for=rig\",\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(AccessIdListResource.class));\n \n     List<AccessIdResource> body = response.getBody();\n     assertThat(body).isNotNull();\n-    assertThat(body).hasSize(3);\n+    assertThat(body).hasSize(2);\n     assertThat(body)\n         .extracting(AccessIdResource::getName)\n-        .containsExactlyInAnyOrder(\"Tralisch, Thea\", \"Bert, Ali\", \"Mente, Ali\");\n+        .containsExactlyInAnyOrder(\"Schl\u00e4frig, Tim\", \"Eifrig, Elena\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f9b8bec8d84caaff5a4c53e2ba628ff66ff669"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4286, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}