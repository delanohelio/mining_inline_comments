{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxMjM2ODAw", "number": 1253, "title": "TSK-1349: Added test for import-export", "bodyText": "Added test for import and export.", "createdAt": "2020-09-07T09:48:45Z", "url": "https://github.com/Taskana/taskana/pull/1253", "merged": true, "mergeCommit": {"oid": "06e10d8557f550b3054a00ecf6edfaa89179fcb3"}, "closed": true, "closedAt": "2020-10-06T12:49:04Z", "author": {"login": "Tristan2357"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHHLUMAFqTQ4NDczNjEzMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdP2-awgFqTUwMjg1NDI4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NzM2MTMx", "url": "https://github.com/Taskana/taskana/pull/1253#pullrequestreview-484736131", "createdAt": "2020-09-09T07:35:37Z", "commit": {"oid": "d69e22dc7dd3cda76a61f6270165382f20e0f2f8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzozNTozN1rOHO6d6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzozNTozN1rOHO6d6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQwMDA0MA==", "bodyText": "this caused compile error", "url": "https://github.com/Taskana/taskana/pull/1253#discussion_r485400040", "createdAt": "2020-09-09T07:35:37Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/import-export/import-export.component.ts", "diffHunk": "@@ -9,6 +9,11 @@ import { ImportExportService } from 'app/administration/services/import-export.s\n import { HttpErrorResponse } from '@angular/common/http';\n import { NOTIFICATION_TYPES } from '../../../shared/models/notifications';\n import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { JsonFormatter } from 'tslint/lib/formatters';\n+import { DefaultSerializer, Serializer } from 'v8';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69e22dc7dd3cda76a61f6270165382f20e0f2f8"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7012851b3008e7a74b3a3c5c35da74d452ecfbe3", "author": {"user": {"login": "Tristan2357", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/7012851b3008e7a74b3a3c5c35da74d452ecfbe3", "committedDate": "2020-09-14T10:18:49Z", "message": "TSK-1349: Added test for import-export"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NjMyMzQ1", "url": "https://github.com/Taskana/taskana/pull/1253#pullrequestreview-487632345", "createdAt": "2020-09-14T10:45:03Z", "commit": {"oid": "7012851b3008e7a74b3a3c5c35da74d452ecfbe3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo0NTowNFrOHROGMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMToxOTowNlrOHRPJiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxODgwMw==", "bodyText": "Is this on purpose or did you forget to delete this?", "url": "https://github.com/Taskana/taskana/pull/1253#discussion_r487818803", "createdAt": "2020-09-14T10:45:04Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/import-export/import-export.component.ts", "diffHunk": "@@ -40,68 +43,65 @@ export class ImportExportComponent implements OnInit {\n     });\n   }\n \n-  export(domain = '') {\n+  export(domain = ''): Observable<WorkbasketDefinition[] | Classification[]> {\n     if (this.currentSelection === TaskanaType.WORKBASKETS) {\n-      this.workbasketDefinitionService.exportWorkbaskets(domain);\n+      return this.workbasketDefinitionService.exportWorkbaskets(domain);\n     } else {\n-      this.classificationDefinitionService.exportClassifications(domain);\n+      return this.classificationDefinitionService.exportClassifications(domain);\n     }\n   }\n \n   uploadFile() {\n     const file = this.selectedFileInput.nativeElement.files[0];\n-    const formdata = new FormData();\n-    const ajax = new XMLHttpRequest();\n+    console.log(this.selectedFileInput);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7012851b3008e7a74b3a3c5c35da74d452ecfbe3"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyMzIwNw==", "bodyText": "See above", "url": "https://github.com/Taskana/taskana/pull/1253#discussion_r487823207", "createdAt": "2020-09-14T10:53:43Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/import-export/import-export.component.ts", "diffHunk": "@@ -122,6 +122,7 @@ export class ImportExportComponent implements OnInit {\n   }\n \n   private errorHandler(key: NOTIFICATION_TYPES, passedError?: HttpErrorResponse) {\n+    console.log(key, passedError);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7012851b3008e7a74b3a3c5c35da74d452ecfbe3"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyNTAwMA==", "bodyText": "Why do we need to return the observable?", "url": "https://github.com/Taskana/taskana/pull/1253#discussion_r487825000", "createdAt": "2020-09-14T10:57:22Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/services/workbasket-definition.service.ts", "diffHunk": "@@ -12,11 +14,12 @@ export class WorkbasketDefinitionService {\n   constructor(private httpClient: HttpClient) {}\n \n   // GET\n-  async exportWorkbaskets(domain: string) {\n+  exportWorkbaskets(domain: string): Observable<WorkbasketDefinition[]> {\n     const domainRequest = domain === '' ? domain : `?domain=${domain}`;\n-    const workbasketDefinitions = await this.httpClient\n-      .get<WorkbasketDefinition[]>(this.url + domainRequest)\n-      .toPromise();\n-    BlobGenerator.saveFile(workbasketDefinitions, `Workbaskets_${TaskanaDate.getDate()}.json`);\n+    const workbasketDefObservable = this.httpClient.get<WorkbasketDefinition[]>(this.url + domainRequest).pipe(take(1));\n+    workbasketDefObservable.subscribe((workbasketDefinitions) =>\n+      BlobGenerator.saveFile(workbasketDefinitions, `Classifications_${TaskanaDate.getDate()}.json`)\n+    );\n+    return workbasketDefObservable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7012851b3008e7a74b3a3c5c35da74d452ecfbe3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyODI2NQ==", "bodyText": "I don't know what this means but if this is the same as file.name.endsWith(), then your new version is great \ud83d\ude04", "url": "https://github.com/Taskana/taskana/pull/1253#discussion_r487828265", "createdAt": "2020-09-14T11:03:38Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/import-export/import-export.component.ts", "diffHunk": "@@ -40,68 +43,65 @@ export class ImportExportComponent implements OnInit {\n     });\n   }\n \n-  export(domain = '') {\n+  export(domain = ''): Observable<WorkbasketDefinition[] | Classification[]> {\n     if (this.currentSelection === TaskanaType.WORKBASKETS) {\n-      this.workbasketDefinitionService.exportWorkbaskets(domain);\n+      return this.workbasketDefinitionService.exportWorkbaskets(domain);\n     } else {\n-      this.classificationDefinitionService.exportClassifications(domain);\n+      return this.classificationDefinitionService.exportClassifications(domain);\n     }\n   }\n \n   uploadFile() {\n     const file = this.selectedFileInput.nativeElement.files[0];\n-    const formdata = new FormData();\n-    const ajax = new XMLHttpRequest();\n+    console.log(this.selectedFileInput);\n+    const formData = new FormData();\n+    const xhr = new XMLHttpRequest();\n     if (this.checkFormatFile(file)) {\n-      formdata.append('file', file);\n-      ajax.upload.addEventListener('progress', this.progressHandler.bind(this), false);\n-      ajax.addEventListener('load', this.resetProgress.bind(this), false);\n-      ajax.addEventListener('error', this.onFailedResponse.bind(this, ajax), false);\n-      ajax.onreadystatechange = this.onReadyStateChangeHandler.bind(this, ajax);\n+      formData.append('file', file);\n+      xhr.upload.addEventListener('progress', this.progressHandler.bind(this), false);\n+      xhr.addEventListener('load', this.resetProgress.bind(this), false);\n+      xhr.addEventListener('error', this.onFailedResponse.bind(this, xhr), false);\n+      xhr.onreadystatechange = this.onReadyStateChangeHandler.bind(this, xhr);\n       if (this.currentSelection === TaskanaType.WORKBASKETS) {\n-        ajax.open('POST', `${environment.taskanaRestUrl}/v1/workbasket-definitions`);\n+        xhr.open('POST', `${environment.taskanaRestUrl}/v1/workbasket-definitions`);\n       } else {\n-        ajax.open('POST', `${environment.taskanaRestUrl}/v1/classification-definitions`);\n+        xhr.open('POST', `${environment.taskanaRestUrl}/v1/classification-definitions`);\n       }\n       if (!environment.production) {\n-        ajax.setRequestHeader('Authorization', 'Basic YWRtaW46YWRtaW4=');\n+        xhr.setRequestHeader('Authorization', 'Basic YWRtaW46YWRtaW4=');\n       }\n-      ajax.send(formdata);\n-      this.uploadservice.isInUse = true;\n-      this.uploadservice.setCurrentProgressValue(1);\n+      xhr.send(formData);\n+      this.uploadService.isInUse = true;\n+      this.uploadService.setCurrentProgressValue(1);\n     }\n   }\n \n   progressHandler(event) {\n     const percent = (event.loaded / event.total) * 100;\n-    this.uploadservice.setCurrentProgressValue(Math.round(percent));\n+    this.uploadService.setCurrentProgressValue(Math.round(percent));\n   }\n \n   private checkFormatFile(file): boolean {\n-    const ending = file.name.match(/\\.([^.]+)$/)[1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7012851b3008e7a74b3a3c5c35da74d452ecfbe3"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyOTk0Nw==", "bodyText": "All our test files start with the simple 'should create component'-test. Maybe you could add this test here, too.", "url": "https://github.com/Taskana/taskana/pull/1253#discussion_r487829947", "createdAt": "2020-09-14T11:06:40Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/import-export/import-export.component.spec.ts", "diffHunk": "@@ -0,0 +1,104 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { DebugElement } from '@angular/core';\n+import { ImportExportComponent } from './import-export.component';\n+import { StartupService } from '../../../shared/services/startup/startup.service';\n+import { TaskanaEngineService } from '../../../shared/services/taskana-engine/taskana-engine.service';\n+import { WindowRefService } from '../../../shared/services/window/window.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { WorkbasketDefinitionService } from '../../services/workbasket-definition.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { UploadService } from '../../../shared/services/upload/upload.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { HttpClient, HttpHandler } from '@angular/common/http';\n+import { Router } from '@angular/router';\n+import { of } from 'rxjs';\n+import { ClassificationDefinitionService } from '../../services/classification-definition.service';\n+import { take, timeout } from 'rxjs/operators';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+import { BlobGenerator } from '../../../shared/util/blob-generator';\n+jest.mock('../../../shared/util/blob-generator');\n+\n+describe('ImportExportComponent', () => {\n+  let fixture: ComponentFixture<ImportExportComponent>;\n+  let debugElement: DebugElement;\n+  let app: ImportExportComponent;\n+\n+  const domainServiceSpy = jest.fn().mockImplementation(\n+    (): Partial<DomainService> => ({\n+      getSelectedDomainValue: jest.fn().mockReturnValue(of()),\n+      getSelectedDomain: jest.fn().mockReturnValue(of()),\n+      getDomains: jest.fn().mockReturnValue(of())\n+    })\n+  );\n+\n+  const httpSpy = jest.fn().mockImplementation(\n+    (): Partial<HttpClient> => ({\n+      get: jest.fn().mockReturnValue(of([])),\n+      post: jest.fn().mockReturnValue(of([]))\n+    })\n+  );\n+\n+  const showDialogFn = jest.fn().mockReturnValue(true);\n+  const notificationServiceSpy = jest.fn().mockImplementation(\n+    (): Partial<NotificationService> => ({\n+      showDialog: showDialogFn,\n+      showToast: showDialogFn,\n+      triggerError: showDialogFn\n+    })\n+  );\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [],\n+      declarations: [ImportExportComponent],\n+      providers: [\n+        StartupService,\n+        TaskanaEngineService,\n+        WindowRefService,\n+        WorkbasketDefinitionService,\n+        ClassificationDefinitionService,\n+        UploadService,\n+        ImportExportService,\n+        { provide: DomainService, useClass: domainServiceSpy },\n+        { provide: NotificationService, useClass: notificationServiceSpy },\n+        { provide: HttpClient, useClass: httpSpy }\n+      ]\n+    }).compileComponents();\n+\n+    jest.clearAllMocks();\n+\n+    fixture = TestBed.createComponent(ImportExportComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    app.currentSelection = TaskanaType.WORKBASKETS;\n+    fixture.detectChanges();\n+  }));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7012851b3008e7a74b3a3c5c35da74d452ecfbe3"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgzNjA0MA==", "bodyText": "It seems like there if-statements which are not tested. For example in export(), the call of the two different services could be tested. If we decide that additional tests are useful, this could also be done is a separate PR.", "url": "https://github.com/Taskana/taskana/pull/1253#discussion_r487836040", "createdAt": "2020-09-14T11:19:06Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/import-export/import-export.component.spec.ts", "diffHunk": "@@ -0,0 +1,104 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { DebugElement } from '@angular/core';\n+import { ImportExportComponent } from './import-export.component';\n+import { StartupService } from '../../../shared/services/startup/startup.service';\n+import { TaskanaEngineService } from '../../../shared/services/taskana-engine/taskana-engine.service';\n+import { WindowRefService } from '../../../shared/services/window/window.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { WorkbasketDefinitionService } from '../../services/workbasket-definition.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { UploadService } from '../../../shared/services/upload/upload.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { HttpClient, HttpHandler } from '@angular/common/http';\n+import { Router } from '@angular/router';\n+import { of } from 'rxjs';\n+import { ClassificationDefinitionService } from '../../services/classification-definition.service';\n+import { take, timeout } from 'rxjs/operators';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+import { BlobGenerator } from '../../../shared/util/blob-generator';\n+jest.mock('../../../shared/util/blob-generator');\n+\n+describe('ImportExportComponent', () => {\n+  let fixture: ComponentFixture<ImportExportComponent>;\n+  let debugElement: DebugElement;\n+  let app: ImportExportComponent;\n+\n+  const domainServiceSpy = jest.fn().mockImplementation(\n+    (): Partial<DomainService> => ({\n+      getSelectedDomainValue: jest.fn().mockReturnValue(of()),\n+      getSelectedDomain: jest.fn().mockReturnValue(of()),\n+      getDomains: jest.fn().mockReturnValue(of())\n+    })\n+  );\n+\n+  const httpSpy = jest.fn().mockImplementation(\n+    (): Partial<HttpClient> => ({\n+      get: jest.fn().mockReturnValue(of([])),\n+      post: jest.fn().mockReturnValue(of([]))\n+    })\n+  );\n+\n+  const showDialogFn = jest.fn().mockReturnValue(true);\n+  const notificationServiceSpy = jest.fn().mockImplementation(\n+    (): Partial<NotificationService> => ({\n+      showDialog: showDialogFn,\n+      showToast: showDialogFn,\n+      triggerError: showDialogFn\n+    })\n+  );\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [],\n+      declarations: [ImportExportComponent],\n+      providers: [\n+        StartupService,\n+        TaskanaEngineService,\n+        WindowRefService,\n+        WorkbasketDefinitionService,\n+        ClassificationDefinitionService,\n+        UploadService,\n+        ImportExportService,\n+        { provide: DomainService, useClass: domainServiceSpy },\n+        { provide: NotificationService, useClass: notificationServiceSpy },\n+        { provide: HttpClient, useClass: httpSpy }\n+      ]\n+    }).compileComponents();\n+\n+    jest.clearAllMocks();\n+\n+    fixture = TestBed.createComponent(ImportExportComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    app.currentSelection = TaskanaType.WORKBASKETS;\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should successfully upload a valid file', () => {\n+    app.selectedFileInput = {\n+      nativeElement: {\n+        files: [\n+          {\n+            lastModified: 1599117374674,\n+            name: 'Workbaskets_2020-09-03T09_16_14.1414Z.json',\n+            size: 59368,\n+            type: 'application/json',\n+            webkitRelativePath: ''\n+          }\n+        ]\n+      }\n+    };\n+    app.uploadFile();\n+    expect(app.uploadService.isInUse).toBeTruthy();\n+  });\n+\n+  it('should successfully export the classifications', async (done) => {\n+    app\n+      .export()\n+      .pipe(take(1))\n+      .subscribe(() => {\n+        expect(BlobGenerator.saveFile).toHaveBeenCalled();\n+        done();\n+      });\n+  });\n+});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7012851b3008e7a74b3a3c5c35da74d452ecfbe3"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "637ae6983dfa66e6055b72a5d0ba0b60b8a3f63a", "author": {"user": {"login": "Tristan2357", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/637ae6983dfa66e6055b72a5d0ba0b60b8a3f63a", "committedDate": "2020-10-05T16:36:40Z", "message": "TSK-1349: expanded tests for import-export and removed unnecessary console.log calls"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNjM5NjE3", "url": "https://github.com/Taskana/taskana/pull/1253#pullrequestreview-502639617", "createdAt": "2020-10-06T07:07:52Z", "commit": {"oid": "637ae6983dfa66e6055b72a5d0ba0b60b8a3f63a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyODU0Mjg1", "url": "https://github.com/Taskana/taskana/pull/1253#pullrequestreview-502854285", "createdAt": "2020-10-06T11:49:09Z", "commit": {"oid": "637ae6983dfa66e6055b72a5d0ba0b60b8a3f63a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4477, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}