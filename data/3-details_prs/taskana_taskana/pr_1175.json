{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4ODU1MzYw", "number": 1175, "title": "TSK-1333: Add history events for cancelled/terminated tasks", "bodyText": "Sonarcloud: https://sonarcloud.io/dashboard?branch=TSK-1333&id=gitgoodjhe_taskana\nNOTE:\nThe test coverage is once again not correct. it should be 100%, since it says the uncovered lines are the constructors of the 2 new events as well as the creation in the terminate/cancel methods of the TaskServiceImpl. These clearly actually get tested in the PR.", "createdAt": "2020-07-14T12:40:33Z", "url": "https://github.com/Taskana/taskana/pull/1175", "merged": true, "mergeCommit": {"oid": "901991e90bb3320a9c8d158457e5f8c2a527c4be"}, "closed": true, "closedAt": "2020-08-05T14:48:34Z", "author": {"login": "gitgoodjhe"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc07BVYAH2gAyNDQ4ODU1MzYwOjI4N2ZlYzk0Mzg5NzM5MjZiYTMzMzc2OTdjZWUyODU2ZjIyODhiNzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc76IuJAFqTQ2MTYwMzUxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "287fec9438973926ba3337697cee2856f2288b77", "author": {"user": {"login": "gitgoodjhe", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/287fec9438973926ba3337697cee2856f2288b77", "committedDate": "2020-07-14T19:16:00Z", "message": "TSK-1333: Add history events for cancelled/terminated tasks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NzIzMjUx", "url": "https://github.com/Taskana/taskana/pull/1175#pullrequestreview-448723251", "createdAt": "2020-07-15T08:08:43Z", "commit": {"oid": "287fec9438973926ba3337697cee2856f2288b77"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MDQ0OTM2", "url": "https://github.com/Taskana/taskana/pull/1175#pullrequestreview-454044936", "createdAt": "2020-07-23T11:32:37Z", "commit": {"oid": "287fec9438973926ba3337697cee2856f2288b77"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTozMjozN1rOG2GkEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTozNjoyMVrOG2GqaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4MzgyNg==", "bodyText": "I don't know what the good practice is. I personally prefer to separate action from assertion to make it more readable. By maybe Sonar complains?\nWhat do you think?", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r459383826", "createdAt": "2020-07-23T11:32:37Z", "author": {"login": "holgerhagen"}, "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnTaskCancellationAccTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnTaskCancellationAccTest extends AbstractAccTest {\n+\n+  private final TaskService taskService = taskanaEngine.getTaskService();\n+  private final SimpleHistoryServiceImpl historyService = getHistoryService();\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_CreateCancelledHistoryEvent_When_TaskIsCancelled() throws Exception {\n+\n+    final String taskId = \"TKI:000000000000000000000000000000000001\";\n+\n+    List<HistoryEventImpl> listEvents = historyService.createHistoryQuery().taskIdIn(taskId).list();\n+\n+    assertThat(listEvents).isEmpty();\n+\n+    assertThat(taskService.getTask(taskId).getState()).isEqualTo(TaskState.CLAIMED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "287fec9438973926ba3337697cee2856f2288b77"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NDUzMg==", "bodyText": "BTW: do we need the task to be in state CLAIMED to cancel it?", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r459384532", "createdAt": "2020-07-23T11:34:20Z", "author": {"login": "holgerhagen"}, "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnTaskCancellationAccTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnTaskCancellationAccTest extends AbstractAccTest {\n+\n+  private final TaskService taskService = taskanaEngine.getTaskService();\n+  private final SimpleHistoryServiceImpl historyService = getHistoryService();\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_CreateCancelledHistoryEvent_When_TaskIsCancelled() throws Exception {\n+\n+    final String taskId = \"TKI:000000000000000000000000000000000001\";\n+\n+    List<HistoryEventImpl> listEvents = historyService.createHistoryQuery().taskIdIn(taskId).list();\n+\n+    assertThat(listEvents).isEmpty();\n+\n+    assertThat(taskService.getTask(taskId).getState()).isEqualTo(TaskState.CLAIMED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4MzgyNg=="}, "originalCommit": {"oid": "287fec9438973926ba3337697cee2856f2288b77"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NDg2NA==", "bodyText": "see above", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r459384864", "createdAt": "2020-07-23T11:35:07Z", "author": {"login": "holgerhagen"}, "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnTaskTerminationAccTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnTaskTerminationAccTest extends AbstractAccTest {\n+\n+  private final TaskService taskService = taskanaEngine.getTaskService();\n+  private final SimpleHistoryServiceImpl historyService = getHistoryService();\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_CreateTerminatedHistoryEvent_When_TaskIsTerminated() throws Exception {\n+\n+    final String taskId = \"TKI:000000000000000000000000000000000001\";\n+\n+    List<HistoryEventImpl> listEvents = historyService.createHistoryQuery().taskIdIn(taskId).list();\n+\n+    assertThat(listEvents).isEmpty();\n+\n+    assertThat(taskService.getTask(taskId).getState()).isEqualTo(TaskState.CLAIMED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "287fec9438973926ba3337697cee2856f2288b77"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NTQ0OA==", "bodyText": "correct would be to use the completed timestamp, which should be identical.", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r459385448", "createdAt": "2020-07-23T11:36:21Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/spi/history/api/events/task/CancelledEvent.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package pro.taskana.spi.history.api.events.task;\n+\n+import pro.taskana.task.api.models.Task;\n+\n+/** Event fired if a task is cancelled. */\n+public class CancelledEvent extends TaskEvent {\n+\n+  public CancelledEvent(String id, Task task, String userId) {\n+    super(id, task, userId, null);\n+    eventType = \"TASK_CANCELLED\";\n+    created = task.getModified();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "287fec9438973926ba3337697cee2856f2288b77"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0414fcdf299633151dbda69f67ce3ac6f2f0821", "author": {"user": {"login": "gitgoodjhe", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/c0414fcdf299633151dbda69f67ce3ac6f2f0821", "committedDate": "2020-08-05T09:56:20Z", "message": "TSK-1333: Review findings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNjAzNTE5", "url": "https://github.com/Taskana/taskana/pull/1175#pullrequestreview-461603519", "createdAt": "2020-08-05T12:11:38Z", "commit": {"oid": "c0414fcdf299633151dbda69f67ce3ac6f2f0821"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4449, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}