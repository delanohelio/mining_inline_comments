{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMDcwMjQw", "number": 1034, "title": "TSK-1192 New Role for Task-Admin", "bodyText": "", "createdAt": "2020-04-28T11:56:50Z", "url": "https://github.com/Taskana/taskana/pull/1034", "merged": true, "mergeCommit": {"oid": "79b93e1c58e02a9330fb81408c66d549f499e567"}, "closed": true, "closedAt": "2020-05-11T14:08:14Z", "author": {"login": "gitgoodjhe"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccAuzagH2gAyNDEwMDcwMjQwOmViYTNkMjFjNGIyYTExMzFmMTJiODgwZTY3N2I5NDNjMzg2NDRiMjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgQPTHgFqTQwOTIwNTc3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "eba3d21c4b2a1131f12b880e677b943c38644b24", "author": {"user": {"login": "gitgoodjhe", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/eba3d21c4b2a1131f12b880e677b943c38644b24", "committedDate": "2020-04-28T09:47:05Z", "message": "TSK-1192 Introduced new Task-Admin Role"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965", "author": {"user": {"login": "gitgoodjhe", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/a7f443af0cb1797cd0acf4efc9e4abbf6a295965", "committedDate": "2020-04-28T11:14:11Z", "message": "Usage of the new TestTemplate-feature\n\n-for running tests multiple times with different AccessIds"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNzg1NjQ3", "url": "https://github.com/Taskana/taskana/pull/1034#pullrequestreview-401785647", "createdAt": "2020-04-28T12:30:52Z", "commit": {"oid": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjozMDo1MlrOGNRmpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzoyMzowOFrOGNTwpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3MzA5Mg==", "bodyText": "Shouldn't we compare the current userid with the creator of the comment in the database?", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r416573092", "createdAt": "2020-04-28T12:30:52Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "diffHunk": "@@ -70,7 +70,8 @@ TaskComment updateTaskComment(TaskComment taskCommentToUpdate)\n       taskService.getTask(taskCommentImplToUpdate.getTaskId());\n \n       if (taskCommentToUpdate.getCreator().equals(userId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU5NjA1Nw==", "bodyText": "Do we need this? Since this is not directly task related I would question this part", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r416596057", "createdAt": "2020-04-28T13:05:50Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/WorkbasketServiceImpl.java", "diffHunk": "@@ -75,7 +75,9 @@ public Workbasket getWorkbasket(String workbasketId)\n         throw new WorkbasketNotFoundException(\n             workbasketId, \"Workbasket with id \" + workbasketId + \" was not found.\");\n       }\n-      if (!taskanaEngine.getEngine().isUserInRole(TaskanaRole.ADMIN, TaskanaRole.BUSINESS_ADMIN)) {\n+      if (!taskanaEngine", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwMDY1MA==", "bodyText": "Do we have dependencies between the tests?", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r416600650", "createdAt": "2020-04-28T13:12:16Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/test/java/acceptance/task/DeleteTaskCommentAccTest.java", "diffHunk": "@@ -53,18 +55,41 @@ void should_FailToDeleteTaskComment_When_UserHasNoAuthorization()\n     TaskService taskService = taskanaEngine.getTaskService();\n \n     List<TaskComment> taskComments =\n-        taskService.getTaskComments(\"TKI:000000000000000000000000000000000002\");\n-    assertThat(taskComments).hasSize(2);\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000000\");\n+    assertThat(taskComments).hasSize(3);\n \n     ThrowingCallable lambda =\n-        () -> taskService.deleteTaskComment(\"TCI:000000000000000000000000000000000005\");\n+        () -> taskService.deleteTaskComment(\"TCI:000000000000000000000000000000000000\");\n \n     assertThatThrownBy(lambda).isInstanceOf(NotAuthorizedException.class);\n \n     // make sure the task comment was not deleted\n+    List<TaskComment> taskCommentsAfterDeletion =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000000\");\n+    assertThat(taskCommentsAfterDeletion).hasSize(3);\n+  }\n+\n+  @WithAccessId(user = \"admin\")\n+  @WithAccessId(user = \"taskadmin\")\n+  @TestTemplate\n+  void should_DeleteTaskComment_When_NoExplicitPermissionsButUserIsInAdministrativeRole()\n+      throws NotAuthorizedException, TaskNotFoundException, TaskCommentNotFoundException,\n+                 InvalidArgumentException, SQLException {\n+\n+    resetDb(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwMzQ2NA==", "bodyText": "why did you delete this test?", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r416603464", "createdAt": "2020-04-28T13:16:10Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/test/java/acceptance/task/TransferTaskAccTest.java", "diffHunk": "@@ -134,21 +158,7 @@ void testTransferTaskDoesNotExist() {\n \n   @WithAccessId(user = \"teamlead_1\", groups = \"teamlead_1\")\n   @Test\n-  void testTransferNotAuthorizationOnWorkbasketTransfer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwNTExNA==", "bodyText": "this should not be necessary if each test works own dedicated data sets.", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r416605114", "createdAt": "2020-04-28T13:18:30Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/test/java/acceptance/task/UpdateTaskAccTest.java", "diffHunk": "@@ -129,6 +130,31 @@ void should_ThrowException_When_TaskHasAlreadyBeenUpdated()\n         .withFailMessage(\"The task has already been updated by another user\");\n   }\n \n+  @WithAccessId(user = \"admin\")\n+  @WithAccessId(user = \"taskadmin\")\n+  @TestTemplate\n+  void should_UpdateTask_When_NoExplicitPermissionsButUserIsInAdministrativeRole()\n+      throws TaskNotFoundException, ClassificationNotFoundException, InvalidArgumentException,\n+                 ConcurrencyException, NotAuthorizedException, AttachmentPersistenceException,\n+                 InvalidStateException, SQLException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    Task task = taskService.getTask(\"TKI:000000000000000000000000000000000000\");\n+    final ClassificationSummary classificationSummary = task.getClassificationSummary();\n+    task.setClassificationKey(\"T2100\");\n+    Task updatedTask = taskService.updateTask(task);\n+    updatedTask = taskService.getTask(updatedTask.getId());\n+\n+    assertThat(updatedTask).isNotNull();\n+    assertThat(updatedTask.getClassificationSummary().getKey()).isEqualTo(\"T2100\");\n+    assertThat(updatedTask.getClassificationSummary()).isNotEqualTo(classificationSummary);\n+    assertThat(updatedTask.getCreated()).isNotEqualTo(updatedTask.getModified());\n+    assertThat(task.getPlanned()).isEqualTo(updatedTask.getPlanned());\n+    assertThat(task.getName()).isEqualTo(updatedTask.getName());\n+    assertThat(task.getDescription()).isEqualTo(updatedTask.getDescription());\n+    resetDb(false); // classification of task TKI:0..00 was changed...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwNTQ0Nw==", "bodyText": "in this testcase we do not need all the assertions, do we? I assume we have this tested in another testcase?", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r416605447", "createdAt": "2020-04-28T13:19:02Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/test/java/acceptance/task/UpdateTaskAccTest.java", "diffHunk": "@@ -129,6 +130,31 @@ void should_ThrowException_When_TaskHasAlreadyBeenUpdated()\n         .withFailMessage(\"The task has already been updated by another user\");\n   }\n \n+  @WithAccessId(user = \"admin\")\n+  @WithAccessId(user = \"taskadmin\")\n+  @TestTemplate\n+  void should_UpdateTask_When_NoExplicitPermissionsButUserIsInAdministrativeRole()\n+      throws TaskNotFoundException, ClassificationNotFoundException, InvalidArgumentException,\n+                 ConcurrencyException, NotAuthorizedException, AttachmentPersistenceException,\n+                 InvalidStateException, SQLException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    Task task = taskService.getTask(\"TKI:000000000000000000000000000000000000\");\n+    final ClassificationSummary classificationSummary = task.getClassificationSummary();\n+    task.setClassificationKey(\"T2100\");\n+    Task updatedTask = taskService.updateTask(task);\n+    updatedTask = taskService.getTask(updatedTask.getId());\n+\n+    assertThat(updatedTask).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwNjY2NA==", "bodyText": "what do we need this for?", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r416606664", "createdAt": "2020-04-28T13:20:45Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/test/java/acceptance/workbasket/DeleteWorkbasketAuthorizationsAccTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package acceptance.workbasket;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.TestTemplate;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.workbasket.api.WorkbasketService;\n+import pro.taskana.workbasket.api.models.WorkbasketAccessItem;\n+\n+/**\n+ * Acceptance test for all \"delete workbasket authorizations\" scenarios.\n+ */\n+@ExtendWith(JaasExtension.class)\n+public class DeleteWorkbasketAuthorizationsAccTest extends AbstractAccTest {\n+\n+  @WithAccessId(user = \"user_1_1\")\n+  @WithAccessId(user = \"taskadmin\")\n+  @TestTemplate\n+  public void should_ThrowException_When_UserRoleIsNotAdminOrBusinessAdmin() {\n+\n+    final WorkbasketService workbasketService = taskanaEngine.getWorkbasketService();\n+\n+    ThrowingCallable deleteWorkbasketAccessItemCall =\n+        () -> {\n+          workbasketService.deleteWorkbasketAccessItemsForAccessId(\"group_1\");\n+        };\n+\n+    assertThatThrownBy(deleteWorkbasketAccessItemCall).isInstanceOf(NotAuthorizedException.class);\n+\n+    WorkbasketAccessItem workbasketAccessItem =\n+        workbasketService.newWorkbasketAccessItem(\n+            \"WBI:100000000000000000000000000000000008\", \"newAccessIdForUpdate\");\n+\n+    workbasketAccessItem.setPermCustom1(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwNzU0MQ==", "bodyText": "see above. I'm not sure if we want to do this.", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r416607541", "createdAt": "2020-04-28T13:21:51Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/test/java/acceptance/workbasket/GetWorkbasketAccTest.java", "diffHunk": "@@ -51,6 +52,38 @@ void testGetWorkbasketById() throws NotAuthorizedException, WorkbasketNotFoundEx\n     assertThat(workbasket.getCustom4()).isEqualTo(\"custom4\");\n   }\n \n+  @WithAccessId(user = \"admin\")\n+  @WithAccessId(user = \"businessadmin\")\n+  @WithAccessId(user = \"taskadmin\")\n+\n+  @TestTemplate\n+  void should_ReturnWorkbasketByKeyAndDomain_When_NoExplicitPermissionButUserHasAdministrativeRole()\n+      throws NotAuthorizedException, WorkbasketNotFoundException {\n+\n+    WorkbasketService workbasketService = taskanaEngine.getWorkbasketService();\n+\n+    Workbasket retrievedWorkbasket =\n+        workbasketService.getWorkbasket(\"WBI:100000000000000000000000000000000007\");\n+\n+    assertThat(retrievedWorkbasket).isNotNull();\n+    assertThat(retrievedWorkbasket.getOwner()).isEqualTo(\"Peter Maier\");\n+  }\n+\n+  @WithAccessId(user = \"admin\")\n+  @WithAccessId(user = \"businessadmin\")\n+  @WithAccessId(user = \"taskadmin\")\n+  @TestTemplate\n+  void should_ReturnWorkbasketById_When_NoExplicitPermissionsButUserIsInAdministrativeRole()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwODQyMA==", "bodyText": "again - but here we already reject the get? Doesn't look consistent to me. But I would rather change the other parts.", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r416608420", "createdAt": "2020-04-28T13:23:08Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/test/java/acceptance/workbasket/GetWorkbasketAuthorizationsAccTest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package acceptance.workbasket;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.TestTemplate;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.workbasket.api.WorkbasketService;\n+\n+/**\n+ * Acceptance test for all \"get workbasket authorizations\" scenarios.\n+ */\n+@ExtendWith(JaasExtension.class)\n+public class GetWorkbasketAuthorizationsAccTest extends AbstractAccTest {\n+\n+  @WithAccessId(user = \"user_1_1\")\n+  @WithAccessId(user = \"taskadmin\")\n+  @TestTemplate\n+  public void should_ThrowException_When_UserRoleIsNotAdminOrBusinessAdmin() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e75a5f647562506087b53423f5c60cc82316d806", "author": {"user": {"login": "gitgoodjhe", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/e75a5f647562506087b53423f5c60cc82316d806", "committedDate": "2020-04-29T14:20:34Z", "message": "Task-Admin now allowed to get DistributionTargets"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MjA1Nzc2", "url": "https://github.com/Taskana/taskana/pull/1034#pullrequestreview-409205776", "createdAt": "2020-05-11T14:06:51Z", "commit": {"oid": "e75a5f647562506087b53423f5c60cc82316d806"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4535, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}