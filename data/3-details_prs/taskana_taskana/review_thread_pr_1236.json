{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4Nzk5MDg0", "number": 1236, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNTo0NjozNlrOEZzElg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoyMTo0MFrOEZz9Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDg2NjE0OnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNTo0NjozNlrOHC067g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODoyNjowNVrOHC8s1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyNjI1NA==", "bodyText": "This is not our naming convention.", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472726254", "createdAt": "2020-08-19T05:46:36Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.spec.ts", "diffHunk": "@@ -0,0 +1,118 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListToolbarComponent } from './workbasket-list-toolbar.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable } from 'rxjs';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { CreateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { Filter } from '../../../shared/models/filter';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { ACTION } from '../../../shared/models/action';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+\n+const getDomainFn = jest.fn().mockReturnValue(true);\n+const domainServiceMock = jest.fn().mockImplementation(\n+  (): Partial<DomainService> => ({\n+    getDomains: getDomainFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-import-export', template: '' })\n+class ImportExportStub {\n+  @Input() currentSelection: TaskanaType;\n+}\n+\n+@Component({ selector: 'taskana-shared-sort', template: '' })\n+class SortStub {\n+  @Input() sortingFields: Map<string, string>;\n+  @Input() defaultSortBy = 'key';\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+}\n+\n+@Component({ selector: 'taskana-shared-filter', template: '' })\n+class FilterStub {\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+describe('WorkbasketListToolbarComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListToolbarComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListToolbarComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([WorkbasketState]),\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [WorkbasketListToolbarComponent, ImportExportStub, SortStub, FilterStub],\n+      providers: [{ provide: DomainService, useClass: domainServiceMock }, WorkbasketService]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListToolbarComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    component.action = ACTION.COPY;\n+  }));\n+\n+  it('should create the component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch CreateWorkbasket when addWorkbasket is called', async((done) => {\n+    component.addWorkbasket();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should not do anything in addWorkbasket if action is create ', async((done) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1MzcxNw==", "bodyText": "changed to \"should not dispatch action in addWorkbasket when action is CREATE\"", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472853717", "createdAt": "2020-08-19T08:26:05Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.spec.ts", "diffHunk": "@@ -0,0 +1,118 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListToolbarComponent } from './workbasket-list-toolbar.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable } from 'rxjs';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { CreateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { Filter } from '../../../shared/models/filter';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { ACTION } from '../../../shared/models/action';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+\n+const getDomainFn = jest.fn().mockReturnValue(true);\n+const domainServiceMock = jest.fn().mockImplementation(\n+  (): Partial<DomainService> => ({\n+    getDomains: getDomainFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-import-export', template: '' })\n+class ImportExportStub {\n+  @Input() currentSelection: TaskanaType;\n+}\n+\n+@Component({ selector: 'taskana-shared-sort', template: '' })\n+class SortStub {\n+  @Input() sortingFields: Map<string, string>;\n+  @Input() defaultSortBy = 'key';\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+}\n+\n+@Component({ selector: 'taskana-shared-filter', template: '' })\n+class FilterStub {\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+describe('WorkbasketListToolbarComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListToolbarComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListToolbarComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([WorkbasketState]),\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [WorkbasketListToolbarComponent, ImportExportStub, SortStub, FilterStub],\n+      providers: [{ provide: DomainService, useClass: domainServiceMock }, WorkbasketService]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListToolbarComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    component.action = ACTION.COPY;\n+  }));\n+\n+  it('should create the component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch CreateWorkbasket when addWorkbasket is called', async((done) => {\n+    component.addWorkbasket();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should not do anything in addWorkbasket if action is create ', async((done) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyNjI1NA=="}, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDg4MzM2OnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.spec.ts", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNTo1MDo1MFrOHC1F4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOTowMjoyN1rOHC-GUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyOTA1Ng==", "bodyText": "In case the action wouldn't be triggered, this line wouldn't be called and the test would be true although it had failed.", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472729056", "createdAt": "2020-08-19T05:50:50Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.spec.ts", "diffHunk": "@@ -0,0 +1,118 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListToolbarComponent } from './workbasket-list-toolbar.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable } from 'rxjs';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { CreateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { Filter } from '../../../shared/models/filter';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { ACTION } from '../../../shared/models/action';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+\n+const getDomainFn = jest.fn().mockReturnValue(true);\n+const domainServiceMock = jest.fn().mockImplementation(\n+  (): Partial<DomainService> => ({\n+    getDomains: getDomainFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-import-export', template: '' })\n+class ImportExportStub {\n+  @Input() currentSelection: TaskanaType;\n+}\n+\n+@Component({ selector: 'taskana-shared-sort', template: '' })\n+class SortStub {\n+  @Input() sortingFields: Map<string, string>;\n+  @Input() defaultSortBy = 'key';\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+}\n+\n+@Component({ selector: 'taskana-shared-filter', template: '' })\n+class FilterStub {\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+describe('WorkbasketListToolbarComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListToolbarComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListToolbarComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([WorkbasketState]),\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [WorkbasketListToolbarComponent, ImportExportStub, SortStub, FilterStub],\n+      providers: [{ provide: DomainService, useClass: domainServiceMock }, WorkbasketService]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListToolbarComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    component.action = ACTION.COPY;\n+  }));\n+\n+  it('should create the component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch CreateWorkbasket when addWorkbasket is called', async((done) => {\n+    component.addWorkbasket();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1NDIyMQ==", "bodyText": "the case action isn't called is covered by the test under this", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472854221", "createdAt": "2020-08-19T08:26:59Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.spec.ts", "diffHunk": "@@ -0,0 +1,118 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListToolbarComponent } from './workbasket-list-toolbar.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable } from 'rxjs';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { CreateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { Filter } from '../../../shared/models/filter';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { ACTION } from '../../../shared/models/action';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+\n+const getDomainFn = jest.fn().mockReturnValue(true);\n+const domainServiceMock = jest.fn().mockImplementation(\n+  (): Partial<DomainService> => ({\n+    getDomains: getDomainFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-import-export', template: '' })\n+class ImportExportStub {\n+  @Input() currentSelection: TaskanaType;\n+}\n+\n+@Component({ selector: 'taskana-shared-sort', template: '' })\n+class SortStub {\n+  @Input() sortingFields: Map<string, string>;\n+  @Input() defaultSortBy = 'key';\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+}\n+\n+@Component({ selector: 'taskana-shared-filter', template: '' })\n+class FilterStub {\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+describe('WorkbasketListToolbarComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListToolbarComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListToolbarComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([WorkbasketState]),\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [WorkbasketListToolbarComponent, ImportExportStub, SortStub, FilterStub],\n+      providers: [{ provide: DomainService, useClass: domainServiceMock }, WorkbasketService]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListToolbarComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    component.action = ACTION.COPY;\n+  }));\n+\n+  it('should create the component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch CreateWorkbasket when addWorkbasket is called', async((done) => {\n+    component.addWorkbasket();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyOTA1Ng=="}, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NTYwOA==", "bodyText": "You are setting actionDispatched to true right before you test whether actionDispatched is true. Therefore, the test will never fail.\nHowever, this test should fail when the action is not dispatched although the action is not CREATE. But the test won't fail.", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472875608", "createdAt": "2020-08-19T09:00:48Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.spec.ts", "diffHunk": "@@ -0,0 +1,118 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListToolbarComponent } from './workbasket-list-toolbar.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable } from 'rxjs';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { CreateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { Filter } from '../../../shared/models/filter';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { ACTION } from '../../../shared/models/action';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+\n+const getDomainFn = jest.fn().mockReturnValue(true);\n+const domainServiceMock = jest.fn().mockImplementation(\n+  (): Partial<DomainService> => ({\n+    getDomains: getDomainFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-import-export', template: '' })\n+class ImportExportStub {\n+  @Input() currentSelection: TaskanaType;\n+}\n+\n+@Component({ selector: 'taskana-shared-sort', template: '' })\n+class SortStub {\n+  @Input() sortingFields: Map<string, string>;\n+  @Input() defaultSortBy = 'key';\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+}\n+\n+@Component({ selector: 'taskana-shared-filter', template: '' })\n+class FilterStub {\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+describe('WorkbasketListToolbarComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListToolbarComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListToolbarComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([WorkbasketState]),\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [WorkbasketListToolbarComponent, ImportExportStub, SortStub, FilterStub],\n+      providers: [{ provide: DomainService, useClass: domainServiceMock }, WorkbasketService]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListToolbarComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    component.action = ACTION.COPY;\n+  }));\n+\n+  it('should create the component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch CreateWorkbasket when addWorkbasket is called', async((done) => {\n+    component.addWorkbasket();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyOTA1Ng=="}, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NjYyNA==", "bodyText": "I think the expect should be outside of the subscription.", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472876624", "createdAt": "2020-08-19T09:02:27Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.spec.ts", "diffHunk": "@@ -0,0 +1,118 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListToolbarComponent } from './workbasket-list-toolbar.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable } from 'rxjs';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { CreateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { Filter } from '../../../shared/models/filter';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { ACTION } from '../../../shared/models/action';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+\n+const getDomainFn = jest.fn().mockReturnValue(true);\n+const domainServiceMock = jest.fn().mockImplementation(\n+  (): Partial<DomainService> => ({\n+    getDomains: getDomainFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-import-export', template: '' })\n+class ImportExportStub {\n+  @Input() currentSelection: TaskanaType;\n+}\n+\n+@Component({ selector: 'taskana-shared-sort', template: '' })\n+class SortStub {\n+  @Input() sortingFields: Map<string, string>;\n+  @Input() defaultSortBy = 'key';\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+}\n+\n+@Component({ selector: 'taskana-shared-filter', template: '' })\n+class FilterStub {\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+describe('WorkbasketListToolbarComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListToolbarComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListToolbarComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([WorkbasketState]),\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [WorkbasketListToolbarComponent, ImportExportStub, SortStub, FilterStub],\n+      providers: [{ provide: DomainService, useClass: domainServiceMock }, WorkbasketService]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListToolbarComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    component.action = ACTION.COPY;\n+  }));\n+\n+  it('should create the component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch CreateWorkbasket when addWorkbasket is called', async((done) => {\n+    component.addWorkbasket();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyOTA1Ng=="}, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDg4NDQwOnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNTo1MTowN1rOHC1Glw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODoyNzoxMVrOHC8vKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyOTIzOQ==", "bodyText": "I think this test is never called since the action is not dispatched.", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472729239", "createdAt": "2020-08-19T05:51:07Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.spec.ts", "diffHunk": "@@ -0,0 +1,118 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListToolbarComponent } from './workbasket-list-toolbar.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable } from 'rxjs';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { CreateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { Filter } from '../../../shared/models/filter';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { ACTION } from '../../../shared/models/action';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+\n+const getDomainFn = jest.fn().mockReturnValue(true);\n+const domainServiceMock = jest.fn().mockImplementation(\n+  (): Partial<DomainService> => ({\n+    getDomains: getDomainFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-import-export', template: '' })\n+class ImportExportStub {\n+  @Input() currentSelection: TaskanaType;\n+}\n+\n+@Component({ selector: 'taskana-shared-sort', template: '' })\n+class SortStub {\n+  @Input() sortingFields: Map<string, string>;\n+  @Input() defaultSortBy = 'key';\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+}\n+\n+@Component({ selector: 'taskana-shared-filter', template: '' })\n+class FilterStub {\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+describe('WorkbasketListToolbarComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListToolbarComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListToolbarComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([WorkbasketState]),\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [WorkbasketListToolbarComponent, ImportExportStub, SortStub, FilterStub],\n+      providers: [{ provide: DomainService, useClass: domainServiceMock }, WorkbasketService]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListToolbarComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    component.action = ACTION.COPY;\n+  }));\n+\n+  it('should create the component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch CreateWorkbasket when addWorkbasket is called', async((done) => {\n+    component.addWorkbasket();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should not do anything in addWorkbasket if action is create ', async((done) => {\n+    component.action = ACTION.CREATE;\n+    fixture.detectChanges();\n+    component.addWorkbasket();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1NDMxNA==", "bodyText": "moved expect out of subscription, this action shouldn't be dispatched so that actionDispatched should always be false. Expect false at the end of test case will still be checked", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472854314", "createdAt": "2020-08-19T08:27:11Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.spec.ts", "diffHunk": "@@ -0,0 +1,118 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListToolbarComponent } from './workbasket-list-toolbar.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable } from 'rxjs';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { CreateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { Filter } from '../../../shared/models/filter';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { ACTION } from '../../../shared/models/action';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+\n+const getDomainFn = jest.fn().mockReturnValue(true);\n+const domainServiceMock = jest.fn().mockImplementation(\n+  (): Partial<DomainService> => ({\n+    getDomains: getDomainFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-import-export', template: '' })\n+class ImportExportStub {\n+  @Input() currentSelection: TaskanaType;\n+}\n+\n+@Component({ selector: 'taskana-shared-sort', template: '' })\n+class SortStub {\n+  @Input() sortingFields: Map<string, string>;\n+  @Input() defaultSortBy = 'key';\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+}\n+\n+@Component({ selector: 'taskana-shared-filter', template: '' })\n+class FilterStub {\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+describe('WorkbasketListToolbarComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListToolbarComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListToolbarComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([WorkbasketState]),\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [WorkbasketListToolbarComponent, ImportExportStub, SortStub, FilterStub],\n+      providers: [{ provide: DomainService, useClass: domainServiceMock }, WorkbasketService]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListToolbarComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    component.action = ACTION.COPY;\n+  }));\n+\n+  it('should create the component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch CreateWorkbasket when addWorkbasket is called', async((done) => {\n+    component.addWorkbasket();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should not do anything in addWorkbasket if action is create ', async((done) => {\n+    component.action = ACTION.CREATE;\n+    fixture.detectChanges();\n+    component.addWorkbasket();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyOTIzOQ=="}, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDk3MjI5OnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoxMjozOFrOHC2AtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOTowMTowMlrOHC-C_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NDExNg==", "bodyText": "see above", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472744116", "createdAt": "2020-08-19T06:12:38Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NTc3Mg==", "bodyText": "fixed by calling the the subscription in a zip\n    zip(actions$.pipe(ofActionDispatched(SelectWorkbasket))).subscribe(() => (actionDispatched = true));       component.selectWorkbasket('1');\n    expect(actionDispatched).toBe(true);", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472875772", "createdAt": "2020-08-19T09:01:02Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NDExNg=="}, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDk3Mjk3OnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoxMjo0OFrOHC2BIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOTowMTo0NVrOHC-Ejg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NDIyNg==", "bodyText": "see above", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472744226", "createdAt": "2020-08-19T06:12:48Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should dispatch DeselectWorkbasket when selecting a workbasket again', async((done) => {\n+    component.selectedId = '1';\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(DeselectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NjE3NA==", "bodyText": "\ud83d\ude00\ud83d\udc46\ud83c\udffb", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472876174", "createdAt": "2020-08-19T09:01:45Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should dispatch DeselectWorkbasket when selecting a workbasket again', async((done) => {\n+    component.selectedId = '1';\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(DeselectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NDIyNg=="}, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDk4NDQyOnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoxNTozM1rOHC2IpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODozNjoxNVrOHC9E0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NjE0OQ==", "bodyText": "This isn't our naming convention. I suggest 'should set sort value when performSorting is called'.", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472746149", "createdAt": "2020-08-19T06:15:33Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should dispatch DeselectWorkbasket when selecting a workbasket again', async((done) => {\n+    component.selectedId = '1';\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(DeselectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('performSorting should set sort value', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1OTg1OA==", "bodyText": "changed as suggestion", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472859858", "createdAt": "2020-08-19T08:36:15Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should dispatch DeselectWorkbasket when selecting a workbasket again', async((done) => {\n+    component.selectedId = '1';\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(DeselectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('performSorting should set sort value', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NjE0OQ=="}, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDk4NzgxOnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoxNjoxOFrOHC2Kwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODozNjo0NFrOHC9GDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NjY5MA==", "bodyText": "naming convention: 'should set filter value when performFilter is called'", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472746690", "createdAt": "2020-08-19T06:16:18Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should dispatch DeselectWorkbasket when selecting a workbasket again', async((done) => {\n+    component.selectedId = '1';\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(DeselectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('performSorting should set sort value', () => {\n+    const sort = { sortBy: '1', sortDirection: 'asc' };\n+    component.performSorting(sort);\n+    expect(component.sort).toMatchObject(sort);\n+  });\n+\n+  it('performFilter should set filter value', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg2MDE3NQ==", "bodyText": "changed as suggestion", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472860175", "createdAt": "2020-08-19T08:36:44Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should dispatch DeselectWorkbasket when selecting a workbasket again', async((done) => {\n+    component.selectedId = '1';\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(DeselectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('performSorting should set sort value', () => {\n+    const sort = { sortBy: '1', sortDirection: 'asc' };\n+    component.performSorting(sort);\n+    expect(component.sort).toMatchObject(sort);\n+  });\n+\n+  it('performFilter should set filter value', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NjY5MA=="}, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDk5MTQ2OnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoxNzoxM1rOHC2NWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODo1ODoxMFrOHC97mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NzM1Mw==", "bodyText": "naming convention: 'should change page value when changePage function is called'", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472747353", "createdAt": "2020-08-19T06:17:13Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should dispatch DeselectWorkbasket when selecting a workbasket again', async((done) => {\n+    component.selectedId = '1';\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(DeselectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('performSorting should set sort value', () => {\n+    const sort = { sortBy: '1', sortDirection: 'asc' };\n+    component.performSorting(sort);\n+    expect(component.sort).toMatchObject(sort);\n+  });\n+\n+  it('performFilter should set filter value', () => {\n+    const filter = { filterParams: '123' };\n+    component.performFilter(filter);\n+    expect(component.filterBy).toMatchObject(filter);\n+  });\n+\n+  it('change page function should change page value', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3Mzg4MQ==", "bodyText": "changed as suggestion", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472873881", "createdAt": "2020-08-19T08:58:10Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should dispatch DeselectWorkbasket when selecting a workbasket again', async((done) => {\n+    component.selectedId = '1';\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(DeselectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('performSorting should set sort value', () => {\n+    const sort = { sortBy: '1', sortDirection: 'asc' };\n+    component.performSorting(sort);\n+    expect(component.sort).toMatchObject(sort);\n+  });\n+\n+  it('performFilter should set filter value', () => {\n+    const filter = { filterParams: '123' };\n+    component.performFilter(filter);\n+    expect(component.filterBy).toMatchObject(filter);\n+  });\n+\n+  it('change page function should change page value', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NzM1Mw=="}, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTAxMTUxOnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/components/workbasket-overview/workbasket-overview.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoyMTo0MFrOHC2aGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODo1Nzo1OFrOHC97MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1MDYxNg==", "bodyText": "Missing async / done", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472750616", "createdAt": "2020-08-19T06:21:40Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-overview/workbasket-overview.component.spec.ts", "diffHunk": "@@ -0,0 +1,176 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketOverviewComponent } from './workbasket-overview.component';\n+import { Component, DebugElement } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { SelectedRouteService } from '../../../shared/services/selected-route/selected-route';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { ActivatedRoute } from '@angular/router';\n+import { CreateWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    triggerError: showDialogFn,\n+    showToast: showDialogFn\n+  })\n+);\n+\n+const mockActivatedRoute = {\n+  firstChild: {\n+    params: of({\n+      id: 'new-workbasket'\n+    })\n+  }\n+};\n+\n+const mockActivatedRouteAlternative = {\n+  firstChild: {\n+    params: of({\n+      id: '101'\n+    })\n+  }\n+};\n+\n+const mockActivatedRouteNoParams = {};\n+\n+@Component({ selector: 'taskana-administration-workbasket-list', template: '' })\n+class WorkbasketListStub {}\n+\n+@Component({ selector: 'taskana-administration-workbasket-details', template: '' })\n+class WorkbasketDetailsStub {}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketOverviewComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketOverviewComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketOverviewComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]), NgxsModule.forRoot([WorkbasketState])],\n+      declarations: [WorkbasketOverviewComponent, WorkbasketListStub, WorkbasketDetailsStub, SvgIconStub],\n+      providers: [\n+        WorkbasketService,\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        { provide: ActivatedRoute, useValue: mockActivatedRoute },\n+        DomainService,\n+        RequestInProgressService,\n+        SelectedRouteService\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketOverviewComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create the component', () => {\n+    let activatedRoute = TestBed.inject(ActivatedRoute);\n+    expect(component).toBeTruthy();\n+    activatedRoute.firstChild.params.subscribe((params) => {\n+      expect(component.routerParams).toMatchObject(params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3Mzc3Ng==", "bodyText": "removed this expect, this was for debugging purpose", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472873776", "createdAt": "2020-08-19T08:57:58Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/workbasket-overview/workbasket-overview.component.spec.ts", "diffHunk": "@@ -0,0 +1,176 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketOverviewComponent } from './workbasket-overview.component';\n+import { Component, DebugElement } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { SelectedRouteService } from '../../../shared/services/selected-route/selected-route';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { ActivatedRoute } from '@angular/router';\n+import { CreateWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    triggerError: showDialogFn,\n+    showToast: showDialogFn\n+  })\n+);\n+\n+const mockActivatedRoute = {\n+  firstChild: {\n+    params: of({\n+      id: 'new-workbasket'\n+    })\n+  }\n+};\n+\n+const mockActivatedRouteAlternative = {\n+  firstChild: {\n+    params: of({\n+      id: '101'\n+    })\n+  }\n+};\n+\n+const mockActivatedRouteNoParams = {};\n+\n+@Component({ selector: 'taskana-administration-workbasket-list', template: '' })\n+class WorkbasketListStub {}\n+\n+@Component({ selector: 'taskana-administration-workbasket-details', template: '' })\n+class WorkbasketDetailsStub {}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketOverviewComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketOverviewComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketOverviewComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]), NgxsModule.forRoot([WorkbasketState])],\n+      declarations: [WorkbasketOverviewComponent, WorkbasketListStub, WorkbasketDetailsStub, SvgIconStub],\n+      providers: [\n+        WorkbasketService,\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        { provide: ActivatedRoute, useValue: mockActivatedRoute },\n+        DomainService,\n+        RequestInProgressService,\n+        SelectedRouteService\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketOverviewComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create the component', () => {\n+    let activatedRoute = TestBed.inject(ActivatedRoute);\n+    expect(component).toBeTruthy();\n+    activatedRoute.firstChild.params.subscribe((params) => {\n+      expect(component.routerParams).toMatchObject(params);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1MDYxNg=="}, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4154, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}