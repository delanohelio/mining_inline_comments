{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMTI3NDA2", "number": 989, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo0NjozNFrODrFQWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDowNDoyNlrODvDoyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTAxNDY2OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/classification/internal/models/ClassificationImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo0NjozNFrOF7N4Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo0NjozNFrOF7N4Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNzY5OA==", "bodyText": "please make this constructor private. The code segment which is using the constructor should use the new clone method instead.", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r397637698", "createdAt": "2020-03-25T06:46:34Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/main/java/pro/taskana/classification/internal/models/ClassificationImpl.java", "diffHunk": "@@ -16,30 +16,12 @@\n \n   public ClassificationImpl() {}\n \n-  public ClassificationImpl(ClassificationImpl classification) {\n-    this.id = classification.getId();\n-    this.key = classification.getKey();\n-    this.parentId = classification.getParentId();\n-    this.parentKey = classification.getParentKey();\n-    this.category = classification.getCategory();\n-    this.type = classification.getType();\n-    this.domain = classification.getDomain();\n-    this.isValidInDomain = classification.getIsValidInDomain();\n-    this.created = classification.getCreated();\n-    this.modified = classification.getModified();\n-    this.name = classification.getName();\n-    this.description = classification.getDescription();\n-    this.priority = classification.getPriority();\n-    this.serviceLevel = classification.getServiceLevel();\n-    this.applicationEntryPoint = classification.getApplicationEntryPoint();\n-    this.custom1 = classification.getCustom1();\n-    this.custom2 = classification.getCustom2();\n-    this.custom3 = classification.getCustom3();\n-    this.custom4 = classification.getCustom4();\n-    this.custom5 = classification.getCustom5();\n-    this.custom6 = classification.getCustom6();\n-    this.custom7 = classification.getCustom7();\n-    this.custom8 = classification.getCustom8();\n+  public ClassificationImpl(ClassificationImpl copyFrom) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c716535a8074c36c4afb8b5569f2258a620340ff"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTAzMDQ3OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/test/java/pro/taskana/classification/api/models/ClassificationApiModelsCloneTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo1NDowM1rOF7OBdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo1NDowM1rOF7OBdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MDA1Mg==", "bodyText": "our convention is Test. Here it would be ClassificationTest", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r397640052", "createdAt": "2020-03-25T06:54:03Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/test/java/pro/taskana/classification/api/models/ClassificationApiModelsCloneTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package pro.taskana.classification.api.models;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import pro.taskana.classification.internal.models.ClassificationImpl;\n+\n+class ClassificationApiModelsCloneTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c716535a8074c36c4afb8b5569f2258a620340ff"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTAzMTc2OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/test/java/pro/taskana/task/api/models/TaskApiModelsCloneTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo1NDo0NFrOF7OCRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo1NDo0NFrOF7OCRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MDI2Mw==", "bodyText": "TaskTest", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r397640263", "createdAt": "2020-03-25T06:54:44Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/test/java/pro/taskana/task/api/models/TaskApiModelsCloneTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package pro.taskana.task.api.models;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import pro.taskana.task.internal.CreateTaskApiModelHelper;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskApiModelsCloneTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c716535a8074c36c4afb8b5569f2258a620340ff"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTAzMzIxOnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/test/java/pro/taskana/task/api/models/TaskApiModelsCloneTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo1NTozMFrOF7ODGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo1NTozMFrOF7ODGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MDQ3NA==", "bodyText": "I need a second opinion on this test structure :)", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r397640474", "createdAt": "2020-03-25T06:55:30Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/test/java/pro/taskana/task/api/models/TaskApiModelsCloneTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package pro.taskana.task.api.models;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import pro.taskana.task.internal.CreateTaskApiModelHelper;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskApiModelsCloneTest {\n+\n+  @Test\n+  void testCloneInTaskSummary() {\n+    Task dummyTaskForSummaryTest =\n+        CreateTaskApiModelHelper.createUnitTestTask(\n+            \"dummyTaskId\",\n+            \"dummyTaskName\",\n+            \"workbasketKey\",\n+            CreateTaskApiModelHelper.createDummyClassification());\n+    TaskSummary dummyTaskSummary = dummyTaskForSummaryTest.asSummary();\n+    TaskSummary dummyTaskSummaryCloned = dummyTaskSummary.clone();\n+    assertThat(dummyTaskSummaryCloned).isEqualTo(dummyTaskSummary);\n+  }\n+\n+  @Test\n+  void testCloneInTask() {\n+    Task dummyTask =\n+        CreateTaskApiModelHelper.createUnitTestTask(\n+            \"dummyTaskId\",\n+            \"dummyTaskName\",\n+            \"workbasketKey\",\n+            CreateTaskApiModelHelper.createDummyClassification());\n+    Task dummyTaskCloned = dummyTask.clone();\n+    assertThat(dummyTaskCloned).isEqualTo(dummyTask);\n+  }\n+\n+  @Test\n+  void testCloneInTaskComment() {\n+    TaskComment dummyComment = new TaskCommentImpl();\n+    dummyComment.setTextField(\"dummyTextField\");\n+    TaskComment dummyCommentCloned = dummyComment.clone();\n+    assertThat(dummyCommentCloned).isEqualTo(dummyComment);\n+  }\n+\n+  @Test\n+  void testCloneInObjectReference() {\n+    ObjectReference dummyReference = new ObjectReference();\n+    dummyReference.setId(\"dummyId\");\n+    dummyReference.setSystem(\"dummySystem\");\n+    dummyReference.setCompany(\"dummyCompany\");\n+    dummyReference.setSystemInstance(\"dummySystemInstance\");\n+    dummyReference.setType(\"dummyType\");\n+    dummyReference.setValue(\"dummyValue\");\n+    ObjectReference dummyReferenceCloned = dummyReference.clone();\n+    assertThat(dummyReferenceCloned).isEqualTo(dummyReference);\n+    assertThat(dummyReferenceCloned != dummyReference);\n+  }\n+\n+  @Test\n+  void testCloneInAttachmentSummary() {\n+    Attachment dummyAttachmentForSummaryTest =\n+        CreateTaskApiModelHelper.createAttachment(\"dummyAttachmentId\", \"dummyTaskId\");\n+    AttachmentSummary dummyAttachmentSummary = dummyAttachmentForSummaryTest.asSummary();\n+    AttachmentSummary dummyAttachmentSummaryCloned = dummyAttachmentSummary.clone();\n+    assertThat(dummyAttachmentSummaryCloned).isEqualTo(dummyAttachmentSummary);\n+    assertThat(dummyAttachmentSummaryCloned != dummyAttachmentSummary);\n+  }\n+\n+  @Test\n+  void testCloneInAttachment() {\n+    Attachment dummyAttachment =\n+        CreateTaskApiModelHelper.createAttachment(\"dummyAttachmentId\", \"dummyTaskId\");\n+    Attachment dummyAttachmentCloned = dummyAttachment.clone();\n+    assertThat(dummyAttachmentCloned).isEqualTo(dummyAttachment);\n+    assertThat(dummyAttachmentCloned != dummyAttachment);\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c716535a8074c36c4afb8b5569f2258a620340ff"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTAzNjA0OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/test/java/pro/taskana/task/internal/TaskAttachmentTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo1Njo0NVrOF7OEqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo1Njo0NVrOF7OEqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MDg3Mg==", "bodyText": "Is there a reason you removed the annotation?", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r397640872", "createdAt": "2020-03-25T06:56:45Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/test/java/pro/taskana/task/internal/TaskAttachmentTest.java", "diffHunk": "@@ -28,13 +26,13 @@\n @ExtendWith(MockitoExtension.class)\n class TaskAttachmentTest {\n \n-  @InjectMocks private TaskImpl cut;\n+  private TaskImpl cut = new TaskImpl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c716535a8074c36c4afb8b5569f2258a620340ff"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTA5NjAyOnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/test/java/pro/taskana/task/internal/TaskAttachmentTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzoyNDo0MVrOF7OpCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzoyNDo0MVrOF7OpCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1MDE4NQ==", "bodyText": "please also remove this.", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r397650185", "createdAt": "2020-03-25T07:24:41Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/test/java/pro/taskana/task/internal/TaskAttachmentTest.java", "diffHunk": "@@ -28,13 +26,13 @@\n @ExtendWith(MockitoExtension.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c716535a8074c36c4afb8b5569f2258a620340ff"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTMwOTU4OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/test/java/pro/taskana/task/api/models/TaskApiModelsCloneTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODozODoxMlrOF7Qq1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODozODoxMlrOF7Qq1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4MzQxMg==", "bodyText": "assertThat(dummyREferenceCloned).isNotSameAs(dummyRefernce);", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r397683412", "createdAt": "2020-03-25T08:38:12Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/test/java/pro/taskana/task/api/models/TaskApiModelsCloneTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package pro.taskana.task.api.models;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import pro.taskana.task.internal.CreateTaskApiModelHelper;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskApiModelsCloneTest {\n+\n+  @Test\n+  void testCloneInTaskSummary() {\n+    Task dummyTaskForSummaryTest =\n+        CreateTaskApiModelHelper.createUnitTestTask(\n+            \"dummyTaskId\",\n+            \"dummyTaskName\",\n+            \"workbasketKey\",\n+            CreateTaskApiModelHelper.createDummyClassification());\n+    TaskSummary dummyTaskSummary = dummyTaskForSummaryTest.asSummary();\n+    TaskSummary dummyTaskSummaryCloned = dummyTaskSummary.clone();\n+    assertThat(dummyTaskSummaryCloned).isEqualTo(dummyTaskSummary);\n+  }\n+\n+  @Test\n+  void testCloneInTask() {\n+    Task dummyTask =\n+        CreateTaskApiModelHelper.createUnitTestTask(\n+            \"dummyTaskId\",\n+            \"dummyTaskName\",\n+            \"workbasketKey\",\n+            CreateTaskApiModelHelper.createDummyClassification());\n+    Task dummyTaskCloned = dummyTask.clone();\n+    assertThat(dummyTaskCloned).isEqualTo(dummyTask);\n+  }\n+\n+  @Test\n+  void testCloneInTaskComment() {\n+    TaskComment dummyComment = new TaskCommentImpl();\n+    dummyComment.setTextField(\"dummyTextField\");\n+    TaskComment dummyCommentCloned = dummyComment.clone();\n+    assertThat(dummyCommentCloned).isEqualTo(dummyComment);\n+  }\n+\n+  @Test\n+  void testCloneInObjectReference() {\n+    ObjectReference dummyReference = new ObjectReference();\n+    dummyReference.setId(\"dummyId\");\n+    dummyReference.setSystem(\"dummySystem\");\n+    dummyReference.setCompany(\"dummyCompany\");\n+    dummyReference.setSystemInstance(\"dummySystemInstance\");\n+    dummyReference.setType(\"dummyType\");\n+    dummyReference.setValue(\"dummyValue\");\n+    ObjectReference dummyReferenceCloned = dummyReference.clone();\n+    assertThat(dummyReferenceCloned).isEqualTo(dummyReference);\n+    assertThat(dummyReferenceCloned != dummyReference);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c716535a8074c36c4afb8b5569f2258a620340ff"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTMxNTM1OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/test/java/pro/taskana/workbasket/api/models/WorkbasketApiModelsCloneTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODozOTo1MFrOF7QuXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODozOTo1MFrOF7QuXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4NDMxOA==", "bodyText": "Please remove Api", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r397684318", "createdAt": "2020-03-25T08:39:50Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/test/java/pro/taskana/workbasket/api/models/WorkbasketApiModelsCloneTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package pro.taskana.workbasket.api.models;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import pro.taskana.workbasket.internal.models.WorkbasketAccessItemImpl;\n+import pro.taskana.workbasket.internal.models.WorkbasketImpl;\n+\n+class WorkbasketApiModelsCloneTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c716535a8074c36c4afb8b5569f2258a620340ff"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTE0MjA0OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/models/WorkbasketSummaryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoxNzo0OVrOF8JFlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoxNzo0OVrOF8JFlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYwNzc2Ng==", "bodyText": "Please remove this //Compliant //Compliant", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r398607766", "createdAt": "2020-03-26T14:17:49Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/models/WorkbasketSummaryImpl.java", "diffHunk": "@@ -231,6 +250,11 @@ public void setMarkedForDeletion(boolean markedForDeletion) {\n     this.markedForDeletion = markedForDeletion;\n   }\n \n+  @Override\n+  public WorkbasketSummaryImpl copy() { // Compliant// Compliant", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "696ed37e21361318666cfa2a2734c7c3eb475988"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTE0ODgxOnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/test/java/pro/taskana/task/api/models/TaskModelsCloneTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoxOTowN1rOF8JJpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoxOTowN1rOF8JJpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYwODgwNw==", "bodyText": "Please change this back to dummyComment.clone()", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r398608807", "createdAt": "2020-03-26T14:19:07Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/test/java/pro/taskana/task/api/models/TaskModelsCloneTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package pro.taskana.task.api.models;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.jupiter.api.Test;\n+\n+import pro.taskana.task.internal.CreateTaskModelHelper;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+import pro.taskana.task.internal.models.TaskSummaryImpl;\n+\n+class TaskModelsCloneTest {\n+\n+  @Test\n+  void testCloneInTaskSummary() {\n+    TaskSummaryImpl dummyTaskSummary = new TaskSummaryImpl();\n+\n+    Attachment dummyAttachmentForSummaryTestPreClone =\n+        CreateTaskModelHelper.createAttachment(\"uniqueIdForDeepTest\", \"uniqueTaskIdForDeepTest\");\n+    AttachmentSummary dummyAttachmentSummary = dummyAttachmentForSummaryTestPreClone.asSummary();\n+    ArrayList<AttachmentSummary> attachmentSummaries = new ArrayList<>();\n+    attachmentSummaries.add(dummyAttachmentSummary);\n+    dummyTaskSummary.setAttachmentSummaries(attachmentSummaries);\n+\n+    TaskSummary dummyTaskSummaryCloned = dummyTaskSummary.copy();\n+    assertThat(dummyTaskSummaryCloned).isEqualTo(dummyTaskSummary);\n+    assertThat(dummyTaskSummaryCloned).isNotSameAs(dummyTaskSummary);\n+\n+    Attachment dummyAttachmentForSummaryTestPostClone =\n+        CreateTaskModelHelper.createAttachment(\n+            \"differentIdForDeepTest\", \"differentTaskIdForDeepTest\");\n+    AttachmentSummary dummyAttachmentSummary2 = dummyAttachmentForSummaryTestPostClone.asSummary();\n+    attachmentSummaries.add(dummyAttachmentSummary2);\n+    assertThat(dummyTaskSummaryCloned).isNotEqualTo(dummyTaskSummary);\n+  }\n+\n+  @Test\n+  void testCloneInTask() {\n+    Task dummyTask =\n+        CreateTaskModelHelper.createUnitTestTask(\n+            \"dummyTaskId\",\n+            \"dummyTaskName\",\n+            \"workbasketKey\",\n+            CreateTaskModelHelper.createDummyClassification());\n+    Map<String, String> dummyCustomAttributesPreClone = new HashMap<>();\n+    dummyCustomAttributesPreClone.put(\"dummyAttributeKey\", \"dummyAttributeValue\");\n+    dummyTask.setCustomAttributes(dummyCustomAttributesPreClone);\n+    Map<String, String> dummyCallbackInfoPreClone = new HashMap<>();\n+    dummyCallbackInfoPreClone.put(\"dummyCallbackKey\", \"dummyCallbackValue\");\n+    dummyTask.setCallbackInfo(dummyCallbackInfoPreClone);\n+\n+    Task dummyTaskCloned = dummyTask.copy();\n+    assertThat(dummyTaskCloned).isEqualTo(dummyTask);\n+    assertThat(dummyTaskCloned).isNotSameAs(dummyTask);\n+\n+    dummyCustomAttributesPreClone.put(\"deepTestAttributeKey\", \"deepTestAttributeValue\");\n+    dummyCallbackInfoPreClone.put(\"deepTestCallbackKey\", \"deepTestCallbackValue\");\n+    assertThat(dummyTaskCloned).isNotEqualTo(dummyTask);\n+  }\n+\n+  @Test\n+  void testCloneInTaskComment() {\n+    TaskCommentImpl dummyComment = new TaskCommentImpl();\n+    dummyComment.setTextField(\"dummyTextField\");\n+    TaskComment dummyCommentCloned = new TaskCommentImpl(dummyComment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "696ed37e21361318666cfa2a2734c7c3eb475988"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjY5MjU4OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/classification/api/models/Classification.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDowNDoyNlrOGBQk8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDowNDoyNlrOGBQk8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3MzM2Mg==", "bodyText": "Please comment that the id will not be duplicated.\n(and do this for every entity)", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r403973362", "createdAt": "2020-04-06T10:04:26Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/main/java/pro/taskana/classification/api/models/Classification.java", "diffHunk": "@@ -36,6 +36,27 @@\n    */\n   String getDomain();\n \n+  /**\n+   * Get the logical name of the associated application entry point.\n+   *\n+   * @return applicationEntryPoint\n+   */\n+  String getApplicationEntryPoint();\n+\n+  /**\n+   * Set the logical name of the associated application entry point.\n+   *\n+   * @param applicationEntryPoint The application entry point\n+   */\n+  void setApplicationEntryPoint(String applicationEntryPoint);\n+\n+  /**\n+   * Duplicates this Classification.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ad8e97e5e4c09026aae4c86e46132521c94d351"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4309, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}