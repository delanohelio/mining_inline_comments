{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NDkzODE2", "number": 1142, "title": "TSK-1301: Cleaned up ldap properties in order to allow users to defin\u2026", "bodyText": "\u2026e custom LdapTemplate bean\nhttps://sonarcloud.io/dashboard?branch=task%2F1301&id=mustaphazorgati_taskana", "createdAt": "2020-06-23T11:01:39Z", "url": "https://github.com/Taskana/taskana/pull/1142", "merged": true, "mergeCommit": {"oid": "ec4d919dd000535953c110245267c9f9e4ca0a4b"}, "closed": true, "closedAt": "2020-06-26T08:28:13Z", "author": {"login": "mustaphazorgati"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuFwhDgFqTQzNTc4NTE0Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcu-9QKgFqTQzODEwODM5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1Nzg1MTQ3", "url": "https://github.com/Taskana/taskana/pull/1142#pullrequestreview-435785147", "createdAt": "2020-06-23T13:32:30Z", "commit": {"oid": "d2be6e8ec66249d888ed8185fac694a3906c0730"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzozMjozMFrOGnpaJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo0NjozM1rOGnqCLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIyNjA4Nw==", "bodyText": "We should be able to delete this ComponentScan annotation since this class already resides in the pro.taskana.simplehistory.rest package and the integrated @componentscan annotation (without arguments) in @SpringBootApplication should tell Spring to scan the current package and all of its sub-packages", "url": "https://github.com/Taskana/taskana/pull/1142#discussion_r444226087", "createdAt": "2020-06-23T13:32:30Z", "author": {"login": "gitgoodjhe"}, "path": "history/taskana-simplehistory-rest-spring-example/src/main/java/pro/taskana/simplehistory/rest/ExampleRestApplication.java", "diffHunk": "@@ -19,7 +19,7 @@\n \n /** Example Application showing the implementation of taskana-rest-spring. */\n @SpringBootApplication\n-@ComponentScan(basePackages = \"pro.taskana.simplehistory.rest\")\n+@ComponentScan(\"pro.taskana.simplehistory.rest\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2be6e8ec66249d888ed8185fac694a3906c0730"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIyODQ4OQ==", "bodyText": "Should be deletable due to the class residing in the above pro.taskana.rest package", "url": "https://github.com/Taskana/taskana/pull/1142#discussion_r444228489", "createdAt": "2020-06-23T13:35:45Z", "author": {"login": "gitgoodjhe"}, "path": "history/taskana-simplehistory-rest-spring/src/test/java/pro/taskana/rest/ExampleDocumentationApplication.java", "diffHunk": "@@ -21,7 +21,7 @@\n \n /** Example Application to create the documentation. */\n @SpringBootApplication\n-@ComponentScan(basePackages = \"pro.taskana.rest.simplehistory\")\n+@ComponentScan(\"pro.taskana.rest.simplehistory\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2be6e8ec66249d888ed8185fac694a3906c0730"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIyOTgwNA==", "bodyText": "Only the @componentscan annotation without arguments should be fine since this class already resides in the pro.taskana package", "url": "https://github.com/Taskana/taskana/pull/1142#discussion_r444229804", "createdAt": "2020-06-23T13:37:31Z", "author": {"login": "gitgoodjhe"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/RestConfiguration.java", "diffHunk": "@@ -15,19 +16,21 @@\n \n import pro.taskana.classification.api.ClassificationService;\n import pro.taskana.common.api.TaskanaEngine;\n-import pro.taskana.common.rest.ldap.LdapClient;\n import pro.taskana.monitor.api.MonitorService;\n import pro.taskana.task.api.TaskService;\n import pro.taskana.workbasket.api.WorkbasketService;\n \n /** Configuration for REST service. */\n @Configuration\n-@ComponentScan\n+@ComponentScan(\"pro.taskana\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2be6e8ec66249d888ed8185fac694a3906c0730"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzNjMzNA==", "bodyText": "All Beans should be created as singletons as a default, not sure if this annotation is really necessary", "url": "https://github.com/Taskana/taskana/pull/1142#discussion_r444236334", "createdAt": "2020-06-23T13:46:33Z", "author": {"login": "gitgoodjhe"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/RestConfiguration.java", "diffHunk": "@@ -57,14 +60,16 @@ public TaskanaEngine getTaskanaEngine(TaskanaEngineConfiguration taskanaEngineCo\n \n   @Bean\n   @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2be6e8ec66249d888ed8185fac694a3906c0730"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NjEzNjcy", "url": "https://github.com/Taskana/taskana/pull/1142#pullrequestreview-436613672", "createdAt": "2020-06-24T12:50:37Z", "commit": {"oid": "d2be6e8ec66249d888ed8185fac694a3906c0730"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjo1MDozN1rOGoQqVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjo1MDozN1rOGoQqVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2OTIwNg==", "bodyText": "This should be a test dependency, shouldn't it? (even though it didn't has the scope before)", "url": "https://github.com/Taskana/taskana/pull/1142#discussion_r444869206", "createdAt": "2020-06-24T12:50:37Z", "author": {"login": "holgerhagen"}, "path": "rest/taskana-rest-spring/pom.xml", "diffHunk": "@@ -69,6 +69,14 @@\n             <groupId>org.springframework</groupId>\r\n             <artifactId>spring-webmvc</artifactId>\r\n         </dependency>\r\n+        <dependency>\r\n+            <groupId>org.springframework.boot</groupId>\r\n+            <artifactId>spring-boot-autoconfigure</artifactId>\r\n+        </dependency>\r\n+        <dependency>\r\n+            <groupId>com.unboundid</groupId>\r\n+            <artifactId>unboundid-ldapsdk</artifactId>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2be6e8ec66249d888ed8185fac694a3906c0730"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab949aa2b067ee9ed20b22f05459099add7a282d", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/ab949aa2b067ee9ed20b22f05459099add7a282d", "committedDate": "2020-06-25T01:16:32Z", "message": "TSK-1301: Cleaned up ldap properties in order to allow users to define custom LdapTemplate bean"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NDQ5NzY2", "url": "https://github.com/Taskana/taskana/pull/1142#pullrequestreview-437449766", "createdAt": "2020-06-25T12:38:28Z", "commit": {"oid": "ab949aa2b067ee9ed20b22f05459099add7a282d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NDU3MDkx", "url": "https://github.com/Taskana/taskana/pull/1142#pullrequestreview-437457091", "createdAt": "2020-06-25T12:47:44Z", "commit": {"oid": "ab949aa2b067ee9ed20b22f05459099add7a282d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjo0Nzo0NVrOGo5Bfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjo0ODo0NlrOGo5DwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUzMDQ5NA==", "bodyText": "Just fyi: As of Spring 4.3, you no longer need to specify an explicit injection annotation in a single-constructor scenario. (meaning the @Autowired could be deleted here)", "url": "https://github.com/Taskana/taskana/pull/1142#discussion_r445530494", "createdAt": "2020-06-25T12:47:45Z", "author": {"login": "gitgoodjhe"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/ldap/LdapClient.java", "diffHunk": "@@ -34,26 +33,22 @@\n @Component\n public class LdapClient {\n \n-  static final String MISSING_CONFIGURATION_S =\n-      \"LdapClient was called but is not active due to missing configuration: %s \";\n-\n   private static final Logger LOGGER = LoggerFactory.getLogger(LdapClient.class);\n-\n   private static final String CN = \"cn\";\n \n+  private final Environment env;\n+  private final LdapTemplate ldapTemplate;\n   private boolean active = false;\n-\n-  @Autowired private Environment env;\n-\n-  @Autowired(required = false)\n-  private LdapTemplate ldapTemplate;\n-\n   private int minSearchForLength;\n-\n   private int maxNumberOfReturnedAccessIds;\n-\n   private String message;\n \n+  @Autowired", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab949aa2b067ee9ed20b22f05459099add7a282d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUzMDY0OA==", "bodyText": "Just fyi: As of Spring 4.3, you no longer need to specify an explicit injection annotation in a single-constructor scenario. (meaning the @Autowired could be deleted here)", "url": "https://github.com/Taskana/taskana/pull/1142#discussion_r445530648", "createdAt": "2020-06-25T12:47:59Z", "author": {"login": "gitgoodjhe"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/TestConfiguration.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package pro.taskana;\n+\n+import javax.sql.DataSource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.DependsOn;\n+import org.springframework.jdbc.datasource.DataSourceTransactionManager;\n+import org.springframework.transaction.PlatformTransactionManager;\n+\n+import pro.taskana.sampledata.SampleDataGenerator;\n+\n+@SpringBootApplication\n+@DependsOn(\"getTaskanaEngine\") // wait for schema to be created BEFORE inserting test data\n+public class TestConfiguration {\n+\n+  @Autowired", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab949aa2b067ee9ed20b22f05459099add7a282d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUzMDgzOQ==", "bodyText": "Just fyi: As of Spring 4.3, you no longer need to specify an explicit injection annotation in a single-constructor scenario. (meaning the @Autowired could be deleted here)", "url": "https://github.com/Taskana/taskana/pull/1142#discussion_r445530839", "createdAt": "2020-06-25T12:48:19Z", "author": {"login": "gitgoodjhe"}, "path": "rest/taskana-rest-spring-example-boot/src/main/java/pro/taskana/rest/ExampleRestApplication.java", "diffHunk": "@@ -1,49 +1,30 @@\n package pro.taskana.rest;\n \n-import javax.annotation.PostConstruct;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.context.annotation.ComponentScan;\n-import org.springframework.context.annotation.Import;\n import org.springframework.scheduling.annotation.EnableScheduling;\n \n-import pro.taskana.RestConfiguration;\n-import pro.taskana.jobs.TransactionalJobsConfiguration;\n import pro.taskana.sampledata.SampleDataGenerator;\n \n-/** Example Application showing the implementation of taskana-rest-spring. */\n-@SpringBootApplication\n+/** Example Application showing a minimal implementation of the taskana REST service. */\n @EnableScheduling\n-@ComponentScan(basePackages = \"pro.taskana\")\n-@SuppressWarnings(\"checkstyle:Indentation\")\n-@Import({\n-  ExampleRestConfiguration.class,\n-  TransactionalJobsConfiguration.class,\n-  RestConfiguration.class,\n-  WebMvcConfig.class\n-})\n+@EnableAutoConfiguration\n+@ComponentScan(\"pro.taskana\")\n public class ExampleRestApplication {\n \n-  private final SampleDataGenerator sampleDataGenerator;\n-\n-  @Value(\"${generateSampleData:true}\")\n-  public boolean generateSampleData;\n-\n   @Autowired", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab949aa2b067ee9ed20b22f05459099add7a282d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUzMTA3Mg==", "bodyText": "Just fyi: As of Spring 4.3, you no longer need to specify an explicit injection annotation in a single-constructor scenario. (meaning the @Autowired could be deleted here)", "url": "https://github.com/Taskana/taskana/pull/1142#discussion_r445531072", "createdAt": "2020-06-25T12:48:46Z", "author": {"login": "gitgoodjhe"}, "path": "rest/taskana-rest-spring-example-common/src/test/java/pro/taskana/CommonTestConfiguration.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package pro.taskana;\n+\n+import javax.sql.DataSource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.DependsOn;\n+import org.springframework.jdbc.datasource.DataSourceTransactionManager;\n+import org.springframework.transaction.PlatformTransactionManager;\n+\n+import pro.taskana.sampledata.SampleDataGenerator;\n+\n+@SpringBootApplication\n+@DependsOn(\"getTaskanaEngine\") // wait for schema to be created BEFORE inserting test data\n+public class CommonTestConfiguration {\n+\n+  @Autowired", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab949aa2b067ee9ed20b22f05459099add7a282d"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MTA4Mzk0", "url": "https://github.com/Taskana/taskana/pull/1142#pullrequestreview-438108394", "createdAt": "2020-06-26T08:27:37Z", "commit": {"oid": "ab949aa2b067ee9ed20b22f05459099add7a282d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4503, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}