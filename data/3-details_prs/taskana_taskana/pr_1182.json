{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxMDc4ODIz", "number": 1182, "title": "TSK-1291: Removed action property in store to make the code cleaner", "bodyText": "https://sonarcloud.io/dashboard?branch=TSK-1291&id=sofie29_taskana", "createdAt": "2020-07-17T12:06:00Z", "url": "https://github.com/Taskana/taskana/pull/1182", "merged": true, "mergeCommit": {"oid": "83a79eab182337fb70b9e502b8354dda6eca04d5"}, "closed": true, "closedAt": "2020-07-21T11:45:23Z", "author": {"login": "sofie29"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1ypowAH2gAyNDUxMDc4ODIzOmNhMGQ4ZjZlMzg5OWYwMzFhYzhmNDdkOTQ5MTU1OTEyMjk5YjZmZDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc2zVRRgFqTQ1MTcxNTU4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ca0d8f6e3899f031ac8f47d949155912299b6fd8", "author": {"user": {"login": "sofie29", "name": "Sofie Hofmann"}}, "url": "https://github.com/Taskana/taskana/commit/ca0d8f6e3899f031ac8f47d949155912299b6fd8", "committedDate": "2020-07-17T12:04:48Z", "message": "TSK-1291: Removing action property in store to make the code cleaner"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNjk3Njg4", "url": "https://github.com/Taskana/taskana/pull/1182#pullrequestreview-451697688", "createdAt": "2020-07-20T15:07:45Z", "commit": {"oid": "ca0d8f6e3899f031ac8f47d949155912299b6fd8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzE0NDI4", "url": "https://github.com/Taskana/taskana/pull/1182#pullrequestreview-451714428", "createdAt": "2020-07-20T15:25:06Z", "commit": {"oid": "ca0d8f6e3899f031ac8f47d949155912299b6fd8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzE1NTgx", "url": "https://github.com/Taskana/taskana/pull/1182#pullrequestreview-451715581", "createdAt": "2020-07-20T15:26:18Z", "commit": {"oid": "ca0d8f6e3899f031ac8f47d949155912299b6fd8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToyNjoxOFrOG0TIpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToyNjoxOFrOG0TIpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ5MjY0Ng==", "bodyText": "why key = null, but classificationId = undefined?\ni think classificationId should be null too, as we deliberatly set it to nothing", "url": "https://github.com/Taskana/taskana/pull/1182#discussion_r457492646", "createdAt": "2020-07-20T15:26:18Z", "author": {"login": "Tristan2357"}, "path": "web/src/app/shared/store/classification-store/classification.state.ts", "diffHunk": "@@ -118,33 +113,59 @@ export class ClassificationState implements NgxsAfterBootstrap {\n \n   @Action(RestoreSelectedClassification)\n   restoreSelectedClassification(ctx: StateContext<ClassificationStateModel>, action: RestoreSelectedClassification): Observable<any> {\n-    return this.classificationsService.getClassification(action.classificationId).pipe(\n-      take(1),\n-      tap(selectedClassification => ctx.patchState({ selectedClassification }))\n-    );\n+    const state = ctx.getState();\n+\n+    // check whether the classification already exists\n+    // returns true in case the classification was edited or copied\n+    if (state.classifications.some(classification => classification.classificationId === action.classificationId)) {\n+      return this.classificationsService.getClassification(action.classificationId).pipe(\n+        take(1),\n+        tap(selectedClassification => {\n+          ctx.patchState({ selectedClassification });\n+        })\n+      );\n+    }\n+\n+    // the classification is restored to a new classification\n+    const category = state.classificationTypes[state.selectedClassificationType][0];\n+    const { type, created, modified, domain, parentId, parentKey } = state.selectedClassification;\n+    ctx.patchState({ selectedClassification: { type, created, category, modified, domain, parentId, parentKey } });\n+\n+    return of(null);\n   }\n \n-  @Action(SetActiveAction)\n-  setActiveAction(ctx: StateContext<ClassificationStateModel>, action: SetActiveAction): Observable<null> {\n-    if (action.action === ACTION.CREATE) {\n-      // Initialization of a new classification\n-      const state: ClassificationStateModel = ctx.getState();\n-      const date = TaskanaDate.getDate();\n-      const initialClassification: Classification = {\n-        type: state.selectedClassificationType,\n-        category: state.classificationTypes[state.selectedClassificationType][0],\n-        created: date,\n-        modified: date,\n-        domain: this.domainService.getSelectedDomainValue(),\n-      };\n-      if (state.selectedClassification) {\n-        initialClassification.parentId = state.selectedClassification.classificationId;\n-        initialClassification.parentKey = state.selectedClassification.key;\n-      }\n-      ctx.patchState({ selectedClassification: initialClassification, action: action.action });\n-    } else {\n-      ctx.patchState({ action: action.action });\n+  @Action(CreateClassification)\n+  newCreateClassification(ctx: StateContext<ClassificationStateModel>): Observable<null> {\n+    // Initialization of a new classification\n+    const state: ClassificationStateModel = ctx.getState();\n+    const date = TaskanaDate.getDate();\n+    const initialClassification: Classification = {\n+      type: state.selectedClassificationType,\n+      category: state.classificationTypes[state.selectedClassificationType][0],\n+      created: date,\n+      modified: date,\n+      domain: this.domainService.getSelectedDomainValue(),\n+    };\n+    if (state.selectedClassification) {\n+      initialClassification.parentId = state.selectedClassification.classificationId;\n+      initialClassification.parentKey = state.selectedClassification.key;\n     }\n+    ctx.patchState({\n+      selectedClassification: initialClassification,\n+      badgeMessage: 'Creating new classification'\n+    });\n+    return of(null);\n+  }\n+\n+  @Action(CopyClassification)\n+  newCopyClassification(ctx: StateContext<ClassificationStateModel>): Observable<null> {\n+    const copy = { ...ctx.getState().selectedClassification };\n+    copy.key = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca0d8f6e3899f031ac8f47d949155912299b6fd8"}, "originalPosition": 153}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4452, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}