{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0OTU2NTMy", "number": 852, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDo1Mzo1MVrODZUgLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDo1ODowM1rODZUi0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODc2OTEwOnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/security/CurrentUserContext.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDo1Mzo1MVrOFfpCMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjowMToxMlrOFf_cSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcyMjQ4MQ==", "bodyText": "This only works if you do have a user called \"admin\" configured as admin in taskana.properties, doesn't it? I guess we have to think about this a bit more.", "url": "https://github.com/Taskana/taskana/pull/852#discussion_r368722481", "createdAt": "2020-01-20T20:53:51Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/security/CurrentUserContext.java", "diffHunk": "@@ -77,6 +79,31 @@ public static String getUserid() {\n     return accessIds;\n   }\n \n+  /**\n+   * This method is supposed to skip further permission checks if we are already in a secured\n+   * environment. With great power comes great responsibility.\n+   *\n+   * @param supplier will be executed with admin privileges\n+   * @param <T> defined with the supplier return value\n+   * @return output from supplier\n+   */\n+  public static <T> T runAsAdmin(Supplier<T> supplier) {\n+\n+    Subject subject = Subject.getSubject(AccessController.getContext());\n+    if (subject == null) {\n+      // dont add authorisation if none is available.\n+      return supplier.get();\n+    }\n+    Set<Principal> principals = subject.getPrincipals();\n+    Set<Object> privateCredentials = subject.getPrivateCredentials();\n+    Set<Object> publicCredentials = subject.getPublicCredentials();\n+\n+    principals.add(new GroupPrincipal(\"admin\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "801873b004bae2a0060738447c76bbadf257cfc9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcyMjk0OQ==", "bodyText": "Don't we change the current Subject as well, if we do it this way? From my perspective it might be better to create a dedicated Subject from scratch instead of patching the current subject.", "url": "https://github.com/Taskana/taskana/pull/852#discussion_r368722949", "createdAt": "2020-01-20T20:55:53Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/security/CurrentUserContext.java", "diffHunk": "@@ -77,6 +79,31 @@ public static String getUserid() {\n     return accessIds;\n   }\n \n+  /**\n+   * This method is supposed to skip further permission checks if we are already in a secured\n+   * environment. With great power comes great responsibility.\n+   *\n+   * @param supplier will be executed with admin privileges\n+   * @param <T> defined with the supplier return value\n+   * @return output from supplier\n+   */\n+  public static <T> T runAsAdmin(Supplier<T> supplier) {\n+\n+    Subject subject = Subject.getSubject(AccessController.getContext());\n+    if (subject == null) {\n+      // dont add authorisation if none is available.\n+      return supplier.get();\n+    }\n+    Set<Principal> principals = subject.getPrincipals();\n+    Set<Object> privateCredentials = subject.getPrivateCredentials();\n+    Set<Object> publicCredentials = subject.getPublicCredentials();\n+\n+    principals.add(new GroupPrincipal(\"admin\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcyMjQ4MQ=="}, "originalCommit": {"oid": "801873b004bae2a0060738447c76bbadf257cfc9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg5Mzg3Mg==", "bodyText": "we could reuse method JobScheduler.getAdminSubject() that creates an admin subject.\nMay be, the method should be factored out, e.g. moved to InternalTaskanaEngine ...", "url": "https://github.com/Taskana/taskana/pull/852#discussion_r368893872", "createdAt": "2020-01-21T09:35:23Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/security/CurrentUserContext.java", "diffHunk": "@@ -77,6 +79,31 @@ public static String getUserid() {\n     return accessIds;\n   }\n \n+  /**\n+   * This method is supposed to skip further permission checks if we are already in a secured\n+   * environment. With great power comes great responsibility.\n+   *\n+   * @param supplier will be executed with admin privileges\n+   * @param <T> defined with the supplier return value\n+   * @return output from supplier\n+   */\n+  public static <T> T runAsAdmin(Supplier<T> supplier) {\n+\n+    Subject subject = Subject.getSubject(AccessController.getContext());\n+    if (subject == null) {\n+      // dont add authorisation if none is available.\n+      return supplier.get();\n+    }\n+    Set<Principal> principals = subject.getPrincipals();\n+    Set<Object> privateCredentials = subject.getPrivateCredentials();\n+    Set<Object> publicCredentials = subject.getPublicCredentials();\n+\n+    principals.add(new GroupPrincipal(\"admin\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcyMjQ4MQ=="}, "originalCommit": {"oid": "801873b004bae2a0060738447c76bbadf257cfc9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA4OTYwOQ==", "bodyText": "I fixed that issue and added a test to verify that this works as intended", "url": "https://github.com/Taskana/taskana/pull/852#discussion_r369089609", "createdAt": "2020-01-21T16:01:12Z", "author": {"login": "benjamineckstein"}, "path": "lib/taskana-core/src/main/java/pro/taskana/security/CurrentUserContext.java", "diffHunk": "@@ -77,6 +79,31 @@ public static String getUserid() {\n     return accessIds;\n   }\n \n+  /**\n+   * This method is supposed to skip further permission checks if we are already in a secured\n+   * environment. With great power comes great responsibility.\n+   *\n+   * @param supplier will be executed with admin privileges\n+   * @param <T> defined with the supplier return value\n+   * @return output from supplier\n+   */\n+  public static <T> T runAsAdmin(Supplier<T> supplier) {\n+\n+    Subject subject = Subject.getSubject(AccessController.getContext());\n+    if (subject == null) {\n+      // dont add authorisation if none is available.\n+      return supplier.get();\n+    }\n+    Set<Principal> principals = subject.getPrincipals();\n+    Set<Object> privateCredentials = subject.getPrivateCredentials();\n+    Set<Object> publicCredentials = subject.getPublicCredentials();\n+\n+    principals.add(new GroupPrincipal(\"admin\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcyMjQ4MQ=="}, "originalCommit": {"oid": "801873b004bae2a0060738447c76bbadf257cfc9"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODc3NTg2OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDo1ODowM1rOFfpGQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjowMDoxMlrOFf_aBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcyMzUyMg==", "bodyText": "testDeleteWorkbasketAsBusinessAdminWithoutExplicitReadPermission?", "url": "https://github.com/Taskana/taskana/pull/852#discussion_r368723522", "createdAt": "2020-01-20T20:58:03Z", "author": {"login": "holgerhagen"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java", "diffHunk": "@@ -107,6 +108,25 @@ void testGetSecondPageSortedByKey() {\n     assertNotNull(response.getBody().getLink(Link.REL_PREVIOUS));\n   }\n \n+  /**\n+   * Bug Ticket TSK-1029.\n+   * Businessadmin is allowed to delete any workbasket ticket without user related access\n+   * restrictions.\n+   */\n+  @Test\n+  void testDeleteWorkbasketPermissionWithBusinessAdmin() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "801873b004bae2a0060738447c76bbadf257cfc9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA4OTAzMQ==", "bodyText": "Done", "url": "https://github.com/Taskana/taskana/pull/852#discussion_r369089031", "createdAt": "2020-01-21T16:00:12Z", "author": {"login": "benjamineckstein"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java", "diffHunk": "@@ -107,6 +108,25 @@ void testGetSecondPageSortedByKey() {\n     assertNotNull(response.getBody().getLink(Link.REL_PREVIOUS));\n   }\n \n+  /**\n+   * Bug Ticket TSK-1029.\n+   * Businessadmin is allowed to delete any workbasket ticket without user related access\n+   * restrictions.\n+   */\n+  @Test\n+  void testDeleteWorkbasketPermissionWithBusinessAdmin() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcyMzUyMg=="}, "originalCommit": {"oid": "801873b004bae2a0060738447c76bbadf257cfc9"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4449, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}