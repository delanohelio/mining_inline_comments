{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MDUyNDUx", "number": 1245, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjo0NjoyMFrOEe4yBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjo0NjoyMFrOEe4yBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODIzMDQ3OnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/components/classification-list/classification-list.component.spec.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjo0NjoyMFrOHK0nsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzoxMTozNFrOHK1lTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEwOTkzOQ==", "bodyText": "element is saved in a const here?", "url": "https://github.com/Taskana/taskana/pull/1245#discussion_r481109939", "createdAt": "2020-09-01T12:46:20Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/classification-list/classification-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,198 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { ClassificationState } from '../../../shared/store/classification-store/classification.state';\n+import { ClassificationsService } from '../../../shared/services/classifications/classifications.service';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { ClassificationListComponent } from './classification-list.component';\n+import { classificationStateMock, engineConfigurationMock } from '../../../shared/store/mock-data/mock-store';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { Observable, of } from 'rxjs';\n+import { CreateClassification } from '../../../shared/store/classification-store/classification.actions';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+\n+@Component({ selector: 'taskana-administration-import-export', template: '' })\n+class ImportExportStub {\n+  @Input() currentSelection: TaskanaType;\n+}\n+\n+@Component({ selector: 'taskana-administration-classification-types-selector', template: '' })\n+class ClassificationTypesSelectorStub {}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning;\n+}\n+\n+@Component({ selector: 'taskana-administration-tree', template: '' })\n+class TreeStub {\n+  @Input() filterText;\n+  @Input() filterIcon;\n+  @Output() switchTaskanaSpinnerEmit = new EventEmitter();\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {\n+  @Input() src;\n+}\n+\n+@Component({ selector: 'input', template: '' })\n+class InputStub {\n+  @Input() ngModel;\n+}\n+\n+const classificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<ClassificationsService> => ({\n+    getClassification: jest.fn().mockReturnValue(of()),\n+    getClassifications: jest.fn().mockReturnValue(of())\n+  })\n+);\n+const classificationCategoriesServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<ClassificationCategoriesService> => ({\n+    getCustomisation: jest.fn().mockReturnValue(of())\n+  })\n+);\n+const domainServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<DomainService> => ({\n+    getSelectedDomainValue: jest.fn().mockReturnValue(of()),\n+    getSelectedDomain: jest.fn().mockReturnValue(of())\n+  })\n+);\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+describe('ClassificationListComponent', () => {\n+  let fixture: ComponentFixture<ClassificationListComponent>;\n+  let debugElement: DebugElement;\n+  let component: ClassificationListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([ClassificationState, EngineConfigurationState])],\n+      declarations: [\n+        ClassificationListComponent,\n+        ClassificationTypesSelectorStub,\n+        SpinnerStub,\n+        TreeStub,\n+        SvgIconStub,\n+        ImportExportStub,\n+        InputStub\n+      ],\n+      providers: [\n+        { provide: ClassificationsService, useClass: classificationServiceSpy },\n+        { provide: ClassificationCategoriesService, useClass: classificationCategoriesServiceSpy },\n+        { provide: DomainService, useClass: domainServiceSpy },\n+        { provide: ImportExportService, useClass: importExportServiceSpy }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(ClassificationListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    store.reset({\n+      ...store.snapshot(),\n+      classification: classificationStateMock,\n+      engineConfiguration: engineConfigurationMock\n+    });\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  /* HTML: ACTION TOOLBAR */\n+  it('should call CreateClassification when add-classification button is clicked', async () => {\n+    const button = debugElement.nativeElement.querySelector('.add-classification-button');\n+    expect(button).toBeTruthy();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateClassification)).subscribe(() => (actionDispatched = true));\n+    button.click();\n+    expect(actionDispatched).toBe(true);\n+  });\n+\n+  it('should display import-export component', () => {\n+    expect(debugElement.nativeElement.querySelector('taskana-administration-import-export')).toBeTruthy();\n+  });\n+\n+  it('should display classification-types-selector component', () => {\n+    const typesSelectorComponent = debugElement.nativeElement.querySelector(\n+      'taskana-administration-classification-types-selector'\n+    );\n+    expect(typesSelectorComponent).toBeTruthy();\n+  });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a853df2159cdd18785640cf65533622f8eb8894"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMjQ2MQ==", "bodyText": "This selector is so long that it wouldn't fit into one line. The other selector is shorter.", "url": "https://github.com/Taskana/taskana/pull/1245#discussion_r481112461", "createdAt": "2020-09-01T12:50:25Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/classification-list/classification-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,198 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { ClassificationState } from '../../../shared/store/classification-store/classification.state';\n+import { ClassificationsService } from '../../../shared/services/classifications/classifications.service';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { ClassificationListComponent } from './classification-list.component';\n+import { classificationStateMock, engineConfigurationMock } from '../../../shared/store/mock-data/mock-store';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { Observable, of } from 'rxjs';\n+import { CreateClassification } from '../../../shared/store/classification-store/classification.actions';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+\n+@Component({ selector: 'taskana-administration-import-export', template: '' })\n+class ImportExportStub {\n+  @Input() currentSelection: TaskanaType;\n+}\n+\n+@Component({ selector: 'taskana-administration-classification-types-selector', template: '' })\n+class ClassificationTypesSelectorStub {}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning;\n+}\n+\n+@Component({ selector: 'taskana-administration-tree', template: '' })\n+class TreeStub {\n+  @Input() filterText;\n+  @Input() filterIcon;\n+  @Output() switchTaskanaSpinnerEmit = new EventEmitter();\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {\n+  @Input() src;\n+}\n+\n+@Component({ selector: 'input', template: '' })\n+class InputStub {\n+  @Input() ngModel;\n+}\n+\n+const classificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<ClassificationsService> => ({\n+    getClassification: jest.fn().mockReturnValue(of()),\n+    getClassifications: jest.fn().mockReturnValue(of())\n+  })\n+);\n+const classificationCategoriesServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<ClassificationCategoriesService> => ({\n+    getCustomisation: jest.fn().mockReturnValue(of())\n+  })\n+);\n+const domainServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<DomainService> => ({\n+    getSelectedDomainValue: jest.fn().mockReturnValue(of()),\n+    getSelectedDomain: jest.fn().mockReturnValue(of())\n+  })\n+);\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+describe('ClassificationListComponent', () => {\n+  let fixture: ComponentFixture<ClassificationListComponent>;\n+  let debugElement: DebugElement;\n+  let component: ClassificationListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([ClassificationState, EngineConfigurationState])],\n+      declarations: [\n+        ClassificationListComponent,\n+        ClassificationTypesSelectorStub,\n+        SpinnerStub,\n+        TreeStub,\n+        SvgIconStub,\n+        ImportExportStub,\n+        InputStub\n+      ],\n+      providers: [\n+        { provide: ClassificationsService, useClass: classificationServiceSpy },\n+        { provide: ClassificationCategoriesService, useClass: classificationCategoriesServiceSpy },\n+        { provide: DomainService, useClass: domainServiceSpy },\n+        { provide: ImportExportService, useClass: importExportServiceSpy }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(ClassificationListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    store.reset({\n+      ...store.snapshot(),\n+      classification: classificationStateMock,\n+      engineConfiguration: engineConfigurationMock\n+    });\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  /* HTML: ACTION TOOLBAR */\n+  it('should call CreateClassification when add-classification button is clicked', async () => {\n+    const button = debugElement.nativeElement.querySelector('.add-classification-button');\n+    expect(button).toBeTruthy();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateClassification)).subscribe(() => (actionDispatched = true));\n+    button.click();\n+    expect(actionDispatched).toBe(true);\n+  });\n+\n+  it('should display import-export component', () => {\n+    expect(debugElement.nativeElement.querySelector('taskana-administration-import-export')).toBeTruthy();\n+  });\n+\n+  it('should display classification-types-selector component', () => {\n+    const typesSelectorComponent = debugElement.nativeElement.querySelector(\n+      'taskana-administration-classification-types-selector'\n+    );\n+    expect(typesSelectorComponent).toBeTruthy();\n+  });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEwOTkzOQ=="}, "originalCommit": {"oid": "8a853df2159cdd18785640cf65533622f8eb8894"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyNTcxMQ==", "bodyText": "ok", "url": "https://github.com/Taskana/taskana/pull/1245#discussion_r481125711", "createdAt": "2020-09-01T13:11:34Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/classification-list/classification-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,198 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { ClassificationState } from '../../../shared/store/classification-store/classification.state';\n+import { ClassificationsService } from '../../../shared/services/classifications/classifications.service';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { ClassificationListComponent } from './classification-list.component';\n+import { classificationStateMock, engineConfigurationMock } from '../../../shared/store/mock-data/mock-store';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { Observable, of } from 'rxjs';\n+import { CreateClassification } from '../../../shared/store/classification-store/classification.actions';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+\n+@Component({ selector: 'taskana-administration-import-export', template: '' })\n+class ImportExportStub {\n+  @Input() currentSelection: TaskanaType;\n+}\n+\n+@Component({ selector: 'taskana-administration-classification-types-selector', template: '' })\n+class ClassificationTypesSelectorStub {}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning;\n+}\n+\n+@Component({ selector: 'taskana-administration-tree', template: '' })\n+class TreeStub {\n+  @Input() filterText;\n+  @Input() filterIcon;\n+  @Output() switchTaskanaSpinnerEmit = new EventEmitter();\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {\n+  @Input() src;\n+}\n+\n+@Component({ selector: 'input', template: '' })\n+class InputStub {\n+  @Input() ngModel;\n+}\n+\n+const classificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<ClassificationsService> => ({\n+    getClassification: jest.fn().mockReturnValue(of()),\n+    getClassifications: jest.fn().mockReturnValue(of())\n+  })\n+);\n+const classificationCategoriesServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<ClassificationCategoriesService> => ({\n+    getCustomisation: jest.fn().mockReturnValue(of())\n+  })\n+);\n+const domainServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<DomainService> => ({\n+    getSelectedDomainValue: jest.fn().mockReturnValue(of()),\n+    getSelectedDomain: jest.fn().mockReturnValue(of())\n+  })\n+);\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+describe('ClassificationListComponent', () => {\n+  let fixture: ComponentFixture<ClassificationListComponent>;\n+  let debugElement: DebugElement;\n+  let component: ClassificationListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([ClassificationState, EngineConfigurationState])],\n+      declarations: [\n+        ClassificationListComponent,\n+        ClassificationTypesSelectorStub,\n+        SpinnerStub,\n+        TreeStub,\n+        SvgIconStub,\n+        ImportExportStub,\n+        InputStub\n+      ],\n+      providers: [\n+        { provide: ClassificationsService, useClass: classificationServiceSpy },\n+        { provide: ClassificationCategoriesService, useClass: classificationCategoriesServiceSpy },\n+        { provide: DomainService, useClass: domainServiceSpy },\n+        { provide: ImportExportService, useClass: importExportServiceSpy }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(ClassificationListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    store.reset({\n+      ...store.snapshot(),\n+      classification: classificationStateMock,\n+      engineConfiguration: engineConfigurationMock\n+    });\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  /* HTML: ACTION TOOLBAR */\n+  it('should call CreateClassification when add-classification button is clicked', async () => {\n+    const button = debugElement.nativeElement.querySelector('.add-classification-button');\n+    expect(button).toBeTruthy();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateClassification)).subscribe(() => (actionDispatched = true));\n+    button.click();\n+    expect(actionDispatched).toBe(true);\n+  });\n+\n+  it('should display import-export component', () => {\n+    expect(debugElement.nativeElement.querySelector('taskana-administration-import-export')).toBeTruthy();\n+  });\n+\n+  it('should display classification-types-selector component', () => {\n+    const typesSelectorComponent = debugElement.nativeElement.querySelector(\n+      'taskana-administration-classification-types-selector'\n+    );\n+    expect(typesSelectorComponent).toBeTruthy();\n+  });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEwOTkzOQ=="}, "originalCommit": {"oid": "8a853df2159cdd18785640cf65533622f8eb8894"}, "originalPosition": 133}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4166, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}