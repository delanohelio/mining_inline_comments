{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwODgzODMw", "number": 898, "title": "TSK-991: Add more architecture tests", "bodyText": "More Architecture Tests\nSome need to be enabled and resulting errors need to be fixed", "createdAt": "2020-02-04T14:58:55Z", "url": "https://github.com/Taskana/taskana/pull/898", "merged": true, "mergeCommit": {"oid": "1f0fca82e7b6dd665d64d35475d4753d47243aea"}, "closed": true, "closedAt": "2020-02-05T10:50:42Z", "author": {"login": "benjamineckstein"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBDCnrgFqTM1MzA1MzExOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBT0ePgFqTM1MzYyMDU4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMDUzMTE5", "url": "https://github.com/Taskana/taskana/pull/898#pullrequestreview-353053119", "createdAt": "2020-02-04T15:11:51Z", "commit": {"oid": "52d7d47b75bb8412e0d277ab75c9460390580b3e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNToxMTo1MVrOFlXp9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNToxMTo1MVrOFlXp9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyOTIwNQ==", "bodyText": "Why \"pro.taskana.common.internal.(*)..\" twice?", "url": "https://github.com/Taskana/taskana/pull/898#discussion_r374729205", "createdAt": "2020-02-04T15:11:51Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java", "diffHunk": "@@ -84,20 +83,92 @@ void noClassShouldAccessStandardStreams() {\n     NO_CLASSES_SHOULD_ACCESS_STANDARD_STREAMS.check(importedClasses);\n   }\n \n-  @Test\n+  /**\n+   * Solution would be nice, but is not achievable without big changes\n+   * https://www.archunit.org/userguide/html/000_Index.html#_cycle_checks\n+   */\n   @Disabled\n+  @Test\n   void freeOfCycles() {\n-    ArchRule myRule = slices().matching(\"pro.taskana.(*)..\")\n-                          .should().beFreeOfCycles();\n+    ArchRule myRule = slices().matching(\"pro.taskana.(*)..\").should().beFreeOfCycles();\n     myRule.check(importedClasses);\n   }\n \n+  /**\n+   * Test for cycles with subpackages\n+   * https://www.archunit.org/userguide/html/000_Index.html#_cycle_checks\n+   */\n+  @TestFactory\n+  Collection<DynamicTest> freeOfCycles_subpackages() {\n+\n+    Stream<String> packagesToTest =\n+        Stream.of(\n+            \"pro.taskana.common.internal.(*)..\",\n+            \"pro.taskana.common.api.(*)..\",\n+            \"pro.taskana.common.internal.(*)..\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52d7d47b75bb8412e0d277ab75c9460390580b3e"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNTEwOTUy", "url": "https://github.com/Taskana/taskana/pull/898#pullrequestreview-353510952", "createdAt": "2020-02-05T07:32:59Z", "commit": {"oid": "52d7d47b75bb8412e0d277ab75c9460390580b3e"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNzozMjo1OVrOFluCaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNzo1MDozMFrOFluYcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA5NTkxMg==", "bodyText": "Das Problem scheint zu sein, dass der DaysToWorkingDaysConverter, der aktuell im report package liegt, von TaskServiceImpl benutzt wird. Vielleicht sollten wir diesen in das common package refactoren.\nDann k\u00f6nnten wir diesen Test enablen...", "url": "https://github.com/Taskana/taskana/pull/898#discussion_r375095912", "createdAt": "2020-02-05T07:32:59Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java", "diffHunk": "@@ -84,20 +83,92 @@ void noClassShouldAccessStandardStreams() {\n     NO_CLASSES_SHOULD_ACCESS_STANDARD_STREAMS.check(importedClasses);\n   }\n \n-  @Test\n+  /**\n+   * Solution would be nice, but is not achievable without big changes\n+   * https://www.archunit.org/userguide/html/000_Index.html#_cycle_checks\n+   */\n   @Disabled\n+  @Test\n   void freeOfCycles() {\n-    ArchRule myRule = slices().matching(\"pro.taskana.(*)..\")\n-                          .should().beFreeOfCycles();\n+    ArchRule myRule = slices().matching(\"pro.taskana.(*)..\").should().beFreeOfCycles();\n     myRule.check(importedClasses);\n   }\n \n+  /**\n+   * Test for cycles with subpackages\n+   * https://www.archunit.org/userguide/html/000_Index.html#_cycle_checks\n+   */\n+  @TestFactory\n+  Collection<DynamicTest> freeOfCycles_subpackages() {\n+\n+    Stream<String> packagesToTest =\n+        Stream.of(\n+            \"pro.taskana.common.internal.(*)..\",\n+            \"pro.taskana.common.api.(*)..\",\n+            \"pro.taskana.common.internal.(*)..\",\n+            \"pro.taskana.classification.api.(*)..\",\n+            \"pro.taskana.classification.internal.(*)..\",\n+            \"pro.taskana.history.api.(*)..\",\n+            \"pro.taskana.history.internal.(*)..\",\n+            // to be fixed soon\n+            // \"pro.taskana.report.api.(*)..\",\n+            \"pro.taskana.report.internal.(*)..\",\n+            \"pro.taskana.task.api.(*)..\",\n+            \"pro.taskana.task.internal.(*)..\",\n+            \"pro.taskana.workbasket.api.(*)..\",\n+            \"pro.taskana.workbasket.internal.(*)..\");\n+    return packagesToTest\n+        .map(\n+            p ->\n+                dynamicTest(\n+                    p.replaceAll(Pattern.quote(\"pro.taskana.\"), \"\") + \" is free of cycles\",\n+                    () -> slices().matching(p).should().beFreeOfCycles().check(importedClasses)))\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Disabled(\"TBD\")\n   @Test\n+  void commonClassesShouldNotDependOnOtherDomainClasses() {\n+    ArchRule myRule =\n+        noClasses()\n+            .that()\n+            .resideInAPackage(\"..common..\")\n+            .should()\n+            .dependOnClassesThat()\n+            .resideInAnyPackage(\n+                \"..classification..\", \"..history..\", \"..report..\", \"..task..\", \"..workbasket..\");\n+    myRule.check(importedClasses);\n+  }\n+\n   @Disabled\n-  void freeOfCyclicDependencies() {\n-    ArchRule myRule = slices().matching(\"pro.taskana.(*)..\").should()\n-                          .notDependOnEachOther();\n+  @Test\n+  void noClassesShouldDependOnReports() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52d7d47b75bb8412e0d277ab75c9460390580b3e"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA5OTAwNA==", "bodyText": "We could take the result of this test to improve the structure of the product, i.e.\n\nmove xxxCleanupJob classes into the domain packages\nexclude TaskanaEngine/TaskanaEngineImpl from the check\nand then enable the test again", "url": "https://github.com/Taskana/taskana/pull/898#discussion_r375099004", "createdAt": "2020-02-05T07:42:38Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java", "diffHunk": "@@ -84,20 +83,92 @@ void noClassShouldAccessStandardStreams() {\n     NO_CLASSES_SHOULD_ACCESS_STANDARD_STREAMS.check(importedClasses);\n   }\n \n-  @Test\n+  /**\n+   * Solution would be nice, but is not achievable without big changes\n+   * https://www.archunit.org/userguide/html/000_Index.html#_cycle_checks\n+   */\n   @Disabled\n+  @Test\n   void freeOfCycles() {\n-    ArchRule myRule = slices().matching(\"pro.taskana.(*)..\")\n-                          .should().beFreeOfCycles();\n+    ArchRule myRule = slices().matching(\"pro.taskana.(*)..\").should().beFreeOfCycles();\n     myRule.check(importedClasses);\n   }\n \n+  /**\n+   * Test for cycles with subpackages\n+   * https://www.archunit.org/userguide/html/000_Index.html#_cycle_checks\n+   */\n+  @TestFactory\n+  Collection<DynamicTest> freeOfCycles_subpackages() {\n+\n+    Stream<String> packagesToTest =\n+        Stream.of(\n+            \"pro.taskana.common.internal.(*)..\",\n+            \"pro.taskana.common.api.(*)..\",\n+            \"pro.taskana.common.internal.(*)..\",\n+            \"pro.taskana.classification.api.(*)..\",\n+            \"pro.taskana.classification.internal.(*)..\",\n+            \"pro.taskana.history.api.(*)..\",\n+            \"pro.taskana.history.internal.(*)..\",\n+            // to be fixed soon\n+            // \"pro.taskana.report.api.(*)..\",\n+            \"pro.taskana.report.internal.(*)..\",\n+            \"pro.taskana.task.api.(*)..\",\n+            \"pro.taskana.task.internal.(*)..\",\n+            \"pro.taskana.workbasket.api.(*)..\",\n+            \"pro.taskana.workbasket.internal.(*)..\");\n+    return packagesToTest\n+        .map(\n+            p ->\n+                dynamicTest(\n+                    p.replaceAll(Pattern.quote(\"pro.taskana.\"), \"\") + \" is free of cycles\",\n+                    () -> slices().matching(p).should().beFreeOfCycles().check(importedClasses)))\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Disabled(\"TBD\")\n   @Test\n+  void commonClassesShouldNotDependOnOtherDomainClasses() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52d7d47b75bb8412e0d277ab75c9460390580b3e"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwMTU1Mw==", "bodyText": "we could refactor BulkOperationResults into Interface + implementation in order to comply with this test.\nProbably it would also be possible to restructure TaskanaHistoryEvent.\nIn addition, the test is disabled because there are violations in the report.api package. May be, we could refactor these classes to remove the violations", "url": "https://github.com/Taskana/taskana/pull/898#discussion_r375101553", "createdAt": "2020-02-05T07:50:30Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java", "diffHunk": "@@ -47,7 +47,7 @@ void apiClassesShouldNotDependOnInternalClasses() {\n             .and()\n             .haveSimpleNameNotEndingWith(\"BulkOperationResults\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52d7d47b75bb8412e0d277ab75c9460390580b3e"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6661ce6a3cd5fc0023e9fe866d9b6844f6b4ab96", "author": {"user": null}, "url": "https://github.com/Taskana/taskana/commit/6661ce6a3cd5fc0023e9fe866d9b6844f6b4ab96", "committedDate": "2020-02-05T09:43:24Z", "message": "TSK-991: Add more architecture tests\n\n(cherry picked from commit 760adb24b54d588e8a977853d092d5744781f496)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNTk1MDIy", "url": "https://github.com/Taskana/taskana/pull/898#pullrequestreview-353595022", "createdAt": "2020-02-05T10:05:48Z", "commit": {"oid": "6661ce6a3cd5fc0023e9fe866d9b6844f6b4ab96"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNjIwNTgy", "url": "https://github.com/Taskana/taskana/pull/898#pullrequestreview-353620582", "createdAt": "2020-02-05T10:45:31Z", "commit": {"oid": "6661ce6a3cd5fc0023e9fe866d9b6844f6b4ab96"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4555, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}