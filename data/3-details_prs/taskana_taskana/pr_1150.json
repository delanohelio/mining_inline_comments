{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNTU2Mjkx", "number": 1150, "title": "TSK-1275: Support select and claim in one API call", "bodyText": "Sonarcloud: https://sonarcloud.io/dashboard?branch=TSK-1275&id=gitgoodjhe_taskana\nNOTE: uncovered lines are Logger Debugs....", "createdAt": "2020-06-26T12:25:29Z", "url": "https://github.com/Taskana/taskana/pull/1150", "merged": true, "mergeCommit": {"oid": "969d3eeff653d51eb7dcf5234aa4020333613ab3"}, "closed": true, "closedAt": "2020-06-30T12:50:27Z", "author": {"login": "gitgoodjhe"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvstPxAFqTQzODc3NTg0OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwVD15gFqTQzOTk3NjcxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Nzc1ODQ4", "url": "https://github.com/Taskana/taskana/pull/1150#pullrequestreview-438775848", "createdAt": "2020-06-28T12:27:49Z", "commit": {"oid": "f1991ad4316cd8de239ba6cd0cc57caa70f1bddb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxMjoyNzo0OVrOGp9BZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxMzo0NToxNFrOGp9iiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0NDU4MQ==", "bodyText": "Please rework the naming and clarify which taskId is meant.\ne.g. @throws TaskNotFoundException if the taskQuery does not return any task", "url": "https://github.com/Taskana/taskana/pull/1150#discussion_r446644581", "createdAt": "2020-06-28T12:27:49Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "diffHunk": "@@ -325,6 +325,21 @@ void deleteTask(String taskId)\n   void forceDeleteTask(String taskId)\n       throws TaskNotFoundException, InvalidStateException, NotAuthorizedException;\n \n+  /**\n+   * Selects and claims the first task which is returned by the task query.\n+   *\n+   * @param taskQuery the task query.\n+   * @return the task that got selected and claimed\n+   * @throws TaskNotFoundException if the task with taskId was not found\n+   * @throws InvalidStateException if the state of the task with taskId is not READY\n+   * @throws InvalidOwnerException if the task with taskId is claimed by someone else\n+   * @throws NotAuthorizedException if the current user has no read permission for the\n+   *     workbasket the task is in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1991ad4316cd8de239ba6cd0cc57caa70f1bddb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0NDY0NA==", "bodyText": "selectAndClaim does not work on db2? I think this is worth commenting. Something like \"the optimized query for db2 does not work with selectAndClaim because ...\"", "url": "https://github.com/Taskana/taskana/pull/1150#discussion_r446644644", "createdAt": "2020-06-28T12:28:26Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryImpl.java", "diffHunk": "@@ -1112,7 +1111,11 @@ public long count() {\n   }\n \n   public String getLinkToMapperScript() {\n-    return DB.DB2.dbProductId.equals(getDatabaseId()) ? LINK_TO_MAPPER_DB2 : LINK_TO_MAPPER;\n+    if (DB.DB2.dbProductId.equals(getDatabaseId()) && !selectAndClaim) {\n+      return LINK_TO_MAPPER_DB2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1991ad4316cd8de239ba6cd0cc57caa70f1bddb"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MjUyMw==", "bodyText": "why SystemException? According to JavaDoc I expected a \"TaskNotFoundExeption\"", "url": "https://github.com/Taskana/taskana/pull/1150#discussion_r446652523", "createdAt": "2020-06-28T13:40:30Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskServiceImpl.java", "diffHunk": "@@ -477,6 +477,37 @@ public void forceDeleteTask(String taskId)\n     deleteTask(taskId, true);\n   }\n \n+  @Override\n+  public Task selectAndClaim(TaskQuery taskQuery)\n+      throws TaskNotFoundException, NotAuthorizedException, InvalidStateException,\n+          InvalidOwnerException {\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"entry to selectAndClaim(taskQuery = {})\", taskQuery);\n+    }\n+\n+    try {\n+\n+      taskanaEngine.openConnection();\n+\n+      ((TaskQueryImpl) taskQuery).selectAndClaimEquals(true);\n+\n+      TaskSummary taskSummary = taskQuery.single();\n+\n+      if (taskSummary == null) {\n+        throw new SystemException(\n+            \"No tasks matched the specified filter and sorting options,\"\n+                + \" task query returned nothing!\");\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1991ad4316cd8de239ba6cd0cc57caa70f1bddb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MjcxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(selectedAndClaimedTasks.stream().map(Task::getId))\n          \n          \n            \n                assertThat(selectedAndClaimedTasks)\n          \n          \n            \n                    .extracting(Task::getId)", "url": "https://github.com/Taskana/taskana/pull/1150#discussion_r446652719", "createdAt": "2020-06-28T13:42:33Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.security.PrivilegedAction;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import javax.security.auth.Subject;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.BaseQuery.SortDirection;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.security.JaasExtension;\n+import pro.taskana.common.internal.security.UserPrincipal;\n+import pro.taskana.common.internal.security.WithAccessId;\n+import pro.taskana.common.internal.util.CheckedConsumer;\n+import pro.taskana.task.api.TaskQuery;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class SelectAndClaimTaskAccTest extends AbstractAccTest {\n+\n+  @Test\n+  void should_claimDifferentTasks_For_ConcurrentSelectAndClaimCalls() throws Exception {\n+\n+    List<Task> selectedAndClaimedTasks = Collections.synchronizedList(new ArrayList<>());\n+\n+    List<String> accessIds =\n+        Collections.synchronizedList(\n+            Stream.of(\"admin\", \"teamlead-1\", \"teamlead-2\", \"taskadmin\")\n+                .collect(Collectors.toList()));\n+\n+    Runnable test = getRunnableTest(selectedAndClaimedTasks, accessIds);\n+\n+    Thread[] threads = new Thread[4];\n+    for (int i = 0; i < threads.length; i++) {\n+      threads[i] = new Thread(test);\n+      threads[i].start();\n+    }\n+    for (int i = 0; i < threads.length; i++) {\n+      threads[i].join();\n+    }\n+\n+    assertThat(selectedAndClaimedTasks.stream().map(Task::getId))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1991ad4316cd8de239ba6cd0cc57caa70f1bddb"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1Mjc3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(selectedAndClaimedTasks.stream().map(Task::getOwner))\n          \n          \n            \n                assertThat(selectedAndClaimedTasks)\n          \n          \n            \n                    .extracting(Task::getOwner)", "url": "https://github.com/Taskana/taskana/pull/1150#discussion_r446652778", "createdAt": "2020-06-28T13:43:01Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.security.PrivilegedAction;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import javax.security.auth.Subject;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.BaseQuery.SortDirection;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.security.JaasExtension;\n+import pro.taskana.common.internal.security.UserPrincipal;\n+import pro.taskana.common.internal.security.WithAccessId;\n+import pro.taskana.common.internal.util.CheckedConsumer;\n+import pro.taskana.task.api.TaskQuery;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class SelectAndClaimTaskAccTest extends AbstractAccTest {\n+\n+  @Test\n+  void should_claimDifferentTasks_For_ConcurrentSelectAndClaimCalls() throws Exception {\n+\n+    List<Task> selectedAndClaimedTasks = Collections.synchronizedList(new ArrayList<>());\n+\n+    List<String> accessIds =\n+        Collections.synchronizedList(\n+            Stream.of(\"admin\", \"teamlead-1\", \"teamlead-2\", \"taskadmin\")\n+                .collect(Collectors.toList()));\n+\n+    Runnable test = getRunnableTest(selectedAndClaimedTasks, accessIds);\n+\n+    Thread[] threads = new Thread[4];\n+    for (int i = 0; i < threads.length; i++) {\n+      threads[i] = new Thread(test);\n+      threads[i].start();\n+    }\n+    for (int i = 0; i < threads.length; i++) {\n+      threads[i].join();\n+    }\n+\n+    assertThat(selectedAndClaimedTasks.stream().map(Task::getId))\n+        .containsExactlyInAnyOrder(\n+            \"TKI:000000000000000000000000000000000003\",\n+            \"TKI:000000000000000000000000000000000004\",\n+            \"TKI:000000000000000000000000000000000005\",\n+            \"TKI:000000000000000000000000000000000006\");\n+\n+    assertThat(selectedAndClaimedTasks.stream().map(Task::getOwner))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1991ad4316cd8de239ba6cd0cc57caa70f1bddb"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1Mjg0OA==", "bodyText": "Do we really want a system exception here?", "url": "https://github.com/Taskana/taskana/pull/1150#discussion_r446652848", "createdAt": "2020-06-28T13:43:27Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/test/java/acceptance/task/SelectAndClaimTaskAccTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.security.PrivilegedAction;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import javax.security.auth.Subject;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.BaseQuery.SortDirection;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.security.JaasExtension;\n+import pro.taskana.common.internal.security.UserPrincipal;\n+import pro.taskana.common.internal.security.WithAccessId;\n+import pro.taskana.common.internal.util.CheckedConsumer;\n+import pro.taskana.task.api.TaskQuery;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class SelectAndClaimTaskAccTest extends AbstractAccTest {\n+\n+  @Test\n+  void should_claimDifferentTasks_For_ConcurrentSelectAndClaimCalls() throws Exception {\n+\n+    List<Task> selectedAndClaimedTasks = Collections.synchronizedList(new ArrayList<>());\n+\n+    List<String> accessIds =\n+        Collections.synchronizedList(\n+            Stream.of(\"admin\", \"teamlead-1\", \"teamlead-2\", \"taskadmin\")\n+                .collect(Collectors.toList()));\n+\n+    Runnable test = getRunnableTest(selectedAndClaimedTasks, accessIds);\n+\n+    Thread[] threads = new Thread[4];\n+    for (int i = 0; i < threads.length; i++) {\n+      threads[i] = new Thread(test);\n+      threads[i].start();\n+    }\n+    for (int i = 0; i < threads.length; i++) {\n+      threads[i].join();\n+    }\n+\n+    assertThat(selectedAndClaimedTasks.stream().map(Task::getId))\n+        .containsExactlyInAnyOrder(\n+            \"TKI:000000000000000000000000000000000003\",\n+            \"TKI:000000000000000000000000000000000004\",\n+            \"TKI:000000000000000000000000000000000005\",\n+            \"TKI:000000000000000000000000000000000006\");\n+\n+    assertThat(selectedAndClaimedTasks.stream().map(Task::getOwner))\n+        .containsExactlyInAnyOrder(\"admin\", \"taskadmin\", \"teamlead-1\", \"teamlead-2\");\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_ThrowException_When_TryingToSelectAndClaimNonExistingTask() throws Exception {\n+\n+    TaskQuery query = taskanaEngine.getTaskService().createTaskQuery();\n+    query.idIn(\"notexisting\");\n+    ThrowingCallable call =\n+        () -> {\n+          taskanaEngine.getTaskService().selectAndClaim(query);\n+        };\n+    assertThatThrownBy(call)\n+        .isInstanceOf(SystemException.class)\n+        .hasMessageContaining(\n+            \"No tasks matched the specified filter and sorting options, \"\n+                + \"task query returned nothing!\");\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1991ad4316cd8de239ba6cd0cc57caa70f1bddb"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MzA2NQ==", "bodyText": "personally I think <= 16 is more readable :)", "url": "https://github.com/Taskana/taskana/pull/1150#discussion_r446653065", "createdAt": "2020-06-28T13:45:14Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/task/rest/TaskController.java", "diffHunk": "@@ -414,8 +439,15 @@ private TaskQuery applyFilterParams(TaskQuery taskQuery, MultiValueMap<String, S\n       params.remove(EXTERNAL_ID);\n     }\n \n-    if (LOGGER.isDebugEnabled()) {\n-      LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", taskQuery);\n+    for (int i = 1; i < 17; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1991ad4316cd8de239ba6cd0cc57caa70f1bddb"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d0edb6ba219885935b7bc1a69b5af8ebc9c5862", "author": {"user": {"login": "gitgoodjhe", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/7d0edb6ba219885935b7bc1a69b5af8ebc9c5862", "committedDate": "2020-06-30T11:19:02Z", "message": "TSK-1275: Support select and claim in one API call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "808d5e604539f2f4e5e13e86b00c627a78e1b762", "author": {"user": {"login": "gitgoodjhe", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/808d5e604539f2f4e5e13e86b00c627a78e1b762", "committedDate": "2020-06-30T12:39:49Z", "message": "review Findings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTc2NzEw", "url": "https://github.com/Taskana/taskana/pull/1150#pullrequestreview-439976710", "createdAt": "2020-06-30T12:46:39Z", "commit": {"oid": "808d5e604539f2f4e5e13e86b00c627a78e1b762"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4506, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}