{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1ODMwOTA4", "number": 857, "title": "TSK-1021 persist timestamps in UTC representation", "bodyText": "", "createdAt": "2020-01-22T12:35:40Z", "url": "https://github.com/Taskana/taskana/pull/857", "merged": true, "mergeCommit": {"oid": "ec7e1df8a1503d823c7da513699f86af14941c37"}, "closed": true, "closedAt": "2020-01-22T14:30:03Z", "author": {"login": "BerndBreier"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb81LwuAFqTM0NjU1NzMyMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb81-QKgBqjI5NzAwOTA2NDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NTU3MzIy", "url": "https://github.com/Taskana/taskana/pull/857#pullrequestreview-346557322", "createdAt": "2020-01-22T12:41:56Z", "commit": {"oid": "9df1fbeb1db00bc4d05455e382a8cec554f9ac96"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjo0MTo1N1rOFgavlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjo0ODowM1rOFga5nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzNjkxNg==", "bodyText": "Just out of curiosity:\nShould we instantiate the Handlers, so that mybatis doesnt do it via reflections?", "url": "https://github.com/Taskana/taskana/pull/857#discussion_r369536916", "createdAt": "2020-01-22T12:41:57Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/main/java/pro/taskana/impl/TaskanaEngineImpl.java", "diffHunk": "@@ -232,6 +234,9 @@ protected SqlSessionManager createSqlSessionManager() {\n           e.getCause());\n     }\n \n+    // register type handlers\n+    configuration.getTypeHandlerRegistry().register(MapTypeHandler.class);\n+    configuration.getTypeHandlerRegistry().register(Instant.class, InstantTypeHandler.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df1fbeb1db00bc4d05455e382a8cec554f9ac96"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzNjk4NA==", "bodyText": "Does that even matter?", "url": "https://github.com/Taskana/taskana/pull/857#discussion_r369536984", "createdAt": "2020-01-22T12:42:06Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/main/java/pro/taskana/impl/TaskanaEngineImpl.java", "diffHunk": "@@ -232,6 +234,9 @@ protected SqlSessionManager createSqlSessionManager() {\n           e.getCause());\n     }\n \n+    // register type handlers\n+    configuration.getTypeHandlerRegistry().register(MapTypeHandler.class);\n+    configuration.getTypeHandlerRegistry().register(Instant.class, InstantTypeHandler.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzNjkxNg=="}, "originalCommit": {"oid": "9df1fbeb1db00bc4d05455e382a8cec554f9ac96"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzODg4OQ==", "bodyText": "Since the timestamp behaviour should be done globally, do we need specific (complicated) test cases like this?\nCan't we just do it with one entity?", "url": "https://github.com/Taskana/taskana/pull/857#discussion_r369538889", "createdAt": "2020-01-22T12:46:37Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/test/java/acceptance/persistence/UpdateObjectsUseUtcTimeStampsAccTest.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package acceptance.persistence;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.IsEqual.equalTo;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import acceptance.AbstractAccTest;\n+import java.sql.SQLException;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.TimeZone;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.Classification;\n+import pro.taskana.ClassificationService;\n+import pro.taskana.JobService;\n+import pro.taskana.Task;\n+import pro.taskana.TaskService;\n+import pro.taskana.Workbasket;\n+import pro.taskana.WorkbasketAccessItem;\n+import pro.taskana.WorkbasketService;\n+import pro.taskana.WorkbasketType;\n+import pro.taskana.exceptions.AttachmentPersistenceException;\n+import pro.taskana.exceptions.ClassificationAlreadyExistException;\n+import pro.taskana.exceptions.ClassificationNotFoundException;\n+import pro.taskana.exceptions.ConcurrencyException;\n+import pro.taskana.exceptions.DomainNotFoundException;\n+import pro.taskana.exceptions.InvalidArgumentException;\n+import pro.taskana.exceptions.InvalidWorkbasketException;\n+import pro.taskana.exceptions.NotAuthorizedException;\n+import pro.taskana.exceptions.TaskAlreadyExistException;\n+import pro.taskana.exceptions.TaskNotFoundException;\n+import pro.taskana.exceptions.WorkbasketAlreadyExistException;\n+import pro.taskana.exceptions.WorkbasketNotFoundException;\n+import pro.taskana.impl.JobServiceImpl;\n+import pro.taskana.impl.TaskImpl;\n+import pro.taskana.jobs.ScheduledJob;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+\n+/** Acceptance test for access to timestamps from different timezones. */\n+@ExtendWith(JaasExtension.class)\n+public class UpdateObjectsUseUtcTimeStampsAccTest extends AbstractAccTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df1fbeb1db00bc4d05455e382a8cec554f9ac96"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzOTQ4Nw==", "bodyText": "ZonedDateTime.now()", "url": "https://github.com/Taskana/taskana/pull/857#discussion_r369539487", "createdAt": "2020-01-22T12:48:03Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-data/src/main/java/pro/taskana/sampledata/SampleDataGenerator.java", "diffHunk": "@@ -33,18 +35,18 @@\n   private static final String CACHED_DROPDB = \"DROPDB\";\n   private static HashMap<String, List<String>> cachedScripts = new HashMap<>();\n   private final DataSource dataSource;\n-  private final LocalDateTime now;\n+  private final ZonedDateTime now;\n   /**\n    * This value cannot be automatically obtained by connection.getSchema(), because setting not yet\n    * existing schema will result into an SQL Exception.\n    */\n   private final String schema;\n \n   public SampleDataGenerator(DataSource dataSource, String schema) {\n-    this(dataSource, schema, LocalDateTime.now());\n+    this(dataSource, schema, Instant.now().atZone(ZoneId.of(\"UTC\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df1fbeb1db00bc4d05455e382a8cec554f9ac96"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89ed11d0c5e3326091349dc8c7ba8ce0b45c0404", "author": {"user": {"login": "BerndBreier", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/89ed11d0c5e3326091349dc8c7ba8ce0b45c0404", "committedDate": "2020-01-22T13:42:21Z", "message": "TSK-1021 persist timestamps in UTC representation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "568480f22db9bce93e05d3f7f49bd07611bcfa0e", "author": {"user": {"login": "BerndBreier", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/568480f22db9bce93e05d3f7f49bd07611bcfa0e", "committedDate": "2020-01-22T13:42:21Z", "message": "TSK-1021 InstantTypeHandler Comments from Mustapha"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9df1fbeb1db00bc4d05455e382a8cec554f9ac96", "author": {"user": {"login": "BerndBreier", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/9df1fbeb1db00bc4d05455e382a8cec554f9ac96", "committedDate": "2020-01-22T12:21:07Z", "message": "TSK-1021 persist timestamps in UTC representation"}, "afterCommit": {"oid": "568480f22db9bce93e05d3f7f49bd07611bcfa0e", "author": {"user": {"login": "BerndBreier", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/568480f22db9bce93e05d3f7f49bd07611bcfa0e", "committedDate": "2020-01-22T13:42:21Z", "message": "TSK-1021 InstantTypeHandler Comments from Mustapha"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4541, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}