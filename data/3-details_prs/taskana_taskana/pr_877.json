{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NDg5NjYx", "number": 877, "title": "TSK-989 Filter Tasks by planned TimeIntervals (REST)", "bodyText": "-Added planned param in filter list\n-Implemented needed methods\n-Added Test", "createdAt": "2020-01-27T13:26:32Z", "url": "https://github.com/Taskana/taskana/pull/877", "merged": true, "mergeCommit": {"oid": "1e99eb66c9c218d2a1573da4bc81125055f8bc4e"}, "closed": true, "closedAt": "2020-01-30T10:09:00Z", "author": {"login": "gitgoodjhe"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-dGnBAFqTM0ODY3NTUzOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_Xr8DAFqTM1MDcwNjM5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4Njc1NTM4", "url": "https://github.com/Taskana/taskana/pull/877#pullrequestreview-348675538", "createdAt": "2020-01-27T13:52:41Z", "commit": {"oid": "e358972a645b83f84a4180d77b5b935b61725c06"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMzo1Mjo0MlrOFiDUkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMzo1Mjo0MlrOFiDUkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1MDMyMw==", "bodyText": "please consider making maxTime some kind of constant. also is this somewhere documented within the API documentation? this is like a magic string that suddenly does not need to be a valid timestamp / instant object and still have a meaning.\nPersonally i would just remove this special cases and find a way to give \"null\" or only 1 timestamp such a meaning.", "url": "https://github.com/Taskana/taskana/pull/877#discussion_r371250323", "createdAt": "2020-01-27T13:52:42Z", "author": {"login": "benjamineckstein"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/TaskController.java", "diffHunk": "@@ -330,13 +332,65 @@ private TaskQuery applyFilterParams(TaskQuery taskQuery, MultiValueMap<String, S\n       params.remove(POR_VALUE);\n     }\n \n+    if (params.containsKey(PLANNED)) {\n+\n+      String[] instants = extractCommaSeparatedFields(params.get(PLANNED));\n+\n+      TimeInterval[] timeIntervals = extractTimeIntervals(instants);\n+\n+      taskQuery.plannedWithin(timeIntervals);\n+\n+      params.remove(PLANNED);\n+    }\n+\n     if (LOGGER.isDebugEnabled()) {\n       LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", taskQuery);\n     }\n \n     return taskQuery;\n   }\n \n+  private TimeInterval[] extractTimeIntervals(String[] instants) {\n+\n+    List<TimeInterval> timeIntervalsList = new ArrayList<>();\n+\n+    for (int i = 0; i < instants.length - 1; i += 2) {\n+\n+      TimeInterval timeInterval = determineTimeInterval(instants, i);\n+\n+      if (timeInterval != null) {\n+\n+        timeIntervalsList.add(timeInterval);\n+      }\n+    }\n+\n+    TimeInterval[] timeIntervalArray = new TimeInterval[timeIntervalsList.size()];\n+\n+    TimeInterval[] timeIntervals = timeIntervalsList.toArray(timeIntervalArray);\n+\n+    return timeIntervals;\n+  }\n+\n+  private TimeInterval determineTimeInterval(String[] instants, int i) {\n+\n+    if (!instants[i].equals(\"maxTime\") && !instants[i + 1].equals(\"maxTime\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e358972a645b83f84a4180d77b5b935b61725c06"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5OTcxMjUy", "url": "https://github.com/Taskana/taskana/pull/877#pullrequestreview-349971252", "createdAt": "2020-01-29T09:40:07Z", "commit": {"oid": "eec3ceccdecf4547c0d4c0478dd37dc313de8648"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTo0MDowN1rOFjCACQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTo0NDowNFrOFjCH-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NzI1Nw==", "bodyText": "provide this example with an example request? Could be better to understand.", "url": "https://github.com/Taskana/taskana/pull/877#discussion_r372277257", "createdAt": "2020-01-29T09:40:07Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/resources/asciidoc/rest-api.adoc", "diffHunk": "@@ -115,6 +115,26 @@ include::{snippets}/GetAllTasksDocTest/response-fields.adoc[]\n The list generated in the response can be filtered using following parameters in the uri: +\n name | priority | state | classification.key | workbasket-id | {workbasket-key , domain} | +\n owner | por.company | por.system | por.instance | por.type | por.value +\n+planned | plannedFrom | plannedTo | due | dueFrom | dueTo +\n+\n+If it is sufficient to filter the list with a single time interval, use the parameters +\n+plannedFrom/dueFrom and plannedTo/plannedTo. +\n+Leave one of them out of the request, if you want to have an open interval. +\n+\n+If it is required to filter the list with multiple planned or due time intervals, the parameters +\n+ planned / due can be used as follows instead: +\n+\n+ - provide a string with an even number of instants separated by a \",\". Time intervals will be +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec3ceccdecf4547c0d4c0478dd37dc313de8648"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3OTI5MA==", "bodyText": "I know what you are trying to say. But it's hard to read. Maybe something like\n\nplanned stands for a specific timestamp. Whenever an interval is of interest use plannedFrom and plannedTo. plannedFrom and plannedTo have to be used together. due works analog.", "url": "https://github.com/Taskana/taskana/pull/877#discussion_r372279290", "createdAt": "2020-01-29T09:44:04Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/resources/asciidoc/rest-api.adoc", "diffHunk": "@@ -115,6 +115,26 @@ include::{snippets}/GetAllTasksDocTest/response-fields.adoc[]\n The list generated in the response can be filtered using following parameters in the uri: +\n name | priority | state | classification.key | workbasket-id | {workbasket-key , domain} | +\n owner | por.company | por.system | por.instance | por.type | por.value +\n+planned | plannedFrom | plannedTo | due | dueFrom | dueTo +\n+\n+If it is sufficient to filter the list with a single time interval, use the parameters +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec3ceccdecf4547c0d4c0478dd37dc313de8648"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNjYzMTQx", "url": "https://github.com/Taskana/taskana/pull/877#pullrequestreview-350663141", "createdAt": "2020-01-30T08:58:25Z", "commit": {"oid": "4c50a709c138f7ae56aad736f719441dddf6c6b2"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5e11dc18fc5b8417f7193c2364dd89e69513799", "author": {"user": {"login": "gitgoodjhe", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/c5e11dc18fc5b8417f7193c2364dd89e69513799", "committedDate": "2020-01-30T09:01:22Z", "message": "TSK-989 Filter Tasks by planned TimeIntervals (REST)\n\n-Added planned, planned-from and planned-until params in filter list\n-Added due, due-from and due-until params in filter list\n-Implemented needed methods\n-Added Test\n-Updated rest-api.doc\n-Refactored TaskControllerIntTests to use AssertJ"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzA2Mzkz", "url": "https://github.com/Taskana/taskana/pull/877#pullrequestreview-350706393", "createdAt": "2020-01-30T10:07:58Z", "commit": {"oid": "c5e11dc18fc5b8417f7193c2364dd89e69513799"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4548, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}