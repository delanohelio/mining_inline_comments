{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NzI2NDYw", "number": 1091, "title": "TSK-1214, TSK-1222", "bodyText": "TSK-1214 Classification Component: Storing states in NGXS Store\nTSK-1222 Increase HTML visibility with comments: Administration Component", "createdAt": "2020-05-28T20:47:27Z", "url": "https://github.com/Taskana/taskana/pull/1091", "merged": true, "mergeCommit": {"oid": "7b5927d281f346f20bd72c9c3f5bf8b335c9cc7f"}, "closed": true, "closedAt": "2020-06-17T10:19:39Z", "author": {"login": "cnguyen-de"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcl-9jzAH2gAyNDI0NzI2NDYwOmQ4YWZjMjRiMTRlYmE1YjcwYzBjOTZmMTU3NTE0MDk2NTI4ZWY2NTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsHKfwgFqTQzMjI2MTY2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d8afc24b14eba5b70c0c96f157514096528ef659", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/d8afc24b14eba5b70c0c96f157514096528ef659", "committedDate": "2020-05-29T09:22:38Z", "message": "TSK-1214: refactored taskana-classification\n\nTSK-1214 Trying to make drag'n drop in tree possible\n\nTSK-1214 Removed refreshClassification output from tree\n\nTSK-1214 New action in store updates a classification and refetches all, saving now correctly refreshes the classification-list\n\nTSK-1214 Fixed tests in tree component\n\nTSK-1214 Removed tree service and corresponding test in class-details\n\nTSK-1214 fixed issues in tree where multiple actions to store are fired incorrectly\n\nTSK-1214 added accessibility action, use space to select a tree node\n\nTSK-1214 swapped space and enter in tree component, cleaned code\n\nTSK-1214 fixed bug where page isn't updated dynamically according to browser path\n\nTSK-1214 workaround circular dependency.\n\nservice uses snapshot of store, does not actually access the state in store\n\nTSK-1214 fixed eslint. TODO: circular dependency between classification.service and classification.state\n\nTSK-1214 changed first() to take(1) to fix Observable dying during test\n\nTSK-1214 fixed test cases and lint issues\n\nTSK-1214 fixed circular dependency\n\nTSK-1214 devmode = false\n\nTSK-1214: fixed merge problems with notificationService and removed some warnings\n\nTSK-1214: fixed merge problems with notificationService\n\nTSK-1214 remove wrong imports from before merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7118708c3cb0572ac60c5554415b6846fe141a7", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/e7118708c3cb0572ac60c5554415b6846fe141a7", "committedDate": "2020-05-29T14:06:52Z", "message": "TSK-1214 implemented ngxs store as state manager for classification component"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576", "author": {"user": {"login": "Tristan2357", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/19dc969600b9518c8731c179ee2a3825365e2576", "committedDate": "2020-06-03T13:27:01Z", "message": "TSK-1248 removed unnecessary get call from saveClassification action"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTQzNTU1", "url": "https://github.com/Taskana/taskana/pull/1091#pullrequestreview-432143555", "createdAt": "2020-06-17T07:48:53Z", "commit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo0ODo1M1rOGk50gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODoyODoyM1rOGk7Q-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0OTI1MQ==", "bodyText": "I know we talked about this. What was our conclusion? I forgot", "url": "https://github.com/Taskana/taskana/pull/1091#discussion_r441349251", "createdAt": "2020-06-17T07:48:53Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/components/classification-details/classification-details.component.html", "diffHunk": "@@ -1,48 +1,43 @@\n <div class=\"container-scrollable\">\n   <taskana-spinner [isRunning]=\"requestInProgress\" class=\"floating\" (spinnerIsRunning)=\"spinnerRunning($event)\"></taskana-spinner>\n   <div id=\"classification-details\" *ngIf=\"classification && !spinnerIsRunning\">\n-    <ul class=\"nav nav-tabs\" role=\"tablist\">\n-      <li *ngIf=\"showDetail\" class=\"visible-xs visible-sm hidden\">\n-        <a (click)=\"backClicked()\">\n-          <span class=\"material-icons md-20 blue\">arrow_back</span>\n-        </a>\n-      </li>\n-    </ul>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NTYzMg==", "bodyText": "where did the title go?", "url": "https://github.com/Taskana/taskana/pull/1091#discussion_r441355632", "createdAt": "2020-06-17T07:59:43Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/components/classification-list/classification-list.component.html", "diffHunk": "@@ -1,35 +1,43 @@\n <div class=\"classification-list-full-height\">\n-\t<li id=\"wb-action-toolbar\" class=\"list-group-item tab-align\">\n+\n+\t<!-- ACTION TOOLBAR -->\n+\t<li class=\"list-group-item tab-align\" id=\"wb-action-toolbar\">\n \t\t<div class=\"row\">\n \t\t\t<div class=\"col-xs-6 btn-group\">\n-\t\t\t\t<button type=\"button\" (click)=\"addClassification()\" data-toggle=\"tooltip\" title=\"Add\" class=\"btn btn-default\">\n+\n+\t\t\t\t<button class=\"btn btn-default\" type=\"button\" (click)=\"addClassification()\" data-toggle=\"tooltip\" title=\"Add\">\n \t\t\t\t\t<span class=\"material-icons md-20 green-blue\">add_circle_outline</span>\n \t\t\t\t</button>\n-\t\t\t\t<taskana-import-export-component class =\"btn-group\" [currentSelection]=\"selectionToImport\">\n+\n+\t\t\t\t<taskana-import-export-component\n+\t\t\t\t\t\tclass =\"btn-group\" [currentSelection]=\"taskanaType.CLASSIFICATIONS\">\n \t\t\t\t</taskana-import-export-component>\n \t\t\t</div>\n \t\t\t<div class=\"col-xs-6\">\n-\t\t\t\t<taskana-classification-types-selector class=\"pull-right\"></taskana-classification-types-selector>\n+\t\t\t\t<taskana-classification-types-selector\n+\t\t\t\t\t\tclass=\"pull-right\">\n+\t\t\t\t</taskana-classification-types-selector>\n \t\t\t</div>\n \t\t</div>\n \t</li>\n+\n+\t<!-- FILTER -->\n \t<div class=\"col-xs-2 category-filter\">\n \t\t<button class=\"btn btn-default\" data-toggle=\"dropdown\" type=\"button\" id=\"dropdown-classification-filter\" data-toggle=\"dropdown\"\n \t\t aria-haspopup=\"true\" aria-expanded=\"true\">\n-\t\t\t<svg-icon *ngIf=\"selectedCategory else category_unselected\" class=\"blue\" [src]=\"(getCategoryIcon(selectedCategory) | async)?.name\"\n-\t\t\t data-toggle=\"tooltip\" [title]=\"(getCategoryIcon(category) | async)?.text\"></svg-icon>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NjQyNQ==", "bodyText": "why did you remove the title?", "url": "https://github.com/Taskana/taskana/pull/1091#discussion_r441356425", "createdAt": "2020-06-17T08:00:59Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/components/classification-list/classification-list.component.html", "diffHunk": "@@ -1,35 +1,43 @@\n <div class=\"classification-list-full-height\">\n-\t<li id=\"wb-action-toolbar\" class=\"list-group-item tab-align\">\n+\n+\t<!-- ACTION TOOLBAR -->\n+\t<li class=\"list-group-item tab-align\" id=\"wb-action-toolbar\">\n \t\t<div class=\"row\">\n \t\t\t<div class=\"col-xs-6 btn-group\">\n-\t\t\t\t<button type=\"button\" (click)=\"addClassification()\" data-toggle=\"tooltip\" title=\"Add\" class=\"btn btn-default\">\n+\n+\t\t\t\t<button class=\"btn btn-default\" type=\"button\" (click)=\"addClassification()\" data-toggle=\"tooltip\" title=\"Add\">\n \t\t\t\t\t<span class=\"material-icons md-20 green-blue\">add_circle_outline</span>\n \t\t\t\t</button>\n-\t\t\t\t<taskana-import-export-component class =\"btn-group\" [currentSelection]=\"selectionToImport\">\n+\n+\t\t\t\t<taskana-import-export-component\n+\t\t\t\t\t\tclass =\"btn-group\" [currentSelection]=\"taskanaType.CLASSIFICATIONS\">\n \t\t\t\t</taskana-import-export-component>\n \t\t\t</div>\n \t\t\t<div class=\"col-xs-6\">\n-\t\t\t\t<taskana-classification-types-selector class=\"pull-right\"></taskana-classification-types-selector>\n+\t\t\t\t<taskana-classification-types-selector\n+\t\t\t\t\t\tclass=\"pull-right\">\n+\t\t\t\t</taskana-classification-types-selector>\n \t\t\t</div>\n \t\t</div>\n \t</li>\n+\n+\t<!-- FILTER -->\n \t<div class=\"col-xs-2 category-filter\">\n \t\t<button class=\"btn btn-default\" data-toggle=\"dropdown\" type=\"button\" id=\"dropdown-classification-filter\" data-toggle=\"dropdown\"\n \t\t aria-haspopup=\"true\" aria-expanded=\"true\">\n-\t\t\t<svg-icon *ngIf=\"selectedCategory else category_unselected\" class=\"blue\" [src]=\"(getCategoryIcon(selectedCategory) | async)?.name\"\n-\t\t\t data-toggle=\"tooltip\" [title]=\"(getCategoryIcon(category) | async)?.text\"></svg-icon>\n+\t\t\t<svg-icon class=\"blue\" *ngIf=\"selectedCategory else category_unselected\" [src]=\"(getCategoryIcon(selectedCategory) | async)?.name\"\n+\t\t\t data-toggle=\"tooltip\"></svg-icon>\n \t\t\t<ng-template #category_unselected>\n-\t\t\t\t<svg-icon data-toggle=\"tooltip\" title=\"All\" class=\"blue \" src=\"./assets/icons/asterisk.svg\"></svg-icon>\n+\t\t\t\t<svg-icon data-toggle=\"tooltip\" title=\"All\" class=\"blue\" src=\"./assets/icons/asterisk.svg\"></svg-icon>\n \t\t\t</ng-template>\n \t\t</button>\n \t\t<ul class=\"dropdown-menu dropdown-menu-classification\" role=\"menu\">\n \t\t\t<li>\n-\t\t\t\t<a type=\"button\" (click)=\"selectCategory('');\" data-toggle=\"tooltip\" title=\"All\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NzMwNA==", "bodyText": "what is this variable for?", "url": "https://github.com/Taskana/taskana/pull/1091#discussion_r441357304", "createdAt": "2020-06-17T08:02:28Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/components/classification-list/classification-list.component.ts", "diffHunk": "@@ -1,84 +1,108 @@\n import { Component, OnDestroy, OnInit } from '@angular/core';\n-import { Observable, Subscription } from 'rxjs';\n-import { map } from 'rxjs/operators';\n-import { ActivatedRoute, Router } from '@angular/router';\n-import { Select } from '@ngxs/store';\n+import { Observable, Subject } from 'rxjs';\n+import { map, takeUntil } from 'rxjs/operators';\n+import { ActivatedRoute } from '@angular/router';\n+import { Actions, ofActionCompleted, ofActionDispatched, Select, Store } from '@ngxs/store';\n \n-import { TaskanaType } from 'app/shared/models/taskana-type';\n-import { Classification } from 'app/shared/models/classification';\n-import { TreeNodeModel } from 'app/shared/models/tree-node';\n+import { ImportExportService } from 'app/administration/services/import-export.service';\n \n-import { ClassificationsService } from 'app/shared/services/classifications/classifications.service';\n+import { TaskanaType } from 'app/shared/models/taskana-type';\n import { Pair } from 'app/shared/models/pair';\n-import { ImportExportService } from 'app/administration/services/import-export.service';\n+import { ClassificationsService } from 'app/shared/services/classifications/classifications.service';\n import { EngineConfigurationSelectors } from 'app/shared/store/engine-configuration-store/engine-configuration.selectors';\n import { ClassificationSelectors } from 'app/shared/store/classification-store/classification.selectors';\n-import { ClassificationDefinition } from '../../../shared/models/classification-definition';\n-import { NOTIFICATION_TYPES } from '../../../shared/models/notifications';\n-\n+import { Location } from '@angular/common';\n import { ClassificationCategoryImages } from '../../../shared/models/customisation';\n+\n import { NotificationService } from '../../../shared/services/notifications/notification.service';\n \n+import { GetClassifications, SetActiveAction } from '../../../shared/store/classification-store/classification.actions';\n+import { ACTION } from '../../../shared/models/action';\n+import { TreeNodeModel } from '../../../shared/models/tree-node';\n+\n+\n @Component({\n   selector: 'taskana-classification-list',\n   templateUrl: './classification-list.component.html',\n   styleUrls: ['./classification-list.component.scss']\n })\n export class ClassificationListComponent implements OnInit, OnDestroy {\n-  selectedCategory = '';\n-  selectedId: string;\n-  selectionToImport = TaskanaType.CLASSIFICATIONS;\n-  requestInProgress = false;\n-  initialized = false;\n+  taskanaType = TaskanaType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NzY1OQ==", "bodyText": "Should the store save TreeNodeModels?", "url": "https://github.com/Taskana/taskana/pull/1091#discussion_r441357659", "createdAt": "2020-06-17T08:03:09Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/components/classification-list/classification-list.component.ts", "diffHunk": "@@ -1,84 +1,108 @@\n import { Component, OnDestroy, OnInit } from '@angular/core';\n-import { Observable, Subscription } from 'rxjs';\n-import { map } from 'rxjs/operators';\n-import { ActivatedRoute, Router } from '@angular/router';\n-import { Select } from '@ngxs/store';\n+import { Observable, Subject } from 'rxjs';\n+import { map, takeUntil } from 'rxjs/operators';\n+import { ActivatedRoute } from '@angular/router';\n+import { Actions, ofActionCompleted, ofActionDispatched, Select, Store } from '@ngxs/store';\n \n-import { TaskanaType } from 'app/shared/models/taskana-type';\n-import { Classification } from 'app/shared/models/classification';\n-import { TreeNodeModel } from 'app/shared/models/tree-node';\n+import { ImportExportService } from 'app/administration/services/import-export.service';\n \n-import { ClassificationsService } from 'app/shared/services/classifications/classifications.service';\n+import { TaskanaType } from 'app/shared/models/taskana-type';\n import { Pair } from 'app/shared/models/pair';\n-import { ImportExportService } from 'app/administration/services/import-export.service';\n+import { ClassificationsService } from 'app/shared/services/classifications/classifications.service';\n import { EngineConfigurationSelectors } from 'app/shared/store/engine-configuration-store/engine-configuration.selectors';\n import { ClassificationSelectors } from 'app/shared/store/classification-store/classification.selectors';\n-import { ClassificationDefinition } from '../../../shared/models/classification-definition';\n-import { NOTIFICATION_TYPES } from '../../../shared/models/notifications';\n-\n+import { Location } from '@angular/common';\n import { ClassificationCategoryImages } from '../../../shared/models/customisation';\n+\n import { NotificationService } from '../../../shared/services/notifications/notification.service';\n \n+import { GetClassifications, SetActiveAction } from '../../../shared/store/classification-store/classification.actions';\n+import { ACTION } from '../../../shared/models/action';\n+import { TreeNodeModel } from '../../../shared/models/tree-node';\n+\n+\n @Component({\n   selector: 'taskana-classification-list',\n   templateUrl: './classification-list.component.html',\n   styleUrls: ['./classification-list.component.scss']\n })\n export class ClassificationListComponent implements OnInit, OnDestroy {\n-  selectedCategory = '';\n-  selectedId: string;\n-  selectionToImport = TaskanaType.CLASSIFICATIONS;\n-  requestInProgress = false;\n-  initialized = false;\n+  taskanaType = TaskanaType;\n+  requestInProgress = true;\n   inputValue: string;\n-  classifications: Classification[] = [];\n+  selectedCategory = '';\n+\n   @Select(ClassificationSelectors.classificationTypes) classificationTypes$: Observable<string[]>;\n   @Select(ClassificationSelectors.selectedClassificationType) classificationTypeSelected$: Observable<string>;\n   @Select(ClassificationSelectors.selectCategories) categories$: Observable<string[]>;\n+  @Select(ClassificationSelectors.classifications) classifications$: Observable<TreeNodeModel[]>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MDM1OQ==", "bodyText": "We should rename ClassificationDefinition to Classification. (Can also do this later)", "url": "https://github.com/Taskana/taskana/pull/1091#discussion_r441360359", "createdAt": "2020-06-17T08:08:00Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/components/classification-overview/classification-overview.component.ts", "diffHunk": "@@ -0,0 +1,57 @@\n+import { Component, OnDestroy, OnInit } from '@angular/core';\n+import { ActivatedRoute } from '@angular/router';\n+import { Observable, Subject } from 'rxjs';\n+import { Select, Store } from '@ngxs/store';\n+import { takeUntil } from 'rxjs/operators';\n+import { ClassificationSelectors } from '../../../shared/store/classification-store/classification.selectors';\n+import { ClassificationDefinition } from '../../../shared/models/classification-definition';\n+import { ACTION } from '../../../shared/models/action';\n+import { SelectClassification,\n+  SetActiveAction } from '../../../shared/store/classification-store/classification.actions';\n+\n+@Component({\n+  selector: 'app-classification-overview',\n+  templateUrl: './classification-overview.component.html',\n+  styleUrls: ['./classification-overview.component.scss']\n+})\n+export class ClassificationOverviewComponent implements OnInit, OnDestroy {\n+  showDetail = false;\n+  @Select(ClassificationSelectors.selectedClassification) selectedClassification$: Observable<ClassificationDefinition>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MzYyOQ==", "bodyText": "Should we filter undefined values out so that we don't have to do this check anymore?", "url": "https://github.com/Taskana/taskana/pull/1091#discussion_r441363629", "createdAt": "2020-06-17T08:12:59Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/components/tree/tree.component.ts", "diffHunk": "@@ -61,36 +68,56 @@ export class TaskanaTreeComponent implements OnInit, AfterViewChecked, OnDestroy\n \n   private filterTextOld: string;\n   private filterIconOld = '';\n-  private removedNodeIdSubscription: Subscription;\n+  private action: ACTION;\n+  private destroy$ = new Subject<void>();\n \n   constructor(\n-    private treeService: TreeService,\n     private elementRef: ElementRef,\n     private classificationsService: ClassificationsService,\n+    private location: Location,\n+    private store: Store,\n+    private notificationsService: NotificationService,\n   ) {\n   }\n \n   @HostListener('document:click', ['$event'])\n   onDocumentClick(event) {\n     if (this.checkValidElements(event) && this.tree.treeModel.getActiveNode()) {\n-      this.unSelectActiveNode();\n+      this.deselectActiveNode();\n     }\n   }\n \n   ngOnInit() {\n-    this.removedNodeIdSubscription = this.treeService.getRemovedNodeId().subscribe(value => {\n-      const removedNode = this.getNode(value);\n-      if (removedNode.parent) {\n-        removedNode.parent.collapse();\n+    this.activeAction$.pipe(takeUntil(this.destroy$)).subscribe(action => {\n+      this.action = action;\n+    });\n+\n+    this.selectedClassificationId$.pipe(takeUntil(this.destroy$)).subscribe(selectedClassificationId => {\n+      this.selectNodeId = typeof selectedClassificationId !== 'undefined' ? selectedClassificationId : undefined;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2NDI2OQ==", "bodyText": "Same as above: Should we filter undefined values out of the observable?", "url": "https://github.com/Taskana/taskana/pull/1091#discussion_r441364269", "createdAt": "2020-06-17T08:14:01Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/components/tree/tree.component.ts", "diffHunk": "@@ -61,36 +68,56 @@ export class TaskanaTreeComponent implements OnInit, AfterViewChecked, OnDestroy\n \n   private filterTextOld: string;\n   private filterIconOld = '';\n-  private removedNodeIdSubscription: Subscription;\n+  private action: ACTION;\n+  private destroy$ = new Subject<void>();\n \n   constructor(\n-    private treeService: TreeService,\n     private elementRef: ElementRef,\n     private classificationsService: ClassificationsService,\n+    private location: Location,\n+    private store: Store,\n+    private notificationsService: NotificationService,\n   ) {\n   }\n \n   @HostListener('document:click', ['$event'])\n   onDocumentClick(event) {\n     if (this.checkValidElements(event) && this.tree.treeModel.getActiveNode()) {\n-      this.unSelectActiveNode();\n+      this.deselectActiveNode();\n     }\n   }\n \n   ngOnInit() {\n-    this.removedNodeIdSubscription = this.treeService.getRemovedNodeId().subscribe(value => {\n-      const removedNode = this.getNode(value);\n-      if (removedNode.parent) {\n-        removedNode.parent.collapse();\n+    this.activeAction$.pipe(takeUntil(this.destroy$)).subscribe(action => {\n+      this.action = action;\n+    });\n+\n+    this.selectedClassificationId$.pipe(takeUntil(this.destroy$)).subscribe(selectedClassificationId => {\n+      this.selectNodeId = typeof selectedClassificationId !== 'undefined' ? selectedClassificationId : undefined;\n+      if (typeof this.tree.treeModel.getActiveNode() !== 'undefined') {\n+        if (this.tree.treeModel.getActiveNode().data.classificationId !== this.selectNodeId) {\n+          this.selectNode(this.selectNodeId);\n+        }\n+      }\n+    });\n+\n+    this.classifications$.pipe(takeUntil(this.destroy$)).subscribe(classifications => {\n+      if (typeof (classifications) !== 'undefined') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2NjEyNQ==", "bodyText": "should the action do this?", "url": "https://github.com/Taskana/taskana/pull/1091#discussion_r441366125", "createdAt": "2020-06-17T08:17:11Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/components/tree/tree.component.ts", "diffHunk": "@@ -103,11 +130,17 @@ export class TaskanaTreeComponent implements OnInit, AfterViewChecked, OnDestroy\n   }\n \n   onActivate(treeNode: any) {\n-    this.selectNodeIdChanged.emit(`${treeNode.node.data.classificationId}`);\n+    const id = treeNode.node.data.classificationId;\n+    this.selectNodeId = id;\n+    this.store.dispatch(new SelectClassification(id));\n+    this.location.go(this.location.path().replace(/(classifications).*/g, `classifications/(detail:${id})`));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2NjI1NA==", "bodyText": "should the action do this?", "url": "https://github.com/Taskana/taskana/pull/1091#discussion_r441366254", "createdAt": "2020-06-17T08:17:26Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/components/tree/tree.component.ts", "diffHunk": "@@ -103,11 +130,17 @@ export class TaskanaTreeComponent implements OnInit, AfterViewChecked, OnDestroy\n   }\n \n   onActivate(treeNode: any) {\n-    this.selectNodeIdChanged.emit(`${treeNode.node.data.classificationId}`);\n+    const id = treeNode.node.data.classificationId;\n+    this.selectNodeId = id;\n+    this.store.dispatch(new SelectClassification(id));\n+    this.location.go(this.location.path().replace(/(classifications).*/g, `classifications/(detail:${id})`));\n   }\n \n-  onDeactivate(treeNode: any) {\n-    this.selectNodeIdChanged.emit();\n+  onDeactivate(event: any) {\n+    if (!event.treeModel.activeNodes.length && this.action !== ACTION.CREATE) {\n+      this.store.dispatch(new DeselectClassification());\n+      this.location.go(this.location.path().replace(/(classifications).*/g, 'classifications'));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2Njg0NA==", "bodyText": "should the action do this?", "url": "https://github.com/Taskana/taskana/pull/1091#discussion_r441366844", "createdAt": "2020-06-17T08:18:19Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/components/tree/tree.component.ts", "diffHunk": "@@ -206,12 +224,15 @@ export class TaskanaTreeComponent implements OnInit, AfterViewChecked, OnDestroy\n   }\n \n   private getClassification(classificationId: string): Promise<ClassificationDefinition> {\n-    return this.classificationsService.getClassification(classificationId);\n+    return this.classificationsService.getClassification(classificationId).toPromise();\n   }\n \n-  private async updateClassification(classification: Classification) {\n-    await this.classificationsService.putClassification(classification._links.self.href, classification);\n-    this.refreshClassification.emit(classification.key);\n+  private updateClassification(classification: Classification) {\n+    this.store.dispatch(new UpdateClassification(classification));\n+    this.notificationsService.showToast(\n+      NOTIFICATION_TYPES.SUCCESS_ALERT_5,\n+      new Map<string, string>([['classificationKey', classification.key]])\n+    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2ODY3NA==", "bodyText": "What's the reason for always returning observables? I forgot", "url": "https://github.com/Taskana/taskana/pull/1091#discussion_r441368674", "createdAt": "2020-06-17T08:21:20Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/store/classification-store/classification.state.ts", "diffHunk": "@@ -1,46 +1,187 @@\n-import { Action, State, StateContext } from '@ngxs/store';\n-import { Observable } from 'rxjs';\n-import { tap } from 'rxjs/operators';\n-import { CategoriesResponse, ClassificationCategoriesService } from '../../services/classification-categories/classification-categories.service';\n-import { SetSelectedClassificationType } from './classification.actions';\n+import { Action, NgxsAfterBootstrap, State, StateContext } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { take, tap } from 'rxjs/operators';\n+import { CategoriesResponse,\n+  ClassificationCategoriesService } from '../../services/classification-categories/classification-categories.service';\n+import { CreateClassification,\n+  DeselectClassification,\n+  GetClassifications,\n+  RemoveSelectedClassification,\n+  RestoreSelectedClassification,\n+  SaveClassification,\n+  SelectClassification,\n+  SetActiveAction,\n+  SetSelectedClassificationType,\n+  UpdateClassification } from './classification.actions';\n+import { ClassificationsService } from '../../services/classifications/classifications.service';\n+import { ClassificationDefinition } from '../../models/classification-definition';\n+import { ACTION } from '../../models/action';\n \n class InitializeStore {\n   static readonly type = '[ClassificationState] Initializing state';\n }\n \n @State<ClassificationStateModel>({ name: 'classification' })\n-export class ClassificationState {\n-  constructor(private categoryService: ClassificationCategoriesService) {\n+export class ClassificationState implements NgxsAfterBootstrap {\n+  constructor(private categoryService: ClassificationCategoriesService,\n+    private classificationsService: ClassificationsService) {\n   }\n \n   @Action(SetSelectedClassificationType)\n-  setSelectedClassificationType(ctx: StateContext<ClassificationStateModel>, action: SetSelectedClassificationType): void {\n+  setSelectedClassificationType(ctx: StateContext<ClassificationStateModel>, action: SetSelectedClassificationType): Observable<null> {\n     const state: ClassificationStateModel = ctx.getState();\n     if (state.classificationTypes[action.selectedType]) {\n       ctx.patchState({ selectedClassificationType: action.selectedType });\n     }\n+    return of(null);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3MDEyOA==", "bodyText": "Why do we need this take(1) here? I thought ngxs will automatically subscribe and directly unsubscribe after the first value.", "url": "https://github.com/Taskana/taskana/pull/1091#discussion_r441370128", "createdAt": "2020-06-17T08:23:47Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/store/classification-store/classification.state.ts", "diffHunk": "@@ -1,46 +1,187 @@\n-import { Action, State, StateContext } from '@ngxs/store';\n-import { Observable } from 'rxjs';\n-import { tap } from 'rxjs/operators';\n-import { CategoriesResponse, ClassificationCategoriesService } from '../../services/classification-categories/classification-categories.service';\n-import { SetSelectedClassificationType } from './classification.actions';\n+import { Action, NgxsAfterBootstrap, State, StateContext } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { take, tap } from 'rxjs/operators';\n+import { CategoriesResponse,\n+  ClassificationCategoriesService } from '../../services/classification-categories/classification-categories.service';\n+import { CreateClassification,\n+  DeselectClassification,\n+  GetClassifications,\n+  RemoveSelectedClassification,\n+  RestoreSelectedClassification,\n+  SaveClassification,\n+  SelectClassification,\n+  SetActiveAction,\n+  SetSelectedClassificationType,\n+  UpdateClassification } from './classification.actions';\n+import { ClassificationsService } from '../../services/classifications/classifications.service';\n+import { ClassificationDefinition } from '../../models/classification-definition';\n+import { ACTION } from '../../models/action';\n \n class InitializeStore {\n   static readonly type = '[ClassificationState] Initializing state';\n }\n \n @State<ClassificationStateModel>({ name: 'classification' })\n-export class ClassificationState {\n-  constructor(private categoryService: ClassificationCategoriesService) {\n+export class ClassificationState implements NgxsAfterBootstrap {\n+  constructor(private categoryService: ClassificationCategoriesService,\n+    private classificationsService: ClassificationsService) {\n   }\n \n   @Action(SetSelectedClassificationType)\n-  setSelectedClassificationType(ctx: StateContext<ClassificationStateModel>, action: SetSelectedClassificationType): void {\n+  setSelectedClassificationType(ctx: StateContext<ClassificationStateModel>, action: SetSelectedClassificationType): Observable<null> {\n     const state: ClassificationStateModel = ctx.getState();\n     if (state.classificationTypes[action.selectedType]) {\n       ctx.patchState({ selectedClassificationType: action.selectedType });\n     }\n+    return of(null);\n+  }\n+\n+  @Action(SelectClassification)\n+  selectClassification(ctx: StateContext<ClassificationStateModel>, action: SelectClassification): Observable<any|null> {\n+    if (typeof action.classificationId !== 'undefined') {\n+      return this.classificationsService.getClassification(action.classificationId).pipe(take(1), tap(\n+        selectedClassification => {\n+          ctx.patchState({\n+            selectedClassification,\n+            action: null\n+          });\n+        }\n+      ));\n+    }\n+    return of(null);\n+  }\n+\n+  @Action(DeselectClassification)\n+  deselectClassification(ctx: StateContext<ClassificationStateModel>): Observable<null> {\n+    ctx.patchState({\n+      selectedClassification: undefined,\n+      action: null\n+    });\n+    return of(null);\n   }\n \n   @Action(InitializeStore)\n   initializeStore(ctx: StateContext<ClassificationStateModel>): Observable<any> {\n     return this.categoryService.getClassificationCategoriesByType().pipe(\n-      tap(classificationTypes => {\n+      take(1), tap(classificationTypes => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3MDc1MA==", "bodyText": "Why do we need a copy here?", "url": "https://github.com/Taskana/taskana/pull/1091#discussion_r441370750", "createdAt": "2020-06-17T08:24:51Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/store/classification-store/classification.state.ts", "diffHunk": "@@ -1,46 +1,187 @@\n-import { Action, State, StateContext } from '@ngxs/store';\n-import { Observable } from 'rxjs';\n-import { tap } from 'rxjs/operators';\n-import { CategoriesResponse, ClassificationCategoriesService } from '../../services/classification-categories/classification-categories.service';\n-import { SetSelectedClassificationType } from './classification.actions';\n+import { Action, NgxsAfterBootstrap, State, StateContext } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { take, tap } from 'rxjs/operators';\n+import { CategoriesResponse,\n+  ClassificationCategoriesService } from '../../services/classification-categories/classification-categories.service';\n+import { CreateClassification,\n+  DeselectClassification,\n+  GetClassifications,\n+  RemoveSelectedClassification,\n+  RestoreSelectedClassification,\n+  SaveClassification,\n+  SelectClassification,\n+  SetActiveAction,\n+  SetSelectedClassificationType,\n+  UpdateClassification } from './classification.actions';\n+import { ClassificationsService } from '../../services/classifications/classifications.service';\n+import { ClassificationDefinition } from '../../models/classification-definition';\n+import { ACTION } from '../../models/action';\n \n class InitializeStore {\n   static readonly type = '[ClassificationState] Initializing state';\n }\n \n @State<ClassificationStateModel>({ name: 'classification' })\n-export class ClassificationState {\n-  constructor(private categoryService: ClassificationCategoriesService) {\n+export class ClassificationState implements NgxsAfterBootstrap {\n+  constructor(private categoryService: ClassificationCategoriesService,\n+    private classificationsService: ClassificationsService) {\n   }\n \n   @Action(SetSelectedClassificationType)\n-  setSelectedClassificationType(ctx: StateContext<ClassificationStateModel>, action: SetSelectedClassificationType): void {\n+  setSelectedClassificationType(ctx: StateContext<ClassificationStateModel>, action: SetSelectedClassificationType): Observable<null> {\n     const state: ClassificationStateModel = ctx.getState();\n     if (state.classificationTypes[action.selectedType]) {\n       ctx.patchState({ selectedClassificationType: action.selectedType });\n     }\n+    return of(null);\n+  }\n+\n+  @Action(SelectClassification)\n+  selectClassification(ctx: StateContext<ClassificationStateModel>, action: SelectClassification): Observable<any|null> {\n+    if (typeof action.classificationId !== 'undefined') {\n+      return this.classificationsService.getClassification(action.classificationId).pipe(take(1), tap(\n+        selectedClassification => {\n+          ctx.patchState({\n+            selectedClassification,\n+            action: null\n+          });\n+        }\n+      ));\n+    }\n+    return of(null);\n+  }\n+\n+  @Action(DeselectClassification)\n+  deselectClassification(ctx: StateContext<ClassificationStateModel>): Observable<null> {\n+    ctx.patchState({\n+      selectedClassification: undefined,\n+      action: null\n+    });\n+    return of(null);\n   }\n \n   @Action(InitializeStore)\n   initializeStore(ctx: StateContext<ClassificationStateModel>): Observable<any> {\n     return this.categoryService.getClassificationCategoriesByType().pipe(\n-      tap(classificationTypes => {\n+      take(1), tap(classificationTypes => {\n         ctx.setState({\n           ...ctx.getState(),\n           classificationTypes,\n+          classifications: undefined,\n           selectedClassificationType: Object.keys(classificationTypes)[0],\n         });\n       }),\n     );\n   }\n \n+  @Action(GetClassifications)\n+  getClassifications(ctx: StateContext<ClassificationStateModel>): Observable<any> {\n+    const { selectedClassificationType } = ctx.getState();\n+    return this.classificationsService.getClassifications(selectedClassificationType).pipe(\n+      take(1), tap(classifications => {\n+        classifications.forEach(classification => {\n+          classification.children = !classification.children ? [] : classification.children;\n+        });\n+        ctx.patchState({\n+          classifications: [...classifications]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3MTg4OA==", "bodyText": "save this map function into a variable within this action so that the patchState does not look complicated?", "url": "https://github.com/Taskana/taskana/pull/1091#discussion_r441371888", "createdAt": "2020-06-17T08:26:43Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/store/classification-store/classification.state.ts", "diffHunk": "@@ -1,46 +1,187 @@\n-import { Action, State, StateContext } from '@ngxs/store';\n-import { Observable } from 'rxjs';\n-import { tap } from 'rxjs/operators';\n-import { CategoriesResponse, ClassificationCategoriesService } from '../../services/classification-categories/classification-categories.service';\n-import { SetSelectedClassificationType } from './classification.actions';\n+import { Action, NgxsAfterBootstrap, State, StateContext } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { take, tap } from 'rxjs/operators';\n+import { CategoriesResponse,\n+  ClassificationCategoriesService } from '../../services/classification-categories/classification-categories.service';\n+import { CreateClassification,\n+  DeselectClassification,\n+  GetClassifications,\n+  RemoveSelectedClassification,\n+  RestoreSelectedClassification,\n+  SaveClassification,\n+  SelectClassification,\n+  SetActiveAction,\n+  SetSelectedClassificationType,\n+  UpdateClassification } from './classification.actions';\n+import { ClassificationsService } from '../../services/classifications/classifications.service';\n+import { ClassificationDefinition } from '../../models/classification-definition';\n+import { ACTION } from '../../models/action';\n \n class InitializeStore {\n   static readonly type = '[ClassificationState] Initializing state';\n }\n \n @State<ClassificationStateModel>({ name: 'classification' })\n-export class ClassificationState {\n-  constructor(private categoryService: ClassificationCategoriesService) {\n+export class ClassificationState implements NgxsAfterBootstrap {\n+  constructor(private categoryService: ClassificationCategoriesService,\n+    private classificationsService: ClassificationsService) {\n   }\n \n   @Action(SetSelectedClassificationType)\n-  setSelectedClassificationType(ctx: StateContext<ClassificationStateModel>, action: SetSelectedClassificationType): void {\n+  setSelectedClassificationType(ctx: StateContext<ClassificationStateModel>, action: SetSelectedClassificationType): Observable<null> {\n     const state: ClassificationStateModel = ctx.getState();\n     if (state.classificationTypes[action.selectedType]) {\n       ctx.patchState({ selectedClassificationType: action.selectedType });\n     }\n+    return of(null);\n+  }\n+\n+  @Action(SelectClassification)\n+  selectClassification(ctx: StateContext<ClassificationStateModel>, action: SelectClassification): Observable<any|null> {\n+    if (typeof action.classificationId !== 'undefined') {\n+      return this.classificationsService.getClassification(action.classificationId).pipe(take(1), tap(\n+        selectedClassification => {\n+          ctx.patchState({\n+            selectedClassification,\n+            action: null\n+          });\n+        }\n+      ));\n+    }\n+    return of(null);\n+  }\n+\n+  @Action(DeselectClassification)\n+  deselectClassification(ctx: StateContext<ClassificationStateModel>): Observable<null> {\n+    ctx.patchState({\n+      selectedClassification: undefined,\n+      action: null\n+    });\n+    return of(null);\n   }\n \n   @Action(InitializeStore)\n   initializeStore(ctx: StateContext<ClassificationStateModel>): Observable<any> {\n     return this.categoryService.getClassificationCategoriesByType().pipe(\n-      tap(classificationTypes => {\n+      take(1), tap(classificationTypes => {\n         ctx.setState({\n           ...ctx.getState(),\n           classificationTypes,\n+          classifications: undefined,\n           selectedClassificationType: Object.keys(classificationTypes)[0],\n         });\n       }),\n     );\n   }\n \n+  @Action(GetClassifications)\n+  getClassifications(ctx: StateContext<ClassificationStateModel>): Observable<any> {\n+    const { selectedClassificationType } = ctx.getState();\n+    return this.classificationsService.getClassifications(selectedClassificationType).pipe(\n+      take(1), tap(classifications => {\n+        classifications.forEach(classification => {\n+          classification.children = !classification.children ? [] : classification.children;\n+        });\n+        ctx.patchState({\n+          classifications: [...classifications]\n+        });\n+      }),\n+    );\n+  }\n+\n+  @Action(CreateClassification)\n+  createClassification(ctx: StateContext<ClassificationStateModel>, action: CreateClassification): Observable<any> {\n+    return this.classificationsService.postClassification(action.classification).pipe(\n+      take(1), tap(classification => {\n+        ctx.patchState(\n+          {\n+            classifications: [...ctx.getState().classifications, classification],\n+            selectedClassification: classification,\n+            action: null\n+          }\n+        );\n+      })\n+    );\n+  }\n+\n+  @Action(SaveClassification)\n+  saveClassification(ctx: StateContext<ClassificationStateModel>, action: SaveClassification): Observable<any> {\n+    return this.classificationsService.putClassification(action.classification).pipe(\n+      take(1), tap(savedClassification => {\n+        ctx.patchState({\n+          classifications: ctx.getState().classifications.map(currentClassification => {\n+            if (currentClassification.classificationId === savedClassification.classificationId) {\n+              return savedClassification;\n+            }\n+            return currentClassification;\n+          }),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3MjkyMQ==", "bodyText": "Do we really need this action? Should this be refactored in the future?", "url": "https://github.com/Taskana/taskana/pull/1091#discussion_r441372921", "createdAt": "2020-06-17T08:28:23Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/store/classification-store/classification.state.ts", "diffHunk": "@@ -1,46 +1,187 @@\n-import { Action, State, StateContext } from '@ngxs/store';\n-import { Observable } from 'rxjs';\n-import { tap } from 'rxjs/operators';\n-import { CategoriesResponse, ClassificationCategoriesService } from '../../services/classification-categories/classification-categories.service';\n-import { SetSelectedClassificationType } from './classification.actions';\n+import { Action, NgxsAfterBootstrap, State, StateContext } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { take, tap } from 'rxjs/operators';\n+import { CategoriesResponse,\n+  ClassificationCategoriesService } from '../../services/classification-categories/classification-categories.service';\n+import { CreateClassification,\n+  DeselectClassification,\n+  GetClassifications,\n+  RemoveSelectedClassification,\n+  RestoreSelectedClassification,\n+  SaveClassification,\n+  SelectClassification,\n+  SetActiveAction,\n+  SetSelectedClassificationType,\n+  UpdateClassification } from './classification.actions';\n+import { ClassificationsService } from '../../services/classifications/classifications.service';\n+import { ClassificationDefinition } from '../../models/classification-definition';\n+import { ACTION } from '../../models/action';\n \n class InitializeStore {\n   static readonly type = '[ClassificationState] Initializing state';\n }\n \n @State<ClassificationStateModel>({ name: 'classification' })\n-export class ClassificationState {\n-  constructor(private categoryService: ClassificationCategoriesService) {\n+export class ClassificationState implements NgxsAfterBootstrap {\n+  constructor(private categoryService: ClassificationCategoriesService,\n+    private classificationsService: ClassificationsService) {\n   }\n \n   @Action(SetSelectedClassificationType)\n-  setSelectedClassificationType(ctx: StateContext<ClassificationStateModel>, action: SetSelectedClassificationType): void {\n+  setSelectedClassificationType(ctx: StateContext<ClassificationStateModel>, action: SetSelectedClassificationType): Observable<null> {\n     const state: ClassificationStateModel = ctx.getState();\n     if (state.classificationTypes[action.selectedType]) {\n       ctx.patchState({ selectedClassificationType: action.selectedType });\n     }\n+    return of(null);\n+  }\n+\n+  @Action(SelectClassification)\n+  selectClassification(ctx: StateContext<ClassificationStateModel>, action: SelectClassification): Observable<any|null> {\n+    if (typeof action.classificationId !== 'undefined') {\n+      return this.classificationsService.getClassification(action.classificationId).pipe(take(1), tap(\n+        selectedClassification => {\n+          ctx.patchState({\n+            selectedClassification,\n+            action: null\n+          });\n+        }\n+      ));\n+    }\n+    return of(null);\n+  }\n+\n+  @Action(DeselectClassification)\n+  deselectClassification(ctx: StateContext<ClassificationStateModel>): Observable<null> {\n+    ctx.patchState({\n+      selectedClassification: undefined,\n+      action: null\n+    });\n+    return of(null);\n   }\n \n   @Action(InitializeStore)\n   initializeStore(ctx: StateContext<ClassificationStateModel>): Observable<any> {\n     return this.categoryService.getClassificationCategoriesByType().pipe(\n-      tap(classificationTypes => {\n+      take(1), tap(classificationTypes => {\n         ctx.setState({\n           ...ctx.getState(),\n           classificationTypes,\n+          classifications: undefined,\n           selectedClassificationType: Object.keys(classificationTypes)[0],\n         });\n       }),\n     );\n   }\n \n+  @Action(GetClassifications)\n+  getClassifications(ctx: StateContext<ClassificationStateModel>): Observable<any> {\n+    const { selectedClassificationType } = ctx.getState();\n+    return this.classificationsService.getClassifications(selectedClassificationType).pipe(\n+      take(1), tap(classifications => {\n+        classifications.forEach(classification => {\n+          classification.children = !classification.children ? [] : classification.children;\n+        });\n+        ctx.patchState({\n+          classifications: [...classifications]\n+        });\n+      }),\n+    );\n+  }\n+\n+  @Action(CreateClassification)\n+  createClassification(ctx: StateContext<ClassificationStateModel>, action: CreateClassification): Observable<any> {\n+    return this.classificationsService.postClassification(action.classification).pipe(\n+      take(1), tap(classification => {\n+        ctx.patchState(\n+          {\n+            classifications: [...ctx.getState().classifications, classification],\n+            selectedClassification: classification,\n+            action: null\n+          }\n+        );\n+      })\n+    );\n+  }\n+\n+  @Action(SaveClassification)\n+  saveClassification(ctx: StateContext<ClassificationStateModel>, action: SaveClassification): Observable<any> {\n+    return this.classificationsService.putClassification(action.classification).pipe(\n+      take(1), tap(savedClassification => {\n+        ctx.patchState({\n+          classifications: ctx.getState().classifications.map(currentClassification => {\n+            if (currentClassification.classificationId === savedClassification.classificationId) {\n+              return savedClassification;\n+            }\n+            return currentClassification;\n+          }),\n+          selectedClassification: savedClassification\n+        });\n+      }), tap(() => this.classificationsService.getClassifications(\n+        ctx.getState().selectedClassificationType\n+      ).subscribe(\n+        classifications => {\n+          ctx.patchState({\n+            classifications\n+          });\n+        }\n+      ))\n+    );\n+  }\n+\n+  @Action(RestoreSelectedClassification)\n+  restoreSelectedClassification(ctx: StateContext<ClassificationStateModel>, action: RestoreSelectedClassification): Observable<any> {\n+    return this.classificationsService.getClassification(action.classificationId).pipe(\n+      take(1), tap(selectedClassification => {\n+        ctx.patchState({ selectedClassification });\n+      })\n+    );\n+  }\n+\n+  @Action(SetActiveAction)\n+  setActiveAction(ctx: StateContext<ClassificationStateModel>, action: SetActiveAction): Observable<null> {\n+    if (action.action === ACTION.CREATE) {\n+      ctx.patchState({ selectedClassification: new ClassificationDefinition(), action: action.action });\n+    } else {\n+      ctx.patchState({ action: action.action });\n+    }\n+    return of(null);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576"}, "originalPosition": 158}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjYxNjY1", "url": "https://github.com/Taskana/taskana/pull/1091#pullrequestreview-432261665", "createdAt": "2020-06-17T10:19:33Z", "commit": {"oid": "19dc969600b9518c8731c179ee2a3825365e2576"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4490, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}