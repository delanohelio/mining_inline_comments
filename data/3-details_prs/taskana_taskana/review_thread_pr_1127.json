{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NTMyODg2", "number": 1127, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNToyNjowMFrOEGZrKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTozMjo0NVrOEGZ2Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTQ3NTYxOnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/components/classification-details/classification-details.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNToyNjowMFrOGlLKmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMTo1ODo1N1rOGmSTWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYzMzQzMg==", "bodyText": "I'm missing a takeUntil(this.destroy$)", "url": "https://github.com/Taskana/taskana/pull/1127#discussion_r441633432", "createdAt": "2020-06-17T15:26:00Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/components/classification-details/classification-details.component.ts", "diffHunk": "@@ -80,7 +78,9 @@ export class ClassificationDetailsComponent implements OnInit, OnDestroy {\n     this.action$.pipe(takeUntil(this.destroy$)).subscribe(data => {\n       this.action = data;\n       if (this.action === ACTION.CREATE) {\n-        this.initClassificationOnCreation();\n+        this.selectedClassification$.pipe(take(1)).subscribe(initialClassification => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8742a3efd53adb38e8e6f83cb15cf8295f751e7a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc5ODkzNw==", "bodyText": "this is not needed since there is take(1)", "url": "https://github.com/Taskana/taskana/pull/1127#discussion_r442798937", "createdAt": "2020-06-19T11:58:57Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/classification-details/classification-details.component.ts", "diffHunk": "@@ -80,7 +78,9 @@ export class ClassificationDetailsComponent implements OnInit, OnDestroy {\n     this.action$.pipe(takeUntil(this.destroy$)).subscribe(data => {\n       this.action = data;\n       if (this.action === ACTION.CREATE) {\n-        this.initClassificationOnCreation();\n+        this.selectedClassification$.pipe(take(1)).subscribe(initialClassification => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYzMzQzMg=="}, "originalCommit": {"oid": "8742a3efd53adb38e8e6f83cb15cf8295f751e7a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTQ4ODg2OnYy", "diffSide": "RIGHT", "path": "web/src/app/shared/components/tree/tree.component.ts", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNToyODo1NlrOGlLSug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjozNjozMFrOGmzjLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYzNTUxNA==", "bodyText": "why are you not using classificationCopy$?", "url": "https://github.com/Taskana/taskana/pull/1127#discussion_r441635514", "createdAt": "2020-06-17T15:28:56Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/components/tree/tree.component.ts", "diffHunk": "@@ -92,19 +87,25 @@ export class TaskanaTreeComponent implements OnInit, AfterViewChecked, OnDestroy\n       this.action = action;\n     });\n \n-    this.selectedClassificationId$.pipe(takeUntil(this.destroy$)).subscribe(selectedClassificationId => {\n-      this.selectNodeId = typeof selectedClassificationId !== 'undefined' ? selectedClassificationId : undefined;\n-      if (typeof this.tree.treeModel.getActiveNode() !== 'undefined') {\n-        if (this.tree.treeModel.getActiveNode().data.classificationId !== this.selectNodeId) {\n-          this.selectNode(this.selectNodeId);\n+    const classificationCopy$: Observable<TreeNodeModel[]> = this.classifications$.pipe(\n+      filter(classifications => typeof (classifications) !== 'undefined'),\n+      tap(classifications => {\n+        this.classifications = classifications.map(this.classificationsDeepCopy.bind(this));\n+      })\n+    );\n+\n+    combineLatest(this.selectedClassificationId$, classificationCopy$).pipe(takeUntil(this.destroy$))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8742a3efd53adb38e8e6f83cb15cf8295f751e7a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc5OTAxMg==", "bodyText": "I am using classificationCopy$, see the code snippet you marked", "url": "https://github.com/Taskana/taskana/pull/1127#discussion_r442799012", "createdAt": "2020-06-19T11:59:09Z", "author": {"login": "sofie29"}, "path": "web/src/app/shared/components/tree/tree.component.ts", "diffHunk": "@@ -92,19 +87,25 @@ export class TaskanaTreeComponent implements OnInit, AfterViewChecked, OnDestroy\n       this.action = action;\n     });\n \n-    this.selectedClassificationId$.pipe(takeUntil(this.destroy$)).subscribe(selectedClassificationId => {\n-      this.selectNodeId = typeof selectedClassificationId !== 'undefined' ? selectedClassificationId : undefined;\n-      if (typeof this.tree.treeModel.getActiveNode() !== 'undefined') {\n-        if (this.tree.treeModel.getActiveNode().data.classificationId !== this.selectNodeId) {\n-          this.selectNode(this.selectNodeId);\n+    const classificationCopy$: Observable<TreeNodeModel[]> = this.classifications$.pipe(\n+      filter(classifications => typeof (classifications) !== 'undefined'),\n+      tap(classifications => {\n+        this.classifications = classifications.map(this.classificationsDeepCopy.bind(this));\n+      })\n+    );\n+\n+    combineLatest(this.selectedClassificationId$, classificationCopy$).pipe(takeUntil(this.destroy$))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYzNTUxNA=="}, "originalCommit": {"oid": "8742a3efd53adb38e8e6f83cb15cf8295f751e7a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0Mjg0Mg==", "bodyText": "I only see the selectedClassificationId in the subscribe statement. Or am I missing something?", "url": "https://github.com/Taskana/taskana/pull/1127#discussion_r443142842", "createdAt": "2020-06-20T16:28:20Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/components/tree/tree.component.ts", "diffHunk": "@@ -92,19 +87,25 @@ export class TaskanaTreeComponent implements OnInit, AfterViewChecked, OnDestroy\n       this.action = action;\n     });\n \n-    this.selectedClassificationId$.pipe(takeUntil(this.destroy$)).subscribe(selectedClassificationId => {\n-      this.selectNodeId = typeof selectedClassificationId !== 'undefined' ? selectedClassificationId : undefined;\n-      if (typeof this.tree.treeModel.getActiveNode() !== 'undefined') {\n-        if (this.tree.treeModel.getActiveNode().data.classificationId !== this.selectNodeId) {\n-          this.selectNode(this.selectNodeId);\n+    const classificationCopy$: Observable<TreeNodeModel[]> = this.classifications$.pipe(\n+      filter(classifications => typeof (classifications) !== 'undefined'),\n+      tap(classifications => {\n+        this.classifications = classifications.map(this.classificationsDeepCopy.bind(this));\n+      })\n+    );\n+\n+    combineLatest(this.selectedClassificationId$, classificationCopy$).pipe(takeUntil(this.destroy$))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYzNTUxNA=="}, "originalCommit": {"oid": "8742a3efd53adb38e8e6f83cb15cf8295f751e7a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0MzY2MA==", "bodyText": "Ah I understand. The classifications are set with \"tap\" in the classificationCopy$ (line 93), that is why I don't need the classifications here...", "url": "https://github.com/Taskana/taskana/pull/1127#discussion_r443343660", "createdAt": "2020-06-22T06:36:30Z", "author": {"login": "sofie29"}, "path": "web/src/app/shared/components/tree/tree.component.ts", "diffHunk": "@@ -92,19 +87,25 @@ export class TaskanaTreeComponent implements OnInit, AfterViewChecked, OnDestroy\n       this.action = action;\n     });\n \n-    this.selectedClassificationId$.pipe(takeUntil(this.destroy$)).subscribe(selectedClassificationId => {\n-      this.selectNodeId = typeof selectedClassificationId !== 'undefined' ? selectedClassificationId : undefined;\n-      if (typeof this.tree.treeModel.getActiveNode() !== 'undefined') {\n-        if (this.tree.treeModel.getActiveNode().data.classificationId !== this.selectNodeId) {\n-          this.selectNode(this.selectNodeId);\n+    const classificationCopy$: Observable<TreeNodeModel[]> = this.classifications$.pipe(\n+      filter(classifications => typeof (classifications) !== 'undefined'),\n+      tap(classifications => {\n+        this.classifications = classifications.map(this.classificationsDeepCopy.bind(this));\n+      })\n+    );\n+\n+    combineLatest(this.selectedClassificationId$, classificationCopy$).pipe(takeUntil(this.destroy$))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYzNTUxNA=="}, "originalCommit": {"oid": "8742a3efd53adb38e8e6f83cb15cf8295f751e7a"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTUwNDA3OnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/components/classification-details/classification-details.component.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTozMjo0NVrOGlLclg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNjoyNzo0M1rOGmnSjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYzODAzOA==", "bodyText": "why are we copying the classification?", "url": "https://github.com/Taskana/taskana/pull/1127#discussion_r441638038", "createdAt": "2020-06-17T15:32:45Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/components/classification-details/classification-details.component.ts", "diffHunk": "@@ -80,7 +78,9 @@ export class ClassificationDetailsComponent implements OnInit, OnDestroy {\n     this.action$.pipe(takeUntil(this.destroy$)).subscribe(data => {\n       this.action = data;\n       if (this.action === ACTION.CREATE) {\n-        this.initClassificationOnCreation();\n+        this.selectedClassification$.pipe(take(1)).subscribe(initialClassification => {\n+          this.classification = { ...initialClassification };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8742a3efd53adb38e8e6f83cb15cf8295f751e7a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc5OTEyMw==", "bodyText": "Because the initialClassication from store is read only and we want to edit it while creating this new classification", "url": "https://github.com/Taskana/taskana/pull/1127#discussion_r442799123", "createdAt": "2020-06-19T11:59:25Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/classification-details/classification-details.component.ts", "diffHunk": "@@ -80,7 +78,9 @@ export class ClassificationDetailsComponent implements OnInit, OnDestroy {\n     this.action$.pipe(takeUntil(this.destroy$)).subscribe(data => {\n       this.action = data;\n       if (this.action === ACTION.CREATE) {\n-        this.initClassificationOnCreation();\n+        this.selectedClassification$.pipe(take(1)).subscribe(initialClassification => {\n+          this.classification = { ...initialClassification };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYzODAzOA=="}, "originalCommit": {"oid": "8742a3efd53adb38e8e6f83cb15cf8295f751e7a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0Mjc5OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Taskana/taskana/pull/1127#discussion_r443142798", "createdAt": "2020-06-20T16:27:43Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/components/classification-details/classification-details.component.ts", "diffHunk": "@@ -80,7 +78,9 @@ export class ClassificationDetailsComponent implements OnInit, OnDestroy {\n     this.action$.pipe(takeUntil(this.destroy$)).subscribe(data => {\n       this.action = data;\n       if (this.action === ACTION.CREATE) {\n-        this.initClassificationOnCreation();\n+        this.selectedClassification$.pipe(take(1)).subscribe(initialClassification => {\n+          this.classification = { ...initialClassification };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYzODAzOA=="}, "originalCommit": {"oid": "8742a3efd53adb38e8e6f83cb15cf8295f751e7a"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4234, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}