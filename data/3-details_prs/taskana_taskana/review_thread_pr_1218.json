{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1OTQ2MjA5", "number": 1218, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo1Njo1M1rOEXMpMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo1NjowM1rOEXOM8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzU5ODU3OnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo1Njo1M1rOG-2hSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDozNjo0NVrOG-6_Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1ODE1Mw==", "bodyText": "In the Jest documentation, 'test' is used instead of 'it'. Why do you use 'it'?", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468558153", "createdAt": "2020-08-11T12:56:53Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyMTg0MQ==", "bodyText": "https://github.com/facebook/jest/blob/master/examples/angular/app.component.spec.ts 'it' is still used for tests in this example test", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468621841", "createdAt": "2020-08-11T14:23:47Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1ODE1Mw=="}, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzMTMxOA==", "bodyText": "test and it behave the same, they are aliases: https://jestjs.io/docs/en/api.html#testname-fn-timeout\ntest(name, fn, timeout)\nAlso under the alias: it(name, fn, timeout)", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468631318", "createdAt": "2020-08-11T14:36:45Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1ODE1Mw=="}, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzcwNTI5OnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoyMjo1NVrOG-3iUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDoyNToxMlrOG-6ebw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3NDgwMQ==", "bodyText": "According to the variable name, did you intend to test whether the attribute 'groups' is available in the accessItemsManagement state?", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468574801", "createdAt": "2020-08-11T13:22:55Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);\n+    const engineConfigs = store.selectSnapshot((state) => state.engineConfiguration);\n+    expect(engineConfigs).toBeTruthy();\n+    const groups = store.selectSnapshot((state) => state.accessItemsManagement);\n+    expect(groups).toBeTruthy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyMjk1OQ==", "bodyText": "yes, before the component is init, there are no groups or engineConfigs attributes", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468622959", "createdAt": "2020-08-11T14:25:12Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);\n+    const engineConfigs = store.selectSnapshot((state) => state.engineConfiguration);\n+    expect(engineConfigs).toBeTruthy();\n+    const groups = store.selectSnapshot((state) => state.accessItemsManagement);\n+    expect(groups).toBeTruthy();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3NDgwMQ=="}, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzczNDMwOnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoyOTozOVrOG-30cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMDoyNzoyN1rOHAFmzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3OTQ0Mg==", "bodyText": "Do we need an 'async' or 'done' to treat asynchronous code here?", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468579442", "createdAt": "2020-08-11T13:29:39Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyMzkxOA==", "bodyText": "when the code is promise-based, async should be used. When no promise is available, done() needs to be called, usually for subscription. So I'd use done() in this case.", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468623918", "createdAt": "2020-08-11T14:26:33Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3OTQ0Mg=="}, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg1MzkwMw==", "bodyText": "I thought you wanted to insert done(), didn't you?", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r469853903", "createdAt": "2020-08-13T10:27:27Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3OTQ0Mg=="}, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzc4NDk3OnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo0MToyMlrOG-4Uaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDoyNjo0MVrOG-6ilQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NzYyNw==", "bodyText": "The method is called 'onSelectAccessId' instead of 'onSelectedAccessId'. I was confused because there were no results when searching for 'onSelectedAccessId'. It is okay but it would be great when you change the name to prevent confusions in the future \ud83d\ude05", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468587627", "createdAt": "2020-08-11T13:41:22Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);\n+    const engineConfigs = store.selectSnapshot((state) => state.engineConfiguration);\n+    expect(engineConfigs).toBeTruthy();\n+    const groups = store.selectSnapshot((state) => state.accessItemsManagement);\n+    expect(groups).toBeTruthy();\n+  });\n+\n+  it('onSelectedAccessId is called correctly', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyNDAyMQ==", "bodyText": "will be changed", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468624021", "createdAt": "2020-08-11T14:26:41Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);\n+    const engineConfigs = store.selectSnapshot((state) => state.engineConfiguration);\n+    expect(engineConfigs).toBeTruthy();\n+    const groups = store.selectSnapshot((state) => state.accessItemsManagement);\n+    expect(groups).toBeTruthy();\n+  });\n+\n+  it('onSelectedAccessId is called correctly', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NzYyNw=="}, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzg1Mzk1OnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo1NjowM1rOG-4_PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTowMDozNFrOG_YWfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5ODU4OA==", "bodyText": "After reading the documentation, I thought async / await and done() are alternatives. Is one of them not sufficient?", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468598588", "createdAt": "2020-08-11T13:56:03Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);\n+    const engineConfigs = store.selectSnapshot((state) => state.engineConfiguration);\n+    expect(engineConfigs).toBeTruthy();\n+    const groups = store.selectSnapshot((state) => state.accessItemsManagement);\n+    expect(groups).toBeTruthy();\n+  });\n+\n+  it('onSelectedAccessId is called correctly', () => {\n+    const selectedAccessId = { accessId: '', name: '' };\n+    app.onSelectAccessId(selectedAccessId);\n+    const groups = store.selectSnapshot((state) => state.accessItemsManagement);\n+    expect(selectedAccessId).not.toBeNull();\n+    expect(groups).not.toBeNull();\n+    expect(app.accessItemsForm).not.toBeNull();\n+\n+    app.onSelectAccessId(null);\n+    expect(app.accessItemsForm).toBeNull();\n+  });\n+\n+  it('GetAccessItems action is called in searchForAccessItemsWorkbaskets', async((done) => {\n+    app.searchForAccessItemsWorkbaskets();\n+    actions$.pipe(ofActionDispatched(GetAccessItems)).subscribe(async (action) => {\n+      await expect(action).toBeTruthy();\n+      done();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyNDQwNg==", "bodyText": "will look into it", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468624406", "createdAt": "2020-08-11T14:27:13Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);\n+    const engineConfigs = store.selectSnapshot((state) => state.engineConfiguration);\n+    expect(engineConfigs).toBeTruthy();\n+    const groups = store.selectSnapshot((state) => state.accessItemsManagement);\n+    expect(groups).toBeTruthy();\n+  });\n+\n+  it('onSelectedAccessId is called correctly', () => {\n+    const selectedAccessId = { accessId: '', name: '' };\n+    app.onSelectAccessId(selectedAccessId);\n+    const groups = store.selectSnapshot((state) => state.accessItemsManagement);\n+    expect(selectedAccessId).not.toBeNull();\n+    expect(groups).not.toBeNull();\n+    expect(app.accessItemsForm).not.toBeNull();\n+\n+    app.onSelectAccessId(null);\n+    expect(app.accessItemsForm).toBeNull();\n+  });\n+\n+  it('GetAccessItems action is called in searchForAccessItemsWorkbaskets', async((done) => {\n+    app.searchForAccessItemsWorkbaskets();\n+    actions$.pipe(ofActionDispatched(GetAccessItems)).subscribe(async (action) => {\n+      await expect(action).toBeTruthy();\n+      done();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5ODU4OA=="}, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExMjQ0Ng==", "bodyText": "first async((done) is needed, then the 2nd async await isn't needed if done() is called already, code will be updated", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r469112446", "createdAt": "2020-08-12T09:00:34Z", "author": {"login": "cnguyen-de"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);\n+    const engineConfigs = store.selectSnapshot((state) => state.engineConfiguration);\n+    expect(engineConfigs).toBeTruthy();\n+    const groups = store.selectSnapshot((state) => state.accessItemsManagement);\n+    expect(groups).toBeTruthy();\n+  });\n+\n+  it('onSelectedAccessId is called correctly', () => {\n+    const selectedAccessId = { accessId: '', name: '' };\n+    app.onSelectAccessId(selectedAccessId);\n+    const groups = store.selectSnapshot((state) => state.accessItemsManagement);\n+    expect(selectedAccessId).not.toBeNull();\n+    expect(groups).not.toBeNull();\n+    expect(app.accessItemsForm).not.toBeNull();\n+\n+    app.onSelectAccessId(null);\n+    expect(app.accessItemsForm).toBeNull();\n+  });\n+\n+  it('GetAccessItems action is called in searchForAccessItemsWorkbaskets', async((done) => {\n+    app.searchForAccessItemsWorkbaskets();\n+    actions$.pipe(ofActionDispatched(GetAccessItems)).subscribe(async (action) => {\n+      await expect(action).toBeTruthy();\n+      done();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5ODU4OA=="}, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4149, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}