{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4ODU1MzYw", "number": 1175, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTozMjozN1rOERaNiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTozNjoyMVrOERaRtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjkwNjk3OnYy", "diffSide": "RIGHT", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnTaskCancellationAccTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTozMjozN1rOG2GkEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjo0MTo0N1rOG4qqdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4MzgyNg==", "bodyText": "I don't know what the good practice is. I personally prefer to separate action from assertion to make it more readable. By maybe Sonar complains?\nWhat do you think?", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r459383826", "createdAt": "2020-07-23T11:32:37Z", "author": {"login": "holgerhagen"}, "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnTaskCancellationAccTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnTaskCancellationAccTest extends AbstractAccTest {\n+\n+  private final TaskService taskService = taskanaEngine.getTaskService();\n+  private final SimpleHistoryServiceImpl historyService = getHistoryService();\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_CreateCancelledHistoryEvent_When_TaskIsCancelled() throws Exception {\n+\n+    final String taskId = \"TKI:000000000000000000000000000000000001\";\n+\n+    List<HistoryEventImpl> listEvents = historyService.createHistoryQuery().taskIdIn(taskId).list();\n+\n+    assertThat(listEvents).isEmpty();\n+\n+    assertThat(taskService.getTask(taskId).getState()).isEqualTo(TaskState.CLAIMED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "287fec9438973926ba3337697cee2856f2288b77"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NDUzMg==", "bodyText": "BTW: do we need the task to be in state CLAIMED to cancel it?", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r459384532", "createdAt": "2020-07-23T11:34:20Z", "author": {"login": "holgerhagen"}, "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnTaskCancellationAccTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnTaskCancellationAccTest extends AbstractAccTest {\n+\n+  private final TaskService taskService = taskanaEngine.getTaskService();\n+  private final SimpleHistoryServiceImpl historyService = getHistoryService();\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_CreateCancelledHistoryEvent_When_TaskIsCancelled() throws Exception {\n+\n+    final String taskId = \"TKI:000000000000000000000000000000000001\";\n+\n+    List<HistoryEventImpl> listEvents = historyService.createHistoryQuery().taskIdIn(taskId).list();\n+\n+    assertThat(listEvents).isEmpty();\n+\n+    assertThat(taskService.getTask(taskId).getState()).isEqualTo(TaskState.CLAIMED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4MzgyNg=="}, "originalCommit": {"oid": "287fec9438973926ba3337697cee2856f2288b77"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxMzA0Nw==", "bodyText": "Sonar is not complaining. Personally I think as long as the assert fits into 1 LOC the readability should be granted. For me this is similar to returning something from a method. You can instantly return something or declare it as a variable before returning. Sonar tends to not like creating extra variables before returning. What do you think @mustaphazorgati ?\nNo the task state can be anything as long as it is not an end state. I could probably remove the check for the task state before terminating the task if you want me to.", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r459413047", "createdAt": "2020-07-23T12:32:09Z", "author": {"login": "gitgoodjhe"}, "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnTaskCancellationAccTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnTaskCancellationAccTest extends AbstractAccTest {\n+\n+  private final TaskService taskService = taskanaEngine.getTaskService();\n+  private final SimpleHistoryServiceImpl historyService = getHistoryService();\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_CreateCancelledHistoryEvent_When_TaskIsCancelled() throws Exception {\n+\n+    final String taskId = \"TKI:000000000000000000000000000000000001\";\n+\n+    List<HistoryEventImpl> listEvents = historyService.createHistoryQuery().taskIdIn(taskId).list();\n+\n+    assertThat(listEvents).isEmpty();\n+\n+    assertThat(taskService.getTask(taskId).getState()).isEqualTo(TaskState.CLAIMED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4MzgyNg=="}, "originalCommit": {"oid": "287fec9438973926ba3337697cee2856f2288b77"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MjQzOQ==", "bodyText": "Maybe we should discuss it in the CoP meeting?\nRegarding the status: in this case we do not neet the claim and the check for it. But we should have tests for both cancel operations: one from ready state and one from claimed state.", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r462072439", "createdAt": "2020-07-29T06:41:47Z", "author": {"login": "holgerhagen"}, "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnTaskCancellationAccTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnTaskCancellationAccTest extends AbstractAccTest {\n+\n+  private final TaskService taskService = taskanaEngine.getTaskService();\n+  private final SimpleHistoryServiceImpl historyService = getHistoryService();\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_CreateCancelledHistoryEvent_When_TaskIsCancelled() throws Exception {\n+\n+    final String taskId = \"TKI:000000000000000000000000000000000001\";\n+\n+    List<HistoryEventImpl> listEvents = historyService.createHistoryQuery().taskIdIn(taskId).list();\n+\n+    assertThat(listEvents).isEmpty();\n+\n+    assertThat(taskService.getTask(taskId).getState()).isEqualTo(TaskState.CLAIMED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4MzgyNg=="}, "originalCommit": {"oid": "287fec9438973926ba3337697cee2856f2288b77"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjkxMzY5OnYy", "diffSide": "RIGHT", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnTaskTerminationAccTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTozNTowN1rOG2GoIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTozNTowN1rOG2GoIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NDg2NA==", "bodyText": "see above", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r459384864", "createdAt": "2020-07-23T11:35:07Z", "author": {"login": "holgerhagen"}, "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnTaskTerminationAccTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnTaskTerminationAccTest extends AbstractAccTest {\n+\n+  private final TaskService taskService = taskanaEngine.getTaskService();\n+  private final SimpleHistoryServiceImpl historyService = getHistoryService();\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_CreateTerminatedHistoryEvent_When_TaskIsTerminated() throws Exception {\n+\n+    final String taskId = \"TKI:000000000000000000000000000000000001\";\n+\n+    List<HistoryEventImpl> listEvents = historyService.createHistoryQuery().taskIdIn(taskId).list();\n+\n+    assertThat(listEvents).isEmpty();\n+\n+    assertThat(taskService.getTask(taskId).getState()).isEqualTo(TaskState.CLAIMED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "287fec9438973926ba3337697cee2856f2288b77"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjkxNzY3OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/spi/history/api/events/task/CancelledEvent.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTozNjoyMVrOG2GqaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjo0NDozNlrOG4qu1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NTQ0OA==", "bodyText": "correct would be to use the completed timestamp, which should be identical.", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r459385448", "createdAt": "2020-07-23T11:36:21Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/spi/history/api/events/task/CancelledEvent.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package pro.taskana.spi.history.api.events.task;\n+\n+import pro.taskana.task.api.models.Task;\n+\n+/** Event fired if a task is cancelled. */\n+public class CancelledEvent extends TaskEvent {\n+\n+  public CancelledEvent(String id, Task task, String userId) {\n+    super(id, task, userId, null);\n+    eventType = \"TASK_CANCELLED\";\n+    created = task.getModified();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "287fec9438973926ba3337697cee2856f2288b77"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxMzQ4Mg==", "bodyText": "The timestamp is identical, but I will change it to task.getCompleted()", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r459413482", "createdAt": "2020-07-23T12:32:57Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/java/pro/taskana/spi/history/api/events/task/CancelledEvent.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package pro.taskana.spi.history.api.events.task;\n+\n+import pro.taskana.task.api.models.Task;\n+\n+/** Event fired if a task is cancelled. */\n+public class CancelledEvent extends TaskEvent {\n+\n+  public CancelledEvent(String id, Task task, String userId) {\n+    super(id, task, userId, null);\n+    eventType = \"TASK_CANCELLED\";\n+    created = task.getModified();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NTQ0OA=="}, "originalCommit": {"oid": "287fec9438973926ba3337697cee2856f2288b77"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MzAxNg==", "bodyText": "You will but you haven't done it yet, correct? Or is this just an displaying issue?", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r462073016", "createdAt": "2020-07-29T06:43:12Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/spi/history/api/events/task/CancelledEvent.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package pro.taskana.spi.history.api.events.task;\n+\n+import pro.taskana.task.api.models.Task;\n+\n+/** Event fired if a task is cancelled. */\n+public class CancelledEvent extends TaskEvent {\n+\n+  public CancelledEvent(String id, Task task, String userId) {\n+    super(id, task, userId, null);\n+    eventType = \"TASK_CANCELLED\";\n+    created = task.getModified();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NTQ0OA=="}, "originalCommit": {"oid": "287fec9438973926ba3337697cee2856f2288b77"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MzU1Ng==", "bodyText": "I have this changed but not pushed yet, since the changes in the asserts are not yet agreed upon. I'm going to push everything together", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r462073556", "createdAt": "2020-07-29T06:44:36Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/java/pro/taskana/spi/history/api/events/task/CancelledEvent.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package pro.taskana.spi.history.api.events.task;\n+\n+import pro.taskana.task.api.models.Task;\n+\n+/** Event fired if a task is cancelled. */\n+public class CancelledEvent extends TaskEvent {\n+\n+  public CancelledEvent(String id, Task task, String userId) {\n+    super(id, task, userId, null);\n+    eventType = \"TASK_CANCELLED\";\n+    created = task.getModified();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NTQ0OA=="}, "originalCommit": {"oid": "287fec9438973926ba3337697cee2856f2288b77"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4105, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}