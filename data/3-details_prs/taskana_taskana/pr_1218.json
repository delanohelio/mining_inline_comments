{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1OTQ2MjA5", "number": 1218, "title": "TSK-1349: Added unit test for access items management", "bodyText": "https://taskana.atlassian.net/browse/TSK-1349", "createdAt": "2020-08-11T08:17:14Z", "url": "https://github.com/Taskana/taskana/pull/1218", "merged": true, "mergeCommit": {"oid": "8a6e68d0b9e6c9c3f0d60110950cb479c7c3f17e"}, "closed": true, "closedAt": "2020-08-17T15:36:00Z", "author": {"login": "cnguyen-de"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9yXpugH2gAyNDY1OTQ2MjA5OjM4NTI2MTQ4YTAyMWZiOGI0NDBkZWNhYTkxOTkyNWNmZWFhNzcxZTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_z572gFqTQ2ODU1MjE4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/38526148a021fb8b440decaa919925cfeaa771e2", "committedDate": "2020-08-11T08:16:33Z", "message": "TSK-1349: added unit test for access items management"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MDM2ODU1", "url": "https://github.com/Taskana/taskana/pull/1218#pullrequestreview-465036855", "createdAt": "2020-08-11T12:56:52Z", "commit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo1Njo1M1rOG-2hSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo1NjowM1rOG-4_PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1ODE1Mw==", "bodyText": "In the Jest documentation, 'test' is used instead of 'it'. Why do you use 'it'?", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468558153", "createdAt": "2020-08-11T12:56:53Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3NDgwMQ==", "bodyText": "According to the variable name, did you intend to test whether the attribute 'groups' is available in the accessItemsManagement state?", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468574801", "createdAt": "2020-08-11T13:22:55Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);\n+    const engineConfigs = store.selectSnapshot((state) => state.engineConfiguration);\n+    expect(engineConfigs).toBeTruthy();\n+    const groups = store.selectSnapshot((state) => state.accessItemsManagement);\n+    expect(groups).toBeTruthy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3OTQ0Mg==", "bodyText": "Do we need an 'async' or 'done' to treat asynchronous code here?", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468579442", "createdAt": "2020-08-11T13:29:39Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NzYyNw==", "bodyText": "The method is called 'onSelectAccessId' instead of 'onSelectedAccessId'. I was confused because there were no results when searching for 'onSelectedAccessId'. It is okay but it would be great when you change the name to prevent confusions in the future \ud83d\ude05", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468587627", "createdAt": "2020-08-11T13:41:22Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);\n+    const engineConfigs = store.selectSnapshot((state) => state.engineConfiguration);\n+    expect(engineConfigs).toBeTruthy();\n+    const groups = store.selectSnapshot((state) => state.accessItemsManagement);\n+    expect(groups).toBeTruthy();\n+  });\n+\n+  it('onSelectedAccessId is called correctly', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5ODU4OA==", "bodyText": "After reading the documentation, I thought async / await and done() are alternatives. Is one of them not sufficient?", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468598588", "createdAt": "2020-08-11T13:56:03Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);\n+    const engineConfigs = store.selectSnapshot((state) => state.engineConfiguration);\n+    expect(engineConfigs).toBeTruthy();\n+    const groups = store.selectSnapshot((state) => state.accessItemsManagement);\n+    expect(groups).toBeTruthy();\n+  });\n+\n+  it('onSelectedAccessId is called correctly', () => {\n+    const selectedAccessId = { accessId: '', name: '' };\n+    app.onSelectAccessId(selectedAccessId);\n+    const groups = store.selectSnapshot((state) => state.accessItemsManagement);\n+    expect(selectedAccessId).not.toBeNull();\n+    expect(groups).not.toBeNull();\n+    expect(app.accessItemsForm).not.toBeNull();\n+\n+    app.onSelectAccessId(null);\n+    expect(app.accessItemsForm).toBeNull();\n+  });\n+\n+  it('GetAccessItems action is called in searchForAccessItemsWorkbaskets', async((done) => {\n+    app.searchForAccessItemsWorkbaskets();\n+    actions$.pipe(ofActionDispatched(GetAccessItems)).subscribe(async (action) => {\n+      await expect(action).toBeTruthy();\n+      done();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1bc76957561482694ac8dcf28640fe146407737", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/b1bc76957561482694ac8dcf28640fe146407737", "committedDate": "2020-08-12T12:31:35Z", "message": "TSK-1349: updated test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebd8136fd58f3b8c29e745a678f2cb1a6390773e", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/ebd8136fd58f3b8c29e745a678f2cb1a6390773e", "committedDate": "2020-08-12T13:20:59Z", "message": "TSK-1349: clean up test code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NjM2Mzg0", "url": "https://github.com/Taskana/taskana/pull/1218#pullrequestreview-466636384", "createdAt": "2020-08-13T10:27:27Z", "commit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMDoyNzoyN1rOHAFmzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMDoyNzoyN1rOHAFmzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg1MzkwMw==", "bodyText": "I thought you wanted to insert done(), didn't you?", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r469853903", "createdAt": "2020-08-13T10:27:27Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3OTQ0Mg=="}, "originalCommit": {"oid": "38526148a021fb8b440decaa919925cfeaa771e2"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6da7da8bdf7374e6fd2c11e9608bf40fef2603d", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/e6da7da8bdf7374e6fd2c11e9608bf40fef2603d", "committedDate": "2020-08-14T12:08:15Z", "message": "TSK-1349: fixed fixture not working correctly in test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5aa42f0c1ae626291761782c4ca15d911ffef5fa", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/5aa42f0c1ae626291761782c4ca15d911ffef5fa", "committedDate": "2020-08-17T08:37:41Z", "message": "TSK-1349: added shared sort stub"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7af64056ab50691be37e70d0e4598908400ff99", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/c7af64056ab50691be37e70d0e4598908400ff99", "committedDate": "2020-08-17T11:46:56Z", "message": "TSK-1349: added new tests and fixed html attr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddd09237f57e978b067f01cfa3db03b59f4d4b1c", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/ddd09237f57e978b067f01cfa3db03b59f4d4b1c", "committedDate": "2020-08-17T11:54:12Z", "message": "TSK-1349: updated test desc and matcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed0bba81aca505be938fbb69bbc495469dee5f00", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/ed0bba81aca505be938fbb69bbc495469dee5f00", "committedDate": "2020-08-17T14:50:55Z", "message": "TSK-1349: fixed stub not working correctly"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NTUyMTgz", "url": "https://github.com/Taskana/taskana/pull/1218#pullrequestreview-468552183", "createdAt": "2020-08-17T15:11:45Z", "commit": {"oid": "ed0bba81aca505be938fbb69bbc495469dee5f00"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4467, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}