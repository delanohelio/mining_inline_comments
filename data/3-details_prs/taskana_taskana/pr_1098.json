{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MzY3MDM3", "number": 1098, "title": "TASK-1278: Extended Test Coverage of Assembler Classes", "bodyText": "", "createdAt": "2020-06-03T18:05:07Z", "url": "https://github.com/Taskana/taskana/pull/1098", "merged": true, "mergeCommit": {"oid": "3b1eab9a58dbc3b598867fffbdde0b95d895f54e"}, "closed": true, "closedAt": "2020-06-04T17:02:20Z", "author": {"login": "krozzus"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcntZQzgH2gAyNDI3MzY3MDM3OjRkOTFjNzg4ZjhlNTFhM2VjZmZiOTMyZWQ2ZTliYjcwNWUyNGFlNzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoBIeggFqTQyNDY1MjUxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75", "author": {"user": null}, "url": "https://github.com/Taskana/taskana/commit/4d91c788f8e51a3ecffb932ed6e9bb705e24ae75", "committedDate": "2020-06-03T18:02:27Z", "message": "TASK-1278: Extended Test Coverage of Assembler Classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjMxMjYy", "url": "https://github.com/Taskana/taskana/pull/1098#pullrequestreview-424231262", "createdAt": "2020-06-04T08:47:04Z", "commit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODo0NzowNFrOGe78TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOToyNjo1OVrOGe9bGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5MjU1Ng==", "bodyText": "This is exactly why I wanted to have those tests. Mistakes like this are not seen during a review :)\nGreat job!", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435092556", "createdAt": "2020-06-04T08:47:04Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/assembler/WorkbasketDefinitionRepresentationModelAssembler.java", "diffHunk": "@@ -45,7 +45,7 @@ public WorkbasketDefinitionRepresentationModel toModel(@NonNull Workbasket workb\n \n     basket.setKey(workbasket.getKey());\n     basket.setModified(workbasket.getModified());\n-    basket.setCreated(workbasket.getModified());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5NDM4OA==", "bodyText": "This can be simplified to a class1.equals(class2) and thus removed", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435094388", "createdAt": "2020-06-04T08:50:07Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/classification/rest/assembler/ClassificationAssemblerTest.java", "diffHunk": "@@ -90,59 +90,102 @@ void resourceToClassification() {\n             classificationRepresentationModelAssembler\n                 .toEntityModel(classificationRepresentationModel);\n     // then\n-    testEquality(classification, classificationRepresentationModel);\n+    testEqualityAfterConversion(classification, classificationRepresentationModel);\n   }\n \n-  private void testLinks(ClassificationRepresentationModel resource) {\n-    assertThat(resource.getLinks()).hasSize(1);\n-    assertThat(Mapping.URL_CLASSIFICATIONS_ID.replaceAll(\"\\\\{.*}\", resource.getClassificationId()))\n-        .isEqualTo(resource.getRequiredLink(\"self\").getHref());\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    ClassificationImpl classification =\n+        (ClassificationImpl) classificationService.newClassification(\"KEY_A\", \"DOMAIN_A\", \"A\");\n+    classification.setId(\"1\");\n+    classification.setCategory(\"ABC\");\n+    classification.setName(\"Classification 1\");\n+    classification.setIsValidInDomain(true);\n+    classification.setCustom1(\"Custom1\");\n+    classification.setCustom2(\"Custom2\");\n+    classification.setCustom3(\"Custom3\");\n+    classification.setCustom4(\"Custom4\");\n+    classification.setCustom5(\"Custom5\");\n+    classification.setCustom6(\"Custom6\");\n+    classification.setCustom7(\"Custom7\");\n+    classification.setCustom8(\"Custom8\");\n+    classification.setParentId(\"2\");\n+    classification.setParentKey(\"parentKey\");\n+    classification.setPriority(2);\n+    classification.setApplicationEntryPoint(\"12\");\n+    classification.setServiceLevel(\"P1D\");\n+    classification.setDescription(\"Test\");\n+    classification.setCreated(Instant.parse(\"2010-01-01T12:00:00Z\"));\n+    classification.setModified(Instant.parse(\"2011-11-11T11:00:00Z\"));\n+    // when\n+    ClassificationRepresentationModel classificationRepresentationModel =\n+        classificationRepresentationModelAssembler.toModel(classification);\n+    ClassificationImpl secondClassification\n+        = (ClassificationImpl) classificationRepresentationModelAssembler\n+                                   .toEntityModel(classificationRepresentationModel);\n+    // then\n+    testEqualityOfEntities(classification, secondClassification);\n+  }\n+\n+  private void testLinks(ClassificationRepresentationModel repModel) {\n+    assertThat(repModel.getLinks()).hasSize(1);\n+    assertThat(Mapping.URL_CLASSIFICATIONS_ID.replaceAll(\"\\\\{.*}\", repModel.getClassificationId()))\n+        .isEqualTo(repModel.getRequiredLink(\"self\").getHref());\n   }\n \n-  private void testEquality(\n-      Classification classification,\n-      ClassificationRepresentationModel classificationRepresentationModel) {\n-    assertThat(classification.getApplicationEntryPoint())\n-        .isEqualTo(classificationRepresentationModel.getApplicationEntryPoint());\n-    assertThat(classification.getKey()).isEqualTo(classificationRepresentationModel.getKey());\n-    assertThat(classification.getDomain()).isEqualTo(classificationRepresentationModel.getDomain());\n-    assertThat(classification.getId())\n-        .isEqualTo(classificationRepresentationModel.getClassificationId());\n-    assertThat(classification.getDescription())\n-        .isEqualTo(classificationRepresentationModel.getDescription());\n-    assertThat(classification.getName()).isEqualTo(classificationRepresentationModel.getName());\n-    assertThat(classification.getServiceLevel())\n-        .isEqualTo(classificationRepresentationModel.getServiceLevel());\n-    assertThat(classification.getCategory())\n-        .isEqualTo(classificationRepresentationModel.getCategory());\n-    assertThat(classification.getCustom1())\n-        .isEqualTo(classificationRepresentationModel.getCustom1());\n-    assertThat(classification.getCustom2())\n-        .isEqualTo(classificationRepresentationModel.getCustom2());\n-    assertThat(classification.getCustom3())\n-        .isEqualTo(classificationRepresentationModel.getCustom3());\n-    assertThat(classification.getCustom4())\n-        .isEqualTo(classificationRepresentationModel.getCustom4());\n-    assertThat(classification.getCustom5())\n-        .isEqualTo(classificationRepresentationModel.getCustom5());\n-    assertThat(classification.getCustom6())\n-        .isEqualTo(classificationRepresentationModel.getCustom6());\n-    assertThat(classification.getCustom7())\n-        .isEqualTo(classificationRepresentationModel.getCustom7());\n-    assertThat(classification.getCustom8())\n-        .isEqualTo(classificationRepresentationModel.getCustom8());\n-    assertThat(classification.getParentId())\n-        .isEqualTo(classificationRepresentationModel.getParentId());\n-    assertThat(classification.getParentKey())\n-        .isEqualTo(classificationRepresentationModel.getParentKey());\n-    assertThat(classification.getType()).isEqualTo(classificationRepresentationModel.getType());\n-    assertThat(classification.getPriority())\n-        .isEqualTo(classificationRepresentationModel.getPriority());\n-    assertThat(classification.getIsValidInDomain())\n-        .isEqualTo(classificationRepresentationModel.getIsValidInDomain());\n-    assertThat(classification.getCreated())\n-        .isEqualTo(classificationRepresentationModel.getCreated());\n-    assertThat(classification.getModified())\n-        .isEqualTo(classificationRepresentationModel.getModified());\n+  private void testEqualityAfterConversion(\n+      Classification entity,\n+      ClassificationRepresentationModel repModel) {\n+    assertThat(entity.getApplicationEntryPoint()).isEqualTo(repModel.getApplicationEntryPoint());\n+    assertThat(entity.getKey()).isEqualTo(repModel.getKey());\n+    assertThat(entity.getDomain()).isEqualTo(repModel.getDomain());\n+    assertThat(entity.getId()).isEqualTo(repModel.getClassificationId());\n+    assertThat(entity.getDescription()).isEqualTo(repModel.getDescription());\n+    assertThat(entity.getName()).isEqualTo(repModel.getName());\n+    assertThat(entity.getServiceLevel()).isEqualTo(repModel.getServiceLevel());\n+    assertThat(entity.getCategory()).isEqualTo(repModel.getCategory());\n+    assertThat(entity.getCustom1()).isEqualTo(repModel.getCustom1());\n+    assertThat(entity.getCustom2()).isEqualTo(repModel.getCustom2());\n+    assertThat(entity.getCustom3()).isEqualTo(repModel.getCustom3());\n+    assertThat(entity.getCustom4()).isEqualTo(repModel.getCustom4());\n+    assertThat(entity.getCustom5()).isEqualTo(repModel.getCustom5());\n+    assertThat(entity.getCustom6()).isEqualTo(repModel.getCustom6());\n+    assertThat(entity.getCustom7()).isEqualTo(repModel.getCustom7());\n+    assertThat(entity.getCustom8()).isEqualTo(repModel.getCustom8());\n+    assertThat(entity.getParentId()).isEqualTo(repModel.getParentId());\n+    assertThat(entity.getParentKey()).isEqualTo(repModel.getParentKey());\n+    assertThat(entity.getType()).isEqualTo(repModel.getType());\n+    assertThat(entity.getPriority()).isEqualTo(repModel.getPriority());\n+    assertThat(entity.getIsValidInDomain()).isEqualTo(repModel.getIsValidInDomain());\n+    assertThat(entity.getCreated()).isEqualTo(repModel.getCreated());\n+    assertThat(entity.getModified()).isEqualTo(repModel.getModified());\n   }\n+\n+  private void testEqualityOfEntities(Classification class1, Classification class2) {\n+    assertThat(class1.getApplicationEntryPoint()).isEqualTo(class2.getApplicationEntryPoint());\n+    assertThat(class1.getKey()).isEqualTo(class2.getKey());\n+    assertThat(class1.getDomain()).isEqualTo(class2.getDomain());\n+    assertThat(class1.getId()).isEqualTo(class2.getId());\n+    assertThat(class1.getDescription()).isEqualTo(class2.getDescription());\n+    assertThat(class1.getName()).isEqualTo(class2.getName());\n+    assertThat(class1.getServiceLevel()).isEqualTo(class2.getServiceLevel());\n+    assertThat(class1.getCategory()).isEqualTo(class2.getCategory());\n+    assertThat(class1.getCustom1()).isEqualTo(class2.getCustom1());\n+    assertThat(class1.getCustom2()).isEqualTo(class2.getCustom2());\n+    assertThat(class1.getCustom3()).isEqualTo(class2.getCustom3());\n+    assertThat(class1.getCustom4()).isEqualTo(class2.getCustom4());\n+    assertThat(class1.getCustom5()).isEqualTo(class2.getCustom5());\n+    assertThat(class1.getCustom6()).isEqualTo(class2.getCustom6());\n+    assertThat(class1.getCustom7()).isEqualTo(class2.getCustom7());\n+    assertThat(class1.getCustom8()).isEqualTo(class2.getCustom8());\n+    assertThat(class1.getParentId()).isEqualTo(class2.getParentId());\n+    assertThat(class1.getParentKey()).isEqualTo(class2.getParentKey());\n+    assertThat(class1.getType()).isEqualTo(class2.getType());\n+    assertThat(class1.getPriority()).isEqualTo(class2.getPriority());\n+    assertThat(class1.getIsValidInDomain()).isEqualTo(class2.getIsValidInDomain());\n+    assertThat(class1.getCreated()).isEqualTo(class2.getCreated());\n+    assertThat(class1.getModified()).isEqualTo(class2.getModified());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5ODA5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                testEqualityOfEntities(classification, secondClassification);\n          \n          \n            \n                assertThat(classification).isEqualTo(secondClassification).isNotSameAs(secondClassification);", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435098090", "createdAt": "2020-06-04T08:56:14Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/classification/rest/assembler/ClassificationAssemblerTest.java", "diffHunk": "@@ -90,59 +90,102 @@ void resourceToClassification() {\n             classificationRepresentationModelAssembler\n                 .toEntityModel(classificationRepresentationModel);\n     // then\n-    testEquality(classification, classificationRepresentationModel);\n+    testEqualityAfterConversion(classification, classificationRepresentationModel);\n   }\n \n-  private void testLinks(ClassificationRepresentationModel resource) {\n-    assertThat(resource.getLinks()).hasSize(1);\n-    assertThat(Mapping.URL_CLASSIFICATIONS_ID.replaceAll(\"\\\\{.*}\", resource.getClassificationId()))\n-        .isEqualTo(resource.getRequiredLink(\"self\").getHref());\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    ClassificationImpl classification =\n+        (ClassificationImpl) classificationService.newClassification(\"KEY_A\", \"DOMAIN_A\", \"A\");\n+    classification.setId(\"1\");\n+    classification.setCategory(\"ABC\");\n+    classification.setName(\"Classification 1\");\n+    classification.setIsValidInDomain(true);\n+    classification.setCustom1(\"Custom1\");\n+    classification.setCustom2(\"Custom2\");\n+    classification.setCustom3(\"Custom3\");\n+    classification.setCustom4(\"Custom4\");\n+    classification.setCustom5(\"Custom5\");\n+    classification.setCustom6(\"Custom6\");\n+    classification.setCustom7(\"Custom7\");\n+    classification.setCustom8(\"Custom8\");\n+    classification.setParentId(\"2\");\n+    classification.setParentKey(\"parentKey\");\n+    classification.setPriority(2);\n+    classification.setApplicationEntryPoint(\"12\");\n+    classification.setServiceLevel(\"P1D\");\n+    classification.setDescription(\"Test\");\n+    classification.setCreated(Instant.parse(\"2010-01-01T12:00:00Z\"));\n+    classification.setModified(Instant.parse(\"2011-11-11T11:00:00Z\"));\n+    // when\n+    ClassificationRepresentationModel classificationRepresentationModel =\n+        classificationRepresentationModelAssembler.toModel(classification);\n+    ClassificationImpl secondClassification\n+        = (ClassificationImpl) classificationRepresentationModelAssembler\n+                                   .toEntityModel(classificationRepresentationModel);\n+    // then\n+    testEqualityOfEntities(classification, secondClassification);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMDE2OA==", "bodyText": "why did you rename it? I think testEquality is fine :)", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435100168", "createdAt": "2020-06-04T08:59:38Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/classification/rest/assembler/ClassificationAssemblerTest.java", "diffHunk": "@@ -90,59 +90,102 @@ void resourceToClassification() {\n             classificationRepresentationModelAssembler\n                 .toEntityModel(classificationRepresentationModel);\n     // then\n-    testEquality(classification, classificationRepresentationModel);\n+    testEqualityAfterConversion(classification, classificationRepresentationModel);\n   }\n \n-  private void testLinks(ClassificationRepresentationModel resource) {\n-    assertThat(resource.getLinks()).hasSize(1);\n-    assertThat(Mapping.URL_CLASSIFICATIONS_ID.replaceAll(\"\\\\{.*}\", resource.getClassificationId()))\n-        .isEqualTo(resource.getRequiredLink(\"self\").getHref());\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    ClassificationImpl classification =\n+        (ClassificationImpl) classificationService.newClassification(\"KEY_A\", \"DOMAIN_A\", \"A\");\n+    classification.setId(\"1\");\n+    classification.setCategory(\"ABC\");\n+    classification.setName(\"Classification 1\");\n+    classification.setIsValidInDomain(true);\n+    classification.setCustom1(\"Custom1\");\n+    classification.setCustom2(\"Custom2\");\n+    classification.setCustom3(\"Custom3\");\n+    classification.setCustom4(\"Custom4\");\n+    classification.setCustom5(\"Custom5\");\n+    classification.setCustom6(\"Custom6\");\n+    classification.setCustom7(\"Custom7\");\n+    classification.setCustom8(\"Custom8\");\n+    classification.setParentId(\"2\");\n+    classification.setParentKey(\"parentKey\");\n+    classification.setPriority(2);\n+    classification.setApplicationEntryPoint(\"12\");\n+    classification.setServiceLevel(\"P1D\");\n+    classification.setDescription(\"Test\");\n+    classification.setCreated(Instant.parse(\"2010-01-01T12:00:00Z\"));\n+    classification.setModified(Instant.parse(\"2011-11-11T11:00:00Z\"));\n+    // when\n+    ClassificationRepresentationModel classificationRepresentationModel =\n+        classificationRepresentationModelAssembler.toModel(classification);\n+    ClassificationImpl secondClassification\n+        = (ClassificationImpl) classificationRepresentationModelAssembler\n+                                   .toEntityModel(classificationRepresentationModel);\n+    // then\n+    testEqualityOfEntities(classification, secondClassification);\n+  }\n+\n+  private void testLinks(ClassificationRepresentationModel repModel) {\n+    assertThat(repModel.getLinks()).hasSize(1);\n+    assertThat(Mapping.URL_CLASSIFICATIONS_ID.replaceAll(\"\\\\{.*}\", repModel.getClassificationId()))\n+        .isEqualTo(repModel.getRequiredLink(\"self\").getHref());\n   }\n \n-  private void testEquality(\n-      Classification classification,\n-      ClassificationRepresentationModel classificationRepresentationModel) {\n-    assertThat(classification.getApplicationEntryPoint())\n-        .isEqualTo(classificationRepresentationModel.getApplicationEntryPoint());\n-    assertThat(classification.getKey()).isEqualTo(classificationRepresentationModel.getKey());\n-    assertThat(classification.getDomain()).isEqualTo(classificationRepresentationModel.getDomain());\n-    assertThat(classification.getId())\n-        .isEqualTo(classificationRepresentationModel.getClassificationId());\n-    assertThat(classification.getDescription())\n-        .isEqualTo(classificationRepresentationModel.getDescription());\n-    assertThat(classification.getName()).isEqualTo(classificationRepresentationModel.getName());\n-    assertThat(classification.getServiceLevel())\n-        .isEqualTo(classificationRepresentationModel.getServiceLevel());\n-    assertThat(classification.getCategory())\n-        .isEqualTo(classificationRepresentationModel.getCategory());\n-    assertThat(classification.getCustom1())\n-        .isEqualTo(classificationRepresentationModel.getCustom1());\n-    assertThat(classification.getCustom2())\n-        .isEqualTo(classificationRepresentationModel.getCustom2());\n-    assertThat(classification.getCustom3())\n-        .isEqualTo(classificationRepresentationModel.getCustom3());\n-    assertThat(classification.getCustom4())\n-        .isEqualTo(classificationRepresentationModel.getCustom4());\n-    assertThat(classification.getCustom5())\n-        .isEqualTo(classificationRepresentationModel.getCustom5());\n-    assertThat(classification.getCustom6())\n-        .isEqualTo(classificationRepresentationModel.getCustom6());\n-    assertThat(classification.getCustom7())\n-        .isEqualTo(classificationRepresentationModel.getCustom7());\n-    assertThat(classification.getCustom8())\n-        .isEqualTo(classificationRepresentationModel.getCustom8());\n-    assertThat(classification.getParentId())\n-        .isEqualTo(classificationRepresentationModel.getParentId());\n-    assertThat(classification.getParentKey())\n-        .isEqualTo(classificationRepresentationModel.getParentKey());\n-    assertThat(classification.getType()).isEqualTo(classificationRepresentationModel.getType());\n-    assertThat(classification.getPriority())\n-        .isEqualTo(classificationRepresentationModel.getPriority());\n-    assertThat(classification.getIsValidInDomain())\n-        .isEqualTo(classificationRepresentationModel.getIsValidInDomain());\n-    assertThat(classification.getCreated())\n-        .isEqualTo(classificationRepresentationModel.getCreated());\n-    assertThat(classification.getModified())\n-        .isEqualTo(classificationRepresentationModel.getModified());\n+  private void testEqualityAfterConversion(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMDg1Mg==", "bodyText": "Same as file above.", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435100852", "createdAt": "2020-06-04T09:00:43Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/classification/rest/assembler/ClassificationSummaryAssemblerTest.java", "diffHunk": "@@ -79,31 +78,92 @@ void testResourceToModel() {\n     ClassificationSummary classificationSummary =\n         classificationSummaryRepresentationModelAssembler.toEntityModel(resource);\n     // then\n-    testEquality(classificationSummary, resource);\n+    testEqualityAfterConversion(classificationSummary, resource);\n+  }\n+\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    // given\n+    ClassificationImpl classification =\n+        (ClassificationImpl) classificationService.newClassification(\"DOMAIN_A\", \"1\", \"A\");\n+    classification.setId(\"1\");\n+    classification.setCategory(\"ABC\");\n+    classification.setName(\"Classification 1\");\n+    classification.setIsValidInDomain(true);\n+    classification.setCustom1(\"Custom1\");\n+    classification.setCustom2(\"Custom2\");\n+    classification.setCustom3(\"Custom3\");\n+    classification.setCustom4(\"Custom4\");\n+    classification.setCustom5(\"Custom5\");\n+    classification.setCustom6(\"Custom6\");\n+    classification.setCustom7(\"Custom7\");\n+    classification.setCustom8(\"Custom8\");\n+    classification.setParentId(\"2\");\n+    classification.setPriority(2);\n+    classification.setApplicationEntryPoint(\"12\");\n+    classification.setServiceLevel(\"P1D\");\n+    classification.setDescription(\"Test\");\n+    classification.setCreated(Instant.parse(\"2010-01-01T12:00:00Z\"));\n+    classification.setModified(Instant.parse(\"2011-11-11T11:00:00Z\"));\n+    // when\n+    ClassificationSummaryRepresentationModel repModel =\n+        classificationSummaryRepresentationModelAssembler.toModel(classification);\n+    ClassificationImpl secondClassification\n+        = (ClassificationImpl) classificationSummaryRepresentationModelAssembler\n+                                   .toEntityModel(repModel);\n+    testEqualityOfEntities(classification, secondClassification);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMTA4MA==", "bodyText": "no need to cast here :)", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435101080", "createdAt": "2020-06-04T09:01:04Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/classification/rest/assembler/ClassificationSummaryAssemblerTest.java", "diffHunk": "@@ -79,31 +78,92 @@ void testResourceToModel() {\n     ClassificationSummary classificationSummary =\n         classificationSummaryRepresentationModelAssembler.toEntityModel(resource);\n     // then\n-    testEquality(classificationSummary, resource);\n+    testEqualityAfterConversion(classificationSummary, resource);\n+  }\n+\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    // given\n+    ClassificationImpl classification =\n+        (ClassificationImpl) classificationService.newClassification(\"DOMAIN_A\", \"1\", \"A\");\n+    classification.setId(\"1\");\n+    classification.setCategory(\"ABC\");\n+    classification.setName(\"Classification 1\");\n+    classification.setIsValidInDomain(true);\n+    classification.setCustom1(\"Custom1\");\n+    classification.setCustom2(\"Custom2\");\n+    classification.setCustom3(\"Custom3\");\n+    classification.setCustom4(\"Custom4\");\n+    classification.setCustom5(\"Custom5\");\n+    classification.setCustom6(\"Custom6\");\n+    classification.setCustom7(\"Custom7\");\n+    classification.setCustom8(\"Custom8\");\n+    classification.setParentId(\"2\");\n+    classification.setPriority(2);\n+    classification.setApplicationEntryPoint(\"12\");\n+    classification.setServiceLevel(\"P1D\");\n+    classification.setDescription(\"Test\");\n+    classification.setCreated(Instant.parse(\"2010-01-01T12:00:00Z\"));\n+    classification.setModified(Instant.parse(\"2011-11-11T11:00:00Z\"));\n+    // when\n+    ClassificationSummaryRepresentationModel repModel =\n+        classificationSummaryRepresentationModelAssembler.toModel(classification);\n+    ClassificationImpl secondClassification\n+        = (ClassificationImpl) classificationSummaryRepresentationModelAssembler\n+                                   .toEntityModel(repModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMjAwMw==", "bodyText": "Is this method used somewhere?", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435102003", "createdAt": "2020-06-04T09:02:37Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/classification/rest/assembler/ClassificationSummaryAssemblerTest.java", "diffHunk": "@@ -79,31 +78,92 @@ void testResourceToModel() {\n     ClassificationSummary classificationSummary =\n         classificationSummaryRepresentationModelAssembler.toEntityModel(resource);\n     // then\n-    testEquality(classificationSummary, resource);\n+    testEqualityAfterConversion(classificationSummary, resource);\n+  }\n+\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    // given\n+    ClassificationImpl classification =\n+        (ClassificationImpl) classificationService.newClassification(\"DOMAIN_A\", \"1\", \"A\");\n+    classification.setId(\"1\");\n+    classification.setCategory(\"ABC\");\n+    classification.setName(\"Classification 1\");\n+    classification.setIsValidInDomain(true);\n+    classification.setCustom1(\"Custom1\");\n+    classification.setCustom2(\"Custom2\");\n+    classification.setCustom3(\"Custom3\");\n+    classification.setCustom4(\"Custom4\");\n+    classification.setCustom5(\"Custom5\");\n+    classification.setCustom6(\"Custom6\");\n+    classification.setCustom7(\"Custom7\");\n+    classification.setCustom8(\"Custom8\");\n+    classification.setParentId(\"2\");\n+    classification.setPriority(2);\n+    classification.setApplicationEntryPoint(\"12\");\n+    classification.setServiceLevel(\"P1D\");\n+    classification.setDescription(\"Test\");\n+    classification.setCreated(Instant.parse(\"2010-01-01T12:00:00Z\"));\n+    classification.setModified(Instant.parse(\"2011-11-11T11:00:00Z\"));\n+    // when\n+    ClassificationSummaryRepresentationModel repModel =\n+        classificationSummaryRepresentationModelAssembler.toModel(classification);\n+    ClassificationImpl secondClassification\n+        = (ClassificationImpl) classificationSummaryRepresentationModelAssembler\n+                                   .toEntityModel(repModel);\n+    testEqualityOfEntities(classification, secondClassification);\n+  }\n+\n+  private void testEqualityAfterConversion(\n+      ClassificationSummary entity,\n+      ClassificationSummaryRepresentationModel repModel) {\n+    assertThat(repModel.getKey()).isEqualTo(entity.getKey());\n+    assertThat(repModel.getDomain()).isEqualTo(entity.getDomain());\n+    assertThat(repModel.getClassificationId()).isEqualTo(entity.getId());\n+    assertThat(repModel.getName()).isEqualTo(entity.getName());\n+    assertThat(repModel.getCategory()).isEqualTo(entity.getCategory());\n+    assertThat(repModel.getCustom1()).isEqualTo(entity.getCustom1());\n+    assertThat(repModel.getCustom2()).isEqualTo(entity.getCustom2());\n+    assertThat(repModel.getCustom3()).isEqualTo(entity.getCustom3());\n+    assertThat(repModel.getCustom4()).isEqualTo(entity.getCustom4());\n+    assertThat(repModel.getCustom5()).isEqualTo(entity.getCustom5());\n+    assertThat(repModel.getCustom6()).isEqualTo(entity.getCustom6());\n+    assertThat(repModel.getCustom7()).isEqualTo(entity.getCustom7());\n+    assertThat(repModel.getCustom8()).isEqualTo(entity.getCustom8());\n+    assertThat(repModel.getParentId()).isEqualTo(entity.getParentId());\n+    assertThat(repModel.getParentKey()).isEqualTo(entity.getParentKey());\n+    assertThat(repModel.getType()).isEqualTo(entity.getType());\n+    assertThat(repModel.getPriority()).isEqualTo(entity.getPriority());\n+    assertThat(repModel.getApplicationEntryPoint())\n+        .isEqualTo(entity.getApplicationEntryPoint());\n+    assertThat(repModel.getServiceLevel()).isEqualTo(entity.getServiceLevel());\n+  }\n+\n+  private void testEqualityOfEntities(\n+      ClassificationSummary class1,\n+      ClassificationSummary class2) {\n+    assertThat(class1.getKey()).isEqualTo(class2.getKey());\n+    assertThat(class1.getDomain()).isEqualTo(class2.getDomain());\n+    assertThat(class1.getId()).isEqualTo(class2.getId());\n+    assertThat(class1.getName()).isEqualTo(class2.getName());\n+    assertThat(class1.getCategory()).isEqualTo(class2.getCategory());\n+    assertThat(class1.getCustom1()).isEqualTo(class2.getCustom1());\n+    assertThat(class1.getCustom2()).isEqualTo(class2.getCustom2());\n+    assertThat(class1.getCustom3()).isEqualTo(class2.getCustom3());\n+    assertThat(class1.getCustom4()).isEqualTo(class2.getCustom4());\n+    assertThat(class1.getCustom5()).isEqualTo(class2.getCustom5());\n+    assertThat(class1.getCustom6()).isEqualTo(class2.getCustom6());\n+    assertThat(class1.getCustom7()).isEqualTo(class2.getCustom7());\n+    assertThat(class1.getCustom8()).isEqualTo(class2.getCustom8());\n+    assertThat(class1.getParentId()).isEqualTo(class2.getParentId());\n+    assertThat(class1.getParentKey()).isEqualTo(class2.getParentKey());\n+    assertThat(class1.getType()).isEqualTo(class2.getType());\n+    assertThat(class1.getPriority()).isEqualTo(class2.getPriority());\n+    assertThat(class1.getApplicationEntryPoint())\n+        .isEqualTo(class2.getApplicationEntryPoint());\n+    assertThat(class1.getServiceLevel()).isEqualTo(class2.getServiceLevel());\n   }\n \n-  private void testEquality(\n-      ClassificationSummary classificationSummary,\n-      ClassificationSummaryRepresentationModel resource) {\n-    assertThat(resource.getKey()).isEqualTo(classificationSummary.getKey());\n-    assertThat(resource.getDomain()).isEqualTo(classificationSummary.getDomain());\n-    assertThat(resource.getClassificationId()).isEqualTo(classificationSummary.getId());\n-    assertThat(resource.getName()).isEqualTo(classificationSummary.getName());\n-    assertThat(resource.getCategory()).isEqualTo(classificationSummary.getCategory());\n-    assertThat(resource.getCustom1()).isEqualTo(classificationSummary.getCustom1());\n-    assertThat(resource.getCustom2()).isEqualTo(classificationSummary.getCustom2());\n-    assertThat(resource.getCustom3()).isEqualTo(classificationSummary.getCustom3());\n-    assertThat(resource.getCustom4()).isEqualTo(classificationSummary.getCustom4());\n-    assertThat(resource.getCustom5()).isEqualTo(classificationSummary.getCustom5());\n-    assertThat(resource.getCustom6()).isEqualTo(classificationSummary.getCustom6());\n-    assertThat(resource.getCustom7()).isEqualTo(classificationSummary.getCustom7());\n-    assertThat(resource.getCustom8()).isEqualTo(classificationSummary.getCustom8());\n-    assertThat(resource.getParentId()).isEqualTo(classificationSummary.getParentId());\n-    assertThat(resource.getParentKey()).isEqualTo(classificationSummary.getParentKey());\n-    assertThat(resource.getType()).isEqualTo(classificationSummary.getType());\n-    assertThat(resource.getPriority()).isEqualTo(classificationSummary.getPriority());\n-    assertThat(resource.getApplicationEntryPoint())\n-        .isEqualTo(classificationSummary.getApplicationEntryPoint());\n-    assertThat(resource.getServiceLevel()).isEqualTo(classificationSummary.getServiceLevel());\n+  private void testLinks(ClassificationSummaryRepresentationModel repModel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMjUwNA==", "bodyText": "Constructor injection please \ud83d\udc4d", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435102504", "createdAt": "2020-06-04T09:03:27Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/AttachmentRepresentationModelAssemblerTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package pro.taskana.task.rest.assembler;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Instant;\n+import java.util.Collections;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import pro.taskana.classification.api.ClassificationService;\n+import pro.taskana.classification.api.models.ClassificationSummary;\n+import pro.taskana.classification.rest.models.ClassificationSummaryRepresentationModel;\n+import pro.taskana.common.rest.TaskanaSpringBootTest;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.Attachment;\n+import pro.taskana.task.api.models.ObjectReference;\n+import pro.taskana.task.internal.models.AttachmentImpl;\n+import pro.taskana.task.rest.models.AttachmentRepresentationModel;\n+\n+/**\n+ * Test for {@link AttachmentRepresentationModelAssembler}.\n+ */\n+@TaskanaSpringBootTest\n+class AttachmentRepresentationModelAssemblerTest {\n+\n+  @Autowired\n+  AttachmentRepresentationModelAssembler assembler;\n+\n+  @Autowired\n+  ClassificationService classService;\n+\n+  @Autowired\n+  TaskService taskService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMzcwNw==", "bodyText": "This method should return Attachment.", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435103707", "createdAt": "2020-06-04T09:05:19Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/AttachmentRepresentationModelAssemblerTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package pro.taskana.task.rest.assembler;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Instant;\n+import java.util.Collections;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import pro.taskana.classification.api.ClassificationService;\n+import pro.taskana.classification.api.models.ClassificationSummary;\n+import pro.taskana.classification.rest.models.ClassificationSummaryRepresentationModel;\n+import pro.taskana.common.rest.TaskanaSpringBootTest;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.Attachment;\n+import pro.taskana.task.api.models.ObjectReference;\n+import pro.taskana.task.internal.models.AttachmentImpl;\n+import pro.taskana.task.rest.models.AttachmentRepresentationModel;\n+\n+/**\n+ * Test for {@link AttachmentRepresentationModelAssembler}.\n+ */\n+@TaskanaSpringBootTest\n+class AttachmentRepresentationModelAssemblerTest {\n+\n+  @Autowired\n+  AttachmentRepresentationModelAssembler assembler;\n+\n+  @Autowired\n+  ClassificationService classService;\n+\n+  @Autowired\n+  TaskService taskService;\n+\n+  @Test\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n+    ObjectReference reference = new ObjectReference();\n+    reference.setId(\"abc\");\n+    ClassificationSummaryRepresentationModel summary\n+        = new ClassificationSummaryRepresentationModel();\n+    summary.setKey(\"keyabc\");\n+    summary.setDomain(\"DOMAIN_A\");\n+    summary.setType(\"MANUAL\");\n+    AttachmentRepresentationModel repModel = new AttachmentRepresentationModel();\n+    repModel.setCustomAttributes(Collections.singletonMap(\"abc\", \"def\"));\n+    repModel.setClassificationSummary(summary);\n+    repModel.setAttachmentId(\"id\");\n+    repModel.setTaskId(\"taskId\");\n+    repModel.setChannel(\"channel\");\n+    repModel.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setObjectReference(reference);\n+    repModel.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentImpl attachment = assembler.toEntityModel(repModel);\n+\n+    testEqualityAfterConversion(repModel, attachment);\n+  }\n+\n+\n+  @Test\n+  void should_ReturnRepresentationModel_When_ConvertingEntityToRepresentationModel() {\n+    AttachmentImpl attachment = (AttachmentImpl) taskService.newAttachment();\n+    ObjectReference reference = new ObjectReference();\n+    ClassificationSummary summary = classService.newClassification(\"ckey\", \"cdomain\", \"MANUAL\");\n+    reference.setId(\"abc\");\n+    attachment.setCustomAttributes(Collections.singletonMap(\"abc\", \"def\"));\n+    attachment.setClassificationSummary(summary);\n+    attachment.setId(\"id\");\n+    attachment.setTaskId(\"taskId\");\n+    attachment.setChannel(\"channel\");\n+    attachment.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setObjectReference(reference);\n+    attachment.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentRepresentationModel repModel = assembler.toModel(attachment);\n+\n+    testEqualityAfterConversion(repModel, attachment);\n+    testLinks();\n+  }\n+\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    AttachmentImpl attachment = (AttachmentImpl) taskService.newAttachment();\n+    ObjectReference reference = new ObjectReference();\n+    ClassificationSummary summary = classService.newClassification(\"ckey\", \"cdomain\", \"MANUAL\");\n+    reference.setId(\"abc\");\n+    attachment.setCustomAttributes(Collections.singletonMap(\"abc\", \"def\"));\n+    attachment.setClassificationSummary(summary);\n+    attachment.setId(\"id\");\n+    attachment.setTaskId(\"taskId\");\n+    attachment.setChannel(\"channel\");\n+    attachment.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setObjectReference(reference);\n+    attachment.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentRepresentationModel repModel = assembler.toModel(attachment);\n+    AttachmentImpl attachment2 = assembler.toEntityModel(repModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMzc5OQ==", "bodyText": "Same as comments above", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435103799", "createdAt": "2020-06-04T09:05:27Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/AttachmentRepresentationModelAssemblerTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package pro.taskana.task.rest.assembler;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Instant;\n+import java.util.Collections;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import pro.taskana.classification.api.ClassificationService;\n+import pro.taskana.classification.api.models.ClassificationSummary;\n+import pro.taskana.classification.rest.models.ClassificationSummaryRepresentationModel;\n+import pro.taskana.common.rest.TaskanaSpringBootTest;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.Attachment;\n+import pro.taskana.task.api.models.ObjectReference;\n+import pro.taskana.task.internal.models.AttachmentImpl;\n+import pro.taskana.task.rest.models.AttachmentRepresentationModel;\n+\n+/**\n+ * Test for {@link AttachmentRepresentationModelAssembler}.\n+ */\n+@TaskanaSpringBootTest\n+class AttachmentRepresentationModelAssemblerTest {\n+\n+  @Autowired\n+  AttachmentRepresentationModelAssembler assembler;\n+\n+  @Autowired\n+  ClassificationService classService;\n+\n+  @Autowired\n+  TaskService taskService;\n+\n+  @Test\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n+    ObjectReference reference = new ObjectReference();\n+    reference.setId(\"abc\");\n+    ClassificationSummaryRepresentationModel summary\n+        = new ClassificationSummaryRepresentationModel();\n+    summary.setKey(\"keyabc\");\n+    summary.setDomain(\"DOMAIN_A\");\n+    summary.setType(\"MANUAL\");\n+    AttachmentRepresentationModel repModel = new AttachmentRepresentationModel();\n+    repModel.setCustomAttributes(Collections.singletonMap(\"abc\", \"def\"));\n+    repModel.setClassificationSummary(summary);\n+    repModel.setAttachmentId(\"id\");\n+    repModel.setTaskId(\"taskId\");\n+    repModel.setChannel(\"channel\");\n+    repModel.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setObjectReference(reference);\n+    repModel.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentImpl attachment = assembler.toEntityModel(repModel);\n+\n+    testEqualityAfterConversion(repModel, attachment);\n+  }\n+\n+\n+  @Test\n+  void should_ReturnRepresentationModel_When_ConvertingEntityToRepresentationModel() {\n+    AttachmentImpl attachment = (AttachmentImpl) taskService.newAttachment();\n+    ObjectReference reference = new ObjectReference();\n+    ClassificationSummary summary = classService.newClassification(\"ckey\", \"cdomain\", \"MANUAL\");\n+    reference.setId(\"abc\");\n+    attachment.setCustomAttributes(Collections.singletonMap(\"abc\", \"def\"));\n+    attachment.setClassificationSummary(summary);\n+    attachment.setId(\"id\");\n+    attachment.setTaskId(\"taskId\");\n+    attachment.setChannel(\"channel\");\n+    attachment.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setObjectReference(reference);\n+    attachment.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentRepresentationModel repModel = assembler.toModel(attachment);\n+\n+    testEqualityAfterConversion(repModel, attachment);\n+    testLinks();\n+  }\n+\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    AttachmentImpl attachment = (AttachmentImpl) taskService.newAttachment();\n+    ObjectReference reference = new ObjectReference();\n+    ClassificationSummary summary = classService.newClassification(\"ckey\", \"cdomain\", \"MANUAL\");\n+    reference.setId(\"abc\");\n+    attachment.setCustomAttributes(Collections.singletonMap(\"abc\", \"def\"));\n+    attachment.setClassificationSummary(summary);\n+    attachment.setId(\"id\");\n+    attachment.setTaskId(\"taskId\");\n+    attachment.setChannel(\"channel\");\n+    attachment.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setObjectReference(reference);\n+    attachment.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentRepresentationModel repModel = assembler.toModel(attachment);\n+    AttachmentImpl attachment2 = assembler.toEntityModel(repModel);\n+\n+    testEqualityOfEntities(attachment, attachment2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNDI5Ng==", "bodyText": "This is not consistent. The tests above have the entity first, then the repModel", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435104296", "createdAt": "2020-06-04T09:06:16Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/AttachmentRepresentationModelAssemblerTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package pro.taskana.task.rest.assembler;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Instant;\n+import java.util.Collections;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import pro.taskana.classification.api.ClassificationService;\n+import pro.taskana.classification.api.models.ClassificationSummary;\n+import pro.taskana.classification.rest.models.ClassificationSummaryRepresentationModel;\n+import pro.taskana.common.rest.TaskanaSpringBootTest;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.Attachment;\n+import pro.taskana.task.api.models.ObjectReference;\n+import pro.taskana.task.internal.models.AttachmentImpl;\n+import pro.taskana.task.rest.models.AttachmentRepresentationModel;\n+\n+/**\n+ * Test for {@link AttachmentRepresentationModelAssembler}.\n+ */\n+@TaskanaSpringBootTest\n+class AttachmentRepresentationModelAssemblerTest {\n+\n+  @Autowired\n+  AttachmentRepresentationModelAssembler assembler;\n+\n+  @Autowired\n+  ClassificationService classService;\n+\n+  @Autowired\n+  TaskService taskService;\n+\n+  @Test\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n+    ObjectReference reference = new ObjectReference();\n+    reference.setId(\"abc\");\n+    ClassificationSummaryRepresentationModel summary\n+        = new ClassificationSummaryRepresentationModel();\n+    summary.setKey(\"keyabc\");\n+    summary.setDomain(\"DOMAIN_A\");\n+    summary.setType(\"MANUAL\");\n+    AttachmentRepresentationModel repModel = new AttachmentRepresentationModel();\n+    repModel.setCustomAttributes(Collections.singletonMap(\"abc\", \"def\"));\n+    repModel.setClassificationSummary(summary);\n+    repModel.setAttachmentId(\"id\");\n+    repModel.setTaskId(\"taskId\");\n+    repModel.setChannel(\"channel\");\n+    repModel.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setObjectReference(reference);\n+    repModel.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentImpl attachment = assembler.toEntityModel(repModel);\n+\n+    testEqualityAfterConversion(repModel, attachment);\n+  }\n+\n+\n+  @Test\n+  void should_ReturnRepresentationModel_When_ConvertingEntityToRepresentationModel() {\n+    AttachmentImpl attachment = (AttachmentImpl) taskService.newAttachment();\n+    ObjectReference reference = new ObjectReference();\n+    ClassificationSummary summary = classService.newClassification(\"ckey\", \"cdomain\", \"MANUAL\");\n+    reference.setId(\"abc\");\n+    attachment.setCustomAttributes(Collections.singletonMap(\"abc\", \"def\"));\n+    attachment.setClassificationSummary(summary);\n+    attachment.setId(\"id\");\n+    attachment.setTaskId(\"taskId\");\n+    attachment.setChannel(\"channel\");\n+    attachment.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setObjectReference(reference);\n+    attachment.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentRepresentationModel repModel = assembler.toModel(attachment);\n+\n+    testEqualityAfterConversion(repModel, attachment);\n+    testLinks();\n+  }\n+\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    AttachmentImpl attachment = (AttachmentImpl) taskService.newAttachment();\n+    ObjectReference reference = new ObjectReference();\n+    ClassificationSummary summary = classService.newClassification(\"ckey\", \"cdomain\", \"MANUAL\");\n+    reference.setId(\"abc\");\n+    attachment.setCustomAttributes(Collections.singletonMap(\"abc\", \"def\"));\n+    attachment.setClassificationSummary(summary);\n+    attachment.setId(\"id\");\n+    attachment.setTaskId(\"taskId\");\n+    attachment.setChannel(\"channel\");\n+    attachment.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setObjectReference(reference);\n+    attachment.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentRepresentationModel repModel = assembler.toModel(attachment);\n+    AttachmentImpl attachment2 = assembler.toEntityModel(repModel);\n+\n+    testEqualityOfEntities(attachment, attachment2);\n+  }\n+\n+  void testEqualityAfterConversion(AttachmentRepresentationModel repModel, Attachment attachment) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNDQ3MQ==", "bodyText": "Same as above", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435104471", "createdAt": "2020-06-04T09:06:30Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/AttachmentRepresentationModelAssemblerTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package pro.taskana.task.rest.assembler;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Instant;\n+import java.util.Collections;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import pro.taskana.classification.api.ClassificationService;\n+import pro.taskana.classification.api.models.ClassificationSummary;\n+import pro.taskana.classification.rest.models.ClassificationSummaryRepresentationModel;\n+import pro.taskana.common.rest.TaskanaSpringBootTest;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.Attachment;\n+import pro.taskana.task.api.models.ObjectReference;\n+import pro.taskana.task.internal.models.AttachmentImpl;\n+import pro.taskana.task.rest.models.AttachmentRepresentationModel;\n+\n+/**\n+ * Test for {@link AttachmentRepresentationModelAssembler}.\n+ */\n+@TaskanaSpringBootTest\n+class AttachmentRepresentationModelAssemblerTest {\n+\n+  @Autowired\n+  AttachmentRepresentationModelAssembler assembler;\n+\n+  @Autowired\n+  ClassificationService classService;\n+\n+  @Autowired\n+  TaskService taskService;\n+\n+  @Test\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n+    ObjectReference reference = new ObjectReference();\n+    reference.setId(\"abc\");\n+    ClassificationSummaryRepresentationModel summary\n+        = new ClassificationSummaryRepresentationModel();\n+    summary.setKey(\"keyabc\");\n+    summary.setDomain(\"DOMAIN_A\");\n+    summary.setType(\"MANUAL\");\n+    AttachmentRepresentationModel repModel = new AttachmentRepresentationModel();\n+    repModel.setCustomAttributes(Collections.singletonMap(\"abc\", \"def\"));\n+    repModel.setClassificationSummary(summary);\n+    repModel.setAttachmentId(\"id\");\n+    repModel.setTaskId(\"taskId\");\n+    repModel.setChannel(\"channel\");\n+    repModel.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setObjectReference(reference);\n+    repModel.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentImpl attachment = assembler.toEntityModel(repModel);\n+\n+    testEqualityAfterConversion(repModel, attachment);\n+  }\n+\n+\n+  @Test\n+  void should_ReturnRepresentationModel_When_ConvertingEntityToRepresentationModel() {\n+    AttachmentImpl attachment = (AttachmentImpl) taskService.newAttachment();\n+    ObjectReference reference = new ObjectReference();\n+    ClassificationSummary summary = classService.newClassification(\"ckey\", \"cdomain\", \"MANUAL\");\n+    reference.setId(\"abc\");\n+    attachment.setCustomAttributes(Collections.singletonMap(\"abc\", \"def\"));\n+    attachment.setClassificationSummary(summary);\n+    attachment.setId(\"id\");\n+    attachment.setTaskId(\"taskId\");\n+    attachment.setChannel(\"channel\");\n+    attachment.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setObjectReference(reference);\n+    attachment.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentRepresentationModel repModel = assembler.toModel(attachment);\n+\n+    testEqualityAfterConversion(repModel, attachment);\n+    testLinks();\n+  }\n+\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    AttachmentImpl attachment = (AttachmentImpl) taskService.newAttachment();\n+    ObjectReference reference = new ObjectReference();\n+    ClassificationSummary summary = classService.newClassification(\"ckey\", \"cdomain\", \"MANUAL\");\n+    reference.setId(\"abc\");\n+    attachment.setCustomAttributes(Collections.singletonMap(\"abc\", \"def\"));\n+    attachment.setClassificationSummary(summary);\n+    attachment.setId(\"id\");\n+    attachment.setTaskId(\"taskId\");\n+    attachment.setChannel(\"channel\");\n+    attachment.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setObjectReference(reference);\n+    attachment.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentRepresentationModel repModel = assembler.toModel(attachment);\n+    AttachmentImpl attachment2 = assembler.toEntityModel(repModel);\n+\n+    testEqualityOfEntities(attachment, attachment2);\n+  }\n+\n+  void testEqualityAfterConversion(AttachmentRepresentationModel repModel, Attachment attachment) {\n+    assertThat(repModel.getAttachmentId()).isEqualTo(attachment.getId());\n+    assertThat(repModel.getTaskId()).isEqualTo(attachment.getTaskId());\n+    assertThat(repModel.getChannel()).isEqualTo(attachment.getChannel());\n+    assertThat(repModel.getCreated()).isEqualTo(attachment.getCreated());\n+    assertThat(repModel.getModified()).isEqualTo(attachment.getModified());\n+    assertThat(repModel.getObjectReference()).isEqualTo(attachment.getObjectReference());\n+    assertThat(repModel.getReceived()).isEqualTo(attachment.getReceived());\n+    assertThat(repModel.getClassificationSummary().getClassificationId())\n+        .isEqualTo(attachment.getClassificationSummary().getId());\n+    assertThat(repModel.getCustomAttributes()).isEqualTo(attachment.getCustomAttributes());\n+  }\n+\n+  void testLinks() {\n+  }\n+\n+  private void testEqualityOfEntities(Attachment attachment, Attachment attachment2) {\n+    assertThat(attachment2.getId()).isEqualTo(attachment.getId());\n+    assertThat(attachment2.getTaskId()).isEqualTo(attachment.getTaskId());\n+    assertThat(attachment2.getChannel()).isEqualTo(attachment.getChannel());\n+    assertThat(attachment2.getCreated()).isEqualTo(attachment.getCreated());\n+    assertThat(attachment2.getModified()).isEqualTo(attachment.getModified());\n+    assertThat(attachment2.getObjectReference()).isEqualTo(attachment.getObjectReference());\n+    assertThat(attachment2.getReceived()).isEqualTo(attachment.getReceived());\n+    assertThat(attachment2.getClassificationSummary().getId())\n+        .isEqualTo(attachment.getClassificationSummary().getId());\n+    assertThat(attachment2.getCustomAttributes()).isEqualTo(attachment.getCustomAttributes());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNDY3Ng==", "bodyText": "Please use constructor injection.", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435104676", "createdAt": "2020-06-04T09:06:49Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/AttachmentSummaryRepresentationModelAssemblerTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package pro.taskana.task.rest.assembler;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Instant;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import pro.taskana.classification.api.ClassificationService;\n+import pro.taskana.classification.api.models.ClassificationSummary;\n+import pro.taskana.classification.rest.models.ClassificationSummaryRepresentationModel;\n+import pro.taskana.common.rest.TaskanaSpringBootTest;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.AttachmentSummary;\n+import pro.taskana.task.api.models.ObjectReference;\n+import pro.taskana.task.internal.models.AttachmentSummaryImpl;\n+import pro.taskana.task.rest.models.AttachmentSummaryRepresentationModel;\n+\n+/**\n+ * Test for {@link AttachmentSummaryRepresentationModelAssembler}.\n+ */\n+@TaskanaSpringBootTest\n+class AttachmentSummaryRepresentationModelAssemblerTest {\n+\n+  @Autowired\n+  AttachmentSummaryRepresentationModelAssembler assembler;\n+\n+  @Autowired\n+  ClassificationService classService;\n+\n+  @Autowired\n+  TaskService taskService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNDgwNw==", "bodyText": "cast not necessary", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435104807", "createdAt": "2020-06-04T09:07:02Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/AttachmentSummaryRepresentationModelAssemblerTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package pro.taskana.task.rest.assembler;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Instant;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import pro.taskana.classification.api.ClassificationService;\n+import pro.taskana.classification.api.models.ClassificationSummary;\n+import pro.taskana.classification.rest.models.ClassificationSummaryRepresentationModel;\n+import pro.taskana.common.rest.TaskanaSpringBootTest;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.AttachmentSummary;\n+import pro.taskana.task.api.models.ObjectReference;\n+import pro.taskana.task.internal.models.AttachmentSummaryImpl;\n+import pro.taskana.task.rest.models.AttachmentSummaryRepresentationModel;\n+\n+/**\n+ * Test for {@link AttachmentSummaryRepresentationModelAssembler}.\n+ */\n+@TaskanaSpringBootTest\n+class AttachmentSummaryRepresentationModelAssemblerTest {\n+\n+  @Autowired\n+  AttachmentSummaryRepresentationModelAssembler assembler;\n+\n+  @Autowired\n+  ClassificationService classService;\n+\n+  @Autowired\n+  TaskService taskService;\n+\n+  @Test\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n+    ObjectReference reference = new ObjectReference();\n+    reference.setId(\"abc\");\n+    ClassificationSummaryRepresentationModel summary\n+        = new ClassificationSummaryRepresentationModel();\n+    summary.setKey(\"keyabc\");\n+    summary.setDomain(\"DOMAIN_A\");\n+    summary.setType(\"MANUAL\");\n+    AttachmentSummaryRepresentationModel repModel = new AttachmentSummaryRepresentationModel();\n+    repModel.setClassificationSummary(summary);\n+    repModel.setAttachmentId(\"id\");\n+    repModel.setTaskId(\"taskId\");\n+    repModel.setChannel(\"channel\");\n+    repModel.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setObjectReference(reference);\n+    repModel.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentSummaryImpl attachment = (AttachmentSummaryImpl) assembler.toEntityModel(repModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNTAxNA==", "bodyText": "same as above", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435105014", "createdAt": "2020-06-04T09:07:23Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/AttachmentSummaryRepresentationModelAssemblerTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package pro.taskana.task.rest.assembler;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Instant;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import pro.taskana.classification.api.ClassificationService;\n+import pro.taskana.classification.api.models.ClassificationSummary;\n+import pro.taskana.classification.rest.models.ClassificationSummaryRepresentationModel;\n+import pro.taskana.common.rest.TaskanaSpringBootTest;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.AttachmentSummary;\n+import pro.taskana.task.api.models.ObjectReference;\n+import pro.taskana.task.internal.models.AttachmentSummaryImpl;\n+import pro.taskana.task.rest.models.AttachmentSummaryRepresentationModel;\n+\n+/**\n+ * Test for {@link AttachmentSummaryRepresentationModelAssembler}.\n+ */\n+@TaskanaSpringBootTest\n+class AttachmentSummaryRepresentationModelAssemblerTest {\n+\n+  @Autowired\n+  AttachmentSummaryRepresentationModelAssembler assembler;\n+\n+  @Autowired\n+  ClassificationService classService;\n+\n+  @Autowired\n+  TaskService taskService;\n+\n+  @Test\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n+    ObjectReference reference = new ObjectReference();\n+    reference.setId(\"abc\");\n+    ClassificationSummaryRepresentationModel summary\n+        = new ClassificationSummaryRepresentationModel();\n+    summary.setKey(\"keyabc\");\n+    summary.setDomain(\"DOMAIN_A\");\n+    summary.setType(\"MANUAL\");\n+    AttachmentSummaryRepresentationModel repModel = new AttachmentSummaryRepresentationModel();\n+    repModel.setClassificationSummary(summary);\n+    repModel.setAttachmentId(\"id\");\n+    repModel.setTaskId(\"taskId\");\n+    repModel.setChannel(\"channel\");\n+    repModel.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setObjectReference(reference);\n+    repModel.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentSummaryImpl attachment = (AttachmentSummaryImpl) assembler.toEntityModel(repModel);\n+\n+    testEqualityAfterConversion(repModel, attachment);\n+  }\n+\n+\n+  @Test\n+  void should_ReturnRepresentationModel_When_ConvertingEntityToRepresentationModel() {\n+    AttachmentSummaryImpl attachment = (AttachmentSummaryImpl) taskService.newAttachment();\n+    ObjectReference reference = new ObjectReference();\n+    ClassificationSummary summary = classService.newClassification(\"ckey\", \"cdomain\", \"MANUAL\");\n+    reference.setId(\"abc\");\n+    attachment.setClassificationSummary(summary);\n+    attachment.setId(\"id\");\n+    attachment.setTaskId(\"taskId\");\n+    attachment.setChannel(\"channel\");\n+    attachment.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setObjectReference(reference);\n+    attachment.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentSummaryRepresentationModel repModel = assembler.toModel(attachment);\n+\n+    testEqualityAfterConversion(repModel, attachment);\n+    testLinks();\n+  }\n+\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    AttachmentSummaryImpl attachment = (AttachmentSummaryImpl) taskService.newAttachment();\n+    ObjectReference reference = new ObjectReference();\n+    ClassificationSummary summary = classService.newClassification(\"ckey\", \"cdomain\", \"MANUAL\");\n+    reference.setId(\"abc\");\n+    attachment.setClassificationSummary(summary);\n+    attachment.setId(\"id\");\n+    attachment.setTaskId(\"taskId\");\n+    attachment.setChannel(\"channel\");\n+    attachment.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setObjectReference(reference);\n+    attachment.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentSummaryRepresentationModel repModel = assembler.toModel(attachment);\n+    AttachmentSummaryImpl attachment2 = (AttachmentSummaryImpl) assembler.toEntityModel(repModel);\n+\n+    testEqualityOfEntities(attachment, attachment2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNTExNQ==", "bodyText": "can be removed", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435105115", "createdAt": "2020-06-04T09:07:33Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/AttachmentSummaryRepresentationModelAssemblerTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package pro.taskana.task.rest.assembler;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Instant;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import pro.taskana.classification.api.ClassificationService;\n+import pro.taskana.classification.api.models.ClassificationSummary;\n+import pro.taskana.classification.rest.models.ClassificationSummaryRepresentationModel;\n+import pro.taskana.common.rest.TaskanaSpringBootTest;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.AttachmentSummary;\n+import pro.taskana.task.api.models.ObjectReference;\n+import pro.taskana.task.internal.models.AttachmentSummaryImpl;\n+import pro.taskana.task.rest.models.AttachmentSummaryRepresentationModel;\n+\n+/**\n+ * Test for {@link AttachmentSummaryRepresentationModelAssembler}.\n+ */\n+@TaskanaSpringBootTest\n+class AttachmentSummaryRepresentationModelAssemblerTest {\n+\n+  @Autowired\n+  AttachmentSummaryRepresentationModelAssembler assembler;\n+\n+  @Autowired\n+  ClassificationService classService;\n+\n+  @Autowired\n+  TaskService taskService;\n+\n+  @Test\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n+    ObjectReference reference = new ObjectReference();\n+    reference.setId(\"abc\");\n+    ClassificationSummaryRepresentationModel summary\n+        = new ClassificationSummaryRepresentationModel();\n+    summary.setKey(\"keyabc\");\n+    summary.setDomain(\"DOMAIN_A\");\n+    summary.setType(\"MANUAL\");\n+    AttachmentSummaryRepresentationModel repModel = new AttachmentSummaryRepresentationModel();\n+    repModel.setClassificationSummary(summary);\n+    repModel.setAttachmentId(\"id\");\n+    repModel.setTaskId(\"taskId\");\n+    repModel.setChannel(\"channel\");\n+    repModel.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setObjectReference(reference);\n+    repModel.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentSummaryImpl attachment = (AttachmentSummaryImpl) assembler.toEntityModel(repModel);\n+\n+    testEqualityAfterConversion(repModel, attachment);\n+  }\n+\n+\n+  @Test\n+  void should_ReturnRepresentationModel_When_ConvertingEntityToRepresentationModel() {\n+    AttachmentSummaryImpl attachment = (AttachmentSummaryImpl) taskService.newAttachment();\n+    ObjectReference reference = new ObjectReference();\n+    ClassificationSummary summary = classService.newClassification(\"ckey\", \"cdomain\", \"MANUAL\");\n+    reference.setId(\"abc\");\n+    attachment.setClassificationSummary(summary);\n+    attachment.setId(\"id\");\n+    attachment.setTaskId(\"taskId\");\n+    attachment.setChannel(\"channel\");\n+    attachment.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setObjectReference(reference);\n+    attachment.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentSummaryRepresentationModel repModel = assembler.toModel(attachment);\n+\n+    testEqualityAfterConversion(repModel, attachment);\n+    testLinks();\n+  }\n+\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    AttachmentSummaryImpl attachment = (AttachmentSummaryImpl) taskService.newAttachment();\n+    ObjectReference reference = new ObjectReference();\n+    ClassificationSummary summary = classService.newClassification(\"ckey\", \"cdomain\", \"MANUAL\");\n+    reference.setId(\"abc\");\n+    attachment.setClassificationSummary(summary);\n+    attachment.setId(\"id\");\n+    attachment.setTaskId(\"taskId\");\n+    attachment.setChannel(\"channel\");\n+    attachment.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    attachment.setObjectReference(reference);\n+    attachment.setReceived(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+\n+    AttachmentSummaryRepresentationModel repModel = assembler.toModel(attachment);\n+    AttachmentSummaryImpl attachment2 = (AttachmentSummaryImpl) assembler.toEntityModel(repModel);\n+\n+    testEqualityOfEntities(attachment, attachment2);\n+  }\n+\n+  void testEqualityAfterConversion(AttachmentSummaryRepresentationModel repModel,\n+      AttachmentSummary attachment) {\n+    assertThat(repModel.getAttachmentId()).isEqualTo(attachment.getId());\n+    assertThat(repModel.getTaskId()).isEqualTo(attachment.getTaskId());\n+    assertThat(repModel.getChannel()).isEqualTo(attachment.getChannel());\n+    assertThat(repModel.getCreated()).isEqualTo(attachment.getCreated());\n+    assertThat(repModel.getModified()).isEqualTo(attachment.getModified());\n+    assertThat(repModel.getObjectReference()).isEqualTo(attachment.getObjectReference());\n+    assertThat(repModel.getReceived()).isEqualTo(attachment.getReceived());\n+    assertThat(repModel.getClassificationSummary().getClassificationId())\n+        .isEqualTo(attachment.getClassificationSummary().getId());\n+  }\n+\n+  void testLinks() {\n+  }\n+\n+  private void testEqualityOfEntities(AttachmentSummary attachment, AttachmentSummary attachment2) {\n+    assertThat(attachment2.getId()).isEqualTo(attachment.getId());\n+    assertThat(attachment2.getTaskId()).isEqualTo(attachment.getTaskId());\n+    assertThat(attachment2.getChannel()).isEqualTo(attachment.getChannel());\n+    assertThat(attachment2.getCreated()).isEqualTo(attachment.getCreated());\n+    assertThat(attachment2.getModified()).isEqualTo(attachment.getModified());\n+    assertThat(attachment2.getObjectReference()).isEqualTo(attachment.getObjectReference());\n+    assertThat(attachment2.getReceived()).isEqualTo(attachment.getReceived());\n+    assertThat(attachment2.getClassificationSummary().getId())\n+        .isEqualTo(attachment.getClassificationSummary().getId());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNTI4MQ==", "bodyText": "no cast necessary", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435105281", "createdAt": "2020-06-04T09:07:47Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/TaskCommentRepresentationModelAssemblerTest.java", "diffHunk": "@@ -63,6 +63,23 @@ void taskCommentResourceToModel() {\n     testEquality(taskComment, taskCommentRepresentationModel);\n   }\n \n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    TaskCommentImpl taskComment =\n+        (TaskCommentImpl) taskService.newTaskComment(\"TKI:000000000000000000000000000000000000\");\n+    taskComment.setCreator(\"user_1_1\");\n+    taskComment.setTextField(\"this is a task comment\");\n+    taskComment.setCreated(Instant.parse(\"2010-01-01T12:00:00Z\"));\n+    taskComment.setModified(Instant.parse(\"2011-11-11T11:00:00Z\"));\n+\n+    TaskCommentRepresentationModel repModel =\n+        taskCommentRepresentationModelAssembler.toModel(taskComment);\n+    TaskCommentImpl taskComment2\n+        = (TaskCommentImpl) taskCommentRepresentationModelAssembler.toEntityModel(repModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNjAzMQ==", "bodyText": "can be removed", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435106031", "createdAt": "2020-06-04T09:09:06Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/TaskCommentRepresentationModelAssemblerTest.java", "diffHunk": "@@ -73,4 +90,17 @@ private void testEquality(\n     assertThat(taskComment.getCreated()).isEqualTo(taskCommentRepresentationModel.getCreated());\n     assertThat(taskComment.getModified()).isEqualTo(taskCommentRepresentationModel.getModified());\n   }\n+\n+  private void testEqualityOfEntities(\n+      TaskComment taskComment, TaskComment taskComment2) {\n+    assertThat(taskComment.getTaskId()).isEqualTo(taskComment2.getTaskId());\n+    assertThat(taskComment.getId()).isEqualTo(taskComment2.getId());\n+    assertThat(taskComment.getCreator()).isEqualTo(taskComment2.getCreator());\n+    assertThat(taskComment.getTextField()).isEqualTo(taskComment2.getTextField());\n+    assertThat(taskComment.getCreated()).isEqualTo(taskComment2.getCreated());\n+    assertThat(taskComment.getModified()).isEqualTo(taskComment2.getModified());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNjIyNQ==", "bodyText": "I am missing the RepresentationModel as parameter (for all testLinks methods).", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435106225", "createdAt": "2020-06-04T09:09:24Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/TaskCommentRepresentationModelAssemblerTest.java", "diffHunk": "@@ -73,4 +90,17 @@ private void testEquality(\n     assertThat(taskComment.getCreated()).isEqualTo(taskCommentRepresentationModel.getCreated());\n     assertThat(taskComment.getModified()).isEqualTo(taskCommentRepresentationModel.getModified());\n   }\n+\n+  private void testEqualityOfEntities(\n+      TaskComment taskComment, TaskComment taskComment2) {\n+    assertThat(taskComment.getTaskId()).isEqualTo(taskComment2.getTaskId());\n+    assertThat(taskComment.getId()).isEqualTo(taskComment2.getId());\n+    assertThat(taskComment.getCreator()).isEqualTo(taskComment2.getCreator());\n+    assertThat(taskComment.getTextField()).isEqualTo(taskComment2.getTextField());\n+    assertThat(taskComment.getCreated()).isEqualTo(taskComment2.getCreated());\n+    assertThat(taskComment.getModified()).isEqualTo(taskComment2.getModified());\n+  }\n+\n+  private void testLinks() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNjU4NA==", "bodyText": "no cast necessary", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435106584", "createdAt": "2020-06-04T09:09:59Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/TaskRepresentationModelAssemberTest.java", "diffHunk": "@@ -62,68 +65,70 @@ void testSimpleResourceToModel() throws InvalidArgumentException {\n     classificationSummary.setKey(\"keyabc\");\n     classificationSummary.setDomain(\"DOMAIN_A\");\n     classificationSummary.setType(\"MANUAL\");\n-    AttachmentRepresentationModel attachement = new AttachmentRepresentationModel();\n-    attachement.setClassificationSummary(classificationSummary);\n-    attachement.setAttachmentId(\"attachementId\");\n-    TaskRepresentationModel resource = new TaskRepresentationModel();\n-    resource.setTaskId(\"taskId\");\n-    resource.setExternalId(\"externalId\");\n-    resource.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n-    resource.setClaimed(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n-    resource.setCompleted(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n-    resource.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n-    resource.setPlanned(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n-    resource.setDue(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n-    resource.setName(\"name\");\n-    resource.setCreator(\"creator\");\n-    resource.setDescription(\"desc\");\n-    resource.setNote(\"note\");\n-    resource.setPriority(123);\n-    resource.setState(TaskState.READY);\n-    resource.setClassificationSummary(classificationSummary);\n-    resource.setWorkbasketSummary(workbasketResource);\n-    resource.setBusinessProcessId(\"businessProcessId\");\n-    resource.setParentBusinessProcessId(\"parentBusinessProcessId\");\n-    resource.setOwner(\"owner\");\n-    resource.setPrimaryObjRef(primaryObjRef);\n-    resource.setRead(true);\n-    resource.setTransferred(true);\n-    resource.setCustomAttributes(\n+    AttachmentRepresentationModel attachment = new AttachmentRepresentationModel();\n+    attachment.setClassificationSummary(classificationSummary);\n+    attachment.setAttachmentId(\"attachmentId\");\n+    TaskRepresentationModel repModel = new TaskRepresentationModel();\n+    repModel.setTaskId(\"taskId\");\n+    repModel.setExternalId(\"externalId\");\n+    repModel.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setClaimed(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setCompleted(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setPlanned(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setDue(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setName(\"name\");\n+    repModel.setCreator(\"creator\");\n+    repModel.setDescription(\"desc\");\n+    repModel.setNote(\"note\");\n+    repModel.setPriority(123);\n+    repModel.setState(TaskState.READY);\n+    repModel.setClassificationSummary(classificationSummary);\n+    repModel.setWorkbasketSummary(workbasketResource);\n+    repModel.setBusinessProcessId(\"businessProcessId\");\n+    repModel.setParentBusinessProcessId(\"parentBusinessProcessId\");\n+    repModel.setOwner(\"owner\");\n+    repModel.setPrimaryObjRef(primaryObjRef);\n+    repModel.setRead(true);\n+    repModel.setTransferred(true);\n+    repModel.setCustomAttributes(\n         Collections.singletonList(TaskRepresentationModel.CustomAttribute.of(\"abc\", \"def\")));\n-    resource.setCallbackInfo(\n+    repModel.setCallbackInfo(\n         Collections.singletonList(TaskRepresentationModel.CustomAttribute.of(\"ghi\", \"jkl\")));\n-    resource.setAttachments(Collections.singletonList(attachement));\n-    resource.setCustom1(\"custom1\");\n-    resource.setCustom2(\"custom2\");\n-    resource.setCustom3(\"custom3\");\n-    resource.setCustom4(\"custom4\");\n-    resource.setCustom5(\"custom5\");\n-    resource.setCustom6(\"custom6\");\n-    resource.setCustom7(\"custom7\");\n-    resource.setCustom8(\"custom8\");\n-    resource.setCustom9(\"custom9\");\n-    resource.setCustom10(\"custom10\");\n-    resource.setCustom11(\"custom11\");\n-    resource.setCustom12(\"custom12\");\n-    resource.setCustom13(\"custom13\");\n-    resource.setCustom14(\"custom14\");\n-    resource.setCustom15(\"custom15\");\n+    repModel.setAttachments(Collections.singletonList(attachment));\n+    repModel.setCustom1(\"custom1\");\n+    repModel.setCustom2(\"custom2\");\n+    repModel.setCustom3(\"custom3\");\n+    repModel.setCustom4(\"custom4\");\n+    repModel.setCustom5(\"custom5\");\n+    repModel.setCustom6(\"custom6\");\n+    repModel.setCustom7(\"custom7\");\n+    repModel.setCustom8(\"custom8\");\n+    repModel.setCustom9(\"custom9\");\n+    repModel.setCustom10(\"custom10\");\n+    repModel.setCustom11(\"custom11\");\n+    repModel.setCustom12(\"custom12\");\n+    repModel.setCustom13(\"custom13\");\n+    repModel.setCustom14(\"custom14\");\n+    repModel.setCustom15(\"custom15\");\n+    repModel.setCustom16(\"custom16\");\n     // when\n-    Task task = taskRepresentationModelAssembler.toEntityModel(resource);\n+    TaskImpl task = (TaskImpl) taskRepresentationModelAssembler.toEntityModel(repModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNzMzOA==", "bodyText": "no cast necessary", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435107338", "createdAt": "2020-06-04T09:11:16Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/TaskRepresentationModelAssemberTest.java", "diffHunk": "@@ -166,66 +171,170 @@ void testModelToResource() throws InvalidArgumentException {\n     task.setCustom13(\"custom13\");\n     task.setCustom14(\"custom14\");\n     task.setCustom15(\"custom15\");\n+    task.setCustom16(\"custom16\");\n     // when\n-    TaskRepresentationModel resource = taskRepresentationModelAssembler.toModel(task);\n+    TaskRepresentationModel repModel = taskRepresentationModelAssembler.toModel(task);\n     // then\n-    testEquality(task, resource);\n-    testLinks(resource);\n+    testEqualityAfterConversion(task, repModel);\n+    testLinks(repModel);\n   }\n \n-  void testEquality(Task task, TaskRepresentationModel resource) throws InvalidArgumentException {\n-    assertThat(resource.getTaskId()).isEqualTo(task.getId());\n-    assertThat(resource.getExternalId()).isEqualTo(task.getExternalId());\n-    assertThat(resource.getCreated())\n-        .isEqualTo(task.getCreated() == null ? null : task.getCreated().toString());\n-    assertThat(resource.getClaimed())\n-        .isEqualTo(task.getClaimed() == null ? null : task.getClaimed().toString());\n-    assertThat(resource.getCompleted())\n-        .isEqualTo(task.getCompleted() == null ? null : task.getCompleted().toString());\n-    assertThat(resource.getModified())\n-        .isEqualTo(task.getModified() == null ? null : task.getModified().toString());\n-    assertThat(resource.getPlanned())\n-        .isEqualTo(task.getPlanned() == null ? null : task.getPlanned().toString());\n-    assertThat(resource.getDue())\n-        .isEqualTo(task.getDue() == null ? null : task.getDue().toString());\n-    assertThat(resource.getName()).isEqualTo(task.getName());\n-    assertThat(resource.getCreator()).isEqualTo(task.getCreator());\n-    assertThat(resource.getDescription()).isEqualTo(task.getDescription());\n-    assertThat(resource.getNote()).isEqualTo(task.getNote());\n-    assertThat(resource.getPriority()).isEqualTo(task.getPriority());\n-    assertThat(resource.getState()).isEqualTo(task.getState());\n-    assertThat(resource.getClassificationSummary().getClassificationId())\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity()\n+      throws InvalidArgumentException {\n+    // given\n+    ObjectReference primaryObjRef = new ObjectReference();\n+    primaryObjRef.setId(\"abc\");\n+    final Workbasket workbasket = workbasketService.newWorkbasket(\"key\", \"domain\");\n+    ClassificationSummary classification =\n+        classificationService.newClassification(\"ckey\", \"cdomain\", \"MANUAL\");\n+    AttachmentImpl attachment = (AttachmentImpl) taskService.newAttachment();\n+    attachment.setClassificationSummary(classification);\n+    attachment.setId(\"attachmentId\");\n+    TaskImpl task = (TaskImpl) taskService.newTask();\n+    task.setId(\"taskId\");\n+    task.setExternalId(\"externalId\");\n+    task.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setClaimed(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setCompleted(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setPlanned(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setDue(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setName(\"name\");\n+    task.setCreator(\"creator\");\n+    task.setDescription(\"desc\");\n+    task.setNote(\"note\");\n+    task.setPriority(123);\n+    task.setState(TaskState.READY);\n+    task.setClassificationSummary(classification);\n+    task.setWorkbasketSummary(workbasket.asSummary());\n+    task.setBusinessProcessId(\"businessProcessId\");\n+    task.setParentBusinessProcessId(\"parentBusinessProcessId\");\n+    task.setOwner(\"owner\");\n+    task.setPrimaryObjRef(primaryObjRef);\n+    task.setRead(true);\n+    task.setTransferred(true);\n+    task.setCustomAttributes(Collections.singletonMap(\"abc\", \"def\"));\n+    task.setCallbackInfo(Collections.singletonMap(\"ghi\", \"jkl\"));\n+    task.setAttachments(Collections.singletonList(attachment));\n+    task.setCustom1(\"custom1\");\n+    task.setCustom2(\"custom2\");\n+    task.setCustom3(\"custom3\");\n+    task.setCustom4(\"custom4\");\n+    task.setCustom5(\"custom5\");\n+    task.setCustom6(\"custom6\");\n+    task.setCustom7(\"custom7\");\n+    task.setCustom8(\"custom8\");\n+    task.setCustom9(\"custom9\");\n+    task.setCustom10(\"custom10\");\n+    task.setCustom11(\"custom11\");\n+    task.setCustom12(\"custom12\");\n+    task.setCustom13(\"custom13\");\n+    task.setCustom14(\"custom14\");\n+    task.setCustom15(\"custom15\");\n+    task.setCustom16(\"custom16\");\n+    // when\n+    TaskRepresentationModel repModel = taskRepresentationModelAssembler.toModel(task);\n+    TaskImpl task2 = (TaskImpl) taskRepresentationModelAssembler.toEntityModel(repModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNzQwOA==", "bodyText": "same as above.", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435107408", "createdAt": "2020-06-04T09:11:23Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/TaskRepresentationModelAssemberTest.java", "diffHunk": "@@ -166,66 +171,170 @@ void testModelToResource() throws InvalidArgumentException {\n     task.setCustom13(\"custom13\");\n     task.setCustom14(\"custom14\");\n     task.setCustom15(\"custom15\");\n+    task.setCustom16(\"custom16\");\n     // when\n-    TaskRepresentationModel resource = taskRepresentationModelAssembler.toModel(task);\n+    TaskRepresentationModel repModel = taskRepresentationModelAssembler.toModel(task);\n     // then\n-    testEquality(task, resource);\n-    testLinks(resource);\n+    testEqualityAfterConversion(task, repModel);\n+    testLinks(repModel);\n   }\n \n-  void testEquality(Task task, TaskRepresentationModel resource) throws InvalidArgumentException {\n-    assertThat(resource.getTaskId()).isEqualTo(task.getId());\n-    assertThat(resource.getExternalId()).isEqualTo(task.getExternalId());\n-    assertThat(resource.getCreated())\n-        .isEqualTo(task.getCreated() == null ? null : task.getCreated().toString());\n-    assertThat(resource.getClaimed())\n-        .isEqualTo(task.getClaimed() == null ? null : task.getClaimed().toString());\n-    assertThat(resource.getCompleted())\n-        .isEqualTo(task.getCompleted() == null ? null : task.getCompleted().toString());\n-    assertThat(resource.getModified())\n-        .isEqualTo(task.getModified() == null ? null : task.getModified().toString());\n-    assertThat(resource.getPlanned())\n-        .isEqualTo(task.getPlanned() == null ? null : task.getPlanned().toString());\n-    assertThat(resource.getDue())\n-        .isEqualTo(task.getDue() == null ? null : task.getDue().toString());\n-    assertThat(resource.getName()).isEqualTo(task.getName());\n-    assertThat(resource.getCreator()).isEqualTo(task.getCreator());\n-    assertThat(resource.getDescription()).isEqualTo(task.getDescription());\n-    assertThat(resource.getNote()).isEqualTo(task.getNote());\n-    assertThat(resource.getPriority()).isEqualTo(task.getPriority());\n-    assertThat(resource.getState()).isEqualTo(task.getState());\n-    assertThat(resource.getClassificationSummary().getClassificationId())\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity()\n+      throws InvalidArgumentException {\n+    // given\n+    ObjectReference primaryObjRef = new ObjectReference();\n+    primaryObjRef.setId(\"abc\");\n+    final Workbasket workbasket = workbasketService.newWorkbasket(\"key\", \"domain\");\n+    ClassificationSummary classification =\n+        classificationService.newClassification(\"ckey\", \"cdomain\", \"MANUAL\");\n+    AttachmentImpl attachment = (AttachmentImpl) taskService.newAttachment();\n+    attachment.setClassificationSummary(classification);\n+    attachment.setId(\"attachmentId\");\n+    TaskImpl task = (TaskImpl) taskService.newTask();\n+    task.setId(\"taskId\");\n+    task.setExternalId(\"externalId\");\n+    task.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setClaimed(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setCompleted(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setPlanned(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setDue(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setName(\"name\");\n+    task.setCreator(\"creator\");\n+    task.setDescription(\"desc\");\n+    task.setNote(\"note\");\n+    task.setPriority(123);\n+    task.setState(TaskState.READY);\n+    task.setClassificationSummary(classification);\n+    task.setWorkbasketSummary(workbasket.asSummary());\n+    task.setBusinessProcessId(\"businessProcessId\");\n+    task.setParentBusinessProcessId(\"parentBusinessProcessId\");\n+    task.setOwner(\"owner\");\n+    task.setPrimaryObjRef(primaryObjRef);\n+    task.setRead(true);\n+    task.setTransferred(true);\n+    task.setCustomAttributes(Collections.singletonMap(\"abc\", \"def\"));\n+    task.setCallbackInfo(Collections.singletonMap(\"ghi\", \"jkl\"));\n+    task.setAttachments(Collections.singletonList(attachment));\n+    task.setCustom1(\"custom1\");\n+    task.setCustom2(\"custom2\");\n+    task.setCustom3(\"custom3\");\n+    task.setCustom4(\"custom4\");\n+    task.setCustom5(\"custom5\");\n+    task.setCustom6(\"custom6\");\n+    task.setCustom7(\"custom7\");\n+    task.setCustom8(\"custom8\");\n+    task.setCustom9(\"custom9\");\n+    task.setCustom10(\"custom10\");\n+    task.setCustom11(\"custom11\");\n+    task.setCustom12(\"custom12\");\n+    task.setCustom13(\"custom13\");\n+    task.setCustom14(\"custom14\");\n+    task.setCustom15(\"custom15\");\n+    task.setCustom16(\"custom16\");\n+    // when\n+    TaskRepresentationModel repModel = taskRepresentationModelAssembler.toModel(task);\n+    TaskImpl task2 = (TaskImpl) taskRepresentationModelAssembler.toEntityModel(repModel);\n+    // then\n+    testEqualityOfEntities(task, task2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNzczOA==", "bodyText": "can be removed", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435107738", "createdAt": "2020-06-04T09:11:57Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/TaskRepresentationModelAssemberTest.java", "diffHunk": "@@ -166,66 +171,170 @@ void testModelToResource() throws InvalidArgumentException {\n     task.setCustom13(\"custom13\");\n     task.setCustom14(\"custom14\");\n     task.setCustom15(\"custom15\");\n+    task.setCustom16(\"custom16\");\n     // when\n-    TaskRepresentationModel resource = taskRepresentationModelAssembler.toModel(task);\n+    TaskRepresentationModel repModel = taskRepresentationModelAssembler.toModel(task);\n     // then\n-    testEquality(task, resource);\n-    testLinks(resource);\n+    testEqualityAfterConversion(task, repModel);\n+    testLinks(repModel);\n   }\n \n-  void testEquality(Task task, TaskRepresentationModel resource) throws InvalidArgumentException {\n-    assertThat(resource.getTaskId()).isEqualTo(task.getId());\n-    assertThat(resource.getExternalId()).isEqualTo(task.getExternalId());\n-    assertThat(resource.getCreated())\n-        .isEqualTo(task.getCreated() == null ? null : task.getCreated().toString());\n-    assertThat(resource.getClaimed())\n-        .isEqualTo(task.getClaimed() == null ? null : task.getClaimed().toString());\n-    assertThat(resource.getCompleted())\n-        .isEqualTo(task.getCompleted() == null ? null : task.getCompleted().toString());\n-    assertThat(resource.getModified())\n-        .isEqualTo(task.getModified() == null ? null : task.getModified().toString());\n-    assertThat(resource.getPlanned())\n-        .isEqualTo(task.getPlanned() == null ? null : task.getPlanned().toString());\n-    assertThat(resource.getDue())\n-        .isEqualTo(task.getDue() == null ? null : task.getDue().toString());\n-    assertThat(resource.getName()).isEqualTo(task.getName());\n-    assertThat(resource.getCreator()).isEqualTo(task.getCreator());\n-    assertThat(resource.getDescription()).isEqualTo(task.getDescription());\n-    assertThat(resource.getNote()).isEqualTo(task.getNote());\n-    assertThat(resource.getPriority()).isEqualTo(task.getPriority());\n-    assertThat(resource.getState()).isEqualTo(task.getState());\n-    assertThat(resource.getClassificationSummary().getClassificationId())\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity()\n+      throws InvalidArgumentException {\n+    // given\n+    ObjectReference primaryObjRef = new ObjectReference();\n+    primaryObjRef.setId(\"abc\");\n+    final Workbasket workbasket = workbasketService.newWorkbasket(\"key\", \"domain\");\n+    ClassificationSummary classification =\n+        classificationService.newClassification(\"ckey\", \"cdomain\", \"MANUAL\");\n+    AttachmentImpl attachment = (AttachmentImpl) taskService.newAttachment();\n+    attachment.setClassificationSummary(classification);\n+    attachment.setId(\"attachmentId\");\n+    TaskImpl task = (TaskImpl) taskService.newTask();\n+    task.setId(\"taskId\");\n+    task.setExternalId(\"externalId\");\n+    task.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setClaimed(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setCompleted(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setPlanned(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setDue(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setName(\"name\");\n+    task.setCreator(\"creator\");\n+    task.setDescription(\"desc\");\n+    task.setNote(\"note\");\n+    task.setPriority(123);\n+    task.setState(TaskState.READY);\n+    task.setClassificationSummary(classification);\n+    task.setWorkbasketSummary(workbasket.asSummary());\n+    task.setBusinessProcessId(\"businessProcessId\");\n+    task.setParentBusinessProcessId(\"parentBusinessProcessId\");\n+    task.setOwner(\"owner\");\n+    task.setPrimaryObjRef(primaryObjRef);\n+    task.setRead(true);\n+    task.setTransferred(true);\n+    task.setCustomAttributes(Collections.singletonMap(\"abc\", \"def\"));\n+    task.setCallbackInfo(Collections.singletonMap(\"ghi\", \"jkl\"));\n+    task.setAttachments(Collections.singletonList(attachment));\n+    task.setCustom1(\"custom1\");\n+    task.setCustom2(\"custom2\");\n+    task.setCustom3(\"custom3\");\n+    task.setCustom4(\"custom4\");\n+    task.setCustom5(\"custom5\");\n+    task.setCustom6(\"custom6\");\n+    task.setCustom7(\"custom7\");\n+    task.setCustom8(\"custom8\");\n+    task.setCustom9(\"custom9\");\n+    task.setCustom10(\"custom10\");\n+    task.setCustom11(\"custom11\");\n+    task.setCustom12(\"custom12\");\n+    task.setCustom13(\"custom13\");\n+    task.setCustom14(\"custom14\");\n+    task.setCustom15(\"custom15\");\n+    task.setCustom16(\"custom16\");\n+    // when\n+    TaskRepresentationModel repModel = taskRepresentationModelAssembler.toModel(task);\n+    TaskImpl task2 = (TaskImpl) taskRepresentationModelAssembler.toEntityModel(repModel);\n+    // then\n+    testEqualityOfEntities(task, task2);\n+  }\n+\n+  private void testEqualityAfterConversion(Task task, TaskRepresentationModel repModel)\n+      throws InvalidArgumentException {\n+    assertThat(repModel.getTaskId()).isEqualTo(task.getId());\n+    assertThat(repModel.getExternalId()).isEqualTo(task.getExternalId());\n+    assertThat(repModel.getCreated()).isEqualTo(task.getCreated());\n+    assertThat(repModel.getClaimed()).isEqualTo(task.getClaimed());\n+    assertThat(repModel.getCompleted()).isEqualTo(task.getCompleted());\n+    assertThat(repModel.getModified()).isEqualTo(task.getModified());\n+    assertThat(repModel.getPlanned()).isEqualTo(task.getPlanned());\n+    assertThat(repModel.getDue()).isEqualTo(task.getDue());\n+    assertThat(repModel.getName()).isEqualTo(task.getName());\n+    assertThat(repModel.getCreator()).isEqualTo(task.getCreator());\n+    assertThat(repModel.getDescription()).isEqualTo(task.getDescription());\n+    assertThat(repModel.getNote()).isEqualTo(task.getNote());\n+    assertThat(repModel.getPriority()).isEqualTo(task.getPriority());\n+    assertThat(repModel.getState()).isEqualTo(task.getState());\n+    assertThat(repModel.getClassificationSummary().getClassificationId())\n         .isEqualTo(task.getClassificationSummary().getId());\n-    assertThat(resource.getWorkbasketSummary().getWorkbasketId())\n+    assertThat(repModel.getWorkbasketSummary().getWorkbasketId())\n         .isEqualTo(task.getWorkbasketSummary().getId());\n-    assertThat(resource.getBusinessProcessId()).isEqualTo(task.getBusinessProcessId());\n-    assertThat(resource.getParentBusinessProcessId()).isEqualTo(task.getParentBusinessProcessId());\n-    assertThat(resource.getOwner()).isEqualTo(task.getOwner());\n-    assertThat(resource.getPrimaryObjRef()).isEqualTo(task.getPrimaryObjRef());\n-    assertThat(resource.isRead()).isEqualTo(task.isRead());\n-    assertThat(resource.isTransferred()).isEqualTo(task.isTransferred());\n-    testEquality(task.getCustomAttributes(), resource.getCustomAttributes());\n-    testEquality(task.getCallbackInfo(), resource.getCallbackInfo());\n-    testEqualityAttachements(task.getAttachments(), resource.getAttachments());\n-    assertThat(resource.getCustom1()).isEqualTo(task.getCustomAttribute(\"1\"));\n-    assertThat(resource.getCustom2()).isEqualTo(task.getCustomAttribute(\"2\"));\n-    assertThat(resource.getCustom3()).isEqualTo(task.getCustomAttribute(\"3\"));\n-    assertThat(resource.getCustom4()).isEqualTo(task.getCustomAttribute(\"4\"));\n-    assertThat(resource.getCustom5()).isEqualTo(task.getCustomAttribute(\"5\"));\n-    assertThat(resource.getCustom6()).isEqualTo(task.getCustomAttribute(\"6\"));\n-    assertThat(resource.getCustom7()).isEqualTo(task.getCustomAttribute(\"7\"));\n-    assertThat(resource.getCustom8()).isEqualTo(task.getCustomAttribute(\"8\"));\n-    assertThat(resource.getCustom9()).isEqualTo(task.getCustomAttribute(\"9\"));\n-    assertThat(resource.getCustom10()).isEqualTo(task.getCustomAttribute(\"10\"));\n-    assertThat(resource.getCustom11()).isEqualTo(task.getCustomAttribute(\"11\"));\n-    assertThat(resource.getCustom12()).isEqualTo(task.getCustomAttribute(\"12\"));\n-    assertThat(resource.getCustom13()).isEqualTo(task.getCustomAttribute(\"13\"));\n-    assertThat(resource.getCustom14()).isEqualTo(task.getCustomAttribute(\"14\"));\n-    assertThat(resource.getCustom15()).isEqualTo(task.getCustomAttribute(\"15\"));\n-    assertThat(resource.getCustom16()).isEqualTo(task.getCustomAttribute(\"16\"));\n+    assertThat(repModel.getBusinessProcessId()).isEqualTo(task.getBusinessProcessId());\n+    assertThat(repModel.getParentBusinessProcessId()).isEqualTo(task.getParentBusinessProcessId());\n+    assertThat(repModel.getOwner()).isEqualTo(task.getOwner());\n+    assertThat(repModel.getPrimaryObjRef()).isEqualTo(task.getPrimaryObjRef());\n+    assertThat(repModel.isRead()).isEqualTo(task.isRead());\n+    assertThat(repModel.isTransferred()).isEqualTo(task.isTransferred());\n+    testEqualityCustomAttributes(task.getCustomAttributes(), repModel.getCustomAttributes());\n+    testEqualityCustomAttributes(task.getCallbackInfo(), repModel.getCallbackInfo());\n+    testEqualityAttachments(task.getAttachments(), repModel.getAttachments());\n+    assertThat(repModel.getCustom1()).isEqualTo(task.getCustomAttribute(\"1\"));\n+    assertThat(repModel.getCustom2()).isEqualTo(task.getCustomAttribute(\"2\"));\n+    assertThat(repModel.getCustom3()).isEqualTo(task.getCustomAttribute(\"3\"));\n+    assertThat(repModel.getCustom4()).isEqualTo(task.getCustomAttribute(\"4\"));\n+    assertThat(repModel.getCustom5()).isEqualTo(task.getCustomAttribute(\"5\"));\n+    assertThat(repModel.getCustom6()).isEqualTo(task.getCustomAttribute(\"6\"));\n+    assertThat(repModel.getCustom7()).isEqualTo(task.getCustomAttribute(\"7\"));\n+    assertThat(repModel.getCustom8()).isEqualTo(task.getCustomAttribute(\"8\"));\n+    assertThat(repModel.getCustom9()).isEqualTo(task.getCustomAttribute(\"9\"));\n+    assertThat(repModel.getCustom10()).isEqualTo(task.getCustomAttribute(\"10\"));\n+    assertThat(repModel.getCustom11()).isEqualTo(task.getCustomAttribute(\"11\"));\n+    assertThat(repModel.getCustom12()).isEqualTo(task.getCustomAttribute(\"12\"));\n+    assertThat(repModel.getCustom13()).isEqualTo(task.getCustomAttribute(\"13\"));\n+    assertThat(repModel.getCustom14()).isEqualTo(task.getCustomAttribute(\"14\"));\n+    assertThat(repModel.getCustom15()).isEqualTo(task.getCustomAttribute(\"15\"));\n+    assertThat(repModel.getCustom16()).isEqualTo(task.getCustomAttribute(\"16\"));\n   }\n \n-  private void testEquality(\n+  private void testEqualityOfEntities(Task task1, Task task2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 322}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwOTcwNA==", "bodyText": "can be removed", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435109704", "createdAt": "2020-06-04T09:15:12Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/TaskRepresentationModelAssemberTest.java", "diffHunk": "@@ -234,17 +343,27 @@ private void testEquality(\n             assertThat(attribute.getValue()).isEqualTo(customAttributes.get(attribute.getKey())));\n   }\n \n-  private void testEqualityAttachements(\n+  private void testEqualityAttachments(\n       List<Attachment> attachments, List<AttachmentRepresentationModel> resources) {\n     String[] objects = attachments.stream().map(Attachment::getId).toArray(String[]::new);\n \n-    // Anything else should be be tested in AttachementResourceAssemblerTest\n+    // Anything else should be be tested in AttachmentResourceAssemblerTest\n     assertThat(resources)\n         .hasSize(attachments.size())\n         .extracting(AttachmentRepresentationModel::getAttachmentId)\n         .containsOnly(objects);\n   }\n \n+  private void testEqualityAttachmentsOfEqualEntities(\n+      List<Attachment> attachments, List<Attachment> attachments2) {\n+    String[] objects = attachments.stream().map(Attachment::getId).toArray(String[]::new);\n+\n+    assertThat(attachments2)\n+        .hasSize(attachments.size())\n+        .extracting(Attachment::getId)\n+        .containsOnly(objects);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 398}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMTUxNg==", "bodyText": "no cast necessary", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435111516", "createdAt": "2020-06-04T09:18:11Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/TaskSummaryAssemblerTest.java", "diffHunk": "@@ -91,13 +100,132 @@ void taskSummaryToResource() {\n     task.setCustom13(\"custom13\");\n     task.setCustom14(\"custom14\");\n     task.setCustom15(\"custom15\");\n-    TaskSummaryImpl taskSummary = (TaskSummaryImpl) task.asSummary();\n-    TaskSummaryRepresentationModel resource =\n-        this.taskSummaryRepresentationModelAssembler.toModel(taskSummary);\n-    this.testEquality(taskSummary, resource);\n+    TaskSummaryRepresentationModel repModel =\n+        taskSummaryRepresentationModelAssembler.toModel(task);\n+    testEqualityAfterConversion(task, repModel);\n+  }\n+\n+\n+  @Test\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n+    ObjectReference primaryObjRef = new ObjectReference();\n+    primaryObjRef.setId(\"abc\");\n+    WorkbasketSummaryRepresentationModel workbasketResource =\n+        new WorkbasketSummaryRepresentationModel();\n+    workbasketResource.setWorkbasketId(\"workbasketId\");\n+    ClassificationSummaryRepresentationModel classificationSummary =\n+        new ClassificationSummaryRepresentationModel();\n+    classificationSummary.setKey(\"keyabc\");\n+    classificationSummary.setDomain(\"DOMAIN_A\");\n+    classificationSummary.setType(\"MANUAL\");\n+    AttachmentRepresentationModel attachment = new AttachmentRepresentationModel();\n+    attachment.setClassificationSummary(classificationSummary);\n+    attachment.setAttachmentId(\"attachmentId\");\n+    TaskSummaryRepresentationModel repModel = new TaskRepresentationModel();\n+    repModel.setTaskId(\"taskId\");\n+    repModel.setExternalId(\"externalId\");\n+    repModel.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setClaimed(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setCompleted(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setPlanned(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setDue(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setName(\"name\");\n+    repModel.setCreator(\"creator\");\n+    repModel.setDescription(\"desc\");\n+    repModel.setNote(\"note\");\n+    repModel.setPriority(123);\n+    repModel.setState(TaskState.READY);\n+    repModel.setClassificationSummary(classificationSummary);\n+    repModel.setWorkbasketSummary(workbasketResource);\n+    repModel.setBusinessProcessId(\"businessProcessId\");\n+    repModel.setParentBusinessProcessId(\"parentBusinessProcessId\");\n+    repModel.setOwner(\"owner\");\n+    repModel.setPrimaryObjRef(primaryObjRef);\n+    repModel.setRead(true);\n+    repModel.setTransferred(true);\n+    repModel.setCustom1(\"custom1\");\n+    repModel.setCustom2(\"custom2\");\n+    repModel.setCustom3(\"custom3\");\n+    repModel.setCustom4(\"custom4\");\n+    repModel.setCustom5(\"custom5\");\n+    repModel.setCustom6(\"custom6\");\n+    repModel.setCustom7(\"custom7\");\n+    repModel.setCustom8(\"custom8\");\n+    repModel.setCustom9(\"custom9\");\n+    repModel.setCustom10(\"custom10\");\n+    repModel.setCustom11(\"custom11\");\n+    repModel.setCustom12(\"custom12\");\n+    repModel.setCustom13(\"custom13\");\n+    repModel.setCustom14(\"custom14\");\n+    repModel.setCustom15(\"custom15\");\n+    repModel.setCustom16(\"custom16\");\n+    // when\n+    TaskImpl task = (TaskImpl) taskSummaryRepresentationModelAssembler.toEntityModel(repModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMTY3MQ==", "bodyText": "no cast necessary", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435111671", "createdAt": "2020-06-04T09:18:27Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/TaskSummaryAssemblerTest.java", "diffHunk": "@@ -91,13 +100,132 @@ void taskSummaryToResource() {\n     task.setCustom13(\"custom13\");\n     task.setCustom14(\"custom14\");\n     task.setCustom15(\"custom15\");\n-    TaskSummaryImpl taskSummary = (TaskSummaryImpl) task.asSummary();\n-    TaskSummaryRepresentationModel resource =\n-        this.taskSummaryRepresentationModelAssembler.toModel(taskSummary);\n-    this.testEquality(taskSummary, resource);\n+    TaskSummaryRepresentationModel repModel =\n+        taskSummaryRepresentationModelAssembler.toModel(task);\n+    testEqualityAfterConversion(task, repModel);\n+  }\n+\n+\n+  @Test\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n+    ObjectReference primaryObjRef = new ObjectReference();\n+    primaryObjRef.setId(\"abc\");\n+    WorkbasketSummaryRepresentationModel workbasketResource =\n+        new WorkbasketSummaryRepresentationModel();\n+    workbasketResource.setWorkbasketId(\"workbasketId\");\n+    ClassificationSummaryRepresentationModel classificationSummary =\n+        new ClassificationSummaryRepresentationModel();\n+    classificationSummary.setKey(\"keyabc\");\n+    classificationSummary.setDomain(\"DOMAIN_A\");\n+    classificationSummary.setType(\"MANUAL\");\n+    AttachmentRepresentationModel attachment = new AttachmentRepresentationModel();\n+    attachment.setClassificationSummary(classificationSummary);\n+    attachment.setAttachmentId(\"attachmentId\");\n+    TaskSummaryRepresentationModel repModel = new TaskRepresentationModel();\n+    repModel.setTaskId(\"taskId\");\n+    repModel.setExternalId(\"externalId\");\n+    repModel.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setClaimed(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setCompleted(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setPlanned(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setDue(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setName(\"name\");\n+    repModel.setCreator(\"creator\");\n+    repModel.setDescription(\"desc\");\n+    repModel.setNote(\"note\");\n+    repModel.setPriority(123);\n+    repModel.setState(TaskState.READY);\n+    repModel.setClassificationSummary(classificationSummary);\n+    repModel.setWorkbasketSummary(workbasketResource);\n+    repModel.setBusinessProcessId(\"businessProcessId\");\n+    repModel.setParentBusinessProcessId(\"parentBusinessProcessId\");\n+    repModel.setOwner(\"owner\");\n+    repModel.setPrimaryObjRef(primaryObjRef);\n+    repModel.setRead(true);\n+    repModel.setTransferred(true);\n+    repModel.setCustom1(\"custom1\");\n+    repModel.setCustom2(\"custom2\");\n+    repModel.setCustom3(\"custom3\");\n+    repModel.setCustom4(\"custom4\");\n+    repModel.setCustom5(\"custom5\");\n+    repModel.setCustom6(\"custom6\");\n+    repModel.setCustom7(\"custom7\");\n+    repModel.setCustom8(\"custom8\");\n+    repModel.setCustom9(\"custom9\");\n+    repModel.setCustom10(\"custom10\");\n+    repModel.setCustom11(\"custom11\");\n+    repModel.setCustom12(\"custom12\");\n+    repModel.setCustom13(\"custom13\");\n+    repModel.setCustom14(\"custom14\");\n+    repModel.setCustom15(\"custom15\");\n+    repModel.setCustom16(\"custom16\");\n+    // when\n+    TaskImpl task = (TaskImpl) taskSummaryRepresentationModelAssembler.toEntityModel(repModel);\n+    // then\n+    testEqualityAfterConversion(task, repModel);\n+  }\n+\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity()\n+      throws InvalidArgumentException {\n+    // given\n+    ObjectReference primaryObjRef = new ObjectReference();\n+    primaryObjRef.setId(\"abc\");\n+    final Workbasket workbasket = workbasketService.newWorkbasket(\"key\", \"domain\");\n+    Classification classification =\n+        classificationService.newClassification(\"ckey\", \"cdomain\", \"MANUAL\");\n+    AttachmentImpl attachment = (AttachmentImpl) taskService.newAttachment();\n+    attachment.setClassificationSummary(classification.asSummary());\n+    attachment.setId(\"attachmentId\");\n+    TaskImpl task = (TaskImpl) taskService.newTask();\n+    task.setId(\"taskId\");\n+    task.setExternalId(\"externalId\");\n+    task.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setClaimed(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setCompleted(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setPlanned(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setDue(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setName(\"name\");\n+    task.setCreator(\"creator\");\n+    task.setDescription(\"desc\");\n+    task.setNote(\"note\");\n+    task.setPriority(123);\n+    task.setState(TaskState.READY);\n+    task.setClassificationSummary(classification);\n+    task.setWorkbasketSummary(workbasket.asSummary());\n+    task.setBusinessProcessId(\"businessProcessId\");\n+    task.setParentBusinessProcessId(\"parentBusinessProcessId\");\n+    task.setOwner(\"owner\");\n+    task.setPrimaryObjRef(primaryObjRef);\n+    task.setRead(true);\n+    task.setTransferred(true);\n+    task.setCustom1(\"custom1\");\n+    task.setCustom2(\"custom2\");\n+    task.setCustom3(\"custom3\");\n+    task.setCustom4(\"custom4\");\n+    task.setCustom5(\"custom5\");\n+    task.setCustom6(\"custom6\");\n+    task.setCustom7(\"custom7\");\n+    task.setCustom8(\"custom8\");\n+    task.setCustom9(\"custom9\");\n+    task.setCustom10(\"custom10\");\n+    task.setCustom11(\"custom11\");\n+    task.setCustom12(\"custom12\");\n+    task.setCustom13(\"custom13\");\n+    task.setCustom14(\"custom14\");\n+    task.setCustom15(\"custom15\");\n+    task.setCustom16(\"custom16\");\n+    // when\n+    TaskSummaryRepresentationModel repModel = taskSummaryRepresentationModelAssembler.toModel(task);\n+    TaskImpl task2 = (TaskImpl) taskSummaryRepresentationModelAssembler.toEntityModel(repModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMTczNg==", "bodyText": "see comments above.", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435111736", "createdAt": "2020-06-04T09:18:33Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/TaskSummaryAssemblerTest.java", "diffHunk": "@@ -91,13 +100,132 @@ void taskSummaryToResource() {\n     task.setCustom13(\"custom13\");\n     task.setCustom14(\"custom14\");\n     task.setCustom15(\"custom15\");\n-    TaskSummaryImpl taskSummary = (TaskSummaryImpl) task.asSummary();\n-    TaskSummaryRepresentationModel resource =\n-        this.taskSummaryRepresentationModelAssembler.toModel(taskSummary);\n-    this.testEquality(taskSummary, resource);\n+    TaskSummaryRepresentationModel repModel =\n+        taskSummaryRepresentationModelAssembler.toModel(task);\n+    testEqualityAfterConversion(task, repModel);\n+  }\n+\n+\n+  @Test\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n+    ObjectReference primaryObjRef = new ObjectReference();\n+    primaryObjRef.setId(\"abc\");\n+    WorkbasketSummaryRepresentationModel workbasketResource =\n+        new WorkbasketSummaryRepresentationModel();\n+    workbasketResource.setWorkbasketId(\"workbasketId\");\n+    ClassificationSummaryRepresentationModel classificationSummary =\n+        new ClassificationSummaryRepresentationModel();\n+    classificationSummary.setKey(\"keyabc\");\n+    classificationSummary.setDomain(\"DOMAIN_A\");\n+    classificationSummary.setType(\"MANUAL\");\n+    AttachmentRepresentationModel attachment = new AttachmentRepresentationModel();\n+    attachment.setClassificationSummary(classificationSummary);\n+    attachment.setAttachmentId(\"attachmentId\");\n+    TaskSummaryRepresentationModel repModel = new TaskRepresentationModel();\n+    repModel.setTaskId(\"taskId\");\n+    repModel.setExternalId(\"externalId\");\n+    repModel.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setClaimed(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setCompleted(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setPlanned(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setDue(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    repModel.setName(\"name\");\n+    repModel.setCreator(\"creator\");\n+    repModel.setDescription(\"desc\");\n+    repModel.setNote(\"note\");\n+    repModel.setPriority(123);\n+    repModel.setState(TaskState.READY);\n+    repModel.setClassificationSummary(classificationSummary);\n+    repModel.setWorkbasketSummary(workbasketResource);\n+    repModel.setBusinessProcessId(\"businessProcessId\");\n+    repModel.setParentBusinessProcessId(\"parentBusinessProcessId\");\n+    repModel.setOwner(\"owner\");\n+    repModel.setPrimaryObjRef(primaryObjRef);\n+    repModel.setRead(true);\n+    repModel.setTransferred(true);\n+    repModel.setCustom1(\"custom1\");\n+    repModel.setCustom2(\"custom2\");\n+    repModel.setCustom3(\"custom3\");\n+    repModel.setCustom4(\"custom4\");\n+    repModel.setCustom5(\"custom5\");\n+    repModel.setCustom6(\"custom6\");\n+    repModel.setCustom7(\"custom7\");\n+    repModel.setCustom8(\"custom8\");\n+    repModel.setCustom9(\"custom9\");\n+    repModel.setCustom10(\"custom10\");\n+    repModel.setCustom11(\"custom11\");\n+    repModel.setCustom12(\"custom12\");\n+    repModel.setCustom13(\"custom13\");\n+    repModel.setCustom14(\"custom14\");\n+    repModel.setCustom15(\"custom15\");\n+    repModel.setCustom16(\"custom16\");\n+    // when\n+    TaskImpl task = (TaskImpl) taskSummaryRepresentationModelAssembler.toEntityModel(repModel);\n+    // then\n+    testEqualityAfterConversion(task, repModel);\n+  }\n+\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity()\n+      throws InvalidArgumentException {\n+    // given\n+    ObjectReference primaryObjRef = new ObjectReference();\n+    primaryObjRef.setId(\"abc\");\n+    final Workbasket workbasket = workbasketService.newWorkbasket(\"key\", \"domain\");\n+    Classification classification =\n+        classificationService.newClassification(\"ckey\", \"cdomain\", \"MANUAL\");\n+    AttachmentImpl attachment = (AttachmentImpl) taskService.newAttachment();\n+    attachment.setClassificationSummary(classification.asSummary());\n+    attachment.setId(\"attachmentId\");\n+    TaskImpl task = (TaskImpl) taskService.newTask();\n+    task.setId(\"taskId\");\n+    task.setExternalId(\"externalId\");\n+    task.setCreated(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setClaimed(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setCompleted(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setModified(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setPlanned(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setDue(Instant.parse(\"2019-09-13T08:44:17.588Z\"));\n+    task.setName(\"name\");\n+    task.setCreator(\"creator\");\n+    task.setDescription(\"desc\");\n+    task.setNote(\"note\");\n+    task.setPriority(123);\n+    task.setState(TaskState.READY);\n+    task.setClassificationSummary(classification);\n+    task.setWorkbasketSummary(workbasket.asSummary());\n+    task.setBusinessProcessId(\"businessProcessId\");\n+    task.setParentBusinessProcessId(\"parentBusinessProcessId\");\n+    task.setOwner(\"owner\");\n+    task.setPrimaryObjRef(primaryObjRef);\n+    task.setRead(true);\n+    task.setTransferred(true);\n+    task.setCustom1(\"custom1\");\n+    task.setCustom2(\"custom2\");\n+    task.setCustom3(\"custom3\");\n+    task.setCustom4(\"custom4\");\n+    task.setCustom5(\"custom5\");\n+    task.setCustom6(\"custom6\");\n+    task.setCustom7(\"custom7\");\n+    task.setCustom8(\"custom8\");\n+    task.setCustom9(\"custom9\");\n+    task.setCustom10(\"custom10\");\n+    task.setCustom11(\"custom11\");\n+    task.setCustom12(\"custom12\");\n+    task.setCustom13(\"custom13\");\n+    task.setCustom14(\"custom14\");\n+    task.setCustom15(\"custom15\");\n+    task.setCustom16(\"custom16\");\n+    // when\n+    TaskSummaryRepresentationModel repModel = taskSummaryRepresentationModelAssembler.toModel(task);\n+    TaskImpl task2 = (TaskImpl) taskSummaryRepresentationModelAssembler.toEntityModel(repModel);\n+    // then\n+    testEqualityOfEntities(task, task2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMjE2NA==", "bodyText": "Can be removed", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435112164", "createdAt": "2020-06-04T09:19:17Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/TaskSummaryAssemblerTest.java", "diffHunk": "@@ -145,6 +273,54 @@ void testEquality(TaskSummaryImpl taskSummary, TaskSummaryRepresentationModel re\n         taskSummary.getAttachmentSummaries(), resource.getAttachmentSummaries());\n   }\n \n+\n+  void testEqualityOfEntities(Task task1, Task task2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMjI3OA==", "bodyText": "can be removed", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435112278", "createdAt": "2020-06-04T09:19:29Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/assembler/TaskSummaryAssemblerTest.java", "diffHunk": "@@ -156,4 +332,17 @@ private void testEqualityAttachments(\n       Assert.assertEquals(attachmentSummary.getId(), resource.getAttachmentId());\n     }\n   }\n+\n+  private void testEqualityAttachmentsOfEqualEntities(\n+      List<Attachment> attachments, List<Attachment> attachments2) {\n+    String[] objects = attachments.stream().map(Attachment::getId).toArray(String[]::new);\n+\n+    assertThat(attachments2)\n+        .hasSize(attachments.size())\n+        .extracting(Attachment::getId)\n+        .containsOnly(objects);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMjU0MA==", "bodyText": "no cast necessary", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435112540", "createdAt": "2020-06-04T09:19:54Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/workbasket/rest/assembler/WorkbasketAccessItemRepresentationModelAssemblerTest.java", "diffHunk": "@@ -43,67 +44,127 @@ void workBasketAccessItemToResourcePropertiesEqual() {\n     accessItem.setPermCustom11(true);\n     accessItem.setPermCustom12(true);\n     // when\n-    WorkbasketAccessItemRepresentationModel resource =\n+    WorkbasketAccessItemRepresentationModel repModel =\n         workbasketAccessItemRepresentationModelAssembler.toModel(accessItem);\n     // then\n-    testEquality(accessItem, resource);\n+    testEqualityAfterConversion(accessItem, repModel);\n   }\n \n   @Test\n-  void workBasketAccessItemToModelPropertiesEqual() {\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n     // given\n-    WorkbasketAccessItemRepresentationModel resource =\n+    WorkbasketAccessItemRepresentationModel repModel =\n         new WorkbasketAccessItemRepresentationModel();\n-    resource.setAccessId(\"10\");\n-    resource.setWorkbasketKey(\"workbasketKey\");\n-    resource.setAccessItemId(\"120\");\n-    resource.setWorkbasketId(\"1\");\n-    resource.setPermRead(true);\n-    resource.setPermAppend(false);\n-    resource.setPermDistribute(false);\n-    resource.setPermOpen(false);\n-    resource.setPermTransfer(true);\n-    resource.setPermCustom1(false);\n-    resource.setPermCustom2(false);\n-    resource.setPermCustom3(false);\n-    resource.setPermCustom4(false);\n-    resource.setPermCustom5(true);\n-    resource.setPermCustom6(false);\n-    resource.setPermCustom7(false);\n-    resource.setPermCustom8(false);\n-    resource.setPermCustom9(false);\n-    resource.setPermCustom10(false);\n-    resource.setPermCustom11(true);\n-    resource.setPermCustom12(false);\n+    repModel.setAccessId(\"10\");\n+    repModel.setWorkbasketKey(\"workbasketKey\");\n+    repModel.setAccessItemId(\"120\");\n+    repModel.setWorkbasketId(\"1\");\n+    repModel.setPermRead(true);\n+    repModel.setPermAppend(false);\n+    repModel.setPermDistribute(false);\n+    repModel.setPermOpen(false);\n+    repModel.setPermTransfer(true);\n+    repModel.setPermCustom1(false);\n+    repModel.setPermCustom2(false);\n+    repModel.setPermCustom3(false);\n+    repModel.setPermCustom4(false);\n+    repModel.setPermCustom5(true);\n+    repModel.setPermCustom6(false);\n+    repModel.setPermCustom7(false);\n+    repModel.setPermCustom8(false);\n+    repModel.setPermCustom9(false);\n+    repModel.setPermCustom10(false);\n+    repModel.setPermCustom11(true);\n+    repModel.setPermCustom12(false);\n     // when\n     WorkbasketAccessItem accessItem =\n-        workbasketAccessItemRepresentationModelAssembler.toEntityModel(resource);\n+        workbasketAccessItemRepresentationModelAssembler.toEntityModel(repModel);\n     // then\n-    testEquality(accessItem, resource);\n+    testEqualityAfterConversion(accessItem, repModel);\n   }\n \n-  private void testEquality(\n-      WorkbasketAccessItem accessItem, WorkbasketAccessItemRepresentationModel resource) {\n-    assertThat(resource.getAccessId()).isEqualTo(accessItem.getAccessId());\n-    assertThat(resource.getWorkbasketKey()).isEqualTo(accessItem.getWorkbasketKey());\n-    assertThat(resource.getAccessItemId()).isEqualTo(accessItem.getId());\n-    assertThat(resource.getWorkbasketId()).isEqualTo(accessItem.getWorkbasketId());\n-    assertThat(resource.isPermAppend()).isEqualTo(accessItem.isPermAppend());\n-    assertThat(resource.isPermCustom1()).isEqualTo(accessItem.isPermCustom1());\n-    assertThat(resource.isPermCustom2()).isEqualTo(accessItem.isPermCustom2());\n-    assertThat(resource.isPermCustom3()).isEqualTo(accessItem.isPermCustom3());\n-    assertThat(resource.isPermCustom4()).isEqualTo(accessItem.isPermCustom4());\n-    assertThat(resource.isPermCustom5()).isEqualTo(accessItem.isPermCustom5());\n-    assertThat(resource.isPermCustom6()).isEqualTo(accessItem.isPermCustom6());\n-    assertThat(resource.isPermCustom7()).isEqualTo(accessItem.isPermCustom7());\n-    assertThat(resource.isPermCustom8()).isEqualTo(accessItem.isPermCustom8());\n-    assertThat(resource.isPermCustom9()).isEqualTo(accessItem.isPermCustom9());\n-    assertThat(resource.isPermCustom10()).isEqualTo(accessItem.isPermCustom10());\n-    assertThat(resource.isPermCustom11()).isEqualTo(accessItem.isPermCustom11());\n-    assertThat(resource.isPermCustom12()).isEqualTo(accessItem.isPermCustom12());\n-    assertThat(resource.isPermDistribute()).isEqualTo(accessItem.isPermDistribute());\n-    assertThat(resource.isPermRead()).isEqualTo(accessItem.isPermRead());\n-    assertThat(resource.isPermOpen()).isEqualTo(accessItem.isPermOpen());\n-    assertThat(resource.isPermTransfer()).isEqualTo(accessItem.isPermTransfer());\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    // given\n+    WorkbasketAccessItemImpl accessItem\n+        = (WorkbasketAccessItemImpl) workbasketService.newWorkbasketAccessItem(\"1\", \"2\");\n+    accessItem.setWorkbasketKey(\"workbasketKey\");\n+    accessItem.setPermDistribute(false);\n+    accessItem.setPermOpen(true);\n+    accessItem.setPermAppend(false);\n+    accessItem.setPermRead(false);\n+    accessItem.setPermTransfer(true);\n+    accessItem.setPermCustom1(false);\n+    accessItem.setPermCustom2(false);\n+    accessItem.setPermCustom3(true);\n+    accessItem.setPermCustom4(true);\n+    accessItem.setPermCustom5(true);\n+    accessItem.setPermCustom6(true);\n+    accessItem.setPermCustom7(true);\n+    accessItem.setPermCustom8(true);\n+    accessItem.setPermCustom9(true);\n+    accessItem.setPermCustom10(true);\n+    accessItem.setPermCustom11(true);\n+    accessItem.setPermCustom12(true);\n+    // when\n+    WorkbasketAccessItemRepresentationModel repModel =\n+        workbasketAccessItemRepresentationModelAssembler.toModel(accessItem);\n+    WorkbasketAccessItemImpl accessItem2\n+        = (WorkbasketAccessItemImpl) workbasketAccessItemRepresentationModelAssembler\n+                                         .toEntityModel(repModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMjYyMQ==", "bodyText": "see comments above.", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435112621", "createdAt": "2020-06-04T09:20:01Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/workbasket/rest/assembler/WorkbasketAccessItemRepresentationModelAssemblerTest.java", "diffHunk": "@@ -43,67 +44,127 @@ void workBasketAccessItemToResourcePropertiesEqual() {\n     accessItem.setPermCustom11(true);\n     accessItem.setPermCustom12(true);\n     // when\n-    WorkbasketAccessItemRepresentationModel resource =\n+    WorkbasketAccessItemRepresentationModel repModel =\n         workbasketAccessItemRepresentationModelAssembler.toModel(accessItem);\n     // then\n-    testEquality(accessItem, resource);\n+    testEqualityAfterConversion(accessItem, repModel);\n   }\n \n   @Test\n-  void workBasketAccessItemToModelPropertiesEqual() {\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n     // given\n-    WorkbasketAccessItemRepresentationModel resource =\n+    WorkbasketAccessItemRepresentationModel repModel =\n         new WorkbasketAccessItemRepresentationModel();\n-    resource.setAccessId(\"10\");\n-    resource.setWorkbasketKey(\"workbasketKey\");\n-    resource.setAccessItemId(\"120\");\n-    resource.setWorkbasketId(\"1\");\n-    resource.setPermRead(true);\n-    resource.setPermAppend(false);\n-    resource.setPermDistribute(false);\n-    resource.setPermOpen(false);\n-    resource.setPermTransfer(true);\n-    resource.setPermCustom1(false);\n-    resource.setPermCustom2(false);\n-    resource.setPermCustom3(false);\n-    resource.setPermCustom4(false);\n-    resource.setPermCustom5(true);\n-    resource.setPermCustom6(false);\n-    resource.setPermCustom7(false);\n-    resource.setPermCustom8(false);\n-    resource.setPermCustom9(false);\n-    resource.setPermCustom10(false);\n-    resource.setPermCustom11(true);\n-    resource.setPermCustom12(false);\n+    repModel.setAccessId(\"10\");\n+    repModel.setWorkbasketKey(\"workbasketKey\");\n+    repModel.setAccessItemId(\"120\");\n+    repModel.setWorkbasketId(\"1\");\n+    repModel.setPermRead(true);\n+    repModel.setPermAppend(false);\n+    repModel.setPermDistribute(false);\n+    repModel.setPermOpen(false);\n+    repModel.setPermTransfer(true);\n+    repModel.setPermCustom1(false);\n+    repModel.setPermCustom2(false);\n+    repModel.setPermCustom3(false);\n+    repModel.setPermCustom4(false);\n+    repModel.setPermCustom5(true);\n+    repModel.setPermCustom6(false);\n+    repModel.setPermCustom7(false);\n+    repModel.setPermCustom8(false);\n+    repModel.setPermCustom9(false);\n+    repModel.setPermCustom10(false);\n+    repModel.setPermCustom11(true);\n+    repModel.setPermCustom12(false);\n     // when\n     WorkbasketAccessItem accessItem =\n-        workbasketAccessItemRepresentationModelAssembler.toEntityModel(resource);\n+        workbasketAccessItemRepresentationModelAssembler.toEntityModel(repModel);\n     // then\n-    testEquality(accessItem, resource);\n+    testEqualityAfterConversion(accessItem, repModel);\n   }\n \n-  private void testEquality(\n-      WorkbasketAccessItem accessItem, WorkbasketAccessItemRepresentationModel resource) {\n-    assertThat(resource.getAccessId()).isEqualTo(accessItem.getAccessId());\n-    assertThat(resource.getWorkbasketKey()).isEqualTo(accessItem.getWorkbasketKey());\n-    assertThat(resource.getAccessItemId()).isEqualTo(accessItem.getId());\n-    assertThat(resource.getWorkbasketId()).isEqualTo(accessItem.getWorkbasketId());\n-    assertThat(resource.isPermAppend()).isEqualTo(accessItem.isPermAppend());\n-    assertThat(resource.isPermCustom1()).isEqualTo(accessItem.isPermCustom1());\n-    assertThat(resource.isPermCustom2()).isEqualTo(accessItem.isPermCustom2());\n-    assertThat(resource.isPermCustom3()).isEqualTo(accessItem.isPermCustom3());\n-    assertThat(resource.isPermCustom4()).isEqualTo(accessItem.isPermCustom4());\n-    assertThat(resource.isPermCustom5()).isEqualTo(accessItem.isPermCustom5());\n-    assertThat(resource.isPermCustom6()).isEqualTo(accessItem.isPermCustom6());\n-    assertThat(resource.isPermCustom7()).isEqualTo(accessItem.isPermCustom7());\n-    assertThat(resource.isPermCustom8()).isEqualTo(accessItem.isPermCustom8());\n-    assertThat(resource.isPermCustom9()).isEqualTo(accessItem.isPermCustom9());\n-    assertThat(resource.isPermCustom10()).isEqualTo(accessItem.isPermCustom10());\n-    assertThat(resource.isPermCustom11()).isEqualTo(accessItem.isPermCustom11());\n-    assertThat(resource.isPermCustom12()).isEqualTo(accessItem.isPermCustom12());\n-    assertThat(resource.isPermDistribute()).isEqualTo(accessItem.isPermDistribute());\n-    assertThat(resource.isPermRead()).isEqualTo(accessItem.isPermRead());\n-    assertThat(resource.isPermOpen()).isEqualTo(accessItem.isPermOpen());\n-    assertThat(resource.isPermTransfer()).isEqualTo(accessItem.isPermTransfer());\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    // given\n+    WorkbasketAccessItemImpl accessItem\n+        = (WorkbasketAccessItemImpl) workbasketService.newWorkbasketAccessItem(\"1\", \"2\");\n+    accessItem.setWorkbasketKey(\"workbasketKey\");\n+    accessItem.setPermDistribute(false);\n+    accessItem.setPermOpen(true);\n+    accessItem.setPermAppend(false);\n+    accessItem.setPermRead(false);\n+    accessItem.setPermTransfer(true);\n+    accessItem.setPermCustom1(false);\n+    accessItem.setPermCustom2(false);\n+    accessItem.setPermCustom3(true);\n+    accessItem.setPermCustom4(true);\n+    accessItem.setPermCustom5(true);\n+    accessItem.setPermCustom6(true);\n+    accessItem.setPermCustom7(true);\n+    accessItem.setPermCustom8(true);\n+    accessItem.setPermCustom9(true);\n+    accessItem.setPermCustom10(true);\n+    accessItem.setPermCustom11(true);\n+    accessItem.setPermCustom12(true);\n+    // when\n+    WorkbasketAccessItemRepresentationModel repModel =\n+        workbasketAccessItemRepresentationModelAssembler.toModel(accessItem);\n+    WorkbasketAccessItemImpl accessItem2\n+        = (WorkbasketAccessItemImpl) workbasketAccessItemRepresentationModelAssembler\n+                                         .toEntityModel(repModel);\n+    //then\n+    testEqualityOfEntities(accessItem, accessItem2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMjkzOQ==", "bodyText": "can be removed", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435112939", "createdAt": "2020-06-04T09:20:34Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/workbasket/rest/assembler/WorkbasketAccessItemRepresentationModelAssemblerTest.java", "diffHunk": "@@ -43,67 +44,127 @@ void workBasketAccessItemToResourcePropertiesEqual() {\n     accessItem.setPermCustom11(true);\n     accessItem.setPermCustom12(true);\n     // when\n-    WorkbasketAccessItemRepresentationModel resource =\n+    WorkbasketAccessItemRepresentationModel repModel =\n         workbasketAccessItemRepresentationModelAssembler.toModel(accessItem);\n     // then\n-    testEquality(accessItem, resource);\n+    testEqualityAfterConversion(accessItem, repModel);\n   }\n \n   @Test\n-  void workBasketAccessItemToModelPropertiesEqual() {\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n     // given\n-    WorkbasketAccessItemRepresentationModel resource =\n+    WorkbasketAccessItemRepresentationModel repModel =\n         new WorkbasketAccessItemRepresentationModel();\n-    resource.setAccessId(\"10\");\n-    resource.setWorkbasketKey(\"workbasketKey\");\n-    resource.setAccessItemId(\"120\");\n-    resource.setWorkbasketId(\"1\");\n-    resource.setPermRead(true);\n-    resource.setPermAppend(false);\n-    resource.setPermDistribute(false);\n-    resource.setPermOpen(false);\n-    resource.setPermTransfer(true);\n-    resource.setPermCustom1(false);\n-    resource.setPermCustom2(false);\n-    resource.setPermCustom3(false);\n-    resource.setPermCustom4(false);\n-    resource.setPermCustom5(true);\n-    resource.setPermCustom6(false);\n-    resource.setPermCustom7(false);\n-    resource.setPermCustom8(false);\n-    resource.setPermCustom9(false);\n-    resource.setPermCustom10(false);\n-    resource.setPermCustom11(true);\n-    resource.setPermCustom12(false);\n+    repModel.setAccessId(\"10\");\n+    repModel.setWorkbasketKey(\"workbasketKey\");\n+    repModel.setAccessItemId(\"120\");\n+    repModel.setWorkbasketId(\"1\");\n+    repModel.setPermRead(true);\n+    repModel.setPermAppend(false);\n+    repModel.setPermDistribute(false);\n+    repModel.setPermOpen(false);\n+    repModel.setPermTransfer(true);\n+    repModel.setPermCustom1(false);\n+    repModel.setPermCustom2(false);\n+    repModel.setPermCustom3(false);\n+    repModel.setPermCustom4(false);\n+    repModel.setPermCustom5(true);\n+    repModel.setPermCustom6(false);\n+    repModel.setPermCustom7(false);\n+    repModel.setPermCustom8(false);\n+    repModel.setPermCustom9(false);\n+    repModel.setPermCustom10(false);\n+    repModel.setPermCustom11(true);\n+    repModel.setPermCustom12(false);\n     // when\n     WorkbasketAccessItem accessItem =\n-        workbasketAccessItemRepresentationModelAssembler.toEntityModel(resource);\n+        workbasketAccessItemRepresentationModelAssembler.toEntityModel(repModel);\n     // then\n-    testEquality(accessItem, resource);\n+    testEqualityAfterConversion(accessItem, repModel);\n   }\n \n-  private void testEquality(\n-      WorkbasketAccessItem accessItem, WorkbasketAccessItemRepresentationModel resource) {\n-    assertThat(resource.getAccessId()).isEqualTo(accessItem.getAccessId());\n-    assertThat(resource.getWorkbasketKey()).isEqualTo(accessItem.getWorkbasketKey());\n-    assertThat(resource.getAccessItemId()).isEqualTo(accessItem.getId());\n-    assertThat(resource.getWorkbasketId()).isEqualTo(accessItem.getWorkbasketId());\n-    assertThat(resource.isPermAppend()).isEqualTo(accessItem.isPermAppend());\n-    assertThat(resource.isPermCustom1()).isEqualTo(accessItem.isPermCustom1());\n-    assertThat(resource.isPermCustom2()).isEqualTo(accessItem.isPermCustom2());\n-    assertThat(resource.isPermCustom3()).isEqualTo(accessItem.isPermCustom3());\n-    assertThat(resource.isPermCustom4()).isEqualTo(accessItem.isPermCustom4());\n-    assertThat(resource.isPermCustom5()).isEqualTo(accessItem.isPermCustom5());\n-    assertThat(resource.isPermCustom6()).isEqualTo(accessItem.isPermCustom6());\n-    assertThat(resource.isPermCustom7()).isEqualTo(accessItem.isPermCustom7());\n-    assertThat(resource.isPermCustom8()).isEqualTo(accessItem.isPermCustom8());\n-    assertThat(resource.isPermCustom9()).isEqualTo(accessItem.isPermCustom9());\n-    assertThat(resource.isPermCustom10()).isEqualTo(accessItem.isPermCustom10());\n-    assertThat(resource.isPermCustom11()).isEqualTo(accessItem.isPermCustom11());\n-    assertThat(resource.isPermCustom12()).isEqualTo(accessItem.isPermCustom12());\n-    assertThat(resource.isPermDistribute()).isEqualTo(accessItem.isPermDistribute());\n-    assertThat(resource.isPermRead()).isEqualTo(accessItem.isPermRead());\n-    assertThat(resource.isPermOpen()).isEqualTo(accessItem.isPermOpen());\n-    assertThat(resource.isPermTransfer()).isEqualTo(accessItem.isPermTransfer());\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    // given\n+    WorkbasketAccessItemImpl accessItem\n+        = (WorkbasketAccessItemImpl) workbasketService.newWorkbasketAccessItem(\"1\", \"2\");\n+    accessItem.setWorkbasketKey(\"workbasketKey\");\n+    accessItem.setPermDistribute(false);\n+    accessItem.setPermOpen(true);\n+    accessItem.setPermAppend(false);\n+    accessItem.setPermRead(false);\n+    accessItem.setPermTransfer(true);\n+    accessItem.setPermCustom1(false);\n+    accessItem.setPermCustom2(false);\n+    accessItem.setPermCustom3(true);\n+    accessItem.setPermCustom4(true);\n+    accessItem.setPermCustom5(true);\n+    accessItem.setPermCustom6(true);\n+    accessItem.setPermCustom7(true);\n+    accessItem.setPermCustom8(true);\n+    accessItem.setPermCustom9(true);\n+    accessItem.setPermCustom10(true);\n+    accessItem.setPermCustom11(true);\n+    accessItem.setPermCustom12(true);\n+    // when\n+    WorkbasketAccessItemRepresentationModel repModel =\n+        workbasketAccessItemRepresentationModelAssembler.toModel(accessItem);\n+    WorkbasketAccessItemImpl accessItem2\n+        = (WorkbasketAccessItemImpl) workbasketAccessItemRepresentationModelAssembler\n+                                         .toEntityModel(repModel);\n+    //then\n+    testEqualityOfEntities(accessItem, accessItem2);\n+  }\n+\n+  private void testEqualityAfterConversion(\n+      WorkbasketAccessItem accessItem, WorkbasketAccessItemRepresentationModel repModel) {\n+    assertThat(repModel.getAccessId()).isEqualTo(accessItem.getAccessId());\n+    assertThat(repModel.getWorkbasketKey()).isEqualTo(accessItem.getWorkbasketKey());\n+    assertThat(repModel.getAccessItemId()).isEqualTo(accessItem.getId());\n+    assertThat(repModel.getWorkbasketId()).isEqualTo(accessItem.getWorkbasketId());\n+    assertThat(repModel.isPermAppend()).isEqualTo(accessItem.isPermAppend());\n+    assertThat(repModel.isPermCustom1()).isEqualTo(accessItem.isPermCustom1());\n+    assertThat(repModel.isPermCustom2()).isEqualTo(accessItem.isPermCustom2());\n+    assertThat(repModel.isPermCustom3()).isEqualTo(accessItem.isPermCustom3());\n+    assertThat(repModel.isPermCustom4()).isEqualTo(accessItem.isPermCustom4());\n+    assertThat(repModel.isPermCustom5()).isEqualTo(accessItem.isPermCustom5());\n+    assertThat(repModel.isPermCustom6()).isEqualTo(accessItem.isPermCustom6());\n+    assertThat(repModel.isPermCustom7()).isEqualTo(accessItem.isPermCustom7());\n+    assertThat(repModel.isPermCustom8()).isEqualTo(accessItem.isPermCustom8());\n+    assertThat(repModel.isPermCustom9()).isEqualTo(accessItem.isPermCustom9());\n+    assertThat(repModel.isPermCustom10()).isEqualTo(accessItem.isPermCustom10());\n+    assertThat(repModel.isPermCustom11()).isEqualTo(accessItem.isPermCustom11());\n+    assertThat(repModel.isPermCustom12()).isEqualTo(accessItem.isPermCustom12());\n+    assertThat(repModel.isPermDistribute()).isEqualTo(accessItem.isPermDistribute());\n+    assertThat(repModel.isPermRead()).isEqualTo(accessItem.isPermRead());\n+    assertThat(repModel.isPermOpen()).isEqualTo(accessItem.isPermOpen());\n+    assertThat(repModel.isPermTransfer()).isEqualTo(accessItem.isPermTransfer());\n+  }\n+\n+  private void testEqualityOfEntities(WorkbasketAccessItem item1, WorkbasketAccessItem items2) {\n+    assertThat(item1.getAccessId()).isEqualTo(items2.getAccessId());\n+    assertThat(item1.getWorkbasketKey()).isEqualTo(items2.getWorkbasketKey());\n+    assertThat(item1.getId()).isEqualTo(items2.getId());\n+    assertThat(item1.getWorkbasketId()).isEqualTo(items2.getWorkbasketId());\n+    assertThat(item1.isPermAppend()).isEqualTo(items2.isPermAppend());\n+    assertThat(item1.isPermCustom1()).isEqualTo(items2.isPermCustom1());\n+    assertThat(item1.isPermCustom2()).isEqualTo(items2.isPermCustom2());\n+    assertThat(item1.isPermCustom3()).isEqualTo(items2.isPermCustom3());\n+    assertThat(item1.isPermCustom4()).isEqualTo(items2.isPermCustom4());\n+    assertThat(item1.isPermCustom5()).isEqualTo(items2.isPermCustom5());\n+    assertThat(item1.isPermCustom6()).isEqualTo(items2.isPermCustom6());\n+    assertThat(item1.isPermCustom7()).isEqualTo(items2.isPermCustom7());\n+    assertThat(item1.isPermCustom8()).isEqualTo(items2.isPermCustom8());\n+    assertThat(item1.isPermCustom9()).isEqualTo(items2.isPermCustom9());\n+    assertThat(item1.isPermCustom10()).isEqualTo(items2.isPermCustom10());\n+    assertThat(item1.isPermCustom11()).isEqualTo(items2.isPermCustom11());\n+    assertThat(item1.isPermCustom12()).isEqualTo(items2.isPermCustom12());\n+    assertThat(item1.isPermDistribute()).isEqualTo(items2.isPermDistribute());\n+    assertThat(item1.isPermRead()).isEqualTo(items2.isPermRead());\n+    assertThat(item1.isPermOpen()).isEqualTo(items2.isPermOpen());\n+    assertThat(item1.isPermTransfer()).isEqualTo(items2.isPermTransfer());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExNDQyNg==", "bodyText": "missing parameter", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435114426", "createdAt": "2020-06-04T09:23:06Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/workbasket/rest/assembler/WorkbasketAccessItemRepresentationModelAssemblerTest.java", "diffHunk": "@@ -43,67 +44,127 @@ void workBasketAccessItemToResourcePropertiesEqual() {\n     accessItem.setPermCustom11(true);\n     accessItem.setPermCustom12(true);\n     // when\n-    WorkbasketAccessItemRepresentationModel resource =\n+    WorkbasketAccessItemRepresentationModel repModel =\n         workbasketAccessItemRepresentationModelAssembler.toModel(accessItem);\n     // then\n-    testEquality(accessItem, resource);\n+    testEqualityAfterConversion(accessItem, repModel);\n   }\n \n   @Test\n-  void workBasketAccessItemToModelPropertiesEqual() {\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n     // given\n-    WorkbasketAccessItemRepresentationModel resource =\n+    WorkbasketAccessItemRepresentationModel repModel =\n         new WorkbasketAccessItemRepresentationModel();\n-    resource.setAccessId(\"10\");\n-    resource.setWorkbasketKey(\"workbasketKey\");\n-    resource.setAccessItemId(\"120\");\n-    resource.setWorkbasketId(\"1\");\n-    resource.setPermRead(true);\n-    resource.setPermAppend(false);\n-    resource.setPermDistribute(false);\n-    resource.setPermOpen(false);\n-    resource.setPermTransfer(true);\n-    resource.setPermCustom1(false);\n-    resource.setPermCustom2(false);\n-    resource.setPermCustom3(false);\n-    resource.setPermCustom4(false);\n-    resource.setPermCustom5(true);\n-    resource.setPermCustom6(false);\n-    resource.setPermCustom7(false);\n-    resource.setPermCustom8(false);\n-    resource.setPermCustom9(false);\n-    resource.setPermCustom10(false);\n-    resource.setPermCustom11(true);\n-    resource.setPermCustom12(false);\n+    repModel.setAccessId(\"10\");\n+    repModel.setWorkbasketKey(\"workbasketKey\");\n+    repModel.setAccessItemId(\"120\");\n+    repModel.setWorkbasketId(\"1\");\n+    repModel.setPermRead(true);\n+    repModel.setPermAppend(false);\n+    repModel.setPermDistribute(false);\n+    repModel.setPermOpen(false);\n+    repModel.setPermTransfer(true);\n+    repModel.setPermCustom1(false);\n+    repModel.setPermCustom2(false);\n+    repModel.setPermCustom3(false);\n+    repModel.setPermCustom4(false);\n+    repModel.setPermCustom5(true);\n+    repModel.setPermCustom6(false);\n+    repModel.setPermCustom7(false);\n+    repModel.setPermCustom8(false);\n+    repModel.setPermCustom9(false);\n+    repModel.setPermCustom10(false);\n+    repModel.setPermCustom11(true);\n+    repModel.setPermCustom12(false);\n     // when\n     WorkbasketAccessItem accessItem =\n-        workbasketAccessItemRepresentationModelAssembler.toEntityModel(resource);\n+        workbasketAccessItemRepresentationModelAssembler.toEntityModel(repModel);\n     // then\n-    testEquality(accessItem, resource);\n+    testEqualityAfterConversion(accessItem, repModel);\n   }\n \n-  private void testEquality(\n-      WorkbasketAccessItem accessItem, WorkbasketAccessItemRepresentationModel resource) {\n-    assertThat(resource.getAccessId()).isEqualTo(accessItem.getAccessId());\n-    assertThat(resource.getWorkbasketKey()).isEqualTo(accessItem.getWorkbasketKey());\n-    assertThat(resource.getAccessItemId()).isEqualTo(accessItem.getId());\n-    assertThat(resource.getWorkbasketId()).isEqualTo(accessItem.getWorkbasketId());\n-    assertThat(resource.isPermAppend()).isEqualTo(accessItem.isPermAppend());\n-    assertThat(resource.isPermCustom1()).isEqualTo(accessItem.isPermCustom1());\n-    assertThat(resource.isPermCustom2()).isEqualTo(accessItem.isPermCustom2());\n-    assertThat(resource.isPermCustom3()).isEqualTo(accessItem.isPermCustom3());\n-    assertThat(resource.isPermCustom4()).isEqualTo(accessItem.isPermCustom4());\n-    assertThat(resource.isPermCustom5()).isEqualTo(accessItem.isPermCustom5());\n-    assertThat(resource.isPermCustom6()).isEqualTo(accessItem.isPermCustom6());\n-    assertThat(resource.isPermCustom7()).isEqualTo(accessItem.isPermCustom7());\n-    assertThat(resource.isPermCustom8()).isEqualTo(accessItem.isPermCustom8());\n-    assertThat(resource.isPermCustom9()).isEqualTo(accessItem.isPermCustom9());\n-    assertThat(resource.isPermCustom10()).isEqualTo(accessItem.isPermCustom10());\n-    assertThat(resource.isPermCustom11()).isEqualTo(accessItem.isPermCustom11());\n-    assertThat(resource.isPermCustom12()).isEqualTo(accessItem.isPermCustom12());\n-    assertThat(resource.isPermDistribute()).isEqualTo(accessItem.isPermDistribute());\n-    assertThat(resource.isPermRead()).isEqualTo(accessItem.isPermRead());\n-    assertThat(resource.isPermOpen()).isEqualTo(accessItem.isPermOpen());\n-    assertThat(resource.isPermTransfer()).isEqualTo(accessItem.isPermTransfer());\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    // given\n+    WorkbasketAccessItemImpl accessItem\n+        = (WorkbasketAccessItemImpl) workbasketService.newWorkbasketAccessItem(\"1\", \"2\");\n+    accessItem.setWorkbasketKey(\"workbasketKey\");\n+    accessItem.setPermDistribute(false);\n+    accessItem.setPermOpen(true);\n+    accessItem.setPermAppend(false);\n+    accessItem.setPermRead(false);\n+    accessItem.setPermTransfer(true);\n+    accessItem.setPermCustom1(false);\n+    accessItem.setPermCustom2(false);\n+    accessItem.setPermCustom3(true);\n+    accessItem.setPermCustom4(true);\n+    accessItem.setPermCustom5(true);\n+    accessItem.setPermCustom6(true);\n+    accessItem.setPermCustom7(true);\n+    accessItem.setPermCustom8(true);\n+    accessItem.setPermCustom9(true);\n+    accessItem.setPermCustom10(true);\n+    accessItem.setPermCustom11(true);\n+    accessItem.setPermCustom12(true);\n+    // when\n+    WorkbasketAccessItemRepresentationModel repModel =\n+        workbasketAccessItemRepresentationModelAssembler.toModel(accessItem);\n+    WorkbasketAccessItemImpl accessItem2\n+        = (WorkbasketAccessItemImpl) workbasketAccessItemRepresentationModelAssembler\n+                                         .toEntityModel(repModel);\n+    //then\n+    testEqualityOfEntities(accessItem, accessItem2);\n+  }\n+\n+  private void testEqualityAfterConversion(\n+      WorkbasketAccessItem accessItem, WorkbasketAccessItemRepresentationModel repModel) {\n+    assertThat(repModel.getAccessId()).isEqualTo(accessItem.getAccessId());\n+    assertThat(repModel.getWorkbasketKey()).isEqualTo(accessItem.getWorkbasketKey());\n+    assertThat(repModel.getAccessItemId()).isEqualTo(accessItem.getId());\n+    assertThat(repModel.getWorkbasketId()).isEqualTo(accessItem.getWorkbasketId());\n+    assertThat(repModel.isPermAppend()).isEqualTo(accessItem.isPermAppend());\n+    assertThat(repModel.isPermCustom1()).isEqualTo(accessItem.isPermCustom1());\n+    assertThat(repModel.isPermCustom2()).isEqualTo(accessItem.isPermCustom2());\n+    assertThat(repModel.isPermCustom3()).isEqualTo(accessItem.isPermCustom3());\n+    assertThat(repModel.isPermCustom4()).isEqualTo(accessItem.isPermCustom4());\n+    assertThat(repModel.isPermCustom5()).isEqualTo(accessItem.isPermCustom5());\n+    assertThat(repModel.isPermCustom6()).isEqualTo(accessItem.isPermCustom6());\n+    assertThat(repModel.isPermCustom7()).isEqualTo(accessItem.isPermCustom7());\n+    assertThat(repModel.isPermCustom8()).isEqualTo(accessItem.isPermCustom8());\n+    assertThat(repModel.isPermCustom9()).isEqualTo(accessItem.isPermCustom9());\n+    assertThat(repModel.isPermCustom10()).isEqualTo(accessItem.isPermCustom10());\n+    assertThat(repModel.isPermCustom11()).isEqualTo(accessItem.isPermCustom11());\n+    assertThat(repModel.isPermCustom12()).isEqualTo(accessItem.isPermCustom12());\n+    assertThat(repModel.isPermDistribute()).isEqualTo(accessItem.isPermDistribute());\n+    assertThat(repModel.isPermRead()).isEqualTo(accessItem.isPermRead());\n+    assertThat(repModel.isPermOpen()).isEqualTo(accessItem.isPermOpen());\n+    assertThat(repModel.isPermTransfer()).isEqualTo(accessItem.isPermTransfer());\n+  }\n+\n+  private void testEqualityOfEntities(WorkbasketAccessItem item1, WorkbasketAccessItem items2) {\n+    assertThat(item1.getAccessId()).isEqualTo(items2.getAccessId());\n+    assertThat(item1.getWorkbasketKey()).isEqualTo(items2.getWorkbasketKey());\n+    assertThat(item1.getId()).isEqualTo(items2.getId());\n+    assertThat(item1.getWorkbasketId()).isEqualTo(items2.getWorkbasketId());\n+    assertThat(item1.isPermAppend()).isEqualTo(items2.isPermAppend());\n+    assertThat(item1.isPermCustom1()).isEqualTo(items2.isPermCustom1());\n+    assertThat(item1.isPermCustom2()).isEqualTo(items2.isPermCustom2());\n+    assertThat(item1.isPermCustom3()).isEqualTo(items2.isPermCustom3());\n+    assertThat(item1.isPermCustom4()).isEqualTo(items2.isPermCustom4());\n+    assertThat(item1.isPermCustom5()).isEqualTo(items2.isPermCustom5());\n+    assertThat(item1.isPermCustom6()).isEqualTo(items2.isPermCustom6());\n+    assertThat(item1.isPermCustom7()).isEqualTo(items2.isPermCustom7());\n+    assertThat(item1.isPermCustom8()).isEqualTo(items2.isPermCustom8());\n+    assertThat(item1.isPermCustom9()).isEqualTo(items2.isPermCustom9());\n+    assertThat(item1.isPermCustom10()).isEqualTo(items2.isPermCustom10());\n+    assertThat(item1.isPermCustom11()).isEqualTo(items2.isPermCustom11());\n+    assertThat(item1.isPermCustom12()).isEqualTo(items2.isPermCustom12());\n+    assertThat(item1.isPermDistribute()).isEqualTo(items2.isPermDistribute());\n+    assertThat(item1.isPermRead()).isEqualTo(items2.isPermRead());\n+    assertThat(item1.isPermOpen()).isEqualTo(items2.isPermOpen());\n+    assertThat(item1.isPermTransfer()).isEqualTo(items2.isPermTransfer());\n+  }\n+\n+  private void testLinks() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExNTMxOA==", "bodyText": "Let's talk about this class since this one here is somewhat special", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435115318", "createdAt": "2020-06-04T09:24:36Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/workbasket/rest/assembler/WorkbasketDefinitionRepresentationModelAssemblerTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package pro.taskana.workbasket.rest.assembler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExNTczMw==", "bodyText": "no cast needed", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435115733", "createdAt": "2020-06-04T09:25:12Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/workbasket/rest/assembler/WorkbasketRepresentationModelAssemblerTest.java", "diffHunk": "@@ -105,13 +79,64 @@ void resourceToWorkbasket() {\n     workbasketRepresentationModel.setOwner(\"Lars\");\n     workbasketRepresentationModel.setType(WorkbasketType.PERSONAL);\n     // when\n-    Workbasket workbasket =\n-        workbasketRepresentationModelAssembler.toEntityModel(workbasketRepresentationModel);\n+    WorkbasketImpl workbasket =\n+        (WorkbasketImpl) workbasketRepresentationModelAssembler\n+                             .toEntityModel(workbasketRepresentationModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExNTg4OA==", "bodyText": "no cast needed", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435115888", "createdAt": "2020-06-04T09:25:26Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/workbasket/rest/assembler/WorkbasketRepresentationModelAssemblerTest.java", "diffHunk": "@@ -105,13 +79,64 @@ void resourceToWorkbasket() {\n     workbasketRepresentationModel.setOwner(\"Lars\");\n     workbasketRepresentationModel.setType(WorkbasketType.PERSONAL);\n     // when\n-    Workbasket workbasket =\n-        workbasketRepresentationModelAssembler.toEntityModel(workbasketRepresentationModel);\n+    WorkbasketImpl workbasket =\n+        (WorkbasketImpl) workbasketRepresentationModelAssembler\n+                             .toEntityModel(workbasketRepresentationModel);\n     // then\n-    testEquality(workbasket, workbasketRepresentationModel);\n+    testEqualityAfterConversion(workbasket, workbasketRepresentationModel);\n+  }\n+\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    WorkbasketImpl workbasket = (WorkbasketImpl) workbasketService.newWorkbasket(\"1\", \"DOMAIN_A\");\n+    workbasket.setId(\"ID\");\n+    workbasket.setType(WorkbasketType.PERSONAL);\n+    workbasket.setName(\"Testbasket\");\n+    workbasket.setOrgLevel1(\"Org1\");\n+    workbasket.setOrgLevel2(\"Org2\");\n+    workbasket.setOrgLevel3(\"Org3\");\n+    workbasket.setOrgLevel4(\"Org4\");\n+    workbasket.setDescription(\"A test workbasket\");\n+    workbasket.setCustom1(\"1\");\n+    workbasket.setCustom2(\"2\");\n+    workbasket.setCustom3(\"3\");\n+    workbasket.setCustom4(\"4\");\n+    workbasket.setOwner(\"Lars\");\n+    workbasket.setCreated(Instant.parse(\"2010-01-01T12:00:00Z\"));\n+    workbasket.setModified(Instant.parse(\"2010-01-01T12:00:00Z\"));\n+    // when\n+    WorkbasketRepresentationModel repModel =\n+        workbasketRepresentationModelAssembler.toModel(workbasket);\n+    WorkbasketImpl workbasket2\n+        = (WorkbasketImpl) workbasketRepresentationModelAssembler.toEntityModel(repModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExNTk2Mw==", "bodyText": "see comments above.", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435115963", "createdAt": "2020-06-04T09:25:34Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/workbasket/rest/assembler/WorkbasketRepresentationModelAssemblerTest.java", "diffHunk": "@@ -105,13 +79,64 @@ void resourceToWorkbasket() {\n     workbasketRepresentationModel.setOwner(\"Lars\");\n     workbasketRepresentationModel.setType(WorkbasketType.PERSONAL);\n     // when\n-    Workbasket workbasket =\n-        workbasketRepresentationModelAssembler.toEntityModel(workbasketRepresentationModel);\n+    WorkbasketImpl workbasket =\n+        (WorkbasketImpl) workbasketRepresentationModelAssembler\n+                             .toEntityModel(workbasketRepresentationModel);\n     // then\n-    testEquality(workbasket, workbasketRepresentationModel);\n+    testEqualityAfterConversion(workbasket, workbasketRepresentationModel);\n+  }\n+\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    WorkbasketImpl workbasket = (WorkbasketImpl) workbasketService.newWorkbasket(\"1\", \"DOMAIN_A\");\n+    workbasket.setId(\"ID\");\n+    workbasket.setType(WorkbasketType.PERSONAL);\n+    workbasket.setName(\"Testbasket\");\n+    workbasket.setOrgLevel1(\"Org1\");\n+    workbasket.setOrgLevel2(\"Org2\");\n+    workbasket.setOrgLevel3(\"Org3\");\n+    workbasket.setOrgLevel4(\"Org4\");\n+    workbasket.setDescription(\"A test workbasket\");\n+    workbasket.setCustom1(\"1\");\n+    workbasket.setCustom2(\"2\");\n+    workbasket.setCustom3(\"3\");\n+    workbasket.setCustom4(\"4\");\n+    workbasket.setOwner(\"Lars\");\n+    workbasket.setCreated(Instant.parse(\"2010-01-01T12:00:00Z\"));\n+    workbasket.setModified(Instant.parse(\"2010-01-01T12:00:00Z\"));\n+    // when\n+    WorkbasketRepresentationModel repModel =\n+        workbasketRepresentationModelAssembler.toModel(workbasket);\n+    WorkbasketImpl workbasket2\n+        = (WorkbasketImpl) workbasketRepresentationModelAssembler.toEntityModel(repModel);\n+\n+    testEqualityOfEntities(workbasket, workbasket2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExNjA3Ng==", "bodyText": "can be removed", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435116076", "createdAt": "2020-06-04T09:25:45Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/workbasket/rest/assembler/WorkbasketRepresentationModelAssemblerTest.java", "diffHunk": "@@ -105,13 +79,64 @@ void resourceToWorkbasket() {\n     workbasketRepresentationModel.setOwner(\"Lars\");\n     workbasketRepresentationModel.setType(WorkbasketType.PERSONAL);\n     // when\n-    Workbasket workbasket =\n-        workbasketRepresentationModelAssembler.toEntityModel(workbasketRepresentationModel);\n+    WorkbasketImpl workbasket =\n+        (WorkbasketImpl) workbasketRepresentationModelAssembler\n+                             .toEntityModel(workbasketRepresentationModel);\n     // then\n-    testEquality(workbasket, workbasketRepresentationModel);\n+    testEqualityAfterConversion(workbasket, workbasketRepresentationModel);\n+  }\n+\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    WorkbasketImpl workbasket = (WorkbasketImpl) workbasketService.newWorkbasket(\"1\", \"DOMAIN_A\");\n+    workbasket.setId(\"ID\");\n+    workbasket.setType(WorkbasketType.PERSONAL);\n+    workbasket.setName(\"Testbasket\");\n+    workbasket.setOrgLevel1(\"Org1\");\n+    workbasket.setOrgLevel2(\"Org2\");\n+    workbasket.setOrgLevel3(\"Org3\");\n+    workbasket.setOrgLevel4(\"Org4\");\n+    workbasket.setDescription(\"A test workbasket\");\n+    workbasket.setCustom1(\"1\");\n+    workbasket.setCustom2(\"2\");\n+    workbasket.setCustom3(\"3\");\n+    workbasket.setCustom4(\"4\");\n+    workbasket.setOwner(\"Lars\");\n+    workbasket.setCreated(Instant.parse(\"2010-01-01T12:00:00Z\"));\n+    workbasket.setModified(Instant.parse(\"2010-01-01T12:00:00Z\"));\n+    // when\n+    WorkbasketRepresentationModel repModel =\n+        workbasketRepresentationModelAssembler.toModel(workbasket);\n+    WorkbasketImpl workbasket2\n+        = (WorkbasketImpl) workbasketRepresentationModelAssembler.toEntityModel(repModel);\n+\n+    testEqualityOfEntities(workbasket, workbasket2);\n+  }\n+\n+  private void testEqualityOfEntities(Workbasket workbasket, Workbasket workbasket2) {\n+    assertThat(workbasket2.getId()).isEqualTo(workbasket.getId());\n+    assertThat(workbasket2.getKey()).isEqualTo(workbasket.getKey());\n+    assertThat(workbasket2.getCreated())\n+        .isEqualTo(workbasket.getCreated());\n+    assertThat(workbasket2.getModified())\n+        .isEqualTo(workbasket.getModified());\n+    assertThat(workbasket2.getName()).isEqualTo(workbasket.getName());\n+    assertThat(workbasket2.getDescription())\n+        .isEqualTo(workbasket.getDescription());\n+    assertThat(workbasket2.getOwner()).isEqualTo(workbasket.getOwner());\n+    assertThat(workbasket2.getDomain()).isEqualTo(workbasket.getDomain());\n+    assertThat(workbasket2.getType()).isEqualTo(workbasket.getType());\n+    assertThat(workbasket2.getCustom1()).isEqualTo(workbasket.getCustom1());\n+    assertThat(workbasket2.getCustom2()).isEqualTo(workbasket.getCustom2());\n+    assertThat(workbasket2.getCustom3()).isEqualTo(workbasket.getCustom3());\n+    assertThat(workbasket2.getCustom4()).isEqualTo(workbasket.getCustom4());\n+    assertThat(workbasket2.getOrgLevel1()).isEqualTo(workbasket.getOrgLevel1());\n+    assertThat(workbasket2.getOrgLevel2()).isEqualTo(workbasket.getOrgLevel2());\n+    assertThat(workbasket2.getOrgLevel3()).isEqualTo(workbasket.getOrgLevel3());\n+    assertThat(workbasket2.getOrgLevel4()).isEqualTo(workbasket.getOrgLevel4());\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExNjM3Mw==", "bodyText": "no cast needed", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435116373", "createdAt": "2020-06-04T09:26:15Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/workbasket/rest/assembler/WorkbasketSummaryAssemblerTest.java", "diffHunk": "@@ -44,34 +47,101 @@ void workbasketSummaryToResource() {\n     WorkbasketSummaryRepresentationModel workbasketSummaryRepresentationModel =\n         workbasketSummaryRepresentationModelAssembler.toModel(workbasketSummary);\n     // then\n-    Assert.assertEquals(\n-        workbasketSummary.getDescription(), workbasketSummaryRepresentationModel.getDescription());\n-    Assert.assertEquals(\n-        workbasketSummary.getDomain(), workbasketSummaryRepresentationModel.getDomain());\n-    Assert.assertEquals(\n-        workbasketSummary.getId(), workbasketSummaryRepresentationModel.getWorkbasketId());\n-    Assert.assertEquals(workbasketSummary.getKey(), workbasketSummaryRepresentationModel.getKey());\n-    Assert.assertEquals(\n-        workbasketSummary.getName(), workbasketSummaryRepresentationModel.getName());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom1(), workbasketSummaryRepresentationModel.getCustom1());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom2(), workbasketSummaryRepresentationModel.getCustom2());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom3(), workbasketSummaryRepresentationModel.getCustom3());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom4(), workbasketSummaryRepresentationModel.getCustom4());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel1(), workbasketSummaryRepresentationModel.getOrgLevel1());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel2(), workbasketSummaryRepresentationModel.getOrgLevel2());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel3(), workbasketSummaryRepresentationModel.getOrgLevel3());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel4(), workbasketSummaryRepresentationModel.getOrgLevel4());\n-    Assert.assertEquals(\n-        workbasketSummary.getOwner(), workbasketSummaryRepresentationModel.getOwner());\n-    Assert.assertEquals(\n-        workbasketSummary.getType(), workbasketSummaryRepresentationModel.getType());\n+    testEqualityAfterConversion(workbasketSummaryRepresentationModel, workbasketSummary);\n+  }\n+\n+  @Test\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n+    WorkbasketSummaryRepresentationModel repModel =\n+        new WorkbasketSummaryRepresentationModel();\n+    repModel.setWorkbasketId(\"1\");\n+    repModel.setCustom1(\"Custom1\");\n+    repModel.setCustom2(\"Custom2\");\n+    repModel.setCustom3(\"Custom3\");\n+    repModel.setCustom4(\"Custom4\");\n+    repModel.setDescription(\"Test Ressource\");\n+    repModel.setDomain(\"DOMAIN_A\");\n+    repModel.setKey(\"1\");\n+    repModel.setName(\"Ressource\");\n+    repModel.setOrgLevel1(\"Org1\");\n+    repModel.setOrgLevel2(\"Org2\");\n+    repModel.setOrgLevel3(\"Org3\");\n+    repModel.setOrgLevel4(\"Org4\");\n+    repModel.setOwner(\"Lars\");\n+    repModel.setType(WorkbasketType.PERSONAL);\n+    // when\n+    WorkbasketSummaryImpl workbasket =\n+        (WorkbasketSummaryImpl) workbasketSummaryRepresentationModelAssembler\n+                                    .toEntityModel(repModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExNjQ5Nw==", "bodyText": "no cast needed", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435116497", "createdAt": "2020-06-04T09:26:29Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/workbasket/rest/assembler/WorkbasketSummaryAssemblerTest.java", "diffHunk": "@@ -44,34 +47,101 @@ void workbasketSummaryToResource() {\n     WorkbasketSummaryRepresentationModel workbasketSummaryRepresentationModel =\n         workbasketSummaryRepresentationModelAssembler.toModel(workbasketSummary);\n     // then\n-    Assert.assertEquals(\n-        workbasketSummary.getDescription(), workbasketSummaryRepresentationModel.getDescription());\n-    Assert.assertEquals(\n-        workbasketSummary.getDomain(), workbasketSummaryRepresentationModel.getDomain());\n-    Assert.assertEquals(\n-        workbasketSummary.getId(), workbasketSummaryRepresentationModel.getWorkbasketId());\n-    Assert.assertEquals(workbasketSummary.getKey(), workbasketSummaryRepresentationModel.getKey());\n-    Assert.assertEquals(\n-        workbasketSummary.getName(), workbasketSummaryRepresentationModel.getName());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom1(), workbasketSummaryRepresentationModel.getCustom1());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom2(), workbasketSummaryRepresentationModel.getCustom2());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom3(), workbasketSummaryRepresentationModel.getCustom3());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom4(), workbasketSummaryRepresentationModel.getCustom4());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel1(), workbasketSummaryRepresentationModel.getOrgLevel1());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel2(), workbasketSummaryRepresentationModel.getOrgLevel2());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel3(), workbasketSummaryRepresentationModel.getOrgLevel3());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel4(), workbasketSummaryRepresentationModel.getOrgLevel4());\n-    Assert.assertEquals(\n-        workbasketSummary.getOwner(), workbasketSummaryRepresentationModel.getOwner());\n-    Assert.assertEquals(\n-        workbasketSummary.getType(), workbasketSummaryRepresentationModel.getType());\n+    testEqualityAfterConversion(workbasketSummaryRepresentationModel, workbasketSummary);\n+  }\n+\n+  @Test\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n+    WorkbasketSummaryRepresentationModel repModel =\n+        new WorkbasketSummaryRepresentationModel();\n+    repModel.setWorkbasketId(\"1\");\n+    repModel.setCustom1(\"Custom1\");\n+    repModel.setCustom2(\"Custom2\");\n+    repModel.setCustom3(\"Custom3\");\n+    repModel.setCustom4(\"Custom4\");\n+    repModel.setDescription(\"Test Ressource\");\n+    repModel.setDomain(\"DOMAIN_A\");\n+    repModel.setKey(\"1\");\n+    repModel.setName(\"Ressource\");\n+    repModel.setOrgLevel1(\"Org1\");\n+    repModel.setOrgLevel2(\"Org2\");\n+    repModel.setOrgLevel3(\"Org3\");\n+    repModel.setOrgLevel4(\"Org4\");\n+    repModel.setOwner(\"Lars\");\n+    repModel.setType(WorkbasketType.PERSONAL);\n+    // when\n+    WorkbasketSummaryImpl workbasket =\n+        (WorkbasketSummaryImpl) workbasketSummaryRepresentationModelAssembler\n+                                    .toEntityModel(repModel);\n+    // then\n+    testEqualityAfterConversion(repModel, workbasket);\n+  }\n+\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    WorkbasketSummaryImpl workbasketSummary =\n+        (WorkbasketSummaryImpl) workbasketService.newWorkbasket(\"1\", \"DOMAIN_A\").asSummary();\n+    workbasketSummary.setDescription(\"WorkbasketSummaryImplTes\");\n+    workbasketSummary.setId(\"1\");\n+    workbasketSummary.setName(\"WorkbasketSummary\");\n+    workbasketSummary.setCustom1(\"custom1\");\n+    workbasketSummary.setCustom2(\"custom2\");\n+    workbasketSummary.setCustom3(\"custom3\");\n+    workbasketSummary.setCustom4(\"custom4\");\n+    workbasketSummary.setOrgLevel1(\"Org1\");\n+    workbasketSummary.setOrgLevel2(\"Org2\");\n+    workbasketSummary.setOrgLevel3(\"Org3\");\n+    workbasketSummary.setOrgLevel4(\"Org4\");\n+    workbasketSummary.setOwner(\"Lars\");\n+    workbasketSummary.setType(WorkbasketType.PERSONAL);\n+\n+    WorkbasketSummaryRepresentationModel repModel =\n+        workbasketSummaryRepresentationModelAssembler.toModel(workbasketSummary);\n+    WorkbasketSummaryImpl workbasketSummary2\n+        = (WorkbasketSummaryImpl) workbasketSummaryRepresentationModelAssembler\n+                                      .toEntityModel(repModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExNjU3NA==", "bodyText": "see comments above.", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435116574", "createdAt": "2020-06-04T09:26:36Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/workbasket/rest/assembler/WorkbasketSummaryAssemblerTest.java", "diffHunk": "@@ -44,34 +47,101 @@ void workbasketSummaryToResource() {\n     WorkbasketSummaryRepresentationModel workbasketSummaryRepresentationModel =\n         workbasketSummaryRepresentationModelAssembler.toModel(workbasketSummary);\n     // then\n-    Assert.assertEquals(\n-        workbasketSummary.getDescription(), workbasketSummaryRepresentationModel.getDescription());\n-    Assert.assertEquals(\n-        workbasketSummary.getDomain(), workbasketSummaryRepresentationModel.getDomain());\n-    Assert.assertEquals(\n-        workbasketSummary.getId(), workbasketSummaryRepresentationModel.getWorkbasketId());\n-    Assert.assertEquals(workbasketSummary.getKey(), workbasketSummaryRepresentationModel.getKey());\n-    Assert.assertEquals(\n-        workbasketSummary.getName(), workbasketSummaryRepresentationModel.getName());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom1(), workbasketSummaryRepresentationModel.getCustom1());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom2(), workbasketSummaryRepresentationModel.getCustom2());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom3(), workbasketSummaryRepresentationModel.getCustom3());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom4(), workbasketSummaryRepresentationModel.getCustom4());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel1(), workbasketSummaryRepresentationModel.getOrgLevel1());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel2(), workbasketSummaryRepresentationModel.getOrgLevel2());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel3(), workbasketSummaryRepresentationModel.getOrgLevel3());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel4(), workbasketSummaryRepresentationModel.getOrgLevel4());\n-    Assert.assertEquals(\n-        workbasketSummary.getOwner(), workbasketSummaryRepresentationModel.getOwner());\n-    Assert.assertEquals(\n-        workbasketSummary.getType(), workbasketSummaryRepresentationModel.getType());\n+    testEqualityAfterConversion(workbasketSummaryRepresentationModel, workbasketSummary);\n+  }\n+\n+  @Test\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n+    WorkbasketSummaryRepresentationModel repModel =\n+        new WorkbasketSummaryRepresentationModel();\n+    repModel.setWorkbasketId(\"1\");\n+    repModel.setCustom1(\"Custom1\");\n+    repModel.setCustom2(\"Custom2\");\n+    repModel.setCustom3(\"Custom3\");\n+    repModel.setCustom4(\"Custom4\");\n+    repModel.setDescription(\"Test Ressource\");\n+    repModel.setDomain(\"DOMAIN_A\");\n+    repModel.setKey(\"1\");\n+    repModel.setName(\"Ressource\");\n+    repModel.setOrgLevel1(\"Org1\");\n+    repModel.setOrgLevel2(\"Org2\");\n+    repModel.setOrgLevel3(\"Org3\");\n+    repModel.setOrgLevel4(\"Org4\");\n+    repModel.setOwner(\"Lars\");\n+    repModel.setType(WorkbasketType.PERSONAL);\n+    // when\n+    WorkbasketSummaryImpl workbasket =\n+        (WorkbasketSummaryImpl) workbasketSummaryRepresentationModelAssembler\n+                                    .toEntityModel(repModel);\n+    // then\n+    testEqualityAfterConversion(repModel, workbasket);\n+  }\n+\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    WorkbasketSummaryImpl workbasketSummary =\n+        (WorkbasketSummaryImpl) workbasketService.newWorkbasket(\"1\", \"DOMAIN_A\").asSummary();\n+    workbasketSummary.setDescription(\"WorkbasketSummaryImplTes\");\n+    workbasketSummary.setId(\"1\");\n+    workbasketSummary.setName(\"WorkbasketSummary\");\n+    workbasketSummary.setCustom1(\"custom1\");\n+    workbasketSummary.setCustom2(\"custom2\");\n+    workbasketSummary.setCustom3(\"custom3\");\n+    workbasketSummary.setCustom4(\"custom4\");\n+    workbasketSummary.setOrgLevel1(\"Org1\");\n+    workbasketSummary.setOrgLevel2(\"Org2\");\n+    workbasketSummary.setOrgLevel3(\"Org3\");\n+    workbasketSummary.setOrgLevel4(\"Org4\");\n+    workbasketSummary.setOwner(\"Lars\");\n+    workbasketSummary.setType(WorkbasketType.PERSONAL);\n+\n+    WorkbasketSummaryRepresentationModel repModel =\n+        workbasketSummaryRepresentationModelAssembler.toModel(workbasketSummary);\n+    WorkbasketSummaryImpl workbasketSummary2\n+        = (WorkbasketSummaryImpl) workbasketSummaryRepresentationModelAssembler\n+                                      .toEntityModel(repModel);\n+\n+    testEqualityOfEntities(workbasketSummary, workbasketSummary2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExNjc0Nw==", "bodyText": "can be removed.", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435116747", "createdAt": "2020-06-04T09:26:52Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/workbasket/rest/assembler/WorkbasketSummaryAssemblerTest.java", "diffHunk": "@@ -44,34 +47,101 @@ void workbasketSummaryToResource() {\n     WorkbasketSummaryRepresentationModel workbasketSummaryRepresentationModel =\n         workbasketSummaryRepresentationModelAssembler.toModel(workbasketSummary);\n     // then\n-    Assert.assertEquals(\n-        workbasketSummary.getDescription(), workbasketSummaryRepresentationModel.getDescription());\n-    Assert.assertEquals(\n-        workbasketSummary.getDomain(), workbasketSummaryRepresentationModel.getDomain());\n-    Assert.assertEquals(\n-        workbasketSummary.getId(), workbasketSummaryRepresentationModel.getWorkbasketId());\n-    Assert.assertEquals(workbasketSummary.getKey(), workbasketSummaryRepresentationModel.getKey());\n-    Assert.assertEquals(\n-        workbasketSummary.getName(), workbasketSummaryRepresentationModel.getName());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom1(), workbasketSummaryRepresentationModel.getCustom1());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom2(), workbasketSummaryRepresentationModel.getCustom2());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom3(), workbasketSummaryRepresentationModel.getCustom3());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom4(), workbasketSummaryRepresentationModel.getCustom4());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel1(), workbasketSummaryRepresentationModel.getOrgLevel1());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel2(), workbasketSummaryRepresentationModel.getOrgLevel2());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel3(), workbasketSummaryRepresentationModel.getOrgLevel3());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel4(), workbasketSummaryRepresentationModel.getOrgLevel4());\n-    Assert.assertEquals(\n-        workbasketSummary.getOwner(), workbasketSummaryRepresentationModel.getOwner());\n-    Assert.assertEquals(\n-        workbasketSummary.getType(), workbasketSummaryRepresentationModel.getType());\n+    testEqualityAfterConversion(workbasketSummaryRepresentationModel, workbasketSummary);\n+  }\n+\n+  @Test\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n+    WorkbasketSummaryRepresentationModel repModel =\n+        new WorkbasketSummaryRepresentationModel();\n+    repModel.setWorkbasketId(\"1\");\n+    repModel.setCustom1(\"Custom1\");\n+    repModel.setCustom2(\"Custom2\");\n+    repModel.setCustom3(\"Custom3\");\n+    repModel.setCustom4(\"Custom4\");\n+    repModel.setDescription(\"Test Ressource\");\n+    repModel.setDomain(\"DOMAIN_A\");\n+    repModel.setKey(\"1\");\n+    repModel.setName(\"Ressource\");\n+    repModel.setOrgLevel1(\"Org1\");\n+    repModel.setOrgLevel2(\"Org2\");\n+    repModel.setOrgLevel3(\"Org3\");\n+    repModel.setOrgLevel4(\"Org4\");\n+    repModel.setOwner(\"Lars\");\n+    repModel.setType(WorkbasketType.PERSONAL);\n+    // when\n+    WorkbasketSummaryImpl workbasket =\n+        (WorkbasketSummaryImpl) workbasketSummaryRepresentationModelAssembler\n+                                    .toEntityModel(repModel);\n+    // then\n+    testEqualityAfterConversion(repModel, workbasket);\n+  }\n+\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    WorkbasketSummaryImpl workbasketSummary =\n+        (WorkbasketSummaryImpl) workbasketService.newWorkbasket(\"1\", \"DOMAIN_A\").asSummary();\n+    workbasketSummary.setDescription(\"WorkbasketSummaryImplTes\");\n+    workbasketSummary.setId(\"1\");\n+    workbasketSummary.setName(\"WorkbasketSummary\");\n+    workbasketSummary.setCustom1(\"custom1\");\n+    workbasketSummary.setCustom2(\"custom2\");\n+    workbasketSummary.setCustom3(\"custom3\");\n+    workbasketSummary.setCustom4(\"custom4\");\n+    workbasketSummary.setOrgLevel1(\"Org1\");\n+    workbasketSummary.setOrgLevel2(\"Org2\");\n+    workbasketSummary.setOrgLevel3(\"Org3\");\n+    workbasketSummary.setOrgLevel4(\"Org4\");\n+    workbasketSummary.setOwner(\"Lars\");\n+    workbasketSummary.setType(WorkbasketType.PERSONAL);\n+\n+    WorkbasketSummaryRepresentationModel repModel =\n+        workbasketSummaryRepresentationModelAssembler.toModel(workbasketSummary);\n+    WorkbasketSummaryImpl workbasketSummary2\n+        = (WorkbasketSummaryImpl) workbasketSummaryRepresentationModelAssembler\n+                                      .toEntityModel(repModel);\n+\n+    testEqualityOfEntities(workbasketSummary, workbasketSummary2);\n+  }\n+\n+  private void testEqualityAfterConversion(WorkbasketSummaryRepresentationModel repModel,\n+      WorkbasketSummary summary) {\n+    Assert.assertEquals(summary.getDescription(), repModel.getDescription());\n+    Assert.assertEquals(summary.getDomain(), repModel.getDomain());\n+    Assert.assertEquals(summary.getId(), repModel.getWorkbasketId());\n+    Assert.assertEquals(summary.getKey(), repModel.getKey());\n+    Assert.assertEquals(summary.getName(), repModel.getName());\n+    Assert.assertEquals(summary.getCustom1(), repModel.getCustom1());\n+    Assert.assertEquals(summary.getCustom2(), repModel.getCustom2());\n+    Assert.assertEquals(summary.getCustom3(), repModel.getCustom3());\n+    Assert.assertEquals(summary.getCustom4(), repModel.getCustom4());\n+    Assert.assertEquals(summary.getOrgLevel1(), repModel.getOrgLevel1());\n+    Assert.assertEquals(summary.getOrgLevel2(), repModel.getOrgLevel2());\n+    Assert.assertEquals(summary.getOrgLevel3(), repModel.getOrgLevel3());\n+    Assert.assertEquals(summary.getOrgLevel4(), repModel.getOrgLevel4());\n+    Assert.assertEquals(summary.getOwner(), repModel.getOwner());\n+    Assert.assertEquals(summary.getType(), repModel.getType());\n+  }\n+\n+  private void testEqualityOfEntities(WorkbasketSummary workbasket, WorkbasketSummary workbasket2) {\n+    assertThat(workbasket2.getId()).isEqualTo(workbasket.getId());\n+    assertThat(workbasket2.getKey()).isEqualTo(workbasket.getKey());\n+    assertThat(workbasket2.getName()).isEqualTo(workbasket.getName());\n+    assertThat(workbasket2.getDescription())\n+        .isEqualTo(workbasket.getDescription());\n+    assertThat(workbasket2.getOwner()).isEqualTo(workbasket.getOwner());\n+    assertThat(workbasket2.getDomain()).isEqualTo(workbasket.getDomain());\n+    assertThat(workbasket2.getType()).isEqualTo(workbasket.getType());\n+    assertThat(workbasket2.getCustom1()).isEqualTo(workbasket.getCustom1());\n+    assertThat(workbasket2.getCustom2()).isEqualTo(workbasket.getCustom2());\n+    assertThat(workbasket2.getCustom3()).isEqualTo(workbasket.getCustom3());\n+    assertThat(workbasket2.getCustom4()).isEqualTo(workbasket.getCustom4());\n+    assertThat(workbasket2.getOrgLevel1()).isEqualTo(workbasket.getOrgLevel1());\n+    assertThat(workbasket2.getOrgLevel2()).isEqualTo(workbasket.getOrgLevel2());\n+    assertThat(workbasket2.getOrgLevel3()).isEqualTo(workbasket.getOrgLevel3());\n+    assertThat(workbasket2.getOrgLevel4()).isEqualTo(workbasket.getOrgLevel4());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExNjgyNQ==", "bodyText": "missing parameter", "url": "https://github.com/Taskana/taskana/pull/1098#discussion_r435116825", "createdAt": "2020-06-04T09:26:59Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/workbasket/rest/assembler/WorkbasketSummaryAssemblerTest.java", "diffHunk": "@@ -44,34 +47,101 @@ void workbasketSummaryToResource() {\n     WorkbasketSummaryRepresentationModel workbasketSummaryRepresentationModel =\n         workbasketSummaryRepresentationModelAssembler.toModel(workbasketSummary);\n     // then\n-    Assert.assertEquals(\n-        workbasketSummary.getDescription(), workbasketSummaryRepresentationModel.getDescription());\n-    Assert.assertEquals(\n-        workbasketSummary.getDomain(), workbasketSummaryRepresentationModel.getDomain());\n-    Assert.assertEquals(\n-        workbasketSummary.getId(), workbasketSummaryRepresentationModel.getWorkbasketId());\n-    Assert.assertEquals(workbasketSummary.getKey(), workbasketSummaryRepresentationModel.getKey());\n-    Assert.assertEquals(\n-        workbasketSummary.getName(), workbasketSummaryRepresentationModel.getName());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom1(), workbasketSummaryRepresentationModel.getCustom1());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom2(), workbasketSummaryRepresentationModel.getCustom2());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom3(), workbasketSummaryRepresentationModel.getCustom3());\n-    Assert.assertEquals(\n-        workbasketSummary.getCustom4(), workbasketSummaryRepresentationModel.getCustom4());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel1(), workbasketSummaryRepresentationModel.getOrgLevel1());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel2(), workbasketSummaryRepresentationModel.getOrgLevel2());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel3(), workbasketSummaryRepresentationModel.getOrgLevel3());\n-    Assert.assertEquals(\n-        workbasketSummary.getOrgLevel4(), workbasketSummaryRepresentationModel.getOrgLevel4());\n-    Assert.assertEquals(\n-        workbasketSummary.getOwner(), workbasketSummaryRepresentationModel.getOwner());\n-    Assert.assertEquals(\n-        workbasketSummary.getType(), workbasketSummaryRepresentationModel.getType());\n+    testEqualityAfterConversion(workbasketSummaryRepresentationModel, workbasketSummary);\n+  }\n+\n+  @Test\n+  void should_ReturnEntity_When_ConvertingRepresentationModelToEntity() {\n+    WorkbasketSummaryRepresentationModel repModel =\n+        new WorkbasketSummaryRepresentationModel();\n+    repModel.setWorkbasketId(\"1\");\n+    repModel.setCustom1(\"Custom1\");\n+    repModel.setCustom2(\"Custom2\");\n+    repModel.setCustom3(\"Custom3\");\n+    repModel.setCustom4(\"Custom4\");\n+    repModel.setDescription(\"Test Ressource\");\n+    repModel.setDomain(\"DOMAIN_A\");\n+    repModel.setKey(\"1\");\n+    repModel.setName(\"Ressource\");\n+    repModel.setOrgLevel1(\"Org1\");\n+    repModel.setOrgLevel2(\"Org2\");\n+    repModel.setOrgLevel3(\"Org3\");\n+    repModel.setOrgLevel4(\"Org4\");\n+    repModel.setOwner(\"Lars\");\n+    repModel.setType(WorkbasketType.PERSONAL);\n+    // when\n+    WorkbasketSummaryImpl workbasket =\n+        (WorkbasketSummaryImpl) workbasketSummaryRepresentationModelAssembler\n+                                    .toEntityModel(repModel);\n+    // then\n+    testEqualityAfterConversion(repModel, workbasket);\n+  }\n+\n+  @Test\n+  void should_Equal_When_ComparingEntityWithConvertedEntity() {\n+    WorkbasketSummaryImpl workbasketSummary =\n+        (WorkbasketSummaryImpl) workbasketService.newWorkbasket(\"1\", \"DOMAIN_A\").asSummary();\n+    workbasketSummary.setDescription(\"WorkbasketSummaryImplTes\");\n+    workbasketSummary.setId(\"1\");\n+    workbasketSummary.setName(\"WorkbasketSummary\");\n+    workbasketSummary.setCustom1(\"custom1\");\n+    workbasketSummary.setCustom2(\"custom2\");\n+    workbasketSummary.setCustom3(\"custom3\");\n+    workbasketSummary.setCustom4(\"custom4\");\n+    workbasketSummary.setOrgLevel1(\"Org1\");\n+    workbasketSummary.setOrgLevel2(\"Org2\");\n+    workbasketSummary.setOrgLevel3(\"Org3\");\n+    workbasketSummary.setOrgLevel4(\"Org4\");\n+    workbasketSummary.setOwner(\"Lars\");\n+    workbasketSummary.setType(WorkbasketType.PERSONAL);\n+\n+    WorkbasketSummaryRepresentationModel repModel =\n+        workbasketSummaryRepresentationModelAssembler.toModel(workbasketSummary);\n+    WorkbasketSummaryImpl workbasketSummary2\n+        = (WorkbasketSummaryImpl) workbasketSummaryRepresentationModelAssembler\n+                                      .toEntityModel(repModel);\n+\n+    testEqualityOfEntities(workbasketSummary, workbasketSummary2);\n+  }\n+\n+  private void testEqualityAfterConversion(WorkbasketSummaryRepresentationModel repModel,\n+      WorkbasketSummary summary) {\n+    Assert.assertEquals(summary.getDescription(), repModel.getDescription());\n+    Assert.assertEquals(summary.getDomain(), repModel.getDomain());\n+    Assert.assertEquals(summary.getId(), repModel.getWorkbasketId());\n+    Assert.assertEquals(summary.getKey(), repModel.getKey());\n+    Assert.assertEquals(summary.getName(), repModel.getName());\n+    Assert.assertEquals(summary.getCustom1(), repModel.getCustom1());\n+    Assert.assertEquals(summary.getCustom2(), repModel.getCustom2());\n+    Assert.assertEquals(summary.getCustom3(), repModel.getCustom3());\n+    Assert.assertEquals(summary.getCustom4(), repModel.getCustom4());\n+    Assert.assertEquals(summary.getOrgLevel1(), repModel.getOrgLevel1());\n+    Assert.assertEquals(summary.getOrgLevel2(), repModel.getOrgLevel2());\n+    Assert.assertEquals(summary.getOrgLevel3(), repModel.getOrgLevel3());\n+    Assert.assertEquals(summary.getOrgLevel4(), repModel.getOrgLevel4());\n+    Assert.assertEquals(summary.getOwner(), repModel.getOwner());\n+    Assert.assertEquals(summary.getType(), repModel.getType());\n+  }\n+\n+  private void testEqualityOfEntities(WorkbasketSummary workbasket, WorkbasketSummary workbasket2) {\n+    assertThat(workbasket2.getId()).isEqualTo(workbasket.getId());\n+    assertThat(workbasket2.getKey()).isEqualTo(workbasket.getKey());\n+    assertThat(workbasket2.getName()).isEqualTo(workbasket.getName());\n+    assertThat(workbasket2.getDescription())\n+        .isEqualTo(workbasket.getDescription());\n+    assertThat(workbasket2.getOwner()).isEqualTo(workbasket.getOwner());\n+    assertThat(workbasket2.getDomain()).isEqualTo(workbasket.getDomain());\n+    assertThat(workbasket2.getType()).isEqualTo(workbasket.getType());\n+    assertThat(workbasket2.getCustom1()).isEqualTo(workbasket.getCustom1());\n+    assertThat(workbasket2.getCustom2()).isEqualTo(workbasket.getCustom2());\n+    assertThat(workbasket2.getCustom3()).isEqualTo(workbasket.getCustom3());\n+    assertThat(workbasket2.getCustom4()).isEqualTo(workbasket.getCustom4());\n+    assertThat(workbasket2.getOrgLevel1()).isEqualTo(workbasket.getOrgLevel1());\n+    assertThat(workbasket2.getOrgLevel2()).isEqualTo(workbasket.getOrgLevel2());\n+    assertThat(workbasket2.getOrgLevel3()).isEqualTo(workbasket.getOrgLevel3());\n+    assertThat(workbasket2.getOrgLevel4()).isEqualTo(workbasket.getOrgLevel4());\n+  }\n+\n+  private void testLinks() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d91c788f8e51a3ecffb932ed6e9bb705e24ae75"}, "originalPosition": 153}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0650b4988d21526a0dc5e9aab02e83b583aeb10a", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/0650b4988d21526a0dc5e9aab02e83b583aeb10a", "committedDate": "2020-06-04T09:59:41Z", "message": "WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dbda48a20c81ab7af8dc0f1aebb2880828c2cd95", "author": {"user": null}, "url": "https://github.com/Taskana/taskana/commit/dbda48a20c81ab7af8dc0f1aebb2880828c2cd95", "committedDate": "2020-06-04T11:19:38Z", "message": "Miracle WIP"}, "afterCommit": {"oid": "4a79e3c2327bc107c95ae42654ed6219bd31ae26", "author": {"user": null}, "url": "https://github.com/Taskana/taskana/commit/4a79e3c2327bc107c95ae42654ed6219bd31ae26", "committedDate": "2020-06-04T12:34:11Z", "message": "Miracle WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a79e3c2327bc107c95ae42654ed6219bd31ae26", "author": {"user": null}, "url": "https://github.com/Taskana/taskana/commit/4a79e3c2327bc107c95ae42654ed6219bd31ae26", "committedDate": "2020-06-04T12:34:11Z", "message": "Miracle WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae55abc8e2b632e2b72b2ed74577db5b039a6204", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/ae55abc8e2b632e2b72b2ed74577db5b039a6204", "committedDate": "2020-06-04T15:41:20Z", "message": "Miracle WIP 2"}, "afterCommit": {"oid": "82f082a38e4fdf24dbe67ecef3ef70c70e2a085f", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/82f082a38e4fdf24dbe67ecef3ef70c70e2a085f", "committedDate": "2020-06-04T15:49:45Z", "message": "Miracle WIP 2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82f082a38e4fdf24dbe67ecef3ef70c70e2a085f", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/82f082a38e4fdf24dbe67ecef3ef70c70e2a085f", "committedDate": "2020-06-04T15:49:45Z", "message": "Miracle WIP 2"}, "afterCommit": {"oid": "451ab860fc24b75274f8774b4cc7fa335c71dfad", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/451ab860fc24b75274f8774b4cc7fa335c71dfad", "committedDate": "2020-06-04T15:52:27Z", "message": "Miracle WIP 2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "451ab860fc24b75274f8774b4cc7fa335c71dfad", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/451ab860fc24b75274f8774b4cc7fa335c71dfad", "committedDate": "2020-06-04T15:52:27Z", "message": "Miracle WIP 2"}, "afterCommit": {"oid": "891c08154fa4f7f0503091058f4f8f4b367cf627", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/891c08154fa4f7f0503091058f4f8f4b367cf627", "committedDate": "2020-06-04T15:56:53Z", "message": "Miracle WIP 2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "891c08154fa4f7f0503091058f4f8f4b367cf627", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/891c08154fa4f7f0503091058f4f8f4b367cf627", "committedDate": "2020-06-04T15:56:53Z", "message": "Miracle WIP 2"}, "afterCommit": {"oid": "d7ec99e983662b5c7312754f82a46d3990c56e41", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/d7ec99e983662b5c7312754f82a46d3990c56e41", "committedDate": "2020-06-04T15:58:57Z", "message": "Miracle WIP 2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7ec99e983662b5c7312754f82a46d3990c56e41", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/d7ec99e983662b5c7312754f82a46d3990c56e41", "committedDate": "2020-06-04T15:58:57Z", "message": "Miracle WIP 2"}, "afterCommit": {"oid": "4d9296d9f6bca92d859471488bb5c51cba75764b", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/4d9296d9f6bca92d859471488bb5c51cba75764b", "committedDate": "2020-06-04T16:03:13Z", "message": "Miracle WIP 2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d9296d9f6bca92d859471488bb5c51cba75764b", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/4d9296d9f6bca92d859471488bb5c51cba75764b", "committedDate": "2020-06-04T16:03:13Z", "message": "Miracle WIP 2"}, "afterCommit": {"oid": "3848563257b2ba98629116fd87ddb7e13cb9b439", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/3848563257b2ba98629116fd87ddb7e13cb9b439", "committedDate": "2020-06-04T16:05:03Z", "message": "Miracle WIP 2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3848563257b2ba98629116fd87ddb7e13cb9b439", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/3848563257b2ba98629116fd87ddb7e13cb9b439", "committedDate": "2020-06-04T16:05:03Z", "message": "Miracle WIP 2"}, "afterCommit": {"oid": "44e7e49cd82565fcbc764edc42c0cb43c127ea81", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/44e7e49cd82565fcbc764edc42c0cb43c127ea81", "committedDate": "2020-06-04T16:21:21Z", "message": "Miracle WIP 2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44e7e49cd82565fcbc764edc42c0cb43c127ea81", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/44e7e49cd82565fcbc764edc42c0cb43c127ea81", "committedDate": "2020-06-04T16:21:21Z", "message": "Miracle WIP 2"}, "afterCommit": {"oid": "25e453e74c7217bb4c64feb74f7a1ae5a94ad73e", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/25e453e74c7217bb4c64feb74f7a1ae5a94ad73e", "committedDate": "2020-06-04T16:32:37Z", "message": "Miracle WIP 2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "25e453e74c7217bb4c64feb74f7a1ae5a94ad73e", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/25e453e74c7217bb4c64feb74f7a1ae5a94ad73e", "committedDate": "2020-06-04T16:32:37Z", "message": "Miracle WIP 2"}, "afterCommit": {"oid": "4bfa50ad9fae4db12815435d0ebd2ad467da9bc2", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/4bfa50ad9fae4db12815435d0ebd2ad467da9bc2", "committedDate": "2020-06-04T16:34:49Z", "message": "Miracle WIP 2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjMyMjAy", "url": "https://github.com/Taskana/taskana/pull/1098#pullrequestreview-424632202", "createdAt": "2020-06-04T16:36:50Z", "commit": {"oid": "4bfa50ad9fae4db12815435d0ebd2ad467da9bc2"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aba6c916b103edb71101afd932fc4ac039eaff34", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/aba6c916b103edb71101afd932fc4ac039eaff34", "committedDate": "2020-06-04T16:53:02Z", "message": "Miracle WIP 2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4bfa50ad9fae4db12815435d0ebd2ad467da9bc2", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/4bfa50ad9fae4db12815435d0ebd2ad467da9bc2", "committedDate": "2020-06-04T16:34:49Z", "message": "Miracle WIP 2"}, "afterCommit": {"oid": "aba6c916b103edb71101afd932fc4ac039eaff34", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/aba6c916b103edb71101afd932fc4ac039eaff34", "committedDate": "2020-06-04T16:53:02Z", "message": "Miracle WIP 2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjUyNTEy", "url": "https://github.com/Taskana/taskana/pull/1098#pullrequestreview-424652512", "createdAt": "2020-06-04T17:02:14Z", "commit": {"oid": "aba6c916b103edb71101afd932fc4ac039eaff34"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4494, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}