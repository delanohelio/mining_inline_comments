{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTk4ODI5", "number": 935, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTozMjoxNFrODgnyzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToxOToxMVrODg_jqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTMzMDA0OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/util/LogSanitizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTozMjoxNFrOFq7GUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTozMjoxNFrOFq7GUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1Mjc4NA==", "bodyText": "make the method generic, so that you don't have to call toString() from the outside?", "url": "https://github.com/Taskana/taskana/pull/935#discussion_r380552784", "createdAt": "2020-02-18T09:32:14Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/util/LogSanitizer.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package pro.taskana.common.internal.util;\n+\n+public class LogSanitizer {\n+\n+  private LogSanitizer() {\n+    throw new IllegalStateException(\"Utility class\");\n+  }\n+\n+  // Remove characters which break the log file pattern. Protects against injection attacks.\n+  public static String sanitizeLoggingMessage(String loggingMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "017771b1252c041d4e8c0048ca1163fe8095107a"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTMzMTA1OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/util/LogSanitizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTozMjozM1rOFq7G9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTozMjozM1rOFq7G9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1Mjk0OA==", "bodyText": "Make proper javadoc?", "url": "https://github.com/Taskana/taskana/pull/935#discussion_r380552948", "createdAt": "2020-02-18T09:32:33Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/util/LogSanitizer.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package pro.taskana.common.internal.util;\n+\n+public class LogSanitizer {\n+\n+  private LogSanitizer() {\n+    throw new IllegalStateException(\"Utility class\");\n+  }\n+\n+  // Remove characters which break the log file pattern. Protects against injection attacks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "017771b1252c041d4e8c0048ca1163fe8095107a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTMzNDIwOnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/util/LogSanitizer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTozMzoyOVrOFq7I_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTo1ODo0OFrOFq8DKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MzQ2OQ==", "bodyText": "Is this used in taskana-core?\n@gitgoodjhe should we move this class to taskana-rest-spring?", "url": "https://github.com/Taskana/taskana/pull/935#discussion_r380553469", "createdAt": "2020-02-18T09:33:29Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/util/LogSanitizer.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package pro.taskana.common.internal.util;\n+\n+public class LogSanitizer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "017771b1252c041d4e8c0048ca1163fe8095107a"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1NDgwMA==", "bodyText": "Good question, not yet used in core, but might be in the future?", "url": "https://github.com/Taskana/taskana/pull/935#discussion_r380554800", "createdAt": "2020-02-18T09:35:57Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/util/LogSanitizer.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package pro.taskana.common.internal.util;\n+\n+public class LogSanitizer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MzQ2OQ=="}, "originalCommit": {"oid": "017771b1252c041d4e8c0048ca1163fe8095107a"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU2NjI5Mw==", "bodyText": "User provided data, such as URL parameters, POST data payloads or cookies, should always be considered untrusted and tainted. Applications logging tainted data could enable an attacker to inject characters that would break the log file pattern. This could be used to block monitors and SIEM (Security Information and Event Management) systems from detecting other malicious events.\nThis problem could be mitigated by sanitizing the user provided data before logging it.\n\nA dedicated rest issue. Will never happen in core.\nI am for moving this util class to taskana-rest-spring while keeping the same package structure", "url": "https://github.com/Taskana/taskana/pull/935#discussion_r380566293", "createdAt": "2020-02-18T09:55:28Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/util/LogSanitizer.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package pro.taskana.common.internal.util;\n+\n+public class LogSanitizer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MzQ2OQ=="}, "originalCommit": {"oid": "017771b1252c041d4e8c0048ca1163fe8095107a"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU2ODM2Mg==", "bodyText": "alright", "url": "https://github.com/Taskana/taskana/pull/935#discussion_r380568362", "createdAt": "2020-02-18T09:58:48Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/util/LogSanitizer.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package pro.taskana.common.internal.util;\n+\n+public class LogSanitizer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MzQ2OQ=="}, "originalCommit": {"oid": "017771b1252c041d4e8c0048ca1163fe8095107a"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTIyMzQ0OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/util/LogSanitizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToxOToxMVrOFrgaIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToxOToxMVrOFrgaIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NDA2NA==", "bodyText": "class name is already LogSanitizer\nwhat about we rename this method to stripLineBreakingChars(Object loggingMessage)", "url": "https://github.com/Taskana/taskana/pull/935#discussion_r381164064", "createdAt": "2020-02-19T09:19:11Z", "author": {"login": "benjamineckstein"}, "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/util/LogSanitizer.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package pro.taskana.common.internal.util;\n+\n+public class LogSanitizer {\n+\n+  private LogSanitizer() {\n+    throw new IllegalStateException(\"Utility class\");\n+  }\n+\n+  /**\n+   * Removes characters which break the log file pattern. Protects against injection attacks.\n+   *\n+   * @param loggingMessage String which should be sanitized\n+   * @return sanitized logging message\n+   */\n+  public static String sanitizeLoggingMessage(Object loggingMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1175d908ed6d0b8e6f8b90540ece5c2ac998333b"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4423, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}