{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NjM0Njg0", "number": 893, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDoyMzoxNFrODcY-Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDozNzo0NFrODcZD2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDk1ODY2OnYy", "diffSide": "LEFT", "path": "lib/taskana-core/src/main/java/pro/taskana/report/api/row/TimestampRow.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDoyMzoxNFrOFkbNzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNjo1MToxMVrOFknsWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczODk1OQ==", "bodyText": "this should be internal", "url": "https://github.com/Taskana/taskana/pull/893#discussion_r373738959", "createdAt": "2020-02-01T00:23:14Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/main/java/pro/taskana/report/api/row/TimestampRow.java", "diffHunk": "@@ -1,11 +1,12 @@\n-package pro.taskana.impl.report.row;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc96cd5dc28dba8c391df0b0fef2dc8f8d2fe95c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0MzM4NQ==", "bodyText": "TimestampRow is returned by TimestampReport.getRow(). Therefore, I would consider it part of the API - after all it is a datastructure that the client code must understand ...", "url": "https://github.com/Taskana/taskana/pull/893#discussion_r373943385", "createdAt": "2020-02-03T06:51:11Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/report/api/row/TimestampRow.java", "diffHunk": "@@ -1,11 +1,12 @@\n-package pro.taskana.impl.report.row;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczODk1OQ=="}, "originalCommit": {"oid": "bc96cd5dc28dba8c391df0b0fef2dc8f8d2fe95c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDk3Mjc0OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDozNzoyNFrOFkbWDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNjo1Mjo0N1rOFkntpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MTA2OA==", "bodyText": "Stream.of() :)", "url": "https://github.com/Taskana/taskana/pull/893#discussion_r373741068", "createdAt": "2020-02-01T00:37:24Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java", "diffHunk": "@@ -16,17 +19,34 @@\n  * Test architecture of classes in taskana. For more info and examples see\n  * https://www.archunit.org/userguide/html/000_Index.html\n  */\n+@SuppressWarnings({\"checkstyle:EmptyLineSeparator\"})\n class ArchitectureTest {\n-\n   private static JavaClasses importedClasses;\n \n+  DescribedPredicate<JavaClass> doNotContain(String... namesToBeExcluded) {\n+    return new DescribedPredicate<JavaClass>(\"should not be checked\") {\n+      @Override\n+      public boolean apply(JavaClass input) {\n+        String matchingClassName =\n+            Arrays.asList(namesToBeExcluded).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc96cd5dc28dba8c391df0b0fef2dc8f8d2fe95c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0MzcxNg==", "bodyText": "Granted, that's better", "url": "https://github.com/Taskana/taskana/pull/893#discussion_r373943716", "createdAt": "2020-02-03T06:52:47Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java", "diffHunk": "@@ -16,17 +19,34 @@\n  * Test architecture of classes in taskana. For more info and examples see\n  * https://www.archunit.org/userguide/html/000_Index.html\n  */\n+@SuppressWarnings({\"checkstyle:EmptyLineSeparator\"})\n class ArchitectureTest {\n-\n   private static JavaClasses importedClasses;\n \n+  DescribedPredicate<JavaClass> doNotContain(String... namesToBeExcluded) {\n+    return new DescribedPredicate<JavaClass>(\"should not be checked\") {\n+      @Override\n+      public boolean apply(JavaClass input) {\n+        String matchingClassName =\n+            Arrays.asList(namesToBeExcluded).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MTA2OA=="}, "originalCommit": {"oid": "bc96cd5dc28dba8c391df0b0fef2dc8f8d2fe95c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDk3MzA0OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDozNzo0NFrOFkbWPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDozNzo0NFrOFkbWPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MTExNg==", "bodyText": ".filter(input.getName()::contains)", "url": "https://github.com/Taskana/taskana/pull/893#discussion_r373741116", "createdAt": "2020-02-01T00:37:44Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java", "diffHunk": "@@ -16,17 +19,34 @@\n  * Test architecture of classes in taskana. For more info and examples see\n  * https://www.archunit.org/userguide/html/000_Index.html\n  */\n+@SuppressWarnings({\"checkstyle:EmptyLineSeparator\"})\n class ArchitectureTest {\n-\n   private static JavaClasses importedClasses;\n \n+  DescribedPredicate<JavaClass> doNotContain(String... namesToBeExcluded) {\n+    return new DescribedPredicate<JavaClass>(\"should not be checked\") {\n+      @Override\n+      public boolean apply(JavaClass input) {\n+        String matchingClassName =\n+            Arrays.asList(namesToBeExcluded).stream()\n+                .filter(name -> input.getName().contains(name))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc96cd5dc28dba8c391df0b0fef2dc8f8d2fe95c"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4398, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}