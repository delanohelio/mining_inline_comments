{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNDc0MzM1", "number": 1164, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyMzoxNVrOEK6z2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyOTowMFrOEK695Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODg0NzYyOnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/ldap/LdapClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyMzoxNVrOGsPLZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyMzoxNVrOGsPLZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzOTIwNA==", "bodyText": "\ud83d\udc4f", "url": "https://github.com/Taskana/taskana/pull/1164#discussion_r449039204", "createdAt": "2020-07-02T14:23:15Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/ldap/LdapClient.java", "diffHunk": "@@ -332,6 +329,19 @@ String getNameWithoutBaseDn(String name) {\n     return new String[] {getGroupNameAttribute(), CN};\n   }\n \n+  String[] getLookUpUserAndGroupAttributesToReturn() {\n+    return Stream.concat(\n+            Arrays.stream(getLookUpUserAttributesToReturn()),\n+            Arrays.stream(getLookUpGroupAttributesToReturn()))\n+        .toArray(String[]::new);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae998b4c4e4e6b1b07f22f5b8c30ca7aaae566e6"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODg3MzMzOnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/ldap/LdapClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyOTowMFrOGsPbuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyOTowMFrOGsPbuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MzM4NA==", "bodyText": "Suggestion: use the Method from UserContextMapper and GroupContextMapper by either extracting the content from their doMapFromContext into a dedicated method or by initalizing them here.\nWhat do you think of this?", "url": "https://github.com/Taskana/taskana/pull/1164#discussion_r449043384", "createdAt": "2020-07-02T14:29:00Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/ldap/LdapClient.java", "diffHunk": "@@ -403,4 +413,25 @@ public AccessIdRepresentationModel doMapFromContext(final DirContextOperations c\n       return accessId;\n     }\n   }\n+\n+  /** General Context Mapper for DNs, which can be both, user or groups. */\n+  class DnContextMapper extends AbstractContextMapper<AccessIdRepresentationModel> {\n+\n+    @Override\n+    public AccessIdRepresentationModel doMapFromContext(final DirContextOperations context) {\n+      final AccessIdRepresentationModel accessId = new AccessIdRepresentationModel();\n+      String userId = context.getStringAttribute(getUserIdAttribute());\n+      if (userId != null) {\n+        accessId.setAccessId(userId);\n+        String firstName = context.getStringAttribute(getUserFirstnameAttribute());\n+        String lastName = context.getStringAttribute(getUserLastnameAttribute());\n+        accessId.setName(String.format(\"%s, %s\", lastName, firstName));\n+      } else {\n+        String dn = getDnWithBaseDn(context.getDn().toString());\n+        accessId.setAccessId(dn); // fully qualified dn\n+        accessId.setName(context.getStringAttribute(getGroupNameAttribute()));\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae998b4c4e4e6b1b07f22f5b8c30ca7aaae566e6"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4091, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}