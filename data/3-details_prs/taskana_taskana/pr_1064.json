{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MTU0MDIx", "number": 1064, "title": "TSK-1218: Prevent unsecure access to TASKANA", "bodyText": "Sonarcloud: https://sonarcloud.io/dashboard?branch=TSK-1218&id=gitgoodjhe_taskana", "createdAt": "2020-05-13T06:48:14Z", "url": "https://github.com/Taskana/taskana/pull/1064", "merged": true, "mergeCommit": {"oid": "df7b750a34eb4c3656eafb200e2f4bb757150fd2"}, "closed": true, "closedAt": "2020-05-15T12:56:33Z", "author": {"login": "gitgoodjhe"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcg1YqfAH2gAyNDE3MTU0MDIxOmViZDIyYzNmYjc4NThhODAxOTI5YTEzNmRiZDQwYzAwM2Q1MWFlZTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchhmuggFqTQxMjYyMTY3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ebd22c3fb7858a801929a136dbd40c003d51aee4", "author": {"user": {"login": "gitgoodjhe", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/ebd22c3fb7858a801929a136dbd40c003d51aee4", "committedDate": "2020-05-13T09:23:34Z", "message": "TSK-1218: Prevent unsecure access to TASKANA"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMzg0OTYx", "url": "https://github.com/Taskana/taskana/pull/1064#pullrequestreview-412384961", "createdAt": "2020-05-15T06:42:23Z", "commit": {"oid": "ebd22c3fb7858a801929a136dbd40c003d51aee4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNjo0MjoyM1rOGV4ZOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNjo0NDo0MFrOGV4cfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU5NzI0MQ==", "bodyText": "why do you check this? Even if security is activated we might be the first one and want to insert this information into the database, don't we?", "url": "https://github.com/Taskana/taskana/pull/1064#discussion_r425597241", "createdAt": "2020-05-15T06:42:23Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/configuration/SecurityVerifier.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package pro.taskana.common.internal.configuration;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import javax.sql.DataSource;\n+import org.apache.ibatis.jdbc.SqlRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import pro.taskana.common.api.exceptions.SystemException;\n+\n+public class SecurityVerifier {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SecurityVerifier.class);\n+  private static final String SECURITY_FLAG_COLUMN_NAME = \"ENFORCE_SECURITY\";\n+  private static final String INSERT_SECURITY_FLAG = \"INSERT INTO %s.CONFIGURATION VALUES (%b)\";\n+  private static final String SELECT_SECURITY_FLAG = \"SELECT %s FROM %s.CONFIGURATION\";\n+  private final String schemaName;\n+  private DataSource dataSource;\n+\n+\n+  public SecurityVerifier(DataSource dataSource, String schema) {\n+    super();\n+    this.dataSource = dataSource;\n+    this.schemaName = schema;\n+  }\n+\n+  public void checkSecureAccess(boolean securityEnabled) {\n+\n+    if (!securityEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebd22c3fb7858a801929a136dbd40c003d51aee4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU5ODA3OQ==", "bodyText": "According to my comment above: do we miss the test for starting secure the first time and initialize the security flag?", "url": "https://github.com/Taskana/taskana/pull/1064#discussion_r425598079", "createdAt": "2020-05-15T06:44:40Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/test/java/acceptance/config/TaskanaSecurityConfigAccTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package acceptance.config;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import javax.sql.DataSource;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import pro.taskana.TaskanaEngineConfiguration;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.TaskanaEngineTestConfiguration;\n+import pro.taskana.common.internal.configuration.DbSchemaCreator;\n+import pro.taskana.sampledata.SampleDataGenerator;\n+\n+public class TaskanaSecurityConfigAccTest {\n+\n+  @BeforeAll\n+  public static void setupTests() throws SQLException {\n+    DataSource dataSource = TaskanaEngineTestConfiguration.getDataSource();\n+    String schemaName = TaskanaEngineTestConfiguration.getSchemaName();\n+    DbSchemaCreator dbSchemaCreator = new DbSchemaCreator(dataSource, schemaName);\n+    dbSchemaCreator.run();\n+  }\n+\n+  @AfterEach\n+  public void cleanDb() {\n+    DataSource dataSource = TaskanaEngineTestConfiguration.getDataSource();\n+    String schemaName = TaskanaEngineTestConfiguration.getSchemaName();\n+\n+    SampleDataGenerator sampleDataGenerator = new SampleDataGenerator(dataSource, schemaName);\n+    sampleDataGenerator.clearDb();\n+  }\n+\n+  @Test\n+  public void should_ThrowException_When_CreatingUnsecuredEngineConfigWhileSecurityIsEnforced()\n+      throws SQLException {\n+\n+    setSecurityFlag(true);\n+\n+    ThrowingCallable createUnsecuredTaskanaEngineConfiguration = () -> {\n+\n+      TaskanaEngineConfiguration taskanaEngineConfiguration = new TaskanaEngineConfiguration(\n+          TaskanaEngineTestConfiguration.getDataSource(), false, false,\n+          TaskanaEngineTestConfiguration.getSchemaName());\n+    };\n+\n+    assertThatThrownBy(createUnsecuredTaskanaEngineConfiguration)\n+        .isInstanceOf(SystemException.class)\n+        .hasMessageContaining(\"Secured TASKANA mode is enforced, can't start in unsecured mode\");\n+\n+  }\n+\n+  @Test\n+  public void should_StartUpNormally_When_CreatingUnsecuredEngineConfigWhileSecurityIsNotEnforced()\n+      throws SQLException {\n+\n+    setSecurityFlag(false);\n+\n+    ThrowingCallable createUnsecuredTaskanaEngineConfiguration = () -> {\n+\n+      TaskanaEngineConfiguration taskanaEngineConfiguration = new TaskanaEngineConfiguration(\n+          TaskanaEngineTestConfiguration.getDataSource(), false, false,\n+          TaskanaEngineTestConfiguration.getSchemaName());\n+    };\n+\n+    assertThatCode(createUnsecuredTaskanaEngineConfiguration).doesNotThrowAnyException();\n+\n+  }\n+\n+  @Test\n+  public void should_SetSecurityFlag_When_SecurityFlagIsNotSet() throws SQLException {\n+\n+    assertThat(retrieveSecurityFlag()).isNull();\n+\n+    ThrowingCallable createUnsecuredTaskanaEngineConfiguration = () -> {\n+\n+      TaskanaEngineConfiguration taskanaEngineConfiguration = new TaskanaEngineConfiguration(\n+          TaskanaEngineTestConfiguration.getDataSource(), false, false,\n+          TaskanaEngineTestConfiguration.getSchemaName());\n+    };\n+\n+    assertThatCode(createUnsecuredTaskanaEngineConfiguration).doesNotThrowAnyException();\n+\n+    assertThat(retrieveSecurityFlag()).isFalse();\n+\n+  }\n+\n+  private Boolean retrieveSecurityFlag() throws SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebd22c3fb7858a801929a136dbd40c003d51aee4"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02f364e5100535c7ccaf33cdcf865bb4d4921a78", "author": {"user": {"login": "gitgoodjhe", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/02f364e5100535c7ccaf33cdcf865bb4d4921a78", "committedDate": "2020-05-15T09:18:52Z", "message": "Insert initial securityEnabled value from first TaskanaEngine into database also when it's true"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNjIxNjcw", "url": "https://github.com/Taskana/taskana/pull/1064#pullrequestreview-412621670", "createdAt": "2020-05-15T12:54:45Z", "commit": {"oid": "02f364e5100535c7ccaf33cdcf865bb4d4921a78"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4479, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}