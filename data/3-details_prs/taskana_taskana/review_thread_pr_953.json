{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNzY2Nzc4", "number": 953, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzozMzo1M1rODjjA8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMDozNjo0MVrODkmJJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjAwNDM1OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskanaEngineControllerIntTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzozMzo1M1rOFvaljg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjo1ODo1NVrOFv0Igw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2Mjk5MA==", "bodyText": "Maybe we can use containsOnly?", "url": "https://github.com/Taskana/taskana/pull/953#discussion_r385262990", "createdAt": "2020-02-27T17:33:53Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskanaEngineControllerIntTest.java", "diffHunk": "@@ -49,9 +47,9 @@ void testClassificationTypes() {\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(List.class));\n-    assertTrue(response.getBody().contains(\"TASK\"));\n-    assertTrue(response.getBody().contains(\"DOCUMENT\"));\n-    assertFalse(response.getBody().contains(\"UNKNOWN\"));\n+    assertThat(response.getBody().contains(\"TASK\")).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0206334604a59ef9f6e5dd2e9de6befc36f666d3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYyODE4Ng==", "bodyText": "why \"containsOnly\"? I think it should be \"contains\" from assertJ ListAssert", "url": "https://github.com/Taskana/taskana/pull/953#discussion_r385628186", "createdAt": "2020-02-28T10:48:30Z", "author": {"login": "sofie29"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskanaEngineControllerIntTest.java", "diffHunk": "@@ -49,9 +47,9 @@ void testClassificationTypes() {\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(List.class));\n-    assertTrue(response.getBody().contains(\"TASK\"));\n-    assertTrue(response.getBody().contains(\"DOCUMENT\"));\n-    assertFalse(response.getBody().contains(\"UNKNOWN\"));\n+    assertThat(response.getBody().contains(\"TASK\")).isTrue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2Mjk5MA=="}, "originalCommit": {"oid": "0206334604a59ef9f6e5dd2e9de6befc36f666d3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4MTUzOQ==", "bodyText": "well if we only use the contains operator the actual list could contain additional values. Using containsOnly we can verify that only those values are values of that list", "url": "https://github.com/Taskana/taskana/pull/953#discussion_r385681539", "createdAt": "2020-02-28T12:58:55Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskanaEngineControllerIntTest.java", "diffHunk": "@@ -49,9 +47,9 @@ void testClassificationTypes() {\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(List.class));\n-    assertTrue(response.getBody().contains(\"TASK\"));\n-    assertTrue(response.getBody().contains(\"DOCUMENT\"));\n-    assertFalse(response.getBody().contains(\"UNKNOWN\"));\n+    assertThat(response.getBody().contains(\"TASK\")).isTrue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2Mjk5MA=="}, "originalCommit": {"oid": "0206334604a59ef9f6e5dd2e9de6befc36f666d3"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjAwNDU1OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskanaEngineControllerIntTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzozMzo1N1rOFvalrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzozMzo1N1rOFvalrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2MzAyMg==", "bodyText": "Maybe we can use containsOnly?", "url": "https://github.com/Taskana/taskana/pull/953#discussion_r385263022", "createdAt": "2020-02-27T17:33:57Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskanaEngineControllerIntTest.java", "diffHunk": "@@ -62,11 +60,11 @@ void testClassificationCategories() {\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(List.class));\n-    assertTrue(response.getBody().contains(\"MANUAL\"));\n-    assertTrue(response.getBody().contains(\"EXTERNAL\"));\n-    assertTrue(response.getBody().contains(\"AUTOMATIC\"));\n-    assertTrue(response.getBody().contains(\"PROCESS\"));\n-    assertFalse(response.getBody().contains(\"UNKNOWN\"));\n+    assertThat(response.getBody().contains(\"MANUAL\")).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0206334604a59ef9f6e5dd2e9de6befc36f666d3"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjAyMjY0OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TestSchemaNameCustomizable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzozOTozMlrOFvaw5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTo0Njo0OFrOFv5iSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NTg5Mw==", "bodyText": "as is wrong. (As far as I understand it.) Please use isEqualTo()", "url": "https://github.com/Taskana/taskana/pull/953#discussion_r385265893", "createdAt": "2020-02-27T17:39:32Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TestSchemaNameCustomizable.java", "diffHunk": "@@ -57,7 +58,7 @@ void checkCustomSchemaNameIsDefined_Postgres() throws SQLException {\n           String tableName = rs.getString(\"tablename\");\n           tablefound = tableName.equals(\"workbasket\");\n         }\n-        Assertions.assertTrue(tablefound, \"Table workbasket should be there ...\");\n+        assertThat(tablefound).as(\"Table workbasket should be there ...\").isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0206334604a59ef9f6e5dd2e9de6befc36f666d3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NDIxNQ==", "bodyText": "tablefound is a boolean, that's why I don't understand why I should use isEqualTo(). As far as I can see, we obtain the same results with the old and the new expression... am I wrong? the String is shown in case the boolean is false.", "url": "https://github.com/Taskana/taskana/pull/953#discussion_r385764215", "createdAt": "2020-02-28T15:37:20Z", "author": {"login": "sofie29"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TestSchemaNameCustomizable.java", "diffHunk": "@@ -57,7 +58,7 @@ void checkCustomSchemaNameIsDefined_Postgres() throws SQLException {\n           String tableName = rs.getString(\"tablename\");\n           tablefound = tableName.equals(\"workbasket\");\n         }\n-        Assertions.assertTrue(tablefound, \"Table workbasket should be there ...\");\n+        assertThat(tablefound).as(\"Table workbasket should be there ...\").isTrue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NTg5Mw=="}, "originalCommit": {"oid": "0206334604a59ef9f6e5dd2e9de6befc36f666d3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MDA1Ng==", "bodyText": "nevermind.. I was wrong. Thanks!", "url": "https://github.com/Taskana/taskana/pull/953#discussion_r385770056", "createdAt": "2020-02-28T15:46:48Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TestSchemaNameCustomizable.java", "diffHunk": "@@ -57,7 +58,7 @@ void checkCustomSchemaNameIsDefined_Postgres() throws SQLException {\n           String tableName = rs.getString(\"tablename\");\n           tablefound = tableName.equals(\"workbasket\");\n         }\n-        Assertions.assertTrue(tablefound, \"Table workbasket should be there ...\");\n+        assertThat(tablefound).as(\"Table workbasket should be there ...\").isTrue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NTg5Mw=="}, "originalCommit": {"oid": "0206334604a59ef9f6e5dd2e9de6befc36f666d3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjAyMjkwOnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TestSchemaNameCustomizable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzozOTozN1rOFvaxDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzozOTozN1rOFvaxDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NTkzMw==", "bodyText": "Same as above", "url": "https://github.com/Taskana/taskana/pull/953#discussion_r385265933", "createdAt": "2020-02-27T17:39:37Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TestSchemaNameCustomizable.java", "diffHunk": "@@ -78,7 +79,7 @@ void checkCustomSchemaNameIsDefined_OtherDb() throws SQLException {\n           String tableName = rs.getString(\"TABLE_NAME\");\n           tablefound = tableName.equals(\"WORKBASKET\");\n         }\n-        Assertions.assertTrue(tablefound, \"Table WORKBASKET should be there ...\");\n+        assertThat(tablefound).as(\"Table WORKBASKET should be there ...\").isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0206334604a59ef9f6e5dd2e9de6befc36f666d3"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjAzMTIzOnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo0MjowMFrOFva2Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo0MjowMFrOFva2Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NzI4Nw==", "bodyText": "assertThat(\nresponse2.getBody().getContent().stream().map(DistributionTargetResource::getWorkbasketId).noneMatch(\"WBI:...\")).isTrue()\nwhat do u think?", "url": "https://github.com/Taskana/taskana/pull/953#discussion_r385267287", "createdAt": "2020-02-27T17:42:00Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketControllerIntTest.java", "diffHunk": "@@ -214,9 +212,8 @@ void testRemoveWorkbasketAsDistributionTarget() {\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(DistributionTargetListResource.class));\n     assertThat(response2.getStatusCode()).isEqualTo(HttpStatus.OK);\n-    Iterator<DistributionTargetResource> iterator = response2.getBody().getContent().iterator();\n-    while (iterator.hasNext()) {\n-      assertThat(iterator.next().getWorkbasketId())\n+    for (DistributionTargetResource distributionTargetResource : response2.getBody().getContent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0206334604a59ef9f6e5dd2e9de6befc36f666d3"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjM0NDI4OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskanaEngineControllerIntTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjo1NjowM1rOFw6H5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjo1NjowM1rOFw6H5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyODI2MQ==", "bodyText": "The main benefit of using containsOnly is that we don't have to do additional checks like this one. Since the list contains only TASK and DOCUMENT", "url": "https://github.com/Taskana/taskana/pull/953#discussion_r386828261", "createdAt": "2020-03-03T06:56:03Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskanaEngineControllerIntTest.java", "diffHunk": "@@ -49,9 +47,8 @@ void testClassificationTypes() {\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(List.class));\n-    assertTrue(response.getBody().contains(\"TASK\"));\n-    assertTrue(response.getBody().contains(\"DOCUMENT\"));\n-    assertFalse(response.getBody().contains(\"UNKNOWN\"));\n+    assertThat(response.getBody()).containsOnly(\"TASK\", \"DOCUMENT\");\n+    assertThat(response.getBody()).doesNotContain(\"UNKNOWN\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "521e4124be0d403f5b89020d10cf61f4c084567f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjM0NDQ1OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskanaEngineControllerIntTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjo1NjoxMVrOFw6ICA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjo1NjoxMVrOFw6ICA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyODI5Ng==", "bodyText": "see above", "url": "https://github.com/Taskana/taskana/pull/953#discussion_r386828296", "createdAt": "2020-03-03T06:56:11Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskanaEngineControllerIntTest.java", "diffHunk": "@@ -62,11 +59,8 @@ void testClassificationCategories() {\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(List.class));\n-    assertTrue(response.getBody().contains(\"MANUAL\"));\n-    assertTrue(response.getBody().contains(\"EXTERNAL\"));\n-    assertTrue(response.getBody().contains(\"AUTOMATIC\"));\n-    assertTrue(response.getBody().contains(\"PROCESS\"));\n-    assertFalse(response.getBody().contains(\"UNKNOWN\"));\n+    assertThat(response.getBody()).containsOnly(\"MANUAL\", \"EXTERNAL\", \"AUTOMATIC\", \"PROCESS\");\n+    assertThat(response.getBody()).doesNotContain(\"UNKNOWN\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "521e4124be0d403f5b89020d10cf61f4c084567f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzAwMjYwOnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskanaEngineControllerIntTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMDozNjo0MVrOFxAbuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMDozNjo0MVrOFxAbuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkzMTY0MA==", "bodyText": "We forgot this one here.", "url": "https://github.com/Taskana/taskana/pull/953#discussion_r386931640", "createdAt": "2020-03-03T10:36:41Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskanaEngineControllerIntTest.java", "diffHunk": "@@ -77,9 +69,9 @@ void testGetCurrentUserInfo() {\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(TaskanaUserInfoResource.class));\n-    assertEquals(\"teamlead_1\", response.getBody().getUserId());\n-    assertTrue(response.getBody().getGroupIds().contains(\"businessadmin\"));\n-    assertTrue(response.getBody().getRoles().contains(TaskanaRole.BUSINESS_ADMIN));\n-    assertFalse(response.getBody().getRoles().contains(TaskanaRole.ADMIN));\n+    assertThat(response.getBody().getUserId()).isEqualTo(\"teamlead_1\");\n+    assertThat(response.getBody().getGroupIds()).contains(\"businessadmin\");\n+    assertThat(response.getBody().getRoles()).contains(TaskanaRole.BUSINESS_ADMIN);\n+    assertThat(response.getBody().getRoles()).doesNotContain(TaskanaRole.ADMIN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b004373ddcb6e623f0a7dd4f754d10e6e701eb"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4440, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}