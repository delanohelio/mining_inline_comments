{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4Nzk5MDg0", "number": 1236, "title": "TSK-1349: Added unit test for Workbasket-Overview, -List and -ListToolbar", "bodyText": "https://taskana.atlassian.net/browse/TSK-1349", "createdAt": "2020-08-17T12:25:38Z", "url": "https://github.com/Taskana/taskana/pull/1236", "merged": true, "mergeCommit": {"oid": "008c1aec20ecddd476a6c993c0acd792454aa09e"}, "closed": true, "closedAt": "2020-08-19T10:52:58Z", "author": {"login": "cnguyen-de"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc91qGegH2gAyNDY4Nzk5MDg0OjBhMzJhMzczNTA1YTBhMWQxMzIzYzJhODY5ZGJhZjg0YWM5MzlhMDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAY2_IgFqTQ3MDMxNzM1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0a32a373505a0a1d1323c2a869dbaf84ac939a07", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/0a32a373505a0a1d1323c2a869dbaf84ac939a07", "committedDate": "2020-08-11T12:06:25Z", "message": "TSK-1349: added test for workbasket overview"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "345662abcfa1282fb03b06a62398ad5932037e81", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/345662abcfa1282fb03b06a62398ad5932037e81", "committedDate": "2020-08-11T12:51:41Z", "message": "TSK-1349: moved animations ts files to shared"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfe10c06ddfc48b17287f377c020d421726d1aa8", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/bfe10c06ddfc48b17287f377c020d421726d1aa8", "committedDate": "2020-08-11T13:14:13Z", "message": "TSK-1349: added unit test for workbasket list toolbar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28bf195470aaaf49f2fb7f199fcc4c78e1faff0b", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/28bf195470aaaf49f2fb7f199fcc4c78e1faff0b", "committedDate": "2020-08-11T14:09:42Z", "message": "TSK-1349: added unit tests for workbasket-list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40f8c397d4780b7c4d1d9e956bbe194b36d92257", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/40f8c397d4780b7c4d1d9e956bbe194b36d92257", "committedDate": "2020-08-11T15:26:04Z", "message": "TSK-1349: improved tests for workbasket-overview"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e630fc4a1818136d0c532ea68920cc8491cb6258", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/e630fc4a1818136d0c532ea68920cc8491cb6258", "committedDate": "2020-08-12T14:28:59Z", "message": "TSK-1349: Updated test for workbasket list, workbasket-list-toolbar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "229a493824be12dddbdc31f10cf2b651f9e30c8a", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/229a493824be12dddbdc31f10cf2b651f9e30c8a", "committedDate": "2020-08-17T12:24:02Z", "message": "TSK-1349: added more test variants for workbasket overview"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66253b8e0cb192f44365de8b605ff1ad6efa246b", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/66253b8e0cb192f44365de8b605ff1ad6efa246b", "committedDate": "2020-08-17T12:29:53Z", "message": "TSK-1349: removed console log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/321df831c5b1922e5434af423a0daeacc520fbc6", "committedDate": "2020-08-17T13:18:49Z", "message": "TSK-1349: removed CUSTOM_ELEMENTS_SCHEMA"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMTQwOTY3", "url": "https://github.com/Taskana/taskana/pull/1236#pullrequestreview-470140967", "createdAt": "2020-08-19T05:46:36Z", "commit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNTo0NjozNlrOHC067g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoyMTo0MFrOHC2aGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyNjI1NA==", "bodyText": "This is not our naming convention.", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472726254", "createdAt": "2020-08-19T05:46:36Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.spec.ts", "diffHunk": "@@ -0,0 +1,118 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListToolbarComponent } from './workbasket-list-toolbar.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable } from 'rxjs';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { CreateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { Filter } from '../../../shared/models/filter';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { ACTION } from '../../../shared/models/action';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+\n+const getDomainFn = jest.fn().mockReturnValue(true);\n+const domainServiceMock = jest.fn().mockImplementation(\n+  (): Partial<DomainService> => ({\n+    getDomains: getDomainFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-import-export', template: '' })\n+class ImportExportStub {\n+  @Input() currentSelection: TaskanaType;\n+}\n+\n+@Component({ selector: 'taskana-shared-sort', template: '' })\n+class SortStub {\n+  @Input() sortingFields: Map<string, string>;\n+  @Input() defaultSortBy = 'key';\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+}\n+\n+@Component({ selector: 'taskana-shared-filter', template: '' })\n+class FilterStub {\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+describe('WorkbasketListToolbarComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListToolbarComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListToolbarComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([WorkbasketState]),\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [WorkbasketListToolbarComponent, ImportExportStub, SortStub, FilterStub],\n+      providers: [{ provide: DomainService, useClass: domainServiceMock }, WorkbasketService]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListToolbarComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    component.action = ACTION.COPY;\n+  }));\n+\n+  it('should create the component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch CreateWorkbasket when addWorkbasket is called', async((done) => {\n+    component.addWorkbasket();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should not do anything in addWorkbasket if action is create ', async((done) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyOTA1Ng==", "bodyText": "In case the action wouldn't be triggered, this line wouldn't be called and the test would be true although it had failed.", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472729056", "createdAt": "2020-08-19T05:50:50Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.spec.ts", "diffHunk": "@@ -0,0 +1,118 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListToolbarComponent } from './workbasket-list-toolbar.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable } from 'rxjs';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { CreateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { Filter } from '../../../shared/models/filter';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { ACTION } from '../../../shared/models/action';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+\n+const getDomainFn = jest.fn().mockReturnValue(true);\n+const domainServiceMock = jest.fn().mockImplementation(\n+  (): Partial<DomainService> => ({\n+    getDomains: getDomainFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-import-export', template: '' })\n+class ImportExportStub {\n+  @Input() currentSelection: TaskanaType;\n+}\n+\n+@Component({ selector: 'taskana-shared-sort', template: '' })\n+class SortStub {\n+  @Input() sortingFields: Map<string, string>;\n+  @Input() defaultSortBy = 'key';\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+}\n+\n+@Component({ selector: 'taskana-shared-filter', template: '' })\n+class FilterStub {\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+describe('WorkbasketListToolbarComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListToolbarComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListToolbarComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([WorkbasketState]),\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [WorkbasketListToolbarComponent, ImportExportStub, SortStub, FilterStub],\n+      providers: [{ provide: DomainService, useClass: domainServiceMock }, WorkbasketService]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListToolbarComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    component.action = ACTION.COPY;\n+  }));\n+\n+  it('should create the component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch CreateWorkbasket when addWorkbasket is called', async((done) => {\n+    component.addWorkbasket();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyOTIzOQ==", "bodyText": "I think this test is never called since the action is not dispatched.", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472729239", "createdAt": "2020-08-19T05:51:07Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.spec.ts", "diffHunk": "@@ -0,0 +1,118 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListToolbarComponent } from './workbasket-list-toolbar.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable } from 'rxjs';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { CreateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { Filter } from '../../../shared/models/filter';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { ACTION } from '../../../shared/models/action';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+\n+const getDomainFn = jest.fn().mockReturnValue(true);\n+const domainServiceMock = jest.fn().mockImplementation(\n+  (): Partial<DomainService> => ({\n+    getDomains: getDomainFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-import-export', template: '' })\n+class ImportExportStub {\n+  @Input() currentSelection: TaskanaType;\n+}\n+\n+@Component({ selector: 'taskana-shared-sort', template: '' })\n+class SortStub {\n+  @Input() sortingFields: Map<string, string>;\n+  @Input() defaultSortBy = 'key';\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+}\n+\n+@Component({ selector: 'taskana-shared-filter', template: '' })\n+class FilterStub {\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+describe('WorkbasketListToolbarComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListToolbarComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListToolbarComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([WorkbasketState]),\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [WorkbasketListToolbarComponent, ImportExportStub, SortStub, FilterStub],\n+      providers: [{ provide: DomainService, useClass: domainServiceMock }, WorkbasketService]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListToolbarComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    component.action = ACTION.COPY;\n+  }));\n+\n+  it('should create the component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch CreateWorkbasket when addWorkbasket is called', async((done) => {\n+    component.addWorkbasket();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should not do anything in addWorkbasket if action is create ', async((done) => {\n+    component.action = ACTION.CREATE;\n+    fixture.detectChanges();\n+    component.addWorkbasket();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NDExNg==", "bodyText": "see above", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472744116", "createdAt": "2020-08-19T06:12:38Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NDIyNg==", "bodyText": "see above", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472744226", "createdAt": "2020-08-19T06:12:48Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should dispatch DeselectWorkbasket when selecting a workbasket again', async((done) => {\n+    component.selectedId = '1';\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(DeselectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NjE0OQ==", "bodyText": "This isn't our naming convention. I suggest 'should set sort value when performSorting is called'.", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472746149", "createdAt": "2020-08-19T06:15:33Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should dispatch DeselectWorkbasket when selecting a workbasket again', async((done) => {\n+    component.selectedId = '1';\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(DeselectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('performSorting should set sort value', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NjY5MA==", "bodyText": "naming convention: 'should set filter value when performFilter is called'", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472746690", "createdAt": "2020-08-19T06:16:18Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should dispatch DeselectWorkbasket when selecting a workbasket again', async((done) => {\n+    component.selectedId = '1';\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(DeselectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('performSorting should set sort value', () => {\n+    const sort = { sortBy: '1', sortDirection: 'asc' };\n+    component.performSorting(sort);\n+    expect(component.sort).toMatchObject(sort);\n+  });\n+\n+  it('performFilter should set filter value', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NzM1Mw==", "bodyText": "naming convention: 'should change page value when changePage function is called'", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472747353", "createdAt": "2020-08-19T06:17:13Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should dispatch DeselectWorkbasket when selecting a workbasket again', async((done) => {\n+    component.selectedId = '1';\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(DeselectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('performSorting should set sort value', () => {\n+    const sort = { sortBy: '1', sortDirection: 'asc' };\n+    component.performSorting(sort);\n+    expect(component.sort).toMatchObject(sort);\n+  });\n+\n+  it('performFilter should set filter value', () => {\n+    const filter = { filterParams: '123' };\n+    component.performFilter(filter);\n+    expect(component.filterBy).toMatchObject(filter);\n+  });\n+\n+  it('change page function should change page value', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1MDYxNg==", "bodyText": "Missing async / done", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472750616", "createdAt": "2020-08-19T06:21:40Z", "author": {"login": "sofie29"}, "path": "web/src/app/administration/components/workbasket-overview/workbasket-overview.component.spec.ts", "diffHunk": "@@ -0,0 +1,176 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketOverviewComponent } from './workbasket-overview.component';\n+import { Component, DebugElement } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { SelectedRouteService } from '../../../shared/services/selected-route/selected-route';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { ActivatedRoute } from '@angular/router';\n+import { CreateWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    triggerError: showDialogFn,\n+    showToast: showDialogFn\n+  })\n+);\n+\n+const mockActivatedRoute = {\n+  firstChild: {\n+    params: of({\n+      id: 'new-workbasket'\n+    })\n+  }\n+};\n+\n+const mockActivatedRouteAlternative = {\n+  firstChild: {\n+    params: of({\n+      id: '101'\n+    })\n+  }\n+};\n+\n+const mockActivatedRouteNoParams = {};\n+\n+@Component({ selector: 'taskana-administration-workbasket-list', template: '' })\n+class WorkbasketListStub {}\n+\n+@Component({ selector: 'taskana-administration-workbasket-details', template: '' })\n+class WorkbasketDetailsStub {}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketOverviewComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketOverviewComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketOverviewComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]), NgxsModule.forRoot([WorkbasketState])],\n+      declarations: [WorkbasketOverviewComponent, WorkbasketListStub, WorkbasketDetailsStub, SvgIconStub],\n+      providers: [\n+        WorkbasketService,\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        { provide: ActivatedRoute, useValue: mockActivatedRoute },\n+        DomainService,\n+        RequestInProgressService,\n+        SelectedRouteService\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketOverviewComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create the component', () => {\n+    let activatedRoute = TestBed.inject(ActivatedRoute);\n+    expect(component).toBeTruthy();\n+    activatedRoute.firstChild.params.subscribe((params) => {\n+      expect(component.routerParams).toMatchObject(params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ea9b0a0fbe229c629dcfb3c24bad4a497658c32", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/5ea9b0a0fbe229c629dcfb3c24bad4a497658c32", "committedDate": "2020-08-19T09:04:59Z", "message": "TSK-1349: improved tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dea482f78a228ae9e22894a87e2c8e0ab00b2f24", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/dea482f78a228ae9e22894a87e2c8e0ab00b2f24", "committedDate": "2020-08-19T09:28:34Z", "message": "TSK-1349: further optimized tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05ed3ab06547d979a55a34fbb1535a30c45bf7f8", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/05ed3ab06547d979a55a34fbb1535a30c45bf7f8", "committedDate": "2020-08-19T09:28:51Z", "message": "TSK-1349: added test for workbasket overview"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "904704d103909a322158efe077483f4196b87a50", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/904704d103909a322158efe077483f4196b87a50", "committedDate": "2020-08-19T09:28:51Z", "message": "TSK-1349: moved animations ts files to shared"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "936aef3f1fbc70e75f3c59aaf5551587aecd26a3", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/936aef3f1fbc70e75f3c59aaf5551587aecd26a3", "committedDate": "2020-08-19T09:28:51Z", "message": "TSK-1349: added unit test for workbasket list toolbar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3f58c8694ed96fe0c8c5e767ad6e0d715e88da3", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/d3f58c8694ed96fe0c8c5e767ad6e0d715e88da3", "committedDate": "2020-08-19T09:28:51Z", "message": "TSK-1349: added unit tests for workbasket-list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e21039da2fad1a08c247bb88285ee8d36a313ca", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/4e21039da2fad1a08c247bb88285ee8d36a313ca", "committedDate": "2020-08-19T09:28:51Z", "message": "TSK-1349: improved tests for workbasket-overview"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea9430c4c0310a940eb713c505974367cb3286a0", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/ea9430c4c0310a940eb713c505974367cb3286a0", "committedDate": "2020-08-19T09:28:51Z", "message": "TSK-1349: Updated test for workbasket list, workbasket-list-toolbar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49b23572b84d322d67eeea0410805a43a7e810a2", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/49b23572b84d322d67eeea0410805a43a7e810a2", "committedDate": "2020-08-19T09:28:51Z", "message": "TSK-1349: added more test variants for workbasket overview"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58e56175befe994ecec4228d6bbfa3bf6bc46ef8", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/58e56175befe994ecec4228d6bbfa3bf6bc46ef8", "committedDate": "2020-08-19T09:28:51Z", "message": "TSK-1349: removed console log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d31870dc8e869b1d2d4e4c0367bf254111f5a095", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/d31870dc8e869b1d2d4e4c0367bf254111f5a095", "committedDate": "2020-08-19T09:28:51Z", "message": "TSK-1349: removed CUSTOM_ELEMENTS_SCHEMA"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d823faa00c9dea5c14e7060a82620737fe8f4393", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/d823faa00c9dea5c14e7060a82620737fe8f4393", "committedDate": "2020-08-19T09:28:51Z", "message": "TSK-1349: improved tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3422f951666389b583504b090d92068547294ad", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/b3422f951666389b583504b090d92068547294ad", "committedDate": "2020-08-19T09:28:51Z", "message": "TSK-1349: further optimized tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94b5abe3dbe3d783b84576da2a2924d4d7755d77", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/94b5abe3dbe3d783b84576da2a2924d4d7755d77", "committedDate": "2020-08-19T09:29:42Z", "message": "Merge branch 'TSK-1349-Workbasket-unit-tests' of https://github.com/cnguyen-de/taskana into TSK-1349-Workbasket-unit-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae48c92d17c0213c79349feb380b4246eb39fe2c", "author": {"user": {"login": "cnguyen-de", "name": "Chi Nguyen"}}, "url": "https://github.com/Taskana/taskana/commit/ae48c92d17c0213c79349feb380b4246eb39fe2c", "committedDate": "2020-08-19T09:38:53Z", "message": "Merge branch 'TSK-1349-Workbasket-unit-tests' of https://github.com/cnguyen-de/taskana into TSK-1349-Workbasket-unit-tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMzE3MzUw", "url": "https://github.com/Taskana/taskana/pull/1236#pullrequestreview-470317350", "createdAt": "2020-08-19T10:15:01Z", "commit": {"oid": "ae48c92d17c0213c79349feb380b4246eb39fe2c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4469, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}