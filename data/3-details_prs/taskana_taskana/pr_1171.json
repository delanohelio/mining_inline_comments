{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MzA0NTY5", "number": 1171, "title": "TSK-1331: allowed multiple sortBy declarations in REST api", "bodyText": "I couldn't find a spot in our rest-api where query parameters were documented.\nSince I don't have the time to document all query parameters I didn't document the new behaviour.\nhttps://sonarcloud.io/dashboard?branch=task%2F1331&id=mustaphazorgati_taskana\nCode Coverage: I have no idea why it dropped. I tested the addition of new code.\nProbably because the other methods I refactored were not tested in the first place\nCode Smells:\n\n\ncode smell 1: Was there before, won't fix\n\n\ncode smell 2: Will be fixed shortly (whenever travis runs again)", "createdAt": "2020-07-10T08:32:02Z", "url": "https://github.com/Taskana/taskana/pull/1171", "merged": true, "mergeCommit": {"oid": "9e44ca614000475810e9c0aa214a1006e19d33e8"}, "closed": true, "closedAt": "2020-07-10T12:33:33Z", "author": {"login": "mustaphazorgati"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczfkI4gFqTQ0NjIyNzE1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABczi3A-gFqTQ0NjM2MzAxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjI3MTU0", "url": "https://github.com/Taskana/taskana/pull/1171#pullrequestreview-446227154", "createdAt": "2020-07-10T08:42:44Z", "commit": {"oid": "220a2740e67b8b05d80ee53c0632c04e9311b89e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwODo0Mjo0NVrOGvvE7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwODo0Mjo0NVrOGvvE7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcwNzU2NQ==", "bodyText": "I don't like this name.\nAny suggestion?\nI'd love to expand this class in the future by adding e.g. the extraction of paging here, etc.", "url": "https://github.com/Taskana/taskana/pull/1171#discussion_r452707565", "createdAt": "2020-07-10T08:42:45Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/QueryHelper.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package pro.taskana.common.rest;\n+\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.MultiValueMap;\n+\n+import pro.taskana.common.api.BaseQuery.SortDirection;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.internal.util.CheckedBiConsumer;\n+\n+public class QueryHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "220a2740e67b8b05d80ee53c0632c04e9311b89e"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjI3MjI2", "url": "https://github.com/Taskana/taskana/pull/1171#pullrequestreview-446227226", "createdAt": "2020-07-10T08:42:50Z", "commit": {"oid": "220a2740e67b8b05d80ee53c0632c04e9311b89e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwODo0Mjo1MVrOGvvFMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwODo0Mjo1MVrOGvvFMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcwNzYzMg==", "bodyText": "This package ok?", "url": "https://github.com/Taskana/taskana/pull/1171#discussion_r452707632", "createdAt": "2020-07-10T08:42:51Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/QueryHelper.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package pro.taskana.common.rest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "220a2740e67b8b05d80ee53c0632c04e9311b89e"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjMyNTM5", "url": "https://github.com/Taskana/taskana/pull/1171#pullrequestreview-446232539", "createdAt": "2020-07-10T08:50:42Z", "commit": {"oid": "220a2740e67b8b05d80ee53c0632c04e9311b89e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwODo1MDo0MlrOGvvVAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTowMDowNlrOGvvqFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxMTY4Mw==", "bodyText": "According to clean code it is a good practice to return the changed value, even if you don't have to do it. What do you think?", "url": "https://github.com/Taskana/taskana/pull/1171#discussion_r452711683", "createdAt": "2020-07-10T08:50:42Z", "author": {"login": "holgerhagen"}, "path": "history/taskana-simplehistory-rest-spring/src/main/java/pro/taskana/simplehistory/rest/TaskHistoryEventController.java", "diffHunk": "@@ -152,7 +109,7 @@ public TaskHistoryEventController(\n     }\n \n     HistoryQuery query = simpleHistoryService.createHistoryQuery();\n-    query = applySortingParams(query, params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "220a2740e67b8b05d80ee53c0632c04e9311b89e"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxMjM5MQ==", "bodyText": "Do we have a rule in the coding guideline with respect to naming variables?", "url": "https://github.com/Taskana/taskana/pull/1171#discussion_r452712391", "createdAt": "2020-07-10T08:52:07Z", "author": {"login": "holgerhagen"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/classification/rest/ClassificationController.java", "diffHunk": "@@ -48,56 +49,33 @@\n   private static final Logger LOGGER = LoggerFactory.getLogger(ClassificationController.class);\n \n   private static final String LIKE = \"%\";\n-\n   private static final String NAME = \"name\";\n-\n   private static final String NAME_LIKE = \"name-like\";\n-\n   private static final String KEY = \"key\";\n-\n   private static final String DOMAIN = \"domain\";\n-\n   private static final String CATEGORY = \"category\";\n-\n   private static final String TYPE = \"type\";\n-\n   private static final String CUSTOM_1_LIKE = \"custom-1-like\";\n-\n   private static final String CUSTOM_2_LIKE = \"custom-2-like\";\n-\n   private static final String CUSTOM_3_LIKE = \"custom-3-like\";\n-\n   private static final String CUSTOM_4_LIKE = \"custom-4-like\";\n-\n   private static final String CUSTOM_5_LIKE = \"custom-5-like\";\n-\n   private static final String CUSTOM_6_LIKE = \"custom-6-like\";\n-\n   private static final String CUSTOM_7_LIKE = \"custom-7-like\";\n-\n   private static final String CUSTOM_8_LIKE = \"custom-8-like\";\n \n-  private static final String SORT_BY = \"sort-by\";\n-\n-  private static final String SORT_DIRECTION = \"order\";\n-\n   private final ClassificationService classificationService;\n+  private final ClassificationRepresentationModelAssembler modelAssembler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "220a2740e67b8b05d80ee53c0632c04e9311b89e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxMzQxMA==", "bodyText": "This package is part of the public API, isn't it? I don't think that the QueryHelper belongs to the public API.", "url": "https://github.com/Taskana/taskana/pull/1171#discussion_r452713410", "createdAt": "2020-07-10T08:53:48Z", "author": {"login": "holgerhagen"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/QueryHelper.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package pro.taskana.common.rest;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcwNzYzMg=="}, "originalCommit": {"oid": "220a2740e67b8b05d80ee53c0632c04e9311b89e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxMzkyNQ==", "bodyText": "What's wrong with the name? Maybe we should discuss this if you have concerns.", "url": "https://github.com/Taskana/taskana/pull/1171#discussion_r452713925", "createdAt": "2020-07-10T08:54:40Z", "author": {"login": "holgerhagen"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/QueryHelper.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package pro.taskana.common.rest;\n+\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.MultiValueMap;\n+\n+import pro.taskana.common.api.BaseQuery.SortDirection;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.internal.util.CheckedBiConsumer;\n+\n+public class QueryHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcwNzU2NQ=="}, "originalCommit": {"oid": "220a2740e67b8b05d80ee53c0632c04e9311b89e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxNDgwOA==", "bodyText": "don't we have a default for order by?", "url": "https://github.com/Taskana/taskana/pull/1171#discussion_r452714808", "createdAt": "2020-07-10T08:56:06Z", "author": {"login": "holgerhagen"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/QueryHelper.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package pro.taskana.common.rest;\n+\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.MultiValueMap;\n+\n+import pro.taskana.common.api.BaseQuery.SortDirection;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.internal.util.CheckedBiConsumer;\n+\n+public class QueryHelper {\n+\n+  public static final String SORT_BY = \"sort-by\";\n+  public static final String ORDER_DIRECTION = \"order\";\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryHelper.class);\n+\n+  private QueryHelper() {\n+    // no op\n+  }\n+\n+  public static void applyAndRemoveSortingParams(\n+      MultiValueMap<String, String> params,\n+      CheckedBiConsumer<String, SortDirection, InvalidArgumentException> consumer)\n+      throws InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to applyAndRemoveSortingParams(params= {})\", params);\n+    }\n+\n+    if (params == null || consumer == null) {\n+      throw new InvalidArgumentException(\"params or consumer can't be null!\");\n+    }\n+    List<String> allSortBy = params.remove(SORT_BY);\n+    List<String> allOrderBy = params.remove(ORDER_DIRECTION);\n+\n+    verifyNotOnlyOrderByExists(allSortBy, allOrderBy);\n+    verifyAmountOfSortByAndOrderByMatches(allSortBy, allOrderBy);\n+\n+    if (allSortBy != null) {\n+      for (int i = 0; i < allSortBy.size(); i++) {\n+        consumer.accept(allSortBy.get(i), getSortDirectionForIndex(allOrderBy, i));\n+      }\n+    }\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from applyAndRemoveSortingParams()\");\n+    }\n+  }\n+\n+  private static SortDirection getSortDirectionForIndex(List<String> allOrderBy, int i) {\n+    SortDirection sortDirection = SortDirection.ASCENDING;\n+    if (allOrderBy != null && !allOrderBy.isEmpty() && \"desc\".equalsIgnoreCase(allOrderBy.get(i))) {\n+      sortDirection = SortDirection.DESCENDING;\n+    }\n+    return sortDirection;\n+  }\n+\n+  private static void verifyNotOnlyOrderByExists(List<String> allSortBy, List<String> allOrderBy)\n+      throws InvalidArgumentException {\n+    if (allSortBy == null && allOrderBy != null) {\n+      throw new InvalidArgumentException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "220a2740e67b8b05d80ee53c0632c04e9311b89e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxNDkzMw==", "bodyText": "see above", "url": "https://github.com/Taskana/taskana/pull/1171#discussion_r452714933", "createdAt": "2020-07-10T08:56:21Z", "author": {"login": "holgerhagen"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/QueryHelper.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package pro.taskana.common.rest;\n+\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.MultiValueMap;\n+\n+import pro.taskana.common.api.BaseQuery.SortDirection;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.internal.util.CheckedBiConsumer;\n+\n+public class QueryHelper {\n+\n+  public static final String SORT_BY = \"sort-by\";\n+  public static final String ORDER_DIRECTION = \"order\";\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryHelper.class);\n+\n+  private QueryHelper() {\n+    // no op\n+  }\n+\n+  public static void applyAndRemoveSortingParams(\n+      MultiValueMap<String, String> params,\n+      CheckedBiConsumer<String, SortDirection, InvalidArgumentException> consumer)\n+      throws InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to applyAndRemoveSortingParams(params= {})\", params);\n+    }\n+\n+    if (params == null || consumer == null) {\n+      throw new InvalidArgumentException(\"params or consumer can't be null!\");\n+    }\n+    List<String> allSortBy = params.remove(SORT_BY);\n+    List<String> allOrderBy = params.remove(ORDER_DIRECTION);\n+\n+    verifyNotOnlyOrderByExists(allSortBy, allOrderBy);\n+    verifyAmountOfSortByAndOrderByMatches(allSortBy, allOrderBy);\n+\n+    if (allSortBy != null) {\n+      for (int i = 0; i < allSortBy.size(); i++) {\n+        consumer.accept(allSortBy.get(i), getSortDirectionForIndex(allOrderBy, i));\n+      }\n+    }\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from applyAndRemoveSortingParams()\");\n+    }\n+  }\n+\n+  private static SortDirection getSortDirectionForIndex(List<String> allOrderBy, int i) {\n+    SortDirection sortDirection = SortDirection.ASCENDING;\n+    if (allOrderBy != null && !allOrderBy.isEmpty() && \"desc\".equalsIgnoreCase(allOrderBy.get(i))) {\n+      sortDirection = SortDirection.DESCENDING;\n+    }\n+    return sortDirection;\n+  }\n+\n+  private static void verifyNotOnlyOrderByExists(List<String> allSortBy, List<String> allOrderBy)\n+      throws InvalidArgumentException {\n+    if (allSortBy == null && allOrderBy != null) {\n+      throw new InvalidArgumentException(\n+          String.format(\n+              \"Only '%s' were provided. Please also provide '%s' parameter(s)\",\n+              ORDER_DIRECTION, SORT_BY));\n+    }\n+  }\n+\n+  private static void verifyAmountOfSortByAndOrderByMatches(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "220a2740e67b8b05d80ee53c0632c04e9311b89e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxNjE2Mw==", "bodyText": "Don't we sort on the dababase?", "url": "https://github.com/Taskana/taskana/pull/1171#discussion_r452716163", "createdAt": "2020-07-10T08:58:33Z", "author": {"login": "holgerhagen"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/task/rest/TaskCommentController.java", "diffHunk": "@@ -201,45 +201,35 @@\n     return result;\n   }\n \n-  private List<TaskComment> applySortingParams(\n+  private void applySortingParams(\n       List<TaskComment> taskComments, MultiValueMap<String, String> params)\n       throws InvalidArgumentException {\n-\n     if (LOGGER.isDebugEnabled()) {\n       LOGGER.debug(\n           \"Entry to applySortingParams(taskComments= {}, params= {})\", taskComments, params);\n     }\n-\n-    String sortBy = params.getFirst(SORT_BY);\n-\n-    if (sortBy != null) {\n-\n-      switch (sortBy) {\n-        case (CREATED):\n-          if (params.getFirst(SORT_DIRECTION) != null\n-              && \"desc\".equals(params.getFirst(SORT_DIRECTION))) {\n-            taskComments.sort(Comparator.comparing(TaskComment::getCreated).reversed());\n-          } else {\n-            taskComments.sort(Comparator.comparing(TaskComment::getCreated));\n+    QueryHelper.applyAndRemoveSortingParams(\n+        params,\n+        (sortBy, sortDirection) -> {\n+          Comparator<TaskComment> comparator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "220a2740e67b8b05d80ee53c0632c04e9311b89e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxNzA3OA==", "bodyText": "What is the meaning of this name?", "url": "https://github.com/Taskana/taskana/pull/1171#discussion_r452717078", "createdAt": "2020-07-10T09:00:06Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/util/CheckedBiConsumer.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package pro.taskana.common.internal.util;\n+\n+@FunctionalInterface\n+public interface CheckedBiConsumer<T, U, E extends Throwable> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "220a2740e67b8b05d80ee53c0632c04e9311b89e"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b0eef58aa2ad748b4e1e2db98810b4933ed6c58", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/8b0eef58aa2ad748b4e1e2db98810b4933ed6c58", "committedDate": "2020-07-10T11:59:05Z", "message": "TSK-1331: allowed multiple sortBy declarations in REST api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MzQ2MTUz", "url": "https://github.com/Taskana/taskana/pull/1171#pullrequestreview-446346153", "createdAt": "2020-07-10T12:03:42Z", "commit": {"oid": "8b0eef58aa2ad748b4e1e2db98810b4933ed6c58"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MzYzMDE4", "url": "https://github.com/Taskana/taskana/pull/1171#pullrequestreview-446363018", "createdAt": "2020-07-10T12:33:05Z", "commit": {"oid": "8b0eef58aa2ad748b4e1e2db98810b4933ed6c58"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4447, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}