{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNjEyNTIy", "number": 984, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNToyNjo0MlrODqPTgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMToxMzozMFrODqVR4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjE3NTM5OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/util/DaysToWorkingDaysConverter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNToyNjo0MlrOF53U3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNjozMDo1NlrOF6ieYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIxOTYxNA==", "bodyText": "How can it be that the startTime is null?\nThat parameter is necessary. - Should we throw an exception instead of going to the default?", "url": "https://github.com/Taskana/taskana/pull/984#discussion_r396219614", "createdAt": "2020-03-23T05:26:42Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/util/DaysToWorkingDaysConverter.java", "diffHunk": "@@ -74,10 +74,16 @@ public static void setCustomHolidays(List<LocalDate> holidays) {\n   }\n \n   public long convertWorkingDaysToDays(Instant startTime, long numberOfDays) {\n+    if (startTime == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a815271df2c8bbd196b925f9ad04088c55f2a61"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM3NDQwMg==", "bodyText": "bump", "url": "https://github.com/Taskana/taskana/pull/984#discussion_r396374402", "createdAt": "2020-03-23T11:13:38Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/util/DaysToWorkingDaysConverter.java", "diffHunk": "@@ -74,10 +74,16 @@ public static void setCustomHolidays(List<LocalDate> holidays) {\n   }\n \n   public long convertWorkingDaysToDays(Instant startTime, long numberOfDays) {\n+    if (startTime == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIxOTYxNA=="}, "originalCommit": {"oid": "7a815271df2c8bbd196b925f9ad04088c55f2a61"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkyNjU2MQ==", "bodyText": "I'll throw an exception if startTime is null.\nWhat do you mean by 'bump' ?", "url": "https://github.com/Taskana/taskana/pull/984#discussion_r396926561", "createdAt": "2020-03-24T06:30:56Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/util/DaysToWorkingDaysConverter.java", "diffHunk": "@@ -74,10 +74,16 @@ public static void setCustomHolidays(List<LocalDate> holidays) {\n   }\n \n   public long convertWorkingDaysToDays(Instant startTime, long numberOfDays) {\n+    if (startTime == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIxOTYxNA=="}, "originalCommit": {"oid": "7a815271df2c8bbd196b925f9ad04088c55f2a61"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjE4NDcxOnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/ServiceLevelHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNTozMzoyN1rOF53ajg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNTozMzoyN1rOF53ajg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyMTA3MA==", "bodyText": "unnecessary parenthesis around the last statement. But doesn't matter :)", "url": "https://github.com/Taskana/taskana/pull/984#discussion_r396221070", "createdAt": "2020-03-23T05:33:27Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/ServiceLevelHandler.java", "diffHunk": "@@ -159,17 +159,53 @@ private TaskImpl updatePlannedDueOnTaskUpdate(\n         Instant planned =\n             (converter.subtractWorkingDaysFromInstant(\n                 newTaskImpl.getDue(), durationPrioHolder.getDuration()));\n-        if (newTaskImpl.getPlanned() != null && !planned.equals(newTaskImpl.getPlanned())) {\n+        // planned may not be the same as newTaskImpl.planned and the request may nevertheless be\n+        // correct.\n+        // Scenario: If task.planned is Saturday morning, and duration is 1 working day, then\n+        // calculating forward from planned to due will give Tuesday morning as due date, because\n+        // sunday is skipped.\n+        // On the other hand, calculating from due (Tuesday morning) 1 day backwards will\n+        // result in a planned date of monday morning which differs from task.planned.\n+        // Therefore, if newTaskImpl.getPlanned is not equal to planned, the service\n+        // level is not violated and we still must grant the request if the following\n+        // conditions are fulfilled:\n+        // - planned is after newTaskImpl.planned\n+        // - newTaskImpl.planned is not a working day,\n+        // - there is no working day between newTaskImpl.planned and planned.\n+        if (newTaskImpl.getPlanned() != null\n+            && !planned.equals(newTaskImpl.getPlanned())\n+            && (plannedDateViolatesServiceLevel(planned, newTaskImpl.getPlanned()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a815271df2c8bbd196b925f9ad04088c55f2a61"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjE5Njc5OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/ServiceLevelHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNTo0MTo1M1rOF53h2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNjozMjo0MFrOF6igRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyMjkzNg==", "bodyText": "For the sake of readability:\n\nMove this important comment as a JavaDoc comment for the method plannedDateViolatesServiceLevel\ninclude newTaskImpl.getPlanned() != null && !planned.equals(newTaskImpl.getPlanned() into the method plannedDateViolatesServiceLevel (for completeness and reusability)\nMaybe make the method plannedDateViolatesServiceLevel a void return type and let it throw the exception? - I am not sure about this last one\n\nWould this help? What do you think?", "url": "https://github.com/Taskana/taskana/pull/984#discussion_r396222936", "createdAt": "2020-03-23T05:41:53Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/ServiceLevelHandler.java", "diffHunk": "@@ -159,17 +159,53 @@ private TaskImpl updatePlannedDueOnTaskUpdate(\n         Instant planned =\n             (converter.subtractWorkingDaysFromInstant(\n                 newTaskImpl.getDue(), durationPrioHolder.getDuration()));\n-        if (newTaskImpl.getPlanned() != null && !planned.equals(newTaskImpl.getPlanned())) {\n+        // planned may not be the same as newTaskImpl.planned and the request may nevertheless be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a815271df2c8bbd196b925f9ad04088c55f2a61"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkyNzA0Ng==", "bodyText": "done", "url": "https://github.com/Taskana/taskana/pull/984#discussion_r396927046", "createdAt": "2020-03-24T06:32:40Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/ServiceLevelHandler.java", "diffHunk": "@@ -159,17 +159,53 @@ private TaskImpl updatePlannedDueOnTaskUpdate(\n         Instant planned =\n             (converter.subtractWorkingDaysFromInstant(\n                 newTaskImpl.getDue(), durationPrioHolder.getDuration()));\n-        if (newTaskImpl.getPlanned() != null && !planned.equals(newTaskImpl.getPlanned())) {\n+        // planned may not be the same as newTaskImpl.planned and the request may nevertheless be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyMjkzNg=="}, "originalCommit": {"oid": "7a815271df2c8bbd196b925f9ad04088c55f2a61"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzE1MzU1OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/ServiceLevelHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMToxMzoxNlrOF6AwxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzo0OTowNFrOF6kO2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM3NDIxMg==", "bodyText": "This is not a JavaDoc ;)", "url": "https://github.com/Taskana/taskana/pull/984#discussion_r396374212", "createdAt": "2020-03-23T11:13:16Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/ServiceLevelHandler.java", "diffHunk": "@@ -159,17 +173,66 @@ private TaskImpl updatePlannedDueOnTaskUpdate(\n         Instant planned =\n             (converter.subtractWorkingDaysFromInstant(\n                 newTaskImpl.getDue(), durationPrioHolder.getDuration()));\n-        if (newTaskImpl.getPlanned() != null && !planned.equals(newTaskImpl.getPlanned())) {\n-          throw new InvalidArgumentException(\n-              \"Cannot update a task with given planned \"\n-                  + \"and due date not matching the service level\");\n-        }\n+        ensureServiceLevelIsNotViolated(newTaskImpl, durationPrioHolder.getDuration(), planned);\n         newTaskImpl.setPlanned(planned);\n+        if (!converter.isWorkingDay(0, newTaskImpl.getDue())) {\n+          newTaskImpl.setDue(getFirstPreceedingWorkingDay(newTaskImpl.getDue()));\n+        }\n       }\n     }\n     return newTaskImpl;\n   }\n \n+  private Instant getFirstPreceedingWorkingDay(Instant due) {\n+    long days = 0;\n+    while (!converter.isWorkingDay(days, due)) {\n+      days--;\n+    }\n+    return due.minus(Duration.ofDays(Math.abs(days)));\n+  }\n+\n+  private void ensureServiceLevelIsNotViolated(\n+      TaskImpl newTaskImpl, Duration duration, Instant planned) throws InvalidArgumentException {\n+    // planned was calculated by subtracting the service level duration from newTaskImpl.due.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86081febf6a0375e44a9b64680e4be9cb1eeeecc"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1NTM1NQ==", "bodyText": "Now it is javadoc", "url": "https://github.com/Taskana/taskana/pull/984#discussion_r396955355", "createdAt": "2020-03-24T07:49:04Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/ServiceLevelHandler.java", "diffHunk": "@@ -159,17 +173,66 @@ private TaskImpl updatePlannedDueOnTaskUpdate(\n         Instant planned =\n             (converter.subtractWorkingDaysFromInstant(\n                 newTaskImpl.getDue(), durationPrioHolder.getDuration()));\n-        if (newTaskImpl.getPlanned() != null && !planned.equals(newTaskImpl.getPlanned())) {\n-          throw new InvalidArgumentException(\n-              \"Cannot update a task with given planned \"\n-                  + \"and due date not matching the service level\");\n-        }\n+        ensureServiceLevelIsNotViolated(newTaskImpl, durationPrioHolder.getDuration(), planned);\n         newTaskImpl.setPlanned(planned);\n+        if (!converter.isWorkingDay(0, newTaskImpl.getDue())) {\n+          newTaskImpl.setDue(getFirstPreceedingWorkingDay(newTaskImpl.getDue()));\n+        }\n       }\n     }\n     return newTaskImpl;\n   }\n \n+  private Instant getFirstPreceedingWorkingDay(Instant due) {\n+    long days = 0;\n+    while (!converter.isWorkingDay(days, due)) {\n+      days--;\n+    }\n+    return due.minus(Duration.ofDays(Math.abs(days)));\n+  }\n+\n+  private void ensureServiceLevelIsNotViolated(\n+      TaskImpl newTaskImpl, Duration duration, Instant planned) throws InvalidArgumentException {\n+    // planned was calculated by subtracting the service level duration from newTaskImpl.due.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM3NDIxMg=="}, "originalCommit": {"oid": "86081febf6a0375e44a9b64680e4be9cb1eeeecc"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzE1NDI1OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/test/java/acceptance/task/ServiceLevelPriorityAccTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMToxMzozMFrOF6AxPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODoxOTo0OVrOF6SS9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM3NDMzMg==", "bodyText": "Is this supposed to be an assert? :)", "url": "https://github.com/Taskana/taskana/pull/984#discussion_r396374332", "createdAt": "2020-03-23T11:13:30Z", "author": {"login": "mustaphazorgati"}, "path": "lib/taskana-core/src/test/java/acceptance/task/ServiceLevelPriorityAccTest.java", "diffHunk": "@@ -379,4 +380,37 @@ void testUpdatePlannedAndDue() throws NotAuthorizedException, TaskNotFoundExcept\n     assertThatThrownBy(() -> taskService.updateTask(task))\n         .isInstanceOf(InvalidArgumentException.class);\n   }\n+\n+  @WithAccessId(\n+      userName = \"user_1_2\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testUpdateTaskSetPlannedOrDueToWeekend()\n+      throws NotAuthorizedException, TaskNotFoundException, ClassificationNotFoundException,\n+          InvalidArgumentException, InvalidStateException, ConcurrencyException,\n+          AttachmentPersistenceException {\n+    Task task = taskService.getTask(\"TKI:000000000000000000000000000000000030\"); // SL=P13D\n+    task.setPlanned(getInstant(\"2020-03-21T07:00:00\")); // planned = saturday\n+    task = taskService.updateTask(task);\n+    assertThat(task.getDue()).isEqualTo(getInstant(\"2020-04-09T07:00:00\"));\n+\n+    task.setDue(getInstant(\"2020-04-11T07:00:00\")); // due = saturday\n+    task.setPlanned(null);\n+    task = taskService.updateTask(task);\n+    assertThat(task.getPlanned()).isEqualTo(getInstant(\"2020-03-24T07:00:00\"));\n+\n+    task.setDue(getInstant(\"2020-04-12T07:00:00\")); // due = sunday\n+    task = taskService.updateTask(task);\n+    assertThat(task.getPlanned()).isEqualTo(getInstant(\"2020-03-24T07:00:00\"));\n+\n+    task.setPlanned(getInstant(\"2020-03-21T07:00:00\")); // planned = saturday\n+    task.setDue(getInstant(\"2020-04-09T07:00:00\")); // thursday\n+    task = taskService.updateTask(task);\n+    assertThat(task.getPlanned()).isEqualTo(getInstant(\"2020-03-23T07:00:00\"));\n+\n+    task.setPlanned(getInstant(\"2020-03-03T07:00:00\")); // planned on saturday\n+    task.setDue(getInstant(\"2020-03-22T07:00:00\")); // due = sunday\n+    task = taskService.updateTask(task);\n+    System.out.println(task.getPlanned() + \", \" + task.getDue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86081febf6a0375e44a9b64680e4be9cb1eeeecc"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY2MTQ5NQ==", "bodyText": "I missed this. Now there is an assert.", "url": "https://github.com/Taskana/taskana/pull/984#discussion_r396661495", "createdAt": "2020-03-23T18:19:49Z", "author": {"login": "BerndBreier"}, "path": "lib/taskana-core/src/test/java/acceptance/task/ServiceLevelPriorityAccTest.java", "diffHunk": "@@ -379,4 +380,37 @@ void testUpdatePlannedAndDue() throws NotAuthorizedException, TaskNotFoundExcept\n     assertThatThrownBy(() -> taskService.updateTask(task))\n         .isInstanceOf(InvalidArgumentException.class);\n   }\n+\n+  @WithAccessId(\n+      userName = \"user_1_2\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testUpdateTaskSetPlannedOrDueToWeekend()\n+      throws NotAuthorizedException, TaskNotFoundException, ClassificationNotFoundException,\n+          InvalidArgumentException, InvalidStateException, ConcurrencyException,\n+          AttachmentPersistenceException {\n+    Task task = taskService.getTask(\"TKI:000000000000000000000000000000000030\"); // SL=P13D\n+    task.setPlanned(getInstant(\"2020-03-21T07:00:00\")); // planned = saturday\n+    task = taskService.updateTask(task);\n+    assertThat(task.getDue()).isEqualTo(getInstant(\"2020-04-09T07:00:00\"));\n+\n+    task.setDue(getInstant(\"2020-04-11T07:00:00\")); // due = saturday\n+    task.setPlanned(null);\n+    task = taskService.updateTask(task);\n+    assertThat(task.getPlanned()).isEqualTo(getInstant(\"2020-03-24T07:00:00\"));\n+\n+    task.setDue(getInstant(\"2020-04-12T07:00:00\")); // due = sunday\n+    task = taskService.updateTask(task);\n+    assertThat(task.getPlanned()).isEqualTo(getInstant(\"2020-03-24T07:00:00\"));\n+\n+    task.setPlanned(getInstant(\"2020-03-21T07:00:00\")); // planned = saturday\n+    task.setDue(getInstant(\"2020-04-09T07:00:00\")); // thursday\n+    task = taskService.updateTask(task);\n+    assertThat(task.getPlanned()).isEqualTo(getInstant(\"2020-03-23T07:00:00\"));\n+\n+    task.setPlanned(getInstant(\"2020-03-03T07:00:00\")); // planned on saturday\n+    task.setDue(getInstant(\"2020-03-22T07:00:00\")); // due = sunday\n+    task = taskService.updateTask(task);\n+    System.out.println(task.getPlanned() + \", \" + task.getDue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM3NDMzMg=="}, "originalCommit": {"oid": "86081febf6a0375e44a9b64680e4be9cb1eeeecc"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4301, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}