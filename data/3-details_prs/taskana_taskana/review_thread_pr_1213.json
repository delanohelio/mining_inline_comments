{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NTE2NjM2", "number": 1213, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMToxNTo1MFrOEWLOdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOTozODo0OFrOEWuPIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjg4MDUzOnYy", "diffSide": "RIGHT", "path": "history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/impl/SimpleHistoryServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMToxNTo1MFrOG9WAyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMToxNTo1MFrOG9WAyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3Njk3MQ==", "bodyText": "I think we could remove this check? The created timestamp gets set in every constructor", "url": "https://github.com/Taskana/taskana/pull/1213#discussion_r466976971", "createdAt": "2020-08-07T11:15:50Z", "author": {"login": "gitgoodjhe"}, "path": "history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/impl/SimpleHistoryServiceImpl.java", "diffHunk": "@@ -10,48 +10,68 @@\n import pro.taskana.common.api.TaskanaRole;\n import pro.taskana.common.api.exceptions.InvalidArgumentException;\n import pro.taskana.common.api.exceptions.NotAuthorizedException;\n-import pro.taskana.simplehistory.impl.mappings.HistoryEventMapper;\n-import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n-import pro.taskana.simplehistory.query.HistoryQuery;\n+import pro.taskana.simplehistory.impl.task.TaskHistoryEventMapper;\n+import pro.taskana.simplehistory.impl.task.TaskHistoryQuery;\n+import pro.taskana.simplehistory.impl.workbasket.WorkbasketHistoryEventMapper;\n+import pro.taskana.simplehistory.impl.workbasket.WorkbasketHistoryQuery;\n import pro.taskana.spi.history.api.TaskanaHistory;\n-import pro.taskana.spi.history.api.events.TaskanaHistoryEvent;\n+import pro.taskana.spi.history.api.events.task.TaskHistoryEvent;\n+import pro.taskana.spi.history.api.events.workbasket.WorkbasketHistoryEvent;\n import pro.taskana.spi.history.api.exceptions.TaskanaHistoryEventNotFoundException;\n \n /** This is the implementation of TaskanaHistory. */\n public class SimpleHistoryServiceImpl implements TaskanaHistory {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(SimpleHistoryServiceImpl.class);\n   private TaskanaHistoryEngineImpl taskanaHistoryEngine;\n-  private HistoryEventMapper historyEventMapper;\n-  private HistoryQueryMapper historyQueryMapper;\n+  private TaskHistoryEventMapper taskHistoryEventMapper;\n+  private WorkbasketHistoryEventMapper workbasketHistoryEventMapper;\n \n   @Override\n   public void initialize(TaskanaEngineConfiguration taskanaEngineConfiguration) {\n \n     this.taskanaHistoryEngine = getTaskanaEngine(taskanaEngineConfiguration);\n+\n     if (LOGGER.isDebugEnabled()) {\n       LOGGER.debug(\n           \"Simple history service implementation initialized with schemaName: {} \",\n           taskanaEngineConfiguration.getSchemaName());\n     }\n \n-    this.historyEventMapper =\n-        this.taskanaHistoryEngine.getSqlSession().getMapper(HistoryEventMapper.class);\n-    this.historyQueryMapper =\n-        this.taskanaHistoryEngine.getSqlSession().getMapper(HistoryQueryMapper.class);\n+    this.taskHistoryEventMapper =\n+        this.taskanaHistoryEngine.getSqlSession().getMapper(TaskHistoryEventMapper.class);\n+    this.workbasketHistoryEventMapper =\n+        this.taskanaHistoryEngine.getSqlSession().getMapper(WorkbasketHistoryEventMapper.class);\n   }\n \n   @Override\n-  public void create(TaskanaHistoryEvent event) {\n+  public void create(TaskHistoryEvent event) {\n     try {\n       taskanaHistoryEngine.openConnection();\n       if (event.getCreated() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacd2b31c60bd625b4b4fe2238c0034c49a21d8b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjg4MTAwOnYy", "diffSide": "RIGHT", "path": "history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/impl/SimpleHistoryServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMToxNTo1OVrOG9WBGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMToxNTo1OVrOG9WBGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3NzA0OA==", "bodyText": "see above", "url": "https://github.com/Taskana/taskana/pull/1213#discussion_r466977048", "createdAt": "2020-08-07T11:15:59Z", "author": {"login": "gitgoodjhe"}, "path": "history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/impl/SimpleHistoryServiceImpl.java", "diffHunk": "@@ -10,48 +10,68 @@\n import pro.taskana.common.api.TaskanaRole;\n import pro.taskana.common.api.exceptions.InvalidArgumentException;\n import pro.taskana.common.api.exceptions.NotAuthorizedException;\n-import pro.taskana.simplehistory.impl.mappings.HistoryEventMapper;\n-import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n-import pro.taskana.simplehistory.query.HistoryQuery;\n+import pro.taskana.simplehistory.impl.task.TaskHistoryEventMapper;\n+import pro.taskana.simplehistory.impl.task.TaskHistoryQuery;\n+import pro.taskana.simplehistory.impl.workbasket.WorkbasketHistoryEventMapper;\n+import pro.taskana.simplehistory.impl.workbasket.WorkbasketHistoryQuery;\n import pro.taskana.spi.history.api.TaskanaHistory;\n-import pro.taskana.spi.history.api.events.TaskanaHistoryEvent;\n+import pro.taskana.spi.history.api.events.task.TaskHistoryEvent;\n+import pro.taskana.spi.history.api.events.workbasket.WorkbasketHistoryEvent;\n import pro.taskana.spi.history.api.exceptions.TaskanaHistoryEventNotFoundException;\n \n /** This is the implementation of TaskanaHistory. */\n public class SimpleHistoryServiceImpl implements TaskanaHistory {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(SimpleHistoryServiceImpl.class);\n   private TaskanaHistoryEngineImpl taskanaHistoryEngine;\n-  private HistoryEventMapper historyEventMapper;\n-  private HistoryQueryMapper historyQueryMapper;\n+  private TaskHistoryEventMapper taskHistoryEventMapper;\n+  private WorkbasketHistoryEventMapper workbasketHistoryEventMapper;\n \n   @Override\n   public void initialize(TaskanaEngineConfiguration taskanaEngineConfiguration) {\n \n     this.taskanaHistoryEngine = getTaskanaEngine(taskanaEngineConfiguration);\n+\n     if (LOGGER.isDebugEnabled()) {\n       LOGGER.debug(\n           \"Simple history service implementation initialized with schemaName: {} \",\n           taskanaEngineConfiguration.getSchemaName());\n     }\n \n-    this.historyEventMapper =\n-        this.taskanaHistoryEngine.getSqlSession().getMapper(HistoryEventMapper.class);\n-    this.historyQueryMapper =\n-        this.taskanaHistoryEngine.getSqlSession().getMapper(HistoryQueryMapper.class);\n+    this.taskHistoryEventMapper =\n+        this.taskanaHistoryEngine.getSqlSession().getMapper(TaskHistoryEventMapper.class);\n+    this.workbasketHistoryEventMapper =\n+        this.taskanaHistoryEngine.getSqlSession().getMapper(WorkbasketHistoryEventMapper.class);\n   }\n \n   @Override\n-  public void create(TaskanaHistoryEvent event) {\n+  public void create(TaskHistoryEvent event) {\n     try {\n       taskanaHistoryEngine.openConnection();\n       if (event.getCreated() == null) {\n         Instant now = Instant.now();\n         event.setCreated(now);\n       }\n-      historyEventMapper.insert(event);\n+      taskHistoryEventMapper.insert(event);\n     } catch (SQLException e) {\n-      LOGGER.error(\"Error while inserting history event into historyEventMapper\", e);\n+      LOGGER.error(\"Error while inserting task history event into database\", e);\n+    } finally {\n+      taskanaHistoryEngine.returnConnection();\n+      LOGGER.debug(\"Exit from create(TaskanaHistoryEvent event). Returning object = {}.\", event);\n+    }\n+  }\n+\n+  @Override\n+  public void create(WorkbasketHistoryEvent event) {\n+    try {\n+      taskanaHistoryEngine.openConnection();\n+      if (event.getCreated() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacd2b31c60bd625b4b4fe2238c0034c49a21d8b"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjU0NDU4OnYy", "diffSide": "RIGHT", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/workbasket/CreateHistoryEventOnWorkbasketDistributionTargetAddedAccTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOToxNzoyNFrOG-HDFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzowODoyMVrOG-29Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4MDM3NA==", "bodyText": "I think it would make sense to check the content of the event in such cases as well. Don't you think?", "url": "https://github.com/Taskana/taskana/pull/1213#discussion_r467780374", "createdAt": "2020-08-10T09:17:24Z", "author": {"login": "holgerhagen"}, "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/workbasket/CreateHistoryEventOnWorkbasketDistributionTargetAddedAccTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package acceptance.events.workbasket;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.spi.history.api.events.workbasket.WorkbasketHistoryEvent;\n+import pro.taskana.spi.history.api.events.workbasket.WorkbasketHistoryEventType;\n+import pro.taskana.workbasket.api.WorkbasketService;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnWorkbasketDistributionTargetAddedAccTest extends AbstractAccTest {\n+\n+  private final WorkbasketService workbasketService = taskanaEngine.getWorkbasketService();\n+  private final SimpleHistoryServiceImpl historyService = getHistoryService();\n+\n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void should_CreateWorkbasketDistributionTargetAddedHistoryEvent_When_DistributionTargetIsAdded()\n+      throws Exception {\n+\n+    final String sourceWorkbasketId = \"WBI:100000000000000000000000000000000004\";\n+    final String targetWorkbasketId = \"WBI:100000000000000000000000000000000001\";\n+\n+    List<WorkbasketHistoryEvent> events =\n+        historyService.createWorkbasketHistoryQuery().workbasketIdIn(sourceWorkbasketId).list();\n+\n+    assertThat(events).isEmpty();\n+\n+    workbasketService.addDistributionTarget(sourceWorkbasketId, targetWorkbasketId);\n+\n+    events =\n+        historyService.createWorkbasketHistoryQuery().workbasketIdIn(sourceWorkbasketId).list();\n+\n+    assertThat(events).hasSize(1);\n+\n+    String eventType = events.get(0).getEventType();\n+\n+    assertThat(eventType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacd2b31c60bd625b4b4fe2238c0034c49a21d8b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2NTI4Nw==", "bodyText": "done", "url": "https://github.com/Taskana/taskana/pull/1213#discussion_r468565287", "createdAt": "2020-08-11T13:08:21Z", "author": {"login": "gitgoodjhe"}, "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/workbasket/CreateHistoryEventOnWorkbasketDistributionTargetAddedAccTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package acceptance.events.workbasket;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.spi.history.api.events.workbasket.WorkbasketHistoryEvent;\n+import pro.taskana.spi.history.api.events.workbasket.WorkbasketHistoryEventType;\n+import pro.taskana.workbasket.api.WorkbasketService;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnWorkbasketDistributionTargetAddedAccTest extends AbstractAccTest {\n+\n+  private final WorkbasketService workbasketService = taskanaEngine.getWorkbasketService();\n+  private final SimpleHistoryServiceImpl historyService = getHistoryService();\n+\n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void should_CreateWorkbasketDistributionTargetAddedHistoryEvent_When_DistributionTargetIsAdded()\n+      throws Exception {\n+\n+    final String sourceWorkbasketId = \"WBI:100000000000000000000000000000000004\";\n+    final String targetWorkbasketId = \"WBI:100000000000000000000000000000000001\";\n+\n+    List<WorkbasketHistoryEvent> events =\n+        historyService.createWorkbasketHistoryQuery().workbasketIdIn(sourceWorkbasketId).list();\n+\n+    assertThat(events).isEmpty();\n+\n+    workbasketService.addDistributionTarget(sourceWorkbasketId, targetWorkbasketId);\n+\n+    events =\n+        historyService.createWorkbasketHistoryQuery().workbasketIdIn(sourceWorkbasketId).list();\n+\n+    assertThat(events).hasSize(1);\n+\n+    String eventType = events.get(0).getEventType();\n+\n+    assertThat(eventType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4MDM3NA=="}, "originalCommit": {"oid": "bacd2b31c60bd625b4b4fe2238c0034c49a21d8b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjU0Njk5OnYy", "diffSide": "RIGHT", "path": "history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/TaskanaHistoryEngine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOToxODowM1rOG-HEbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzowOTo0MlrOG-3Afw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4MDcxNg==", "bodyText": "Don't we have access to the engine to reuse the existing methods?", "url": "https://github.com/Taskana/taskana/pull/1213#discussion_r467780716", "createdAt": "2020-08-10T09:18:03Z", "author": {"login": "holgerhagen"}, "path": "history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/TaskanaHistoryEngine.java", "diffHunk": "@@ -10,4 +12,20 @@\n    * @return the HistoryService\n    */\n   TaskanaHistory getTaskanaHistoryService();\n+\n+  /**\n+   * check whether the current user is member of one of the roles specified.\n+   *\n+   * @param roles The roles that are checked for membership of the current user\n+   * @return true if the current user is a member of at least one of the specified groups\n+   */\n+  boolean isUserInRole(TaskanaRole... roles);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacd2b31c60bd625b4b4fe2238c0034c49a21d8b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2NjE0Mw==", "bodyText": "unfortunately no...as soon as we pass the engine in the spi, this will be different and should be changed with the upcoming ticket to make the whole process transactionally safe", "url": "https://github.com/Taskana/taskana/pull/1213#discussion_r468566143", "createdAt": "2020-08-11T13:09:42Z", "author": {"login": "gitgoodjhe"}, "path": "history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/TaskanaHistoryEngine.java", "diffHunk": "@@ -10,4 +12,20 @@\n    * @return the HistoryService\n    */\n   TaskanaHistory getTaskanaHistoryService();\n+\n+  /**\n+   * check whether the current user is member of one of the roles specified.\n+   *\n+   * @param roles The roles that are checked for membership of the current user\n+   * @return true if the current user is a member of at least one of the specified groups\n+   */\n+  boolean isUserInRole(TaskanaRole... roles);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4MDcxNg=="}, "originalCommit": {"oid": "bacd2b31c60bd625b4b4fe2238c0034c49a21d8b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjU2NDk4OnYy", "diffSide": "LEFT", "path": "history/taskana-simplehistory-rest-spring/src/main/resources/sql.sample-data/history-event.sql", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOToyNDowNFrOG-HPoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDo0OTo0MVrOG-7k4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4MzU4NQ==", "bodyText": "should we rename the file to \"task-history-event.sql\"", "url": "https://github.com/Taskana/taskana/pull/1213#discussion_r467783585", "createdAt": "2020-08-10T09:24:04Z", "author": {"login": "holgerhagen"}, "path": "history/taskana-simplehistory-rest-spring/src/main/resources/sql.sample-data/history-event.sql", "diffHunk": "@@ -1,4 +1,4 @@\n-INSERT INTO HISTORY_EVENTS (ID, BUSINESS_PROCESS_ID, PARENT_BUSINESS_PROCESS_ID, TASK_ID, EVENT_TYPE, CREATED, USER_ID, DOMAIN, WORKBASKET_KEY, POR_COMPANY, POR_SYSTEM, POR_INSTANCE, POR_TYPE, POR_VALUE, TASK_CLASSIFICATION_KEY, TASK_CLASSIFICATION_CATEGORY, ATTACHMENT_CLASSIFICATION_KEY, OLD_VALUE, NEW_VALUE, CUSTOM_1, CUSTOM_2, CUSTOM_3, CUSTOM_4, DETAILS) VALUES", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacd2b31c60bd625b4b4fe2238c0034c49a21d8b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0MDk5Mw==", "bodyText": "done", "url": "https://github.com/Taskana/taskana/pull/1213#discussion_r468640993", "createdAt": "2020-08-11T14:49:41Z", "author": {"login": "gitgoodjhe"}, "path": "history/taskana-simplehistory-rest-spring/src/main/resources/sql.sample-data/history-event.sql", "diffHunk": "@@ -1,4 +1,4 @@\n-INSERT INTO HISTORY_EVENTS (ID, BUSINESS_PROCESS_ID, PARENT_BUSINESS_PROCESS_ID, TASK_ID, EVENT_TYPE, CREATED, USER_ID, DOMAIN, WORKBASKET_KEY, POR_COMPANY, POR_SYSTEM, POR_INSTANCE, POR_TYPE, POR_VALUE, TASK_CLASSIFICATION_KEY, TASK_CLASSIFICATION_CATEGORY, ATTACHMENT_CLASSIFICATION_KEY, OLD_VALUE, NEW_VALUE, CUSTOM_1, CUSTOM_2, CUSTOM_3, CUSTOM_4, DETAILS) VALUES", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4MzU4NQ=="}, "originalCommit": {"oid": "bacd2b31c60bd625b4b4fe2238c0034c49a21d8b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjU5NTMxOnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/resources/sql/db2/taskana_schema_update_3.0.0_to_4.0.0_db2.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOTozMjoxNFrOG-Hg8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzowOTo1NFrOG-3BAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4ODAxNg==", "bodyText": "Have you tried this on a real DB2 database?", "url": "https://github.com/Taskana/taskana/pull/1213#discussion_r467788016", "createdAt": "2020-08-10T09:32:14Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/resources/sql/db2/taskana_schema_update_3.0.0_to_4.0.0_db2.sql", "diffHunk": "@@ -13,3 +13,8 @@ CALL SYSPROC.ADMIN_CMD ( 'REORG TABLE HISTORY_EVENTS allow read access' );\n \n ALTER TABLE HISTORY_EVENTS ADD PRIMARY KEY (ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacd2b31c60bd625b4b4fe2238c0034c49a21d8b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2NjI3NA==", "bodyText": "yes", "url": "https://github.com/Taskana/taskana/pull/1213#discussion_r468566274", "createdAt": "2020-08-11T13:09:54Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/resources/sql/db2/taskana_schema_update_3.0.0_to_4.0.0_db2.sql", "diffHunk": "@@ -13,3 +13,8 @@ CALL SYSPROC.ADMIN_CMD ( 'REORG TABLE HISTORY_EVENTS allow read access' );\n \n ALTER TABLE HISTORY_EVENTS ADD PRIMARY KEY (ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4ODAxNg=="}, "originalCommit": {"oid": "bacd2b31c60bd625b4b4fe2238c0034c49a21d8b"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjU5ODQ4OnYy", "diffSide": "RIGHT", "path": "history/taskana-simplehistory-rest-spring/src/main/resources/sql.sample-data/clear-db.sql", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOTozMzoxOFrOG-Hi6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDo0NDoxM1rOG-7Uug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4ODUyMA==", "bodyText": "Do we still use these SQL files?", "url": "https://github.com/Taskana/taskana/pull/1213#discussion_r467788520", "createdAt": "2020-08-10T09:33:18Z", "author": {"login": "holgerhagen"}, "path": "history/taskana-simplehistory-rest-spring/src/main/resources/sql.sample-data/clear-db.sql", "diffHunk": "@@ -1,3 +1,3 @@\n -- the order is important!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacd2b31c60bd625b4b4fe2238c0034c49a21d8b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzNjg1OA==", "bodyText": "yes, they get used in the taskana-simplehistory-rest-spring tests, but probably could be replaced once we get the test dependencies module with the test data from our SampleDataGenerator", "url": "https://github.com/Taskana/taskana/pull/1213#discussion_r468636858", "createdAt": "2020-08-11T14:44:13Z", "author": {"login": "gitgoodjhe"}, "path": "history/taskana-simplehistory-rest-spring/src/main/resources/sql.sample-data/clear-db.sql", "diffHunk": "@@ -1,3 +1,3 @@\n -- the order is important!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4ODUyMA=="}, "originalCommit": {"oid": "bacd2b31c60bd625b4b4fe2238c0034c49a21d8b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjYwNDg3OnYy", "diffSide": "LEFT", "path": "lib/taskana-data/src/main/resources/sql/test-data/history-event.sql", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOTozNTowNVrOG-Hmqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTowMjo0MlrOG-8LUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4OTQ4Mg==", "bodyText": "Haven't we agreed to split this into two files?", "url": "https://github.com/Taskana/taskana/pull/1213#discussion_r467789482", "createdAt": "2020-08-10T09:35:05Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-data/src/main/resources/sql/test-data/history-event.sql", "diffHunk": "@@ -1,4 +1,4 @@\n-INSERT INTO HISTORY_EVENTS (ID,BUSINESS_PROCESS_ID, PARENT_BUSINESS_PROCESS_ID, TASK_ID, EVENT_TYPE, CREATED, USER_ID, DOMAIN, WORKBASKET_KEY, POR_COMPANY, POR_SYSTEM, POR_INSTANCE, POR_TYPE, POR_VALUE, TASK_CLASSIFICATION_KEY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacd2b31c60bd625b4b4fe2238c0034c49a21d8b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY1MDgzNQ==", "bodyText": "done", "url": "https://github.com/Taskana/taskana/pull/1213#discussion_r468650835", "createdAt": "2020-08-11T15:02:42Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-data/src/main/resources/sql/test-data/history-event.sql", "diffHunk": "@@ -1,4 +1,4 @@\n-INSERT INTO HISTORY_EVENTS (ID,BUSINESS_PROCESS_ID, PARENT_BUSINESS_PROCESS_ID, TASK_ID, EVENT_TYPE, CREATED, USER_ID, DOMAIN, WORKBASKET_KEY, POR_COMPANY, POR_SYSTEM, POR_INSTANCE, POR_TYPE, POR_VALUE, TASK_CLASSIFICATION_KEY,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4OTQ4Mg=="}, "originalCommit": {"oid": "bacd2b31c60bd625b4b4fe2238c0034c49a21d8b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjYxNjY3OnYy", "diffSide": "RIGHT", "path": "lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/WorkbasketServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOTozODo0OFrOG-HtgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDoyMjowNVrOG-6VNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc5MTIzMg==", "bodyText": "Would it make sense to move the ID generation and the change detection into the history?", "url": "https://github.com/Taskana/taskana/pull/1213#discussion_r467791232", "createdAt": "2020-08-10T09:38:48Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/WorkbasketServiceImpl.java", "diffHunk": "@@ -176,6 +205,20 @@ public Workbasket updateWorkbasket(Workbasket workbasketToUpdate)\n \n         workbasketMapper.update(workbasketImplToUpdate);\n       }\n+\n+      if (HistoryEventManager.isHistoryEnabled()) {\n+\n+        String details =\n+            ObjectAttributeChangeDetector.determineChangesInAttributes(\n+                oldWorkbasket, workbasketToUpdate);\n+\n+        historyEventManager.createEvent(\n+            new WorkbasketUpdatedEvent(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacd2b31c60bd625b4b4fe2238c0034c49a21d8b"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyMDU5Ng==", "bodyText": "ID generation maybe, but the change detection is very dependent on the actual method where it takes place because of different parameter objects getting passed to the change detector. While it's possible, this change would require several hours of rework.", "url": "https://github.com/Taskana/taskana/pull/1213#discussion_r468620596", "createdAt": "2020-08-11T14:22:05Z", "author": {"login": "gitgoodjhe"}, "path": "lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/WorkbasketServiceImpl.java", "diffHunk": "@@ -176,6 +205,20 @@ public Workbasket updateWorkbasket(Workbasket workbasketToUpdate)\n \n         workbasketMapper.update(workbasketImplToUpdate);\n       }\n+\n+      if (HistoryEventManager.isHistoryEnabled()) {\n+\n+        String details =\n+            ObjectAttributeChangeDetector.determineChangesInAttributes(\n+                oldWorkbasket, workbasketToUpdate);\n+\n+        historyEventManager.createEvent(\n+            new WorkbasketUpdatedEvent(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc5MTIzMg=="}, "originalCommit": {"oid": "bacd2b31c60bd625b4b4fe2238c0034c49a21d8b"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4144, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}