{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NDg5NjYx", "number": 877, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMzo1Mjo0MlrODa4i5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTo0NDowNFrODbgkEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NTE2MDA3OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/TaskController.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMzo1Mjo0MlrOFiDUkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTo1OTo0M1rOFjCoSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1MDMyMw==", "bodyText": "please consider making maxTime some kind of constant. also is this somewhere documented within the API documentation? this is like a magic string that suddenly does not need to be a valid timestamp / instant object and still have a meaning.\nPersonally i would just remove this special cases and find a way to give \"null\" or only 1 timestamp such a meaning.", "url": "https://github.com/Taskana/taskana/pull/877#discussion_r371250323", "createdAt": "2020-01-27T13:52:42Z", "author": {"login": "benjamineckstein"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/TaskController.java", "diffHunk": "@@ -330,13 +332,65 @@ private TaskQuery applyFilterParams(TaskQuery taskQuery, MultiValueMap<String, S\n       params.remove(POR_VALUE);\n     }\n \n+    if (params.containsKey(PLANNED)) {\n+\n+      String[] instants = extractCommaSeparatedFields(params.get(PLANNED));\n+\n+      TimeInterval[] timeIntervals = extractTimeIntervals(instants);\n+\n+      taskQuery.plannedWithin(timeIntervals);\n+\n+      params.remove(PLANNED);\n+    }\n+\n     if (LOGGER.isDebugEnabled()) {\n       LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", taskQuery);\n     }\n \n     return taskQuery;\n   }\n \n+  private TimeInterval[] extractTimeIntervals(String[] instants) {\n+\n+    List<TimeInterval> timeIntervalsList = new ArrayList<>();\n+\n+    for (int i = 0; i < instants.length - 1; i += 2) {\n+\n+      TimeInterval timeInterval = determineTimeInterval(instants, i);\n+\n+      if (timeInterval != null) {\n+\n+        timeIntervalsList.add(timeInterval);\n+      }\n+    }\n+\n+    TimeInterval[] timeIntervalArray = new TimeInterval[timeIntervalsList.size()];\n+\n+    TimeInterval[] timeIntervals = timeIntervalsList.toArray(timeIntervalArray);\n+\n+    return timeIntervals;\n+  }\n+\n+  private TimeInterval determineTimeInterval(String[] instants, int i) {\n+\n+    if (!instants[i].equals(\"maxTime\") && !instants[i + 1].equals(\"maxTime\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e358972a645b83f84a4180d77b5b935b61725c06"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3OTk3Nw==", "bodyText": "Done. Also, we now offer 2 methods to filter. If one time interval is sufficient, the parameters \"plannedFrom/dueFrom\" and \"plannedTo/dueTo\" can be used. If one of those is left out it is an open time interval (like you suggested). For the other option to use multiple time intervals as filter, the parameter \"planned\" can be used and given an even amount of instants. For open time intervals an \"empty\" string can be used.", "url": "https://github.com/Taskana/taskana/pull/877#discussion_r372279977", "createdAt": "2020-01-29T09:45:25Z", "author": {"login": "gitgoodjhe"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/TaskController.java", "diffHunk": "@@ -330,13 +332,65 @@ private TaskQuery applyFilterParams(TaskQuery taskQuery, MultiValueMap<String, S\n       params.remove(POR_VALUE);\n     }\n \n+    if (params.containsKey(PLANNED)) {\n+\n+      String[] instants = extractCommaSeparatedFields(params.get(PLANNED));\n+\n+      TimeInterval[] timeIntervals = extractTimeIntervals(instants);\n+\n+      taskQuery.plannedWithin(timeIntervals);\n+\n+      params.remove(PLANNED);\n+    }\n+\n     if (LOGGER.isDebugEnabled()) {\n       LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", taskQuery);\n     }\n \n     return taskQuery;\n   }\n \n+  private TimeInterval[] extractTimeIntervals(String[] instants) {\n+\n+    List<TimeInterval> timeIntervalsList = new ArrayList<>();\n+\n+    for (int i = 0; i < instants.length - 1; i += 2) {\n+\n+      TimeInterval timeInterval = determineTimeInterval(instants, i);\n+\n+      if (timeInterval != null) {\n+\n+        timeIntervalsList.add(timeInterval);\n+      }\n+    }\n+\n+    TimeInterval[] timeIntervalArray = new TimeInterval[timeIntervalsList.size()];\n+\n+    TimeInterval[] timeIntervals = timeIntervalsList.toArray(timeIntervalArray);\n+\n+    return timeIntervals;\n+  }\n+\n+  private TimeInterval determineTimeInterval(String[] instants, int i) {\n+\n+    if (!instants[i].equals(\"maxTime\") && !instants[i + 1].equals(\"maxTime\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1MDMyMw=="}, "originalCommit": {"oid": "e358972a645b83f84a4180d77b5b935b61725c06"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4NjA3Nw==", "bodyText": "what happens if someone uses both combinations? -> plannedFrom and planned. Or plannedFrom, plannedTo and planned?\nWhat is the expected & current behaviour? We open a lot of edge cases that need to be defined and handled.", "url": "https://github.com/Taskana/taskana/pull/877#discussion_r372286077", "createdAt": "2020-01-29T09:56:54Z", "author": {"login": "benjamineckstein"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/TaskController.java", "diffHunk": "@@ -330,13 +332,65 @@ private TaskQuery applyFilterParams(TaskQuery taskQuery, MultiValueMap<String, S\n       params.remove(POR_VALUE);\n     }\n \n+    if (params.containsKey(PLANNED)) {\n+\n+      String[] instants = extractCommaSeparatedFields(params.get(PLANNED));\n+\n+      TimeInterval[] timeIntervals = extractTimeIntervals(instants);\n+\n+      taskQuery.plannedWithin(timeIntervals);\n+\n+      params.remove(PLANNED);\n+    }\n+\n     if (LOGGER.isDebugEnabled()) {\n       LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", taskQuery);\n     }\n \n     return taskQuery;\n   }\n \n+  private TimeInterval[] extractTimeIntervals(String[] instants) {\n+\n+    List<TimeInterval> timeIntervalsList = new ArrayList<>();\n+\n+    for (int i = 0; i < instants.length - 1; i += 2) {\n+\n+      TimeInterval timeInterval = determineTimeInterval(instants, i);\n+\n+      if (timeInterval != null) {\n+\n+        timeIntervalsList.add(timeInterval);\n+      }\n+    }\n+\n+    TimeInterval[] timeIntervalArray = new TimeInterval[timeIntervalsList.size()];\n+\n+    TimeInterval[] timeIntervals = timeIntervalsList.toArray(timeIntervalArray);\n+\n+    return timeIntervals;\n+  }\n+\n+  private TimeInterval determineTimeInterval(String[] instants, int i) {\n+\n+    if (!instants[i].equals(\"maxTime\") && !instants[i + 1].equals(\"maxTime\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1MDMyMw=="}, "originalCommit": {"oid": "e358972a645b83f84a4180d77b5b935b61725c06"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4NzU2MQ==", "bodyText": "There is a check for invalid parameter combos in the new commit. These cases are strictly prohibited, because the time intervals might get overridden otherwise", "url": "https://github.com/Taskana/taskana/pull/877#discussion_r372287561", "createdAt": "2020-01-29T09:59:43Z", "author": {"login": "gitgoodjhe"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/TaskController.java", "diffHunk": "@@ -330,13 +332,65 @@ private TaskQuery applyFilterParams(TaskQuery taskQuery, MultiValueMap<String, S\n       params.remove(POR_VALUE);\n     }\n \n+    if (params.containsKey(PLANNED)) {\n+\n+      String[] instants = extractCommaSeparatedFields(params.get(PLANNED));\n+\n+      TimeInterval[] timeIntervals = extractTimeIntervals(instants);\n+\n+      taskQuery.plannedWithin(timeIntervals);\n+\n+      params.remove(PLANNED);\n+    }\n+\n     if (LOGGER.isDebugEnabled()) {\n       LOGGER.debug(\"Exit from applyFilterParams(), returning {}\", taskQuery);\n     }\n \n     return taskQuery;\n   }\n \n+  private TimeInterval[] extractTimeIntervals(String[] instants) {\n+\n+    List<TimeInterval> timeIntervalsList = new ArrayList<>();\n+\n+    for (int i = 0; i < instants.length - 1; i += 2) {\n+\n+      TimeInterval timeInterval = determineTimeInterval(instants, i);\n+\n+      if (timeInterval != null) {\n+\n+        timeIntervalsList.add(timeInterval);\n+      }\n+    }\n+\n+    TimeInterval[] timeIntervalArray = new TimeInterval[timeIntervalsList.size()];\n+\n+    TimeInterval[] timeIntervals = timeIntervalsList.toArray(timeIntervalArray);\n+\n+    return timeIntervals;\n+  }\n+\n+  private TimeInterval determineTimeInterval(String[] instants, int i) {\n+\n+    if (!instants[i].equals(\"maxTime\") && !instants[i + 1].equals(\"maxTime\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1MDMyMw=="}, "originalCommit": {"oid": "e358972a645b83f84a4180d77b5b935b61725c06"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTcwNDIzOnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/test/resources/asciidoc/rest-api.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTo0MDowN1rOFjCACQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTo0MDowN1rOFjCACQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NzI1Nw==", "bodyText": "provide this example with an example request? Could be better to understand.", "url": "https://github.com/Taskana/taskana/pull/877#discussion_r372277257", "createdAt": "2020-01-29T09:40:07Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/resources/asciidoc/rest-api.adoc", "diffHunk": "@@ -115,6 +115,26 @@ include::{snippets}/GetAllTasksDocTest/response-fields.adoc[]\n The list generated in the response can be filtered using following parameters in the uri: +\n name | priority | state | classification.key | workbasket-id | {workbasket-key , domain} | +\n owner | por.company | por.system | por.instance | por.type | por.value +\n+planned | plannedFrom | plannedTo | due | dueFrom | dueTo +\n+\n+If it is sufficient to filter the list with a single time interval, use the parameters +\n+plannedFrom/dueFrom and plannedTo/plannedTo. +\n+Leave one of them out of the request, if you want to have an open interval. +\n+\n+If it is required to filter the list with multiple planned or due time intervals, the parameters +\n+ planned / due can be used as follows instead: +\n+\n+ - provide a string with an even number of instants separated by a \",\". Time intervals will be +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec3ceccdecf4547c0d4c0478dd37dc313de8648"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTcxNjY2OnYy", "diffSide": "RIGHT", "path": "rest/taskana-rest-spring/src/test/resources/asciidoc/rest-api.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTo0NDowNFrOFjCH-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTo0NDowNFrOFjCH-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3OTI5MA==", "bodyText": "I know what you are trying to say. But it's hard to read. Maybe something like\n\nplanned stands for a specific timestamp. Whenever an interval is of interest use plannedFrom and plannedTo. plannedFrom and plannedTo have to be used together. due works analog.", "url": "https://github.com/Taskana/taskana/pull/877#discussion_r372279290", "createdAt": "2020-01-29T09:44:04Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/resources/asciidoc/rest-api.adoc", "diffHunk": "@@ -115,6 +115,26 @@ include::{snippets}/GetAllTasksDocTest/response-fields.adoc[]\n The list generated in the response can be filtered using following parameters in the uri: +\n name | priority | state | classification.key | workbasket-id | {workbasket-key , domain} | +\n owner | por.company | por.system | por.instance | por.type | por.value +\n+planned | plannedFrom | plannedTo | due | dueFrom | dueTo +\n+\n+If it is sufficient to filter the list with a single time interval, use the parameters +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec3ceccdecf4547c0d4c0478dd37dc313de8648"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4387, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}