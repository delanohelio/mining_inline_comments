{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMDI3NjI0", "number": 988, "title": "Tsk 1160", "bodyText": "", "createdAt": "2020-03-24T14:33:10Z", "url": "https://github.com/Taskana/taskana/pull/988", "merged": true, "mergeCommit": {"oid": "6bd6bd48386155644df0463edf8aeda473bd1a56"}, "closed": true, "closedAt": "2020-03-30T11:21:09Z", "author": {"login": "BerndBreier"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRZSeWAH2gAyMzkzMDI3NjI0OjZjZWZiMWE3Zjk2MTI2ODhkMjMxNTU3MWZjMTRiOWFmNTI0NWM3NTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcSsqgNAFqTM4Mzc1NjEzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6cefb1a7f9612688d2315571fc14b9af5245c751", "author": {"user": {"login": "BerndBreier", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/6cefb1a7f9612688d2315571fc14b9af5245c751", "committedDate": "2020-03-26T10:10:36Z", "message": "TSK-1143C mismatch between forward and backward calculation between planned and due"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47c87cd6ba012fca2c3651e69420d2498aefa88f", "author": {"user": {"login": "BerndBreier", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/47c87cd6ba012fca2c3651e69420d2498aefa88f", "committedDate": "2020-03-26T10:10:37Z", "message": "TSK-1143 UpdateTask with Planned sometimes fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b9335f41566846d89ba5723b8f6735e2a8db341", "author": {"user": {"login": "BerndBreier", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/9b9335f41566846d89ba5723b8f6735e2a8db341", "committedDate": "2020-03-26T10:10:37Z", "message": "TSK-442 improve task refresh on classification update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "900aa2c5821f1a153acbf6b7d7565660a1e34623", "author": {"user": {"login": "BerndBreier", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/900aa2c5821f1a153acbf6b7d7565660a1e34623", "committedDate": "2020-03-26T10:10:37Z", "message": "TSK-1143b - fix error in testcase UpdateObjectsUseUtcTimeStampsAccTest."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bfa207d0836a1bb71ba650ae969af708d3853f7", "author": {"user": {"login": "BerndBreier", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/7bfa207d0836a1bb71ba650ae969af708d3853f7", "committedDate": "2020-03-26T10:10:37Z", "message": "TSK-442 improve task refresh on classification update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd4c775504f5e3a173976af21226bad2b2f0e02e", "author": {"user": {"login": "BerndBreier", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/bd4c775504f5e3a173976af21226bad2b2f0e02e", "committedDate": "2020-03-26T10:10:38Z", "message": "TSK-1160 TaskStates CANCELLED and TERMINATED"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d89022a5ec9bfdc93a3112e30e33f86a02b6f78", "author": {"user": {"login": "BerndBreier", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/8d89022a5ec9bfdc93a3112e30e33f86a02b6f78", "committedDate": "2020-03-24T07:06:23Z", "message": "TSK-1160 TaskStates CANCELLED and TERMINATED"}, "afterCommit": {"oid": "bd4c775504f5e3a173976af21226bad2b2f0e02e", "author": {"user": {"login": "BerndBreier", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/bd4c775504f5e3a173976af21226bad2b2f0e02e", "committedDate": "2020-03-26T10:10:38Z", "message": "TSK-1160 TaskStates CANCELLED and TERMINATED"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMTA4NTc5", "url": "https://github.com/Taskana/taskana/pull/988#pullrequestreview-382108579", "createdAt": "2020-03-26T15:12:02Z", "commit": {"oid": "bd4c775504f5e3a173976af21226bad2b2f0e02e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNToxMjowMlrOF8LtmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTozMzozNVrOF8MxIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1MDc3Nw==", "bodyText": "Cancels a task.\nCancellation means a task is obsolete from a business perspective an does not need to be completed anymore.", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398650777", "createdAt": "2020-03-26T15:12:02Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "diffHunk": "@@ -490,4 +490,28 @@ TaskComment getTaskComment(String taskCommentId)\n    */\n   BulkOperationResults<String, TaskanaException> setPlannedPropertyOfTasks(\n       Instant planned, List<String> taskIds);\n+\n+  /**\n+   * Cancels a task.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd4c775504f5e3a173976af21226bad2b2f0e02e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1MjU4Ng==", "bodyText": "Terminates a task.\nTermination is a administrative action to complete a task. This is typically done by an administration to correct any technical issue.", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398652586", "createdAt": "2020-03-26T15:14:16Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "diffHunk": "@@ -490,4 +490,28 @@ TaskComment getTaskComment(String taskCommentId)\n    */\n   BulkOperationResults<String, TaskanaException> setPlannedPropertyOfTasks(\n       Instant planned, List<String> taskIds);\n+\n+  /**\n+   * Cancels a task.\n+   *\n+   * @param taskId the id of the task to cancel.\n+   * @return the updated task.\n+   * @throws TaskNotFoundException if the Task with Id TaskId is not found\n+   * @throws InvalidStateException if the task is not in state READY or CLAIMED\n+   * @throws NotAuthorizedException if the current user is not authorized to see the task\n+   */\n+  Task cancelTask(String taskId)\n+      throws TaskNotFoundException, InvalidStateException, NotAuthorizedException;\n+\n+  /**\n+   * Terminates a task.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd4c775504f5e3a173976af21226bad2b2f0e02e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1NDI1Ng==", "bodyText": "Maybe just \"in\" as it is a well known operator for this? Just an idea.", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398654256", "createdAt": "2020-03-26T15:16:25Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskState.java", "diffHunk": "@@ -4,5 +4,20 @@\n public enum TaskState {\n   READY,\n   CLAIMED,\n-  COMPLETED\n+  COMPLETED,\n+  CANCELLED,\n+  TERMINATED;\n+\n+  public boolean isInStates(TaskState... states) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd4c775504f5e3a173976af21226bad2b2f0e02e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1NTM4Mg==", "bodyText": "Why don't we provide the converter on engine level and initialize it during startup according to the configuration?", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398655382", "createdAt": "2020-03-26T15:17:49Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/ServiceLevelHandler.java", "diffHunk": "@@ -48,14 +46,9 @@\n     this.taskanaEngine = taskanaEngine;\n     this.taskMapper = taskMapper;\n     this.attachmentMapper = attachmentMapper;\n-    DaysToWorkingDaysConverter.setGermanPublicHolidaysEnabled(\n-        taskanaEngine.getEngine().getConfiguration().isGermanPublicHolidaysEnabled());\n-    try {\n-      converter = DaysToWorkingDaysConverter.initialize();\n-    } catch (InvalidArgumentException e) {\n-      LOGGER.error(ERROR_CANNOT_INITIALIZE_DAYS_TO_WORKING_DAYS_CONVERTER);\n-      throw new SystemException(\n-          ERROR_CANNOT_INITIALIZE_DAYS_TO_WORKING_DAYS_CONVERTER, e.getCause());\n+    this.converter = WorkingDaysToDaysConverter.initialize();\n+    if (taskanaEngine.getEngine().getConfiguration().isGermanPublicHolidaysEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd4c775504f5e3a173976af21226bad2b2f0e02e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1NzQ0Nw==", "bodyText": "We should retain this timestamp even if the task is terminated/cancelled.", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398657447", "createdAt": "2020-03-26T15:20:22Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskServiceImpl.java", "diffHunk": "@@ -951,6 +979,29 @@ private TaskImpl checkConcurrencyAndSetModified(TaskImpl newTaskImpl, TaskImpl o\n     return newTaskImpl;\n   }\n \n+  private TaskImpl terminateCancelCommonActions(String taskId, TaskState targetState)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidStateException {\n+    if (taskId == null || taskId.isEmpty()) {\n+      throw new TaskNotFoundException(taskId, String.format(TASK_WITH_ID_WAS_NOT_FOUND, taskId));\n+    }\n+    TaskImpl task = (TaskImpl) getTask(taskId);\n+    TaskState state = task.getState();\n+    if (state.isEndState()) {\n+      throw new InvalidStateException(String.format(TASK_WITH_ID_IS_ALREADY_IN_END_STATE, taskId));\n+    }\n+\n+    Instant now = Instant.now();\n+    task.setOwner(null);\n+    task.setModified(now);\n+    task.setCompleted(now);\n+    task.setClaimed(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd4c775504f5e3a173976af21226bad2b2f0e02e"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1Nzc5Mw==", "bodyText": "Why this. We don't know if the task has been read, do we?", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398657793", "createdAt": "2020-03-26T15:20:47Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskServiceImpl.java", "diffHunk": "@@ -951,6 +979,29 @@ private TaskImpl checkConcurrencyAndSetModified(TaskImpl newTaskImpl, TaskImpl o\n     return newTaskImpl;\n   }\n \n+  private TaskImpl terminateCancelCommonActions(String taskId, TaskState targetState)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidStateException {\n+    if (taskId == null || taskId.isEmpty()) {\n+      throw new TaskNotFoundException(taskId, String.format(TASK_WITH_ID_WAS_NOT_FOUND, taskId));\n+    }\n+    TaskImpl task = (TaskImpl) getTask(taskId);\n+    TaskState state = task.getState();\n+    if (state.isEndState()) {\n+      throw new InvalidStateException(String.format(TASK_WITH_ID_IS_ALREADY_IN_END_STATE, taskId));\n+    }\n+\n+    Instant now = Instant.now();\n+    task.setOwner(null);\n+    task.setModified(now);\n+    task.setCompleted(now);\n+    task.setClaimed(null);\n+    task.setRead(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd4c775504f5e3a173976af21226bad2b2f0e02e"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2MzMyMQ==", "bodyText": "Maybe we should add an assertion isEqualTo(5) before cancelTask to make it more clear?", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398663321", "createdAt": "2020-03-26T15:27:45Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/test/java/acceptance/task/CancelTaskAccTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.exceptions.InvalidStateException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.Task;\n+import pro.taskana.task.api.models.TaskSummary;\n+\n+\n+/** Acceptance tests for all claim and complete scenarios. */\n+@ExtendWith(JaasExtension.class)\n+class CancelTaskAccTest extends AbstractAccTest {\n+  private TaskService taskService;\n+\n+  CancelTaskAccTest() {\n+    super();\n+    taskService = taskanaEngine.getTaskService();\n+  }\n+\n+  @BeforeEach\n+  public static void setupTest() throws Exception {\n+    resetDb(false);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testQeryCancelledTasks() {\n+    List<TaskSummary> taskSummaries =\n+        taskService.createTaskQuery().stateIn(TaskState.CANCELLED).list();\n+    assertThat(taskSummaries.size()).isEqualTo(5);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"admin\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testCancelReadyTask()\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidStateException {\n+    List<TaskSummary> taskSummaries = taskService.createTaskQuery().stateIn(TaskState.READY).list();\n+    assertThat(taskSummaries.size()).isEqualTo(47);\n+    Task task = taskService.getTask(taskSummaries.get(0).getId());\n+    taskService.cancelTask(taskSummaries.get(0).getId());\n+    long numTasks = taskService.createTaskQuery().stateIn(TaskState.READY).count();\n+    assertThat(numTasks).isEqualTo(46);\n+    numTasks = taskService.createTaskQuery().stateIn(TaskState.CANCELLED).count();\n+    assertThat(numTasks).isEqualTo(6);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"admin\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testCancelClaimedTask()\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidStateException {\n+    List<TaskSummary> taskSummaries =\n+        taskService.createTaskQuery().stateIn(TaskState.CLAIMED).list();\n+    assertThat(taskSummaries.size()).isEqualTo(19);\n+    Task task = taskService.getTask(taskSummaries.get(0).getId());\n+    taskService.cancelTask(taskSummaries.get(0).getId());\n+    long numTasks = taskService.createTaskQuery().stateIn(TaskState.CLAIMED).count();\n+    assertThat(numTasks).isEqualTo(18);\n+    numTasks = taskService.createTaskQuery().stateIn(TaskState.CANCELLED).count();\n+    assertThat(numTasks).isEqualTo(6);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd4c775504f5e3a173976af21226bad2b2f0e02e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2NDU5OA==", "bodyText": "Is it a good idea to do all these tests as admin?", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398664598", "createdAt": "2020-03-26T15:29:16Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/test/java/acceptance/task/CancelTaskAccTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.exceptions.InvalidStateException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.Task;\n+import pro.taskana.task.api.models.TaskSummary;\n+\n+\n+/** Acceptance tests for all claim and complete scenarios. */\n+@ExtendWith(JaasExtension.class)\n+class CancelTaskAccTest extends AbstractAccTest {\n+  private TaskService taskService;\n+\n+  CancelTaskAccTest() {\n+    super();\n+    taskService = taskanaEngine.getTaskService();\n+  }\n+\n+  @BeforeEach\n+  public static void setupTest() throws Exception {\n+    resetDb(false);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testQeryCancelledTasks() {\n+    List<TaskSummary> taskSummaries =\n+        taskService.createTaskQuery().stateIn(TaskState.CANCELLED).list();\n+    assertThat(taskSummaries.size()).isEqualTo(5);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"admin\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd4c775504f5e3a173976af21226bad2b2f0e02e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2Njg1NQ==", "bodyText": "Did we decide that everybody is allowed to cancel a claimed task? I wonder if it would be better to allow only the owner to cancel claimed tasks.", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398666855", "createdAt": "2020-03-26T15:32:00Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/test/java/acceptance/task/CancelTaskAccTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.exceptions.InvalidStateException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.Task;\n+import pro.taskana.task.api.models.TaskSummary;\n+\n+\n+/** Acceptance tests for all claim and complete scenarios. */\n+@ExtendWith(JaasExtension.class)\n+class CancelTaskAccTest extends AbstractAccTest {\n+  private TaskService taskService;\n+\n+  CancelTaskAccTest() {\n+    super();\n+    taskService = taskanaEngine.getTaskService();\n+  }\n+\n+  @BeforeEach\n+  public static void setupTest() throws Exception {\n+    resetDb(false);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testQeryCancelledTasks() {\n+    List<TaskSummary> taskSummaries =\n+        taskService.createTaskQuery().stateIn(TaskState.CANCELLED).list();\n+    assertThat(taskSummaries.size()).isEqualTo(5);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"admin\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testCancelReadyTask()\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidStateException {\n+    List<TaskSummary> taskSummaries = taskService.createTaskQuery().stateIn(TaskState.READY).list();\n+    assertThat(taskSummaries.size()).isEqualTo(47);\n+    Task task = taskService.getTask(taskSummaries.get(0).getId());\n+    taskService.cancelTask(taskSummaries.get(0).getId());\n+    long numTasks = taskService.createTaskQuery().stateIn(TaskState.READY).count();\n+    assertThat(numTasks).isEqualTo(46);\n+    numTasks = taskService.createTaskQuery().stateIn(TaskState.CANCELLED).count();\n+    assertThat(numTasks).isEqualTo(6);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"admin\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd4c775504f5e3a173976af21226bad2b2f0e02e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2ODA2Ng==", "bodyText": "See comments on cancel task test.", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398668066", "createdAt": "2020-03-26T15:33:35Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/test/java/acceptance/task/TerminateTaskAccTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.exceptions.InvalidStateException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.Task;\n+import pro.taskana.task.api.models.TaskSummary;\n+\n+/** Acceptance tests for all claim and complete scenarios. */\n+@ExtendWith(JaasExtension.class)\n+class TerminateTaskAccTest extends AbstractAccTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd4c775504f5e3a173976af21226bad2b2f0e02e"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c65a6087e83b85e44118a754cf749a23cac5250", "author": {"user": {"login": "BerndBreier", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/4c65a6087e83b85e44118a754cf749a23cac5250", "committedDate": "2020-03-26T18:22:54Z", "message": "TSK-1160 - terminate/cancel task Holger's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNzI5NDIw", "url": "https://github.com/Taskana/taskana/pull/988#pullrequestreview-382729420", "createdAt": "2020-03-27T10:15:24Z", "commit": {"oid": "4c65a6087e83b85e44118a754cf749a23cac5250"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDoxNToyNFrOF8q26A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDoxODo1MlrOF8q-mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MTA2NA==", "bodyText": "Why don't we move this to the engine as well?", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r399161064", "createdAt": "2020-03-27T10:15:24Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/ServiceLevelHandler.java", "diffHunk": "@@ -48,15 +46,7 @@\n     this.taskanaEngine = taskanaEngine;\n     this.taskMapper = taskMapper;\n     this.attachmentMapper = attachmentMapper;\n-    DaysToWorkingDaysConverter.setGermanPublicHolidaysEnabled(\n-        taskanaEngine.getEngine().getConfiguration().isGermanPublicHolidaysEnabled());\n-    try {\n-      converter = DaysToWorkingDaysConverter.initialize();\n-    } catch (InvalidArgumentException e) {\n-      LOGGER.error(ERROR_CANNOT_INITIALIZE_DAYS_TO_WORKING_DAYS_CONVERTER);\n-      throw new SystemException(\n-          ERROR_CANNOT_INITIALIZE_DAYS_TO_WORKING_DAYS_CONVERTER, e.getCause());\n-    }\n+    this.converter = WorkingDaysToDaysConverter.initialize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c65a6087e83b85e44118a754cf749a23cac5250"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MTM3OA==", "bodyText": "You don't like that? Or you has overseen this ons?", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r399161378", "createdAt": "2020-03-27T10:15:58Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskState.java", "diffHunk": "@@ -4,5 +4,20 @@\n public enum TaskState {\n   READY,\n   CLAIMED,\n-  COMPLETED\n+  COMPLETED,\n+  CANCELLED,\n+  TERMINATED;\n+\n+  public boolean isInStates(TaskState... states) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1NDI1Ng=="}, "originalCommit": {"oid": "bd4c775504f5e3a173976af21226bad2b2f0e02e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MjAwOA==", "bodyText": "Sorry, haven't seen this one right away. As we don't reset the claimed timestamp, we shouldn't reset the owner as well.", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r399162008", "createdAt": "2020-03-27T10:17:10Z", "author": {"login": "holgerhagen"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskServiceImpl.java", "diffHunk": "@@ -951,6 +979,27 @@ private TaskImpl checkConcurrencyAndSetModified(TaskImpl newTaskImpl, TaskImpl o\n     return newTaskImpl;\n   }\n \n+  private TaskImpl terminateCancelCommonActions(String taskId, TaskState targetState)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidStateException {\n+    if (taskId == null || taskId.isEmpty()) {\n+      throw new TaskNotFoundException(taskId, String.format(TASK_WITH_ID_WAS_NOT_FOUND, taskId));\n+    }\n+    TaskImpl task = (TaskImpl) getTask(taskId);\n+    TaskState state = task.getState();\n+    if (state.isEndState()) {\n+      throw new InvalidStateException(String.format(TASK_WITH_ID_IS_ALREADY_IN_END_STATE, taskId));\n+    }\n+\n+    Instant now = Instant.now();\n+    task.setOwner(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c65a6087e83b85e44118a754cf749a23cac5250"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MzAzNA==", "bodyText": "But didn't you changed this to be the default? Why do we have to add it to all properties now?", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r399163034", "createdAt": "2020-03-27T10:18:52Z", "author": {"login": "holgerhagen"}, "path": "rest/taskana-rest-spring-example-common/src/test/resources/taskana.properties", "diffHunk": "@@ -12,3 +12,4 @@ taskana.jobs.batchSize=50\n taskana.jobs.cleanup.runEvery=P1D\n taskana.jobs.cleanup.firstRunAt=2018-07-25T08:00:00Z\n taskana.jobs.cleanup.minimumAge=P14D\n+taskana.german.holidays.enabled=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c65a6087e83b85e44118a754cf749a23cac5250"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62d58b32c908be3bf05b5068497e4be5a20002e6", "author": {"user": {"login": "BerndBreier", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/62d58b32c908be3bf05b5068497e4be5a20002e6", "committedDate": "2020-03-27T14:36:46Z", "message": "TSK-1160 - terminate/cancel task more comments from Holger"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNzU2MTM4", "url": "https://github.com/Taskana/taskana/pull/988#pullrequestreview-383756138", "createdAt": "2020-03-30T11:18:58Z", "commit": {"oid": "62d58b32c908be3bf05b5068497e4be5a20002e6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4521, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}