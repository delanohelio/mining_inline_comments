{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNjUyMjEx", "number": 1151, "title": "Tsk1308: Fixed ldap group query for access ids", "bodyText": "", "createdAt": "2020-06-26T15:34:50Z", "url": "https://github.com/Taskana/taskana/pull/1151", "merged": true, "mergeCommit": {"oid": "382b8366bf8ea79858bde36409a2292fb8859df7"}, "closed": true, "closedAt": "2020-07-01T09:01:59Z", "author": {"login": "holgerhagen"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvCRQhgH2gAyNDQwNjUyMjExOjk5NDJlZDNlMWZiNDQxNjNkOWQ4ZDM2ZmVjYTAyYWI4NjAyYTY0YTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwmU2mgFqTQ0MDY3NDczMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9942ed3e1fb44163d9d8d36feca02ab8602a64a9", "author": {"user": {"login": "holgerhagen", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/9942ed3e1fb44163d9d8d36feca02ab8602a64a9", "committedDate": "2020-06-26T12:19:11Z", "message": "TSK-1308: Fixed: return groups from LDAP, accessId is member of."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NjgxNTcy", "url": "https://github.com/Taskana/taskana/pull/1151#pullrequestreview-439681572", "createdAt": "2020-06-30T05:32:47Z", "commit": {"oid": "3429b7f6e7f48ca39a6d53a77ca8ef5caaa6e28c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNTozMjo0N1rOGqsU7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNTo1MDoxNVrOGqsqaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxOTYyOA==", "bodyText": "Why declare the type and then assign the value? This can be optimized (you don't have to do this.. I just noticed it)", "url": "https://github.com/Taskana/taskana/pull/1151#discussion_r447419628", "createdAt": "2020-06-30T05:32:47Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/AccessIdController.java", "diffHunk": "@@ -58,16 +66,20 @@ public AccessIdController(LdapClient ldapClient) {\n \n   @GetMapping(path = Mapping.URL_ACCESSID_GROUPS)\n   public ResponseEntity<List<AccessIdRepresentationModel>> getGroupsByAccessId(\n-      @RequestParam(\"access-id\") String accessId) throws InvalidArgumentException {\n+      @RequestParam(\"access-id\") String accessId)\n+      throws InvalidArgumentException, NotAuthorizedException {\n+\n     LOGGER.debug(\"Entry to getGroupsByAccessId(access-id= {})\", accessId);\n+\n+    taskanaEngine.checkRoleMembership(TaskanaRole.ADMIN, TaskanaRole.BUSINESS_ADMIN);\n+\n     if (!validateAccessId(accessId)) {\n       throw new InvalidArgumentException(\"The accessId is invalid\");\n     }\n-    List<AccessIdRepresentationModel> accessIdUsers;\n+    List<AccessIdRepresentationModel> accessIds;\n     ResponseEntity<List<AccessIdRepresentationModel>> response;\n-    accessIdUsers = ldapClient.searchUsersAndGroups(accessId);\n-    accessIdUsers.addAll(ldapClient.searchGroupsofUsersIsMember(accessId));\n-    response = ResponseEntity.ok(accessIdUsers);\n+    accessIds = ldapClient.searchGroupsAccessIdIsMemberOf(accessId);\n+    response = ResponseEntity.ok(accessIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3429b7f6e7f48ca39a6d53a77ca8ef5caaa6e28c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxOTczNw==", "bodyText": "Does this work recursively?", "url": "https://github.com/Taskana/taskana/pull/1151#discussion_r447419737", "createdAt": "2020-06-30T05:33:11Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/ldap/LdapClient.java", "diffHunk": "@@ -187,15 +188,15 @@ public AccessIdRepresentationModel searchGroupByDn(final String name) {\n     return accessId;\n   }\n \n-  public List<AccessIdRepresentationModel> searchGroupsofUsersIsMember(final String name)\n+  public List<AccessIdRepresentationModel> searchGroupsAccessIdIsMemberOf(final String name)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3429b7f6e7f48ca39a6d53a77ca8ef5caaa6e28c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyMDA4Mg==", "bodyText": "What's the reason for the like? Are we not searching strictly according to the accessId name?", "url": "https://github.com/Taskana/taskana/pull/1151#discussion_r447420082", "createdAt": "2020-06-30T05:34:20Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/ldap/LdapClient.java", "diffHunk": "@@ -187,15 +188,15 @@ public AccessIdRepresentationModel searchGroupByDn(final String name) {\n     return accessId;\n   }\n \n-  public List<AccessIdRepresentationModel> searchGroupsofUsersIsMember(final String name)\n+  public List<AccessIdRepresentationModel> searchGroupsAccessIdIsMemberOf(final String name)\n       throws InvalidArgumentException {\n-    LOGGER.debug(\"entry to searchGroupsofUsersIsMember(name = {}).\", name);\n+    LOGGER.debug(\"entry to searchGroupsAccessIdIsMemberOf(name = {}).\", name);\n     isInitOrFail();\n     testMinSearchForLength(name);\n \n     final AndFilter andFilter = new AndFilter();\n-    andFilter.and(new WhitespaceWildcardsFilter(getGroupNameAttribute(), \"\"));\n-    andFilter.and(new EqualsFilter(getGroupsOfUser(), name));\n+    andFilter.and(new EqualsFilter(getGroupSearchFilterName(), getGroupSearchFilterValue()));\n+    andFilter.and(new LikeFilter(getGroupsOfUser(), \"*\" + name + \"*\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3429b7f6e7f48ca39a6d53a77ca8ef5caaa6e28c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyMTYxNw==", "bodyText": "What's with the user search base?\nAnd what about our other X configs:\n\nrest/taskana-rest-spring-example-boot/src/main/resources/application-postgres.properties\nrest/taskana-rest-spring-example-boot/src/main/resources/application.properties\nrest/taskana-rest-spring-example-common/src/test/resources/application.properties\nrest/taskana-rest-spring-example-wildfly/src/main/resources/application-postgres.properties\nrest/taskana-rest-spring-example-wildfly/src/main/resources/application.properties\nrest/taskana-rest-spring-example-wildfly/src/test/resources/application.properties\nrest/taskana-rest-spring/src/test/resources/application.properties\nADAPTER: taskana-adapter-camunda-wildfly-example/src/main/resources/application.properties", "url": "https://github.com/Taskana/taskana/pull/1151#discussion_r447421617", "createdAt": "2020-06-30T05:39:26Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/resources/application.properties", "diffHunk": "@@ -25,13 +25,13 @@ taskana.ldap.userSearchFilterValue=person\n taskana.ldap.userFirstnameAttribute=givenName\n taskana.ldap.userLastnameAttribute=sn\n taskana.ldap.userIdAttribute=uid\n-taskana.ldap.groupSearchBase=cn=groups\n+taskana.ldap.groupSearchBase=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3429b7f6e7f48ca39a6d53a77ca8ef5caaa6e28c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyMjI0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                List<AccessIdRepresentationModel> body = response.getBody();\n          \n          \n            \n                assertThat(body).isNotNull();\n          \n          \n            \n                assertThat(body)\n          \n          \n            \n                assertThat(response.getBody()).isNotNull()", "url": "https://github.com/Taskana/taskana/pull/1151#discussion_r447422240", "createdAt": "2020-06-30T05:41:21Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/common/rest/AccessIdControllerIntTest.java", "diffHunk": "@@ -110,6 +111,79 @@ void testBadRequestWhenSearchForIsTooShort() {\n         .isEqualTo(HttpStatus.BAD_REQUEST);\n   }\n \n+  @Test\n+  void should_returnAccessIdsOfGroupsTheAccessIdIsMemberOf_ifAccessIdOfUserIsGiven() {\n+    ResponseEntity<List<AccessIdRepresentationModel>> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_ACCESSID_GROUPS) + \"?access-id=teamlead-2\",\n+            HttpMethod.GET,\n+            restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(AccessIdListResource.class));\n+\n+    List<AccessIdRepresentationModel> body = response.getBody();\n+    assertThat(body).isNotNull();\n+    assertThat(body)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3429b7f6e7f48ca39a6d53a77ca8ef5caaa6e28c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyMjQxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                List<AccessIdRepresentationModel> body = response.getBody();\n          \n          \n            \n                assertThat(body).isNotNull();\n          \n          \n            \n                assertThat(body)\n          \n          \n            \n                assertThat(response.getBody()).isNotNull()", "url": "https://github.com/Taskana/taskana/pull/1151#discussion_r447422418", "createdAt": "2020-06-30T05:41:50Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/common/rest/AccessIdControllerIntTest.java", "diffHunk": "@@ -110,6 +111,79 @@ void testBadRequestWhenSearchForIsTooShort() {\n         .isEqualTo(HttpStatus.BAD_REQUEST);\n   }\n \n+  @Test\n+  void should_returnAccessIdsOfGroupsTheAccessIdIsMemberOf_ifAccessIdOfUserIsGiven() {\n+    ResponseEntity<List<AccessIdRepresentationModel>> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_ACCESSID_GROUPS) + \"?access-id=teamlead-2\",\n+            HttpMethod.GET,\n+            restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(AccessIdListResource.class));\n+\n+    List<AccessIdRepresentationModel> body = response.getBody();\n+    assertThat(body).isNotNull();\n+    assertThat(body)\n+        .extracting(AccessIdRepresentationModel::getAccessId)\n+        .usingElementComparator(String.CASE_INSENSITIVE_ORDER)\n+        .containsExactlyInAnyOrder(\n+            \"cn=ksc-teamleads,cn=groups,OU=Test,O=TASKANA\",\n+            \"cn=business-admins,cn=groups,OU=Test,O=TASKANA\",\n+            \"cn=monitor-users,cn=groups,OU=Test,O=TASKANA\",\n+            \"cn=Organisationseinheit KSC 2,\"\n+                + \"cn=Organisationseinheit KSC,cn=organisation,OU=Test,O=TASKANA\");\n+  }\n+\n+  @Test\n+  void should_returnAccessIdsOfGroupsTheAccessIdIsMemberOf_ifAccessIdOfGroupIsGiven() {\n+    ResponseEntity<List<AccessIdRepresentationModel>> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_ACCESSID_GROUPS)\n+                + \"?access-id=cn=Organisationseinheit KSC 1,\"\n+                + \"cn=Organisationseinheit KSC,cn=organisation,OU=Test,O=TASKANA\",\n+            HttpMethod.GET,\n+            restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(AccessIdListResource.class));\n+\n+    List<AccessIdRepresentationModel> body = response.getBody();\n+    assertThat(body).isNotNull();\n+    assertThat(body)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3429b7f6e7f48ca39a6d53a77ca8ef5caaa6e28c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyNDg4NA==", "bodyText": "whats the reason for the changes in this file? I don't see a matching change", "url": "https://github.com/Taskana/taskana/pull/1151#discussion_r447424884", "createdAt": "2020-06-30T05:49:38Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java", "diffHunk": "@@ -476,8 +476,8 @@ void testGetLastPageSortedByDueWithHiddenTasksRemovedFromResult() {\n     assertThat(response.getBody()).isNotNull();\n     assertThat((response.getBody()).getContent()).hasSize(5);\n     assertThat(response.getBody().getRequiredLink(IanaLinkRelations.LAST).getHref())\n-        .contains(\"page=5\");\n-    assertThat(\"TKI:000000000000000000000000000000000023\")\n+        .contains(\"page=10\");\n+    assertThat(\"TKI:000000000000000000000000000000000005\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3429b7f6e7f48ca39a6d53a77ca8ef5caaa6e28c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyNTEyOQ==", "bodyText": "what's the reason for this change?", "url": "https://github.com/Taskana/taskana/pull/1151#discussion_r447425129", "createdAt": "2020-06-30T05:50:15Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/workbasket/rest/WorkbasketControllerIntTest.java", "diffHunk": "@@ -82,7 +82,7 @@ void testGetAllWorkbasketsBusinessAdminHasOpenPermission() {\n             WORKBASKET_SUMMARY_PAGE_MODEL_TYPE);\n     assertThat(response.getBody()).isNotNull();\n     assertThat(response.getBody().getRequiredLink(IanaLinkRelations.SELF)).isNotNull();\n-    assertThat(response.getBody().getContent()).hasSize(3);\n+    assertThat(response.getBody().getContent()).hasSize(6);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3429b7f6e7f48ca39a6d53a77ca8ef5caaa6e28c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "432615af11182aac45aded11f8a58cdd88f370a1", "author": {"user": {"login": "holgerhagen", "name": null}}, "url": "https://github.com/Taskana/taskana/commit/432615af11182aac45aded11f8a58cdd88f370a1", "committedDate": "2020-07-01T07:51:32Z", "message": "TSK-1308: User must be in role ADMIN, BUSINESS_ADMIN to use AccessIdSrv."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNjc0NDY1", "url": "https://github.com/Taskana/taskana/pull/1151#pullrequestreview-440674465", "createdAt": "2020-07-01T08:53:15Z", "commit": {"oid": "432615af11182aac45aded11f8a58cdd88f370a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1MzoxNVrOGrc_-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1MzoxNVrOGrc_-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzA4Mw==", "bodyText": "name = accessId? Aber egal jetzt :D", "url": "https://github.com/Taskana/taskana/pull/1151#discussion_r448217083", "createdAt": "2020-07-01T08:53:15Z", "author": {"login": "mustaphazorgati"}, "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/ldap/LdapClient.java", "diffHunk": "@@ -187,15 +188,15 @@ public AccessIdRepresentationModel searchGroupByDn(final String name) {\n     return accessId;\n   }\n \n-  public List<AccessIdRepresentationModel> searchGroupsofUsersIsMember(final String name)\n+  public List<AccessIdRepresentationModel> searchGroupsAccessIdIsMemberOf(final String accessId)\n       throws InvalidArgumentException {\n-    LOGGER.debug(\"entry to searchGroupsofUsersIsMember(name = {}).\", name);\n+    LOGGER.debug(\"entry to searchGroupsAccessIdIsMemberOf(name = {}).\", accessId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "432615af11182aac45aded11f8a58cdd88f370a1"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNjc0NzMw", "url": "https://github.com/Taskana/taskana/pull/1151#pullrequestreview-440674730", "createdAt": "2020-07-01T08:53:37Z", "commit": {"oid": "432615af11182aac45aded11f8a58cdd88f370a1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4507, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}