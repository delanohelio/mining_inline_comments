{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMDI2NDY3", "number": 1163, "title": "TSK-1318: replaced all declared Exceptions with Exception.class in all our test classes", "bodyText": "\u2026l our test classes\nhttps://sonarcloud.io/dashboard?branch=task%2F1318&id=mustaphazorgati_taskana", "createdAt": "2020-07-01T22:25:58Z", "url": "https://github.com/Taskana/taskana/pull/1163", "merged": true, "mergeCommit": {"oid": "ec483ab21cbe35f0e0ec608b109c47a3438abb48"}, "closed": true, "closedAt": "2020-07-06T16:02:40Z", "author": {"login": "mustaphazorgati"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxAcGkAFqTQ0MTUyMTAyNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcySDAMAFqTQ0MzEyMzM1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNTIxMDI3", "url": "https://github.com/Taskana/taskana/pull/1163#pullrequestreview-441521027", "createdAt": "2020-07-02T09:46:02Z", "commit": {"oid": "e5da887f190e68e18e34686030eb55204c483dbe"}, "state": "DISMISSED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOTo0NjowMlrOGsFmdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0Njo0MlrOGsQLzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4MjI5NQ==", "bodyText": "Can be simplified to:\nfinal String propertiesFileName = System.getProperty(\"user.home\") + \"/taskanaUnitTest.properties\";\nOr instantiate as final var, and re-use it at line 80.", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r448882295", "createdAt": "2020-07-02T09:46:02Z", "author": {"login": "nkolytschew"}, "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/AbstractAccTest.java", "diffHunk": "@@ -24,33 +23,26 @@\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(AbstractAccTest.class);\n   private static final int POOL_TIME_TO_WAIT = 50;\n-\n+  private static final DataSource DATA_SOURCE;\n   private static SimpleHistoryServiceImpl historyService;\n-\n-  private static DataSource dataSource;\n   private static String schemaName = null;\n \n   static {\n-    String userHomeDirectroy = System.getProperty(\"user.home\");\n-    String propertiesFileName = userHomeDirectroy + \"/taskanaUnitTest.properties\";\n+    String userHomeDirectory = System.getProperty(\"user.home\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5da887f190e68e18e34686030eb55204c483dbe"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1Njg3NA==", "bodyText": "Advantage of Junit5 and package-private as default is, that you don't have to write 'public' anymore... you benefit from writing less :-)\nSo with an IDE you can keep the auto-generated \"public\" modifier.\nChanging every public method to \"default\", just increases the LoC to be checked for the PR.\nI would recommend, changing only the modifier of classes/methods you actually have worked on, to keep PR simple :-)", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r448956874", "createdAt": "2020-07-02T12:13:24Z", "author": {"login": "nkolytschew"}, "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/query/QueryHistoryAccTest.java", "diffHunk": "@@ -16,14 +16,14 @@\n import pro.taskana.spi.history.api.events.TaskanaHistoryEvent;\n \n /** Test for History queries. */\n-public class QueryHistoryAccTest extends AbstractAccTest {\n+class QueryHistoryAccTest extends AbstractAccTest {\n \n   public QueryHistoryAccTest() {\n     super();\n   }\n \n   @Test\n-  public void should_ConfirmEquality_When_UsingListValuesAscendingAndDescending() {\n+  void should_ConfirmEquality_When_UsingListValuesAscendingAndDescending() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5da887f190e68e18e34686030eb55204c483dbe"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NzM2Mw==", "bodyText": "In test-cases it's perfectly fine to use Setter-Injection.\nAlso you don't have to use the autowired annotation explicitly.", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r448977363", "createdAt": "2020-07-02T12:50:52Z", "author": {"login": "nkolytschew"}, "path": "history/taskana-simplehistory-rest-spring/src/test/java/pro/taskana/TaskHistoryEventResourceAssemblerTest.java", "diffHunk": "@@ -20,12 +20,12 @@\n @SpringBootTest(\n     classes = {TaskHistoryRestConfiguration.class},\n     webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n-public class TaskHistoryEventResourceAssemblerTest {\n+class TaskHistoryEventResourceAssemblerTest {\n \n   private final TaskHistoryEventResourceAssembler taskHistoryEventResourceAssembler;\n \n   @Autowired", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5da887f190e68e18e34686030eb55204c483dbe"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MDI0NA==", "bodyText": "Boilerplate, IFF not actually used for a HashSet/Map/List or object comparison.", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r448980244", "createdAt": "2020-07-02T12:55:27Z", "author": {"login": "nkolytschew"}, "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/models/MinimalTaskSummary.java", "diffHunk": "@@ -101,6 +102,42 @@ public void setCallbackState(CallbackState callbackState) {\n     this.callbackState = callbackState;\n   }\n \n+  @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5da887f190e68e18e34686030eb55204c483dbe"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5MjkyMQ==", "bodyText": "You can also add the \"final\" modifier here.", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r448992921", "createdAt": "2020-07-02T13:15:12Z", "author": {"login": "nkolytschew"}, "path": "lib/taskana-core/src/test/java/acceptance/AbstractAccTest.java", "diffHunk": "@@ -94,7 +92,7 @@ protected Attachment createAttachment(\n             .asSummary());\n     attachment.setObjectReference(objRef);\n     attachment.setChannel(channel);\n-    Instant receivedTimestamp = null;\n+    Instant receivedTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5da887f190e68e18e34686030eb55204c483dbe"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1Mjk4Mw==", "bodyText": "Do you want to log test-logs?", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r449052983", "createdAt": "2020-07-02T14:42:42Z", "author": {"login": "nkolytschew"}, "path": "lib/taskana-core/src/test/java/acceptance/report/ProvideTaskStatusReportAccTest.java", "diffHunk": "@@ -35,29 +33,42 @@\n   private static final Logger LOGGER =\n       LoggerFactory.getLogger(ProvideWorkbasketReportAccTest.class);\n \n+  MonitorService monitorService = taskanaEngine.getMonitorService();\n+\n   @BeforeEach\n-  public void reset() throws Exception {\n+  void reset() throws Exception {\n     resetDb();\n   }\n \n   @Test\n-  void testRoleCheck() {\n-    MonitorService monitorService = taskanaEngine.getMonitorService();\n-    ThrowingCallable call =\n-        () -> {\n-          monitorService.createTaskStatusReportBuilder().buildReport();\n-        };\n-    assertThatThrownBy(call).isInstanceOf(NotAuthorizedException.class);\n+  void should_ThrowException_IfUserIsNotAuthorized() {\n+    assertThatThrownBy(() -> monitorService.createTaskStatusReportBuilder().buildReport())\n+        .isInstanceOf(NotAuthorizedException.class);\n+  }\n+\n+  @WithAccessId(user = \"unknown\")\n+  @WithAccessId(user = \"user-1-1\")\n+  @WithAccessId(user = \"businessadmin\")\n+  @WithAccessId(user = \"taskadmin\")\n+  @TestTemplate\n+  void should_ThrowException_IfUserIsNotAdminOrMonitor() {\n+    assertThatThrownBy(() -> monitorService.createTaskStatusReportBuilder().buildReport())\n+        .isInstanceOf(NotAuthorizedException.class);\n+  }\n+\n+  @WithAccessId(user = \"admin\")\n+  @WithAccessId(user = \"monitor\")\n+  @TestTemplate\n+  void should_BuildReport_IfUserIsAdminOrMonitor() {\n+    assertThatCode(() -> monitorService.createTaskStatusReportBuilder().buildReport())\n+        .doesNotThrowAnyException();\n   }\n \n   @WithAccessId(user = \"monitor\")\n   @Test\n-  void testCompleteTaskStatusReport() throws NotAuthorizedException, InvalidArgumentException {\n-    // given\n-    MonitorService monitorService = taskanaEngine.getMonitorService();\n-    // when\n+  void testCompleteTaskStatusReport() throws Exception {\n     TaskStatusReport report = monitorService.createTaskStatusReportBuilder().buildReport();\n-    // then\n+\n     if (LOGGER.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5da887f190e68e18e34686030eb55204c483dbe"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1NTY5NA==", "bodyText": "I think it would be better if you stick to one style... Either\nassertThatThrownBy(() -> TASK_SERVICE.claim(\"TKI:000000000000000000000000000000000035\")).isInstanceOf(InvalidOwnerException.class);\nor\nThrowingCallable call =() -> TASK_SERVICE.forceCancelClaim(\"TKI:000000000000000000000000000000000036\"); assertThatThrownBy(call).isInstanceOf(InvalidStateException.class);", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r449055694", "createdAt": "2020-07-02T14:46:42Z", "author": {"login": "nkolytschew"}, "path": "lib/taskana-core/src/test/java/acceptance/task/CompleteTaskAccTest.java", "diffHunk": "@@ -229,49 +197,35 @@ void testForceClaimTaskFromOtherUser()\n   @WithAccessId(user = \"user-1-1\")\n   @Test\n   void testClaimTaskNotExisting() {\n-    ThrowingCallable call =\n-        () -> {\n-          TASK_SERVICE.claim(\"NOT_EXISTING\");\n-        };\n-    assertThatThrownBy(call).isInstanceOf(TaskNotFoundException.class);\n+    assertThatThrownBy(() -> TASK_SERVICE.claim(\"NOT_EXISTING\"))\n+        .isInstanceOf(TaskNotFoundException.class);\n   }\n \n   @WithAccessId(user = \"user-1-2\")\n   @Test\n   void testClaimTaskWithInvalidState() {\n-    ThrowingCallable call =\n-        () -> {\n-          TASK_SERVICE.forceClaim(\"TKI:000000000000000000000000000000000036\");\n-        };\n-    assertThatThrownBy(call).isInstanceOf(InvalidStateException.class);\n+    assertThatThrownBy(() -> TASK_SERVICE.forceClaim(\"TKI:000000000000000000000000000000000036\"))\n+        .isInstanceOf(InvalidStateException.class);\n   }\n \n   @WithAccessId(user = \"user-1-2\")\n   @Test\n   void testClaimTaskWithInvalidOwner() {\n-    ThrowingCallable call =\n-        () -> {\n-          TASK_SERVICE.claim(\"TKI:000000000000000000000000000000000035\");\n-        };\n-    assertThatThrownBy(call).isInstanceOf(InvalidOwnerException.class);\n+    assertThatThrownBy(() -> TASK_SERVICE.claim(\"TKI:000000000000000000000000000000000035\"))\n+        .isInstanceOf(InvalidOwnerException.class);\n   }\n \n   @WithAccessId(user = \"user-1-2\")\n   @Test\n   void testCancelClaimForcedWithInvalidState() {\n     ThrowingCallable call =\n-        () -> {\n-          TASK_SERVICE.forceCancelClaim(\"TKI:000000000000000000000000000000000036\");\n-        };\n+        () -> TASK_SERVICE.forceCancelClaim(\"TKI:000000000000000000000000000000000036\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5da887f190e68e18e34686030eb55204c483dbe"}, "originalPosition": 197}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a699758daa2fd31fe408a8b85e880f5af301b886", "author": {"user": {"login": "mustaphazorgati", "name": "Mustapha Zorgati"}}, "url": "https://github.com/Taskana/taskana/commit/a699758daa2fd31fe408a8b85e880f5af301b886", "committedDate": "2020-07-02T22:40:16Z", "message": "TSK-1318: replaced all declared Exceptions with Exception.class in all our test classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMTIwMDkw", "url": "https://github.com/Taskana/taskana/pull/1163#pullrequestreview-443120090", "createdAt": "2020-07-06T14:20:16Z", "commit": {"oid": "a699758daa2fd31fe408a8b85e880f5af301b886"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMTIzMzUz", "url": "https://github.com/Taskana/taskana/pull/1163#pullrequestreview-443123353", "createdAt": "2020-07-06T14:23:52Z", "commit": {"oid": "a699758daa2fd31fe408a8b85e880f5af301b886"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4443, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}