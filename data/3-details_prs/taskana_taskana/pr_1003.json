{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NzA2NjI3", "number": 1003, "title": "TSK-1170 Ngxs store", "bodyText": "", "createdAt": "2020-04-02T17:10:57Z", "url": "https://github.com/Taskana/taskana/pull/1003", "merged": true, "mergeCommit": {"oid": "9b2e6104bd3734d7287c8c18bb7a33d636d4f4fc"}, "closed": true, "closedAt": "2020-04-09T15:34:03Z", "author": {"login": "sofie29"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUSOJvgFqTM4NjY5NzY4MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcV-PDhgFqTM5MDg5OTc2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2Njk3Njgx", "url": "https://github.com/Taskana/taskana/pull/1003#pullrequestreview-386697681", "createdAt": "2020-04-02T18:40:26Z", "commit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo0MDoyNlrOF_4kwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwOTozNzoyMFrOGAwk8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzMTUyMg==", "bodyText": "no store mock? why's that?", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r402531522", "createdAt": "2020-04-02T18:40:26Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -18,16 +19,16 @@ describe('AccessItemsManagementComponent', () => {\n   beforeEach(done => {\n     const configure = (testBed: TestBed) => {\n       testBed.configureTestingModule({\n-        imports: [],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzMjAxNQ==", "bodyText": "remove dangling comma please", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r402532015", "createdAt": "2020-04-02T18:41:19Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/administration.module.ts", "diffHunk": "@@ -39,7 +39,7 @@ const MODULES = [\n   SharedModule,\n   AdministrationRoutingModule,\n   TypeaheadModule,\n-  InfiniteScrollModule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzMjQyMw==", "bodyText": "Can we reduce this file diff to the actual diff? I think my IDE messed the formatting up.", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r402532423", "createdAt": "2020-04-02T18:41:57Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/classification/details/classification-details.component.html", "diffHunk": "@@ -1,28 +1,33 @@\n <div class=\"container-scrollable\">\n-  <taskana-spinner [isRunning]=\"requestInProgress\" class=\"floating\" (spinnerIsRunning)=\"spinnerRunning($event)\"></taskana-spinner>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzMjc0MA==", "bodyText": "One idea is just to revert the file and then reimplement the changes (should only be a couple lines.) We can do this together so that i can show you how.", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r402532740", "createdAt": "2020-04-02T18:42:35Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/classification/details/classification-details.component.html", "diffHunk": "@@ -1,28 +1,33 @@\n <div class=\"container-scrollable\">\n-  <taskana-spinner [isRunning]=\"requestInProgress\" class=\"floating\" (spinnerIsRunning)=\"spinnerRunning($event)\"></taskana-spinner>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzMjQyMw=="}, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzMzQxMg==", "bodyText": "can you please extract this variable outside of the beforeEach() call?\nReason: TestBed configuration should not be generated for every test.", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r402533412", "createdAt": "2020-04-02T18:43:45Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -18,16 +19,16 @@ describe('AccessItemsManagementComponent', () => {\n   beforeEach(done => {\n     const configure = (testBed: TestBed) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzNDg0OA==", "bodyText": "this still necessary when we have the categories$ observable underneath?", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r402534848", "createdAt": "2020-04-02T18:46:13Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/classification/details/classification-details.component.ts", "diffHunk": "@@ -38,21 +40,18 @@ export class ClassificationDetailsComponent implements OnInit, OnDestroy {\n   classification: ClassificationDefinition;\n   classificationClone: ClassificationDefinition;\n   showDetail = false;\n-  classificationTypes: Array<string> = [];\n   badgeMessage = '';\n   requestInProgress = false;\n   categories: Array<string> = [];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzNjY1Ng==", "bodyText": "please refactor this so that the categories variable is not used anymore.", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r402536656", "createdAt": "2020-04-02T18:49:18Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/classification/details/classification-details.component.ts", "diffHunk": "@@ -135,7 +130,9 @@ export class ClassificationDetailsComponent implements OnInit, OnDestroy {\n     });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzODk0OQ==", "bodyText": "maybe we can get rid of this subscription", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r402538949", "createdAt": "2020-04-02T18:53:01Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/classification/details/classification-details.component.ts", "diffHunk": "@@ -135,7 +130,9 @@ export class ClassificationDetailsComponent implements OnInit, OnDestroy {\n     });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzNjY1Ng=="}, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzOTExNw==", "bodyText": "Did you create a ticket for the automatic unsubsciption?", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r402539117", "createdAt": "2020-04-02T18:53:19Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/classification/details/classification-details.component.ts", "diffHunk": "@@ -166,6 +163,70 @@ export class ClassificationDetailsComponent implements OnInit, OnDestroy {\n     });\n   }\n \n+  onClear() {\n+    this.formsValidatorService.formSubmitAttempt = false;\n+    // new Key: ALERT_TYPES.INFO_ALERT\n+    this.alertService.triggerAlert(new AlertModel(AlertType.INFO, 'Reset edited fields'));\n+    this.classification = { ...this.classificationClone };\n+  }\n+\n+  selectCategory(category: string) {\n+    this.classification.category = category;\n+  }\n+\n+  getCategoryIcon(category: string): Observable<Pair> {\n+    return this.categoryIcons$.pipe(map(\n+      iconMap => (iconMap[category]\n+        ? new Pair(iconMap[category], category)\n+        : new Pair(iconMap.missing, 'Category does not match with the configuration'))\n+    ));\n+  }\n+\n+  spinnerRunning(value) {\n+    this.spinnerIsRunning = value;\n+  }\n+\n+  validChanged(): void {\n+    this.classification.isValidInDomain = !this.classification.isValidInDomain;\n+  }\n+\n+  masterDomainSelected(): boolean {\n+    return this.domainService.getSelectedDomainValue() === '';\n+  }\n+\n+  ngOnDestroy(): void {\n+    if (this.masterAndDetailSubscription) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzOTg2Ng==", "bodyText": "why no store mock?", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r402539866", "createdAt": "2020-04-02T18:54:32Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/classification/master/list/classification-list.component.spec.ts", "diffHunk": "@@ -37,24 +37,21 @@ const routes: Routes = [\n   { path: ':id', component: DummyDetailComponent }\n ];\n \n-\n describe('ClassificationListComponent', () => {\n   let component: ClassificationListComponent;\n   let fixture: ComponentFixture<ClassificationListComponent>;\n   const treeNodes: Array<TreeNodeModel> = new Array(new TreeNodeModel());\n-  const classificationTypes: Array<string> = new Array<string>('type1', 'type2');\n   let classificationsService;\n-  let classificationCategoriesService;\n \n   beforeEach(done => {\n     const configure = (testBed: TestBed) => {\n       testBed.configureTestingModule({\n         declarations: [ClassificationListComponent, ImportExportComponent, ClassificationTypesSelectorComponent,\n           DummyDetailComponent],\n-        imports: [HttpClientModule, RouterTestingModule.withRoutes(routes), FormsModule, AngularSvgIconModule],\n+        imports: [HttpClientModule, RouterTestingModule.withRoutes(routes), FormsModule, AngularSvgIconModule, NgxsModule.forRoot()],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NzQ2Nw==", "bodyText": "why did you change this line?", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r403447467", "createdAt": "2020-04-04T09:19:00Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/workbasket/details/information/workbasket-information.component.spec.ts", "diffHunk": "@@ -113,7 +123,7 @@ describe('WorkbasketInformationComponent', () => {\n     expect(component.workbasket.workbasketId).toEqual(component.workbasketClone.workbasketId);\n   });\n \n-  it('should reset requestInProgress after saving request is done', () => {\n+  it('should reset requestInProgress after saving request is done', async(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NzY5OQ==", "bodyText": "no store mock?", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r403447699", "createdAt": "2020-04-04T09:21:48Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/classification-types-selector/classification-types-selector.component.spec.ts", "diffHunk": "@@ -8,9 +9,10 @@ describe('ClassificationTypesSelectorComponent', () => {\n \n   beforeEach(async(() => {\n     TestBed.configureTestingModule({\n-      declarations: [ClassificationTypesSelectorComponent]\n-    })\n-      .compileComponents();\n+      imports: [NgxsModule.forRoot()],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0ODA0MA==", "bodyText": "do we still need output this?", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r403448040", "createdAt": "2020-04-04T09:25:49Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/classification-types-selector/classification-types-selector.component.ts", "diffHunk": "@@ -1,28 +1,30 @@\n-import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n+import { Component, OnInit, Output, EventEmitter } from '@angular/core';\n+import { Observable } from 'rxjs';\n+import { Store, Select } from '@ngxs/store';\n+import { ClassificationState, SetSelectedClassificationType } from '../../store/Classification-state';\n+\n \n @Component({\n   selector: 'taskana-classification-types-selector',\n   templateUrl: './classification-types-selector.component.html',\n   styleUrls: ['./classification-types-selector.component.scss']\n })\n export class ClassificationTypesSelectorComponent implements OnInit {\n-  @Input()\n-  classificationTypes: Array<string> = [];\n-\n-  @Input()\n-  classificationTypeSelected: string;\n-\n-  @Output()\n-  classificationTypeSelectedChange = new EventEmitter<string>();\n-\n   @Output()\n   classificationTypeChanged = new EventEmitter<string>();\n \n-  ngOnInit() {\n+  @Select(ClassificationState.selectedClassificationType) classificationTypeSelected$: Observable<string>;\n+  @Select(ClassificationState.classificationTypes) classificationTypes$: Observable<string[]>;\n+\n+  constructor(private store: Store) {}\n+\n+  ngOnInit(): void {\n   }\n \n-  select(value: string) {\n-    this.classificationTypeSelected = value;\n+  select(value: string): void {\n+    this.store.dispatch(new SetSelectedClassificationType(value));\n     this.classificationTypeChanged.emit(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0ODIzNg==", "bodyText": "I am missing a test case with 2 languages.", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r403448236", "createdAt": "2020-04-04T09:27:51Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/services/classifications/classification-categories.service.spec.ts", "diffHunk": "@@ -0,0 +1,41 @@\n+import { TestBed, async } from '@angular/core/testing';\n+import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n+import { Customisation } from 'app/models/customisation';\n+import { ClassificationCategoriesService } from './classification-categories.service';\n+\n+describe('ClassificationCategoriesService', () => {\n+  let categoryService: ClassificationCategoriesService;\n+  let httpMock: HttpTestingController;\n+\n+  beforeEach(() => {\n+    TestBed.configureTestingModule({\n+      imports: [HttpClientTestingModule],\n+      providers: [ClassificationCategoriesService]\n+    });\n+\n+    categoryService = TestBed.get(ClassificationCategoriesService);\n+    httpMock = TestBed.get(HttpTestingController);\n+  });\n+\n+  it('should return customisation with inserted missing icon', async(() => {\n+    const expectedCustomisation: Customisation = { EN:\n+      { classifications:\n+        { categories:\n+          { missing: 'assets/icons/categories/missing-icon.svg' } } } };\n+\n+    const initialCustomisations: Customisation[] = [\n+      { EN: { classifications: { categories: {} } } },\n+      { EN: { classifications: {} } },\n+      { EN: {} }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0ODI1Nw==", "bodyText": "can we make this a constant in the service and just import that constant here?", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r403448257", "createdAt": "2020-04-04T09:28:21Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/services/classifications/classification-categories.service.spec.ts", "diffHunk": "@@ -0,0 +1,41 @@\n+import { TestBed, async } from '@angular/core/testing';\n+import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n+import { Customisation } from 'app/models/customisation';\n+import { ClassificationCategoriesService } from './classification-categories.service';\n+\n+describe('ClassificationCategoriesService', () => {\n+  let categoryService: ClassificationCategoriesService;\n+  let httpMock: HttpTestingController;\n+\n+  beforeEach(() => {\n+    TestBed.configureTestingModule({\n+      imports: [HttpClientTestingModule],\n+      providers: [ClassificationCategoriesService]\n+    });\n+\n+    categoryService = TestBed.get(ClassificationCategoriesService);\n+    httpMock = TestBed.get(HttpTestingController);\n+  });\n+\n+  it('should return customisation with inserted missing icon', async(() => {\n+    const expectedCustomisation: Customisation = { EN:\n+      { classifications:\n+        { categories:\n+          { missing: 'assets/icons/categories/missing-icon.svg' } } } };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0ODM0Ng==", "bodyText": "This name is not correct anymore. We should rename it and think about a way to restructure our services", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r403448346", "createdAt": "2020-04-04T09:29:01Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/services/classifications/classification-categories.service.ts", "diffHunk": "@@ -2,87 +2,36 @@ import { HttpClient } from '@angular/common/http';\n \n import { Injectable } from '@angular/core';\n import { environment } from 'environments/environment';\n-import { Observable, ReplaySubject, BehaviorSubject } from 'rxjs';\n-import { CustomFieldsService } from 'app/services/custom-fields/custom-fields.service';\n-import { Pair } from 'app/models/pair';\n+import { Observable } from 'rxjs';\n+import { map } from 'rxjs/operators';\n+import { Customisation } from '../../../models/customisation';\n+\n+const customisationUrl = 'environments/data-sources/taskana-customization.json';\n+\n+export interface CategoriesResponse { [key: string]: string[] }\n \n @Injectable()\n export class ClassificationCategoriesService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0ODQwMw==", "bodyText": "Please use https://github.com/jonschlinkert/set-value", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r403448403", "createdAt": "2020-04-04T09:29:35Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/services/classifications/classification-categories.service.ts", "diffHunk": "@@ -2,87 +2,36 @@ import { HttpClient } from '@angular/common/http';\n \n import { Injectable } from '@angular/core';\n import { environment } from 'environments/environment';\n-import { Observable, ReplaySubject, BehaviorSubject } from 'rxjs';\n-import { CustomFieldsService } from 'app/services/custom-fields/custom-fields.service';\n-import { Pair } from 'app/models/pair';\n+import { Observable } from 'rxjs';\n+import { map } from 'rxjs/operators';\n+import { Customisation } from '../../../models/customisation';\n+\n+const customisationUrl = 'environments/data-sources/taskana-customization.json';\n+\n+export interface CategoriesResponse { [key: string]: string[] }\n \n @Injectable()\n export class ClassificationCategoriesService {\n   private mainUrl = environment.taskanaRestUrl;\n+  private urlCategoriesByType = `${this.mainUrl}/v1/classifications-by-type`;\n \n-  // categories\n-  private urlCategories = `${this.mainUrl}/v1/classification-categories`;\n-  private param = '/?type=';\n-  private dataObsCategories$ = new ReplaySubject<Array<string>>(1);\n-  private categoriesObject = {};\n-  private missingIcon = 'assets/icons/categories/missing-icon.svg';\n-  private type = 'UNKNOW';\n-\n-  // type\n-  private classificationTypeSelectedValue = 'TASK';\n-  private urlType = `${this.mainUrl}/v1/classification-types`;\n-  private classificationTypeSelected = new BehaviorSubject<string>(this.classificationTypeSelectedValue);\n-  private dataObsType$ = new ReplaySubject<Array<string>>(1);\n-\n-  constructor(\n-    private httpClient: HttpClient,\n-    private customFieldsService: CustomFieldsService\n-  ) { }\n+  constructor(private httpClient: HttpClient) {}\n \n-  getCategories(type?: string): Observable<Array<string>> {\n-    if (!this.dataObsCategories$.observers.length || type !== this.type) {\n-      this.httpClient.get<Array<string>>(type ? this.urlCategories + this.param + type : this.urlCategories).subscribe(\n-        data => { this.dataObsCategories$.next(data); this.categoriesObject = this.getCustomCategoriesObject(data); this.type = type; },\n-        error => { this.dataObsCategories$.error(error); this.dataObsCategories$ = new ReplaySubject(1); }\n-      );\n-    }\n-    return this.dataObsCategories$;\n+  // TODO: convert to Map (maybe via ES6)\n+  getClassificationCategoriesByType(): Observable<CategoriesResponse> {\n+    return this.httpClient.get<CategoriesResponse>(this.urlCategoriesByType);\n   }\n \n-  getCategoryIcon(category: string): Pair {\n-    let categoryIcon = this.categoriesObject[category];\n-    let text = category;\n-    if (!categoryIcon) {\n-      categoryIcon = this.missingIcon;\n-      text = 'Category does not match with the configuration';\n-    }\n-    return new Pair(categoryIcon, text);\n-  }\n-\n-  private getCustomCategoriesObject(categories: Array<string>): Object {\n-    return this.customFieldsService.getCustomObject(\n-      this.getDefaultCategoryMap(categories), 'classifications.categories'\n+  getCustomisation(): Observable<Customisation> {\n+    return this.httpClient.get<Customisation>(customisationUrl).pipe(\n+      map(customisation => {\n+        Object.keys(customisation).forEach(lang => {\n+          if (!customisation[lang].classifications) customisation[lang].classifications = {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0ODUzNg==", "bodyText": "We should do some research and think about this in general.\nDo we want select statements within the service? If not, what are the alternatives.", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r403448536", "createdAt": "2020-04-04T09:31:22Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/services/classifications/classifications.service.ts", "diffHunk": "@@ -21,13 +22,13 @@ export class ClassificationsService {\n   private classificationSaved = new Subject<number>();\n   private classificationResourcePromise: Promise<ClassificationResource>;\n   private lastDomain: string;\n+  // TODO: this should not be here in the service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0ODY0NA==", "bodyText": "I don't know. Lets find this out together.", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r403448644", "createdAt": "2020-04-04T09:32:27Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/services/classifications/classifications.service.ts", "diffHunk": "@@ -67,9 +68,12 @@ export class ClassificationsService {\n   getClassification(id: string): Promise<ClassificationDefinition> {\n     return this.httpClient.get<ClassificationDefinition>(`${this.url}${id}`)\n       .pipe(tap((classification: ClassificationDefinition) => {\n-        if (classification) {\n-          this.classificationCategoriesService.selectClassificationType(classification.type);\n-        }\n+        // why do we need that?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0ODc1NA==", "bodyText": "We can simplify this.", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r403448754", "createdAt": "2020-04-04T09:33:33Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/shared/services/classifications/classifications.service.ts", "diffHunk": "@@ -108,10 +112,9 @@ export class ClassificationsService {\n   // #endregion\n \n   private getClassificationObservable(classificationRef: Observable<any>): Observable<Array<Classification>> {\n-    const classificationTypes: Observable<string> = this.classificationCategoriesService.getSelectedClassificationType();\n     return combineLatest(\n       [classificationRef,\n-        classificationTypes]\n+        this.classificationTypeSelected$]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0ODkzMw==", "bodyText": "This state is still one huge file.\nLets talk about how we can handle states which will get bigger.", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r403448933", "createdAt": "2020-04-04T09:35:21Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/store/Classification-state.ts", "diffHunk": "@@ -0,0 +1,65 @@\n+import { Action, Selector, State, StateContext } from '@ngxs/store';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0ODk1NA==", "bodyText": "Please make the filename lowercase.", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r403448954", "createdAt": "2020-04-04T09:35:39Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/store/Classification-state.ts", "diffHunk": "@@ -0,0 +1,65 @@\n+import { Action, Selector, State, StateContext } from '@ngxs/store';\n+import { Observable } from 'rxjs';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0OTA2NQ==", "bodyText": "Same as the other state: lowercase filename please.", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r403449065", "createdAt": "2020-04-04T09:37:06Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/store/Engine-configuration-state.ts", "diffHunk": "@@ -0,0 +1,63 @@\n+import { Customisation, WorkbasketsCustomisation, ClassificationsCustomisation, AccessItemsCustomisation, TasksCustomisation, ClassificationCategoryImages } from 'app/models/customisation';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0OTA3NA==", "bodyText": "We should talk about unit testing our stores.", "url": "https://github.com/Taskana/taskana/pull/1003#discussion_r403449074", "createdAt": "2020-04-04T09:37:20Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/store/Engine-configuration-state.ts", "diffHunk": "@@ -0,0 +1,63 @@\n+import { Customisation, WorkbasketsCustomisation, ClassificationsCustomisation, AccessItemsCustomisation, TasksCustomisation, ClassificationCategoryImages } from 'app/models/customisation';\n+import { State, NgxsOnInit, Selector, StateContext, Action } from '@ngxs/store';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0a2e1b54dfdff08e60e8c2eff683c8c00728b9"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a323d0302be7d3ca449c44a1149c1da2b24ae189", "author": {"user": {"login": "sofie29", "name": "Sofie Hofmann"}}, "url": "https://github.com/Taskana/taskana/commit/a323d0302be7d3ca449c44a1149c1da2b24ae189", "committedDate": "2020-04-09T15:28:26Z", "message": "TSK-652, TSK-1170, TSK-1023 Fixed various bugs by introducing ngxs state management\n\nTSK-1170 Remove @inputs from classification-types-selector\n\nTSK-1170 Import Store in Classification-Detail-Component\n\n\n\nTSK-1170 Removed getSelectedClassificationType() from category service\n\nTSK-1170 Removed getSelectedClassificationType() from category service\n\nTSK-1170 Put icons in store\n\nTSK-1170 Removed selectCategoryType from service\n\nTSK-1170 Refactored classification-category service\n\nTSK-1170 Fixed multiple calls of actions\n\nTSK-1170\n\nTSK-1170: build ngxs store in parallel to the ngrx store\n\n\nTSK-1170: replaced ngrx store with ngxs store\n\ntests are still failing.\nTSK-1170 Split store into two stores\n\nTSK-1170 Fixed tests\n\nTSK-1170 added categories service test\n\nTSK-1170 Fixed checkstyle and test\n\nTSK-1170: minimized diff for classification-details component\n\n\nTSK-1170: replaced state with store observable in classificaiton details\n\n\nTSK-1170 Incorporated requested changes in spec files\n\n\nTSK-1170 Removed @output from classification-types-selector\n\nRemoved getClassifications() call when selecting a classification type because the code is duplicated in performRequest() \nTSK-1170 Extracted selectors and actions\n\n\nTSK-1170 Dispatch action in classification-service\n\n\n\n\nTSK-1170 Incorporated 'set-value' function\n\n\ndynamically rendering classification types\n\nTSK-1170: disabled parent reference while creating classification\n\n\nTSK-1170 fixed two ways binding for classification types\n\nTSK-1170 removed console log\n\nTSK-1170: Category dropdown shows correct values\n\nTSK-1170 Renamed selectors\n\n\n\n\nTSK-1170"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODk5NzYx", "url": "https://github.com/Taskana/taskana/pull/1003#pullrequestreview-390899761", "createdAt": "2020-04-09T15:29:03Z", "commit": {"oid": "a323d0302be7d3ca449c44a1149c1da2b24ae189"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4523, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}