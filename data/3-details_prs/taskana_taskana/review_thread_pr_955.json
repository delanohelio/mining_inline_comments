{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMzMzNTIz", "number": 955, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTowODo1N1rODjxu4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMToxMjowNlrODjxyEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODQxNTcwOnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/workbasket/details/access-items/access-items.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTowODo1N1rOFvxckg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTowODo1N1rOFvxckg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzNzUyMg==", "bodyText": "wieder zur\u00fcck", "url": "https://github.com/Taskana/taskana/pull/955#discussion_r385637522", "createdAt": "2020-02-28T11:08:57Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/workbasket/details/access-items/access-items.component.ts", "diffHunk": "@@ -140,7 +141,8 @@ export class AccessItemsComponent implements OnChanges, OnDestroy {\n     this.AccessItemsForm.reset();\n     this.setAccessItemsGroups(this.accessItemsResetClone);\n     this.accessItemsClone = this.cloneAccessItems(this.accessItemsResetClone);\n-    this.alertService.triggerAlert(new AlertModel(AlertType.INFO, 'Reset edited fields'));\n+    // new Key ALERT_TYPES.INFO_ALERT\n+\tthis.alertService.triggerAlert(new AlertModel(AlertType.INFO, 'Reset edited fields'));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0b195eb7e3cbe3ff29c56954d2c7d07b602344"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODQyMDQwOnYy", "diffSide": "RIGHT", "path": "web/src/app/administration/workbasket/details/information/workbasket-information.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMToxMDo0NVrOFvxfgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMToxMDo0NVrOFvxfgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzODI3NQ==", "bodyText": "remove ALERT_TYPES", "url": "https://github.com/Taskana/taskana/pull/955#discussion_r385638275", "createdAt": "2020-02-28T11:10:45Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/administration/workbasket/details/information/workbasket-information.component.ts", "diffHunk": "@@ -18,6 +18,7 @@ import { RequestInProgressService } from 'app/services/requestInProgress/request\n import { CustomFieldsService } from 'app/services/custom-fields/custom-fields.service';\n import { RemoveConfirmationService } from 'app/services/remove-confirmation/remove-confirmation.service';\n import { FormsValidatorService } from 'app/shared/services/forms/forms-validator.service';\n+import {ALERT_TYPES, ERROR_TYPES} from '../../../../services/general-modal/errors';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0b195eb7e3cbe3ff29c56954d2c7d07b602344"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODQyMzg2OnYy", "diffSide": "RIGHT", "path": "web/src/app/services/general-modal/general-modal.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMToxMjowNlrOFvxhuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMToxMjowNlrOFvxhuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzODg0MQ==", "bodyText": "kann raus", "url": "https://github.com/Taskana/taskana/pull/955#discussion_r385638841", "createdAt": "2020-02-28T11:12:06Z", "author": {"login": "mustaphazorgati"}, "path": "web/src/app/services/general-modal/general-modal.service.ts", "diffHunk": "@@ -2,11 +2,14 @@ import { Injectable } from '@angular/core';\n import { Subject, Observable } from 'rxjs';\n import { MessageModal } from 'app/models/message-modal';\n \n+import { ERROR_TYPES, errors as ERRORS } from './errors';\n+\n @Injectable()\n export class GeneralModalService {\n   private messageTriggered = new Subject<MessageModal>();\n \n   triggerMessage(message: MessageModal) {\n+\tconsole.log(ERRORS.get(ERROR_TYPES.DELETE_ERR));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0b195eb7e3cbe3ff29c56954d2c7d07b602344"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4272, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}