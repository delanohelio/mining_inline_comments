{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MjAyMTc2", "number": 1534, "title": "Resolve overloads in bison parser", "bodyText": "This is necessary in order for the glr disambiguation algorithm to correctly identify two ambiguous parses as having the same AST when overload resolution would lead to that fact being the case.\nA happy side effect of this change is that the ASTs generated by the bison parser are now in normal form.", "createdAt": "2020-09-01T16:34:47Z", "url": "https://github.com/kframework/k/pull/1534", "merged": true, "mergeCommit": {"oid": "0aa62f797a852c74632e70dc7174b20245761fb9"}, "closed": true, "closedAt": "2020-09-04T00:49:37Z", "author": {"login": "dwightguth"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEqCJAgH2gAyNDc3MjAyMTc2OjRlZDY3MGQzOTUxMjJhZjFhMjY3ZTE4NmNhMTVmMmI4ZDg3YWMyMGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFZgPfAH2gAyNDc3MjAyMTc2OmRlYWJhMjQzMzMzMjRmNGRlM2QwOTcwZmMxYzI3Mjc5ODFjMTNhNzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4ed670d395122af1a267e186ca15f2b8d87ac20f", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/4ed670d395122af1a267e186ca15f2b8d87ac20f", "committedDate": "2020-09-01T16:31:17Z", "message": "remove special code for normalization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "915ae8105900ec86aa4afc5b7ed39ba1a736b004", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/915ae8105900ec86aa4afc5b7ed39ba1a736b004", "committedDate": "2020-09-01T16:31:29Z", "message": "add function to construct injection symbol dynamically"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a48373b2c7cfff8397b992abee303308405aaa6e", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/a48373b2c7cfff8397b992abee303308405aaa6e", "committedDate": "2020-09-01T16:31:42Z", "message": "include string.h"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f7b5f4a8bb0d43a51c73b667a698ed4ace90869", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/5f7b5f4a8bb0d43a51c73b667a698ed4ace90869", "committedDate": "2020-09-01T16:32:04Z", "message": "double injection compaction in parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dec887cb5020823319a9f670da05080d10c9ce8", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/8dec887cb5020823319a9f670da05080d10c9ce8", "committedDate": "2020-09-01T16:32:18Z", "message": "overload compaction in parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac05bc57dea6b085bae2be1a9652c0576b234e08", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/ac05bc57dea6b085bae2be1a9652c0576b234e08", "committedDate": "2020-09-01T16:32:53Z", "message": "add test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMjc5MzA0", "url": "https://github.com/kframework/k/pull/1534#pullrequestreview-481279304", "createdAt": "2020-09-02T20:35:25Z", "commit": {"oid": "ac05bc57dea6b085bae2be1a9652c0576b234e08"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMDozNToyNVrOHMFEDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjoyMTo0MFrOHMLfFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQyNzkxOQ==", "bodyText": "Half joking: How about caching the lengths, then:\n  strcpy(strcpy(strcpy(strcpy(strcpy(symbol, prefix) + len(prefix), lesser) + len(lesser), infix) + len(infix), greater) + len(greater), suffix);", "url": "https://github.com/kframework/k/pull/1534#discussion_r482427919", "createdAt": "2020-09-02T20:35:25Z", "author": {"login": "virgil-serbanuta"}, "path": "k-distribution/include/kframework/cparser/main.c", "diffHunk": "@@ -77,6 +61,20 @@ bool equalsNode(node *x0, node *x1) {\n   }\n }\n \n+char *injSymbol(char *lesser, char *greater) {\n+  char *prefix = \"inj{\";\n+  char *infix = \", \";\n+  char *suffix = \"}\";\n+  size_t len = strlen(prefix) + strlen(suffix) + strlen(lesser) + strlen(greater) + strlen(infix) + 1;\n+  char *symbol = malloc(len);\n+  strcpy(symbol, prefix);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac05bc57dea6b085bae2be1a9652c0576b234e08"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ5OTUzMg==", "bodyText": "I assume that \"less\" means \"included in\", i.e. here lesserSort is included in greaterSort and lesser's sort is included in greater's, right?", "url": "https://github.com/kframework/k/pull/1534#discussion_r482499532", "createdAt": "2020-09-02T21:39:13Z", "author": {"login": "virgil-serbanuta"}, "path": "kernel/src/main/java/org/kframework/parser/inner/kernel/KSyntax2Bison.java", "diffHunk": "@@ -215,6 +217,83 @@ private static void encode(Sort sort, StringBuilder sb) {\n     sb.append(\"_\");\n   }\n \n+  private static void appendOverloadCondition(StringBuilder bison, Module module, Production greater, Production lesser, List<Integer> nts) {\n+    bison.append(\"true\");\n+    for (int i = 0; i < nts.size(); i++) {\n+      boolean hasSameSort = lesser.nonterminals().apply(i).sort().equals(greater.nonterminals().apply(i).sort());\n+      if (!hasSameSort) {\n+        bison.append(\" && strncmp($\").append(nts.get(i)).append(\".nterm->symbol, \\\"inj{\\\", 4) == 0 && (false\");\n+        Sort greaterSort = lesser.nonterminals().apply(i).sort();\n+        for (Sort lesserSort : iterable(module.subsorts().elements())) {\n+          if (module.subsorts().lessThanEq(lesserSort, greaterSort)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac05bc57dea6b085bae2be1a9652c0576b234e08"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxNjI2NA==", "bodyText": "Would this work if there are multiple terminals? I.e. wouldn't origChild be redeclared in the same block?", "url": "https://github.com/kframework/k/pull/1534#discussion_r482516264", "createdAt": "2020-09-02T21:59:51Z", "author": {"login": "virgil-serbanuta"}, "path": "kernel/src/main/java/org/kframework/parser/inner/kernel/KSyntax2Bison.java", "diffHunk": "@@ -215,6 +217,83 @@ private static void encode(Sort sort, StringBuilder sb) {\n     sb.append(\"_\");\n   }\n \n+  private static void appendOverloadCondition(StringBuilder bison, Module module, Production greater, Production lesser, List<Integer> nts) {\n+    bison.append(\"true\");\n+    for (int i = 0; i < nts.size(); i++) {\n+      boolean hasSameSort = lesser.nonterminals().apply(i).sort().equals(greater.nonterminals().apply(i).sort());\n+      if (!hasSameSort) {\n+        bison.append(\" && strncmp($\").append(nts.get(i)).append(\".nterm->symbol, \\\"inj{\\\", 4) == 0 && (false\");\n+        Sort greaterSort = lesser.nonterminals().apply(i).sort();\n+        for (Sort lesserSort : iterable(module.subsorts().elements())) {\n+          if (module.subsorts().lessThanEq(lesserSort, greaterSort)) {\n+            bison.append(\" || strcmp($\").append(nts.get(i)).append(\".nterm->children[0]->sort, \\\"\");\n+            encodeKore(lesserSort, bison);\n+            bison.append(\"\\\") == 0\");\n+          }\n+        }\n+        bison.append(\")\");\n+      }\n+    }\n+  }\n+\n+  private static void appendOverloadChecks(StringBuilder bison, Module module, Production greater, List<Integer> nts, boolean hasLocation) {\n+    for (Production lesser : iterable(module.overloads().elements())) {\n+      if (module.overloads().lessThan(lesser, greater)) {\n+        bison.append(\"  if (\");\n+        appendOverloadCondition(bison, module, greater, lesser, nts);\n+        bison.append(\") {\\n\" +\n+            \"    n->symbol =\\\"\");\n+        encodeKore(lesser.klabel().get(), bison);\n+        bison.append(\"\\\";\\n\" +\n+            \"    n->sort = \\\"\");\n+        encodeKore(lesser.sort(), bison);\n+        boolean hasLesserLocation = module.sortAttributesFor().get(lesser.sort().head()).getOrElse(() -> Att.empty()).contains(\"locations\");\n+        bison.append(\"\\\";\\n\" +\n+            \"    n->hasLocation = \" + (hasLesserLocation ? \"1\" : \"0\") + \";\\n\");\n+        for (int i = 0; i < nts.size(); i++) {\n+          boolean hasSameSort = lesser.nonterminals().apply(i).sort().equals(greater.nonterminals().apply(i).sort());\n+          if (hasSameSort) {\n+            bison.append(\n+                \"    n->children[\").append(i).append(\"] = $\").append(nts.get(i)).append(\".nterm;\\n\");\n+          } else {\n+            bison.append(\n+                \"    node *origChild = $\").append(nts.get(i)).append(\".nterm;\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac05bc57dea6b085bae2be1a9652c0576b234e08"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUzMzE0MA==", "bodyText": "This is a repeated if( ... ) { ... } else section, which means that only the first lesser production that passes the test is processed. Why is it good enough to use only the first one?", "url": "https://github.com/kframework/k/pull/1534#discussion_r482533140", "createdAt": "2020-09-02T22:21:40Z", "author": {"login": "virgil-serbanuta"}, "path": "kernel/src/main/java/org/kframework/parser/inner/kernel/KSyntax2Bison.java", "diffHunk": "@@ -215,6 +217,83 @@ private static void encode(Sort sort, StringBuilder sb) {\n     sb.append(\"_\");\n   }\n \n+  private static void appendOverloadCondition(StringBuilder bison, Module module, Production greater, Production lesser, List<Integer> nts) {\n+    bison.append(\"true\");\n+    for (int i = 0; i < nts.size(); i++) {\n+      boolean hasSameSort = lesser.nonterminals().apply(i).sort().equals(greater.nonterminals().apply(i).sort());\n+      if (!hasSameSort) {\n+        bison.append(\" && strncmp($\").append(nts.get(i)).append(\".nterm->symbol, \\\"inj{\\\", 4) == 0 && (false\");\n+        Sort greaterSort = lesser.nonterminals().apply(i).sort();\n+        for (Sort lesserSort : iterable(module.subsorts().elements())) {\n+          if (module.subsorts().lessThanEq(lesserSort, greaterSort)) {\n+            bison.append(\" || strcmp($\").append(nts.get(i)).append(\".nterm->children[0]->sort, \\\"\");\n+            encodeKore(lesserSort, bison);\n+            bison.append(\"\\\") == 0\");\n+          }\n+        }\n+        bison.append(\")\");\n+      }\n+    }\n+  }\n+\n+  private static void appendOverloadChecks(StringBuilder bison, Module module, Production greater, List<Integer> nts, boolean hasLocation) {\n+    for (Production lesser : iterable(module.overloads().elements())) {\n+      if (module.overloads().lessThan(lesser, greater)) {\n+        bison.append(\"  if (\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac05bc57dea6b085bae2be1a9652c0576b234e08"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54acab70db8a53b209b72b6f01fb5a339b83655b", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/54acab70db8a53b209b72b6f01fb5a339b83655b", "committedDate": "2020-09-03T17:20:56Z", "message": "add another test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "239001ea4290bcd38a5c0d34a18eba0471a456bf", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/239001ea4290bcd38a5c0d34a18eba0471a456bf", "committedDate": "2020-09-03T17:21:06Z", "message": "fix bug involving scoping of local variables in C bison code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0aeefd79b260a5c28251e244a86ff54ed5d2273", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/e0aeefd79b260a5c28251e244a86ff54ed5d2273", "committedDate": "2020-09-03T17:30:17Z", "message": "add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c73b5dde7238e69d2622f326ae0232431b6b45b1", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/c73b5dde7238e69d2622f326ae0232431b6b45b1", "committedDate": "2020-09-03T17:30:22Z", "message": "topologically sort overloads"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMTY1MTU4", "url": "https://github.com/kframework/k/pull/1534#pullrequestreview-482165158", "createdAt": "2020-09-03T20:09:25Z", "commit": {"oid": "c73b5dde7238e69d2622f326ae0232431b6b45b1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7261491f4aebd7a078aaf086c4766b8ba00b97f", "author": {"user": {"login": "rv-jenkins", "name": null}}, "url": "https://github.com/kframework/k/commit/d7261491f4aebd7a078aaf086c4766b8ba00b97f", "committedDate": "2020-09-03T21:00:33Z", "message": "Merge branch 'master' into overload"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deaba24333324f4de3d0970fc1c2727981c13a74", "author": {"user": {"login": "rv-jenkins", "name": null}}, "url": "https://github.com/kframework/k/commit/deaba24333324f4de3d0970fc1c2727981c13a74", "committedDate": "2020-09-03T23:49:42Z", "message": "Merge branch 'master' into overload"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2354, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}