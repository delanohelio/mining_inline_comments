{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MjAyODQw", "number": 1342, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTowODozMlrOEGEpAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTowODozMlrOEGEpAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODAyOTQ0OnYy", "diffSide": "RIGHT", "path": "k-distribution/src/main/scripts/lib/pyk/kastManip.py", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTowODozMlrOGkpbiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxNTo1N1rOGkrjoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MDcxNQ==", "bodyText": "Is this really true? I thought the # values were used for matching logic operators and terms, not for the regular boolean operators.", "url": "https://github.com/kframework/k/pull/1342#discussion_r441080715", "createdAt": "2020-06-16T19:08:32Z", "author": {"login": "hjorthjort"}, "path": "k-distribution/src/main/scripts/lib/pyk/kastManip.py", "diffHunk": "@@ -84,27 +84,41 @@ def rewriteAnywhereWith(rule, pattern):\n     return traverseBottomUp(pattern, lambda p: rewriteWith(rule, p))\n \n def mlPredToBool(k):\n-    klabelMap = { \"#And\"    : \"_andBool_\"\n-                , \"#Or\"     : \"_orBool_\"\n-                , \"#Not\"    : \"notBool_\"\n-                , \"#Equals\" : '_==K_'\n-                }\n-    return replaceKLabels(k, klabelMap)\n+    if k is None:\n+        return None\n+    mlPredToBoolRules = [ (KApply('#True', [])  , KToken('true', 'Bool'))\n+                        , (KApply('#False', []) , KToken('false', 'Bool'))\n+                        , (KApply('#And'    , [KVariable('#V1'), KVariable('#V2')]) , KApply('_andBool_' , [KVariable('#V1'), KVariable('#V2')]))\n+                        , (KApply('#Or'     , [KVariable('#V1'), KVariable('#V2')]) , KApply('_orBool_'  , [KVariable('#V1'), KVariable('#V2')]))\n+                        , (KApply('#Not'    , [KVariable('#V1')])                   , KApply('notBool_'  , [KVariable('#V1')]))\n+                        , (KApply('#Equals' , [KVariable('#V1'), KVariable('#V2')]) , KApply('_==K_'     , [KVariable('#V1'), KVariable('#V2')]))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7990884583dfe50b9723b02ccdf58f84ede8d657"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5MTY0Ng==", "bodyText": "No, it's technically not true, #Equals is just #Equals, not _==K_. But _==K_ usually gets translated to #Equals for the Haskell backend, so this just translates it back for printing out.\nWe could make it more specific, but saying that #Equals is only translated back for some specific cases, but it's a lot of cases that we would have to list.", "url": "https://github.com/kframework/k/pull/1342#discussion_r441091646", "createdAt": "2020-06-16T19:28:55Z", "author": {"login": "ehildenb"}, "path": "k-distribution/src/main/scripts/lib/pyk/kastManip.py", "diffHunk": "@@ -84,27 +84,41 @@ def rewriteAnywhereWith(rule, pattern):\n     return traverseBottomUp(pattern, lambda p: rewriteWith(rule, p))\n \n def mlPredToBool(k):\n-    klabelMap = { \"#And\"    : \"_andBool_\"\n-                , \"#Or\"     : \"_orBool_\"\n-                , \"#Not\"    : \"notBool_\"\n-                , \"#Equals\" : '_==K_'\n-                }\n-    return replaceKLabels(k, klabelMap)\n+    if k is None:\n+        return None\n+    mlPredToBoolRules = [ (KApply('#True', [])  , KToken('true', 'Bool'))\n+                        , (KApply('#False', []) , KToken('false', 'Bool'))\n+                        , (KApply('#And'    , [KVariable('#V1'), KVariable('#V2')]) , KApply('_andBool_' , [KVariable('#V1'), KVariable('#V2')]))\n+                        , (KApply('#Or'     , [KVariable('#V1'), KVariable('#V2')]) , KApply('_orBool_'  , [KVariable('#V1'), KVariable('#V2')]))\n+                        , (KApply('#Not'    , [KVariable('#V1')])                   , KApply('notBool_'  , [KVariable('#V1')]))\n+                        , (KApply('#Equals' , [KVariable('#V1'), KVariable('#V2')]) , KApply('_==K_'     , [KVariable('#V1'), KVariable('#V2')]))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MDcxNQ=="}, "originalCommit": {"oid": "7990884583dfe50b9723b02ccdf58f84ede8d657"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5NTE5Mg==", "bodyText": "My only worry is that we'll get a rule that doesn't work because #And and andBool work differently, for example, where one expresses matching over sets. And if an #And is introduced for ML specific purposes it would be very wrong to translate it back. So I'm a bit skeptical. I would rather have it behind a flag or option or something, since it's a little bit dangerous I don't think it should be the default.", "url": "https://github.com/kframework/k/pull/1342#discussion_r441095192", "createdAt": "2020-06-16T19:35:54Z", "author": {"login": "hjorthjort"}, "path": "k-distribution/src/main/scripts/lib/pyk/kastManip.py", "diffHunk": "@@ -84,27 +84,41 @@ def rewriteAnywhereWith(rule, pattern):\n     return traverseBottomUp(pattern, lambda p: rewriteWith(rule, p))\n \n def mlPredToBool(k):\n-    klabelMap = { \"#And\"    : \"_andBool_\"\n-                , \"#Or\"     : \"_orBool_\"\n-                , \"#Not\"    : \"notBool_\"\n-                , \"#Equals\" : '_==K_'\n-                }\n-    return replaceKLabels(k, klabelMap)\n+    if k is None:\n+        return None\n+    mlPredToBoolRules = [ (KApply('#True', [])  , KToken('true', 'Bool'))\n+                        , (KApply('#False', []) , KToken('false', 'Bool'))\n+                        , (KApply('#And'    , [KVariable('#V1'), KVariable('#V2')]) , KApply('_andBool_' , [KVariable('#V1'), KVariable('#V2')]))\n+                        , (KApply('#Or'     , [KVariable('#V1'), KVariable('#V2')]) , KApply('_orBool_'  , [KVariable('#V1'), KVariable('#V2')]))\n+                        , (KApply('#Not'    , [KVariable('#V1')])                   , KApply('notBool_'  , [KVariable('#V1')]))\n+                        , (KApply('#Equals' , [KVariable('#V1'), KVariable('#V2')]) , KApply('_==K_'     , [KVariable('#V1'), KVariable('#V2')]))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MDcxNQ=="}, "originalCommit": {"oid": "7990884583dfe50b9723b02ccdf58f84ede8d657"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5NjcxOA==", "bodyText": "I can rename the function mlPredToBool => mlPredToBoolUnsafe if you want?", "url": "https://github.com/kframework/k/pull/1342#discussion_r441096718", "createdAt": "2020-06-16T19:38:55Z", "author": {"login": "ehildenb"}, "path": "k-distribution/src/main/scripts/lib/pyk/kastManip.py", "diffHunk": "@@ -84,27 +84,41 @@ def rewriteAnywhereWith(rule, pattern):\n     return traverseBottomUp(pattern, lambda p: rewriteWith(rule, p))\n \n def mlPredToBool(k):\n-    klabelMap = { \"#And\"    : \"_andBool_\"\n-                , \"#Or\"     : \"_orBool_\"\n-                , \"#Not\"    : \"notBool_\"\n-                , \"#Equals\" : '_==K_'\n-                }\n-    return replaceKLabels(k, klabelMap)\n+    if k is None:\n+        return None\n+    mlPredToBoolRules = [ (KApply('#True', [])  , KToken('true', 'Bool'))\n+                        , (KApply('#False', []) , KToken('false', 'Bool'))\n+                        , (KApply('#And'    , [KVariable('#V1'), KVariable('#V2')]) , KApply('_andBool_' , [KVariable('#V1'), KVariable('#V2')]))\n+                        , (KApply('#Or'     , [KVariable('#V1'), KVariable('#V2')]) , KApply('_orBool_'  , [KVariable('#V1'), KVariable('#V2')]))\n+                        , (KApply('#Not'    , [KVariable('#V1')])                   , KApply('notBool_'  , [KVariable('#V1')]))\n+                        , (KApply('#Equals' , [KVariable('#V1'), KVariable('#V2')]) , KApply('_==K_'     , [KVariable('#V1'), KVariable('#V2')]))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MDcxNQ=="}, "originalCommit": {"oid": "7990884583dfe50b9723b02ccdf58f84ede8d657"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwMTA4MA==", "bodyText": "Sure, that would do it. And maybe add a docstring explaining why it's unsafe: all boolean operators translate to the ML operators, but not vice versa.", "url": "https://github.com/kframework/k/pull/1342#discussion_r441101080", "createdAt": "2020-06-16T19:47:09Z", "author": {"login": "hjorthjort"}, "path": "k-distribution/src/main/scripts/lib/pyk/kastManip.py", "diffHunk": "@@ -84,27 +84,41 @@ def rewriteAnywhereWith(rule, pattern):\n     return traverseBottomUp(pattern, lambda p: rewriteWith(rule, p))\n \n def mlPredToBool(k):\n-    klabelMap = { \"#And\"    : \"_andBool_\"\n-                , \"#Or\"     : \"_orBool_\"\n-                , \"#Not\"    : \"notBool_\"\n-                , \"#Equals\" : '_==K_'\n-                }\n-    return replaceKLabels(k, klabelMap)\n+    if k is None:\n+        return None\n+    mlPredToBoolRules = [ (KApply('#True', [])  , KToken('true', 'Bool'))\n+                        , (KApply('#False', []) , KToken('false', 'Bool'))\n+                        , (KApply('#And'    , [KVariable('#V1'), KVariable('#V2')]) , KApply('_andBool_' , [KVariable('#V1'), KVariable('#V2')]))\n+                        , (KApply('#Or'     , [KVariable('#V1'), KVariable('#V2')]) , KApply('_orBool_'  , [KVariable('#V1'), KVariable('#V2')]))\n+                        , (KApply('#Not'    , [KVariable('#V1')])                   , KApply('notBool_'  , [KVariable('#V1')]))\n+                        , (KApply('#Equals' , [KVariable('#V1'), KVariable('#V2')]) , KApply('_==K_'     , [KVariable('#V1'), KVariable('#V2')]))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MDcxNQ=="}, "originalCommit": {"oid": "7990884583dfe50b9723b02ccdf58f84ede8d657"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNTU1Mg==", "bodyText": "Done, I've made the renaming and some documentation.", "url": "https://github.com/kframework/k/pull/1342#discussion_r441115552", "createdAt": "2020-06-16T20:15:57Z", "author": {"login": "ehildenb"}, "path": "k-distribution/src/main/scripts/lib/pyk/kastManip.py", "diffHunk": "@@ -84,27 +84,41 @@ def rewriteAnywhereWith(rule, pattern):\n     return traverseBottomUp(pattern, lambda p: rewriteWith(rule, p))\n \n def mlPredToBool(k):\n-    klabelMap = { \"#And\"    : \"_andBool_\"\n-                , \"#Or\"     : \"_orBool_\"\n-                , \"#Not\"    : \"notBool_\"\n-                , \"#Equals\" : '_==K_'\n-                }\n-    return replaceKLabels(k, klabelMap)\n+    if k is None:\n+        return None\n+    mlPredToBoolRules = [ (KApply('#True', [])  , KToken('true', 'Bool'))\n+                        , (KApply('#False', []) , KToken('false', 'Bool'))\n+                        , (KApply('#And'    , [KVariable('#V1'), KVariable('#V2')]) , KApply('_andBool_' , [KVariable('#V1'), KVariable('#V2')]))\n+                        , (KApply('#Or'     , [KVariable('#V1'), KVariable('#V2')]) , KApply('_orBool_'  , [KVariable('#V1'), KVariable('#V2')]))\n+                        , (KApply('#Not'    , [KVariable('#V1')])                   , KApply('notBool_'  , [KVariable('#V1')]))\n+                        , (KApply('#Equals' , [KVariable('#V1'), KVariable('#V2')]) , KApply('_==K_'     , [KVariable('#V1'), KVariable('#V2')]))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MDcxNQ=="}, "originalCommit": {"oid": "7990884583dfe50b9723b02ccdf58f84ede8d657"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3058, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}