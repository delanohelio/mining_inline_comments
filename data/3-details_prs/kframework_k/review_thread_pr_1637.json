{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NzAyNzg2", "number": 1637, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNjowOVrOE3X1zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoyNToyNVrOE3ZlFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk3NzQyOnYy", "diffSide": "RIGHT", "path": "k-distribution/include/kframework/builtin/domains.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNjowOVrOHwrksw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNjowOVrOHwrksw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNzYwMw==", "bodyText": "I think for completeness you need to say 0 <=Int IDX andBool IDX <Int size(L)", "url": "https://github.com/kframework/k/pull/1637#discussion_r520807603", "createdAt": "2020-11-10T19:06:09Z", "author": {"login": "ehildenb"}, "path": "k-distribution/include/kframework/builtin/domains.md", "diffHunk": "@@ -159,7 +159,8 @@ of any of the syntax defined in any of these modules.\n \n   rule makeArray(I::Int, D::KItem) => arr(.List, I, D)\n \n-  rule arr(L::List, _, D::KItem) [ IDX::Int ] => #if IDX >=Int size(L) #then D #else L[IDX] #fi\n+  rule arr(L::List, _, _       ) [ IDX::Int ] => L[IDX] requires IDX <Int size(L)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a32b826c588c7e6134e7eba88c042ef476a014f6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTAyNzMwOnYy", "diffSide": "RIGHT", "path": "k-distribution/include/kframework/builtin/domains.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOToxOTo1NlrOHwsDgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOToxOTo1NlrOHwsDgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxNTQ4OQ==", "bodyText": "These rules don't cover the case that IDX <Int 0 though, which we should cover I think to keep it total. I would stick with the owise rule.", "url": "https://github.com/kframework/k/pull/1637#discussion_r520815489", "createdAt": "2020-11-10T19:19:56Z", "author": {"login": "ehildenb"}, "path": "k-distribution/include/kframework/builtin/domains.md", "diffHunk": "@@ -159,8 +159,8 @@ of any of the syntax defined in any of these modules.\n \n   rule makeArray(I::Int, D::KItem) => arr(.List, I, D)\n \n-  rule arr(L::List, _, _       ) [ IDX::Int ] => L[IDX] requires IDX <Int size(L)\n-  rule arr(_      , _, D::KItem) [ _        ] => D      [owise]\n+  rule arr(L::List, _, _       ) [ IDX::Int ] => L[IDX] requires 0 <=Int IDX andBool IDX  <Int size(L)\n+  rule arr(L::List, _, D::KItem) [ IDX::Int ] => D      requires 0 <=Int IDX andBool IDX >=Int size(L)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeef8b27bb69db8269bbb25dd8c13ba48aa3c205"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTI2MjI4OnYy", "diffSide": "RIGHT", "path": "k-distribution/include/kframework/builtin/domains.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoyNToyNVrOHwuTdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzo1MzowNFrOHxYCGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MjM0MA==", "bodyText": "Should we look up the size from the second argument of arr instead? Computing size(L) is O(log n).", "url": "https://github.com/kframework/k/pull/1637#discussion_r520852340", "createdAt": "2020-11-10T20:25:25Z", "author": {"login": "ttuegel"}, "path": "k-distribution/include/kframework/builtin/domains.md", "diffHunk": "@@ -159,7 +159,8 @@ of any of the syntax defined in any of these modules.\n \n   rule makeArray(I::Int, D::KItem) => arr(.List, I, D)\n \n-  rule arr(L::List, _, D::KItem) [ IDX::Int ] => #if IDX >=Int size(L) #then D #else L[IDX] #fi\n+  rule arr(L::List, _, _       ) [ IDX::Int ] => L[IDX] requires 0 <=Int IDX andBool IDX  <Int size(L)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4670caf886df5a0e5a70e342d83362d386301d62"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3NTc5Mw==", "bodyText": "I don't think the second argument represent the length of the list, it's the length of the array.", "url": "https://github.com/kframework/k/pull/1637#discussion_r520875793", "createdAt": "2020-11-10T21:10:37Z", "author": {"login": "gtrepta"}, "path": "k-distribution/include/kframework/builtin/domains.md", "diffHunk": "@@ -159,7 +159,8 @@ of any of the syntax defined in any of these modules.\n \n   rule makeArray(I::Int, D::KItem) => arr(.List, I, D)\n \n-  rule arr(L::List, _, D::KItem) [ IDX::Int ] => #if IDX >=Int size(L) #then D #else L[IDX] #fi\n+  rule arr(L::List, _, _       ) [ IDX::Int ] => L[IDX] requires 0 <=Int IDX andBool IDX  <Int size(L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MjM0MA=="}, "originalCommit": {"oid": "4670caf886df5a0e5a70e342d83362d386301d62"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4MjUyOA==", "bodyText": "If it's the logical length of the array, then it should probably be taken into account? Because the list may be longer than the logical length of the array.\nMaybe if you store 10 elements, then remove the last 5, it just doesn't bother removing the last 5 but instead just makes the second parameter 5 less?\nNot sure, probably need some clarity from @dwightguth on how the Array works", "url": "https://github.com/kframework/k/pull/1637#discussion_r520882528", "createdAt": "2020-11-10T21:23:55Z", "author": {"login": "ehildenb"}, "path": "k-distribution/include/kframework/builtin/domains.md", "diffHunk": "@@ -159,7 +159,8 @@ of any of the syntax defined in any of these modules.\n \n   rule makeArray(I::Int, D::KItem) => arr(.List, I, D)\n \n-  rule arr(L::List, _, D::KItem) [ IDX::Int ] => #if IDX >=Int size(L) #then D #else L[IDX] #fi\n+  rule arr(L::List, _, _       ) [ IDX::Int ] => L[IDX] requires 0 <=Int IDX andBool IDX  <Int size(L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MjM0MA=="}, "originalCommit": {"oid": "4670caf886df5a0e5a70e342d83362d386301d62"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUzNjAyNg==", "bodyText": "so, the idea is that you can specify a length for an array but the List only creates elements up to the highest offset that was actually accessed. It's a lazy initialization. So the length of the array and the length of the list are not necessarily the same, but the list ought to never be longer than the array.", "url": "https://github.com/kframework/k/pull/1637#discussion_r521536026", "createdAt": "2020-11-11T17:53:04Z", "author": {"login": "dwightguth"}, "path": "k-distribution/include/kframework/builtin/domains.md", "diffHunk": "@@ -159,7 +159,8 @@ of any of the syntax defined in any of these modules.\n \n   rule makeArray(I::Int, D::KItem) => arr(.List, I, D)\n \n-  rule arr(L::List, _, D::KItem) [ IDX::Int ] => #if IDX >=Int size(L) #then D #else L[IDX] #fi\n+  rule arr(L::List, _, _       ) [ IDX::Int ] => L[IDX] requires 0 <=Int IDX andBool IDX  <Int size(L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MjM0MA=="}, "originalCommit": {"oid": "4670caf886df5a0e5a70e342d83362d386301d62"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2918, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}