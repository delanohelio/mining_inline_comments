{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0OTE1NzM4", "number": 1666, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOTo0ODowNVrOE7sKSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDoxODowMFrOE7ssmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDI0OTcxOnYy", "diffSide": "RIGHT", "path": "kernel/src/main/java/org/kframework/kprove/KProveOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOTo0ODowNVrOH3elsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOTo0ODowNVrOH3elsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkzNDg5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Parameter(names=\"--emit-json\", description=\"Emit JSON serialized def module and spec module.\")\n          \n          \n            \n                @Parameter(names=\"--emit-json\", description=\"Emit JSON serialized main definition for proving.\")", "url": "https://github.com/kframework/k/pull/1666#discussion_r527934899", "createdAt": "2020-11-20T19:48:05Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/kprove/KProveOptions.java", "diffHunk": "@@ -82,4 +82,7 @@ public synchronized File specFile(FileUtil files) {\n \n     @Parameter(names=\"--debug-script\", description=\"Run script passed in specified file when the debugger starts. Used with --debugger.\")\n     public String debugScript;\n+\n+    @Parameter(names=\"--emit-json\", description=\"Emit JSON serialized def module and spec module.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1ea05f0ec9253501f3ca87fe209abb5618e63c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDMzNzUzOnYy", "diffSide": "RIGHT", "path": "kernel/src/main/java/org/kframework/kprove/KProve.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDoxODowMFrOH3fbQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMToyNDozNlrOH3hMrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0ODYwOA==", "bodyText": "I have a few issues here:\n\ncompiled._1() returns an entire definition, not only a module, so the name of the file is not really correct.\nRight now, each time you call kprove you may have a different set of claims, so maybe it would be better if you save this in kprove.temp. I know we want to eventually optimize this step, so it might not matter then. Thoughts?", "url": "https://github.com/kframework/k/pull/1666#discussion_r527948608", "createdAt": "2020-11-20T20:18:00Z", "author": {"login": "radumereuta"}, "path": "kernel/src/main/java/org/kframework/kprove/KProve.java", "diffHunk": "@@ -72,6 +74,14 @@ public int run() {\n         Module specModule = compiled._2();\n         Rule boundaryPattern = buildBoundaryPattern(compiledDefinition);\n \n+        if (kproveOptions.emitJson) {\n+            try {\n+                files.saveToKompiled(\"def-module.json\", new String(ToJson.apply(compiled._1()), \"UTF-8\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c747b4ece35819c0ba3bfa4af0d3232af0cef9ee"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0OTA5Ng==", "bodyText": "Hmmmm, saving in kprove.temp may be difficult, because I need to access the file afterward. How about I let the user specify the location with --emit-json-file some_file_name, and otherwise default to *-kompiled/kprove-definition.json?", "url": "https://github.com/kframework/k/pull/1666#discussion_r527949096", "createdAt": "2020-11-20T20:19:10Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/kprove/KProve.java", "diffHunk": "@@ -72,6 +74,14 @@ public int run() {\n         Module specModule = compiled._2();\n         Rule boundaryPattern = buildBoundaryPattern(compiledDefinition);\n \n+        if (kproveOptions.emitJson) {\n+            try {\n+                files.saveToKompiled(\"def-module.json\", new String(ToJson.apply(compiled._1()), \"UTF-8\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0ODYwOA=="}, "originalCommit": {"oid": "c747b4ece35819c0ba3bfa4af0d3232af0cef9ee"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1MDk4NQ==", "bodyText": "That sounds even more complicated. I'm happy with where it saves right now if we are to fix kprove eventually.", "url": "https://github.com/kframework/k/pull/1666#discussion_r527950985", "createdAt": "2020-11-20T20:23:14Z", "author": {"login": "radumereuta"}, "path": "kernel/src/main/java/org/kframework/kprove/KProve.java", "diffHunk": "@@ -72,6 +74,14 @@ public int run() {\n         Module specModule = compiled._2();\n         Rule boundaryPattern = buildBoundaryPattern(compiledDefinition);\n \n+        if (kproveOptions.emitJson) {\n+            try {\n+                files.saveToKompiled(\"def-module.json\", new String(ToJson.apply(compiled._1()), \"UTF-8\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0ODYwOA=="}, "originalCommit": {"oid": "c747b4ece35819c0ba3bfa4af0d3232af0cef9ee"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1MjY2Mg==", "bodyText": "Ok, it works for me for now anyway then.", "url": "https://github.com/kframework/k/pull/1666#discussion_r527952662", "createdAt": "2020-11-20T20:26:52Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/kprove/KProve.java", "diffHunk": "@@ -72,6 +74,14 @@ public int run() {\n         Module specModule = compiled._2();\n         Rule boundaryPattern = buildBoundaryPattern(compiledDefinition);\n \n+        if (kproveOptions.emitJson) {\n+            try {\n+                files.saveToKompiled(\"def-module.json\", new String(ToJson.apply(compiled._1()), \"UTF-8\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0ODYwOA=="}, "originalCommit": {"oid": "c747b4ece35819c0ba3bfa4af0d3232af0cef9ee"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk2OTY2OA==", "bodyText": "But you should still change the name of the file to reflect that you have a definition inside, not just a module.", "url": "https://github.com/kframework/k/pull/1666#discussion_r527969668", "createdAt": "2020-11-20T21:06:06Z", "author": {"login": "radumereuta"}, "path": "kernel/src/main/java/org/kframework/kprove/KProve.java", "diffHunk": "@@ -72,6 +74,14 @@ public int run() {\n         Module specModule = compiled._2();\n         Rule boundaryPattern = buildBoundaryPattern(compiledDefinition);\n \n+        if (kproveOptions.emitJson) {\n+            try {\n+                files.saveToKompiled(\"def-module.json\", new String(ToJson.apply(compiled._1()), \"UTF-8\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0ODYwOA=="}, "originalCommit": {"oid": "c747b4ece35819c0ba3bfa4af0d3232af0cef9ee"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3NzY0NA==", "bodyText": "done", "url": "https://github.com/kframework/k/pull/1666#discussion_r527977644", "createdAt": "2020-11-20T21:24:36Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/kprove/KProve.java", "diffHunk": "@@ -72,6 +74,14 @@ public int run() {\n         Module specModule = compiled._2();\n         Rule boundaryPattern = buildBoundaryPattern(compiledDefinition);\n \n+        if (kproveOptions.emitJson) {\n+            try {\n+                files.saveToKompiled(\"def-module.json\", new String(ToJson.apply(compiled._1()), \"UTF-8\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0ODYwOA=="}, "originalCommit": {"oid": "c747b4ece35819c0ba3bfa4af0d3232af0cef9ee"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2935, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}