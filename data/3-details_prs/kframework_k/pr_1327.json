{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMDAzMjI3", "number": 1327, "title": "generalize strictness to multiple aliases", "bodyText": "This is a feature I added to make the new C semantics be able to express its evaluation order entirely using strictness.\nNote that included here is also the fix for the infamous \"attributes are wrong after modifying them but not changing the body of a rule\" bug, which turned out to be much easier to fix than I thought it would be. It was actually causing the test I wrote to fail!", "createdAt": "2020-06-09T18:56:14Z", "url": "https://github.com/kframework/k/pull/1327", "merged": true, "mergeCommit": {"oid": "a34d4d155bb4bfa58194a892f36845b411f373b1"}, "closed": true, "closedAt": "2020-06-12T23:50:43Z", "author": {"login": "dwightguth"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpprXTgH2gAyNDMyMDAzMjI3OjU3NDhlZjY2NzUzNTE0MDMwNzI4MDQyNDUyNzBhMzAzYjZiMDJmY2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqqDyVgH2gAyNDMyMDAzMjI3OjQwOTQ5MTA0OWFjMTU4ZTg2ODNiYzZiZjdjOGQ0NTY1NDYyZmNhZTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5748ef6675351403072804245270a303b6b02fcd", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/5748ef6675351403072804245270a303b6b02fcd", "committedDate": "2020-06-09T18:50:27Z", "message": "add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e62f23d5e7fc0c5c8eacdd31fccd7c711c1cb3da", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/e62f23d5e7fc0c5c8eacdd31fccd7c711c1cb3da", "committedDate": "2020-06-09T18:50:44Z", "message": "fix cache bug with att"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "051b1b2878ad81218f57ff9dee3960f8af829a51", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/051b1b2878ad81218f57ff9dee3960f8af829a51", "committedDate": "2020-06-09T18:50:53Z", "message": "generalize strict to multiple aliases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2edf2390ae2cea8ea78dc81d9240adc9f5dc8238", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/2edf2390ae2cea8ea78dc81d9240adc9f5dc8238", "committedDate": "2020-06-09T18:53:50Z", "message": "documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcb368a2ee53881ef50df67999ea4c403a2044b4", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/fcb368a2ee53881ef50df67999ea4c403a2044b4", "committedDate": "2020-06-09T19:07:55Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd3c7ca39dcca44e0cc4b35ab8998b1c2ee61b4f", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/bd3c7ca39dcca44e0cc4b35ab8998b1c2ee61b4f", "committedDate": "2020-06-09T19:11:52Z", "message": "another bug fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NjIwOTM3", "url": "https://github.com/kframework/k/pull/1327#pullrequestreview-427620937", "createdAt": "2020-06-09T23:50:54Z", "commit": {"oid": "bd3c7ca39dcca44e0cc4b35ab8998b1c2ee61b4f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzo1MDo1NFrOGhgNxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzo1MDo1NFrOGhgNxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NDAwNQ==", "bodyText": "Do we have a wrapper for 1-dimensional attribute arrays? I know it would just be attribute.split(\";\") still, but maybe it would be good to call that function if it exists for semantic readability.", "url": "https://github.com/kframework/k/pull/1327#discussion_r437784005", "createdAt": "2020-06-09T23:50:54Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/compile/ResolveStrict.java", "diffHunk": "@@ -193,6 +159,55 @@ public K apply(KVariable var) {\n                 sentences.add(ctx);\n             }\n         }\n+    }\n+\n+    public Set<Sentence> resolve(Production production, boolean sequential) {\n+        long arity = production.nonterminals().size();\n+        List<Integer> strictnessPositions = new ArrayList<>();\n+        List<Integer> allPositions = new ArrayList<>();\n+        Set<ContextAlias> aliases = new HashSet<>();\n+        String attribute;\n+        Set<Sentence> sentences = new HashSet<>();\n+        if (sequential) {\n+            attribute = production.att().get(Att.SEQSTRICT());\n+        } else {\n+            attribute = production.att().get(Att.STRICT());\n+        }\n+        if (attribute.isEmpty()) {\n+            for (int i = 1; i <= arity; i++) {\n+                strictnessPositions.add(i);\n+            }\n+            aliases.add(DEFAULT_ALIAS);\n+            resolve(sequential, sentences, arity, strictnessPositions, allPositions, aliases, production);\n+            allPositions.addAll(strictnessPositions);\n+        } else {\n+            String[] components = attribute.split(\";\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd3c7ca39dcca44e0cc4b35ab8998b1c2ee61b4f"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NjIxODA0", "url": "https://github.com/kframework/k/pull/1327#pullrequestreview-427621804", "createdAt": "2020-06-09T23:53:25Z", "commit": {"oid": "bd3c7ca39dcca44e0cc4b35ab8998b1c2ee61b4f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzo1MzoyNVrOGhgQrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzo1MzoyNVrOGhgQrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NDc0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else\n          \n          \n            \n                            kem.addAllKException(parse.getWarnings().stream().map(e -> e.getKException()).collect(Collectors.toList()));\n          \n          \n            \n                        } else {\n          \n          \n            \n                            kem.addAllKException(parse.getWarnings().stream().map(e -> e.getKException()).collect(Collectors.toList()));\n          \n          \n            \n                        }", "url": "https://github.com/kframework/k/pull/1327#discussion_r437784749", "createdAt": "2020-06-09T23:53:25Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/kompile/DefinitionParsing.java", "diffHunk": "@@ -487,21 +489,17 @@ private boolean equalsSyntax(Module _this, Module that) {\n         Tuple2<Either<java.util.Set<KEMException>, K>, java.util.Set<KEMException>> result;\n         if (cache.containsKey(b.contents())) {\n             ParsedSentence parse = cache.get(b.contents());\n-            Optional<Source> cacheSource = parse.getParse().source();\n-            //Cache might contain content from an identical file but another source path.\n-            //The content will have wrong Source attribute and must be invalidated.\n-            if (cacheSource.isPresent() && cacheSource.get().equals(source)) {\n-                cachedBubbles.getAndIncrement();\n-                if (kem.options.warnings2errors) {\n-                    for (KEMException err : parse.getWarnings().stream().map(e -> (KEMException) e).collect(Collectors.toList())) {\n-                        if (kem.options.warnings.includesExceptionType(err.exception.getType())) {\n-                            errors.add(KEMException.asError(err));\n-                        }\n+            cachedBubbles.getAndIncrement();\n+            if (kem.options.warnings2errors) {\n+                for (KEMException err : parse.getWarnings().stream().map(e -> (KEMException) e).collect(Collectors.toList())) {\n+                    if (kem.options.warnings.includesExceptionType(err.exception.getType())) {\n+                        errors.add(KEMException.asError(err));\n                     }\n-                } else\n-                    kem.addAllKException(parse.getWarnings().stream().map(e -> e.getKException()).collect(Collectors.toList()));\n-                return Stream.of(parse.getParse());\n-            }\n+                }\n+            } else\n+                kem.addAllKException(parse.getWarnings().stream().map(e -> e.getKException()).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd3c7ca39dcca44e0cc4b35ab8998b1c2ee61b4f"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3OTY2NDA1", "url": "https://github.com/kframework/k/pull/1327#pullrequestreview-427966405", "createdAt": "2020-06-10T11:37:59Z", "commit": {"oid": "bd3c7ca39dcca44e0cc4b35ab8998b1c2ee61b4f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMTozNzo1OVrOGhw2rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMTo0NDo1OVrOGhxDWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1NjYyMA==", "bodyText": "This error message doesn't really reflect the code, let alone the user input.\nSee my other comment.", "url": "https://github.com/kframework/k/pull/1327#discussion_r438056620", "createdAt": "2020-06-10T11:37:59Z", "author": {"login": "radumereuta"}, "path": "kernel/src/main/java/org/kframework/compile/ResolveStrict.java", "diffHunk": "@@ -193,6 +159,55 @@ public K apply(KVariable var) {\n                 sentences.add(ctx);\n             }\n         }\n+    }\n+\n+    public Set<Sentence> resolve(Production production, boolean sequential) {\n+        long arity = production.nonterminals().size();\n+        List<Integer> strictnessPositions = new ArrayList<>();\n+        List<Integer> allPositions = new ArrayList<>();\n+        Set<ContextAlias> aliases = new HashSet<>();\n+        String attribute;\n+        Set<Sentence> sentences = new HashSet<>();\n+        if (sequential) {\n+            attribute = production.att().get(Att.SEQSTRICT());\n+        } else {\n+            attribute = production.att().get(Att.STRICT());\n+        }\n+        if (attribute.isEmpty()) {\n+            for (int i = 1; i <= arity; i++) {\n+                strictnessPositions.add(i);\n+            }\n+            aliases.add(DEFAULT_ALIAS);\n+            resolve(sequential, sentences, arity, strictnessPositions, allPositions, aliases, production);\n+            allPositions.addAll(strictnessPositions);\n+        } else {\n+            String[] components = attribute.split(\";\");\n+            if (components.length == 1) {\n+                if (Character.isDigit(components[0].trim().charAt(0))) {\n+                    aliases.add(DEFAULT_ALIAS);\n+                    setPositions(components[0].trim(), strictnessPositions, arity, production);\n+                } else {\n+                    for (int i = 1; i <= arity; i++) {\n+                        strictnessPositions.add(i);\n+                    }\n+                    setAliases(components[0].trim(), aliases, production);\n+                }\n+                resolve(sequential, sentences, arity, strictnessPositions, allPositions, aliases, production);\n+                allPositions.addAll(strictnessPositions);\n+            } else if (components.length % 2 == 0) {\n+                for (int i = 0; i < components.length; i+=2) {\n+                    setAliases(components[i].trim(), aliases, production);\n+                    setPositions(components[i+1].trim(), strictnessPositions, arity, production);\n+                    resolve(sequential, sentences, arity, strictnessPositions, allPositions, aliases, production);\n+                    aliases.clear();\n+                    allPositions.addAll(strictnessPositions);\n+                    strictnessPositions.clear();\n+                }\n+            } else {\n+                throw KEMException.compilerError(\"Invalid strict attribute containing multiple semicolons.\", production);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd3c7ca39dcca44e0cc4b35ab8998b1c2ee61b4f"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1OTg2NQ==", "bodyText": "syntax Exp ::= foo(Exp, Exp) [strict(1(left); 2(right)]\n\nWouldn't this be more intuitive? In this case, you might need to add a new parsing entry in Outer.jj, but it shouldn't be that hard.", "url": "https://github.com/kframework/k/pull/1327#discussion_r438059865", "createdAt": "2020-06-10T11:44:59Z", "author": {"login": "radumereuta"}, "path": "pending-documentation.md", "diffHunk": "@@ -459,6 +459,20 @@ each argument of the production, whereas `strict(c; 1)` will instantiate it\n only for the first argument. The special variable `HERE` is used to tell the\n compiler where you want to place the production that is to be heated or cooled.\n \n+You can also specify multiple context aliases for different parts of a production,\n+for example:\n+\n+```k\n+syntax Exp ::= foo(Exp, Exp) [strict(left; 1; right; 2)]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd3c7ca39dcca44e0cc4b35ab8998b1c2ee61b4f"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec076cd077b3b7cc7629a8907b41c1e1574a9ccc", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/ec076cd077b3b7cc7629a8907b41c1e1574a9ccc", "committedDate": "2020-06-10T17:41:23Z", "message": "Update kernel/src/main/java/org/kframework/kompile/DefinitionParsing.java\n\nCo-authored-by: Everett Hildenbrandt <everett.hildenbrandt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4c557103201c9374f3778a405379ae4899b733d", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/f4c557103201c9374f3778a405379ae4899b733d", "committedDate": "2020-06-10T17:54:44Z", "message": "update error msg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70e44497487f7f30ebb0d03bf0dd738ec9606e46", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/70e44497487f7f30ebb0d03bf0dd738ec9606e46", "committedDate": "2020-06-10T17:54:44Z", "message": "update test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4OTQxMjE2", "url": "https://github.com/kframework/k/pull/1327#pullrequestreview-428941216", "createdAt": "2020-06-11T13:58:41Z", "commit": {"oid": "70e44497487f7f30ebb0d03bf0dd738ec9606e46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzo1ODo0MVrOGiet8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzo1ODo0MVrOGiet8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwODA0OA==", "bodyText": "Please write some more tests:\n\nOne which uses 3 context aliases (eg left, right, and center)\nOne which uses the same alias for multiple argument positions: (eg left; 1, 3; right; 2)", "url": "https://github.com/kframework/k/pull/1327#discussion_r438808048", "createdAt": "2020-06-11T13:58:41Z", "author": {"login": "ehildenb"}, "path": "k-distribution/tests/regression-new/context-alias-2/test.k", "diffHunk": "@@ -0,0 +1,24 @@\n+module TEST\n+  imports INT\n+  imports ID\n+  imports MAP\n+\n+  syntax Exp ::= foo(Exp, Exp) [seqstrict(left; 1; right; 2)]\n+               | Id \"=\" Int\n+               | Id\n+               | Int\n+               | l(Exp) [symbol] | r(Exp) [symbol]\n+  syntax KResult ::= Int", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e44497487f7f30ebb0d03bf0dd738ec9606e46"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0e48c7d3d3360b43783466f1d9e151a284bc392", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/b0e48c7d3d3360b43783466f1d9e151a284bc392", "committedDate": "2020-06-11T14:12:57Z", "message": "Merge branch 'master' into alias"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0200cfcade4774b9ecb9539329e40ea1d1be623b", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/0200cfcade4774b9ecb9539329e40ea1d1be623b", "committedDate": "2020-06-11T14:20:41Z", "message": "add tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDM4OTUz", "url": "https://github.com/kframework/k/pull/1327#pullrequestreview-429038953", "createdAt": "2020-06-11T15:38:54Z", "commit": {"oid": "0200cfcade4774b9ecb9539329e40ea1d1be623b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1410a2d82507accf8070aef10e792fb3f47210a2", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/1410a2d82507accf8070aef10e792fb3f47210a2", "committedDate": "2020-06-11T16:45:15Z", "message": "make test not flaky"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e68cccb3574da0da21faec3b8703743108cff077", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/e68cccb3574da0da21faec3b8703743108cff077", "committedDate": "2020-06-11T16:45:23Z", "message": "update test output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afb7166c2ff76c7ae1a505b2ba847fcc21931547", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/afb7166c2ff76c7ae1a505b2ba847fcc21931547", "committedDate": "2020-06-11T17:49:45Z", "message": "update 3_lambda++"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0a4579aacb6dfaf93da632201df0ffef3684d67", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/b0a4579aacb6dfaf93da632201df0ffef3684d67", "committedDate": "2020-06-11T17:49:45Z", "message": "uypdate 4_imp++"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ade5c0f437b65ed5360e184188edf4de9fd26769", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/ade5c0f437b65ed5360e184188edf4de9fd26769", "committedDate": "2020-06-11T17:51:05Z", "message": "update 3_fun"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f5dde48050e5e3d4baa20f29a630b11b9537c1f", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/9f5dde48050e5e3d4baa20f29a630b11b9537c1f", "committedDate": "2020-06-11T21:04:10Z", "message": "1_lambda exercises updated outputs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aa56b75c74951d4b01a43846da3f9509f4df4bc", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/4aa56b75c74951d4b01a43846da3f9509f4df4bc", "committedDate": "2020-06-11T21:04:22Z", "message": "2_imp exercises updated outputs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86151810d63279167a38bbb834e8f261dda7fb32", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/86151810d63279167a38bbb834e8f261dda7fb32", "committedDate": "2020-06-11T21:04:31Z", "message": "3_lambda++ exercises updated outputs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2569efda9f83890e1d36d3039ac78ad8e57f2e8", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/c2569efda9f83890e1d36d3039ac78ad8e57f2e8", "committedDate": "2020-06-11T21:04:40Z", "message": "4_imp++ exercises updated outputs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d20e60b68340d162ed64cbf3bdf6aa0a51fb56d", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/9d20e60b68340d162ed64cbf3bdf6aa0a51fb56d", "committedDate": "2020-06-11T21:04:56Z", "message": "3_fun exercises updated outputs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5ODcwNTcx", "url": "https://github.com/kframework/k/pull/1327#pullrequestreview-429870571", "createdAt": "2020-06-12T16:14:04Z", "commit": {"oid": "9d20e60b68340d162ed64cbf3bdf6aa0a51fb56d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "409491049ac158e8683bc6bf7c8d4565462fcae6", "author": {"user": {"login": "rv-jenkins", "name": null}}, "url": "https://github.com/kframework/k/commit/409491049ac158e8683bc6bf7c8d4565462fcae6", "committedDate": "2020-06-12T21:51:03Z", "message": "Merge branch 'master' into alias"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2389, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}