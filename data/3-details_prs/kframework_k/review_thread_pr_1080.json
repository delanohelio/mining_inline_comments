{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNjI4NjUz", "number": 1080, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDowMjozNVrODc2eqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDoyNToxNFrODdHdJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTc5MzA1OnYy", "diffSide": "RIGHT", "path": "pending-documentation.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDowMjozNVrOFlHf5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDoxNDoyM1rOFlHoZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2NDQ4NQ==", "bodyText": "Should \"admin\" be \"admit\"? I'm not sure what \"admin\" would mean as a verb here (maybe just short for \"administer\")?", "url": "https://github.com/kframework/k/pull/1080#discussion_r374464485", "createdAt": "2020-02-04T04:02:35Z", "author": {"login": "kmbarry1"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admin a single `<set>` instance at", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e1e7fe197009747b2ecdf122bc44e3101273bbd"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2NjY2Mg==", "bodyText": "Yeah it should, fixed.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374466662", "createdAt": "2020-02-04T04:14:23Z", "author": {"login": "ehildenb"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admin a single `<set>` instance at", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2NDQ4NQ=="}, "originalCommit": {"oid": "1e1e7fe197009747b2ecdf122bc44e3101273bbd"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjEzOTcyOnYy", "diffSide": "RIGHT", "path": "pending-documentation.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzo1Mjo0NFrOFlKupg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjowNzoyOFrOFlZ6Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxNzQxNA==", "bodyText": "What is the point of having type Set if we have multiplicity ? ?", "url": "https://github.com/kframework/k/pull/1080#discussion_r374517414", "createdAt": "2020-02-04T07:52:44Z", "author": {"login": "traiansf"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc2NjEzMA==", "bodyText": "Either it exists  or not, I figured. Can we have multiplicity=\"?\" without type=\"Set\"? Not sure.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374766130", "createdAt": "2020-02-04T16:07:28Z", "author": {"login": "ehildenb"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxNzQxNA=="}, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjE0ODM5OnYy", "diffSide": "RIGHT", "path": "pending-documentation.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzo1NjozNVrOFlK0Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjozNzozOFrOFlbEqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxODgwMg==", "bodyText": "Maybe write both list introduction rules?", "url": "https://github.com/kframework/k/pull/1080#discussion_r374518802", "createdAt": "2020-02-04T07:56:35Z", "author": {"login": "traiansf"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxOTA0Mw==", "bodyText": "(and elimination). I know you said it in words, but the rules are faster to comprehend, IMO", "url": "https://github.com/kframework/k/pull/1080#discussion_r374519043", "createdAt": "2020-02-04T07:57:19Z", "author": {"login": "traiansf"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxODgwMg=="}, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NTE5Mw==", "bodyText": "I've added both left and right elim/intro rules.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374785193", "createdAt": "2020-02-04T16:37:38Z", "author": {"login": "ehildenb"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxODgwMg=="}, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjE1Mzg1OnYy", "diffSide": "RIGHT", "path": "pending-documentation.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzo1OToxNFrOFlK3VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo1Mzo1OVrOFlbr4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxOTYzNw==", "bodyText": "The fact that we use .Bag seems a bit confusing...  I would prefer using . without any qualification then .Bag when I think about it as a Set or List, or Map", "url": "https://github.com/kframework/k/pull/1080#discussion_r374519637", "createdAt": "2020-02-04T07:59:14Z", "author": {"login": "traiansf"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc2NjMzOA==", "bodyText": "Well, sure. But I would say open an issue for it rather than fix it before it's documented.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374766338", "createdAt": "2020-02-04T16:07:49Z", "author": {"login": "ehildenb"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxOTYzNw=="}, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NTIzMw==", "bodyText": "it should really be .Cells but yeah, we can change that separately since it's not a backwards compatible change.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374795233", "createdAt": "2020-02-04T16:53:59Z", "author": {"login": "dwightguth"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxOTYzNw=="}, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjE1NzAwOnYy", "diffSide": "RIGHT", "path": "pending-documentation.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwODowMDo0NFrOFlK5Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjoxNzozMFrOFlla8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMDEzMA==", "bodyText": "So the name of the key cell does not have any influence?  Maybe that should be explicitly mentioned.  Would we want to advise as good practice to use a naming convention, though?", "url": "https://github.com/kframework/k/pull/1080#discussion_r374520130", "createdAt": "2020-02-04T08:00:44Z", "author": {"login": "traiansf"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty\n+cell collection in all cases.\n+\n+Declaring `type=\"Map\"` indicates that the first sub-cell will be used as a\n+cell-key. This means that matching on those cells will be done as a map-lookup\n+operation, so rules which match on the subcells _must_ mention the cell-key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMDg3Ng==", "bodyText": "Also, can we have more than two subcells?  As far as I remember, the map values are actually the contents of the entire cell, including the key.   if so, maybe we should say so.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374520876", "createdAt": "2020-02-04T08:02:48Z", "author": {"login": "traiansf"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty\n+cell collection in all cases.\n+\n+Declaring `type=\"Map\"` indicates that the first sub-cell will be used as a\n+cell-key. This means that matching on those cells will be done as a map-lookup\n+operation, so rules which match on the subcells _must_ mention the cell-key.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMDEzMA=="}, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NTU3MA==", "bodyText": "I've added a second sub-cell, and made it clear that the cell names mean nothing. I also mention that the cell map value includes the entire collection cell, though I think that may be confusing for users, but we'll see.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374785570", "createdAt": "2020-02-04T16:38:16Z", "author": {"login": "ehildenb"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty\n+cell collection in all cases.\n+\n+Declaring `type=\"Map\"` indicates that the first sub-cell will be used as a\n+cell-key. This means that matching on those cells will be done as a map-lookup\n+operation, so rules which match on the subcells _must_ mention the cell-key.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMDEzMA=="}, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NTQ4OQ==", "bodyText": "You actually do not need to mention the cell key. It will just do a nondeterministic choice if you don't.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374795489", "createdAt": "2020-02-04T16:54:26Z", "author": {"login": "dwightguth"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty\n+cell collection in all cases.\n+\n+Declaring `type=\"Map\"` indicates that the first sub-cell will be used as a\n+cell-key. This means that matching on those cells will be done as a map-lookup\n+operation, so rules which match on the subcells _must_ mention the cell-key.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMDEzMA=="}, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1NDczOQ==", "bodyText": "Fixed.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374954739", "createdAt": "2020-02-04T22:17:30Z", "author": {"login": "ehildenb"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty\n+cell collection in all cases.\n+\n+Declaring `type=\"Map\"` indicates that the first sub-cell will be used as a\n+cell-key. This means that matching on those cells will be done as a map-lookup\n+operation, so rules which match on the subcells _must_ mention the cell-key.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMDEzMA=="}, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjE2NDI0OnYy", "diffSide": "RIGHT", "path": "pending-documentation.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwODowMzo0OFrOFlK9hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjozNjoyNVrOFlbB7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMTIyMg==", "bodyText": "This rule is interesting, because it says the values would be initialized with the defaults from the initial configuration.  Maybe we should mention that.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374521222", "createdAt": "2020-02-04T08:03:48Z", "author": {"login": "traiansf"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty\n+cell collection in all cases.\n+\n+Declaring `type=\"Map\"` indicates that the first sub-cell will be used as a\n+cell-key. This means that matching on those cells will be done as a map-lookup\n+operation, so rules which match on the subcells _must_ mention the cell-key.\n+\n+For example, the following rules introduce, retrieve from, and eliminate\n+`type=\"Map\"` cells:\n+\n+```k\n+rule <k> introduce-map(I:Int) => . ... </k>\n+     <maps> ... (.Bag => <map> <map-key> I </map-key> ... </map>) ... </maps>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NDQ5NA==", "bodyText": "Added a sentence towards the end explaining what happens when sub-cells are missing.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374784494", "createdAt": "2020-02-04T16:36:25Z", "author": {"login": "ehildenb"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty\n+cell collection in all cases.\n+\n+Declaring `type=\"Map\"` indicates that the first sub-cell will be used as a\n+cell-key. This means that matching on those cells will be done as a map-lookup\n+operation, so rules which match on the subcells _must_ mention the cell-key.\n+\n+For example, the following rules introduce, retrieve from, and eliminate\n+`type=\"Map\"` cells:\n+\n+```k\n+rule <k> introduce-map(I:Int) => . ... </k>\n+     <maps> ... (.Bag => <map> <map-key> I </map-key> ... </map>) ... </maps>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMTIyMg=="}, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjE2OTA5OnYy", "diffSide": "RIGHT", "path": "pending-documentation.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwODowNjowNFrOFlLAlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjozNjoxMFrOFlbBbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMjAwNQ==", "bodyText": "Maybe we should mention the effect that * and ? have on building the initial configuration.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374522005", "createdAt": "2020-02-04T08:06:04Z", "author": {"login": "traiansf"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NDM2Ng==", "bodyText": "Added, please check it.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374784366", "createdAt": "2020-02-04T16:36:10Z", "author": {"login": "ehildenb"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMjAwNQ=="}, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjE3MDk0OnYy", "diffSide": "RIGHT", "path": "pending-documentation.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwODowNjo1MlrOFlLBtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjozNTo1OVrOFlbBDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMjI5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n          \n          \n            \n            Declaring `type=\"Set\"` indicates that duplicate occurrences of the cell should be", "url": "https://github.com/kframework/k/pull/1080#discussion_r374522294", "createdAt": "2020-02-04T08:06:52Z", "author": {"login": "traiansf"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NDI3MQ==", "bodyText": "Fixed.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374784271", "createdAt": "2020-02-04T16:35:59Z", "author": {"login": "ehildenb"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMjI5NA=="}, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzkwNTY3OnYy", "diffSide": "RIGHT", "path": "pending-documentation.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo1NTowN1rOFlbucg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjoxNzowMFrOFllaGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NTg5MA==", "bodyText": "you can only omit cells if you have a ... in the parent.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374795890", "createdAt": "2020-02-04T16:55:07Z", "author": {"login": "dwightguth"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,120 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration. In both cases, the\n+initial configuration will start with 0 instances of the cell collection.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value-1> \"\":String </map-value-1>\n+                  <map-value-2> 0:Int     </map-value-2>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurrences of the cell should\n+be de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list-start(I:Int) => . ... </k>\n+     <lists> (.Bag => <list> I </list>) ... </lists>\n+\n+rule <k> introduce-list-end(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list-start => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+\n+rule <k> eliminate-list-end => I ... </k>\n+     <lists> ... (<list> I </list> => .Bag) </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty\n+cell collection in all cases.\n+\n+Declaring `type=\"Map\"` indicates that the first sub-cell will be used as a\n+cell-key. This means that matching on those cells will be done as a map-lookup\n+operation, so rules which match on the subcells _must_ mention the cell-key.\n+Note that there is no special meaning to the name of the cells (in this case\n+`<map>`, `<map-key>`, `<map-value-1>`, and `<map-value-2>`). Additionally, any\n+number of sub-cells are allowed, and the _entire_ instance of the cell\n+collection is considered part of the cell-value, including the cell-key\n+(`<map-key>` in this case) and the surrounding collection cell (`<map>` in this\n+case).\n+\n+For example, the following rules introduce, set, retrieve from, and eliminate\n+`type=\"Map\"` cells:\n+\n+```k\n+rule <k> introduce-map(I:Int) => . ... </k>\n+     <maps> ... (.Bag => <map> <map-key> I </map-key> ... </map>) ... </maps>\n+\n+rule <k> set-map-value-1(I:Int, S:String) => . ... </k>\n+     <map> <map-key> I </map-key> <map-value-1> _ => S </map-value-1> ... </map>\n+\n+rule <k> set-map-value-2(I:Int, V:Int) => . ... </k>\n+     <map> <map-key> I </map-key> <map-value-2> _ => V </map-value-2> ... </map>\n+\n+rule <k> retrieve-map-value-1(I:Int) => S ... </k>\n+     <map> <map-key> I </map-key> <map-value-1> S </map-value-1> ... </map>\n+\n+rule <k> retrieve-map-value-2(I:Int) => V ... </k>\n+     <map> <map-key> I </map-key> <map-value-2> V </map-value-2> ... </map>\n+\n+rule <k> eliminate-map(I:Int) => . ... </k>\n+     <maps> ... (<map> <map-key> I </map-key> ... </map> => .Bag) ... </maps>\n+```\n+\n+Note how each rule makes sure that `<map-key>` cell is mentioned, and we\n+continue to use `.Bag` to indicate the empty collection. Also note that\n+when introducing new map elements, you may omit any of the sub-cells which are\n+not the cell-key. In case you do omit sub-cells, they will recieve the default\n+value given in the `configuration ...` declaration.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9d81e1f31489ff302d21f8b3cf17b7006524a00"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1NDUyMQ==", "bodyText": "Fixed.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374954521", "createdAt": "2020-02-04T22:17:00Z", "author": {"login": "ehildenb"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,120 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration. In both cases, the\n+initial configuration will start with 0 instances of the cell collection.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value-1> \"\":String </map-value-1>\n+                  <map-value-2> 0:Int     </map-value-2>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurrences of the cell should\n+be de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list-start(I:Int) => . ... </k>\n+     <lists> (.Bag => <list> I </list>) ... </lists>\n+\n+rule <k> introduce-list-end(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list-start => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+\n+rule <k> eliminate-list-end => I ... </k>\n+     <lists> ... (<list> I </list> => .Bag) </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty\n+cell collection in all cases.\n+\n+Declaring `type=\"Map\"` indicates that the first sub-cell will be used as a\n+cell-key. This means that matching on those cells will be done as a map-lookup\n+operation, so rules which match on the subcells _must_ mention the cell-key.\n+Note that there is no special meaning to the name of the cells (in this case\n+`<map>`, `<map-key>`, `<map-value-1>`, and `<map-value-2>`). Additionally, any\n+number of sub-cells are allowed, and the _entire_ instance of the cell\n+collection is considered part of the cell-value, including the cell-key\n+(`<map-key>` in this case) and the surrounding collection cell (`<map>` in this\n+case).\n+\n+For example, the following rules introduce, set, retrieve from, and eliminate\n+`type=\"Map\"` cells:\n+\n+```k\n+rule <k> introduce-map(I:Int) => . ... </k>\n+     <maps> ... (.Bag => <map> <map-key> I </map-key> ... </map>) ... </maps>\n+\n+rule <k> set-map-value-1(I:Int, S:String) => . ... </k>\n+     <map> <map-key> I </map-key> <map-value-1> _ => S </map-value-1> ... </map>\n+\n+rule <k> set-map-value-2(I:Int, V:Int) => . ... </k>\n+     <map> <map-key> I </map-key> <map-value-2> _ => V </map-value-2> ... </map>\n+\n+rule <k> retrieve-map-value-1(I:Int) => S ... </k>\n+     <map> <map-key> I </map-key> <map-value-1> S </map-value-1> ... </map>\n+\n+rule <k> retrieve-map-value-2(I:Int) => V ... </k>\n+     <map> <map-key> I </map-key> <map-value-2> V </map-value-2> ... </map>\n+\n+rule <k> eliminate-map(I:Int) => . ... </k>\n+     <maps> ... (<map> <map-key> I </map-key> ... </map> => .Bag) ... </maps>\n+```\n+\n+Note how each rule makes sure that `<map-key>` cell is mentioned, and we\n+continue to use `.Bag` to indicate the empty collection. Also note that\n+when introducing new map elements, you may omit any of the sub-cells which are\n+not the cell-key. In case you do omit sub-cells, they will recieve the default\n+value given in the `configuration ...` declaration.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NTg5MA=="}, "originalCommit": {"oid": "e9d81e1f31489ff302d21f8b3cf17b7006524a00"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODU3NDQ1OnYy", "diffSide": "RIGHT", "path": "pending-documentation.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDoyNToxNVrOFliS5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjoxNzowNVrOFllaTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwMzUyNg==", "bodyText": "this is not true. If a multiplicity cell contains configuration variables it will start with exactly one instance of that cell.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374903526", "createdAt": "2020-02-04T20:25:15Z", "author": {"login": "dwightguth"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,120 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration. In both cases, the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9d81e1f31489ff302d21f8b3cf17b7006524a00"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1NDU3Mg==", "bodyText": "Fixed.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374954572", "createdAt": "2020-02-04T22:17:05Z", "author": {"login": "ehildenb"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,120 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration. In both cases, the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwMzUyNg=="}, "originalCommit": {"oid": "e9d81e1f31489ff302d21f8b3cf17b7006524a00"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3161, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}