{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2OTc5NDA4", "number": 1225, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTo1NDoyNFrOD0krTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTo1NDoyNFrOD0krTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDUzNDUyOnYy", "diffSide": "RIGHT", "path": "kernel/src/main/java/org/kframework/backend/kore/ModuleToKORE.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTo1NDoyNFrOGJkmFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDoyNzoxN1rOGJ5awQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4OTk0MQ==", "bodyText": "I agree with you that the in_keys condition would require the variables to be defined anyway.\nWhy then keep the definedness conditions?", "url": "https://github.com/kframework/k/pull/1225#discussion_r412689941", "createdAt": "2020-04-22T05:54:24Z", "author": {"login": "traiansf"}, "path": "kernel/src/main/java/org/kframework/backend/kore/ModuleToKORE.java", "diffHunk": "@@ -598,69 +598,33 @@ private void genMapCeilAxioms(Production prod, Collection<Rule> rules) {\n         Seq<NonTerminal> nonterminals = elementProd.nonterminals();\n         Sort sortParam = Sort(AddSortInjections.SORTPARAM_NAME, Sort(\"Q\"));\n \n-        List<K> args = new ArrayList<>();\n-        for (int i = 0; i< nonterminals.length(); i++) {\n-            Sort sort = nonterminals.apply(i).sort();\n-            args.add(KVariable(\"K\" + i, Att.empty().add(Sort.class, sort)));\n-        } // variable arguments for MapItem (K1 is the key)\n-        Seq<K> argsSeq = JavaConverters.iterableAsScalaIterable(args).toSeq();\n-        K restMap = KVariable(\"Rest\", Att.empty().add(Sort.class, mapSort));\n-\n-        // rule K1:KItem in_keys(MapItem(K1, K2, .., Kn) Rest:Map) => true\n-        Rule inKeysRule1 = Rule(\n-                KRewrite(\n-                        KApply(prod.klabel().get(),\n-                                args.get(0),\n-                                KApply(concatProd.klabel().get(),\n-                                        KApply(elementProd.klabel().get(),\n-                                                argsSeq,\n-                                                Att.empty()\n-                                        ),\n-                                        restMap\n-                                )\n-                        ),\n-                        BooleanUtils.TRUE\n-                ),\n-                BooleanUtils.TRUE,\n-                BooleanUtils.TRUE\n-        );\n-        rules.add(inKeysRule1);\n-\n-        // rule K1:KItem in_keys(Rest:Map) => false [owise]\n-        Rule inKeysRule2 = Rule(\n-                KRewrite(\n-                        KApply(prod.klabel().get(),\n-                                args.get(0),\n-                                restMap\n-                        ),\n-                        BooleanUtils.FALSE\n-                ),\n-                BooleanUtils.TRUE,\n-                BooleanUtils.TRUE,\n-                Att.empty().add(\"owise\")\n-        );\n-        rules.add(inKeysRule2);\n+        // rule\n+        //   #Ceil(MapItem(K1, K2, ..., Kn) Rest:Map)\n+        // =>\n+        //  {(@K1 in_keys(@Rest)) #Equals false} #And ... #And #Ceil(@Kn)\n+        // Note: The {_ in_Keys(_) #Equals false} condition implies\n+        // #Ceil(@K1) and #Ceil(@Rest).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8ca65f5c6ff32c1a55c72c4555108e32fc4d0c5"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzMTEwNQ==", "bodyText": "Only the definedness conditions #Ceil(@K2) #And ... #And #Ceil(@Kn) are present; I will update the comment to clarify.", "url": "https://github.com/kframework/k/pull/1225#discussion_r413031105", "createdAt": "2020-04-22T14:27:17Z", "author": {"login": "ttuegel"}, "path": "kernel/src/main/java/org/kframework/backend/kore/ModuleToKORE.java", "diffHunk": "@@ -598,69 +598,33 @@ private void genMapCeilAxioms(Production prod, Collection<Rule> rules) {\n         Seq<NonTerminal> nonterminals = elementProd.nonterminals();\n         Sort sortParam = Sort(AddSortInjections.SORTPARAM_NAME, Sort(\"Q\"));\n \n-        List<K> args = new ArrayList<>();\n-        for (int i = 0; i< nonterminals.length(); i++) {\n-            Sort sort = nonterminals.apply(i).sort();\n-            args.add(KVariable(\"K\" + i, Att.empty().add(Sort.class, sort)));\n-        } // variable arguments for MapItem (K1 is the key)\n-        Seq<K> argsSeq = JavaConverters.iterableAsScalaIterable(args).toSeq();\n-        K restMap = KVariable(\"Rest\", Att.empty().add(Sort.class, mapSort));\n-\n-        // rule K1:KItem in_keys(MapItem(K1, K2, .., Kn) Rest:Map) => true\n-        Rule inKeysRule1 = Rule(\n-                KRewrite(\n-                        KApply(prod.klabel().get(),\n-                                args.get(0),\n-                                KApply(concatProd.klabel().get(),\n-                                        KApply(elementProd.klabel().get(),\n-                                                argsSeq,\n-                                                Att.empty()\n-                                        ),\n-                                        restMap\n-                                )\n-                        ),\n-                        BooleanUtils.TRUE\n-                ),\n-                BooleanUtils.TRUE,\n-                BooleanUtils.TRUE\n-        );\n-        rules.add(inKeysRule1);\n-\n-        // rule K1:KItem in_keys(Rest:Map) => false [owise]\n-        Rule inKeysRule2 = Rule(\n-                KRewrite(\n-                        KApply(prod.klabel().get(),\n-                                args.get(0),\n-                                restMap\n-                        ),\n-                        BooleanUtils.FALSE\n-                ),\n-                BooleanUtils.TRUE,\n-                BooleanUtils.TRUE,\n-                Att.empty().add(\"owise\")\n-        );\n-        rules.add(inKeysRule2);\n+        // rule\n+        //   #Ceil(MapItem(K1, K2, ..., Kn) Rest:Map)\n+        // =>\n+        //  {(@K1 in_keys(@Rest)) #Equals false} #And ... #And #Ceil(@Kn)\n+        // Note: The {_ in_Keys(_) #Equals false} condition implies\n+        // #Ceil(@K1) and #Ceil(@Rest).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4OTk0MQ=="}, "originalCommit": {"oid": "f8ca65f5c6ff32c1a55c72c4555108e32fc4d0c5"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3122, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}