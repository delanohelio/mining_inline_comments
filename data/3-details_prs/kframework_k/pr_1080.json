{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNjI4NjUz", "number": 1080, "title": "Collection cell documenation", "bodyText": "We're missing documentation of cell collection attributes.\nI added some explanatory text, and some simple examples.", "createdAt": "2020-02-04T03:28:08Z", "url": "https://github.com/kframework/k/pull/1080", "merged": true, "mergeCommit": {"oid": "7cc7208f561b5d0b7a434d0c92033c1dc4aa41b6"}, "closed": true, "closedAt": "2020-02-05T23:54:21Z", "author": {"login": "ehildenb"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcA4mrogH2gAyMzcwNjI4NjUzOjlhNWU5NDc1ZGNiMmRmYWEzZmMwZjA1NWFkNTJiMzMxMzdjMGJjZDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBdyB9AH2gAyMzcwNjI4NjUzOjZhNTAwN2NjMzk4ZWY1ZWU3ZWFlYTlhMDQzNjMzNThkZTE3MWMzOTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9a5e9475dcb2dfaa3fc0f055ad52b33137c0bcd9", "author": {"user": {"login": "ehildenb", "name": "Everett Hildenbrandt"}}, "url": "https://github.com/kframework/k/commit/9a5e9475dcb2dfaa3fc0f055ad52b33137c0bcd9", "committedDate": "2020-02-04T03:03:01Z", "message": "pending-documentation: add example of exit attribute on configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e1e7fe197009747b2ecdf122bc44e3101273bbd", "author": {"user": {"login": "ehildenb", "name": "Everett Hildenbrandt"}}, "url": "https://github.com/kframework/k/commit/1e1e7fe197009747b2ecdf122bc44e3101273bbd", "committedDate": "2020-02-04T03:27:10Z", "message": "pending-documentation: add documentation for cell collections"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzEyNjQw", "url": "https://github.com/kframework/k/pull/1080#pullrequestreview-352712640", "createdAt": "2020-02-04T04:02:35Z", "commit": {"oid": "1e1e7fe197009747b2ecdf122bc44e3101273bbd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDowMjozNVrOFlHf5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDowMjozNVrOFlHf5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2NDQ4NQ==", "bodyText": "Should \"admin\" be \"admit\"? I'm not sure what \"admin\" would mean as a verb here (maybe just short for \"administer\")?", "url": "https://github.com/kframework/k/pull/1080#discussion_r374464485", "createdAt": "2020-02-04T04:02:35Z", "author": {"login": "kmbarry1"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admin a single `<set>` instance at", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e1e7fe197009747b2ecdf122bc44e3101273bbd"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5", "author": {"user": {"login": "ehildenb", "name": "Everett Hildenbrandt"}}, "url": "https://github.com/kframework/k/commit/a858c05ee326776b8f5a23909b73dda155d497f5", "committedDate": "2020-02-04T04:14:00Z", "message": "pending-documentation: typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzc2NTQ2", "url": "https://github.com/kframework/k/pull/1080#pullrequestreview-352776546", "createdAt": "2020-02-04T07:52:43Z", "commit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "state": "APPROVED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzo1Mjo0NFrOFlKupg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwODowNjo1MlrOFlLBtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxNzQxNA==", "bodyText": "What is the point of having type Set if we have multiplicity ? ?", "url": "https://github.com/kframework/k/pull/1080#discussion_r374517414", "createdAt": "2020-02-04T07:52:44Z", "author": {"login": "traiansf"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxODgwMg==", "bodyText": "Maybe write both list introduction rules?", "url": "https://github.com/kframework/k/pull/1080#discussion_r374518802", "createdAt": "2020-02-04T07:56:35Z", "author": {"login": "traiansf"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxOTA0Mw==", "bodyText": "(and elimination). I know you said it in words, but the rules are faster to comprehend, IMO", "url": "https://github.com/kframework/k/pull/1080#discussion_r374519043", "createdAt": "2020-02-04T07:57:19Z", "author": {"login": "traiansf"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxODgwMg=="}, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxOTYzNw==", "bodyText": "The fact that we use .Bag seems a bit confusing...  I would prefer using . without any qualification then .Bag when I think about it as a Set or List, or Map", "url": "https://github.com/kframework/k/pull/1080#discussion_r374519637", "createdAt": "2020-02-04T07:59:14Z", "author": {"login": "traiansf"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMDEzMA==", "bodyText": "So the name of the key cell does not have any influence?  Maybe that should be explicitly mentioned.  Would we want to advise as good practice to use a naming convention, though?", "url": "https://github.com/kframework/k/pull/1080#discussion_r374520130", "createdAt": "2020-02-04T08:00:44Z", "author": {"login": "traiansf"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty\n+cell collection in all cases.\n+\n+Declaring `type=\"Map\"` indicates that the first sub-cell will be used as a\n+cell-key. This means that matching on those cells will be done as a map-lookup\n+operation, so rules which match on the subcells _must_ mention the cell-key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMDg3Ng==", "bodyText": "Also, can we have more than two subcells?  As far as I remember, the map values are actually the contents of the entire cell, including the key.   if so, maybe we should say so.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374520876", "createdAt": "2020-02-04T08:02:48Z", "author": {"login": "traiansf"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty\n+cell collection in all cases.\n+\n+Declaring `type=\"Map\"` indicates that the first sub-cell will be used as a\n+cell-key. This means that matching on those cells will be done as a map-lookup\n+operation, so rules which match on the subcells _must_ mention the cell-key.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMDEzMA=="}, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMTIyMg==", "bodyText": "This rule is interesting, because it says the values would be initialized with the defaults from the initial configuration.  Maybe we should mention that.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374521222", "createdAt": "2020-02-04T08:03:48Z", "author": {"login": "traiansf"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty\n+cell collection in all cases.\n+\n+Declaring `type=\"Map\"` indicates that the first sub-cell will be used as a\n+cell-key. This means that matching on those cells will be done as a map-lookup\n+operation, so rules which match on the subcells _must_ mention the cell-key.\n+\n+For example, the following rules introduce, retrieve from, and eliminate\n+`type=\"Map\"` cells:\n+\n+```k\n+rule <k> introduce-map(I:Int) => . ... </k>\n+     <maps> ... (.Bag => <map> <map-key> I </map-key> ... </map>) ... </maps>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMjAwNQ==", "bodyText": "Maybe we should mention the effect that * and ? have on building the initial configuration.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374522005", "createdAt": "2020-02-04T08:06:04Z", "author": {"login": "traiansf"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMjI5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n          \n          \n            \n            Declaring `type=\"Set\"` indicates that duplicate occurrences of the cell should be", "url": "https://github.com/kframework/k/pull/1080#discussion_r374522294", "createdAt": "2020-02-04T08:06:52Z", "author": {"login": "traiansf"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "858d2b9c83258f07217f546f35529fcc550dcb9c", "author": {"user": {"login": "ehildenb", "name": "Everett Hildenbrandt"}}, "url": "https://github.com/kframework/k/commit/858d2b9c83258f07217f546f35529fcc550dcb9c", "committedDate": "2020-02-04T16:25:51Z", "message": "pending-documentation: add start and end list intro/elim rules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7c41e5d47bffd52932e5b246dd369251798c8e0", "author": {"user": {"login": "ehildenb", "name": "Everett Hildenbrandt"}}, "url": "https://github.com/kframework/k/commit/b7c41e5d47bffd52932e5b246dd369251798c8e0", "committedDate": "2020-02-04T16:33:36Z", "message": "pending-documentation: more thorough documentation about cell maps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e96c5e715d31b71d93985e43275972f79bc17160", "author": {"user": {"login": "ehildenb", "name": "Everett Hildenbrandt"}}, "url": "https://github.com/kframework/k/commit/e96c5e715d31b71d93985e43275972f79bc17160", "committedDate": "2020-02-04T16:34:49Z", "message": "pending-documentation: initial configuration for cell collections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9d81e1f31489ff302d21f8b3cf17b7006524a00", "author": {"user": {"login": "ehildenb", "name": "Everett Hildenbrandt"}}, "url": "https://github.com/kframework/k/commit/e9d81e1f31489ff302d21f8b3cf17b7006524a00", "committedDate": "2020-02-04T16:35:25Z", "message": "pending-documentation: typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMjUzOTQ0", "url": "https://github.com/kframework/k/pull/1080#pullrequestreview-353253944", "createdAt": "2020-02-04T19:47:59Z", "commit": {"oid": "e9d81e1f31489ff302d21f8b3cf17b7006524a00"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTM4NTYx", "url": "https://github.com/kframework/k/pull/1080#pullrequestreview-353138561", "createdAt": "2020-02-04T16:53:58Z", "commit": {"oid": "e9d81e1f31489ff302d21f8b3cf17b7006524a00"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo1Mzo1OVrOFlbr4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo1NTowN1rOFlbucg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NTIzMw==", "bodyText": "it should really be .Cells but yeah, we can change that separately since it's not a backwards compatible change.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374795233", "createdAt": "2020-02-04T16:53:59Z", "author": {"login": "dwightguth"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxOTYzNw=="}, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NTQ4OQ==", "bodyText": "You actually do not need to mention the cell key. It will just do a nondeterministic choice if you don't.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374795489", "createdAt": "2020-02-04T16:54:26Z", "author": {"login": "dwightguth"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty\n+cell collection in all cases.\n+\n+Declaring `type=\"Map\"` indicates that the first sub-cell will be used as a\n+cell-key. This means that matching on those cells will be done as a map-lookup\n+operation, so rules which match on the subcells _must_ mention the cell-key.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMDEzMA=="}, "originalCommit": {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NTg5MA==", "bodyText": "you can only omit cells if you have a ... in the parent.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374795890", "createdAt": "2020-02-04T16:55:07Z", "author": {"login": "dwightguth"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,120 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration. In both cases, the\n+initial configuration will start with 0 instances of the cell collection.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value-1> \"\":String </map-value-1>\n+                  <map-value-2> 0:Int     </map-value-2>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurrences of the cell should\n+be de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list-start(I:Int) => . ... </k>\n+     <lists> (.Bag => <list> I </list>) ... </lists>\n+\n+rule <k> introduce-list-end(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list-start => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+\n+rule <k> eliminate-list-end => I ... </k>\n+     <lists> ... (<list> I </list> => .Bag) </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty\n+cell collection in all cases.\n+\n+Declaring `type=\"Map\"` indicates that the first sub-cell will be used as a\n+cell-key. This means that matching on those cells will be done as a map-lookup\n+operation, so rules which match on the subcells _must_ mention the cell-key.\n+Note that there is no special meaning to the name of the cells (in this case\n+`<map>`, `<map-key>`, `<map-value-1>`, and `<map-value-2>`). Additionally, any\n+number of sub-cells are allowed, and the _entire_ instance of the cell\n+collection is considered part of the cell-value, including the cell-key\n+(`<map-key>` in this case) and the surrounding collection cell (`<map>` in this\n+case).\n+\n+For example, the following rules introduce, set, retrieve from, and eliminate\n+`type=\"Map\"` cells:\n+\n+```k\n+rule <k> introduce-map(I:Int) => . ... </k>\n+     <maps> ... (.Bag => <map> <map-key> I </map-key> ... </map>) ... </maps>\n+\n+rule <k> set-map-value-1(I:Int, S:String) => . ... </k>\n+     <map> <map-key> I </map-key> <map-value-1> _ => S </map-value-1> ... </map>\n+\n+rule <k> set-map-value-2(I:Int, V:Int) => . ... </k>\n+     <map> <map-key> I </map-key> <map-value-2> _ => V </map-value-2> ... </map>\n+\n+rule <k> retrieve-map-value-1(I:Int) => S ... </k>\n+     <map> <map-key> I </map-key> <map-value-1> S </map-value-1> ... </map>\n+\n+rule <k> retrieve-map-value-2(I:Int) => V ... </k>\n+     <map> <map-key> I </map-key> <map-value-2> V </map-value-2> ... </map>\n+\n+rule <k> eliminate-map(I:Int) => . ... </k>\n+     <maps> ... (<map> <map-key> I </map-key> ... </map> => .Bag) ... </maps>\n+```\n+\n+Note how each rule makes sure that `<map-key>` cell is mentioned, and we\n+continue to use `.Bag` to indicate the empty collection. Also note that\n+when introducing new map elements, you may omit any of the sub-cells which are\n+not the cell-key. In case you do omit sub-cells, they will recieve the default\n+value given in the `configuration ...` declaration.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9d81e1f31489ff302d21f8b3cf17b7006524a00"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMjc2NjI4", "url": "https://github.com/kframework/k/pull/1080#pullrequestreview-353276628", "createdAt": "2020-02-04T20:25:14Z", "commit": {"oid": "e9d81e1f31489ff302d21f8b3cf17b7006524a00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDoyNToxNVrOFliS5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDoyNToxNVrOFliS5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwMzUyNg==", "bodyText": "this is not true. If a multiplicity cell contains configuration variables it will start with exactly one instance of that cell.", "url": "https://github.com/kframework/k/pull/1080#discussion_r374903526", "createdAt": "2020-02-04T20:25:15Z", "author": {"login": "dwightguth"}, "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,120 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration. In both cases, the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9d81e1f31489ff302d21f8b3cf17b7006524a00"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26ae2c34a4f7c9a481472247acb09964efce478a", "author": {"user": {"login": "ehildenb", "name": "Everett Hildenbrandt"}}, "url": "https://github.com/kframework/k/commit/26ae2c34a4f7c9a481472247acb09964efce478a", "committedDate": "2020-02-04T22:16:39Z", "message": "pending-documentation: correct documentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzOTQ1MzQz", "url": "https://github.com/kframework/k/pull/1080#pullrequestreview-353945343", "createdAt": "2020-02-05T18:33:00Z", "commit": {"oid": "26ae2c34a4f7c9a481472247acb09964efce478a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a5007cc398ef5ee7eaea9a04363358de171c397", "author": {"user": {"login": "rv-jenkins", "name": null}}, "url": "https://github.com/kframework/k/commit/6a5007cc398ef5ee7eaea9a04363358de171c397", "committedDate": "2020-02-05T22:21:54Z", "message": "Merge branch 'master' into collection-cell-docs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2503, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}