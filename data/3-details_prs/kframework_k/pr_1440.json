{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxMzU5Mzkz", "number": 1440, "title": "Migrate ffi.k to ffi.md", "bodyText": "I am going to do these one at a time with one PR per file. I am starting with the less-used modules since they are less complex.", "createdAt": "2020-07-17T18:47:46Z", "url": "https://github.com/kframework/k/pull/1440", "merged": true, "mergeCommit": {"oid": "e160771bb4ff5cb05df39f8353f13731e65ac453"}, "closed": true, "closedAt": "2020-07-17T23:21:49Z", "author": {"login": "dwightguth"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc13sd4gH2gAyNDUxMzU5MzkzOjBiNWRjMDk2MWMzNzZmOTA0YTY5Yzg1ZDAyODhkYTA3OTMwZWRiNjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc17CPhgH2gAyNDUxMzU5MzkzOjk3ZjE1MmQ1MGZiMDk5NWMyYTYwOWFkZGIyOGI5YzUwY2Q3Y2FiMzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0b5dc0961c376f904a69c85d0288da07930edb64", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/0b5dc0961c376f904a69c85d0288da07930edb64", "committedDate": "2020-07-17T17:57:25Z", "message": "remove unused files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73d1d99080b4c0511fff9bb45b9f80c01a50ba32", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/73d1d99080b4c0511fff9bb45b9f80c01a50ba32", "committedDate": "2020-07-17T18:33:02Z", "message": "rename ffi.k to ffi.md and add documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abb52279635f617bce835a8b1e200b56ffa5c99a", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/abb52279635f617bce835a8b1e200b56ffa5c99a", "committedDate": "2020-07-17T18:33:14Z", "message": "update requires statements referencing ffi.k"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2225d72f63f662b2ca93a2f3298c81feb414fcd8", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/2225d72f63f662b2ca93a2f3298c81feb414fcd8", "committedDate": "2020-07-17T18:42:29Z", "message": "move builtin directories before other directories in include path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e63d596312035d021fc56814afeb7359c3dea9c6", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/e63d596312035d021fc56814afeb7359c3dea9c6", "committedDate": "2020-07-17T18:46:00Z", "message": "add warning for deprecated filename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cd6dc6d9da9ca8cddda547d6d7590e8bc31d7c0", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/2cd6dc6d9da9ca8cddda547d6d7590e8bc31d7c0", "committedDate": "2020-07-17T18:46:00Z", "message": "add test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTI2NzIy", "url": "https://github.com/kframework/k/pull/1440#pullrequestreview-450926722", "createdAt": "2020-07-17T20:05:12Z", "commit": {"oid": "2cd6dc6d9da9ca8cddda547d6d7590e8bc31d7c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDowNToxMlrOGzfspw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDowNToxMlrOGzfspw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0OTg5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ```k\n          \n          \n            \n                             | \"#ffiCall\" \"(\" Int \",\" List \",\" List \",\" List \",\" FFIType \")\" [function, hook(FFI.call_variadic)]\n          \n          \n            \n            ```\n          \n          \n            \n            ```k\n          \n          \n            \n              syntax Bytes ::= \"#ffiCall\" \"(\" Int \",\" List \",\" List \",\" List \",\" FFIType \")\" [function, hook(FFI.call_variadic)]", "url": "https://github.com/kframework/k/pull/1440#discussion_r456649895", "createdAt": "2020-07-17T20:05:12Z", "author": {"login": "ehildenb"}, "path": "k-distribution/include/kframework/builtin/ffi.md", "diffHunk": "@@ -0,0 +1,177 @@\n+---\n+permalink: ffi.html\n+copyright: Copyright (c) 2019-2020 K Team. All Rights Reserved.\n+---\n+\n+K Foreign Function Interface\n+============================\n+\n+The K Foreign Function Interface (FFI) module provides a way to call native\n+functions directly from a K semantics using the C ABI. It also provides\n+utilities for allocating and deallocating byte buffers with static addresses\n+that are suitable for being passed to native code.\n+\n+It is built off of the underlying libffi library\n+(https://sourceware.org/libffi/) and is subject to some of the same\n+limitations as that library. Bear in mind, because this library exposes\n+a number of unsafe C APIs directly, misuse of the library is likely to lead\n+to memory corruption in your interpreter and can cause segmentation faults or\n+corrupted term representations that lead to undefined behavior at runtime.\n+\n+```k\n+require \"domains.k\"\n+\n+module FFI-SYNTAX\n+  imports LIST\n+```\n+\n+The FFIType sort is used to declare the native C ABI types of operands passed\n+to the `#ffiCall` function. These types roughly correspond to the types \n+declared in `ffi.h` by libffi.\n+\n+```k\n+  syntax FFIType ::= \"#void\" [klabel(#void), symbol]\n+                  | \"#uint8\" [klabel(#uint8), symbol]\n+                  | \"#sint8\" [klabel(#sint8), symbol]\n+                  | \"#uint16\" [klabel(#uint16), symbol]\n+                  | \"#sint16\" [klabel(#sint16), symbol]\n+                  | \"#uint32\" [klabel(#uint32), symbol]\n+                  | \"#sint32\" [klabel(#sint32), symbol]\n+                  | \"#uint64\" [klabel(#uint64), symbol]\n+                  | \"#sint64\" [klabel(#sint64), symbol]\n+                  | \"#float\" [klabel(#float), symbol]\n+                  | \"#double\" [klabel(#double), symbol]\n+                  | \"#uchar\" [klabel(#uchar), symbol]\n+                  | \"#schar\" [klabel(#schar), symbol]\n+                  | \"#ushort\" [klabel(#ushort), symbol]\n+                  | \"#sshort\" [klabel(#sshort), symbol]\n+                  | \"#uint\" [klabel(#uint), symbol]\n+                  | \"#sint\" [klabel(#sint), symbol]\n+                  | \"#ulong\" [klabel(#ulong), symbol]\n+                  | \"#slong\" [klabel(#slong), symbol]\n+                  | \"#longdouble\" [klabel(#longdouble), symbol]\n+                  | \"#struct\" \"(\" List \")\" [klabel(#struct), symbol]\n+endmodule\n+\n+module FFI\n+  imports FFI-SYNTAX\n+  imports BYTES\n+  imports STRING\n+\n+```\n+\n+FFI Calls\n+---------\n+\n+The `#ffiCall` functions are designed to call a native C ABI function and \n+return a native result. They come in three variants:\n+\n+### Non-variadic\n+\n+In the first variant, `#ffiCall(Address, Args, ArgTypes, ReturnType)` takes\n+an integer address of a function (which can be obtained from\n+`#functionAddress`), a `List` of `Bytes` containing the arguments of the\n+function, a `List` of `FFIType`s containing the types of the parameters of the\n+function, and an `FFIType` containing the return type of the function, and \n+returns the return value of the function as a `Bytes`.\n+\n+```k\n+  syntax Bytes ::= \"#ffiCall\" \"(\" Int \",\" List \",\" List \",\" FFIType \")\" [function, hook(FFI.call)]\n+```\n+\n+### Variadic\n+\n+In the second variant,\n+`#ffiCall(Address, Args, FixedTypes, VariadicTypes, ReturnType` takes an\n+integer address of a function, a `List` of `Bytes` containing the arguments\n+of the call, a `List` of `FFIType`s containing the types of the fixed\n+parameters of the function, a `List` of `FFIType`s containing the types of the\n+variadic parameters of the function, and an `FFIType` containing the return\n+type of the function, and returns the return value of the function as a\n+`Bytes`.\n+\n+```k\n+                 | \"#ffiCall\" \"(\" Int \",\" List \",\" List \",\" List \",\" FFIType \")\" [function, hook(FFI.call_variadic)]\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd6dc6d9da9ca8cddda547d6d7590e8bc31d7c0"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTI3MDg4", "url": "https://github.com/kframework/k/pull/1440#pullrequestreview-450927088", "createdAt": "2020-07-17T20:05:50Z", "commit": {"oid": "2cd6dc6d9da9ca8cddda547d6d7590e8bc31d7c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDowNTo1MFrOGzftsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDowNTo1MFrOGzftsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1MDE2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                             | \"#ffiCall\" \"(\" Bool \",\" Int \",\" List \",\" List \",\" Int \",\" FFIType \")\" [function]\n          \n          \n            \n              syntax Bytes ::= \"#ffiCall\" \"(\" Bool \",\" Int \",\" List \",\" List \",\" Int \",\" FFIType \")\" [function]", "url": "https://github.com/kframework/k/pull/1440#discussion_r456650160", "createdAt": "2020-07-17T20:05:50Z", "author": {"login": "ehildenb"}, "path": "k-distribution/include/kframework/builtin/ffi.md", "diffHunk": "@@ -0,0 +1,177 @@\n+---\n+permalink: ffi.html\n+copyright: Copyright (c) 2019-2020 K Team. All Rights Reserved.\n+---\n+\n+K Foreign Function Interface\n+============================\n+\n+The K Foreign Function Interface (FFI) module provides a way to call native\n+functions directly from a K semantics using the C ABI. It also provides\n+utilities for allocating and deallocating byte buffers with static addresses\n+that are suitable for being passed to native code.\n+\n+It is built off of the underlying libffi library\n+(https://sourceware.org/libffi/) and is subject to some of the same\n+limitations as that library. Bear in mind, because this library exposes\n+a number of unsafe C APIs directly, misuse of the library is likely to lead\n+to memory corruption in your interpreter and can cause segmentation faults or\n+corrupted term representations that lead to undefined behavior at runtime.\n+\n+```k\n+require \"domains.k\"\n+\n+module FFI-SYNTAX\n+  imports LIST\n+```\n+\n+The FFIType sort is used to declare the native C ABI types of operands passed\n+to the `#ffiCall` function. These types roughly correspond to the types \n+declared in `ffi.h` by libffi.\n+\n+```k\n+  syntax FFIType ::= \"#void\" [klabel(#void), symbol]\n+                  | \"#uint8\" [klabel(#uint8), symbol]\n+                  | \"#sint8\" [klabel(#sint8), symbol]\n+                  | \"#uint16\" [klabel(#uint16), symbol]\n+                  | \"#sint16\" [klabel(#sint16), symbol]\n+                  | \"#uint32\" [klabel(#uint32), symbol]\n+                  | \"#sint32\" [klabel(#sint32), symbol]\n+                  | \"#uint64\" [klabel(#uint64), symbol]\n+                  | \"#sint64\" [klabel(#sint64), symbol]\n+                  | \"#float\" [klabel(#float), symbol]\n+                  | \"#double\" [klabel(#double), symbol]\n+                  | \"#uchar\" [klabel(#uchar), symbol]\n+                  | \"#schar\" [klabel(#schar), symbol]\n+                  | \"#ushort\" [klabel(#ushort), symbol]\n+                  | \"#sshort\" [klabel(#sshort), symbol]\n+                  | \"#uint\" [klabel(#uint), symbol]\n+                  | \"#sint\" [klabel(#sint), symbol]\n+                  | \"#ulong\" [klabel(#ulong), symbol]\n+                  | \"#slong\" [klabel(#slong), symbol]\n+                  | \"#longdouble\" [klabel(#longdouble), symbol]\n+                  | \"#struct\" \"(\" List \")\" [klabel(#struct), symbol]\n+endmodule\n+\n+module FFI\n+  imports FFI-SYNTAX\n+  imports BYTES\n+  imports STRING\n+\n+```\n+\n+FFI Calls\n+---------\n+\n+The `#ffiCall` functions are designed to call a native C ABI function and \n+return a native result. They come in three variants:\n+\n+### Non-variadic\n+\n+In the first variant, `#ffiCall(Address, Args, ArgTypes, ReturnType)` takes\n+an integer address of a function (which can be obtained from\n+`#functionAddress`), a `List` of `Bytes` containing the arguments of the\n+function, a `List` of `FFIType`s containing the types of the parameters of the\n+function, and an `FFIType` containing the return type of the function, and \n+returns the return value of the function as a `Bytes`.\n+\n+```k\n+  syntax Bytes ::= \"#ffiCall\" \"(\" Int \",\" List \",\" List \",\" FFIType \")\" [function, hook(FFI.call)]\n+```\n+\n+### Variadic\n+\n+In the second variant,\n+`#ffiCall(Address, Args, FixedTypes, VariadicTypes, ReturnType` takes an\n+integer address of a function, a `List` of `Bytes` containing the arguments\n+of the call, a `List` of `FFIType`s containing the types of the fixed\n+parameters of the function, a `List` of `FFIType`s containing the types of the\n+variadic parameters of the function, and an `FFIType` containing the return\n+type of the function, and returns the return value of the function as a\n+`Bytes`.\n+\n+```k\n+                 | \"#ffiCall\" \"(\" Int \",\" List \",\" List \",\" List \",\" FFIType \")\" [function, hook(FFI.call_variadic)]\n+```\n+\n+### Generic\n+\n+In the third variant,\n+`#ffiCall(IsVariadic, Address, Args, ArgTypes, NFixed, ReturnType` takes\n+a boolean indicating whether the function is variadic or not, an integer\n+address of a function, a `List` of `Bytes` containing the arguments of the\n+call, a `List` of `FFIType`s containing the parameter typess of the call\n+followed by the types of the variadic arguments of the call, if any, an `Int`\n+containing how many of the arguments of the call are fixed or not, and an\n+`FFIType` containing the return type of the function, and returns the return\n+value of the function as a `Bytes`.\n+\n+```k\n+                 | \"#ffiCall\" \"(\" Bool \",\" Int \",\" List \",\" List \",\" Int \",\" FFIType \")\" [function]\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd6dc6d9da9ca8cddda547d6d7590e8bc31d7c0"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTI4MTEw", "url": "https://github.com/kframework/k/pull/1440#pullrequestreview-450928110", "createdAt": "2020-07-17T20:07:53Z", "commit": {"oid": "2cd6dc6d9da9ca8cddda547d6d7590e8bc31d7c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDowNzo1M1rOGzfxNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDowNzo1M1rOGzfxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1MTA2MA==", "bodyText": "This looks like a typo in the name of this variable allLookupDirectoris => allLookupDirectories\nWhat is this change? The 0 => 1.", "url": "https://github.com/kframework/k/pull/1440#discussion_r456651060", "createdAt": "2020-07-17T20:07:53Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/parser/ParserUtils.java", "diffHunk": "@@ -155,8 +155,15 @@ else if (di instanceof Require) {\n \n                 String definitionFileName = ((Require) di).getValue();\n \n+                if (definitionFileName.equals(\"ffi.k\")) {\n+                    kem.registerCompilerWarning(ExceptionType.FUTURE_ERROR,\n+                        \"Requiring a K file in the K builtin directory via \" +\n+                        \"a deprecated filename. Please replace \\\"\" + definitionFileName +\n+                        \"\\\" with \\\"\" + definitionFileName.substring(0, definitionFileName.length() - 2) + \".md\\\".\", di);\n+                }\n+\n                 ArrayList<File> allLookupDirectoris = new ArrayList<>(lookupDirectories);\n-                allLookupDirectoris.add(0, currentDirectory);\n+                allLookupDirectoris.add(1, currentDirectory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd6dc6d9da9ca8cddda547d6d7590e8bc31d7c0"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb1d937a429d4bdffe8bc45bf26446caa8edb618", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/fb1d937a429d4bdffe8bc45bf26446caa8edb618", "committedDate": "2020-07-17T20:22:54Z", "message": "fix typo and add comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7d440518042843325274ada03b0e80fd0daf45b", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/b7d440518042843325274ada03b0e80fd0daf45b", "committedDate": "2020-07-17T20:39:04Z", "message": "fix blocks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTQ1NTE1", "url": "https://github.com/kframework/k/pull/1440#pullrequestreview-450945515", "createdAt": "2020-07-17T20:42:14Z", "commit": {"oid": "b7d440518042843325274ada03b0e80fd0daf45b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97f152d50fb0995c2a609addb28b9c50cd7cab33", "author": {"user": {"login": "rv-jenkins", "name": null}}, "url": "https://github.com/kframework/k/commit/97f152d50fb0995c2a609addb28b9c50cd7cab33", "committedDate": "2020-07-17T21:50:55Z", "message": "Merge branch 'master' into prelude2"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2311, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}