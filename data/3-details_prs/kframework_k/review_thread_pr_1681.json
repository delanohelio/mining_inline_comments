{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNjU3MzM5", "number": 1681, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNToyODo1N1rOE_rIdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNToyODo1N1rOE_rIdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjAyNDIwOnYy", "diffSide": "RIGHT", "path": "kernel/src/main/java/org/kframework/kompile/Kompile.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNToyODo1N1rOH9geYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo0MjoxOFrOH-xpjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI1NzI1MQ==", "bodyText": "There isn't some Syntax super-class you can use instead of listing all these out?\n@dwightguth should probably check that this check is being done in the correct place, output looks OK to me.", "url": "https://github.com/kframework/k/pull/1681#discussion_r534257251", "createdAt": "2020-12-02T15:28:57Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/kompile/Kompile.java", "diffHunk": "@@ -313,6 +313,14 @@ public void definitionChecks(Set<Module> modules) {\n \n     // Extra checks just for the prover specification.\n     public Module proverChecks(Module specModule, Module mainDefModule) {\n+        // check rogue syntax in spec module\n+        Set<Sentence> toCheck = mutable(specModule.sentences().$minus$minus(mainDefModule.sentences()));\n+        for (Sentence s : toCheck)\n+            if (s instanceof Production || s instanceof SyntaxSort || s instanceof SyntaxLexical ||\n+                    s instanceof SyntaxPriority || s instanceof SyntaxAssociativity)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d20608bf011a4e26294a1c69645c4af68914ae19"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI4ODM0Nw==", "bodyText": "case class Production(klabel: Option[KLabel], params: Seq[Sort], sort: Sort, items: Seq[ProductionItem], att: Att)\n  extends Sentence with ProductionToString\n\nThey all extend Sentence directly, I had to list them all.", "url": "https://github.com/kframework/k/pull/1681#discussion_r534288347", "createdAt": "2020-12-02T16:06:47Z", "author": {"login": "radumereuta"}, "path": "kernel/src/main/java/org/kframework/kompile/Kompile.java", "diffHunk": "@@ -313,6 +313,14 @@ public void definitionChecks(Set<Module> modules) {\n \n     // Extra checks just for the prover specification.\n     public Module proverChecks(Module specModule, Module mainDefModule) {\n+        // check rogue syntax in spec module\n+        Set<Sentence> toCheck = mutable(specModule.sentences().$minus$minus(mainDefModule.sentences()));\n+        for (Sentence s : toCheck)\n+            if (s instanceof Production || s instanceof SyntaxSort || s instanceof SyntaxLexical ||\n+                    s instanceof SyntaxPriority || s instanceof SyntaxAssociativity)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI1NzI1MQ=="}, "originalCommit": {"oid": "d20608bf011a4e26294a1c69645c4af68914ae19"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI5MTI2MA==", "bodyText": "Would this message be better?\nFound syntax declaration in proof module. This can cause parsing issues since it's not visible from the main module.", "url": "https://github.com/kframework/k/pull/1681#discussion_r534291260", "createdAt": "2020-12-02T16:10:32Z", "author": {"login": "radumereuta"}, "path": "kernel/src/main/java/org/kframework/kompile/Kompile.java", "diffHunk": "@@ -313,6 +313,14 @@ public void definitionChecks(Set<Module> modules) {\n \n     // Extra checks just for the prover specification.\n     public Module proverChecks(Module specModule, Module mainDefModule) {\n+        // check rogue syntax in spec module\n+        Set<Sentence> toCheck = mutable(specModule.sentences().$minus$minus(mainDefModule.sentences()));\n+        for (Sentence s : toCheck)\n+            if (s instanceof Production || s instanceof SyntaxSort || s instanceof SyntaxLexical ||\n+                    s instanceof SyntaxPriority || s instanceof SyntaxAssociativity)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI1NzI1MQ=="}, "originalCommit": {"oid": "d20608bf011a4e26294a1c69645c4af68914ae19"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4NzIxNA==", "bodyText": "rather than using a instanceof, you ought to be able to say sentence.isSyntax()", "url": "https://github.com/kframework/k/pull/1681#discussion_r535587214", "createdAt": "2020-12-03T20:42:18Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/java/org/kframework/kompile/Kompile.java", "diffHunk": "@@ -313,6 +313,14 @@ public void definitionChecks(Set<Module> modules) {\n \n     // Extra checks just for the prover specification.\n     public Module proverChecks(Module specModule, Module mainDefModule) {\n+        // check rogue syntax in spec module\n+        Set<Sentence> toCheck = mutable(specModule.sentences().$minus$minus(mainDefModule.sentences()));\n+        for (Sentence s : toCheck)\n+            if (s instanceof Production || s instanceof SyntaxSort || s instanceof SyntaxLexical ||\n+                    s instanceof SyntaxPriority || s instanceof SyntaxAssociativity)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI1NzI1MQ=="}, "originalCommit": {"oid": "d20608bf011a4e26294a1c69645c4af68914ae19"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2948, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}