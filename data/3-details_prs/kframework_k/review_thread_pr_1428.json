{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NDk2OTI2", "number": 1428, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzozNzoxNlrOEOybHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzo0MTo0OFrOEOyiXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTQxNjYxOnYy", "diffSide": "RIGHT", "path": "kernel/src/main/java/org/kframework/kompile/Kompile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzozNzoxNlrOGyItmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzozNzoxNlrOGyItmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIyNDcyOQ==", "bodyText": "Is there much use in distinguishing DEPRECATED_BACKEND from FUTURE_ERROR? Seems to me that DEPRECATED_BACKEND will only be used twice, and equally well could be just thrown into \"these are features that we will not support in the future.", "url": "https://github.com/kframework/k/pull/1428#discussion_r455224729", "createdAt": "2020-07-15T17:37:16Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/kompile/Kompile.java", "diffHunk": "@@ -105,7 +105,7 @@ public Kompile(KompileOptions kompileOptions, FileUtil files, KExceptionManager\n         this.sw = sw;\n \n         if (kompileOptions.backend.equals(\"ocaml\")) {\n-            kem.registerCriticalWarning(\"The OCaml backend is in the process of being deprecated (final date May 31, 2020). Please switch to the LLVM backend.\");\n+            kem.registerCriticalWarning(ExceptionType.DEPRECATED_BACKEND, \"The OCaml backend is in the process of being deprecated (final date May 31, 2020). Please switch to the LLVM backend.\");\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1eb00f9e4b1bc43acb4c8a6c5c8fd0ebadcc5770"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTQzNTE2OnYy", "diffSide": "RIGHT", "path": "kore/src/main/java/org/kframework/utils/errorsystem/KException.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzo0MTo0OFrOGyI55Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOToxMToxNVrOGyMJOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIyNzg3Nw==", "bodyText": "I think backend-specific things should not be in this list. So we should just have MISSING_HOOK, instead of MISSING_HOOK_OCAML or MISSING_HOOK_JAVA. And we should get rid of DEPRECATED_BACKEND and just use FUTURE_ERROR.", "url": "https://github.com/kframework/k/pull/1428#discussion_r455227877", "createdAt": "2020-07-15T17:41:48Z", "author": {"login": "ehildenb"}, "path": "kore/src/main/java/org/kframework/utils/errorsystem/KException.java", "diffHunk": "@@ -103,7 +95,24 @@ public int hashCode() {\n     }\n \n     public enum ExceptionType {\n-        ERROR, WARNING, HIDDENWARNING, NON_EXHAUSTIVE_MATCH, USELESS_RULE\n+        ERROR,\n+        NON_EXHAUSTIVE_MATCH,\n+        UNDELETED_TEMP_DIR,\n+        MISSING_HOOK_OCAML,\n+        MISSING_SYNTAX_MODULE,\n+        INVALID_EXIT_CODE,\n+        DEPRECATED_BACKEND,\n+        INVALID_CONFIG_VAR,\n+        FUTURE_ERROR,\n+        UNUSED_VAR,\n+        PROOF_LINT,\n+        FIRST_HIDDEN, // warnings below here are hidden by default\n+        MISSING_HOOK_JAVA,\n+        USELESS_RULE,\n+        UNRESOLVED_FUNCTION_SYMBOL,\n+        MALFORMED_MARKDOWN,\n+        INVALIDATED_CACHE,\n+        UNUSED_SYMBOL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1eb00f9e4b1bc43acb4c8a6c5c8fd0ebadcc5770"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI2NDkwNQ==", "bodyText": "I actually originally had these separate, but they had to be split because most java backend definitions report a lot of missing hook warnings just because a bunch of hooks were never implemented, and it makes the output extremely verbose whenever you call krun.", "url": "https://github.com/kframework/k/pull/1428#discussion_r455264905", "createdAt": "2020-07-15T18:42:38Z", "author": {"login": "dwightguth"}, "path": "kore/src/main/java/org/kframework/utils/errorsystem/KException.java", "diffHunk": "@@ -103,7 +95,24 @@ public int hashCode() {\n     }\n \n     public enum ExceptionType {\n-        ERROR, WARNING, HIDDENWARNING, NON_EXHAUSTIVE_MATCH, USELESS_RULE\n+        ERROR,\n+        NON_EXHAUSTIVE_MATCH,\n+        UNDELETED_TEMP_DIR,\n+        MISSING_HOOK_OCAML,\n+        MISSING_SYNTAX_MODULE,\n+        INVALID_EXIT_CODE,\n+        DEPRECATED_BACKEND,\n+        INVALID_CONFIG_VAR,\n+        FUTURE_ERROR,\n+        UNUSED_VAR,\n+        PROOF_LINT,\n+        FIRST_HIDDEN, // warnings below here are hidden by default\n+        MISSING_HOOK_JAVA,\n+        USELESS_RULE,\n+        UNRESOLVED_FUNCTION_SYMBOL,\n+        MALFORMED_MARKDOWN,\n+        INVALIDATED_CACHE,\n+        UNUSED_SYMBOL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIyNzg3Nw=="}, "originalCommit": {"oid": "1eb00f9e4b1bc43acb4c8a6c5c8fd0ebadcc5770"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI2NTE4Mw==", "bodyText": "So I had to make a separate category so I could make it disabled by default.", "url": "https://github.com/kframework/k/pull/1428#discussion_r455265183", "createdAt": "2020-07-15T18:43:06Z", "author": {"login": "dwightguth"}, "path": "kore/src/main/java/org/kframework/utils/errorsystem/KException.java", "diffHunk": "@@ -103,7 +95,24 @@ public int hashCode() {\n     }\n \n     public enum ExceptionType {\n-        ERROR, WARNING, HIDDENWARNING, NON_EXHAUSTIVE_MATCH, USELESS_RULE\n+        ERROR,\n+        NON_EXHAUSTIVE_MATCH,\n+        UNDELETED_TEMP_DIR,\n+        MISSING_HOOK_OCAML,\n+        MISSING_SYNTAX_MODULE,\n+        INVALID_EXIT_CODE,\n+        DEPRECATED_BACKEND,\n+        INVALID_CONFIG_VAR,\n+        FUTURE_ERROR,\n+        UNUSED_VAR,\n+        PROOF_LINT,\n+        FIRST_HIDDEN, // warnings below here are hidden by default\n+        MISSING_HOOK_JAVA,\n+        USELESS_RULE,\n+        UNRESOLVED_FUNCTION_SYMBOL,\n+        MALFORMED_MARKDOWN,\n+        INVALIDATED_CACHE,\n+        UNUSED_SYMBOL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIyNzg3Nw=="}, "originalCommit": {"oid": "1eb00f9e4b1bc43acb4c8a6c5c8fd0ebadcc5770"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI4MDk1NA==", "bodyText": "Ah OK, makes sense.", "url": "https://github.com/kframework/k/pull/1428#discussion_r455280954", "createdAt": "2020-07-15T19:11:15Z", "author": {"login": "ehildenb"}, "path": "kore/src/main/java/org/kframework/utils/errorsystem/KException.java", "diffHunk": "@@ -103,7 +95,24 @@ public int hashCode() {\n     }\n \n     public enum ExceptionType {\n-        ERROR, WARNING, HIDDENWARNING, NON_EXHAUSTIVE_MATCH, USELESS_RULE\n+        ERROR,\n+        NON_EXHAUSTIVE_MATCH,\n+        UNDELETED_TEMP_DIR,\n+        MISSING_HOOK_OCAML,\n+        MISSING_SYNTAX_MODULE,\n+        INVALID_EXIT_CODE,\n+        DEPRECATED_BACKEND,\n+        INVALID_CONFIG_VAR,\n+        FUTURE_ERROR,\n+        UNUSED_VAR,\n+        PROOF_LINT,\n+        FIRST_HIDDEN, // warnings below here are hidden by default\n+        MISSING_HOOK_JAVA,\n+        USELESS_RULE,\n+        UNRESOLVED_FUNCTION_SYMBOL,\n+        MALFORMED_MARKDOWN,\n+        INVALIDATED_CACHE,\n+        UNUSED_SYMBOL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIyNzg3Nw=="}, "originalCommit": {"oid": "1eb00f9e4b1bc43acb4c8a6c5c8fd0ebadcc5770"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2963, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}