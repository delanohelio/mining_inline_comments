{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzODExMDEw", "number": 1039, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMTo0OToyMVrODYpxpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMTo0OToyMVrODYpxpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTc2ODcwOnYy", "diffSide": "RIGHT", "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/ParseInModule.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMTo0OToyMVrOFeortw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjozNDo1MVrOFfj6jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY2ODE1MQ==", "bodyText": "Can we factor out a private void loadModules() here which all of getExtensionModule(), getParsingModule(), and getDisambiguationModule() can use?", "url": "https://github.com/kframework/k/pull/1039#discussion_r367668151", "createdAt": "2020-01-16T21:49:21Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/ParseInModule.java", "diffHunk": "@@ -92,19 +100,51 @@ public Module seedModule() {\n      * @return Module with extra productions defined during parser generator.\n      */\n     public Module getExtensionModule() {\n-        return extensionModule;\n+        Module extM = extensionModule;\n+        if (extM == null) {\n+            Tuple3<Module, Module, Module> mods = RuleGrammarGenerator.getCombinedGrammarImpl(seedModule);\n+            extM = mods._1();\n+            disambModule = mods._2();\n+            parsingModule = mods._3();\n+            extensionModule = extM;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da422eb174c126bde83a79cc57cdb73ae2afe8f0"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY2ODQxOA==", "bodyText": "Or perhaps initializeModules() to mirror the initialize() below.", "url": "https://github.com/kframework/k/pull/1039#discussion_r367668418", "createdAt": "2020-01-16T21:50:02Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/ParseInModule.java", "diffHunk": "@@ -92,19 +100,51 @@ public Module seedModule() {\n      * @return Module with extra productions defined during parser generator.\n      */\n     public Module getExtensionModule() {\n-        return extensionModule;\n+        Module extM = extensionModule;\n+        if (extM == null) {\n+            Tuple3<Module, Module, Module> mods = RuleGrammarGenerator.getCombinedGrammarImpl(seedModule);\n+            extM = mods._1();\n+            disambModule = mods._2();\n+            parsingModule = mods._3();\n+            extensionModule = extM;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY2ODE1MQ=="}, "originalCommit": {"oid": "da422eb174c126bde83a79cc57cdb73ae2afe8f0"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY4MDE1NA==", "bodyText": "I mean, the implementation of the three methods is different... I'm not really sure how I would go about doing that. I'm not opposed, but I'm just unclear how that would be done.", "url": "https://github.com/kframework/k/pull/1039#discussion_r367680154", "createdAt": "2020-01-16T22:20:00Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/ParseInModule.java", "diffHunk": "@@ -92,19 +100,51 @@ public Module seedModule() {\n      * @return Module with extra productions defined during parser generator.\n      */\n     public Module getExtensionModule() {\n-        return extensionModule;\n+        Module extM = extensionModule;\n+        if (extM == null) {\n+            Tuple3<Module, Module, Module> mods = RuleGrammarGenerator.getCombinedGrammarImpl(seedModule);\n+            extM = mods._1();\n+            disambModule = mods._2();\n+            parsingModule = mods._3();\n+            extensionModule = extM;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY2ODE1MQ=="}, "originalCommit": {"oid": "da422eb174c126bde83a79cc57cdb73ae2afe8f0"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyNzE3Ng==", "bodyText": "Well you could have a codeblock which says:\nprivate void initializeModules() {\n            Tuple3<Module, Module, Module> mods = RuleGrammarGenerator.getCombinedGrammarImpl(seedModule);\n            extensionModule = mods._1()\n            disambModule = mods._2();\n            parsingModule = mods._3();\n}\n\nThen just call that function in each of these three functions.\nYour call though.", "url": "https://github.com/kframework/k/pull/1039#discussion_r367727176", "createdAt": "2020-01-17T01:09:21Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/ParseInModule.java", "diffHunk": "@@ -92,19 +100,51 @@ public Module seedModule() {\n      * @return Module with extra productions defined during parser generator.\n      */\n     public Module getExtensionModule() {\n-        return extensionModule;\n+        Module extM = extensionModule;\n+        if (extM == null) {\n+            Tuple3<Module, Module, Module> mods = RuleGrammarGenerator.getCombinedGrammarImpl(seedModule);\n+            extM = mods._1();\n+            disambModule = mods._2();\n+            parsingModule = mods._3();\n+            extensionModule = extM;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY2ODE1MQ=="}, "originalCommit": {"oid": "da422eb174c126bde83a79cc57cdb73ae2afe8f0"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYzODYwNg==", "bodyText": "Unfortunately that is not possible either because in order to implement the racy single-check pattern, we need slightly different assignment statements in each of the three functions.", "url": "https://github.com/kframework/k/pull/1039#discussion_r368638606", "createdAt": "2020-01-20T16:34:51Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/ParseInModule.java", "diffHunk": "@@ -92,19 +100,51 @@ public Module seedModule() {\n      * @return Module with extra productions defined during parser generator.\n      */\n     public Module getExtensionModule() {\n-        return extensionModule;\n+        Module extM = extensionModule;\n+        if (extM == null) {\n+            Tuple3<Module, Module, Module> mods = RuleGrammarGenerator.getCombinedGrammarImpl(seedModule);\n+            extM = mods._1();\n+            disambModule = mods._2();\n+            parsingModule = mods._3();\n+            extensionModule = extM;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY2ODE1MQ=="}, "originalCommit": {"oid": "da422eb174c126bde83a79cc57cdb73ae2afe8f0"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3147, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}