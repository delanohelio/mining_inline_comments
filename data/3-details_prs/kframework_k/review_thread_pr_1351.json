{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MDAxNTYx", "number": 1351, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDowNzozM1rOEGf9qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDowNzozM1rOEGf9qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjUwNjAyOnYy", "diffSide": "RIGHT", "path": "kore/src/main/scala/org/kframework/parser/TreeNodesToKORE.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDowNzozM1rOGlVhsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoyNTo0OVrOGlvLhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwMzE4Nw==", "bodyText": "It's a little confusing to me that you're passing the entire t: Term into anonVar, because why would it need a term? Are you able to pass just the Location in for it to use? I'm approving anyway, but something to think about.", "url": "https://github.com/kframework/k/pull/1351#discussion_r441803187", "createdAt": "2020-06-17T20:07:33Z", "author": {"login": "ehildenb"}, "path": "kore/src/main/scala/org/kframework/parser/TreeNodesToKORE.scala", "diffHunk": "@@ -24,18 +24,18 @@ class TreeNodesToKORE(parseSort: java.util.function.Function[String, Sort], stri\n     case Ambiguity(items) => KApply(KLabel(\"amb\"), KList(items.asScala.toList map apply asJava), Att.empty)\n   }\n \n-  def anonVar(sort: Sort): K = {\n+  def anonVar(sort: Sort, t: Term): K = {\n     val lbl = KLabel(\"#SemanticCastTo\" + sort.toString())\n-    if (strict) KApply(lbl, KList(KToken(\"_\", Sorts.KVariable)), Att.empty.add(classOf[Production], Production(lbl, Seq(), sort, Seq(NonTerminal(sort, None))))) else KToken(\"_\", Sorts.KVariable)\n+    if (strict) KApply(lbl, KList(KToken(\"_\", Sorts.KVariable, locationToAtt(t.location, t.source))), locationToAtt(t.location, t.source).add(classOf[Production], Production(lbl, Seq(), sort, Seq(NonTerminal(sort, None))))) else KToken(\"_\", Sorts.KVariable, locationToAtt(t.location, t.source))\n   }\n \n   def termConsToKApply(t: TermCons): K = {\n     if (t.production.att.contains(\"recordPrd\", classOf[Production])) {\n       val realProd = t.production.att.get(\"recordPrd\", classOf[Production])\n       val map = new util.ArrayList(t.items).asScala.reverse.zipWithIndex.map { case (item, idx) => (t.production.nonterminal(idx).name.get, apply(item))} toMap\n       val realItems = realProd.nonterminals.map {\n-        case NonTerminal(sort, None) => anonVar(sort)\n-        case NonTerminal(sort, Some(x)) => map.getOrElse(x, anonVar(sort))\n+        case NonTerminal(sort, None) => anonVar(sort, t)\n+        case NonTerminal(sort, Some(x)) => map.getOrElse(x, anonVar(sort, t))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cfc3b8d3572d31ad8449dbdf9de9922c8dbff67"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMzQ5NA==", "bodyText": "I changed the signature of the method to t: HasLocation to make it clearer what is happening.", "url": "https://github.com/kframework/k/pull/1351#discussion_r442223494", "createdAt": "2020-06-18T13:25:49Z", "author": {"login": "dwightguth"}, "path": "kore/src/main/scala/org/kframework/parser/TreeNodesToKORE.scala", "diffHunk": "@@ -24,18 +24,18 @@ class TreeNodesToKORE(parseSort: java.util.function.Function[String, Sort], stri\n     case Ambiguity(items) => KApply(KLabel(\"amb\"), KList(items.asScala.toList map apply asJava), Att.empty)\n   }\n \n-  def anonVar(sort: Sort): K = {\n+  def anonVar(sort: Sort, t: Term): K = {\n     val lbl = KLabel(\"#SemanticCastTo\" + sort.toString())\n-    if (strict) KApply(lbl, KList(KToken(\"_\", Sorts.KVariable)), Att.empty.add(classOf[Production], Production(lbl, Seq(), sort, Seq(NonTerminal(sort, None))))) else KToken(\"_\", Sorts.KVariable)\n+    if (strict) KApply(lbl, KList(KToken(\"_\", Sorts.KVariable, locationToAtt(t.location, t.source))), locationToAtt(t.location, t.source).add(classOf[Production], Production(lbl, Seq(), sort, Seq(NonTerminal(sort, None))))) else KToken(\"_\", Sorts.KVariable, locationToAtt(t.location, t.source))\n   }\n \n   def termConsToKApply(t: TermCons): K = {\n     if (t.production.att.contains(\"recordPrd\", classOf[Production])) {\n       val realProd = t.production.att.get(\"recordPrd\", classOf[Production])\n       val map = new util.ArrayList(t.items).asScala.reverse.zipWithIndex.map { case (item, idx) => (t.production.nonterminal(idx).name.get, apply(item))} toMap\n       val realItems = realProd.nonterminals.map {\n-        case NonTerminal(sort, None) => anonVar(sort)\n-        case NonTerminal(sort, Some(x)) => map.getOrElse(x, anonVar(sort))\n+        case NonTerminal(sort, None) => anonVar(sort, t)\n+        case NonTerminal(sort, Some(x)) => map.getOrElse(x, anonVar(sort, t))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwMzE4Nw=="}, "originalCommit": {"oid": "8cfc3b8d3572d31ad8449dbdf9de9922c8dbff67"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3064, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}