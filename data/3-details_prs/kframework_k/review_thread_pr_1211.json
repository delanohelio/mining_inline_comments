{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMDI3ODc3", "number": 1211, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyNDoyNFrODx_QZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyNDozNFrODx_Qqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzQzMjA1OnYy", "diffSide": "RIGHT", "path": "kernel/src/main/java/org/kframework/backend/kore/ModuleToKORE.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyNDoyNFrOGFxRBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyNDoyNFrOGFxRBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMzIzOA==", "bodyText": "This isn't really about symbol translation directly, and may confuse future developers about where the logic for symbol translation ends and writing the extra files begins. You could consider separating out the new functionality into a function writeSymbolUnparsingInformation (or something similar) and just call that method here, to make the distinction clearer.\nYour call.", "url": "https://github.com/kframework/k/pull/1211#discussion_r408703238", "createdAt": "2020-04-15T09:24:24Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/backend/kore/ModuleToKORE.java", "diffHunk": "@@ -350,7 +381,47 @@ private void translateSymbols(Map<String, Boolean> attributes, SetMultimap<KLabe\n             sb.append(\") : \");\n             convert(prod.sort(), prod, sb);\n             sb.append(\" \");\n-            convert(attributes, addKoreAttributes(prod, functionRules, impurities, overloads), sb, null, null);\n+            Att koreAtt = addKoreAttributes(prod, functionRules, impurities, overloads);\n+            convert(attributes, koreAtt, sb, null, null);\n+            if (koreAtt.contains(\"format\")) {\n+              formats.append(\"Lbl\");\n+              convert(prod.klabel().get().name(), formats);\n+              formats.append('\\n');\n+              formats.append(koreAtt.get(\"format\"));\n+              formats.append('\\n');\n+            }\n+            if (koreAtt.contains(\"color\")) {\n+              colors.append(\"Lbl\");\n+              convert(prod.klabel().get().name(), colors);\n+              colors.append('\\n');\n+              for (int i = 0; i < prod.items().size(); i++) {\n+                if (prod.items().apply(i) instanceof Terminal) {\n+                  colors.append(koreAtt.get(\"color\"));\n+                  colors.append('\\n');\n+                }\n+              }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f19475b5ffb55b0aba0ed788521b06526c529405"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzQzMjc0OnYy", "diffSide": "RIGHT", "path": "kernel/src/main/java/org/kframework/backend/kore/ModuleToKORE.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyNDozNFrOGFxRbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyNDozNFrOGFxRbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMzM0Mg==", "bodyText": "Similarly here.", "url": "https://github.com/kframework/k/pull/1211#discussion_r408703342", "createdAt": "2020-04-15T09:24:34Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/backend/kore/ModuleToKORE.java", "diffHunk": "@@ -1357,6 +1428,23 @@ private Att addKoreAttributes(Production prod, SetMultimap<KLabel, Rule> functio\n         if (isMacro) {\n             att = att.add(\"macro\");\n         }\n+        String format = att.getOptional(\"format\").orElse(Formatter.defaultFormat(prod.items().size()));\n+        int nt = 1;\n+        boolean hasFormat = true;\n+        for (int i = 0; i < prod.items().size(); i++) {\n+          if (prod.items().apply(i) instanceof NonTerminal) {\n+            format = format.replace(\"%\" + (i+1), \"%\" + (nt++));\n+          } else if (prod.items().apply(i) instanceof Terminal) {\n+            format = format.replace(\"%\" + (i+1), \"%c\" + ((Terminal)prod.items().apply(i)).value() + \"%r\");\n+          } else {\n+            hasFormat = false;\n+          }\n+        }\n+        if (hasFormat) {\n+          att = att.add(\"format\", format);\n+        } else {\n+          att = att.remove(\"format\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f19475b5ffb55b0aba0ed788521b06526c529405"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3112, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}