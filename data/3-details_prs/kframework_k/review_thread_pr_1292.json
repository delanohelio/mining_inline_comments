{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4OTUxOTQ5", "number": 1292, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTowNTo1N1rOD_zwnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTowNjo0MlrOD_zxnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjM0OTA4OnYy", "diffSide": "RIGHT", "path": "k-distribution/include/builtin/domains.k", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTowNTo1N1rOGasTKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoxMDo1NlrOGb29UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MTk2MQ==", "bodyText": "These must have attribute simplification. I don't think anywhere is necessary: it should have no effect because #Ceil isn't a constructor. However, it shouldn't hurt anything.", "url": "https://github.com/kframework/k/pull/1292#discussion_r430641961", "createdAt": "2020-05-26T19:05:57Z", "author": {"login": "ttuegel"}, "path": "k-distribution/include/builtin/domains.k", "diffHunk": "@@ -444,39 +444,40 @@ module INT-SYMBOLIC [symbolic, kore]\n   imports  INT-COMMON\n   imports ML-SYNTAX\n \n-  /**\n-   * Definability conditions\n-   */\n-\n-  rule\n-    #Ceil(@I1:Int /Int @I2:Int)\n-  =>\n-    {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int %Int @I2:Int)\n-  =>\n-    {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int modInt @I2:Int)\n-  =>\n-    {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int >>Int @I2:Int)\n-  =>\n-    {(@I2 >=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int <<Int @I2:Int)\n-  =>\n-    {(@I2 >=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n+  // Definability Conditions\n+  rule #Ceil(@I1:Int /Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int %Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int modInt @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int >>Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int <<Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa2b74df3384b45236a1a2d0c0bbfd6bfec29830"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NTE2OQ==", "bodyText": "I've incorporated the update #1305 so this shouldn't be an issue anymore.", "url": "https://github.com/kframework/k/pull/1292#discussion_r431865169", "createdAt": "2020-05-28T14:10:56Z", "author": {"login": "ehildenb"}, "path": "k-distribution/include/builtin/domains.k", "diffHunk": "@@ -444,39 +444,40 @@ module INT-SYMBOLIC [symbolic, kore]\n   imports  INT-COMMON\n   imports ML-SYNTAX\n \n-  /**\n-   * Definability conditions\n-   */\n-\n-  rule\n-    #Ceil(@I1:Int /Int @I2:Int)\n-  =>\n-    {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int %Int @I2:Int)\n-  =>\n-    {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int modInt @I2:Int)\n-  =>\n-    {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int >>Int @I2:Int)\n-  =>\n-    {(@I2 >=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int <<Int @I2:Int)\n-  =>\n-    {(@I2 >=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n+  // Definability Conditions\n+  rule #Ceil(@I1:Int /Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int %Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int modInt @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int >>Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int <<Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MTk2MQ=="}, "originalCommit": {"oid": "aa2b74df3384b45236a1a2d0c0bbfd6bfec29830"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjM1MTY0OnYy", "diffSide": "RIGHT", "path": "k-distribution/include/builtin/domains.k", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTowNjo0M1rOGasU0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoxMzozMFrOGb3EPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MjM4Ng==", "bodyText": "What is this priority attribute intended to do?", "url": "https://github.com/kframework/k/pull/1292#discussion_r430642386", "createdAt": "2020-05-26T19:06:43Z", "author": {"login": "ttuegel"}, "path": "k-distribution/include/builtin/domains.k", "diffHunk": "@@ -444,39 +444,40 @@ module INT-SYMBOLIC [symbolic, kore]\n   imports  INT-COMMON\n   imports ML-SYNTAX\n \n-  /**\n-   * Definability conditions\n-   */\n-\n-  rule\n-    #Ceil(@I1:Int /Int @I2:Int)\n-  =>\n-    {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int %Int @I2:Int)\n-  =>\n-    {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int modInt @I2:Int)\n-  =>\n-    {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int >>Int @I2:Int)\n-  =>\n-    {(@I2 >=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int <<Int @I2:Int)\n-  =>\n-    {(@I2 >=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n+  // Definability Conditions\n+  rule #Ceil(@I1:Int /Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int %Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int modInt @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int >>Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int <<Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+\n+  // Arithmetic Normalization\n+  rule I +Int 0 => I [simplification]\n+  rule I -Int 0 => I [simplification]\n+\n+  rule I +Int B => B +Int I          [concrete(I), symbolic(B), priority(51), simplification]\n+  rule A -Int I => A +Int (0 -Int I) [concrete(I), symbolic(A), priority(51), simplification]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa2b74df3384b45236a1a2d0c0bbfd6bfec29830"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2Njk0Mg==", "bodyText": "It's to make sure the rules preceding it are applied first:\n  rule I +Int 0 => I [simplification]\n  rule I -Int 0 => I [simplification]\n\n  rule I +Int B => B +Int I          [concrete(I), symbolic(B), priority(51), simplification]\n  rule A -Int I => A +Int (0 -Int I) [concrete(I), symbolic(A), priority(51), simplification]\n\nFor example, if you have X -Int 0, then you want it to go directly to X (and not to X +Int (0 -Int 0)).", "url": "https://github.com/kframework/k/pull/1292#discussion_r431866942", "createdAt": "2020-05-28T14:13:30Z", "author": {"login": "ehildenb"}, "path": "k-distribution/include/builtin/domains.k", "diffHunk": "@@ -444,39 +444,40 @@ module INT-SYMBOLIC [symbolic, kore]\n   imports  INT-COMMON\n   imports ML-SYNTAX\n \n-  /**\n-   * Definability conditions\n-   */\n-\n-  rule\n-    #Ceil(@I1:Int /Int @I2:Int)\n-  =>\n-    {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int %Int @I2:Int)\n-  =>\n-    {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int modInt @I2:Int)\n-  =>\n-    {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int >>Int @I2:Int)\n-  =>\n-    {(@I2 >=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int <<Int @I2:Int)\n-  =>\n-    {(@I2 >=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n+  // Definability Conditions\n+  rule #Ceil(@I1:Int /Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int %Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int modInt @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int >>Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int <<Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+\n+  // Arithmetic Normalization\n+  rule I +Int 0 => I [simplification]\n+  rule I -Int 0 => I [simplification]\n+\n+  rule I +Int B => B +Int I          [concrete(I), symbolic(B), priority(51), simplification]\n+  rule A -Int I => A +Int (0 -Int I) [concrete(I), symbolic(A), priority(51), simplification]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MjM4Ng=="}, "originalCommit": {"oid": "aa2b74df3384b45236a1a2d0c0bbfd6bfec29830"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3036, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}