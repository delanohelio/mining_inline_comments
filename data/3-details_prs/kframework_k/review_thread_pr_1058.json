{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NzAxNzYz", "number": 1058, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNjoyMjo1NlrODbSM2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNjoyNDowOVrODbSO0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTM2MzQ2OnYy", "diffSide": "RIGHT", "path": "k-distribution/include/ktest.mak", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNjoyMjo1NlrOFirhzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNjoyMjo1NlrOFirhzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkwOTA2OA==", "bodyText": "unfortunately this will break the update-results target, because sed will not be run in that case and you will populate the output files with results that will not pass tests. The sed needs to be outside the CHECK variable.", "url": "https://github.com/kframework/k/pull/1058#discussion_r371909068", "createdAt": "2020-01-28T16:22:56Z", "author": {"login": "dwightguth"}, "path": "k-distribution/include/ktest.mak", "diffHunk": "@@ -38,7 +38,9 @@ KAST_TESTS?=$(wildcard $(TESTDIR)/*.kast)\n # default KOMPILE_BACKEND\n KOMPILE_BACKEND?=llvm\n \n-CHECK=| diff -\n+CHECK?=| diff -\n+REMOVE_PATHS=sed 's!'`pwd`'/\\(\\./\\)\\{0,1\\}!!g'\n+CHECK_ERRORS=2>&1 | $(REMOVE_PATHS) | diff -", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9a306979abdb9e9def3cf26a02b0cb1b2df2dc"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTM2ODQ4OnYy", "diffSide": "RIGHT", "path": "kernel/src/main/java/org/kframework/kprove/ProofDefinitionBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNjoyNDowOVrOFirlAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo1NjozOFrOFiyiEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkwOTg5MA==", "bodyText": "it doesn't make sense that you wouldn't throw an error here. You should never have errors in the output displayed by a tool unless the tool has exited abnormally.", "url": "https://github.com/kframework/k/pull/1058#discussion_r371909890", "createdAt": "2020-01-28T16:24:09Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/java/org/kframework/kprove/ProofDefinitionBuilder.java", "diffHunk": "@@ -70,13 +66,15 @@ public ProofDefinitionBuilder(CompiledDefinition compiledDefinition, Backend bac\n                 backend.excludedModuleTags());\n         Map<String, Module> modulesMap = modules.stream().collect(Collectors.toMap(Module::name, m -> m));\n         Definition parsedDefinition = compiledDefinition.getParsedDefinition();\n+        Module specModule = getModule(specModuleNameUpdated, modulesMap, parsedDefinition);\n+        kompile.structuralChecks(scala.collection.JavaConverters.asScalaSet(modules),\n+                specModule, scala.Option.empty(), backend.excludedModuleTags(), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9a306979abdb9e9def3cf26a02b0cb1b2df2dc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNDUzNw==", "bodyText": "The idea is to actually throw an error, eventually. However, there are still specifications (including in our Verification Team's work) where these checks would fail. I thought it would be good to implement this change in two steps: first issue the errors, but preserve the existing behavior, to give some time for people to update their specs, then change the behavior to throw a hard error here.", "url": "https://github.com/kframework/k/pull/1058#discussion_r372014537", "createdAt": "2020-01-28T19:38:18Z", "author": {"login": "traiansf"}, "path": "kernel/src/main/java/org/kframework/kprove/ProofDefinitionBuilder.java", "diffHunk": "@@ -70,13 +66,15 @@ public ProofDefinitionBuilder(CompiledDefinition compiledDefinition, Backend bac\n                 backend.excludedModuleTags());\n         Map<String, Module> modulesMap = modules.stream().collect(Collectors.toMap(Module::name, m -> m));\n         Definition parsedDefinition = compiledDefinition.getParsedDefinition();\n+        Module specModule = getModule(specModuleNameUpdated, modulesMap, parsedDefinition);\n+        kompile.structuralChecks(scala.collection.JavaConverters.asScalaSet(modules),\n+                specModule, scala.Option.empty(), backend.excludedModuleTags(), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkwOTg5MA=="}, "originalCommit": {"oid": "cb9a306979abdb9e9def3cf26a02b0cb1b2df2dc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyMzgyNw==", "bodyText": "Well if you don't want to break existing specs, emit them first as warnings. But if they're errors, they should halt execution.", "url": "https://github.com/kframework/k/pull/1058#discussion_r372023827", "createdAt": "2020-01-28T19:56:38Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/java/org/kframework/kprove/ProofDefinitionBuilder.java", "diffHunk": "@@ -70,13 +66,15 @@ public ProofDefinitionBuilder(CompiledDefinition compiledDefinition, Backend bac\n                 backend.excludedModuleTags());\n         Map<String, Module> modulesMap = modules.stream().collect(Collectors.toMap(Module::name, m -> m));\n         Definition parsedDefinition = compiledDefinition.getParsedDefinition();\n+        Module specModule = getModule(specModuleNameUpdated, modulesMap, parsedDefinition);\n+        kompile.structuralChecks(scala.collection.JavaConverters.asScalaSet(modules),\n+                specModule, scala.Option.empty(), backend.excludedModuleTags(), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkwOTg5MA=="}, "originalCommit": {"oid": "cb9a306979abdb9e9def3cf26a02b0cb1b2df2dc"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3152, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}