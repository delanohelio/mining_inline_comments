{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2NTQ4MTA0", "number": 1579, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzoyOTo0N1rOFCCn_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzoyOTo0N1rOFCCn_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Njg0NDc2OnYy", "diffSide": "RIGHT", "path": "kernel/src/main/java/org/kframework/compile/checks/CheckAtt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzoyOTo0N1rOIA_sBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoxNjo1N1rOIBq4ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxNDM3Mw==", "bodyText": "Can we instead have a pass which runs before this and does:\n\nThe same check, and if it passes adds the constructor attribute if it determines that the production is an attribute.\nThen this check is changed to loop over all productions with constructor attribute and make sure none of them are targeting builtin sorts.\n\nThis has the benefit of (i) clearly defining what we call a \"constructor\", and (ii) adding the attribute to productions in case it's useful to the other various tools/backends.", "url": "https://github.com/kframework/k/pull/1579#discussion_r537914373", "createdAt": "2020-12-07T23:29:47Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/compile/checks/CheckAtt.java", "diffHunk": "@@ -3,28 +3,57 @@\n \n import org.kframework.attributes.Att;\n import org.kframework.attributes.HasLocation;\n+import org.kframework.builtin.Sorts;\n+import org.kframework.compile.ExpandMacros;\n import org.kframework.definition.Module;\n+import org.kframework.definition.Production;\n import org.kframework.definition.Rule;\n import org.kframework.definition.Sentence;\n+import org.kframework.kore.KLabel;\n import org.kframework.utils.errorsystem.KEMException;\n \n import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.kframework.Collections.*;\n \n /**\n  * Created by dwightguth on 1/25/16.\n  */\n public class CheckAtt {\n+    private final Set<KLabel> macros;\n     private final Set<KEMException> errors;\n     private final Module m;\n+    private final boolean isSymbolicKast;\n \n-    public CheckAtt(Set<KEMException> errors, Module m) {\n+    public CheckAtt(Set<KEMException> errors, Module m, boolean isSymbolicKast) {\n         this.errors = errors;\n         this.m = m;\n+        this.isSymbolicKast = isSymbolicKast;\n+        this.macros = stream(m.rulesFor()).filter(e -> stream(e._2()).filter(r -> ExpandMacros.isMacro(r)).findAny().isPresent()).map(e -> e._1()).collect(Collectors.toSet());\n     }\n \n     public void check(Sentence sentence) {\n         if (sentence instanceof Rule) {\n             check(((Rule) sentence).att(), sentence);\n+        } else if (sentence instanceof Production) {\n+            check((Production) sentence);\n+        }\n+    }\n+\n+    private void check(Production prod) {\n+        if (!prod.sort().equals(Sorts.KItem())) {\n+            Att sortAtt =  m.sortAttributesFor().getOrElse(prod.sort().head(), () -> Att.empty());\n+            if (sortAtt.contains(Att.HOOK()) && !sortAtt.get(Att.HOOK()).equals(\"ARRAY.Array\") && !(sortAtt.get(Att.HOOK()).equals(\"KVAR.KVar\") && isSymbolicKast)) {\n+                if (!prod.att().contains(Att.FUNCTION()) && !prod.att().contains(Att.BRACKET()) &&\n+                    !prod.att().contains(\"token\") && !(prod.klabel().isDefined() && macros.contains(prod.klabel().get()))) {\n+                    if (!(prod.sort().equals(Sorts.K()) && ((prod.klabel().isDefined() && (prod.klabel().get().name().equals(\"#EmptyK\") || prod.klabel().get().name().equals(\"#KSequence\"))) || prod.isSubsort()))) {\n+                        if (!(sortAtt.contains(\"cellCollection\") && prod.isSubsort())) {\n+                            errors.add(KEMException.compilerError(\"Cannot add new constructors to hooked sort \" + prod.sort(), prod));\n+                        }\n+                    }\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a29106f653f8813076c769bed584199707d03b3"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYyMjEzOA==", "bodyText": "There are several problems with this approach:\n\nThe checks normally happen before any transformation happens to the k definition. We might be able to change this, but it would be a substantial architectural change and I'd rather not make such a fundamental change on a completely ad-hoc basis. If we're going to do something like this, it would be better to have an explicit semantic analysis phase and lay oiut exactly how it should work and convey information.\nTransformers that only add attributes to sentences don't really work. I've tried repeatedly to try to bypass this restriction and it's never gone well. It's well outside the scope of this change.\nYour proposed solution would disallow sentences that aren't constructors that the user put the constructor attribute on in built-in sorts, which would be a breaking change (albeit one probably not exercised by anything). But it would be very confusing.", "url": "https://github.com/kframework/k/pull/1579#discussion_r538622138", "createdAt": "2020-12-08T17:16:57Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/java/org/kframework/compile/checks/CheckAtt.java", "diffHunk": "@@ -3,28 +3,57 @@\n \n import org.kframework.attributes.Att;\n import org.kframework.attributes.HasLocation;\n+import org.kframework.builtin.Sorts;\n+import org.kframework.compile.ExpandMacros;\n import org.kframework.definition.Module;\n+import org.kframework.definition.Production;\n import org.kframework.definition.Rule;\n import org.kframework.definition.Sentence;\n+import org.kframework.kore.KLabel;\n import org.kframework.utils.errorsystem.KEMException;\n \n import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.kframework.Collections.*;\n \n /**\n  * Created by dwightguth on 1/25/16.\n  */\n public class CheckAtt {\n+    private final Set<KLabel> macros;\n     private final Set<KEMException> errors;\n     private final Module m;\n+    private final boolean isSymbolicKast;\n \n-    public CheckAtt(Set<KEMException> errors, Module m) {\n+    public CheckAtt(Set<KEMException> errors, Module m, boolean isSymbolicKast) {\n         this.errors = errors;\n         this.m = m;\n+        this.isSymbolicKast = isSymbolicKast;\n+        this.macros = stream(m.rulesFor()).filter(e -> stream(e._2()).filter(r -> ExpandMacros.isMacro(r)).findAny().isPresent()).map(e -> e._1()).collect(Collectors.toSet());\n     }\n \n     public void check(Sentence sentence) {\n         if (sentence instanceof Rule) {\n             check(((Rule) sentence).att(), sentence);\n+        } else if (sentence instanceof Production) {\n+            check((Production) sentence);\n+        }\n+    }\n+\n+    private void check(Production prod) {\n+        if (!prod.sort().equals(Sorts.KItem())) {\n+            Att sortAtt =  m.sortAttributesFor().getOrElse(prod.sort().head(), () -> Att.empty());\n+            if (sortAtt.contains(Att.HOOK()) && !sortAtt.get(Att.HOOK()).equals(\"ARRAY.Array\") && !(sortAtt.get(Att.HOOK()).equals(\"KVAR.KVar\") && isSymbolicKast)) {\n+                if (!prod.att().contains(Att.FUNCTION()) && !prod.att().contains(Att.BRACKET()) &&\n+                    !prod.att().contains(\"token\") && !(prod.klabel().isDefined() && macros.contains(prod.klabel().get()))) {\n+                    if (!(prod.sort().equals(Sorts.K()) && ((prod.klabel().isDefined() && (prod.klabel().get().name().equals(\"#EmptyK\") || prod.klabel().get().name().equals(\"#KSequence\"))) || prod.isSubsort()))) {\n+                        if (!(sortAtt.contains(\"cellCollection\") && prod.isSubsort())) {\n+                            errors.add(KEMException.compilerError(\"Cannot add new constructors to hooked sort \" + prod.sort(), prod));\n+                        }\n+                    }\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxNDM3Mw=="}, "originalCommit": {"oid": "0a29106f653f8813076c769bed584199707d03b3"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2894, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}