{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NjYwNDUz", "number": 1106, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjo1NjozOVrODg4i8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODo1MDoyNlrODiz2Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODA3NDczOnYy", "diffSide": "RIGHT", "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/disambiguation/KAppToTermConsVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjo1NjozOVrOFrVhFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjo1NjozOVrOFrVhFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4NTYyMQ==", "bodyText": "Not sure about adding a warning here.", "url": "https://github.com/kframework/k/pull/1106#discussion_r380985621", "createdAt": "2020-02-18T22:56:39Z", "author": {"login": "radumereuta"}, "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/disambiguation/KAppToTermConsVisitor.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) 2015-2019 K Team. All Rights Reserved.\n+package org.kframework.parser.concrete2kore.disambiguation;\n+\n+import com.google.common.collect.Sets;\n+import org.kframework.builtin.Sorts;\n+import org.kframework.definition.Module;\n+import org.kframework.definition.Production;\n+import org.kframework.parser.Ambiguity;\n+import org.kframework.parser.Constant;\n+import org.kframework.parser.SetsTransformerWithErrors;\n+import org.kframework.parser.Term;\n+import org.kframework.parser.TermCons;\n+import org.kframework.utils.StringUtil;\n+import org.kframework.utils.errorsystem.KEMException;\n+import org.pcollections.ConsPStack;\n+import org.pcollections.PStack;\n+import scala.collection.immutable.Set$;\n+import scala.util.Either;\n+import scala.util.Left;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.kframework.Collections.*;\n+import static org.kframework.kore.KORE.*;\n+\n+\n+/**\n+ * Transform the KApps found in a term into the corresponding TermCons so type checking and\n+ * variable type inference takes place correctly. Must be applied between type inference and\n+ * priority filter.\n+ */\n+public class KAppToTermConsVisitor extends SetsTransformerWithErrors<KEMException> {\n+\n+    private final Module mod;\n+    public KAppToTermConsVisitor(Module mod) {\n+        super();\n+        this.mod = mod;\n+    }\n+\n+    @Override\n+    public Either<java.util.Set<KEMException>, Term> apply(TermCons tc) {\n+        assert tc.production() != null : this.getClass() + \":\" + \" production not found.\" + tc;\n+        if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#KApply\")) {\n+            if (!(tc.items().get(1) instanceof Constant) || !((Constant) tc.items().get(1)).production().sort().equals(Sorts.KLabel()))\n+                // TODO: maybe return a hidden warning?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a5262cdb512b68a38fbb72f5e140221ee84795"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTI3NDgyOnYy", "diffSide": "RIGHT", "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/disambiguation/KAppToTermConsVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOToxNjoyNlrOFr0NdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOToxNjoyNlrOFr0NdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ4ODUwMQ==", "bodyText": "Let's use TermCons.get everywhere so we don't get confused by the reversed indices", "url": "https://github.com/kframework/k/pull/1106#discussion_r381488501", "createdAt": "2020-02-19T19:16:26Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/disambiguation/KAppToTermConsVisitor.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) 2015-2019 K Team. All Rights Reserved.\n+package org.kframework.parser.concrete2kore.disambiguation;\n+\n+import com.google.common.collect.Sets;\n+import org.kframework.builtin.Sorts;\n+import org.kframework.definition.Module;\n+import org.kframework.definition.Production;\n+import org.kframework.parser.Ambiguity;\n+import org.kframework.parser.Constant;\n+import org.kframework.parser.SetsTransformerWithErrors;\n+import org.kframework.parser.Term;\n+import org.kframework.parser.TermCons;\n+import org.kframework.utils.StringUtil;\n+import org.kframework.utils.errorsystem.KEMException;\n+import org.pcollections.ConsPStack;\n+import org.pcollections.PStack;\n+import scala.collection.immutable.Set$;\n+import scala.util.Either;\n+import scala.util.Left;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.kframework.Collections.*;\n+import static org.kframework.kore.KORE.*;\n+\n+\n+/**\n+ * Transform the KApps found in a term into the corresponding TermCons so type checking and\n+ * variable type inference takes place correctly. Must be applied between type inference and\n+ * priority filter.\n+ */\n+public class KAppToTermConsVisitor extends SetsTransformerWithErrors<KEMException> {\n+\n+    private final Module mod;\n+    public KAppToTermConsVisitor(Module mod) {\n+        super();\n+        this.mod = mod;\n+    }\n+\n+    @Override\n+    public Either<java.util.Set<KEMException>, Term> apply(TermCons tc) {\n+        assert tc.production() != null : this.getClass() + \":\" + \" production not found.\" + tc;\n+        if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#KApply\")) {\n+            if (!(tc.items().get(1) instanceof Constant) || !((Constant) tc.items().get(1)).production().sort().equals(Sorts.KLabel()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a5262cdb512b68a38fbb72f5e140221ee84795"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTI4Mzc0OnYy", "diffSide": "RIGHT", "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/disambiguation/KAppToTermConsVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOToxOToxMFrOFr0TWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDoyOToxNlrOFsVdOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ5MDAxMA==", "bodyText": "The logic in this block doesn't look sound to me. You are basically dropping some of the parses in the forest", "url": "https://github.com/kframework/k/pull/1106#discussion_r381490010", "createdAt": "2020-02-19T19:19:10Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/disambiguation/KAppToTermConsVisitor.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) 2015-2019 K Team. All Rights Reserved.\n+package org.kframework.parser.concrete2kore.disambiguation;\n+\n+import com.google.common.collect.Sets;\n+import org.kframework.builtin.Sorts;\n+import org.kframework.definition.Module;\n+import org.kframework.definition.Production;\n+import org.kframework.parser.Ambiguity;\n+import org.kframework.parser.Constant;\n+import org.kframework.parser.SetsTransformerWithErrors;\n+import org.kframework.parser.Term;\n+import org.kframework.parser.TermCons;\n+import org.kframework.utils.StringUtil;\n+import org.kframework.utils.errorsystem.KEMException;\n+import org.pcollections.ConsPStack;\n+import org.pcollections.PStack;\n+import scala.collection.immutable.Set$;\n+import scala.util.Either;\n+import scala.util.Left;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.kframework.Collections.*;\n+import static org.kframework.kore.KORE.*;\n+\n+\n+/**\n+ * Transform the KApps found in a term into the corresponding TermCons so type checking and\n+ * variable type inference takes place correctly. Must be applied between type inference and\n+ * priority filter.\n+ */\n+public class KAppToTermConsVisitor extends SetsTransformerWithErrors<KEMException> {\n+\n+    private final Module mod;\n+    public KAppToTermConsVisitor(Module mod) {\n+        super();\n+        this.mod = mod;\n+    }\n+\n+    @Override\n+    public Either<java.util.Set<KEMException>, Term> apply(TermCons tc) {\n+        assert tc.production() != null : this.getClass() + \":\" + \" production not found.\" + tc;\n+        if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#KApply\")) {\n+            if (!(tc.items().get(1) instanceof Constant) || !((Constant) tc.items().get(1)).production().sort().equals(Sorts.KLabel()))\n+                // TODO: maybe return a hidden warning?\n+                return super.apply(tc); // don't do anything if the label is not a token KLabel (in case of variable or casted variable)\n+            Constant kl = (Constant) tc.items().get(1);\n+            PStack<Term> items = flattenKList(tc.items().get(0));\n+            String klvalue = kl.value();\n+            try { klvalue = StringUtil.unescapeKoreKLabel(kl.value()); } catch (IllegalArgumentException e) { /* ignore */ } // if possible, unescape\n+            Set<Production> prods = mutable(mod.productionsFor().get(KLabel(klvalue))\n+                    .getOrElse(Set$.MODULE$::emptyInstance)\n+                    .filter(x -> ((Production) x).arity() == items.size()).toSet());\n+            if (prods.size() == 0) {\n+                String msg = \"Could not find any production with arity \" + items.size() + \" for label \" + kl.value();\n+                return Left.apply(Sets.newHashSet(KEMException.innerParserError(msg, kl)));\n+            } else if (prods.size() == 1)\n+                return super.apply(TermCons.apply(items, prods.iterator().next(), tc.location(), tc.source()));\n+            else {\n+                // instantiate all labels found and let the type checker filter them out\n+                Set<Term> tcs = new HashSet<>();\n+                for (Production prd : prods)\n+                    tcs.add(TermCons.apply(items, prd, tc.location(), tc.source()));\n+                return super.apply(Ambiguity.apply(tcs, tc.location(), tc.source()));\n+            }\n+        }\n+        return super.apply(tc);\n+    }\n+\n+    /**  Recurse under #KList and flatten all the terms */\n+    private static PStack<Term> flattenKList(Term t) {\n+        if (t instanceof Ambiguity) {\n+            Ambiguity amb = (Ambiguity) t;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a5262cdb512b68a38fbb72f5e140221ee84795"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAzMzIxMQ==", "bodyText": "I am applying an early prefer filter, only for #KList. If I get a KApp, I gather all the KList items and put them in a single list. If I get different ambiguities, like user lists, I discard them since I'm only interested in KList in this place.\nI want to apply this filter in exactly this place because it simplifies this part. It is possible to have user lists mixed in, then the number of KList items is going to be smaller. That's why I'm only taking the list with the highest amount of elements. Since KList has the left attribute, I'm only going to find one element with the highest amount of items.\nIt's possible that I have a production with arity 2, but a KList with 3 elements. Then that's going to be an error. You can still write that if you add a set of braces (see test:495)\nIf I make it the first filter, I have to handle more cases when flattening KList. It could also hinder priorities. I can write mul(plus(1,2),3) but when I transform it into TermCons, it's going to be rejected by the priority filter.", "url": "https://github.com/kframework/k/pull/1106#discussion_r382033211", "createdAt": "2020-02-20T14:29:16Z", "author": {"login": "radumereuta"}, "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/disambiguation/KAppToTermConsVisitor.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) 2015-2019 K Team. All Rights Reserved.\n+package org.kframework.parser.concrete2kore.disambiguation;\n+\n+import com.google.common.collect.Sets;\n+import org.kframework.builtin.Sorts;\n+import org.kframework.definition.Module;\n+import org.kframework.definition.Production;\n+import org.kframework.parser.Ambiguity;\n+import org.kframework.parser.Constant;\n+import org.kframework.parser.SetsTransformerWithErrors;\n+import org.kframework.parser.Term;\n+import org.kframework.parser.TermCons;\n+import org.kframework.utils.StringUtil;\n+import org.kframework.utils.errorsystem.KEMException;\n+import org.pcollections.ConsPStack;\n+import org.pcollections.PStack;\n+import scala.collection.immutable.Set$;\n+import scala.util.Either;\n+import scala.util.Left;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.kframework.Collections.*;\n+import static org.kframework.kore.KORE.*;\n+\n+\n+/**\n+ * Transform the KApps found in a term into the corresponding TermCons so type checking and\n+ * variable type inference takes place correctly. Must be applied between type inference and\n+ * priority filter.\n+ */\n+public class KAppToTermConsVisitor extends SetsTransformerWithErrors<KEMException> {\n+\n+    private final Module mod;\n+    public KAppToTermConsVisitor(Module mod) {\n+        super();\n+        this.mod = mod;\n+    }\n+\n+    @Override\n+    public Either<java.util.Set<KEMException>, Term> apply(TermCons tc) {\n+        assert tc.production() != null : this.getClass() + \":\" + \" production not found.\" + tc;\n+        if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#KApply\")) {\n+            if (!(tc.items().get(1) instanceof Constant) || !((Constant) tc.items().get(1)).production().sort().equals(Sorts.KLabel()))\n+                // TODO: maybe return a hidden warning?\n+                return super.apply(tc); // don't do anything if the label is not a token KLabel (in case of variable or casted variable)\n+            Constant kl = (Constant) tc.items().get(1);\n+            PStack<Term> items = flattenKList(tc.items().get(0));\n+            String klvalue = kl.value();\n+            try { klvalue = StringUtil.unescapeKoreKLabel(kl.value()); } catch (IllegalArgumentException e) { /* ignore */ } // if possible, unescape\n+            Set<Production> prods = mutable(mod.productionsFor().get(KLabel(klvalue))\n+                    .getOrElse(Set$.MODULE$::emptyInstance)\n+                    .filter(x -> ((Production) x).arity() == items.size()).toSet());\n+            if (prods.size() == 0) {\n+                String msg = \"Could not find any production with arity \" + items.size() + \" for label \" + kl.value();\n+                return Left.apply(Sets.newHashSet(KEMException.innerParserError(msg, kl)));\n+            } else if (prods.size() == 1)\n+                return super.apply(TermCons.apply(items, prods.iterator().next(), tc.location(), tc.source()));\n+            else {\n+                // instantiate all labels found and let the type checker filter them out\n+                Set<Term> tcs = new HashSet<>();\n+                for (Production prd : prods)\n+                    tcs.add(TermCons.apply(items, prd, tc.location(), tc.source()));\n+                return super.apply(Ambiguity.apply(tcs, tc.location(), tc.source()));\n+            }\n+        }\n+        return super.apply(tc);\n+    }\n+\n+    /**  Recurse under #KList and flatten all the terms */\n+    private static PStack<Term> flattenKList(Term t) {\n+        if (t instanceof Ambiguity) {\n+            Ambiguity amb = (Ambiguity) t;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ5MDAxMA=="}, "originalCommit": {"oid": "f6a5262cdb512b68a38fbb72f5e140221ee84795"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTI4ODg4OnYy", "diffSide": "RIGHT", "path": "kore/src/main/scala/org/kframework/parser/TreeNodesToKORE.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOToyMDo1N1rOFr0W0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOToyMDo1N1rOFr0W0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ5MDg5OQ==", "bodyText": "This needs to be converted to an arraylist still because otherwise reverse will take quadratic time.", "url": "https://github.com/kframework/k/pull/1106#discussion_r381490899", "createdAt": "2020-02-19T19:20:57Z", "author": {"login": "dwightguth"}, "path": "kore/src/main/scala/org/kframework/parser/TreeNodesToKORE.scala", "diffHunk": "@@ -29,21 +29,23 @@ class TreeNodesToKORE(parseSort: java.util.function.Function[String, Sort], stri\n     if (strict) KApply(lbl, KList(KToken(\"_\", Sorts.KVariable)), Att.add(classOf[Production], Production(lbl, Seq(), sort, Seq(NonTerminal(sort, None))))) else KToken(\"_\", Sorts.KVariable)\n   }\n \n-  def termConsToKApply(t: TermCons, items: PStack[Term], p: Production): KApply = {\n-    if (p.att.contains(\"recordPrd\", classOf[Production])) {\n-      val realProd = p.att.get(\"recordPrd\", classOf[Production])\n-      val map = new util.ArrayList(items).asScala.reverse.zipWithIndex.map { case (item, idx) => (p.nonterminal(idx).name.get, apply(item))} toMap\n+  def termConsToKApply(t: TermCons): K = {\n+    if (t.production.att.contains(\"recordPrd\", classOf[Production])) {\n+      val realProd = t.production.att.get(\"recordPrd\", classOf[Production])\n+      val map = t.items.asScala.reverse.zipWithIndex.map { case (item, idx) => (t.production.nonterminal(idx).name.get, apply(item))} toMap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a5262cdb512b68a38fbb72f5e140221ee84795"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTI5MzQ0OnYy", "diffSide": "RIGHT", "path": "kore/src/main/scala/org/kframework/parser/TreeNodesToKORE.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOToyMjoxMlrOFr0ZqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOToyMjoxMlrOFr0ZqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ5MTYyNQ==", "bodyText": "Same here", "url": "https://github.com/kframework/k/pull/1106#discussion_r381491625", "createdAt": "2020-02-19T19:22:12Z", "author": {"login": "dwightguth"}, "path": "kore/src/main/scala/org/kframework/parser/TreeNodesToKORE.scala", "diffHunk": "@@ -29,21 +29,23 @@ class TreeNodesToKORE(parseSort: java.util.function.Function[String, Sort], stri\n     if (strict) KApply(lbl, KList(KToken(\"_\", Sorts.KVariable)), Att.add(classOf[Production], Production(lbl, Seq(), sort, Seq(NonTerminal(sort, None))))) else KToken(\"_\", Sorts.KVariable)\n   }\n \n-  def termConsToKApply(t: TermCons, items: PStack[Term], p: Production): KApply = {\n-    if (p.att.contains(\"recordPrd\", classOf[Production])) {\n-      val realProd = p.att.get(\"recordPrd\", classOf[Production])\n-      val map = new util.ArrayList(items).asScala.reverse.zipWithIndex.map { case (item, idx) => (p.nonterminal(idx).name.get, apply(item))} toMap\n+  def termConsToKApply(t: TermCons): K = {\n+    if (t.production.att.contains(\"recordPrd\", classOf[Production])) {\n+      val realProd = t.production.att.get(\"recordPrd\", classOf[Production])\n+      val map = t.items.asScala.reverse.zipWithIndex.map { case (item, idx) => (t.production.nonterminal(idx).name.get, apply(item))} toMap\n       val realItems = realProd.nonterminals.map {\n         case NonTerminal(sort, None) => anonVar(sort)\n         case NonTerminal(sort, Some(x)) => map.getOrElse(x, anonVar(sort))\n       }\n-      KApply(p.klabel.get.head, KList(realItems.asJava), locationToAtt(t.location, t.source).add(classOf[Production], realProd))\n+      KApply(t.production.klabel.get.head, KList(realItems.asJava), locationToAtt(t.location, t.source).add(classOf[Production], realProd))\n     } else {\n-      val realProd = if (p.att.contains(\"originalPrd\", classOf[Production])) p.att.get(\"originalPrd\", classOf[Production]) else p\n-      if (p.klabel.isEmpty)\n-        throw KEMException.internalError(\"Missing klabel in production: \" + p, t)\n-      val klabel = if (p.klabel.get.name == \"#OuterCast\") KLabel(\"project:\" ++ p.sort.toString) else p.klabel.get\n-      KApply(klabel.head, KList(new util.ArrayList(items).asScala.reverse map apply asJava), locationToAtt(t.location, t.source).add(classOf[Production], realProd))\n+      val realProd = if (t.production.att.contains(\"originalPrd\", classOf[Production])) t.production.att.get(\"originalPrd\", classOf[Production]) else t.production\n+      if (t.production.att.contains(\"bracket\"))\n+        return apply(t.items.get(0))\n+      if (t.production.klabel.isEmpty)\n+        throw KEMException.internalError(\"Missing klabel in production: \" + t.production, t)\n+      val klabel = if (t.production.klabel.get.name == \"#OuterCast\") KLabel(\"project:\" ++ t.production.sort.toString) else t.production.klabel.get\n+      KApply(klabel.head, KList(t.items.asScala.reverse map apply asJava), locationToAtt(t.location, t.source).add(classOf[Production], realProd))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a5262cdb512b68a38fbb72f5e140221ee84795"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzA0MTE1OnYy", "diffSide": "RIGHT", "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/disambiguation/KAppToTermConsVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzowMToxOVrOFuFKuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToxNzozN1rOFuR2lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg2MzQ4MQ==", "bodyText": "Pretty sure this is reversed from the order you want.", "url": "https://github.com/kframework/k/pull/1106#discussion_r383863481", "createdAt": "2020-02-25T13:01:19Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/disambiguation/KAppToTermConsVisitor.java", "diffHunk": "@@ -43,57 +51,68 @@ public KAppToTermConsVisitor(Module mod) {\n     @Override\n     public Either<java.util.Set<KEMException>, Term> apply(TermCons tc) {\n         assert tc.production() != null : this.getClass() + \":\" + \" production not found.\" + tc;\n-        if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#KApply\")) {\n-            if (!(tc.items().get(1) instanceof Constant) || !((Constant) tc.items().get(1)).production().sort().equals(Sorts.KLabel()))\n-                // TODO: maybe return a hidden warning?\n+        if (tc.production().klabel().isDefined() && tc.production().klabel().get().equals(KLabels.KAPP)) {\n+            if (!(tc.get(0) instanceof Constant) || !((Constant) tc.get(0)).production().sort().equals(Sorts.KLabel()))\n+                // TODO: remove check once the java and ocaml backends are no longer supported.\n                 return super.apply(tc); // don't do anything if the label is not a token KLabel (in case of variable or casted variable)\n-            Constant kl = (Constant) tc.items().get(1);\n-            PStack<Term> items = flattenKList(tc.items().get(0));\n+            Constant kl = (Constant) tc.get(0);\n             String klvalue = kl.value();\n             try { klvalue = StringUtil.unescapeKoreKLabel(kl.value()); } catch (IllegalArgumentException e) { /* ignore */ } // if possible, unescape\n             Set<Production> prods = mutable(mod.productionsFor().get(KLabel(klvalue))\n-                    .getOrElse(Set$.MODULE$::emptyInstance)\n-                    .filter(x -> ((Production) x).arity() == items.size()).toSet());\n-            if (prods.size() == 0) {\n-                String msg = \"Could not find any production with arity \" + items.size() + \" for label \" + kl.value();\n+                    .getOrElse(Set$.MODULE$::emptyInstance).toSet());\n+            Set<Term> sol = new HashSet<>();\n+            Term t = new PushTopAmbiguityUp2().apply(tc.get(1));\n+            Stream<Term> uppedAmb = t instanceof Ambiguity ? ((Ambiguity) t).items().stream() : Lists.newArrayList(t).stream();\n+            Map<Integer, List<PStack<Term>>> flattKLists = uppedAmb\n+                    .map(KAppToTermConsVisitor::flattenKList)\n+                    .collect(Collectors.groupingBy(PStack::size));\n+            for (Production prd : prods)\n+                for (PStack<Term> terms : flattKLists.getOrDefault(prd.arity(), Lists.newArrayList()))\n+                    sol.add(TermCons.apply(terms, prd, tc.location(), tc.source()));\n+\n+            if (sol.size() == 0) {\n+                String msg = \"Could not find any suitable production for label \" + kl.value();\n                 return Left.apply(Sets.newHashSet(KEMException.innerParserError(msg, kl)));\n-            } else if (prods.size() == 1)\n-                return super.apply(TermCons.apply(items, prods.iterator().next(), tc.location(), tc.source()));\n-            else {\n-                // instantiate all labels found and let the type checker filter them out\n-                Set<Term> tcs = new HashSet<>();\n-                for (Production prd : prods)\n-                    tcs.add(TermCons.apply(items, prd, tc.location(), tc.source()));\n-                return super.apply(Ambiguity.apply(tcs, tc.location(), tc.source()));\n-            }\n+            } else if (sol.size() == 1) {\n+                return super.apply(sol.iterator().next());\n+            } else\n+                return super.apply(Ambiguity.apply(sol, tc.location(), tc.source()));\n         }\n         return super.apply(tc);\n     }\n \n     /**  Recurse under #KList and flatten all the terms */\n     private static PStack<Term> flattenKList(Term t) {\n         if (t instanceof Ambiguity) {\n-            Ambiguity amb = (Ambiguity) t;\n-            // prefer KList if they exist, otherwise return t\n-            List<PStack<Term>> klists = amb.items().stream()\n-                    .filter(x -> x instanceof TermCons\n-                            && ((TermCons) x).production().klabel().isDefined()\n-                            && ((TermCons) x).production().klabel().get().name().equals(\"#KList\"))\n-                    .map(KAppToTermConsVisitor::flattenKList)\n-                    .sorted((o1, o2) -> o2.size() - o1.size()).collect(Collectors.toList());\n-\n-            // expecting the first ambiguity branch to have the highest amount of elements\n-            assert klists.size() <= 1 || klists.get(0).size() != klists.get(1).size():\n-                    KAppToTermConsVisitor.class + \":\" + \" unexpected ambiguity pattern found under KApp \" + amb;\n-            if (klists.size() != 0)\n-                return klists.get(0);\n+            assert false : KAppToTermConsVisitor.class + \" expected all ambiguities to already be pushed to the top:\\n\" +\n+                    \"   Source: \" + ((Ambiguity) t).items().iterator().next().source().orElse(null) + \"\\n\" +\n+                    \"   Location: \" + ((Ambiguity) t).items().iterator().next().location().orElse(null);\n         } else if (t instanceof TermCons) {\n             TermCons tc = (TermCons) t;\n-            if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#KList\"))\n-                return flattenKList(tc.items().get(1)).plusAll(flattenKList(tc.items().get(0)));\n-            else if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#EmptyKList\"))\n+            if (tc.production().klabel().isDefined() && tc.production().klabel().get().equals(KLabels.KLIST))\n+                return flattenKList(tc.get(0)).plusAll(flattenKList(tc.get(1)));\n+            else if (tc.production().klabel().isDefined() && tc.production().klabel().get().equals(KLabels.EMPTYKLIST))\n                 return ConsPStack.empty();\n         }\n         return ConsPStack.singleton(t);\n     }\n+\n+    // push ambiguities top so we can get easy access to KList\n+    private static class PushTopAmbiguityUp2 extends SafeTransformer {\n+        @Override\n+        public Term apply(TermCons tc) {\n+            if (tc.production().klabel().isDefined() && tc.production().klabel().get().head().equals(KLabels.KLIST)) {\n+                Term v0 = super.apply(tc.get(0));\n+                Term v1 = super.apply(tc.get(1));\n+                Set<Term> t0 = v0 instanceof Ambiguity ? ((Ambiguity) v0).items() : Sets.newHashSet(v0);\n+                Set<Term> t1 = v1 instanceof Ambiguity ? ((Ambiguity) v1).items() : Sets.newHashSet(v1);\n+                Set<Term> rez = Sets.newHashSet();\n+                for (Term t00 : t0)\n+                    for (Term t11 : t1)\n+                        rez.add(TermCons.apply(ConsPStack.singleton(t00).plus(t11), tc.production(), tc.location(), tc.source()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab3add6197841f21cd2447a77f7f3c076808767d"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MTMxOQ==", "bodyText": "This is wrong, I misunderstood that plus does a prepend in constant time rather than an append.", "url": "https://github.com/kframework/k/pull/1106#discussion_r384071319", "createdAt": "2020-02-25T19:17:37Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/disambiguation/KAppToTermConsVisitor.java", "diffHunk": "@@ -43,57 +51,68 @@ public KAppToTermConsVisitor(Module mod) {\n     @Override\n     public Either<java.util.Set<KEMException>, Term> apply(TermCons tc) {\n         assert tc.production() != null : this.getClass() + \":\" + \" production not found.\" + tc;\n-        if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#KApply\")) {\n-            if (!(tc.items().get(1) instanceof Constant) || !((Constant) tc.items().get(1)).production().sort().equals(Sorts.KLabel()))\n-                // TODO: maybe return a hidden warning?\n+        if (tc.production().klabel().isDefined() && tc.production().klabel().get().equals(KLabels.KAPP)) {\n+            if (!(tc.get(0) instanceof Constant) || !((Constant) tc.get(0)).production().sort().equals(Sorts.KLabel()))\n+                // TODO: remove check once the java and ocaml backends are no longer supported.\n                 return super.apply(tc); // don't do anything if the label is not a token KLabel (in case of variable or casted variable)\n-            Constant kl = (Constant) tc.items().get(1);\n-            PStack<Term> items = flattenKList(tc.items().get(0));\n+            Constant kl = (Constant) tc.get(0);\n             String klvalue = kl.value();\n             try { klvalue = StringUtil.unescapeKoreKLabel(kl.value()); } catch (IllegalArgumentException e) { /* ignore */ } // if possible, unescape\n             Set<Production> prods = mutable(mod.productionsFor().get(KLabel(klvalue))\n-                    .getOrElse(Set$.MODULE$::emptyInstance)\n-                    .filter(x -> ((Production) x).arity() == items.size()).toSet());\n-            if (prods.size() == 0) {\n-                String msg = \"Could not find any production with arity \" + items.size() + \" for label \" + kl.value();\n+                    .getOrElse(Set$.MODULE$::emptyInstance).toSet());\n+            Set<Term> sol = new HashSet<>();\n+            Term t = new PushTopAmbiguityUp2().apply(tc.get(1));\n+            Stream<Term> uppedAmb = t instanceof Ambiguity ? ((Ambiguity) t).items().stream() : Lists.newArrayList(t).stream();\n+            Map<Integer, List<PStack<Term>>> flattKLists = uppedAmb\n+                    .map(KAppToTermConsVisitor::flattenKList)\n+                    .collect(Collectors.groupingBy(PStack::size));\n+            for (Production prd : prods)\n+                for (PStack<Term> terms : flattKLists.getOrDefault(prd.arity(), Lists.newArrayList()))\n+                    sol.add(TermCons.apply(terms, prd, tc.location(), tc.source()));\n+\n+            if (sol.size() == 0) {\n+                String msg = \"Could not find any suitable production for label \" + kl.value();\n                 return Left.apply(Sets.newHashSet(KEMException.innerParserError(msg, kl)));\n-            } else if (prods.size() == 1)\n-                return super.apply(TermCons.apply(items, prods.iterator().next(), tc.location(), tc.source()));\n-            else {\n-                // instantiate all labels found and let the type checker filter them out\n-                Set<Term> tcs = new HashSet<>();\n-                for (Production prd : prods)\n-                    tcs.add(TermCons.apply(items, prd, tc.location(), tc.source()));\n-                return super.apply(Ambiguity.apply(tcs, tc.location(), tc.source()));\n-            }\n+            } else if (sol.size() == 1) {\n+                return super.apply(sol.iterator().next());\n+            } else\n+                return super.apply(Ambiguity.apply(sol, tc.location(), tc.source()));\n         }\n         return super.apply(tc);\n     }\n \n     /**  Recurse under #KList and flatten all the terms */\n     private static PStack<Term> flattenKList(Term t) {\n         if (t instanceof Ambiguity) {\n-            Ambiguity amb = (Ambiguity) t;\n-            // prefer KList if they exist, otherwise return t\n-            List<PStack<Term>> klists = amb.items().stream()\n-                    .filter(x -> x instanceof TermCons\n-                            && ((TermCons) x).production().klabel().isDefined()\n-                            && ((TermCons) x).production().klabel().get().name().equals(\"#KList\"))\n-                    .map(KAppToTermConsVisitor::flattenKList)\n-                    .sorted((o1, o2) -> o2.size() - o1.size()).collect(Collectors.toList());\n-\n-            // expecting the first ambiguity branch to have the highest amount of elements\n-            assert klists.size() <= 1 || klists.get(0).size() != klists.get(1).size():\n-                    KAppToTermConsVisitor.class + \":\" + \" unexpected ambiguity pattern found under KApp \" + amb;\n-            if (klists.size() != 0)\n-                return klists.get(0);\n+            assert false : KAppToTermConsVisitor.class + \" expected all ambiguities to already be pushed to the top:\\n\" +\n+                    \"   Source: \" + ((Ambiguity) t).items().iterator().next().source().orElse(null) + \"\\n\" +\n+                    \"   Location: \" + ((Ambiguity) t).items().iterator().next().location().orElse(null);\n         } else if (t instanceof TermCons) {\n             TermCons tc = (TermCons) t;\n-            if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#KList\"))\n-                return flattenKList(tc.items().get(1)).plusAll(flattenKList(tc.items().get(0)));\n-            else if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#EmptyKList\"))\n+            if (tc.production().klabel().isDefined() && tc.production().klabel().get().equals(KLabels.KLIST))\n+                return flattenKList(tc.get(0)).plusAll(flattenKList(tc.get(1)));\n+            else if (tc.production().klabel().isDefined() && tc.production().klabel().get().equals(KLabels.EMPTYKLIST))\n                 return ConsPStack.empty();\n         }\n         return ConsPStack.singleton(t);\n     }\n+\n+    // push ambiguities top so we can get easy access to KList\n+    private static class PushTopAmbiguityUp2 extends SafeTransformer {\n+        @Override\n+        public Term apply(TermCons tc) {\n+            if (tc.production().klabel().isDefined() && tc.production().klabel().get().head().equals(KLabels.KLIST)) {\n+                Term v0 = super.apply(tc.get(0));\n+                Term v1 = super.apply(tc.get(1));\n+                Set<Term> t0 = v0 instanceof Ambiguity ? ((Ambiguity) v0).items() : Sets.newHashSet(v0);\n+                Set<Term> t1 = v1 instanceof Ambiguity ? ((Ambiguity) v1).items() : Sets.newHashSet(v1);\n+                Set<Term> rez = Sets.newHashSet();\n+                for (Term t00 : t0)\n+                    for (Term t11 : t1)\n+                        rez.add(TermCons.apply(ConsPStack.singleton(t00).plus(t11), tc.production(), tc.location(), tc.source()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg2MzQ4MQ=="}, "originalCommit": {"oid": "ab3add6197841f21cd2447a77f7f3c076808767d"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzA0ODIwOnYy", "diffSide": "RIGHT", "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/disambiguation/KAppToTermConsVisitor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzowMzoyOVrOFuFO9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToyMDoxM1rOFuR7vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg2NDU2Nw==", "bodyText": "Pretty sure this is reversed too", "url": "https://github.com/kframework/k/pull/1106#discussion_r383864567", "createdAt": "2020-02-25T13:03:29Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/disambiguation/KAppToTermConsVisitor.java", "diffHunk": "@@ -43,57 +51,68 @@ public KAppToTermConsVisitor(Module mod) {\n     @Override\n     public Either<java.util.Set<KEMException>, Term> apply(TermCons tc) {\n         assert tc.production() != null : this.getClass() + \":\" + \" production not found.\" + tc;\n-        if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#KApply\")) {\n-            if (!(tc.items().get(1) instanceof Constant) || !((Constant) tc.items().get(1)).production().sort().equals(Sorts.KLabel()))\n-                // TODO: maybe return a hidden warning?\n+        if (tc.production().klabel().isDefined() && tc.production().klabel().get().equals(KLabels.KAPP)) {\n+            if (!(tc.get(0) instanceof Constant) || !((Constant) tc.get(0)).production().sort().equals(Sorts.KLabel()))\n+                // TODO: remove check once the java and ocaml backends are no longer supported.\n                 return super.apply(tc); // don't do anything if the label is not a token KLabel (in case of variable or casted variable)\n-            Constant kl = (Constant) tc.items().get(1);\n-            PStack<Term> items = flattenKList(tc.items().get(0));\n+            Constant kl = (Constant) tc.get(0);\n             String klvalue = kl.value();\n             try { klvalue = StringUtil.unescapeKoreKLabel(kl.value()); } catch (IllegalArgumentException e) { /* ignore */ } // if possible, unescape\n             Set<Production> prods = mutable(mod.productionsFor().get(KLabel(klvalue))\n-                    .getOrElse(Set$.MODULE$::emptyInstance)\n-                    .filter(x -> ((Production) x).arity() == items.size()).toSet());\n-            if (prods.size() == 0) {\n-                String msg = \"Could not find any production with arity \" + items.size() + \" for label \" + kl.value();\n+                    .getOrElse(Set$.MODULE$::emptyInstance).toSet());\n+            Set<Term> sol = new HashSet<>();\n+            Term t = new PushTopAmbiguityUp2().apply(tc.get(1));\n+            Stream<Term> uppedAmb = t instanceof Ambiguity ? ((Ambiguity) t).items().stream() : Lists.newArrayList(t).stream();\n+            Map<Integer, List<PStack<Term>>> flattKLists = uppedAmb\n+                    .map(KAppToTermConsVisitor::flattenKList)\n+                    .collect(Collectors.groupingBy(PStack::size));\n+            for (Production prd : prods)\n+                for (PStack<Term> terms : flattKLists.getOrDefault(prd.arity(), Lists.newArrayList()))\n+                    sol.add(TermCons.apply(terms, prd, tc.location(), tc.source()));\n+\n+            if (sol.size() == 0) {\n+                String msg = \"Could not find any suitable production for label \" + kl.value();\n                 return Left.apply(Sets.newHashSet(KEMException.innerParserError(msg, kl)));\n-            } else if (prods.size() == 1)\n-                return super.apply(TermCons.apply(items, prods.iterator().next(), tc.location(), tc.source()));\n-            else {\n-                // instantiate all labels found and let the type checker filter them out\n-                Set<Term> tcs = new HashSet<>();\n-                for (Production prd : prods)\n-                    tcs.add(TermCons.apply(items, prd, tc.location(), tc.source()));\n-                return super.apply(Ambiguity.apply(tcs, tc.location(), tc.source()));\n-            }\n+            } else if (sol.size() == 1) {\n+                return super.apply(sol.iterator().next());\n+            } else\n+                return super.apply(Ambiguity.apply(sol, tc.location(), tc.source()));\n         }\n         return super.apply(tc);\n     }\n \n     /**  Recurse under #KList and flatten all the terms */\n     private static PStack<Term> flattenKList(Term t) {\n         if (t instanceof Ambiguity) {\n-            Ambiguity amb = (Ambiguity) t;\n-            // prefer KList if they exist, otherwise return t\n-            List<PStack<Term>> klists = amb.items().stream()\n-                    .filter(x -> x instanceof TermCons\n-                            && ((TermCons) x).production().klabel().isDefined()\n-                            && ((TermCons) x).production().klabel().get().name().equals(\"#KList\"))\n-                    .map(KAppToTermConsVisitor::flattenKList)\n-                    .sorted((o1, o2) -> o2.size() - o1.size()).collect(Collectors.toList());\n-\n-            // expecting the first ambiguity branch to have the highest amount of elements\n-            assert klists.size() <= 1 || klists.get(0).size() != klists.get(1).size():\n-                    KAppToTermConsVisitor.class + \":\" + \" unexpected ambiguity pattern found under KApp \" + amb;\n-            if (klists.size() != 0)\n-                return klists.get(0);\n+            assert false : KAppToTermConsVisitor.class + \" expected all ambiguities to already be pushed to the top:\\n\" +\n+                    \"   Source: \" + ((Ambiguity) t).items().iterator().next().source().orElse(null) + \"\\n\" +\n+                    \"   Location: \" + ((Ambiguity) t).items().iterator().next().location().orElse(null);\n         } else if (t instanceof TermCons) {\n             TermCons tc = (TermCons) t;\n-            if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#KList\"))\n-                return flattenKList(tc.items().get(1)).plusAll(flattenKList(tc.items().get(0)));\n-            else if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#EmptyKList\"))\n+            if (tc.production().klabel().isDefined() && tc.production().klabel().get().equals(KLabels.KLIST))\n+                return flattenKList(tc.get(0)).plusAll(flattenKList(tc.get(1)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab3add6197841f21cd2447a77f7f3c076808767d"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MjQwOQ==", "bodyText": "I was wrong here too; plusAll prepends the argument in reverse order, so if I have ((1, 2),(3, 4)) as the children, I am going to end up with 1,2,4,3 as the final arguments.", "url": "https://github.com/kframework/k/pull/1106#discussion_r384072409", "createdAt": "2020-02-25T19:19:46Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/disambiguation/KAppToTermConsVisitor.java", "diffHunk": "@@ -43,57 +51,68 @@ public KAppToTermConsVisitor(Module mod) {\n     @Override\n     public Either<java.util.Set<KEMException>, Term> apply(TermCons tc) {\n         assert tc.production() != null : this.getClass() + \":\" + \" production not found.\" + tc;\n-        if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#KApply\")) {\n-            if (!(tc.items().get(1) instanceof Constant) || !((Constant) tc.items().get(1)).production().sort().equals(Sorts.KLabel()))\n-                // TODO: maybe return a hidden warning?\n+        if (tc.production().klabel().isDefined() && tc.production().klabel().get().equals(KLabels.KAPP)) {\n+            if (!(tc.get(0) instanceof Constant) || !((Constant) tc.get(0)).production().sort().equals(Sorts.KLabel()))\n+                // TODO: remove check once the java and ocaml backends are no longer supported.\n                 return super.apply(tc); // don't do anything if the label is not a token KLabel (in case of variable or casted variable)\n-            Constant kl = (Constant) tc.items().get(1);\n-            PStack<Term> items = flattenKList(tc.items().get(0));\n+            Constant kl = (Constant) tc.get(0);\n             String klvalue = kl.value();\n             try { klvalue = StringUtil.unescapeKoreKLabel(kl.value()); } catch (IllegalArgumentException e) { /* ignore */ } // if possible, unescape\n             Set<Production> prods = mutable(mod.productionsFor().get(KLabel(klvalue))\n-                    .getOrElse(Set$.MODULE$::emptyInstance)\n-                    .filter(x -> ((Production) x).arity() == items.size()).toSet());\n-            if (prods.size() == 0) {\n-                String msg = \"Could not find any production with arity \" + items.size() + \" for label \" + kl.value();\n+                    .getOrElse(Set$.MODULE$::emptyInstance).toSet());\n+            Set<Term> sol = new HashSet<>();\n+            Term t = new PushTopAmbiguityUp2().apply(tc.get(1));\n+            Stream<Term> uppedAmb = t instanceof Ambiguity ? ((Ambiguity) t).items().stream() : Lists.newArrayList(t).stream();\n+            Map<Integer, List<PStack<Term>>> flattKLists = uppedAmb\n+                    .map(KAppToTermConsVisitor::flattenKList)\n+                    .collect(Collectors.groupingBy(PStack::size));\n+            for (Production prd : prods)\n+                for (PStack<Term> terms : flattKLists.getOrDefault(prd.arity(), Lists.newArrayList()))\n+                    sol.add(TermCons.apply(terms, prd, tc.location(), tc.source()));\n+\n+            if (sol.size() == 0) {\n+                String msg = \"Could not find any suitable production for label \" + kl.value();\n                 return Left.apply(Sets.newHashSet(KEMException.innerParserError(msg, kl)));\n-            } else if (prods.size() == 1)\n-                return super.apply(TermCons.apply(items, prods.iterator().next(), tc.location(), tc.source()));\n-            else {\n-                // instantiate all labels found and let the type checker filter them out\n-                Set<Term> tcs = new HashSet<>();\n-                for (Production prd : prods)\n-                    tcs.add(TermCons.apply(items, prd, tc.location(), tc.source()));\n-                return super.apply(Ambiguity.apply(tcs, tc.location(), tc.source()));\n-            }\n+            } else if (sol.size() == 1) {\n+                return super.apply(sol.iterator().next());\n+            } else\n+                return super.apply(Ambiguity.apply(sol, tc.location(), tc.source()));\n         }\n         return super.apply(tc);\n     }\n \n     /**  Recurse under #KList and flatten all the terms */\n     private static PStack<Term> flattenKList(Term t) {\n         if (t instanceof Ambiguity) {\n-            Ambiguity amb = (Ambiguity) t;\n-            // prefer KList if they exist, otherwise return t\n-            List<PStack<Term>> klists = amb.items().stream()\n-                    .filter(x -> x instanceof TermCons\n-                            && ((TermCons) x).production().klabel().isDefined()\n-                            && ((TermCons) x).production().klabel().get().name().equals(\"#KList\"))\n-                    .map(KAppToTermConsVisitor::flattenKList)\n-                    .sorted((o1, o2) -> o2.size() - o1.size()).collect(Collectors.toList());\n-\n-            // expecting the first ambiguity branch to have the highest amount of elements\n-            assert klists.size() <= 1 || klists.get(0).size() != klists.get(1).size():\n-                    KAppToTermConsVisitor.class + \":\" + \" unexpected ambiguity pattern found under KApp \" + amb;\n-            if (klists.size() != 0)\n-                return klists.get(0);\n+            assert false : KAppToTermConsVisitor.class + \" expected all ambiguities to already be pushed to the top:\\n\" +\n+                    \"   Source: \" + ((Ambiguity) t).items().iterator().next().source().orElse(null) + \"\\n\" +\n+                    \"   Location: \" + ((Ambiguity) t).items().iterator().next().location().orElse(null);\n         } else if (t instanceof TermCons) {\n             TermCons tc = (TermCons) t;\n-            if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#KList\"))\n-                return flattenKList(tc.items().get(1)).plusAll(flattenKList(tc.items().get(0)));\n-            else if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#EmptyKList\"))\n+            if (tc.production().klabel().isDefined() && tc.production().klabel().get().equals(KLabels.KLIST))\n+                return flattenKList(tc.get(0)).plusAll(flattenKList(tc.get(1)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg2NDU2Nw=="}, "originalCommit": {"oid": "ab3add6197841f21cd2447a77f7f3c076808767d"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MjYzOQ==", "bodyText": "the second flattenKList call needs to be reversed.", "url": "https://github.com/kframework/k/pull/1106#discussion_r384072639", "createdAt": "2020-02-25T19:20:13Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/disambiguation/KAppToTermConsVisitor.java", "diffHunk": "@@ -43,57 +51,68 @@ public KAppToTermConsVisitor(Module mod) {\n     @Override\n     public Either<java.util.Set<KEMException>, Term> apply(TermCons tc) {\n         assert tc.production() != null : this.getClass() + \":\" + \" production not found.\" + tc;\n-        if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#KApply\")) {\n-            if (!(tc.items().get(1) instanceof Constant) || !((Constant) tc.items().get(1)).production().sort().equals(Sorts.KLabel()))\n-                // TODO: maybe return a hidden warning?\n+        if (tc.production().klabel().isDefined() && tc.production().klabel().get().equals(KLabels.KAPP)) {\n+            if (!(tc.get(0) instanceof Constant) || !((Constant) tc.get(0)).production().sort().equals(Sorts.KLabel()))\n+                // TODO: remove check once the java and ocaml backends are no longer supported.\n                 return super.apply(tc); // don't do anything if the label is not a token KLabel (in case of variable or casted variable)\n-            Constant kl = (Constant) tc.items().get(1);\n-            PStack<Term> items = flattenKList(tc.items().get(0));\n+            Constant kl = (Constant) tc.get(0);\n             String klvalue = kl.value();\n             try { klvalue = StringUtil.unescapeKoreKLabel(kl.value()); } catch (IllegalArgumentException e) { /* ignore */ } // if possible, unescape\n             Set<Production> prods = mutable(mod.productionsFor().get(KLabel(klvalue))\n-                    .getOrElse(Set$.MODULE$::emptyInstance)\n-                    .filter(x -> ((Production) x).arity() == items.size()).toSet());\n-            if (prods.size() == 0) {\n-                String msg = \"Could not find any production with arity \" + items.size() + \" for label \" + kl.value();\n+                    .getOrElse(Set$.MODULE$::emptyInstance).toSet());\n+            Set<Term> sol = new HashSet<>();\n+            Term t = new PushTopAmbiguityUp2().apply(tc.get(1));\n+            Stream<Term> uppedAmb = t instanceof Ambiguity ? ((Ambiguity) t).items().stream() : Lists.newArrayList(t).stream();\n+            Map<Integer, List<PStack<Term>>> flattKLists = uppedAmb\n+                    .map(KAppToTermConsVisitor::flattenKList)\n+                    .collect(Collectors.groupingBy(PStack::size));\n+            for (Production prd : prods)\n+                for (PStack<Term> terms : flattKLists.getOrDefault(prd.arity(), Lists.newArrayList()))\n+                    sol.add(TermCons.apply(terms, prd, tc.location(), tc.source()));\n+\n+            if (sol.size() == 0) {\n+                String msg = \"Could not find any suitable production for label \" + kl.value();\n                 return Left.apply(Sets.newHashSet(KEMException.innerParserError(msg, kl)));\n-            } else if (prods.size() == 1)\n-                return super.apply(TermCons.apply(items, prods.iterator().next(), tc.location(), tc.source()));\n-            else {\n-                // instantiate all labels found and let the type checker filter them out\n-                Set<Term> tcs = new HashSet<>();\n-                for (Production prd : prods)\n-                    tcs.add(TermCons.apply(items, prd, tc.location(), tc.source()));\n-                return super.apply(Ambiguity.apply(tcs, tc.location(), tc.source()));\n-            }\n+            } else if (sol.size() == 1) {\n+                return super.apply(sol.iterator().next());\n+            } else\n+                return super.apply(Ambiguity.apply(sol, tc.location(), tc.source()));\n         }\n         return super.apply(tc);\n     }\n \n     /**  Recurse under #KList and flatten all the terms */\n     private static PStack<Term> flattenKList(Term t) {\n         if (t instanceof Ambiguity) {\n-            Ambiguity amb = (Ambiguity) t;\n-            // prefer KList if they exist, otherwise return t\n-            List<PStack<Term>> klists = amb.items().stream()\n-                    .filter(x -> x instanceof TermCons\n-                            && ((TermCons) x).production().klabel().isDefined()\n-                            && ((TermCons) x).production().klabel().get().name().equals(\"#KList\"))\n-                    .map(KAppToTermConsVisitor::flattenKList)\n-                    .sorted((o1, o2) -> o2.size() - o1.size()).collect(Collectors.toList());\n-\n-            // expecting the first ambiguity branch to have the highest amount of elements\n-            assert klists.size() <= 1 || klists.get(0).size() != klists.get(1).size():\n-                    KAppToTermConsVisitor.class + \":\" + \" unexpected ambiguity pattern found under KApp \" + amb;\n-            if (klists.size() != 0)\n-                return klists.get(0);\n+            assert false : KAppToTermConsVisitor.class + \" expected all ambiguities to already be pushed to the top:\\n\" +\n+                    \"   Source: \" + ((Ambiguity) t).items().iterator().next().source().orElse(null) + \"\\n\" +\n+                    \"   Location: \" + ((Ambiguity) t).items().iterator().next().location().orElse(null);\n         } else if (t instanceof TermCons) {\n             TermCons tc = (TermCons) t;\n-            if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#KList\"))\n-                return flattenKList(tc.items().get(1)).plusAll(flattenKList(tc.items().get(0)));\n-            else if (tc.production().klabel().isDefined() && tc.production().klabel().get().name().equals(\"#EmptyKList\"))\n+            if (tc.production().klabel().isDefined() && tc.production().klabel().get().equals(KLabels.KLIST))\n+                return flattenKList(tc.get(0)).plusAll(flattenKList(tc.get(1)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg2NDU2Nw=="}, "originalCommit": {"oid": "ab3add6197841f21cd2447a77f7f3c076808767d"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODI3NjA4OnYy", "diffSide": "RIGHT", "path": "kernel/src/test/java/org/kframework/parser/concrete2kore/RuleGrammarTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODo1MDoxNlrOFuQ8wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODo1MDoxNlrOFuQ8wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1NjUxMg==", "bodyText": "Test 1", "url": "https://github.com/kframework/k/pull/1106#discussion_r384056512", "createdAt": "2020-02-25T18:50:16Z", "author": {"login": "radumereuta"}, "path": "kernel/src/test/java/org/kframework/parser/concrete2kore/RuleGrammarTest.java", "diffHunk": "@@ -472,4 +474,35 @@ public void testLayout() {\n         parseProgram(\"0 (; some text ;) + 3\", customLayout, \"Int\", 0, false);\n         parseProgram(\"0 + 3 // some text\"   , customLayout, \"Int\", 0, true);\n     }\n+\n+    // test KAppToTermConsVisitor for issue #985\n+    @Test\n+    public void test25() {\n+        String def = \"\" +\n+                \"module TEST\\n\" +\n+                \"  syntax E ::= \\\"a\\\"         [klabel(elma), symbol]\\n\" +\n+                \"  syntax Lst ::= E \\\",\\\" Lst [klabel(constr), symbol]\\n\" +\n+                \"  syntax Lst2 ::= E \\\",\\\" Lst2 [klabel(constr), symbol]\\n\" +\n+                \"                | Lst \\n\" +\n+                \"endmodule\";\n+        parseRule(\"constr(I, L) => L\", def, 0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab3add6197841f21cd2447a77f7f3c076808767d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODI3NjYzOnYy", "diffSide": "RIGHT", "path": "kernel/src/test/java/org/kframework/parser/concrete2kore/RuleGrammarTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODo1MDoyNlrOFuQ9Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODo1MDoyNlrOFuQ9Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1NjU5OQ==", "bodyText": "Test 2", "url": "https://github.com/kframework/k/pull/1106#discussion_r384056599", "createdAt": "2020-02-25T18:50:26Z", "author": {"login": "radumereuta"}, "path": "kernel/src/test/java/org/kframework/parser/concrete2kore/RuleGrammarTest.java", "diffHunk": "@@ -472,4 +474,35 @@ public void testLayout() {\n         parseProgram(\"0 (; some text ;) + 3\", customLayout, \"Int\", 0, false);\n         parseProgram(\"0 + 3 // some text\"   , customLayout, \"Int\", 0, true);\n     }\n+\n+    // test KAppToTermConsVisitor for issue #985\n+    @Test\n+    public void test25() {\n+        String def = \"\" +\n+                \"module TEST\\n\" +\n+                \"  syntax E ::= \\\"a\\\"         [klabel(elma), symbol]\\n\" +\n+                \"  syntax Lst ::= E \\\",\\\" Lst [klabel(constr), symbol]\\n\" +\n+                \"  syntax Lst2 ::= E \\\",\\\" Lst2 [klabel(constr), symbol]\\n\" +\n+                \"                | Lst \\n\" +\n+                \"endmodule\";\n+        parseRule(\"constr(I, L) => L\", def, 0,\n+                KApply(KLabel(\"#ruleNoConditions\"),KApply(KLabel(\"#KRewrite\"),\n+                        KApply(KLabel(\"constr\"),\n+                                KApply(KLabel(\"#SemanticCastToE\"), KToken(\"I\",Sort(\"#KVariable\"))),\n+                                KApply(KLabel(\"#SemanticCastToLst2\"), KToken(\"L\",Sort(\"#KVariable\")))),\n+                        KApply(KLabel(\"#SemanticCastToLst2\"), KToken(\"L\",Sort(\"#KVariable\")))\n+                )));\n+        parseRule(\"`constr`(I, (a, L)) => L\", def, 0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab3add6197841f21cd2447a77f7f3c076808767d"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3169, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}