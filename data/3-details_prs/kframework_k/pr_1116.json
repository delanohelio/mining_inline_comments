{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NjMyNTMw", "number": 1116, "title": "Adding support for .md files", "bodyText": "with fenced k code blocks\nI'm going to need someone to check if the licensing is ok for us:\nhttps://github.com/vsch/flexmark-java\nI've looked over several java parsers for Markdown and this provided the location information\nI needed to correctly preserve location information.\nI've manually tested it on the K-in-K definition and it kompiled all rules w/o errors. Not sure if it's worth adding tests since we're mostly interested in preserving location information here.\nI've also thought of printing the output somewhere in -kompiled when --debug is given, but I would have to add a new dependency to ParserUtils. Not sure if it's worth.", "createdAt": "2020-02-22T21:17:18Z", "url": "https://github.com/kframework/k/pull/1116", "merged": true, "mergeCommit": {"oid": "4201087d8773724a39c96ed322acfe673ab86939"}, "closed": true, "closedAt": "2020-05-22T12:26:19Z", "author": {"login": "radumereuta"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccLY2yABqjMyODIzMjMwNTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjweS_AH2gAyMzc4NjMyNTMwOmY5ZGE5NzkwOTY3MjAyZWI5ZDlkYTU4YzA4YzM0MzU0NTk3NDI4Nzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8b1504d404cb68359a514d3373c760da11191d68", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/8b1504d404cb68359a514d3373c760da11191d68", "committedDate": "2020-02-22T21:01:30Z", "message": "Adding support for .md files\n\nwith fenced k code blocks"}, "afterCommit": {"oid": "ea38e1c26840e6945e1cf784899d81ae906c71c5", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/ea38e1c26840e6945e1cf784899d81ae906c71c5", "committedDate": "2020-04-28T22:07:35Z", "message": "Adding option for tag selection\n\nusing jjTree-JavaCC parser and a simple expression eval"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea38e1c26840e6945e1cf784899d81ae906c71c5", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/ea38e1c26840e6945e1cf784899d81ae906c71c5", "committedDate": "2020-04-28T22:07:35Z", "message": "Adding option for tag selection\n\nusing jjTree-JavaCC parser and a simple expression eval"}, "afterCommit": {"oid": "479c3c8f595fe5dc25fbe0d68c77dbafc6283af9", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/479c3c8f595fe5dc25fbe0d68c77dbafc6283af9", "committedDate": "2020-05-07T16:09:06Z", "message": "Refine tag grammar and add  unit test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "479c3c8f595fe5dc25fbe0d68c77dbafc6283af9", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/479c3c8f595fe5dc25fbe0d68c77dbafc6283af9", "committedDate": "2020-05-07T16:09:06Z", "message": "Refine tag grammar and add  unit test"}, "afterCommit": {"oid": "023a388853c6c114a36c777565803f78fae9d4a3", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/023a388853c6c114a36c777565803f78fae9d4a3", "committedDate": "2020-05-10T17:21:31Z", "message": "Debug prints .k files in -kompiled directory"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "023a388853c6c114a36c777565803f78fae9d4a3", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/023a388853c6c114a36c777565803f78fae9d4a3", "committedDate": "2020-05-10T17:21:31Z", "message": "Debug prints .k files in -kompiled directory"}, "afterCommit": {"oid": "cbc4f0a3a6f45b16f5fc036118b89d9eb5c4a487", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/cbc4f0a3a6f45b16f5fc036118b89d9eb5c4a487", "committedDate": "2020-05-11T19:57:32Z", "message": "Removing leading dot from tags"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMDkwODQw", "url": "https://github.com/kframework/k/pull/1116#pullrequestreview-410090840", "createdAt": "2020-05-12T14:18:48Z", "commit": {"oid": "cbc4f0a3a6f45b16f5fc036118b89d9eb5c4a487"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDoxODo0OFrOGUI9fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDozNDowNlrOGUJt6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3MTUxOQ==", "bodyText": "This should be in the outer parsing package.", "url": "https://github.com/kframework/k/pull/1116#discussion_r423771519", "createdAt": "2020-05-12T14:18:48Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/java/org/kframework/parser/inner/ExtractFencedKCodeFromMarkdown.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2018-2019 K Team. All Rights Reserved.\n+package org.kframework.parser.inner;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbc4f0a3a6f45b16f5fc036118b89d9eb5c4a487"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3ODg5Ng==", "bodyText": "Let's make this package named outer.markdown.", "url": "https://github.com/kframework/k/pull/1116#discussion_r423778896", "createdAt": "2020-05-12T14:27:46Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/jjtree/TagSelector.jjt", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) 2013-2020 K Team. All Rights Reserved.\n+options {\n+  MULTI=true;\n+  KEEP_LINE_COLUMN = false;\n+  STATIC = false;\n+}\n+PARSER_BEGIN(TagSelector)\n+package org.kframework.parser.tagSelector;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbc4f0a3a6f45b16f5fc036118b89d9eb5c4a487"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4MzkxMg==", "bodyText": "This needs better error message. Take a look at how we format the error messages from javacc in the outer parser.", "url": "https://github.com/kframework/k/pull/1116#discussion_r423783912", "createdAt": "2020-05-12T14:34:06Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/jjtree/TagSelector.jjt", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) 2013-2020 K Team. All Rights Reserved.\n+options {\n+  MULTI=true;\n+  KEEP_LINE_COLUMN = false;\n+  STATIC = false;\n+}\n+PARSER_BEGIN(TagSelector)\n+package org.kframework.parser.tagSelector;\n+\n+import java.lang.String;\n+import java.io.StringReader;\n+import java.util.Set;\n+import java.util.HashSet;\n+import org.kframework.utils.errorsystem.KEMException;\n+\n+/**\n+ * An Arithmetic Grammar.\n+ * @author Radu Mereuta\n+ */\n+public class TagSelector {\n+\n+  /** Run this to test the parser. */\n+  public static void main(String args[]) {\n+    System.out.println(\"Reading from standard input...\");\n+    TagSelector t = new TagSelector(new StringReader(\"a|!b&c\"));\n+    try {\n+      //SimpleNode result = t.ExpressionStart();\n+      SimpleNode result = t.TagListStart();\n+      result.dump(\"\");\n+      System.out.println(\"Success.\");\n+    } catch (Exception e) {\n+      System.out.println(\"Error:\");\n+      System.out.println(e.getMessage());\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  public static Set<String> parseTags(String input) {\n+    TagSelector t = new TagSelector(new StringReader(input));\n+    Set<String> tags = new HashSet<String>();\n+    try {\n+      ASTTagListStart result = t.TagListStart();\n+      for (Node n : result.children)\n+        if (n instanceof SimpleNode) {\n+            String tag = ((SimpleNode) n).value.toString();\n+            if (tag.charAt(0) == '.')\n+                tag = tag.substring(1);\n+            tags.add(tag);\n+        }\n+    } catch (Exception e) {\n+      // ignore: e.printStackTrace();\n+    }\n+    return tags;\n+  }\n+\n+  public static ASTExpressionStart parseSelectorExp(String input) {\n+    TagSelector t = new TagSelector(new StringReader(input));\n+    try {\n+      ASTExpressionStart result = t.ExpressionStart();\n+      return result;\n+    } catch (ParseException e) {\n+      throw KEMException.compilerError(\"Could not parse \" + input + \" as a selector expression.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbc4f0a3a6f45b16f5fc036118b89d9eb5c4a487"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNzQ5OTI0", "url": "https://github.com/kframework/k/pull/1116#pullrequestreview-410749924", "createdAt": "2020-05-13T09:29:51Z", "commit": {"oid": "7936ab6b09877eeb74fd3150a9a98cf685c4d682"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOToyOTo1MVrOGUpUJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOToyOTo1MVrOGUpUJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwMTYwNg==", "bodyText": "We should keep the \\latex... output attribute, because that can still affect the --output latex option to KAST in the future (does not right now, but will).", "url": "https://github.com/kframework/k/pull/1116#discussion_r424301606", "createdAt": "2020-05-13T09:29:51Z", "author": {"login": "ehildenb"}, "path": "k-distribution/tutorial/1_k/2_imp/lesson_5/imp.md", "diffHunk": "@@ -1,37 +1,37 @@\n // Copyright (c) 2014-2019 K Team. All Rights Reserved.\n \n-/*!\n-\\setlength{\\parindent}{1em}\n-\\title{IMP}\n-\\author{Grigore Ro\\c{s}u (\\texttt{grosu@illinois.edu})}\n-\\organization{University of Illinois at Urbana-Champaign}\n-*/\n-\n-/*@ \\section{Abstract}\n-This is the \\K semantic definition of the classic IMP language.\n+IMP\n+===\n+\n+Author: Grigore Ro\u0219u (grosu@illinois.edu)  \n+Organization: University of Illinois at Urbana-Champaign\n+\n+### Abstract\n+This is the **K** semantic definition of the classic IMP language.\n IMP is considered a folklore language, without an official inventor,\n and has been used in many textbooks and papers, often with slight\n-syntactic variations and often without being called IMP\\@.  It includes\n+syntactic variations and often without being called **IMP**.  It includes\n the most basic imperative language constructs, namely basic constructs\n for arithmetic and Boolean expressions, and variable assignment,\n conditional, while loop and sequential composition constructs for statements.\n-*/\n \n+```k\n module IMP-SYNTAX\n   imports DOMAINS-SYNTAX\n-/*@ \\section{Syntax}\n-This module defines the syntax of IMP\\@.\n-Note that \\texttt{<=} is sequentially strict and has a \\LaTeX\\ attribute\n-making it display as $\\leq$, and that \\texttt{\\&\\&} is strict only in its first\n-argument, because we want to give it a short-circuit semantics. */\n+```\n+### Syntax\n+This module defines the syntax of **IMP**.\n+Note that `<=` is sequentially strict, and `&&` is strict only in its first\n+argument, because we want to give it a short-circuit semantics.\n \n+```k\n   syntax AExp  ::= Int | Id\n                  | \"-\" Int                    [format(%1%2)]\n                  | AExp \"/\" AExp              [left, strict, color(pink)]\n                  > AExp \"+\" AExp              [left, strict, color(pink)]\n                  | \"(\" AExp \")\"               [bracket]\n   syntax BExp  ::= Bool\n-                 | AExp \"<=\" AExp             [seqstrict, latex({#1}\\leq{#2}), color(pink)]\n+                 | AExp \"<=\" AExp             [seqstrict, color(pink)]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7936ab6b09877eeb74fd3150a9a98cf685c4d682"}, "originalPosition": 51}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7936ab6b09877eeb74fd3150a9a98cf685c4d682", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/7936ab6b09877eeb74fd3150a9a98cf685c4d682", "committedDate": "2020-05-12T18:52:53Z", "message": "Change imp comments to Markdown"}, "afterCommit": {"oid": "ac2099300494af3ba6fcf84359d07d9137d24d8d", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/ac2099300494af3ba6fcf84359d07d9137d24d8d", "committedDate": "2020-05-14T00:08:07Z", "message": "Adding regression tests \n\nand more polish"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNTIyNjkz", "url": "https://github.com/kframework/k/pull/1116#pullrequestreview-411522693", "createdAt": "2020-05-14T07:13:17Z", "commit": {"oid": "1ab2acbf0b5f3c51e34ceea68d84b5ca13983160"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzoxMzoxN1rOGVO7OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzoxMzoxN1rOGVO7OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNzgxNg==", "bodyText": "Not sure what's going on here.", "url": "https://github.com/kframework/k/pull/1116#discussion_r424917816", "createdAt": "2020-05-14T07:13:17Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/parser/ParserUtils.java", "diffHunk": "@@ -283,7 +308,7 @@ private String loadDefinitionText(File definitionFile) {\n         Set<File> requiredFiles = new HashSet<>();\n         Context context = new Context();\n         if (autoImportDomains)\n-            previousModules.addAll(loadModules(new HashSet<>(), context, Kompile.REQUIRE_PRELUDE_K, source, currentDirectory, lookupDirectories, requiredFiles, kore, preprocess, leftAssoc));\n+            previousModules.addAll(loadModules(new HashSet<>(), context, Kompile.REQUIRE_PRELUDE_K, Source.apply(\"auto imported prelude\"), currentDirectory, lookupDirectories, requiredFiles, kore, preprocess, leftAssoc));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ab2acbf0b5f3c51e34ceea68d84b5ca13983160"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNTIyOTky", "url": "https://github.com/kframework/k/pull/1116#pullrequestreview-411522992", "createdAt": "2020-05-14T07:13:44Z", "commit": {"oid": "1ab2acbf0b5f3c51e34ceea68d84b5ca13983160"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExOTAzNDUy", "url": "https://github.com/kframework/k/pull/1116#pullrequestreview-411903452", "createdAt": "2020-05-14T15:09:26Z", "commit": {"oid": "d235c8ebb326c40dd176602bb2fa2a941ee86ecc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTowOToyNlrOGVg5Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNToxMzoxOFrOGVhEww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxMjIzOQ==", "bodyText": "This looks bad.", "url": "https://github.com/kframework/k/pull/1116#discussion_r425212239", "createdAt": "2020-05-14T15:09:26Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/jjtree/TagSelector.jjt", "diffHunk": "@@ -0,0 +1,169 @@\n+// Copyright (c) 2013-2020 K Team. All Rights Reserved.\n+options {\n+  MULTI=true;\n+  STATIC = false;\n+  UNICODE_INPUT = true;\n+}\n+PARSER_BEGIN(TagSelector)\n+package org.kframework.parser.markdown;\n+\n+import java.lang.String;\n+import java.io.StringReader;\n+import java.util.Set;\n+import java.util.HashSet;\n+import org.kframework.utils.errorsystem.KEMException;\n+import org.kframework.attributes.Source;\n+import org.kframework.attributes.Location;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * An Arithmetic Grammar.\n+ * @author Radu Mereuta\n+ */\n+public class TagSelector {\n+\n+  /** Run this to test the parser. */\n+  public static void main(String args[]) {\n+    System.out.println(\"Reading from standard input...\");\n+    TagSelector t = new TagSelector(new StringReader(\"a|!b&c\"));\n+    try {\n+      //SimpleNode result = t.ExpressionStart();\n+      SimpleNode result = t.TagListStart();\n+      result.dump(\"\");\n+      System.out.println(\"Success.\");\n+    } catch (Exception e) {\n+      System.out.println(\"Error:\");\n+      System.out.println(e.getMessage());\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  public static Set<String> parseTags(String input) {\n+    TagSelector t = new TagSelector(new StringReader(input));\n+    Set<String> tags = new HashSet<String>();\n+    try {\n+      ASTTagListStart result = t.TagListStart();\n+      for (Node n : result.children)\n+        if (n instanceof SimpleNode) {\n+            String tag = ((SimpleNode) n).value.toString();\n+            if (tag.charAt(0) == '.')\n+                tag = tag.substring(1);\n+            tags.add(tag);\n+        }\n+    } catch (Exception e) {\n+      // ignore: e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d235c8ebb326c40dd176602bb2fa2a941ee86ecc"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxMzg4Ng==", "bodyText": "If you view this file on GitHub you will see that this shows up at the top of the document. Please change this to a markdown comment.", "url": "https://github.com/kframework/k/pull/1116#discussion_r425213886", "createdAt": "2020-05-14T15:11:36Z", "author": {"login": "dwightguth"}, "path": "k-distribution/tutorial/1_k/2_imp/lesson_5/imp.md", "diffHunk": "@@ -1,30 +1,30 @@\n // Copyright (c) 2014-2019 K Team. All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d235c8ebb326c40dd176602bb2fa2a941ee86ecc"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxNTE3MQ==", "bodyText": "Looks like you forgot one", "url": "https://github.com/kframework/k/pull/1116#discussion_r425215171", "createdAt": "2020-05-14T15:13:18Z", "author": {"login": "dwightguth"}, "path": "k-distribution/tutorial/1_k/2_imp/lesson_5/imp.md", "diffHunk": "@@ -43,148 +43,170 @@ argument, because we want to give it a short-circuit semantics. */\n                    Block \"else\" Block         [strict(1), colors(yellow, white, white, yellow), format(%1 %2%3%4 %5 %6 %7)]\n                  | \"while\" \"(\" BExp \")\" Block [colors(yellow,white,white), format(%1 %2%3%4 %5)]\n                  > Stmt Stmt                  [left, format(%1%n%2)]\n-\n-/*@ An IMP program declares a set of variables and then executes a\n+```\n+An IMP program declares a set of variables and then executes a\n statement in the state obtained after initializing all those variables\n-to 0.  \\K provides builtin support for generic syntactic lists:\n-$\\textit{List}\\{\\textit{Nonterminal},\\textit{terminal}\\}$ stands for\n-\\textit{terminal}-separated lists of \\textit{Nonterminal} elements. */\n+to 0. **K** provides builtin support for generic syntactic lists:\n+`List{Nonterminal,terminal}` stands for `terminal`-separated lists of `Nonterminal` elements.\n \n+```k\n   syntax Pgm ::= \"int\" Ids \";\" Stmt           [format(%1 %2%3%n%4), colors(yellow,pink)]\n-  syntax Ids ::= List{Id,\",\"} [format(%1%2 %3)]\n+  syntax Ids ::= List{Id,\",\"}                 [format(%1%2 %3)]\n endmodule\n+```\n \n-/*@ We are done with the definition of IMP's syntax.  Make sure\n+We are done with the definition of IMP's syntax.  Make sure\n that you write and parse several interesting programs before you move to the\n-semantics.  */\n+semantics.\n \n+```k\n module IMP\n   imports IMP-SYNTAX\n   imports DOMAINS\n-/*@ \\section{Semantics}\n-This module defines the semantics of IMP\\@.\n-Before you start adding semantic rules to a \\K definition, you need to\n+```\n+### Semantics\n+This module defines the semantics of **IMP**.\n+Before you start adding semantic rules to a **K** definition, you need to\n define the basic semantic infrastructure consisting of definitions for\n-{\\em results} and the {\\em configuration}.  */\n+`results` and the `configuration`.\n \n-/*@ \\subsection{Values and results}\n+### Values and results\n IMP only has two types of values, or results of computations: integers\n-and Booleans.  We here use the \\K builtin variants for both of them. */\n+and Booleans.  We here use the **K** builtin variants for both of them.\n \n+```k\n   syntax KResult ::= Int | Bool\n+```\n \n-/*@ \\subsection{Configuration}\n+### Configuration\n The configuration of IMP is trivial: it only contains two cells, one\n for the computation and another for the state.  For good encapsulation\n-and clarity, we place the two cells inside another cell, the ``top'' cell\n-which is labeled \\textsf{T}. */\n+and clarity, we place the two cells inside another cell, the *top* cell\n+which is labeled `T`.\n \n+```k\n   configuration <T color=\"yellow\">\n                   <k color=\"green\"> $PGM:Pgm </k>\n                   <state color=\"red\"> .Map </state>\n                 </T>\n+```\n \n-/*@ The configuration variable $\\${\\it PGM}$ tells the \\K tool where to\n+The configuration variable *PGM* tells the **K** tool where to\n place the program.  More precisely, the command\n-``\\texttt{krun program}'' parses the program and places the resulting\n-\\K abstract syntax tree in the \\textsf{k} cell before invoking the\n-semantic rules described in the sequel.  The ``$\\kdot$'' in the\n-\\textsf{state} cell, written \\texttt{.Map} in ASCII in the\n-\\texttt{imp.k} file, is \\K's way to say ``nothing''.  Technically, it\n-is a constant which is the unit, or identity, of all maps in \\K\n-(similar dot units exist for other \\K structures, such as lists, sets,\n-multi-sets, etc.).  */\n-\n-/*@ \\subsection{Arithmetic expressions}\n-The \\K semantics of each arithmetic construct is defined below. */\n-\n-/*@ \\subsubsection{Variable lookup}\n-A program variable $X$ is looked up in the state by matching a binding\n-of the form $X \\mapsto I$ in the state cell.  If such a binding does not\n-exist, then the rewriting process will get stuck.  Thus our semantics of\n+`krun program` parses the program and places the resulting\n+**K** abstract syntax tree in the `k` cell before invoking the\n+semantic rules described in the sequel.  The `.` in the\n+`state` cell, written `.Map` in ASCII in the\n+`imp.md` file, is **K**'s way to say *nothing*. Technically, it\n+is a constant which is the unit, or identity, of all maps in **K**\n+(similar dot units exist for other **K** structures, such as lists, sets,\n+multi-sets, etc.).\n+\n+### Arithmetic expressions\n+The **K** semantics of each arithmetic construct is defined below.\n+\n+### Variable lookup\n+A program variable `X` is looked up in the state by matching a binding\n+of the form `X |-> I` in the state cell. If such a binding does not\n+exist, then the rewriting process will get stuck. Thus our semantics of\n IMP disallows uses of uninitialized variables.  Note that the variable\n-to be looked up is the first task in the \\textsf{k} cell (the cell is\n+to be looked up is the first task in the `k` cell (the cell is\n closed to the left and torn to the right), while the binding can be\n-anywhere in the \\textsf{state} cell (the cell is torn at both sides). */\n+anywhere in the `state` cell (the cell is torn at both sides).\n \n+```k\n   rule <k> X:Id => I ...</k> <state>... X |-> I ...</state>\n+```\n \n-/*@ \\subsubsection{Arithmetic operators}\n-There is nothing special about these, but recall that \\K's configuration\n+### Arithmetic operators\n+There is nothing special about these, but recall that **K**'s configuration\n abstraction mechanism is at work here!  That means that the rewrites in the\n-rules below all happen at the beginning of the \\textsf{k} cell.  */\n+rules below all happen at the beginning of the `k` cell.\n \n+```k\n   rule I1 / I2 => I1 /Int I2  requires I2 =/=Int 0\n   rule I1 + I2 => I1 +Int I2\n   rule - I1 => 0 -Int I1\n+```\n \n-/*@ \\subsection{Boolean expressions}\n+### Boolean expressions\n The rules below are straightforward.  Note the short-circuited semantics\n-of \\texttt{\\&\\&}; this is the reason we annotated the syntax of\n-\\texttt{\\&\\&} with the \\K attribute \\texttt{strict(1)} instead of\n-\\texttt{strict}. */\n+of `&&`; this is the reason we annotated the syntax of\n+`&&` with the **K** attribute `strict(1)` instead of `strict`.\n \n+```k\n   rule I1 <= I2 => I1 <=Int I2\n   rule ! T => notBool T\n   rule true && B => B\n   rule false && _ => false\n+```\n \n-/*@ \\subsection{Blocks and Statements}\n+### Blocks and Statements\n There is one rule per statement construct except for the conditional,\n-which needs two rules. */\n+which needs two rules.\n \n-/*@ \\subsubsection{Blocks}\n-The empty block \\texttt{\\{\\}} is simply dissolved.  The $\\kdot$ below is the\n-unit of the computation list structure $K$, that is, the empty task.\n+### Blocks\n+The empty block `{}` is simply dissolved.  The `.` below is the\n+unit of the computation list structure `K`, that is, the empty task.\n Similarly, the non-empty blocks are dissolved and replaced by their statement\n contents, thus effectively giving them a bracket semantics; we can afford to\n do this only because we have no block-local variable declarations yet in IMP.\n-Since we tagged the rules below as \"structural\", the \\K tool structurally\n+Since we tagged the rules below as *structural*, the **K** tool structurally\n erases the block constructs from the computation structure, without\n considering their erasure as computational steps in the resulting transition\n systems.  You can make these rules computational (dropping the attribute\n-\\texttt{structural}) if you do want these to count as computational steps. */\n+`structural`) if you do want these to count as computational steps.\n \n+```k\n   rule {} => .   [structural]\n   rule {S} => S  [structural]\n+```\n \n-/*@ \\subsubsection{Assignment}\n+### Assignment\n The assigned variable is updated in the state.  The variable is expected\n to be declared, otherwise the semantics will get stuck.  At the same time,\n-the assignment is dissolved. */\n+the assignment is dissolved.\n \n+```k\n   rule <k> X = I:Int; => . ...</k> <state>... X |-> (_ => I) ...</state>\n+```\n \n-/*@ \\subsubsection{Sequential composition}\n-Sequential composition is simply structurally translated into \\K's\n+### Sequential composition\n+Sequential composition is simply structurally translated into **K**'s\n builtin task sequentialization operation.  You can make this rule\n-computational (i.e., remove the \\texttt{structural} attribute) if you\n+computational (i.e., remove the `structural` attribute) if you\n want it to count as a computational step.  Recall that the semantics\n-of a program in a programming language defined in \\K is the transition\n+of a program in a programming language defined in **K** is the transition\n system obtained from the initial configuration holding that program\n and counting only the steps corresponding to computational rules as\n transitions (i.e., hiding the structural rules as unobservable, or\n-internal steps). */\n+internal steps).\n \n+```k\n   rule S1:Stmt S2:Stmt => S1 ~> S2  [structural]\n+```\n \n-/*@ \\subsubsection{Conditional}\n+### Conditional\n The conditional statement has two semantic cases, corresponding to\n-when its condition evaluates to \\texttt{true} or to \\texttt{false}.\n+when its condition evaluates to `true` or to `false`.\n Recall that the conditional was annotated with the attribute\n-\\texttt{strict(1)} in the syntax module above, so only its first\n-argument is allowed to be evaluated. */\n+`strict(1)` in the syntax module above, so only its first\n+argument is allowed to be evaluated.\n \n+```k\n   rule if (true)  S else _ => S\n   rule if (false) _ else S => S\n+```\n \n-/*@ \\subsubsection{While loop}\n-We give the semantics of the \\texttt{while} loop by unrolling.\n-Note that we preferred to make the rule below structural. */\n+### While loop\n+We give the semantics of the `while` loop by unrolling.\n+Note that we preferred to make the rule below structural.\n \n+```k\n   rule while (B) S => if (B) {S while (B) S} else {}  [structural]\n+```\n \n-/*@ \\subsection{Programs}\n+### Programs\n The semantics of an IMP program is that its body statement is executed\n in a state initializing all its global variables to 0.  Since \\K's", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d235c8ebb326c40dd176602bb2fa2a941ee86ecc"}, "originalPosition": 281}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d235c8ebb326c40dd176602bb2fa2a941ee86ecc", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/d235c8ebb326c40dd176602bb2fa2a941ee86ecc", "committedDate": "2020-05-14T14:08:32Z", "message": "Capitalize word"}, "afterCommit": {"oid": "0b0f0778a9309942d081ae908bfeae45dfa6e171", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/0b0f0778a9309942d081ae908bfeae45dfa6e171", "committedDate": "2020-05-18T19:12:05Z", "message": "Hidden error messages for malformed code-block tags"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "25dadaa52a744c05bb777ba0ea05dfb918038f8a", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/25dadaa52a744c05bb777ba0ea05dfb918038f8a", "committedDate": "2020-05-18T21:32:53Z", "message": "Fix junit"}, "afterCommit": {"oid": "9f847ad4d95a2693ed18e86bf5ef60cdb5a31a45", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/9f847ad4d95a2693ed18e86bf5ef60cdb5a31a45", "committedDate": "2020-05-19T15:26:26Z", "message": "Fix junit"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f847ad4d95a2693ed18e86bf5ef60cdb5a31a45", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/9f847ad4d95a2693ed18e86bf5ef60cdb5a31a45", "committedDate": "2020-05-19T15:26:26Z", "message": "Fix junit"}, "afterCommit": {"oid": "b8d2e77af3891246bc24dd24ab0dce87d2252f7f", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/b8d2e77af3891246bc24dd24ab0dce87d2252f7f", "committedDate": "2020-05-20T18:55:08Z", "message": "Fix junit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d38b64a96c771ebae1e5ad5de0bd327d8d9bbdbd", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/d38b64a96c771ebae1e5ad5de0bd327d8d9bbdbd", "committedDate": "2020-05-21T20:38:34Z", "message": "Adding support for .md files\n\nwith fenced k code blocks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19fed575b09a7ae3acc5897ef3cd3d4912da35bf", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/19fed575b09a7ae3acc5897ef3cd3d4912da35bf", "committedDate": "2020-05-21T20:38:34Z", "message": "Adding option for tag selection\n\nusing jjTree-JavaCC parser and a simple expression eval"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f678e0a3f95d3917de63b8da0a5cea1d41624dd", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/7f678e0a3f95d3917de63b8da0a5cea1d41624dd", "committedDate": "2020-05-21T20:38:34Z", "message": "Refine tag grammar and add  unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a71abbeeb7d4675a484dc52dd1eee24e31f9ea53", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/a71abbeeb7d4675a484dc52dd1eee24e31f9ea53", "committedDate": "2020-05-21T20:38:34Z", "message": "Debug prints .k files in -kompiled directory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d38c2be014b7c4062c3c2a7162998d1b8bd5478c", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/d38c2be014b7c4062c3c2a7162998d1b8bd5478c", "committedDate": "2020-05-21T20:38:34Z", "message": "Removing leading dot from tags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0689aa45c73cbb4a9809a06b435d9a923c9918a", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/c0689aa45c73cbb4a9809a06b435d9a923c9918a", "committedDate": "2020-05-21T20:38:34Z", "message": "Rename imp.k to imp.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d53cb5f89831ef9c3667db4e3e5db9607078e6a", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/2d53cb5f89831ef9c3667db4e3e5db9607078e6a", "committedDate": "2020-05-21T20:38:34Z", "message": "Change imp comments to Markdown"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95775ff2dab79a30839171e367651070e5403444", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/95775ff2dab79a30839171e367651070e5403444", "committedDate": "2020-05-21T20:38:34Z", "message": "Adding regression tests \n\nand more polish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a5f0ce02a71d3f9a72711e71405e3882d2e6ff3", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/7a5f0ce02a71d3f9a72711e71405e3882d2e6ff3", "committedDate": "2020-05-21T20:38:34Z", "message": "Revert latex attribute deletion."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eb45ef19db1c8c47c7fed7f34cc9585a0d137ba", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/9eb45ef19db1c8c47c7fed7f34cc9585a0d137ba", "committedDate": "2020-05-21T20:38:34Z", "message": "Capitalize word"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "716fa4bf6aeb6d5981357011b3c077cc6bfe0618", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/716fa4bf6aeb6d5981357011b3c077cc6bfe0618", "committedDate": "2020-05-21T20:38:34Z", "message": "Hidden error messages for malformed code-block tags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80b05cd49d05b9b03a0b374340997e140c63d2d9", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/80b05cd49d05b9b03a0b374340997e140c63d2d9", "committedDate": "2020-05-21T20:38:34Z", "message": "Handle thrown KEMExceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c44513dcd80940b4ae57dd9803f18cdf7ad147bb", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/c44513dcd80940b4ae57dd9803f18cdf7ad147bb", "committedDate": "2020-05-21T20:38:34Z", "message": "Fix junit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f5056eaf313c213bb55fd0476cb98833fb2ed0e", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/8f5056eaf313c213bb55fd0476cb98833fb2ed0e", "committedDate": "2020-05-21T20:38:34Z", "message": "Fix path after merge conflict"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8d2e77af3891246bc24dd24ab0dce87d2252f7f", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/b8d2e77af3891246bc24dd24ab0dce87d2252f7f", "committedDate": "2020-05-20T18:55:08Z", "message": "Fix junit"}, "afterCommit": {"oid": "8f5056eaf313c213bb55fd0476cb98833fb2ed0e", "author": {"user": {"login": "radumereuta", "name": "Radu Mereuta"}}, "url": "https://github.com/kframework/k/commit/8f5056eaf313c213bb55fd0476cb98833fb2ed0e", "committedDate": "2020-05-21T20:38:34Z", "message": "Fix path after merge conflict"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2ODMwOTYx", "url": "https://github.com/kframework/k/pull/1116#pullrequestreview-416830961", "createdAt": "2020-05-22T11:10:37Z", "commit": {"oid": "8f5056eaf313c213bb55fd0476cb98833fb2ed0e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9da9790967202eb9d9da58c08c3435459742878", "author": {"user": {"login": "rv-jenkins", "name": null}}, "url": "https://github.com/kframework/k/commit/f9da9790967202eb9d9da58c08c3435459742878", "committedDate": "2020-05-22T11:21:58Z", "message": "Merge branch 'master' into mdSource"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2432, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}