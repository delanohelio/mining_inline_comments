{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMDY0NTg2", "number": 1202, "title": "Cell maps ceil rules", "bodyText": "", "createdAt": "2020-04-07T06:25:00Z", "url": "https://github.com/kframework/k/pull/1202", "merged": true, "mergeCommit": {"oid": "f23a1b2c812d26aab3dabb66b5a41c144b1265c3"}, "closed": true, "closedAt": "2020-04-13T09:10:51Z", "author": {"login": "traiansf"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVh6btgBqjMyMTI3MDA0MDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXJ_sBgH2gAyNDAwMDY0NTg2OjFkYTc1MjNhODM5NzY5OGI3NTlkYTQ5OGY4ZTQ5YmFhZWJiNjRhYTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "905e0cf2cc51ec0335c440d139c2150a662bff37", "author": {"user": {"login": "traiansf", "name": "Traian Florin \u0218erb\u0103nu\u021b\u0103"}}, "url": "https://github.com/kframework/k/commit/905e0cf2cc51ec0335c440d139c2150a662bff37", "committedDate": "2020-04-07T06:19:42Z", "message": "tmp"}, "afterCommit": {"oid": "05a9347aeda6b9a4910d5b44419db457946c6ded", "author": {"user": {"login": "traiansf", "name": "Traian Florin \u0218erb\u0103nu\u021b\u0103"}}, "url": "https://github.com/kframework/k/commit/05a9347aeda6b9a4910d5b44419db457946c6ded", "committedDate": "2020-04-08T06:29:01Z", "message": "tmp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06255af022d23f7a2ade82e1f8591e77f8b82034", "author": {"user": {"login": "traiansf", "name": "Traian Florin \u0218erb\u0103nu\u021b\u0103"}}, "url": "https://github.com/kframework/k/commit/06255af022d23f7a2ade82e1f8591e77f8b82034", "committedDate": "2020-04-09T10:24:44Z", "message": "Generating in_keys and ceil rules for map cells."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05a9347aeda6b9a4910d5b44419db457946c6ded", "author": {"user": {"login": "traiansf", "name": "Traian Florin \u0218erb\u0103nu\u021b\u0103"}}, "url": "https://github.com/kframework/k/commit/05a9347aeda6b9a4910d5b44419db457946c6ded", "committedDate": "2020-04-08T06:29:01Z", "message": "tmp"}, "afterCommit": {"oid": "ffa7ea6c889ac920af93204785d36c3d4246a360", "author": {"user": {"login": "traiansf", "name": "Traian Florin \u0218erb\u0103nu\u021b\u0103"}}, "url": "https://github.com/kframework/k/commit/ffa7ea6c889ac920af93204785d36c3d4246a360", "committedDate": "2020-04-09T10:32:47Z", "message": "Updated axioms for in_keys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f038220bcf67c520e5c41ddb7e4612ea50a2c94b", "author": {"user": {"login": "traiansf", "name": "Traian Florin \u0218erb\u0103nu\u021b\u0103"}}, "url": "https://github.com/kframework/k/commit/f038220bcf67c520e5c41ddb7e4612ea50a2c94b", "committedDate": "2020-04-09T14:30:45Z", "message": "Updated axioms for in_keys"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ffa7ea6c889ac920af93204785d36c3d4246a360", "author": {"user": {"login": "traiansf", "name": "Traian Florin \u0218erb\u0103nu\u021b\u0103"}}, "url": "https://github.com/kframework/k/commit/ffa7ea6c889ac920af93204785d36c3d4246a360", "committedDate": "2020-04-09T10:32:47Z", "message": "Updated axioms for in_keys"}, "afterCommit": {"oid": "f038220bcf67c520e5c41ddb7e4612ea50a2c94b", "author": {"user": {"login": "traiansf", "name": "Traian Florin \u0218erb\u0103nu\u021b\u0103"}}, "url": "https://github.com/kframework/k/commit/f038220bcf67c520e5c41ddb7e4612ea50a2c94b", "committedDate": "2020-04-09T14:30:45Z", "message": "Updated axioms for in_keys"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTA0MjIx", "url": "https://github.com/kframework/k/pull/1202#pullrequestreview-391104221", "createdAt": "2020-04-09T20:20:28Z", "commit": {"oid": "f038220bcf67c520e5c41ddb7e4612ea50a2c94b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyMDoyOFrOGDoArA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDo1NTozNlrOGD3hdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1NDQ0NA==", "bodyText": "Why are we retaining these rules for the Haskell backend?", "url": "https://github.com/kframework/k/pull/1202#discussion_r406454444", "createdAt": "2020-04-09T20:20:28Z", "author": {"login": "ttuegel"}, "path": "k-distribution/include/builtin/domains.k", "diffHunk": "@@ -177,11 +178,20 @@ module MAP-SYMBOLIC [symbolic]\n   // potential infinite loop\n   // rule (MAP:Map [ K1 <- V1 ]) [ K2 <- V2 ] => MAP [ K2 <- V2 ] [ K1 <- V1 ] requires K1 =/=K K2\n \n-  rule K1 in_keys(M K2 |-> _) => true          requires K1  ==K K2 orBool K1 in_keys(M)\n-  rule K1 in_keys(M K2 |-> _) => K1 in_keys(M) requires K1 =/=K K2\n+  rule K in_keys(M K |-> _) => true\n+  rule K in_keys(_) => false [owise]\n+\n+  rule K1 in_keys(M K2 |-> _) => true          requires K1  ==K K2 orBool K1 in_keys(M) [simplification]\n+  rule K1 in_keys(M K2 |-> _) => K1 in_keys(M) requires K1 =/=K K2 [simplification]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f038220bcf67c520e5c41ddb7e4612ea50a2c94b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1MTc4OA==", "bodyText": "What's going on with the pairs of set and element variables?", "url": "https://github.com/kframework/k/pull/1202#discussion_r406551788", "createdAt": "2020-04-10T00:51:40Z", "author": {"login": "ttuegel"}, "path": "kernel/src/main/java/org/kframework/backend/kore/ModuleToKORE.java", "diffHunk": "@@ -499,6 +498,98 @@ private void genUnitAxiom(Production prod, StringBuilder sb) {\n         sb.append(\") [unit{}()] // left unit\\n\");\n     }\n \n+    private void genMapCeilAxioms(Production prod, Collection<Rule> rules) {\n+        Sort mapSort = prod.nonterminal(1).sort();\n+        scala.collection.Set<Production> mapProds = module.productionsForSort().apply(mapSort.head());\n+        Production concatProd = mapProds.find(p -> hasHookValue(p.att(), \"MAP.concat\")).get();\n+        Production elementProd = mapProds.find(p -> hasHookValue(p.att(), \"MAP.element\")).get();\n+        List<K> args = new ArrayList<>();\n+        List<K> setArgs = new ArrayList<>();\n+        Seq<NonTerminal> nonterminals = elementProd.nonterminals();\n+        K restMap = KVariable(\"Rest\", Att.empty().add(Sort.class, mapSort));\n+        K restMapSet = KVariable(\"@Rest\", Att.empty().add(Sort.class, mapSort));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f038220bcf67c520e5c41ddb7e4612ea50a2c94b"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1MTg4MQ==", "bodyText": "Should the #Ceil and #And constants be defined somewhere?", "url": "https://github.com/kframework/k/pull/1202#discussion_r406551881", "createdAt": "2020-04-10T00:52:07Z", "author": {"login": "ttuegel"}, "path": "kernel/src/main/java/org/kframework/backend/kore/ModuleToKORE.java", "diffHunk": "@@ -499,6 +498,98 @@ private void genUnitAxiom(Production prod, StringBuilder sb) {\n         sb.append(\") [unit{}()] // left unit\\n\");\n     }\n \n+    private void genMapCeilAxioms(Production prod, Collection<Rule> rules) {\n+        Sort mapSort = prod.nonterminal(1).sort();\n+        scala.collection.Set<Production> mapProds = module.productionsForSort().apply(mapSort.head());\n+        Production concatProd = mapProds.find(p -> hasHookValue(p.att(), \"MAP.concat\")).get();\n+        Production elementProd = mapProds.find(p -> hasHookValue(p.att(), \"MAP.element\")).get();\n+        List<K> args = new ArrayList<>();\n+        List<K> setArgs = new ArrayList<>();\n+        Seq<NonTerminal> nonterminals = elementProd.nonterminals();\n+        K restMap = KVariable(\"Rest\", Att.empty().add(Sort.class, mapSort));\n+        K restMapSet = KVariable(\"@Rest\", Att.empty().add(Sort.class, mapSort));\n+        Sort sortParam = Sort(AddSortInjections.SORTPARAM_NAME, Sort(\"Q\"));\n+        KLabel ceilMapLabel = KLabel(\"#Ceil\", mapSort, sortParam);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f038220bcf67c520e5c41ddb7e4612ea50a2c94b"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwODU5Nw==", "bodyText": "What is the anywhere for?", "url": "https://github.com/kframework/k/pull/1202#discussion_r406708597", "createdAt": "2020-04-10T10:55:36Z", "author": {"login": "ttuegel"}, "path": "kernel/src/main/java/org/kframework/backend/kore/ModuleToKORE.java", "diffHunk": "@@ -499,6 +498,98 @@ private void genUnitAxiom(Production prod, StringBuilder sb) {\n         sb.append(\") [unit{}()] // left unit\\n\");\n     }\n \n+    private void genMapCeilAxioms(Production prod, Collection<Rule> rules) {\n+        Sort mapSort = prod.nonterminal(1).sort();\n+        scala.collection.Set<Production> mapProds = module.productionsForSort().apply(mapSort.head());\n+        Production concatProd = mapProds.find(p -> hasHookValue(p.att(), \"MAP.concat\")).get();\n+        Production elementProd = mapProds.find(p -> hasHookValue(p.att(), \"MAP.element\")).get();\n+        List<K> args = new ArrayList<>();\n+        List<K> setArgs = new ArrayList<>();\n+        Seq<NonTerminal> nonterminals = elementProd.nonterminals();\n+        K restMap = KVariable(\"Rest\", Att.empty().add(Sort.class, mapSort));\n+        K restMapSet = KVariable(\"@Rest\", Att.empty().add(Sort.class, mapSort));\n+        Sort sortParam = Sort(AddSortInjections.SORTPARAM_NAME, Sort(\"Q\"));\n+        KLabel ceilMapLabel = KLabel(\"#Ceil\", mapSort, sortParam);\n+        KLabel andLabel = KLabel(\"#And\", sortParam);\n+        K setArgsCeil = KApply(ceilMapLabel, restMapSet);\n+        for (int i = 0; i< nonterminals.length(); i++) {\n+            Sort sort = nonterminals.apply(i).sort();\n+            args.add(KVariable(\"K\" + i, Att.empty().add(Sort.class, sort)));\n+            KVariable setVar = KVariable(\"@K\" + i, Att.empty().add(Sort.class, sort));\n+            setArgs.add(setVar);\n+            KLabel ceilVarLabel = KLabel(\"#Ceil\", sort, sortParam);\n+            setArgsCeil = KApply(andLabel, setArgsCeil, KApply(ceilVarLabel, setVar));\n+        }\n+        Seq<K> argsSeq = JavaConverters.iterableAsScalaIterable(args).toSeq();\n+        Seq<K> setArgsSeq = JavaConverters.iterableAsScalaIterable(setArgs).toSeq();\n+        Rule inKeysRule1 = Rule(\n+                KRewrite(\n+                        KApply(prod.klabel().get(),\n+                                args.get(0),\n+                                KApply(concatProd.klabel().get(),\n+                                        KApply(elementProd.klabel().get(),\n+                                                argsSeq,\n+                                                Att.empty()\n+                                        ),\n+                                        restMap\n+                                )\n+                        ),\n+                        BooleanUtils.TRUE\n+                ),\n+                BooleanUtils.TRUE,\n+                BooleanUtils.TRUE\n+        );\n+        rules.add(inKeysRule1);\n+        Rule inKeysRule2 = Rule(\n+                KRewrite(\n+                        KApply(prod.klabel().get(),\n+                                args.get(0),\n+                                restMap\n+                        ),\n+                        BooleanUtils.FALSE\n+                ),\n+                BooleanUtils.TRUE,\n+                BooleanUtils.TRUE,\n+                Att.empty().add(\"owise\")\n+        );\n+        rules.add(inKeysRule2);\n+        KLabel equalsLabel = KLabel(\"#Equals\", Sorts.Bool(), sortParam);\n+        Rule ceilMapRule =\n+                Rule(\n+                        KRewrite(\n+                                KApply(ceilMapLabel,\n+                                        KApply(concatProd.klabel().get(),\n+                                                KApply(elementProd.klabel().get(),\n+                                                        setArgsSeq,\n+                                                        Att.empty()\n+                                                ),\n+                                                restMapSet\n+                                        )\n+                                )\n+                                ,\n+                                KApply(andLabel,\n+                                        KApply(equalsLabel,\n+                                                KApply(prod.klabel().get(),\n+                                                        setArgs.get(0),\n+                                                        restMapSet\n+                                                ),\n+                                                BooleanUtils.FALSE\n+                                        ),\n+                                        setArgsCeil\n+                                )\n+                        )\n+                        , BooleanUtils.TRUE\n+                        , BooleanUtils.TRUE\n+                        , Att.empty().add(\"anywhere\").add(\"simplification\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f038220bcf67c520e5c41ddb7e4612ea50a2c94b"}, "originalPosition": 151}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4acefe74d8024a0f2f232acb40c03b5054956f59", "author": {"user": {"login": "traiansf", "name": "Traian Florin \u0218erb\u0103nu\u021b\u0103"}}, "url": "https://github.com/kframework/k/commit/4acefe74d8024a0f2f232acb40c03b5054956f59", "committedDate": "2020-04-10T11:14:18Z", "message": "separated MAP rules for haskell backend"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aea835074168fe561bdcca1409f92ba08065a19", "author": {"user": {"login": "traiansf", "name": "Traian Florin \u0218erb\u0103nu\u021b\u0103"}}, "url": "https://github.com/kframework/k/commit/0aea835074168fe561bdcca1409f92ba08065a19", "committedDate": "2020-04-10T11:33:26Z", "message": "Ceil rules for maps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "381602b381d5ab5304ea0b70e305c39e640e9f7f", "author": {"user": {"login": "traiansf", "name": "Traian Florin \u0218erb\u0103nu\u021b\u0103"}}, "url": "https://github.com/kframework/k/commit/381602b381d5ab5304ea0b70e305c39e640e9f7f", "committedDate": "2020-04-10T12:57:04Z", "message": "Addressing reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c52b3d8920b1ff9f3c8d42d1862a6b301e90e63", "author": {"user": {"login": "traiansf", "name": "Traian Florin \u0218erb\u0103nu\u021b\u0103"}}, "url": "https://github.com/kframework/k/commit/6c52b3d8920b1ff9f3c8d42d1862a6b301e90e63", "committedDate": "2020-04-10T12:57:29Z", "message": "Merge remote-tracking branch 'upstream/master' into cell-maps-ceil-rules"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "646ace732f55173ad1deb04b5f70facdada73c18", "author": {"user": {"login": "traiansf", "name": "Traian Florin \u0218erb\u0103nu\u021b\u0103"}}, "url": "https://github.com/kframework/k/commit/646ace732f55173ad1deb04b5f70facdada73c18", "committedDate": "2020-04-10T12:23:52Z", "message": "Addressing reviews"}, "afterCommit": {"oid": "6c52b3d8920b1ff9f3c8d42d1862a6b301e90e63", "author": {"user": {"login": "traiansf", "name": "Traian Florin \u0218erb\u0103nu\u021b\u0103"}}, "url": "https://github.com/kframework/k/commit/6c52b3d8920b1ff9f3c8d42d1862a6b301e90e63", "committedDate": "2020-04-10T12:57:29Z", "message": "Merge remote-tracking branch 'upstream/master' into cell-maps-ceil-rules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9100cce53332687287b87d33fbe809040dac45e8", "author": {"user": {"login": "traiansf", "name": "Traian Florin \u0218erb\u0103nu\u021b\u0103"}}, "url": "https://github.com/kframework/k/commit/9100cce53332687287b87d33fbe809040dac45e8", "committedDate": "2020-04-10T18:14:17Z", "message": "Merge branch 'master' into cell-maps-ceil-rules"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTg3MTc3", "url": "https://github.com/kframework/k/pull/1202#pullrequestreview-391587177", "createdAt": "2020-04-10T18:16:58Z", "commit": {"oid": "9100cce53332687287b87d33fbe809040dac45e8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTkwMzcx", "url": "https://github.com/kframework/k/pull/1202#pullrequestreview-391590371", "createdAt": "2020-04-10T18:23:46Z", "commit": {"oid": "9100cce53332687287b87d33fbe809040dac45e8"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODoyMzo0NlrOGECJpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1ODo0OVrOGEDAtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4MjcyNA==", "bodyText": "Why isn't _[_ <- _] simply functional?", "url": "https://github.com/kframework/k/pull/1202#discussion_r406882724", "createdAt": "2020-04-10T18:23:46Z", "author": {"login": "ttuegel"}, "path": "k-distribution/include/builtin/domains.k", "diffHunk": "@@ -158,7 +158,32 @@ module MAP\n   syntax KItem ::= choice(Map)                      [function, hook(MAP.choice), klabel(Map:choice)]\n endmodule\n \n-module MAP-SYMBOLIC [symbolic]\n+module MAP-KORE-SYMBOLIC [kore,symbolic]\n+  imports MAP\n+\n+  rule K:KItem in_keys(M:Map K |-> _) => true\n+  rule K:KItem in_keys(_:Map) => false [owise]\n+\n+  rule\n+    #Ceil(@M:Map (@K:KItem |-> @V:KItem))\n+  =>\n+    {(@K in_keys(@M)) #Equals false} #And #Ceil(@M) #And #Ceil(@K) #And #Ceil(@V)\n+  [anywhere, simplification]\n+\n+   rule\n+     #Ceil(@M:Map [@K:KItem])\n+   =>\n+     {(@K in_keys(@M)) #Equals true} #And #Ceil(@M) #And #Ceil(@K)\n+   [anywhere, simplification]\n+\n+  rule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9100cce53332687287b87d33fbe809040dac45e8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NjgyMQ==", "bodyText": "I find it difficult to follow how the rules are constructed because the construction of the rules is interleaved in this way, but it's not difficult enough that I'm going to hold up this pull request.", "url": "https://github.com/kframework/k/pull/1202#discussion_r406896821", "createdAt": "2020-04-10T18:58:49Z", "author": {"login": "ttuegel"}, "path": "kernel/src/main/java/org/kframework/backend/kore/ModuleToKORE.java", "diffHunk": "@@ -499,6 +498,98 @@ private void genUnitAxiom(Production prod, StringBuilder sb) {\n         sb.append(\") [unit{}()] // left unit\\n\");\n     }\n \n+    private void genMapCeilAxioms(Production prod, Collection<Rule> rules) {\n+        Sort mapSort = prod.nonterminal(1).sort();\n+        scala.collection.Set<Production> mapProds = module.productionsForSort().apply(mapSort.head());\n+        Production concatProd = mapProds.find(p -> hasHookValue(p.att(), \"MAP.concat\")).get();\n+        Production elementProd = mapProds.find(p -> hasHookValue(p.att(), \"MAP.element\")).get();\n+        List<K> args = new ArrayList<>();\n+        List<K> setArgs = new ArrayList<>();\n+        Seq<NonTerminal> nonterminals = elementProd.nonterminals();\n+        K restMap = KVariable(\"Rest\", Att.empty().add(Sort.class, mapSort));\n+        K restMapSet = KVariable(\"@Rest\", Att.empty().add(Sort.class, mapSort));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1MTc4OA=="}, "originalCommit": {"oid": "f038220bcf67c520e5c41ddb7e4612ea50a2c94b"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c10f818ae9f7522efa41281137f30b4b5e84d8ae", "author": {"user": {"login": "traiansf", "name": "Traian Florin \u0218erb\u0103nu\u021b\u0103"}}, "url": "https://github.com/kframework/k/commit/c10f818ae9f7522efa41281137f30b4b5e84d8ae", "committedDate": "2020-04-13T07:43:11Z", "message": "Generating rules for default map, too.\nRefactorings to improve readability."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1da7523a8397698b759da498f8e49baaebb64aa9", "author": {"user": {"login": "traiansf", "name": "Traian Florin \u0218erb\u0103nu\u021b\u0103"}}, "url": "https://github.com/kframework/k/commit/1da7523a8397698b759da498f8e49baaebb64aa9", "committedDate": "2020-04-13T07:45:03Z", "message": "Merge branch 'cell-maps-ceil-rules' of github.com:traiansf/k into cell-maps-ceil-rules"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2444, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}