{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMTE2MTQx", "number": 1553, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo1Mzo1MFrOEoiP0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMzo0ODoyNFrOErn4Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTM5NjAzOnYy", "diffSide": "RIGHT", "path": "k-distribution/include/kframework/ktest-fail.mak", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo1Mzo1MFrOHZrqYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOToyNDo1MFrOHZ9qmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY5MTgxMA==", "bodyText": "What's the explanation behind this one?", "url": "https://github.com/kframework/k/pull/1553#discussion_r496691810", "createdAt": "2020-09-29T12:53:50Z", "author": {"login": "ehildenb"}, "path": "k-distribution/include/kframework/ktest-fail.mak", "diffHunk": "@@ -24,7 +24,7 @@ kompile: $(TESTS)\n dummy:\n \n %.k %.md: dummy\n-\t$(KOMPILE) $(KOMPILE_FLAGS) --backend $(KOMPILE_BACKEND) $(DEBUG_FAIL) $@ -d $(DEFDIR) 2>&1 | sed 's!'`pwd`'/\\(\\./\\)\\{0,1\\}!!g' $(CHECK) $@.out $(CHECK2)\n+\t$(KOMPILE) $(KOMPILE_FLAGS) --backend $(KOMPILE_BACKEND) $(DEBUG_FAIL) $@ -d $(DEFDIR) 2>&1 | sed 's!'`pwd`'/\\(\\./\\)\\{0,2\\}!!g' $(CHECK) $@.out $(CHECK2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23771781d08dc6c61d2671eb6b285c3942e10566"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk4Njc3OA==", "bodyText": "On my machine, the paths from reported warnings include a /././ and on Jenkins they only include /./.\nI'm not sure why. It might be a java thing. This change takes into consideration both cases.", "url": "https://github.com/kframework/k/pull/1553#discussion_r496986778", "createdAt": "2020-09-29T19:24:50Z", "author": {"login": "radumereuta"}, "path": "k-distribution/include/kframework/ktest-fail.mak", "diffHunk": "@@ -24,7 +24,7 @@ kompile: $(TESTS)\n dummy:\n \n %.k %.md: dummy\n-\t$(KOMPILE) $(KOMPILE_FLAGS) --backend $(KOMPILE_BACKEND) $(DEBUG_FAIL) $@ -d $(DEFDIR) 2>&1 | sed 's!'`pwd`'/\\(\\./\\)\\{0,1\\}!!g' $(CHECK) $@.out $(CHECK2)\n+\t$(KOMPILE) $(KOMPILE_FLAGS) --backend $(KOMPILE_BACKEND) $(DEBUG_FAIL) $@ -d $(DEFDIR) 2>&1 | sed 's!'`pwd`'/\\(\\./\\)\\{0,2\\}!!g' $(CHECK) $@.out $(CHECK2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY5MTgxMA=="}, "originalCommit": {"oid": "23771781d08dc6c61d2671eb6b285c3942e10566"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjUzMjIwOnYy", "diffSide": "RIGHT", "path": "kernel/src/main/java/org/kframework/utils/Tag.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTo0NToyM1rOHawdYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTo0NToyM1rOHawdYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgxODk3OA==", "bodyText": "Let's not bring this whole file back when we're just using it to mark the constant strings that are part of the Bubble class. Just put them as static fields on that class.", "url": "https://github.com/kframework/k/pull/1553#discussion_r497818978", "createdAt": "2020-09-30T21:45:23Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/java/org/kframework/utils/Tag.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) 2012-2020 K Team. All Rights Reserved.\n+package org.kframework.utils;\n+\n+public class Tag {\n+\n+    public final static String require = \"require\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0ca6ba29aa3d4b31fc9047c2b1a70c0ff082613"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTc3NTU0OnYy", "diffSide": "RIGHT", "path": "kore/src/main/scala/org/kframework/compile/MergeRules.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMzo0ODoyNFrOHeffBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMzo0ODoyNFrOHeffBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTczNTE3NQ==", "bodyText": "@dwightguth I need your input on this.\nSince adding all steps to the kprove pipeline, MergeRules is being called and it creates a rule which the backend doesn't expect. The most simple solution I could find was to avoid this step on modules that contain claims.", "url": "https://github.com/kframework/k/pull/1553#discussion_r501735175", "createdAt": "2020-10-08T13:48:24Z", "author": {"login": "radumereuta"}, "path": "kore/src/main/scala/org/kframework/compile/MergeRules.scala", "diffHunk": "@@ -30,6 +30,9 @@ class MergeRules(val automatonAttribute: String, filterAttribute: String) extend\n   val isRulePredicate = KLabel(\"isRule\")\n \n   def apply(m: Module): Module = {\n+    // TODO: find a better way to avoid adding merged rules to the spec module\n+    if (m.claims.nonEmpty) return m", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "443440f39a890f94cfc9e952ea842f9b178d0e97"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2892, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}