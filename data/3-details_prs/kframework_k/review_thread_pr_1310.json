{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NjA4Njgz", "number": 1310, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzozNTozMlrOECQUKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzozNzozNlrOECQXKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzk5OTE1OnYy", "diffSide": "RIGHT", "path": "k-distribution/tests/regression-new/checkWarns/checkUnusedVar.k", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzozNTozMlrOGemanA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzozNTozMlrOGemanA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczOTg2OA==", "bodyText": "Please add some tests that also include requires clauses, and ensures clauses.\nSpecifically, add a test which defines the variable in the LHS, but only uses in the requires clause or ensures clause (and make sure no warning is output).\nAlso add one which has a trivial requires clause which does not use the variable.", "url": "https://github.com/kframework/k/pull/1310#discussion_r434739868", "createdAt": "2020-06-03T17:35:32Z", "author": {"login": "ehildenb"}, "path": "k-distribution/tests/regression-new/checkWarns/checkUnusedVar.k", "diffHunk": "@@ -0,0 +1,21 @@\n+module CHECKUNUSEDVAR-SYNTAX\n+\n+endmodule\n+\n+module MOD\n+  imports INT\n+  configuration <bar> 0 </bar>\n+endmodule\n+\n+module CHECKUNUSEDVAR\n+  imports INT\n+  imports MOD\n+\n+  syntax KItem ::= foo(Int)\n+\n+  rule foo(X) => 0\n+  rule foo(0) => !_:Int", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236b454b585855e26f21c1e6c42d8cebaac8d060"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODAwNjgyOnYy", "diffSide": "RIGHT", "path": "kernel/src/main/java/org/kframework/compile/GenerateSentencesFromConfigDecl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzozNzozNlrOGemfeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODo0MjowOFrOGeovaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0MTExMg==", "bodyText": "What is this change going on here? Is it related to the variable declaration issues?\nOr is it related to the new issue @hjorthjort posted #1318.", "url": "https://github.com/kframework/k/pull/1310#discussion_r434741112", "createdAt": "2020-06-03T17:37:36Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/compile/GenerateSentencesFromConfigDecl.java", "diffHunk": "@@ -202,11 +209,31 @@ public void apply(KToken k) {\n         }\n \n         @Override\n-        public void apply(KApply k) {\n-            if (k.klabel().name().equals(\"#externalCell\")) {\n-                hasConfigVar = true;\n+        public void apply(KApply kapp) {\n+            if (kapp.klabel().name().equals(\"#externalCell\")) {\n+                if (kapp.klist().size() == 1) {\n+                    K startLabel = kapp.klist().items().get(0);\n+                    if (startLabel instanceof KToken) {\n+                        KToken label = (KToken) startLabel;\n+                        if (label.sort().equals(Sort(\"#CellName\"))) {\n+                            String cellName = label.s();\n+                            Sort sort = Sort(getSortOfCell(cellName));\n+                            Option<Set<Production>> initializerProduction = m.productionsFor().get(KLabel(getInitLabel(sort)));\n+                            if (initializerProduction.isDefined()) {\n+                                Set<Production> realProds = stream(initializerProduction.get())\n+                                        .filter(p -> !p.att().contains(Att.RECORD_PRD(), Production.class))\n+                                        .collect(Collections.toSet());\n+                                if (realProds.size() == 1) { // should be only a single initializer\n+                                    if (realProds.head().items().size() == 4) {\n+                                      hasConfigVar = true;\n+                                    }\n+                                }\n+                            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236b454b585855e26f21c1e6c42d8cebaac8d060"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3Nzk2MA==", "bodyText": "This is fixing a false positive that arose because we were generating a rule during parsing that had an unused variable.", "url": "https://github.com/kframework/k/pull/1310#discussion_r434777960", "createdAt": "2020-06-03T18:42:08Z", "author": {"login": "dwightguth"}, "path": "kernel/src/main/java/org/kframework/compile/GenerateSentencesFromConfigDecl.java", "diffHunk": "@@ -202,11 +209,31 @@ public void apply(KToken k) {\n         }\n \n         @Override\n-        public void apply(KApply k) {\n-            if (k.klabel().name().equals(\"#externalCell\")) {\n-                hasConfigVar = true;\n+        public void apply(KApply kapp) {\n+            if (kapp.klabel().name().equals(\"#externalCell\")) {\n+                if (kapp.klist().size() == 1) {\n+                    K startLabel = kapp.klist().items().get(0);\n+                    if (startLabel instanceof KToken) {\n+                        KToken label = (KToken) startLabel;\n+                        if (label.sort().equals(Sort(\"#CellName\"))) {\n+                            String cellName = label.s();\n+                            Sort sort = Sort(getSortOfCell(cellName));\n+                            Option<Set<Production>> initializerProduction = m.productionsFor().get(KLabel(getInitLabel(sort)));\n+                            if (initializerProduction.isDefined()) {\n+                                Set<Production> realProds = stream(initializerProduction.get())\n+                                        .filter(p -> !p.att().contains(Att.RECORD_PRD(), Production.class))\n+                                        .collect(Collections.toSet());\n+                                if (realProds.size() == 1) { // should be only a single initializer\n+                                    if (realProds.head().items().size() == 4) {\n+                                      hasConfigVar = true;\n+                                    }\n+                                }\n+                            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0MTExMg=="}, "originalCommit": {"oid": "236b454b585855e26f21c1e6c42d8cebaac8d060"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3045, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}