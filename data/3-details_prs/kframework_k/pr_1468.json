{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NTYzNDEz", "number": 1468, "title": "Update documentation of concrete and symbolic attributes", "bodyText": "", "createdAt": "2020-07-29T16:57:01Z", "url": "https://github.com/kframework/k/pull/1468", "merged": true, "mergeCommit": {"oid": "fd18d06b93a0252ecae9427ba34ebe03a1ea6c24"}, "closed": true, "closedAt": "2020-07-29T21:05:08Z", "author": {"login": "ttuegel"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5uApHAH2gAyNDU4NTYzNDEzOjNiYTUxOTZlZWUyNTQxNzE3MzdkNTg2ZmJjNjE5NWJhNDdlYzE5MjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5wtW0gH2gAyNDU4NTYzNDEzOmUzOWNhYTg1N2E5MjYwYTc3NWYxZWNjZDczNGRhYzg2NWYxMmQxNDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3ba5196eee254171737d586fbc6195ba47ec1923", "author": {"user": {"login": "ttuegel", "name": "Thomas Tuegel"}}, "url": "https://github.com/kframework/k/commit/3ba5196eee254171737d586fbc6195ba47ec1923", "committedDate": "2020-07-29T16:56:06Z", "message": "Update documentation of concrete and symbolic attributes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzE3NTg5", "url": "https://github.com/kframework/k/pull/1468#pullrequestreview-457717589", "createdAt": "2020-07-29T17:02:24Z", "commit": {"oid": "3ba5196eee254171737d586fbc6195ba47ec1923"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzowMjoyNFrOG5BvOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzowMjoyNFrOG5BvOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1MDQ5MA==", "bodyText": "Is it currently an error to specify both simplification and concrete/symbolic? If not, can we open an issue for that and add it to the backlog?", "url": "https://github.com/kframework/k/pull/1468#discussion_r462450490", "createdAt": "2020-07-29T17:02:24Z", "author": {"login": "ehildenb"}, "path": "pending-documentation.md", "diffHunk": "@@ -1157,45 +1198,31 @@ rule X +Int (Y +Int Z) => (X +Int Z) +Int Y\n    andBool #isVariable(Y)\n ```\n \n-### `simplification` attribute (Haskell backend)\n-\n-The simplification attribute identifies axioms that are useful for simplifying\n-configurations, without being part of the main semantics. When a rule is tagged\n-as `simplification`, the Haskell backend will only apply that rule if:\n+### `concrete` and `symbolic` attributes (Haskell backend)\n \n--   the rule lhs _matches_ the subterm of interest, and\n--   the side condition has no remainder given the current top-level predicate\n-    (that is, the current top-level predicate _implies_ the side condition of\n-    the rule).\n+Sometimes you only want a rule to apply if some or all arguments are concrete\n+(not symbolic). This is done with the `concrete` attribute. Conversely, the\n+`symbolic` attribute will allow a rule to apply only when some arguments are not\n+concrete. These attributes should only be given with the `simplification`\n+attribute.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba5196eee254171737d586fbc6195ba47ec1923"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzE4MjEy", "url": "https://github.com/kframework/k/pull/1468#pullrequestreview-457718212", "createdAt": "2020-07-29T17:03:15Z", "commit": {"oid": "3ba5196eee254171737d586fbc6195ba47ec1923"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzowMzoxNVrOG5BxHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzowMzoxNVrOG5BxHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1MDk3NQ==", "bodyText": "I think use a better example, which won't cause an infinite loop if you can. Just a minor annoyance on my part.", "url": "https://github.com/kframework/k/pull/1468#discussion_r462450975", "createdAt": "2020-07-29T17:03:15Z", "author": {"login": "ehildenb"}, "path": "pending-documentation.md", "diffHunk": "@@ -1157,45 +1198,31 @@ rule X +Int (Y +Int Z) => (X +Int Z) +Int Y\n    andBool #isVariable(Y)\n ```\n \n-### `simplification` attribute (Haskell backend)\n-\n-The simplification attribute identifies axioms that are useful for simplifying\n-configurations, without being part of the main semantics. When a rule is tagged\n-as `simplification`, the Haskell backend will only apply that rule if:\n+### `concrete` and `symbolic` attributes (Haskell backend)\n \n--   the rule lhs _matches_ the subterm of interest, and\n--   the side condition has no remainder given the current top-level predicate\n-    (that is, the current top-level predicate _implies_ the side condition of\n-    the rule).\n+Sometimes you only want a rule to apply if some or all arguments are concrete\n+(not symbolic). This is done with the `concrete` attribute. Conversely, the\n+`symbolic` attribute will allow a rule to apply only when some arguments are not\n+concrete. These attributes should only be given with the `simplification`\n+attribute.\n \n-Note that the `simplification` attribute can be applied to _any_ rule, not just\n-function rules, and that `simplification` rules are tried _before_ rules from\n-the semantic definition.\n-\n-For example, for the following definition:\n+For example, the following will only re-associate terms when all arguments\n+are concrete:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba5196eee254171737d586fbc6195ba47ec1923"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzE4NTg2", "url": "https://github.com/kframework/k/pull/1468#pullrequestreview-457718586", "createdAt": "2020-07-29T17:03:43Z", "commit": {"oid": "3ba5196eee254171737d586fbc6195ba47ec1923"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzowMzo0NFrOG5ByQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzowMzo0NFrOG5ByQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1MTI2NQ==", "bodyText": "I thought we supported something like concrete(X, Y), symbolic(Z) instead of having them all be separate?", "url": "https://github.com/kframework/k/pull/1468#discussion_r462451265", "createdAt": "2020-07-29T17:03:44Z", "author": {"login": "ehildenb"}, "path": "pending-documentation.md", "diffHunk": "@@ -1157,45 +1198,31 @@ rule X +Int (Y +Int Z) => (X +Int Z) +Int Y\n    andBool #isVariable(Y)\n ```\n \n-### `simplification` attribute (Haskell backend)\n-\n-The simplification attribute identifies axioms that are useful for simplifying\n-configurations, without being part of the main semantics. When a rule is tagged\n-as `simplification`, the Haskell backend will only apply that rule if:\n+### `concrete` and `symbolic` attributes (Haskell backend)\n \n--   the rule lhs _matches_ the subterm of interest, and\n--   the side condition has no remainder given the current top-level predicate\n-    (that is, the current top-level predicate _implies_ the side condition of\n-    the rule).\n+Sometimes you only want a rule to apply if some or all arguments are concrete\n+(not symbolic). This is done with the `concrete` attribute. Conversely, the\n+`symbolic` attribute will allow a rule to apply only when some arguments are not\n+concrete. These attributes should only be given with the `simplification`\n+attribute.\n \n-Note that the `simplification` attribute can be applied to _any_ rule, not just\n-function rules, and that `simplification` rules are tried _before_ rules from\n-the semantic definition.\n-\n-For example, for the following definition:\n+For example, the following will only re-associate terms when all arguments\n+are concrete:\n \n ```k\n-    syntax WordStack ::= Int \":\" WordStack | \".WordStack\"\n-    syntax Int ::= sizeWordStack    ( WordStack       ) [function]\n-                 | sizeWordStackAux ( WordStack , Int ) [function]\n- // --------------------------------------------------------------\n-    rule sizeWordStack(WS) => sizeWordStackAux(WS, 0)\n-\n-    rule sizeWordStackAux(.WordStack, N) => N\n-    rule sizeWordStackAux(W : WS    , N) => sizeWordStackAux(WS, N +Int 1)\n+rule X +Int (Y +Int Z) => (X +Int Y) +Int Z [simplification, concrete]\n ```\n \n-We might add the following simplification lemma:\n+And the following rules will only re-associate terms when it will end up\n+grouping concrete sub-terms:\n \n ```k\n-    rule sizeWordStackAux(WS, N) => N +Int sizeWordStackAux(WS, 0)\n-      requires N =/=Int 0\n-      [simplification]\n-```\n+rule X +Int (Y +Int Z) => (X +Int Y) +Int Z\n+  [simplification, concrete(X), concrete(Y), symbolic(Z)]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba5196eee254171737d586fbc6195ba47ec1923"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzE5NDA0", "url": "https://github.com/kframework/k/pull/1468#pullrequestreview-457719404", "createdAt": "2020-07-29T17:04:48Z", "commit": {"oid": "3ba5196eee254171737d586fbc6195ba47ec1923"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4824c272274a78751155e54feea2b381dd5a2132", "author": {"user": {"login": "ttuegel", "name": "Thomas Tuegel"}}, "url": "https://github.com/kframework/k/commit/4824c272274a78751155e54feea2b381dd5a2132", "committedDate": "2020-07-29T18:53:26Z", "message": "Use list syntax for concrete attribute"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d489c84cb472eacbd97825e0f9f464217e1579b", "author": {"user": {"login": "ttuegel", "name": "Thomas Tuegel"}}, "url": "https://github.com/kframework/k/commit/7d489c84cb472eacbd97825e0f9f464217e1579b", "committedDate": "2020-07-29T18:59:56Z", "message": "Take +Int simplification rules from INT-SYMBOLIC"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODE5NTI4", "url": "https://github.com/kframework/k/pull/1468#pullrequestreview-457819528", "createdAt": "2020-07-29T19:22:13Z", "commit": {"oid": "7d489c84cb472eacbd97825e0f9f464217e1579b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e39caa857a9260a775f1eccd734dac865f12d144", "author": {"user": {"login": "rv-jenkins", "name": null}}, "url": "https://github.com/kframework/k/commit/e39caa857a9260a775f1eccd734dac865f12d144", "committedDate": "2020-07-29T20:04:45Z", "message": "Merge branch 'master' into doc--haskell-concrete"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2334, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}