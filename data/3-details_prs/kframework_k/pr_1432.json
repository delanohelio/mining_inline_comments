{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMzA1NDM4", "number": 1432, "title": "Make new krun replacement work with haskell backend", "bodyText": "", "createdAt": "2020-07-16T15:54:07Z", "url": "https://github.com/kframework/k/pull/1432", "merged": true, "mergeCommit": {"oid": "d1b2317b3d4611d86a58bdd724e3dfd497c3c4ee"}, "closed": true, "closedAt": "2020-07-20T20:50:59Z", "author": {"login": "dwightguth"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1hT2YgH2gAyNDUwMzA1NDM4OjY5ODk4NDhmNzNkNTAxZTk0MDUxM2Q5MGQwNGE5Y2E2NWJmYzM0YzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc23HkHAH2gAyNDUwMzA1NDM4OjFmZjg3YjA4ZmEzMzkzZjc0OTBhOGE2OWY1NjlhMTlhMzhhMGI2OWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6989848f73d501e940513d90d04a9ca65bfc34c1", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/6989848f73d501e940513d90d04a9ca65bfc34c1", "committedDate": "2020-07-16T15:52:37Z", "message": "add support for --statistics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a62e0240244801a56ea20dcb68eca9690865eb82", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/a62e0240244801a56ea20dcb68eca9690865eb82", "committedDate": "2020-07-16T15:52:37Z", "message": "add (internal) tool to compile k search pattern"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4ebe8520421035e2f7e28bf0d2ecc3752115ee7", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/e4ebe8520421035e2f7e28bf0d2ecc3752115ee7", "committedDate": "2020-07-16T15:52:37Z", "message": "haskell backend --search and --pattern"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "200350598bfdfbdd425d50e19a56168a67c8f94b", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/200350598bfdfbdd425d50e19a56168a67c8f94b", "committedDate": "2020-07-16T15:52:37Z", "message": "--pattern without --search"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c000f709b75c8798e741edd06f4c7ff72de13c28", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/c000f709b75c8798e741edd06f4c7ff72de13c28", "committedDate": "2020-07-16T15:52:37Z", "message": "fix bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "304ff2c8ad75529092b453b1381cd6f7c977c877", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/304ff2c8ad75529092b453b1381cd6f7c977c877", "committedDate": "2020-07-16T15:52:37Z", "message": "fix bug involving result.kore not existing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52fc6ddf2ab5748757269a0306b676d73b632e5d", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/52fc6ddf2ab5748757269a0306b676d73b632e5d", "committedDate": "2020-07-16T15:52:37Z", "message": "fix bug in format attribute involving kprint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f943cdbb571dc174bb6ad066a34f45655b3abf8", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/2f943cdbb571dc174bb6ad066a34f45655b3abf8", "committedDate": "2020-07-16T15:52:37Z", "message": "make DotVar start with _"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "387b66a528ffda9e8439b265befb07b3629146a5", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/387b66a528ffda9e8439b265befb07b3629146a5", "committedDate": "2020-07-16T15:53:22Z", "message": "use kx on haskell backend also"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2132aebba09283815db750d5dd68035d1d1929c", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/d2132aebba09283815db750d5dd68035d1d1929c", "committedDate": "2020-07-16T16:10:19Z", "message": "fix test output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33a26b3355fe9a3176bf5b12b634145cb5790080", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/33a26b3355fe9a3176bf5b12b634145cb5790080", "committedDate": "2020-07-17T16:47:51Z", "message": "update test output"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDYzOTI2", "url": "https://github.com/kframework/k/pull/1432#pullrequestreview-451063926", "createdAt": "2020-07-18T15:27:16Z", "commit": {"oid": "33a26b3355fe9a3176bf5b12b634145cb5790080"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e86d69b99dacfb7e1cdf7a288a19d7c65365cdcc", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/e86d69b99dacfb7e1cdf7a288a19d7c65365cdcc", "committedDate": "2020-07-20T17:45:47Z", "message": "fix shebang"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODM5MTM4", "url": "https://github.com/kframework/k/pull/1432#pullrequestreview-451839138", "createdAt": "2020-07-20T18:04:31Z", "commit": {"oid": "e86d69b99dacfb7e1cdf7a288a19d7c65365cdcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODowNDozMVrOG0Zauw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODowNDozMVrOG0Zauw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5NTU3OQ==", "bodyText": "This variable should be named a little better, because it appears it's only for the Haskell backend? Or at least, it's only for when doing search or prove?\nI would say it should be haskellCmd, instead of just cmd. If later we change LLVM backend to handle things like search or prove, then we can change the variable name.", "url": "https://github.com/kframework/k/pull/1432#discussion_r457595579", "createdAt": "2020-07-20T18:04:31Z", "author": {"login": "ehildenb"}, "path": "k-distribution/src/main/scripts/bin/kx", "diffHunk": "@@ -11,26 +11,30 @@ depth=\n params=()\n allPath=true\n dir=.\n-cmd=\n+cmd=kore-exec", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e86d69b99dacfb7e1cdf7a288a19d7c65365cdcc"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODQxNjg1", "url": "https://github.com/kframework/k/pull/1432#pullrequestreview-451841685", "createdAt": "2020-07-20T18:08:14Z", "commit": {"oid": "e86d69b99dacfb7e1cdf7a288a19d7c65365cdcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODowODoxNFrOG0Zixw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODowODoxNFrOG0Zixw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5NzYzOQ==", "bodyText": "This doesn't result in too many % being added? It looks something like %3 could get turned into %%cSOME_TERMINAL, where maybe it should be %cSOME_TERMINAL.\nAlso, why use replace for the last two instead of replaceAll? Just want you to double-check that this is correct.", "url": "https://github.com/kframework/k/pull/1432#discussion_r457597639", "createdAt": "2020-07-20T18:08:14Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/backend/kore/ModuleToKORE.java", "diffHunk": "@@ -1374,7 +1374,7 @@ private Att addKoreAttributes(Production prod, SetMultimap<KLabel, Rule> functio\n           if (prod.items().apply(i) instanceof NonTerminal) {\n             format = format.replaceAll(\"%\" + (i+1) + \"(?![0-9])\", \"%\" + (nt++));\n           } else if (prod.items().apply(i) instanceof Terminal) {\n-            format = format.replaceAll(\"%\" + (i+1) + \"(?![0-9])\", \"%c\" + ((Terminal)prod.items().apply(i)).value().replace(\"\\\\\", \"\\\\\\\\\").replace(\"$\", \"\\\\$\") + \"%r\");\n+            format = format.replaceAll(\"%\" + (i+1) + \"(?![0-9])\", \"%c\" + ((Terminal)prod.items().apply(i)).value().replace(\"\\\\\", \"\\\\\\\\\").replace(\"$\", \"\\\\$\").replace(\"%\", \"%%\") + \"%r\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e86d69b99dacfb7e1cdf7a288a19d7c65365cdcc"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODQyMTkx", "url": "https://github.com/kframework/k/pull/1432#pullrequestreview-451842191", "createdAt": "2020-07-20T18:08:58Z", "commit": {"oid": "e86d69b99dacfb7e1cdf7a288a19d7c65365cdcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODowODo1OFrOG0ZkXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODowODo1OFrOG0ZkXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5ODA0Nw==", "bodyText": "This looks like a very short kompile pipeline? Could it be framed as such? Mostly curious.", "url": "https://github.com/kframework/k/pull/1432#discussion_r457598047", "createdAt": "2020-07-20T18:08:58Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/ksearchpattern/KSearchPatternFrontEnd.java", "diffHunk": "@@ -0,0 +1,122 @@\n+// Copyright (c) 2020 K Team. All Rights Reserved.\n+package org.kframework.ksearchpattern;\n+\n+import com.google.inject.Provider;\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+import com.google.inject.Module;\n+import org.kframework.attributes.Source;\n+import org.kframework.backend.kore.ModuleToKORE;\n+import org.kframework.builtin.BooleanUtils;\n+import org.kframework.compile.AddSortInjections;\n+import org.kframework.compile.ExpandMacros;\n+import org.kframework.compile.RewriteToTop;\n+import org.kframework.definition.Rule;\n+import org.kframework.kompile.CompiledDefinition;\n+import org.kframework.kompile.KompileOptions;\n+import org.kframework.kore.K;\n+import org.kframework.main.FrontEnd;\n+import org.kframework.main.GlobalOptions;\n+import org.kframework.utils.errorsystem.KExceptionManager;\n+import org.kframework.utils.file.FileUtil;\n+import org.kframework.utils.file.JarInfo;\n+import org.kframework.utils.file.KompiledDir;\n+import org.kframework.utils.inject.CommonModule;\n+import org.kframework.utils.inject.DefinitionScope;\n+import org.kframework.utils.inject.JCommanderModule;\n+import org.kframework.utils.inject.JCommanderModule.ExperimentalUsage;\n+import org.kframework.utils.inject.JCommanderModule.Usage;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Frontend for k-compiled-search-pattern tool.\n+ * <p>\n+ * k-compile-search-patterrn is used by the new krun frontend in order to\n+ * convert a search pattern written as a rule bubble into a KORE search pattern\n+ * for the Haskell backend.\n+ */\n+public class KSearchPatternFrontEnd extends FrontEnd {\n+\n+    private final KSearchPatternOptions options;\n+    private final Provider<KompileOptions> kompileOptions;\n+    private final KExceptionManager kem;\n+    private final Provider<FileUtil> files;\n+    private final GlobalOptions globalOptions;\n+    private final DefinitionScope scope;\n+    private final Provider<File> kompiledDir;\n+    private final Provider<CompiledDefinition> compiledDef;\n+\n+    @Inject\n+    public KSearchPatternFrontEnd(\n+            KSearchPatternOptions options,\n+            KExceptionManager kem,\n+            Provider<KompileOptions> kompileOptions,\n+            GlobalOptions globalOptions,\n+            @Usage String usage,\n+            @ExperimentalUsage String experimentalUsage,\n+            JarInfo jarInfo,\n+            Provider<FileUtil> files,\n+            @KompiledDir Provider<File> kompiledDir,\n+            Provider<CompiledDefinition> compiledDef,\n+            DefinitionScope scope) {\n+        super(kem, globalOptions, usage, experimentalUsage, jarInfo, files);\n+        this.options = options;\n+        this.kompileOptions = kompileOptions;\n+        this.globalOptions = globalOptions;\n+        this.kem = kem;\n+        this.files = files;\n+        this.scope = scope;\n+        this.kompiledDir = kompiledDir;\n+        this.compiledDef = compiledDef;\n+    }\n+\n+    public static List<Module> getModules() {\n+        List<Module> modules = new ArrayList<>();\n+        modules.add(new KSearchPatternModule());\n+        modules.add(new JCommanderModule());\n+        modules.add(new CommonModule());\n+        return modules;\n+    }\n+\n+    @Override\n+    protected int run() {\n+        scope.enter(kompiledDir.get());\n+        try {\n+          FileUtil files = this.files.get();\n+          CompiledDefinition compiledDef = this.compiledDef.get();\n+          KompileOptions kompileOptions = this.kompileOptions.get();\n+          Rule pattern = compiledDef.compilePatternIfAbsent(files, kem, options.pattern(), Source.apply(\"<command line>\"));\n+          K patternTerm = RewriteToTop.toLeft(pattern.body());\n+          K patternCondition = pattern.requires();\n+          org.kframework.definition.Module mod = compiledDef.executionModule();\n+          ModuleToKORE converter = new ModuleToKORE(mod, files, compiledDef.topCellInitializer, kompileOptions);\n+          StringBuilder sb = new StringBuilder();\n+          ExpandMacros macroExpander = ExpandMacros.forNonSentences(mod, files, kompileOptions, false);\n+          K withMacros = macroExpander.expand(patternTerm);\n+          K kWithInjections = new AddSortInjections(mod).addInjections(withMacros);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e86d69b99dacfb7e1cdf7a288a19d7c65365cdcc"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ab58130d0d29fa63f9e08dfda7ff60f63cabb20", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/9ab58130d0d29fa63f9e08dfda7ff60f63cabb20", "committedDate": "2020-07-20T18:20:01Z", "message": "rename $cmd"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODU0MTQy", "url": "https://github.com/kframework/k/pull/1432#pullrequestreview-451854142", "createdAt": "2020-07-20T18:26:39Z", "commit": {"oid": "9ab58130d0d29fa63f9e08dfda7ff60f63cabb20"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoyNjozOVrOG0aJ8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoyNjozOVrOG0aJ8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwNzY2Ng==", "bodyText": "Are we testing the old krun codepath at all at this point then?", "url": "https://github.com/kframework/k/pull/1432#discussion_r457607666", "createdAt": "2020-07-20T18:26:39Z", "author": {"login": "ehildenb"}, "path": "k-distribution/include/kframework/ktest.mak", "diffHunk": "@@ -45,6 +45,9 @@ SOURCE_EXT?=$(or $(and $(wildcard $(DEF).k), k), $(or $(and $(wildcard $(DEF).md\n ifeq ($(KOMPILE_BACKEND),llvm)\n KRUN=$(abspath $(MAKEFILE_PATH)/../../bin/kx)\n endif\n+ifeq ($(KOMPILE_BACKEND),haskell)\n+KRUN=$(abspath $(MAKEFILE_PATH)/../../bin/kx)\n+endif", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ab58130d0d29fa63f9e08dfda7ff60f63cabb20"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODcxNzUz", "url": "https://github.com/kframework/k/pull/1432#pullrequestreview-451871753", "createdAt": "2020-07-20T18:52:22Z", "commit": {"oid": "9ab58130d0d29fa63f9e08dfda7ff60f63cabb20"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODgyODIy", "url": "https://github.com/kframework/k/pull/1432#pullrequestreview-451882822", "createdAt": "2020-07-20T19:08:01Z", "commit": {"oid": "9ab58130d0d29fa63f9e08dfda7ff60f63cabb20"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ff87b08fa3393f7490a8a69f569a19a38a0b69a", "author": {"user": {"login": "rv-jenkins", "name": null}}, "url": "https://github.com/kframework/k/commit/1ff87b08fa3393f7490a8a69f569a19a38a0b69a", "committedDate": "2020-07-20T19:51:02Z", "message": "Merge branch 'master' into kx2"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2302, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}