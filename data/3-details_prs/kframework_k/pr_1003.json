{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NjQ1Njgy", "number": 1003, "title": "kast --gen-parser prototype", "bodyText": "This is definitely not ready for production use yet, but it seems to work for IMP at least. I intend to make a followup PR after trying out JSON and WASM.", "createdAt": "2020-01-06T17:55:15Z", "url": "https://github.com/kframework/k/pull/1003", "merged": true, "mergeCommit": {"oid": "5cb2dfe9b6af63737f162e95f2f2225f8d973d04"}, "closed": true, "closedAt": "2020-01-09T20:45:37Z", "author": {"login": "dwightguth"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb3ysQ_AH2gAyMzU5NjQ1NjgyOjMxNDFiMWZlNGI3MGI0ZTg2ODczN2ZmNjYzOTNkMzI5NTUwZWRiYjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4tpiPgH2gAyMzU5NjQ1NjgyOjYwMjRmMTcwYWJkZGQwODk1ODNiMTNmMzM1Y2YyNDQ5NTczYjMwNWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3141b1fe4b70b4e868737ff66393d329550edbb1", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/3141b1fe4b70b4e868737ff66393d329550edbb1", "committedDate": "2020-01-06T21:04:22Z", "message": "make some functions in ModuleToKORE static"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e1a14621f7c4e905e55beb51b652aa9aa0d32ab", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/2e1a14621f7c4e905e55beb51b652aa9aa0d32ab", "committedDate": "2020-01-06T21:04:22Z", "message": "refactor associativity into java enum"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f65161f6c5988e269217d27312124dee05085fa", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/2f65161f6c5988e269217d27312124dee05085fa", "committedDate": "2020-01-06T21:04:22Z", "message": "annotate program list productions with attribute"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3e281800eb752e9b3642d0fe660e574b0df8cff", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/f3e281800eb752e9b3642d0fe660e574b0df8cff", "committedDate": "2020-01-06T21:04:22Z", "message": "autogenerate bison and flex scanner/parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2b217c974546f2bd33ef808a61275ec3b78128f", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/e2b217c974546f2bd33ef808a61275ec3b78128f", "committedDate": "2020-01-06T21:04:22Z", "message": "include files for c parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fcd12b949897f194daf3219c4b75614f4a27725", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/2fcd12b949897f194daf3219c4b75614f4a27725", "committedDate": "2020-01-06T21:04:22Z", "message": "kast --gen-parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51348cb87590fcced40e3406be61eb1834bd015b", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/51348cb87590fcced40e3406be61eb1834bd015b", "committedDate": "2020-01-06T21:21:00Z", "message": "fix whitespace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d02d29ab9d60934191e785abd5df39a90692644e", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/d02d29ab9d60934191e785abd5df39a90692644e", "committedDate": "2020-01-06T21:21:08Z", "message": "add some missing cases to ModuleToKORE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68d9d82095f5f82b6961333c9ab1eed76a97be1c", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/68d9d82095f5f82b6961333c9ab1eed76a97be1c", "committedDate": "2020-01-06T21:21:22Z", "message": "handle I/O better when calling flex and bison"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aaab3d2a4d3188a85c4ab829c31351713dc9728", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/0aaab3d2a4d3188a85c4ab829c31351713dc9728", "committedDate": "2020-01-06T21:22:03Z", "message": "fix String sort tokens"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c562f6db901545d56a0cbcf1017bb6a2a3544476", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/c562f6db901545d56a0cbcf1017bb6a2a3544476", "committedDate": "2020-01-06T21:22:45Z", "message": "give tokens proper names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2058f17b080d16e84b97825a6df536109c7f7f8c", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/2058f17b080d16e84b97825a6df536109c7f7f8c", "committedDate": "2020-01-06T21:23:00Z", "message": "fix null pointer exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "980732e1211e91baf1afc7b020bcad2e339a00e5", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/980732e1211e91baf1afc7b020bcad2e339a00e5", "committedDate": "2020-01-06T21:23:09Z", "message": "use truly mutable collection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81cfe48148012cd5907539c6cb08af66c7857650", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/81cfe48148012cd5907539c6cb08af66c7857650", "committedDate": "2020-01-06T21:23:18Z", "message": "verbose parse errors"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ff261940f65efd38aed6cb437c97d4d565dbd69", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/8ff261940f65efd38aed6cb437c97d4d565dbd69", "committedDate": "2020-01-06T17:02:24Z", "message": "kast --gen-parser"}, "afterCommit": {"oid": "81cfe48148012cd5907539c6cb08af66c7857650", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/81cfe48148012cd5907539c6cb08af66c7857650", "committedDate": "2020-01-06T21:23:18Z", "message": "verbose parse errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7136247770a32e009404c52917dbbc1256288bda", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/7136247770a32e009404c52917dbbc1256288bda", "committedDate": "2020-01-07T15:19:58Z", "message": "synchronize bimap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d8c2a4d156e28382419cb2f425881340f5e319a", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/3d8c2a4d156e28382419cb2f425881340f5e319a", "committedDate": "2020-01-07T16:14:57Z", "message": "Merge branch 'master' into parser"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MzgzNzk1", "url": "https://github.com/kframework/k/pull/1003#pullrequestreview-339383795", "createdAt": "2020-01-07T17:20:01Z", "commit": {"oid": "3d8c2a4d156e28382419cb2f425881340f5e319a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNzoyMDowMlrOFbAIRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNzoyODo0MlrOFbAXxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg1Nzk5MQ==", "bodyText": "Why is this in the temp directory?\nShouldn't this be inside the -kompiled directory?\nCould you put all the related files inside a single directory? -kompiled already has many things in it, and it would make it easier to look for debugging info when files are a bit more organized.", "url": "https://github.com/kframework/k/pull/1003#discussion_r363857991", "createdAt": "2020-01-07T17:20:02Z", "author": {"login": "radumereuta"}, "path": "kernel/src/main/java/org/kframework/kast/KastFrontEnd.java", "diffHunk": "@@ -124,13 +135,59 @@ public int run() {\n             }\n             Module parsingMod = maybeMod.get();\n \n-            K parsed = kread.prettyRead(parsingMod, sort, def, source, FileUtil.read(stringToParse));\n+            if (options.genParser) {\n+                try (ParseInModule parseInModule = RuleGrammarGenerator.getCombinedGrammar(parsingMod, true)) {\n+                    try (Scanner scanner = parseInModule.getScanner()) {\n+                        FileUtil files = this.files.get();\n+                        File scannerFile = files.resolveTemp(\"scanner.l\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8c2a4d156e28382419cb2f425881340f5e319a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg1OTUwOA==", "bodyText": "Maybe make notInjection a static String.", "url": "https://github.com/kframework/k/pull/1003#discussion_r363859508", "createdAt": "2020-01-07T17:23:18Z", "author": {"login": "radumereuta"}, "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/generator/RuleGrammarGenerator.java", "diffHunk": "@@ -392,9 +392,9 @@ public static ParseInModule getCombinedGrammar(Module mod, boolean strict, boole\n                         Seq(NonTerminal(ul.childSort), Terminal(\"\"), NonTerminal(Sort(ul.sort.name() + \"#Terminator\", ul.sort.params()))),\n                         newAtts.add(Constants.ORIGINAL_PRD, Production.class, ul.pList));\n                 // Es ::= Ne#Es\n-                prod4 = Production(Seq(), ul.sort, Seq(NonTerminal(Sort(\"Ne#\" + ul.sort.name(), ul.sort.params()))));\n+                prod4 = Production(Seq(), ul.sort, Seq(NonTerminal(Sort(\"Ne#\" + ul.sort.name(), ul.sort.params()))), Att().add(\"notInjection\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8c2a4d156e28382419cb2f425881340f5e319a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2MDY2Mg==", "bodyText": "get method returns void? Maybe find a better name?", "url": "https://github.com/kframework/k/pull/1003#discussion_r363860662", "createdAt": "2020-01-07T17:25:50Z", "author": {"login": "radumereuta"}, "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/kernel/KSyntax2Bison.java", "diffHunk": "@@ -0,0 +1,297 @@\n+// Copyright (c) 2019 K Team. All Rights Reserved.\n+package org.kframework.parser.concrete2kore.kernel;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.mutable.MutableInt;\n+import org.kframework.Collections;\n+import org.kframework.TopologicalSort;\n+import org.kframework.attributes.Att;\n+import org.kframework.backend.kore.ModuleToKORE;\n+import org.kframework.definition.Associativity;\n+import org.kframework.definition.Module;\n+import org.kframework.definition.NonTerminal;\n+import org.kframework.definition.Production;\n+import org.kframework.definition.ProductionItem;\n+import org.kframework.definition.RegexTerminal;\n+import org.kframework.definition.Sentence;\n+import org.kframework.definition.SyntaxAssociativity;\n+import org.kframework.definition.Tag;\n+import org.kframework.definition.Terminal;\n+import org.kframework.definition.TerminalLike;\n+import org.kframework.kil.loader.Constants;\n+import org.kframework.kore.KLabel;\n+import org.kframework.kore.Sort;\n+import org.kframework.utils.StringUtil;\n+import org.kframework.utils.errorsystem.KEMException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import scala.Tuple2;\n+\n+import static org.kframework.Collections.*;\n+import static org.kframework.definition.Constructors.*;\n+import static org.kframework.kore.KORE.*;\n+\n+public class KSyntax2Bison {\n+\n+  private static void computeSide(int idx, Production prod, List<ProductionItem> items, Module module, scala.collection.Set<Tuple2<Tag, Tag>> assoc, Map<Set<Tag>, Integer> ordinals, Set<Tuple2<Sort, Set<Tag>>> nts, MutableInt nextOrdinal) {\n+    NonTerminal nt = (NonTerminal) items.get(idx);\n+    Tag parent = new Tag(prod.klabel().get().name());\n+    Set<Tag> prods = new HashSet<>();\n+    for (Tag child : iterable(module.priorities().relations().get(parent).getOrElse(() -> Collections.<Tag>Set()))) {\n+      prods.add(child);\n+    }\n+    for (Tuple2<Tag, Tag> entry : iterable(assoc)) {\n+      if (entry._1().equals(parent)) {\n+        prods.add(entry._2());\n+      }\n+    }\n+    if (prods.isEmpty()) {\n+      return;\n+    }\n+    int ordinal;\n+    if (ordinals.containsKey(prods)) {\n+      ordinal = ordinals.get(prods);\n+    } else {\n+      ordinal = nextOrdinal.intValue();\n+      ordinals.put(prods, nextOrdinal.intValue());\n+      nextOrdinal.increment();\n+    }\n+    items.set(idx, NonTerminal(Sort(nt.sort().name() + \"#\" + ordinal, nt.sort().params()), nt.name()));\n+    nts.add(Tuple2.apply(nt.sort(), prods));\n+  }\n+\n+  public static Module transformByPriorityAndAssociativity(Module module) {\n+    Map<Set<Tag>, Integer> ordinals = new HashMap<>();\n+    MutableInt nextOrdinal = new MutableInt(0);\n+    Set<Sentence> sentences = new HashSet<>();\n+    Set<Tuple2<Sort, Set<Tag>>> nts = new HashSet<>();\n+    for (Sentence s : iterable(module.sentences())) {\n+      if (s instanceof Production) {\n+        Production prod = (Production)s;\n+        if (prod.klabel().isDefined() && prod.params().isEmpty()) {\n+          List<ProductionItem> items = new ArrayList<>(mutable(prod.items()));\n+          if (items.get(0) instanceof NonTerminal) {\n+            computeSide(0, prod, items, module, module.rightAssoc(), ordinals, nts, nextOrdinal);\n+          }\n+          if (items.size() > 1 && items.get(items.size() - 1) instanceof NonTerminal) {\n+            computeSide(items.size()-1, prod, items, module, module.leftAssoc(), ordinals, nts, nextOrdinal);\n+          }\n+          sentences.add(Production(prod.klabel(), prod.params(), prod.sort(), immutable(items), prod.att().add(Constants.ORIGINAL_PRD, Production.class, prod)));\n+        } else {\n+          sentences.add(prod.withAtt(prod.att().add(Constants.ORIGINAL_PRD, Production.class, prod)));\n+        }\n+      } else {\n+        sentences.add(s);\n+      }\n+    }\n+    module = Module(module.name(), module.imports(), immutable(sentences), module.att());\n+    Deque<Tuple2<Sort, Set<Tag>>> worklist = new ArrayDeque<>(nts);\n+    worklist.addAll(nts);\n+    while (!worklist.isEmpty()) {\n+      Tuple2<Sort, Set<Tag>> item = worklist.poll();\n+      for (Production prod : iterable(module.productionsForSort().apply(item._1().head()))) {\n+        int ordinal = ordinals.get(item._2());\n+        Sort newNT = Sort(item._1().name() + \"#\" + ordinal, item._1().params());\n+        if (prod.isSubsort()) {\n+          worklist.offer(Tuple2.apply(prod.getSubsortSort(), item._2()));\n+          sentences.add(Production(prod.klabel(), prod.params(), newNT, Seq(NonTerminal(prod.getSubsortSort(), prod.nonterminals().apply(0).name())), prod.att()));\n+        } else if (prod.klabel().isEmpty() || !item._2().contains(new Tag(prod.klabel().get().name()))) {\n+          sentences.add(Production(prod.klabel(), prod.params(), newNT, prod.items(), prod.att()));\n+        }\n+      }\n+    }\n+    return Module(module.name(), module.imports(), immutable(sentences), module.att());\n+  }\n+\n+  public static void getParser(Module module, Scanner scanner, Sort start, File path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8c2a4d156e28382419cb2f425881340f5e319a"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2MTk1Nw==", "bodyText": "Another get that returns void.", "url": "https://github.com/kframework/k/pull/1003#discussion_r363861957", "createdAt": "2020-01-07T17:28:42Z", "author": {"login": "radumereuta"}, "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/kernel/Scanner.java", "diffHunk": "@@ -52,11 +53,44 @@ public Module getModule() {\n         return module;\n     }\n \n+    public Set<Integer> kinds() {\n+        return tokens.values().stream().map(v -> v._1()).collect(Collectors.toSet());\n+    }\n+\n     // debugging method\n-    private TerminalLike getTokenByKind(int kind) {\n+    public TerminalLike getTokenByKind(int kind) {\n         return tokens.entrySet().stream().filter(e -> e.getValue()._1() == kind).findAny().get().getKey();\n     }\n \n+    public void getStandaloneScanner(File path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8c2a4d156e28382419cb2f425881340f5e319a"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c55a8c7913d02968e350953dc737b1dacc6d88c", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/6c55a8c7913d02968e350953dc737b1dacc6d88c", "committedDate": "2020-01-07T19:27:42Z", "message": "remove kore to klabel map which is unused"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac4337c1cfb3dff3f6a210c7daf102a75b708b96", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/ac4337c1cfb3dff3f6a210c7daf102a75b708b96", "committedDate": "2020-01-07T19:45:08Z", "message": "fix compiler error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NDkxNzQz", "url": "https://github.com/kframework/k/pull/1003#pullrequestreview-339491743", "createdAt": "2020-01-07T20:36:23Z", "commit": {"oid": "ac4337c1cfb3dff3f6a210c7daf102a75b708b96"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDozNjoyM1rOFbFFlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDozNjoyM1rOFbFFlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkzOTIyMA==", "bodyText": "Wow, the logic here got a lot more complicated.\nI think having kast --gen-parser doesn't make much sense. kompile --backend bison or kompile --emit-bison-parser makes more sense to me. I also agree that the generated parser should go in the kompiled directory, and should form a standalone binary/executable which the user can call directly (without having to invoke immediately via kast).\nIf you absolutely must keep it here, put all the bison generation stuff it its own method and call it under the if (options.genParser) instead of inlining it, so that it's easier to see the overall logic of this main method.\nIt would also make sense to me to add kast --use-bison-parser and krun --use-bison-parser, which would use the parser emitted during kompile.", "url": "https://github.com/kframework/k/pull/1003#discussion_r363939220", "createdAt": "2020-01-07T20:36:23Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/kast/KastFrontEnd.java", "diffHunk": "@@ -124,13 +135,59 @@ public int run() {\n             }\n             Module parsingMod = maybeMod.get();\n \n-            K parsed = kread.prettyRead(parsingMod, sort, def, source, FileUtil.read(stringToParse));\n+            if (options.genParser) {\n+                try (ParseInModule parseInModule = RuleGrammarGenerator.getCombinedGrammar(parsingMod, true)) {\n+                    try (Scanner scanner = parseInModule.getScanner()) {\n+                        FileUtil files = this.files.get();\n+                        File scannerFile = files.resolveTemp(\"scanner.l\");\n+                        File parserFile = files.resolveTemp(\"parser.y\");\n+                        scanner.getStandaloneScanner(scannerFile);\n+                        KSyntax2Bison.getParser(parseInModule.getParsingModule(), scanner, sort, parserFile);\n+                        int exit = files.getProcessBuilder()\n+                          .directory(files.resolveTemp(\".\"))\n+                          .command(\"flex\", \"-w\", scannerFile.getAbsolutePath())\n+                          .inheritIO()\n+                          .start()\n+                          .waitFor();\n+                        if (exit != 0) {\n+                            throw KEMException.internalError(\"flex returned nonzero exit code: \" + exit + \"\\n\");\n+                        }\n+                        exit = files.getProcessBuilder()\n+                          .directory(files.resolveTemp(\".\"))\n+                          .command(\"bison\", \"-d\", \"-Wno-other\", \"-Wno-conflicts-sr\", \"-Wno-conflicts-rr\", parserFile.getAbsolutePath())\n+                          .inheritIO()\n+                          .start()\n+                          .waitFor();\n+                        if (exit != 0) {\n+                            throw KEMException.internalError(\"bison returned nonzero exit code: \" + exit + \"\\n\");\n+                        }\n+                        exit = files.getProcessBuilder()\n+                          .command(\"gcc\",\n+                              files.resolveKBase(\"include/cparser/main.c\").getAbsolutePath(),\n+                              files.resolveTemp(\"lex.yy.c\").getAbsolutePath(),\n+                              files.resolveTemp(\"parser.tab.c\").getAbsolutePath(),\n+                              \"-iquote\", files.resolveTemp(\".\").getAbsolutePath(),\n+                              \"-iquote\", files.resolveKBase(\"include/cparser\").getAbsolutePath(),\n+                              \"-o\", outputFile.getAbsolutePath())\n+                          .inheritIO()\n+                          .start()\n+                          .waitFor();\n+                        if (exit != 0) {\n+                            throw KEMException.internalError(\"gcc returned nonzero exit code: \" + exit + \"\\n\");\n+                        }\n+                    } catch(IOException | InterruptedException e) {\n+                      throw KEMException.internalError(\"Failed to execute process.\", e);\n+                    }\n+                }\n+            } else {\n+              K parsed = kread.prettyRead(parsingMod, sort, def, source, FileUtil.read(stringToParse));\n+\n+              if (options.expandMacros) {\n+                  parsed = ExpandMacros.forNonSentences(unparsingMod, files.get(), def.kompileOptions, false).expand(parsed);\n+              }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac4337c1cfb3dff3f6a210c7daf102a75b708b96"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NDkyNTE1", "url": "https://github.com/kframework/k/pull/1003#pullrequestreview-339492515", "createdAt": "2020-01-07T20:37:53Z", "commit": {"oid": "ac4337c1cfb3dff3f6a210c7daf102a75b708b96"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDozNzo1NFrOFbFHzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDozNzo1NFrOFbFHzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkzOTc4OA==", "bodyText": "Is there no way for getStandaloneScanner and getScanner to re-use chunks amongst themselves?", "url": "https://github.com/kframework/k/pull/1003#discussion_r363939788", "createdAt": "2020-01-07T20:37:54Z", "author": {"login": "ehildenb"}, "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/kernel/Scanner.java", "diffHunk": "@@ -52,11 +53,44 @@ public Module getModule() {\n         return module;\n     }\n \n+    public Set<Integer> kinds() {\n+        return tokens.values().stream().map(v -> v._1()).collect(Collectors.toSet());\n+    }\n+\n     // debugging method\n-    private TerminalLike getTokenByKind(int kind) {\n+    public TerminalLike getTokenByKind(int kind) {\n         return tokens.entrySet().stream().filter(e -> e.getValue()._1() == kind).findAny().get().getKey();\n     }\n \n+    public void getStandaloneScanner(File path) {\n+        StringBuilder flex  = new StringBuilder();\n+        flex.append(\"%{\\n\" +\n+            \"#include \\\"node.h\\\"\\n\" +\n+            \"#include \\\"parser.tab.h\\\"\\n\" +\n+            \"%}\\n\\n\" +\n+            \"%option noyywrap\\n\" +\n+            \"%%\\n\\n\");\n+        if (this.module.allSorts().contains(Sorts.Layout())) {\n+            flex.append(this.module.layout() + \" ;\\n\");\n+        }\n+        List<TerminalLike> ordered = tokens.keySet().stream().sorted((t1, t2) -> tokens.get(t2)._2() - tokens.get(t1)._2()).collect(Collectors.toList());\n+        for (TerminalLike key : ordered) {\n+            if (key instanceof Terminal) {\n+                Terminal t = (Terminal) key;\n+                flex.append(StringUtil.enquoteCString(t.value()));\n+            } else {\n+                RegexTerminal t = (RegexTerminal) key;\n+                flex.append(t.regex());\n+            }\n+            writeStandaloneAction(flex, key);\n+        }\n+        try {\n+            FileUtils.write(path, flex);\n+        } catch (IOException e) {\n+            throw KEMException.internalError(\"Failed to write file for scanner\", e);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac4337c1cfb3dff3f6a210c7daf102a75b708b96"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "860c14ad1322866d3a7e8273566e64b34f340618", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/860c14ad1322866d3a7e8273566e64b34f340618", "committedDate": "2020-01-07T21:03:30Z", "message": "add kompile flag and refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5a8adcf02e07b69a231fea8620f0f0ddb9af633", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/e5a8adcf02e07b69a231fea8620f0f0ddb9af633", "committedDate": "2020-01-07T21:15:43Z", "message": "new string constant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7542a90063dbc49c910fd88ddb1f862e93b2165", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/f7542a90063dbc49c910fd88ddb1f862e93b2165", "committedDate": "2020-01-07T21:15:53Z", "message": "rename methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c24330eac9ca37a136f2f39d54fd63ca63c813f", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/1c24330eac9ca37a136f2f39d54fd63ca63c813f", "committedDate": "2020-01-07T21:20:53Z", "message": "factor out common code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "922ef74b8752cc5ef3df28d17885e63615af4c61", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/922ef74b8752cc5ef3df28d17885e63615af4c61", "committedDate": "2020-01-07T21:38:40Z", "message": "use bison parser in imp tutorial"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00967ea2e001622cd91b1f5d1e2d8d56f330ef55", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/00967ea2e001622cd91b1f5d1e2d8d56f330ef55", "committedDate": "2020-01-07T21:38:53Z", "message": "fix extra newline when kast pretty prints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7e5e739eb9a760c1c9c653c23ca2a82f3d761a2", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/d7e5e739eb9a760c1c9c653c23ca2a82f3d761a2", "committedDate": "2020-01-08T17:11:38Z", "message": "update output files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c435bfb1b36bc5ba0e706ed62b361a014a728f0", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/9c435bfb1b36bc5ba0e706ed62b361a014a728f0", "committedDate": "2020-01-08T17:14:47Z", "message": "add bison as dependency of K"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMDIzMDE0", "url": "https://github.com/kframework/k/pull/1003#pullrequestreview-340023014", "createdAt": "2020-01-08T17:26:42Z", "commit": {"oid": "9c435bfb1b36bc5ba0e706ed62b361a014a728f0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed0f0cad3084fcfd0e467c0df465269b118b1d60", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/ed0f0cad3084fcfd0e467c0df465269b118b1d60", "committedDate": "2020-01-08T19:25:51Z", "message": "fix path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65202dcf0ab561ee239ca77666449fbece13b89b", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/65202dcf0ab561ee239ca77666449fbece13b89b", "committedDate": "2020-01-08T19:27:23Z", "message": "fix PATH"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47b64736cecd6d13694ccf4c18e8c1c2ccaa492a", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/47b64736cecd6d13694ccf4c18e8c1c2ccaa492a", "committedDate": "2020-01-08T20:49:16Z", "message": "update more output files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a385bbec5ce47551681855b83724e72df0593cec", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/a385bbec5ce47551681855b83724e72df0593cec", "committedDate": "2020-01-08T22:18:06Z", "message": "more output files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "545faac2c4f432591e067ef2f732c1992b57a2ce", "author": {"user": {"login": "dwightguth", "name": "Dwight Guth"}}, "url": "https://github.com/kframework/k/commit/545faac2c4f432591e067ef2f732c1992b57a2ce", "committedDate": "2020-01-09T16:36:27Z", "message": "fix path"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNjk0MTIx", "url": "https://github.com/kframework/k/pull/1003#pullrequestreview-340694121", "createdAt": "2020-01-09T17:33:30Z", "commit": {"oid": "545faac2c4f432591e067ef2f732c1992b57a2ce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6024f170abddd089583b13f335cf2449573b305f", "author": {"user": {"login": "rv-jenkins", "name": null}}, "url": "https://github.com/kframework/k/commit/6024f170abddd089583b13f335cf2449573b305f", "committedDate": "2020-01-09T17:45:47Z", "message": "Merge branch 'master' into parser"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2484, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}