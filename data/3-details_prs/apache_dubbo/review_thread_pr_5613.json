{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwODM0OTQz", "number": 5613, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNjowNDo0OVrODXDzFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwMzozMToxNFrODXWxOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTA2MDcxOnYy", "diffSide": "RIGHT", "path": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryNotifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNjowNDo1MFrOFcK9vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNjowNDo1MFrOFcK9vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA4NDA5Mw==", "bodyText": "volatile", "url": "https://github.com/apache/dubbo/pull/5613#discussion_r365084093", "createdAt": "2020-01-10T06:04:50Z", "author": {"login": "guohao"}, "path": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryNotifier.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.registry;\n+\n+import org.apache.dubbo.common.extension.ExtensionLoader;\n+import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+public abstract class RegistryNotifier {\n+    private long lastExecuteTime;\n+    private long lastEventTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77911ead416a047bca736b68e1fd66677631b37c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTE4OTA3OnYy", "diffSide": "RIGHT", "path": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryNotifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNzozNTowOFrOFcMJUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNzozNTowOFrOFcMJUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEwMzQ0MA==", "bodyText": "Corner case:  Continuing notification from registry may cause the listener nerver  be notified.(lastEventTime is always greater than this.time).\nAt most one running listener.doNotifyTask task will  be better :P", "url": "https://github.com/apache/dubbo/pull/5613#discussion_r365103440", "createdAt": "2020-01-10T07:35:08Z", "author": {"login": "guohao"}, "path": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryNotifier.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.registry;\n+\n+import org.apache.dubbo.common.extension.ExtensionLoader;\n+import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+public abstract class RegistryNotifier {\n+    private long lastExecuteTime;\n+    private long lastEventTime;\n+\n+    private Object rawAddresses;\n+    private Registry registry;\n+\n+    private ScheduledExecutorService scheduler = ExtensionLoader.getExtensionLoader(ExecutorRepository.class)\n+            .getDefaultExtension().getRegistryNotificationExecutor();\n+\n+    public Registry getRegistry() {\n+        return registry;\n+    }\n+\n+    public RegistryNotifier(Registry registry) {\n+        this.registry = registry;\n+    }\n+\n+    public void notify(Object rawAddresses) {\n+        this.rawAddresses = rawAddresses;\n+        long notifyTime = System.currentTimeMillis();\n+        this.lastEventTime = notifyTime;\n+        scheduler.submit(new NotificationTask(this, notifyTime));\n+    }\n+\n+    protected abstract void doNotify(Object rawAddresses);\n+\n+    public class NotificationTask implements Runnable {\n+        private RegistryNotifier listener;\n+        private long time;\n+\n+        public NotificationTask(RegistryNotifier listener, long time) {\n+            this.listener = listener;\n+            this.time = time;\n+        }\n+\n+        @Override\n+        public void run() {\n+            int delayTime = getRegistry().getDelay();\n+            if (this.time < listener.lastEventTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77911ead416a047bca736b68e1fd66677631b37c"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTE5MDcyOnYy", "diffSide": "RIGHT", "path": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryNotifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNzozNjoyMFrOFcMKUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNzozNjoyMFrOFcMKUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEwMzY5Nw==", "bodyText": "Math.max(0,delayTime-(System.currentTimeMillis() - listener.lastExecuteTime))", "url": "https://github.com/apache/dubbo/pull/5613#discussion_r365103697", "createdAt": "2020-01-10T07:36:20Z", "author": {"login": "guohao"}, "path": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryNotifier.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.registry;\n+\n+import org.apache.dubbo.common.extension.ExtensionLoader;\n+import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+public abstract class RegistryNotifier {\n+    private long lastExecuteTime;\n+    private long lastEventTime;\n+\n+    private Object rawAddresses;\n+    private Registry registry;\n+\n+    private ScheduledExecutorService scheduler = ExtensionLoader.getExtensionLoader(ExecutorRepository.class)\n+            .getDefaultExtension().getRegistryNotificationExecutor();\n+\n+    public Registry getRegistry() {\n+        return registry;\n+    }\n+\n+    public RegistryNotifier(Registry registry) {\n+        this.registry = registry;\n+    }\n+\n+    public void notify(Object rawAddresses) {\n+        this.rawAddresses = rawAddresses;\n+        long notifyTime = System.currentTimeMillis();\n+        this.lastEventTime = notifyTime;\n+        scheduler.submit(new NotificationTask(this, notifyTime));\n+    }\n+\n+    protected abstract void doNotify(Object rawAddresses);\n+\n+    public class NotificationTask implements Runnable {\n+        private RegistryNotifier listener;\n+        private long time;\n+\n+        public NotificationTask(RegistryNotifier listener, long time) {\n+            this.listener = listener;\n+            this.time = time;\n+        }\n+\n+        @Override\n+        public void run() {\n+            int delayTime = getRegistry().getDelay();\n+            if (this.time < listener.lastEventTime) {\n+                return;\n+            } else if (delayTime <= 0) {\n+                listener.doNotify(listener.rawAddresses);\n+                listener.lastExecuteTime = System.currentTimeMillis();\n+            } else if (System.currentTimeMillis() - listener.lastExecuteTime < delayTime) {\n+                scheduler.schedule(new NotificationTask(this.listener, this.time), System.currentTimeMillis() - listener.lastExecuteTime, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77911ead416a047bca736b68e1fd66677631b37c"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTIwODY3OnYy", "diffSide": "RIGHT", "path": "dubbo-registry/dubbo-registry-etcd3/src/main/java/org/apache/dubbo/registry/etcd/EtcdRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNzo0NzoyMVrOFcMUsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNzo0NzoyMVrOFcMUsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEwNjM1Mg==", "bodyText": "unused", "url": "https://github.com/apache/dubbo/pull/5613#discussion_r365106352", "createdAt": "2020-01-10T07:47:21Z", "author": {"login": "guohao"}, "path": "dubbo-registry/dubbo-registry-etcd3/src/main/java/org/apache/dubbo/registry/etcd/EtcdRegistry.java", "diffHunk": "@@ -196,6 +196,7 @@ public void doSubscribe(URL url, NotifyListener listener) {\n                             CHECK_KEY, String.valueOf(false)), listener);\n                 }\n             } else {\n+                CountDownLatch latch = new CountDownLatch(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77911ead416a047bca736b68e1fd66677631b37c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODE2NTk5OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwMzoxOToyMVrOFcnsiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMTowMzozM1rOFm5rDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU1NDgyNQ==", "bodyText": "if localMap is empty, remoteMap will loss these entries, I'm not sure if this works as expected.", "url": "https://github.com/apache/dubbo/pull/5613#discussion_r365554825", "createdAt": "2020-01-12T03:19:21Z", "author": {"login": "LinShunKang"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java", "diffHunk": "@@ -50,71 +41,42 @@ private ClusterUtils() {\n     }\r\n \r\n     public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap) {\r\n-        Map<String, String> map = new HashMap<String, String>();\r\n         Map<String, String> remoteMap = remoteUrl.getParameters();\r\n \r\n-        if (remoteMap != null && remoteMap.size() > 0) {\r\n-            map.putAll(remoteMap);\r\n-\r\n-            // Remove configurations from provider, some items should be affected by provider.\r\n-            map.remove(THREAD_NAME_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREAD_NAME_KEY);\r\n-\r\n-            map.remove(THREADPOOL_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREADPOOL_KEY);\r\n-\r\n-            map.remove(CORE_THREADS_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + CORE_THREADS_KEY);\r\n-\r\n-            map.remove(THREADS_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREADS_KEY);\r\n-\r\n-            map.remove(QUEUES_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + QUEUES_KEY);\r\n-\r\n-            map.remove(ALIVE_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + ALIVE_KEY);\r\n-\r\n-            map.remove(Constants.TRANSPORTER_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + Constants.TRANSPORTER_KEY);\r\n+        if (remoteMap == null || remoteMap.size() <= 0) {\r\n+            return remoteUrl.addParameters(localMap);\r\n         }\r\n \r\n-        if (localMap != null && localMap.size() > 0) {\r\n-            Map<String, String> copyOfLocalMap = new HashMap<>(localMap);\r\n-\r\n-            if(map.containsKey(GROUP_KEY)){\r\n-                copyOfLocalMap.remove(GROUP_KEY);\r\n-            }\r\n-            if(map.containsKey(VERSION_KEY)){\r\n-                copyOfLocalMap.remove(VERSION_KEY);\r\n-            }\r\n+        // Remove configurations from provider, some items should not being affected by provider.\r\n+        remoteMap.remove(THREAD_NAME_KEY);\r\n+        remoteMap.remove(THREADPOOL_KEY);\r\n+        remoteMap.remove(CORE_THREADS_KEY);\r\n+        remoteMap.remove(THREADS_KEY);\r\n+        remoteMap.remove(QUEUES_KEY);\r\n+        remoteMap.remove(ALIVE_KEY);\r\n+        remoteMap.remove(TRANSPORTER_KEY);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77911ead416a047bca736b68e1fd66677631b37c"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzNTExOQ==", "bodyText": "Yes, that is what we want, these entries only work for the provider side.", "url": "https://github.com/apache/dubbo/pull/5613#discussion_r376335119", "createdAt": "2020-02-07T11:03:33Z", "author": {"login": "chickenlj"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java", "diffHunk": "@@ -50,71 +41,42 @@ private ClusterUtils() {\n     }\r\n \r\n     public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap) {\r\n-        Map<String, String> map = new HashMap<String, String>();\r\n         Map<String, String> remoteMap = remoteUrl.getParameters();\r\n \r\n-        if (remoteMap != null && remoteMap.size() > 0) {\r\n-            map.putAll(remoteMap);\r\n-\r\n-            // Remove configurations from provider, some items should be affected by provider.\r\n-            map.remove(THREAD_NAME_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREAD_NAME_KEY);\r\n-\r\n-            map.remove(THREADPOOL_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREADPOOL_KEY);\r\n-\r\n-            map.remove(CORE_THREADS_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + CORE_THREADS_KEY);\r\n-\r\n-            map.remove(THREADS_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREADS_KEY);\r\n-\r\n-            map.remove(QUEUES_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + QUEUES_KEY);\r\n-\r\n-            map.remove(ALIVE_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + ALIVE_KEY);\r\n-\r\n-            map.remove(Constants.TRANSPORTER_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + Constants.TRANSPORTER_KEY);\r\n+        if (remoteMap == null || remoteMap.size() <= 0) {\r\n+            return remoteUrl.addParameters(localMap);\r\n         }\r\n \r\n-        if (localMap != null && localMap.size() > 0) {\r\n-            Map<String, String> copyOfLocalMap = new HashMap<>(localMap);\r\n-\r\n-            if(map.containsKey(GROUP_KEY)){\r\n-                copyOfLocalMap.remove(GROUP_KEY);\r\n-            }\r\n-            if(map.containsKey(VERSION_KEY)){\r\n-                copyOfLocalMap.remove(VERSION_KEY);\r\n-            }\r\n+        // Remove configurations from provider, some items should not being affected by provider.\r\n+        remoteMap.remove(THREAD_NAME_KEY);\r\n+        remoteMap.remove(THREADPOOL_KEY);\r\n+        remoteMap.remove(CORE_THREADS_KEY);\r\n+        remoteMap.remove(THREADS_KEY);\r\n+        remoteMap.remove(QUEUES_KEY);\r\n+        remoteMap.remove(ALIVE_KEY);\r\n+        remoteMap.remove(TRANSPORTER_KEY);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU1NDgyNQ=="}, "originalCommit": {"oid": "77911ead416a047bca736b68e1fd66677631b37c"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODE2NjA5OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwMzoyMDoxOVrOFcnslQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwMzoyMDoxOVrOFcnslQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU1NDgzNw==", "bodyText": "Use MapUtils.isEmpty(remoteMap) is better ?", "url": "https://github.com/apache/dubbo/pull/5613#discussion_r365554837", "createdAt": "2020-01-12T03:20:19Z", "author": {"login": "LinShunKang"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java", "diffHunk": "@@ -50,71 +41,42 @@ private ClusterUtils() {\n     }\r\n \r\n     public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap) {\r\n-        Map<String, String> map = new HashMap<String, String>();\r\n         Map<String, String> remoteMap = remoteUrl.getParameters();\r\n \r\n-        if (remoteMap != null && remoteMap.size() > 0) {\r\n-            map.putAll(remoteMap);\r\n-\r\n-            // Remove configurations from provider, some items should be affected by provider.\r\n-            map.remove(THREAD_NAME_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREAD_NAME_KEY);\r\n-\r\n-            map.remove(THREADPOOL_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREADPOOL_KEY);\r\n-\r\n-            map.remove(CORE_THREADS_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + CORE_THREADS_KEY);\r\n-\r\n-            map.remove(THREADS_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREADS_KEY);\r\n-\r\n-            map.remove(QUEUES_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + QUEUES_KEY);\r\n-\r\n-            map.remove(ALIVE_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + ALIVE_KEY);\r\n-\r\n-            map.remove(Constants.TRANSPORTER_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + Constants.TRANSPORTER_KEY);\r\n+        if (remoteMap == null || remoteMap.size() <= 0) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77911ead416a047bca736b68e1fd66677631b37c"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODE2NjYyOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwMzoyMTo0MVrOFcnszg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwMzoyMTo0MVrOFcnszg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU1NDg5NA==", "bodyText": "Use StringUtils.isNotEmpty(remoteFilter) && StringUtils.isNotEmpty(localFilter) is better ?", "url": "https://github.com/apache/dubbo/pull/5613#discussion_r365554894", "createdAt": "2020-01-12T03:21:41Z", "author": {"login": "LinShunKang"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java", "diffHunk": "@@ -50,71 +41,42 @@ private ClusterUtils() {\n     }\r\n \r\n     public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap) {\r\n-        Map<String, String> map = new HashMap<String, String>();\r\n         Map<String, String> remoteMap = remoteUrl.getParameters();\r\n \r\n-        if (remoteMap != null && remoteMap.size() > 0) {\r\n-            map.putAll(remoteMap);\r\n-\r\n-            // Remove configurations from provider, some items should be affected by provider.\r\n-            map.remove(THREAD_NAME_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREAD_NAME_KEY);\r\n-\r\n-            map.remove(THREADPOOL_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREADPOOL_KEY);\r\n-\r\n-            map.remove(CORE_THREADS_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + CORE_THREADS_KEY);\r\n-\r\n-            map.remove(THREADS_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREADS_KEY);\r\n-\r\n-            map.remove(QUEUES_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + QUEUES_KEY);\r\n-\r\n-            map.remove(ALIVE_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + ALIVE_KEY);\r\n-\r\n-            map.remove(Constants.TRANSPORTER_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + Constants.TRANSPORTER_KEY);\r\n+        if (remoteMap == null || remoteMap.size() <= 0) {\r\n+            return remoteUrl.addParameters(localMap);\r\n         }\r\n \r\n-        if (localMap != null && localMap.size() > 0) {\r\n-            Map<String, String> copyOfLocalMap = new HashMap<>(localMap);\r\n-\r\n-            if(map.containsKey(GROUP_KEY)){\r\n-                copyOfLocalMap.remove(GROUP_KEY);\r\n-            }\r\n-            if(map.containsKey(VERSION_KEY)){\r\n-                copyOfLocalMap.remove(VERSION_KEY);\r\n-            }\r\n+        // Remove configurations from provider, some items should not being affected by provider.\r\n+        remoteMap.remove(THREAD_NAME_KEY);\r\n+        remoteMap.remove(THREADPOOL_KEY);\r\n+        remoteMap.remove(CORE_THREADS_KEY);\r\n+        remoteMap.remove(THREADS_KEY);\r\n+        remoteMap.remove(QUEUES_KEY);\r\n+        remoteMap.remove(ALIVE_KEY);\r\n+        remoteMap.remove(TRANSPORTER_KEY);\r\n \r\n-            copyOfLocalMap.remove(RELEASE_KEY);\r\n-            copyOfLocalMap.remove(DUBBO_VERSION_KEY);\r\n-            copyOfLocalMap.remove(METHODS_KEY);\r\n-            copyOfLocalMap.remove(TIMESTAMP_KEY);\r\n-            copyOfLocalMap.remove(TAG_KEY);\r\n-\r\n-            map.putAll(copyOfLocalMap);\r\n-\r\n-            map.put(REMOTE_APPLICATION_KEY, remoteMap.get(APPLICATION_KEY));\r\n+        if (localMap != null && localMap.size() > 0) {\r\n+            String remoteApplication = remoteMap.get(APPLICATION_KEY);\r\n+            remoteMap.putAll(localMap);\r\n+            remoteMap.put(REMOTE_APPLICATION_KEY, remoteApplication);\r\n \r\n             // Combine filters and listeners on Provider and Consumer\r\n             String remoteFilter = remoteMap.get(REFERENCE_FILTER_KEY);\r\n-            String localFilter = copyOfLocalMap.get(REFERENCE_FILTER_KEY);\r\n+            String localFilter = localMap.get(REFERENCE_FILTER_KEY);\r\n             if (remoteFilter != null && remoteFilter.length() > 0\r\n                     && localFilter != null && localFilter.length() > 0) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77911ead416a047bca736b68e1fd66677631b37c"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODE2ODkwOnYy", "diffSide": "RIGHT", "path": "dubbo-common/src/main/java/org/apache/dubbo/common/URL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwMzozMToxNFrOFcnt7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwMzozMToxNFrOFcnt7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU1NTE4MA==", "bodyText": "Create map with expect size would reduce memory, just like this:\nMap<String, String> srcParams = getParameters();\nMap<String, String> newMap = new HashMap<>((int)((srcParams.size() + parameters.size) / 0.75 + 1));\nnewMap.putAll(srcParams);\nnewMap.putAll(parameters);", "url": "https://github.com/apache/dubbo/pull/5613#discussion_r365555180", "createdAt": "2020-01-12T03:31:14Z", "author": {"login": "LinShunKang"}, "path": "dubbo-common/src/main/java/org/apache/dubbo/common/URL.java", "diffHunk": "@@ -1139,18 +1143,34 @@ public URL addParameters(Map<String, String> parameters) {\n             return this;\r\n         }\r\n \r\n-        Map<String, String> map = new HashMap<>(getParameters());\r\n-        map.putAll(parameters);\r\n-        return new URL(protocol, username, password, host, port, path, map);\r\n+        if (frozen) {\r\n+            Map<String, String> map = new HashMap<>(getParameters());\r\n+            map.putAll(parameters);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77911ead416a047bca736b68e1fd66677631b37c"}, "originalPosition": 353}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2096, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}