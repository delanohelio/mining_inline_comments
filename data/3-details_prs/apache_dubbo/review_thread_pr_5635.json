{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNDExNDg0", "number": 5635, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzoxNTo0NVrODYYFMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzozMzoxOVrODYYN0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODg2OTYxOnYy", "diffSide": "RIGHT", "path": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzoxNTo0NVrOFeM5yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjowNDowOFrOFeOzyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMzAwMA==", "bodyText": "I think it would be better to put ConsumerModel in the constructor,because it wouldn't change and will get better performance", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367213000", "createdAt": "2020-01-16T03:15:45Z", "author": {"login": "qinliujie"}, "path": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java", "diffHunk": "@@ -55,7 +57,12 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n             return invoker.equals(args[0]);\n         }\n         RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), args);\n-        rpcInvocation.setTargetServiceUniqueName(invoker.getUrl().getServiceKey());\n+        String serviceKey = invoker.getUrl().getServiceKey();\n+        if (serviceKey != null) {\n+            rpcInvocation.setTargetServiceUniqueName(serviceKey);\n+            ConsumerModel consumerModel = ApplicationModel.getConsumerModel(serviceKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c05550d233def81a22784bac5d5af21369b77d0"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NDIzNQ==", "bodyText": "done.", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367244235", "createdAt": "2020-01-16T06:04:08Z", "author": {"login": "beiwei30"}, "path": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java", "diffHunk": "@@ -55,7 +57,12 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n             return invoker.equals(args[0]);\n         }\n         RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), args);\n-        rpcInvocation.setTargetServiceUniqueName(invoker.getUrl().getServiceKey());\n+        String serviceKey = invoker.getUrl().getServiceKey();\n+        if (serviceKey != null) {\n+            rpcInvocation.setTargetServiceUniqueName(serviceKey);\n+            ConsumerModel consumerModel = ApplicationModel.getConsumerModel(serviceKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMzAwMA=="}, "originalCommit": {"oid": "8c05550d233def81a22784bac5d5af21369b77d0"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODg3MzUzOnYy", "diffSide": "RIGHT", "path": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzoxOTowMFrOFeM8Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoxMDo0MVrOFeO6eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMzU4Nw==", "bodyText": "I think you could get  consumerModel directly from invocation attributes", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367213587", "createdAt": "2020-01-16T03:19:00Z", "author": {"login": "qinliujie"}, "path": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java", "diffHunk": "@@ -144,7 +148,12 @@ public Result getAppResponse() {\n             // This should never happen;\n             logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n         }\n-        return new AppResponse();\n+\n+        ConsumerModel consumerModel = ApplicationModel.getConsumerModel(invocation.getTargetServiceUniqueName());\n+        String methodName = invocation.getMethodName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c05550d233def81a22784bac5d5af21369b77d0"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NTk0Ng==", "bodyText": "done.", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367245946", "createdAt": "2020-01-16T06:10:41Z", "author": {"login": "beiwei30"}, "path": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java", "diffHunk": "@@ -144,7 +148,12 @@ public Result getAppResponse() {\n             // This should never happen;\n             logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n         }\n-        return new AppResponse();\n+\n+        ConsumerModel consumerModel = ApplicationModel.getConsumerModel(invocation.getTargetServiceUniqueName());\n+        String methodName = invocation.getMethodName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMzU4Nw=="}, "originalCommit": {"oid": "8c05550d233def81a22784bac5d5af21369b77d0"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODg5MTcwOnYy", "diffSide": "RIGHT", "path": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzozMzoxOVrOFeNGrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTo1OToxNVrOFeOvvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxNjMwMg==", "bodyText": "why do you need a default value? just null is it ok?", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367216302", "createdAt": "2020-01-16T03:33:19Z", "author": {"login": "qinliujie"}, "path": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java", "diffHunk": "@@ -144,7 +148,12 @@ public Result getAppResponse() {\n             // This should never happen;\n             logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n         }\n-        return new AppResponse();\n+\n+        ConsumerModel consumerModel = ApplicationModel.getConsumerModel(invocation.getTargetServiceUniqueName());\n+        String methodName = invocation.getMethodName();\n+        String params = ReflectUtils.getDesc(invocation.getParameterTypes());\n+        MethodDescriptor method = consumerModel.getServiceModel().getMethod(methodName, params);\n+        return new AppResponse(ReflectUtils.defaultReturn(method.getReturnClass()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c05550d233def81a22784bac5d5af21369b77d0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0MzE5OA==", "bodyText": "when the return type is primitive type, it will cause class cast exception in proxy object.", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367243198", "createdAt": "2020-01-16T05:59:15Z", "author": {"login": "beiwei30"}, "path": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java", "diffHunk": "@@ -144,7 +148,12 @@ public Result getAppResponse() {\n             // This should never happen;\n             logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n         }\n-        return new AppResponse();\n+\n+        ConsumerModel consumerModel = ApplicationModel.getConsumerModel(invocation.getTargetServiceUniqueName());\n+        String methodName = invocation.getMethodName();\n+        String params = ReflectUtils.getDesc(invocation.getParameterTypes());\n+        MethodDescriptor method = consumerModel.getServiceModel().getMethod(methodName, params);\n+        return new AppResponse(ReflectUtils.defaultReturn(method.getReturnClass()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxNjMwMg=="}, "originalCommit": {"oid": "8c05550d233def81a22784bac5d5af21369b77d0"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2081, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}