{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNDgzMDMy", "number": 6844, "reviewThreads": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo0ODozOVrOF4owag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xNFQxNjoyNToxNlrOF-ab3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk0OTMyMzMwOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo0ODozOVrOJSt18g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo0ODozOVrOJSt18g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzYwNTIzNA==", "bodyText": "pls move this field to dubbo-dependencies module", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r623605234", "createdAt": "2021-04-30T04:48:39Z", "author": {"login": "AlbumenJ"}, "path": "dubbo-cluster/pom.xml", "diffHunk": "@@ -31,6 +31,11 @@\n         <skip_maven_deploy>false</skip_maven_deploy>\n     </properties>\n     <dependencies>\n+        <dependency>\n+            <groupId>org.roaringbitmap</groupId>\n+            <artifactId>RoaringBitmap</artifactId>\n+            <version>0.9.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578339260dc03b9bdf34ae7f80d2daa16f91ddb9"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk0OTMyNzMwOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo0OToxOFrOJSt3qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo0OToxOFrOJSt3qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzYwNTY3NQ==", "bodyText": "pls comment in English", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r623605675", "createdAt": "2021-04-30T04:49:18Z", "author": {"login": "AlbumenJ"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "diffHunk": "@@ -98,7 +167,30 @@ private void sort() {\n      * @return\n      */\n     public List<Invoker<T>> route(URL url, Invocation invocation) {\n-        List<Invoker<T>> finalInvokers = invokers;\n+\n+        AddrCache cache = this.cache.get();\n+        if (cache == null) {\n+            throw new RpcException(RpcException.ROUTER_CACHE_NOT_BUILD, \"Failed to invoke the method \"\n+                + invocation.getMethodName() + \" in the service \" + url.getServiceInterface()\n+                + \". address cache not build \"\n+                + \" on the consumer \" + NetUtils.getLocalHost()\n+                + \" using the dubbo version \" + Version.getVersion()\n+                + \".\");\n+        }\n+        BitList<Invoker<T>> finalBitListInvokers = new BitList<Invoker<T>>(invokers, false);\n+        for (StateRouter stateRouter : stateRouters) {\n+            if (stateRouter.isEnable()) {\n+                finalBitListInvokers = stateRouter.route(finalBitListInvokers, cache.getCache().get(stateRouter.getName()), url, invocation);\n+            }\n+        }\n+\n+        // FIXME \u770b\u4e00\u4e0b\u9ad8\u7248\u672c\u7684RoaringBitMap\uff0c\u662f\u5426\u6709\u5185\u7f6e\u51fd\u6570\u652f\u6301\u66f4\u9ad8\u6548\u7684\u904d\u5386", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578339260dc03b9bdf34ae7f80d2daa16f91ddb9"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk0OTMzMTgyOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1MDowMVrOJSt5qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1MDowMVrOJSt5qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzYwNjE4NQ==", "bodyText": "is this executor necessary?", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r623606185", "createdAt": "2021-04-30T04:50:01Z", "author": {"login": "AlbumenJ"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "diffHunk": "@@ -111,6 +203,96 @@ private void sort() {\n      */\n     public void setInvokers(List<Invoker<T>> invokers) {\n         this.invokers = (invokers == null ? Collections.emptyList() : invokers);\n+        stateRouters.forEach(router -> router.notify(this.invokers));\n         routers.forEach(router -> router.notify(this.invokers));\n+        loop(true);\n+    }\n+\n+    private void buildCache(boolean notify) {\n+        if (invokers == null || invokers.size() <= 0) {\n+            return;\n+        }\n+        AddrCache origin = cache.get();\n+        List copyInvokers = new ArrayList<>(this.invokers);\n+        CountDownLatch cdl = new CountDownLatch(stateRouters.size());\n+        AddrCache newCache = new AddrCache();\n+        newCache.setInvokers((List)invokers);\n+        final AtomicBoolean poolSuccess = new AtomicBoolean(true);\n+        for (StateRouter stateRouter : (List<StateRouter>)stateRouters) {\n+            if (stateRouter.isEnable()) {\n+                executorRepository.getPoolRouterExecutor().execute(new Runnable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578339260dc03b9bdf34ae7f80d2daa16f91ddb9"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk0OTMzNzA3OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1MDo1NFrOJSt79A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1MDo1NFrOJSt79A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzYwNjc3Mg==", "bodyText": "is this works? Just wrapped with RPCException and throw it would be better?", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r623606772", "createdAt": "2021-04-30T04:50:54Z", "author": {"login": "AlbumenJ"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "diffHunk": "@@ -111,6 +203,96 @@ private void sort() {\n      */\n     public void setInvokers(List<Invoker<T>> invokers) {\n         this.invokers = (invokers == null ? Collections.emptyList() : invokers);\n+        stateRouters.forEach(router -> router.notify(this.invokers));\n         routers.forEach(router -> router.notify(this.invokers));\n+        loop(true);\n+    }\n+\n+    private void buildCache(boolean notify) {\n+        if (invokers == null || invokers.size() <= 0) {\n+            return;\n+        }\n+        AddrCache origin = cache.get();\n+        List copyInvokers = new ArrayList<>(this.invokers);\n+        CountDownLatch cdl = new CountDownLatch(stateRouters.size());\n+        AddrCache newCache = new AddrCache();\n+        newCache.setInvokers((List)invokers);\n+        final AtomicBoolean poolSuccess = new AtomicBoolean(true);\n+        for (StateRouter stateRouter : (List<StateRouter>)stateRouters) {\n+            if (stateRouter.isEnable()) {\n+                executorRepository.getPoolRouterExecutor().execute(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        RouterCache routerCache = null;\n+                        try {\n+                            routerCache = poolRouter(stateRouter, origin, copyInvokers, notify);\n+                            //file cache\n+                            newCache.getCache().put(stateRouter.getName(), routerCache);\n+                        } catch (Throwable t) {\n+                            poolSuccess.set(false);\n+                            logger.error(\"Failed to pool router: \" + stateRouter.getUrl() + \", cause: \" + t.getMessage(), t);\n+                        } finally {\n+                            cdl.countDown();\n+                        }\n+                    }\n+                });\n+            }\n+        }\n+        try {\n+            cdl.await();\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578339260dc03b9bdf34ae7f80d2daa16f91ddb9"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk0OTMzODkxOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1MToxMlrOJSt8yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1MToxMlrOJSt8yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzYwNjk4NA==", "bodyText": "Please comment in English", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r623606984", "createdAt": "2021-04-30T04:51:12Z", "author": {"login": "AlbumenJ"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "diffHunk": "@@ -111,6 +203,96 @@ private void sort() {\n      */\n     public void setInvokers(List<Invoker<T>> invokers) {\n         this.invokers = (invokers == null ? Collections.emptyList() : invokers);\n+        stateRouters.forEach(router -> router.notify(this.invokers));\n         routers.forEach(router -> router.notify(this.invokers));\n+        loop(true);\n+    }\n+\n+    private void buildCache(boolean notify) {\n+        if (invokers == null || invokers.size() <= 0) {\n+            return;\n+        }\n+        AddrCache origin = cache.get();\n+        List copyInvokers = new ArrayList<>(this.invokers);\n+        CountDownLatch cdl = new CountDownLatch(stateRouters.size());\n+        AddrCache newCache = new AddrCache();\n+        newCache.setInvokers((List)invokers);\n+        final AtomicBoolean poolSuccess = new AtomicBoolean(true);\n+        for (StateRouter stateRouter : (List<StateRouter>)stateRouters) {\n+            if (stateRouter.isEnable()) {\n+                executorRepository.getPoolRouterExecutor().execute(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        RouterCache routerCache = null;\n+                        try {\n+                            routerCache = poolRouter(stateRouter, origin, copyInvokers, notify);\n+                            //file cache\n+                            newCache.getCache().put(stateRouter.getName(), routerCache);\n+                        } catch (Throwable t) {\n+                            poolSuccess.set(false);\n+                            logger.error(\"Failed to pool router: \" + stateRouter.getUrl() + \", cause: \" + t.getMessage(), t);\n+                        } finally {\n+                            cdl.countDown();\n+                        }\n+                    }\n+                });\n+            }\n+        }\n+        try {\n+            cdl.await();\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+        }\n+\n+        if (poolSuccess.get()) {\n+            this.cache.set(newCache);\n+        }\n+    }\n+\n+    private RouterCache poolRouter(StateRouter router, AddrCache orign, List<Invoker<T>> invokers, boolean notify) {\n+        String routerName = router.getName();\n+        RouterCache routerCache = null;\n+        if (isCacheMiss(orign, routerName) || router.shouldRePool() || notify) {\n+            return router.pool(invokers);\n+        } else {\n+            routerCache = orign.getCache().get(routerName);\n+        }\n+        if (routerCache == null) {\n+            return new RouterCache();\n+        }\n+        return routerCache;\n+    }\n+\n+    private boolean isCacheMiss(AddrCache cache, String routerName) {\n+        if (cache == null || cache.getCache() == null || cache.getInvokers() == null || cache.getCache().get(routerName) == null) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public void loop(boolean notify) {\n+        // 1\u3001\u591a\u4e2a\u670d\u52a1\u5e76\u884c\u6267\u884c buildCache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578339260dc03b9bdf34ae7f80d2daa16f91ddb9"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk0OTM0NjUyOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1MjoyMFrOJSuADA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1MjoyMFrOJSuADA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzYwNzgyMA==", "bodyText": "Try make this Runnable as a static class reference or lambda reference. Reduce inner class creation.", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r623607820", "createdAt": "2021-04-30T04:52:20Z", "author": {"login": "AlbumenJ"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "diffHunk": "@@ -111,6 +203,96 @@ private void sort() {\n      */\n     public void setInvokers(List<Invoker<T>> invokers) {\n         this.invokers = (invokers == null ? Collections.emptyList() : invokers);\n+        stateRouters.forEach(router -> router.notify(this.invokers));\n         routers.forEach(router -> router.notify(this.invokers));\n+        loop(true);\n+    }\n+\n+    private void buildCache(boolean notify) {\n+        if (invokers == null || invokers.size() <= 0) {\n+            return;\n+        }\n+        AddrCache origin = cache.get();\n+        List copyInvokers = new ArrayList<>(this.invokers);\n+        CountDownLatch cdl = new CountDownLatch(stateRouters.size());\n+        AddrCache newCache = new AddrCache();\n+        newCache.setInvokers((List)invokers);\n+        final AtomicBoolean poolSuccess = new AtomicBoolean(true);\n+        for (StateRouter stateRouter : (List<StateRouter>)stateRouters) {\n+            if (stateRouter.isEnable()) {\n+                executorRepository.getPoolRouterExecutor().execute(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        RouterCache routerCache = null;\n+                        try {\n+                            routerCache = poolRouter(stateRouter, origin, copyInvokers, notify);\n+                            //file cache\n+                            newCache.getCache().put(stateRouter.getName(), routerCache);\n+                        } catch (Throwable t) {\n+                            poolSuccess.set(false);\n+                            logger.error(\"Failed to pool router: \" + stateRouter.getUrl() + \", cause: \" + t.getMessage(), t);\n+                        } finally {\n+                            cdl.countDown();\n+                        }\n+                    }\n+                });\n+            }\n+        }\n+        try {\n+            cdl.await();\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+        }\n+\n+        if (poolSuccess.get()) {\n+            this.cache.set(newCache);\n+        }\n+    }\n+\n+    private RouterCache poolRouter(StateRouter router, AddrCache orign, List<Invoker<T>> invokers, boolean notify) {\n+        String routerName = router.getName();\n+        RouterCache routerCache = null;\n+        if (isCacheMiss(orign, routerName) || router.shouldRePool() || notify) {\n+            return router.pool(invokers);\n+        } else {\n+            routerCache = orign.getCache().get(routerName);\n+        }\n+        if (routerCache == null) {\n+            return new RouterCache();\n+        }\n+        return routerCache;\n+    }\n+\n+    private boolean isCacheMiss(AddrCache cache, String routerName) {\n+        if (cache == null || cache.getCache() == null || cache.getInvokers() == null || cache.getCache().get(routerName) == null) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public void loop(boolean notify) {\n+        // 1\u3001\u591a\u4e2a\u670d\u52a1\u5e76\u884c\u6267\u884c buildCache\n+        // 2\u3001notify true/false\n+        if (notify) {\n+            if (loopPermitNotify.tryAcquire()) {\n+                LOOP_THREAD_POOL.submit(new Runnable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578339260dc03b9bdf34ae7f80d2daa16f91ddb9"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk0OTM0OTMxOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/AddrCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1Mjo0N1rOJSuBQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1Mjo0N1rOJSuBQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzYwODEzMA==", "bodyText": "Please add Apache License header", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r623608130", "createdAt": "2021-04-30T04:52:47Z", "author": {"login": "AlbumenJ"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/AddrCache.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.apache.dubbo.rpc.cluster.router.state;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578339260dc03b9bdf34ae7f80d2daa16f91ddb9"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk0OTM0OTYwOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/BitList.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1Mjo1MFrOJSuBaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1Mjo1MFrOJSuBaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzYwODE2OQ==", "bodyText": "Please add Apache License header", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r623608169", "createdAt": "2021-04-30T04:52:50Z", "author": {"login": "AlbumenJ"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/BitList.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.apache.dubbo.rpc.cluster.router.state;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578339260dc03b9bdf34ae7f80d2daa16f91ddb9"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk0OTM1MTQ2OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/RouterCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1MzowOFrOJSuCNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1MzowOFrOJSuCNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzYwODM3NA==", "bodyText": "Please add Apache License header", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r623608374", "createdAt": "2021-04-30T04:53:08Z", "author": {"login": "AlbumenJ"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/RouterCache.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.apache.dubbo.rpc.cluster.router.state;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578339260dc03b9bdf34ae7f80d2daa16f91ddb9"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk0OTM1MTk1OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/StateRouterFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1MzoxNFrOJSuCbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1MzoxNFrOJSuCbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzYwODQyOQ==", "bodyText": "Please add Apache License header", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r623608429", "createdAt": "2021-04-30T04:53:14Z", "author": {"login": "AlbumenJ"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/StateRouterFactory.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.apache.dubbo.rpc.cluster.router.state;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578339260dc03b9bdf34ae7f80d2daa16f91ddb9"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk0OTM1NDQ4OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagDynamicStateRouter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1MzozN1rOJSuDiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1MzozN1rOJSuDiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzYwODcxMw==", "bodyText": "Please comment in English", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r623608713", "createdAt": "2021-04-30T04:53:37Z", "author": {"login": "AlbumenJ"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagDynamicStateRouter.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster.router.tag;\n+\n+import java.net.UnknownHostException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.common.config.configcenter.ConfigChangeType;\n+import org.apache.dubbo.common.config.configcenter.ConfigChangedEvent;\n+import org.apache.dubbo.common.config.configcenter.ConfigurationListener;\n+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;\n+import org.apache.dubbo.common.constants.CommonConstants;\n+import org.apache.dubbo.common.logger.Logger;\n+import org.apache.dubbo.common.logger.LoggerFactory;\n+import org.apache.dubbo.common.utils.CollectionUtils;\n+import org.apache.dubbo.common.utils.NetUtils;\n+import org.apache.dubbo.common.utils.StringUtils;\n+import org.apache.dubbo.rpc.Invocation;\n+import org.apache.dubbo.rpc.Invoker;\n+import org.apache.dubbo.rpc.RpcException;\n+import org.apache.dubbo.rpc.cluster.RouterChain;\n+import org.apache.dubbo.rpc.cluster.router.state.AbstractStateRouter;\n+import org.apache.dubbo.rpc.cluster.router.state.BitList;\n+import org.apache.dubbo.rpc.cluster.router.state.RouterCache;\n+import org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule;\n+import org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser;\n+\n+import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_VALUE;\n+import static org.apache.dubbo.common.constants.CommonConstants.TAG_KEY;\n+import static org.apache.dubbo.rpc.Constants.FORCE_USE_TAG;\n+\n+/**\n+ * TagRouter, \"application.tag-router\"\n+ */\n+public class TagDynamicStateRouter extends AbstractStateRouter implements ConfigurationListener {\n+    public static final String NAME = \"TAG_ROUTER\";\n+    private static final int TAG_ROUTER_DEFAULT_PRIORITY = 100;\n+    private static final Logger logger = LoggerFactory.getLogger(TagDynamicStateRouter.class);\n+    private static final String RULE_SUFFIX = \".tag-router\";\n+    private static final String NO_TAG = \"noTag\";\n+\n+    private TagRouterRule tagRouterRule;\n+    private String application;\n+\n+    public TagDynamicStateRouter(URL url, RouterChain chain) {\n+        super(url, chain);\n+        this.priority = TAG_ROUTER_DEFAULT_PRIORITY;\n+    }\n+\n+    @Override\n+    public synchronized void process(ConfigChangedEvent event) {\n+        setForce(true);\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"Notification of tag rule, change type is: \" + event.getChangeType() + \", raw rule is:\\n \" +\n+                    event.getContent());\n+        }\n+\n+        try {\n+            if (event.getChangeType().equals(ConfigChangeType.DELETED)) {\n+                this.tagRouterRule = null;\n+            } else {\n+                this.tagRouterRule = TagRuleParser.parse(event.getContent());\n+            }\n+        } catch (Exception e) {\n+            logger.error(\"Failed to parse the raw tag router rule and it will not take effect, please check if the \" +\n+                    \"rule matches with the template, the raw rule is:\\n \", e);\n+        }\n+    }\n+\n+    @Override\n+    public URL getUrl() {\n+        return url;\n+    }\n+\n+    @Override\n+    public <T> BitList<Invoker<T>> route(BitList<Invoker<T>> invokers, RouterCache cache, URL url,\n+        Invocation invocation) throws RpcException {\n+\n+\n+        final TagRouterRule tagRouterRuleCopy = (TagRouterRule)cache.getAddrMetadata();\n+\n+        String tag = StringUtils.isEmpty(invocation.getAttachment(TAG_KEY)) ? url.getParameter(TAG_KEY) :\n+            invocation.getAttachment(TAG_KEY);\n+\n+        ConcurrentHashMap<String, BitList<Invoker>> addrPool = cache.getAddrPool();\n+\n+        if (StringUtils.isEmpty(tag)) {\n+            return invokers.intersect((BitList)addrPool.get(NO_TAG), invokers.getUnmodifiableList());\n+        } else {\n+            BitList<Invoker> result = addrPool.get(tag);\n+\n+            if (CollectionUtils.isNotEmpty(result) || (tagRouterRuleCopy != null && tagRouterRuleCopy.isForce())\n+                || isForceUseTag(invocation)) {\n+                return invokers.intersect((BitList)result, invokers.getUnmodifiableList());\n+            } else {\n+                invocation.setAttachment(TAG_KEY, NO_TAG);\n+                return invokers;\n+            }\n+        }\n+    }\n+\n+    private boolean isForceUseTag(Invocation invocation) {\n+        return Boolean.valueOf(invocation.getAttachment(FORCE_USE_TAG, url.getParameter(FORCE_USE_TAG, \"false\")));\n+    }\n+\n+    @Override\n+    public boolean isRuntime() {\n+        return tagRouterRule != null && tagRouterRule.isRuntime();\n+    }\n+\n+    @Override\n+    public boolean isEnable() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isForce() {\n+        return tagRouterRule != null && tagRouterRule.isForce();\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"TagDynamic\";\n+    }\n+\n+    @Override\n+    public boolean shouldRePool() {\n+        return false;\n+    }\n+\n+    @Override\n+    public <T> RouterCache pool(List<Invoker<T>> invokers) {\n+\n+        RouterCache routerCache = new RouterCache();\n+        ConcurrentHashMap<String, BitList<Invoker<T>>> addrPool = new ConcurrentHashMap<>();\n+\n+        final TagRouterRule tagRouterRuleCopy = tagRouterRule;\n+\n+\n+        if (tagRouterRuleCopy == null || !tagRouterRuleCopy.isValid() || !tagRouterRuleCopy.isEnabled()) {\n+            return routerCache;\n+        }\n+\n+        List<String> tagNames = tagRouterRuleCopy.getTagNames();\n+        Map<String, List<String>> tagnameToAddresses = tagRouterRuleCopy.getTagnameToAddresses();\n+\n+        for (String tag : tagNames) {\n+            List<String> addresses = tagnameToAddresses.get(tag);\n+            BitList<Invoker<T>> list = new BitList<>(invokers, true);\n+            // \u5730\u5740\u4e3a\u7a7a\uff0c\u5219\u52a8\u6001\u8def\u7531\u4e0d\u751f\u6548\uff0c\u76f4\u63a5\u770b\u9759\u6001\u8def\u7531", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578339260dc03b9bdf34ae7f80d2daa16f91ddb9"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk0OTM1ODQ4OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagDynamicStateRouter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1NDoxOFrOJSuFTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNDo1NDoxOFrOJSuFTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzYwOTE2Nw==", "bodyText": "try specify inital size", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r623609167", "createdAt": "2021-04-30T04:54:18Z", "author": {"login": "AlbumenJ"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagDynamicStateRouter.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster.router.tag;\n+\n+import java.net.UnknownHostException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.common.config.configcenter.ConfigChangeType;\n+import org.apache.dubbo.common.config.configcenter.ConfigChangedEvent;\n+import org.apache.dubbo.common.config.configcenter.ConfigurationListener;\n+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;\n+import org.apache.dubbo.common.constants.CommonConstants;\n+import org.apache.dubbo.common.logger.Logger;\n+import org.apache.dubbo.common.logger.LoggerFactory;\n+import org.apache.dubbo.common.utils.CollectionUtils;\n+import org.apache.dubbo.common.utils.NetUtils;\n+import org.apache.dubbo.common.utils.StringUtils;\n+import org.apache.dubbo.rpc.Invocation;\n+import org.apache.dubbo.rpc.Invoker;\n+import org.apache.dubbo.rpc.RpcException;\n+import org.apache.dubbo.rpc.cluster.RouterChain;\n+import org.apache.dubbo.rpc.cluster.router.state.AbstractStateRouter;\n+import org.apache.dubbo.rpc.cluster.router.state.BitList;\n+import org.apache.dubbo.rpc.cluster.router.state.RouterCache;\n+import org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule;\n+import org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser;\n+\n+import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_VALUE;\n+import static org.apache.dubbo.common.constants.CommonConstants.TAG_KEY;\n+import static org.apache.dubbo.rpc.Constants.FORCE_USE_TAG;\n+\n+/**\n+ * TagRouter, \"application.tag-router\"\n+ */\n+public class TagDynamicStateRouter extends AbstractStateRouter implements ConfigurationListener {\n+    public static final String NAME = \"TAG_ROUTER\";\n+    private static final int TAG_ROUTER_DEFAULT_PRIORITY = 100;\n+    private static final Logger logger = LoggerFactory.getLogger(TagDynamicStateRouter.class);\n+    private static final String RULE_SUFFIX = \".tag-router\";\n+    private static final String NO_TAG = \"noTag\";\n+\n+    private TagRouterRule tagRouterRule;\n+    private String application;\n+\n+    public TagDynamicStateRouter(URL url, RouterChain chain) {\n+        super(url, chain);\n+        this.priority = TAG_ROUTER_DEFAULT_PRIORITY;\n+    }\n+\n+    @Override\n+    public synchronized void process(ConfigChangedEvent event) {\n+        setForce(true);\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"Notification of tag rule, change type is: \" + event.getChangeType() + \", raw rule is:\\n \" +\n+                    event.getContent());\n+        }\n+\n+        try {\n+            if (event.getChangeType().equals(ConfigChangeType.DELETED)) {\n+                this.tagRouterRule = null;\n+            } else {\n+                this.tagRouterRule = TagRuleParser.parse(event.getContent());\n+            }\n+        } catch (Exception e) {\n+            logger.error(\"Failed to parse the raw tag router rule and it will not take effect, please check if the \" +\n+                    \"rule matches with the template, the raw rule is:\\n \", e);\n+        }\n+    }\n+\n+    @Override\n+    public URL getUrl() {\n+        return url;\n+    }\n+\n+    @Override\n+    public <T> BitList<Invoker<T>> route(BitList<Invoker<T>> invokers, RouterCache cache, URL url,\n+        Invocation invocation) throws RpcException {\n+\n+\n+        final TagRouterRule tagRouterRuleCopy = (TagRouterRule)cache.getAddrMetadata();\n+\n+        String tag = StringUtils.isEmpty(invocation.getAttachment(TAG_KEY)) ? url.getParameter(TAG_KEY) :\n+            invocation.getAttachment(TAG_KEY);\n+\n+        ConcurrentHashMap<String, BitList<Invoker>> addrPool = cache.getAddrPool();\n+\n+        if (StringUtils.isEmpty(tag)) {\n+            return invokers.intersect((BitList)addrPool.get(NO_TAG), invokers.getUnmodifiableList());\n+        } else {\n+            BitList<Invoker> result = addrPool.get(tag);\n+\n+            if (CollectionUtils.isNotEmpty(result) || (tagRouterRuleCopy != null && tagRouterRuleCopy.isForce())\n+                || isForceUseTag(invocation)) {\n+                return invokers.intersect((BitList)result, invokers.getUnmodifiableList());\n+            } else {\n+                invocation.setAttachment(TAG_KEY, NO_TAG);\n+                return invokers;\n+            }\n+        }\n+    }\n+\n+    private boolean isForceUseTag(Invocation invocation) {\n+        return Boolean.valueOf(invocation.getAttachment(FORCE_USE_TAG, url.getParameter(FORCE_USE_TAG, \"false\")));\n+    }\n+\n+    @Override\n+    public boolean isRuntime() {\n+        return tagRouterRule != null && tagRouterRule.isRuntime();\n+    }\n+\n+    @Override\n+    public boolean isEnable() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isForce() {\n+        return tagRouterRule != null && tagRouterRule.isForce();\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"TagDynamic\";\n+    }\n+\n+    @Override\n+    public boolean shouldRePool() {\n+        return false;\n+    }\n+\n+    @Override\n+    public <T> RouterCache pool(List<Invoker<T>> invokers) {\n+\n+        RouterCache routerCache = new RouterCache();\n+        ConcurrentHashMap<String, BitList<Invoker<T>>> addrPool = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578339260dc03b9bdf34ae7f80d2daa16f91ddb9"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzIyMzY1OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMjo1MTo1NVrOJZeLyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMjo1MTo1NVrOJZeLyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY4ODcxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final ExecutorRepository executorRepository = ExtensionLoader.getExtensionLoader(ExecutorRepository.class).getDefaultExtension();\n          \n          \n            \n                private static final ExecutorRepository REPO = ExtensionLoader.getExtensionLoader(ExecutorRepository.class).getDefaultExtension();", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630688713", "createdAt": "2021-05-12T02:51:55Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "diffHunk": "@@ -45,11 +69,27 @@\n     // instance will never delete or recreate.\n     private List<Router> builtinRouters = Collections.emptyList();\n \n+    private List<StateRouter> builtinStateRouters = Collections.emptyList();\n+    private List<StateRouter> stateRouters = Collections.emptyList();\n+    private final ExecutorRepository executorRepository = ExtensionLoader.getExtensionLoader(ExecutorRepository.class).getDefaultExtension();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90f2923d82438ac0be0336442ca03628e2054b56"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzIyNDkxOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMjo1MjozMlrOJZeMdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMjo1MjozMlrOJZeMdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY4ODg4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final ExecutorService LOOP_THREAD_POOL;\n          \n          \n            \n                private final ExecutorService  loopPool;", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630688887", "createdAt": "2021-05-12T02:52:32Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "diffHunk": "@@ -45,11 +69,27 @@\n     // instance will never delete or recreate.\n     private List<Router> builtinRouters = Collections.emptyList();\n \n+    private List<StateRouter> builtinStateRouters = Collections.emptyList();\n+    private List<StateRouter> stateRouters = Collections.emptyList();\n+    private final ExecutorRepository executorRepository = ExtensionLoader.getExtensionLoader(ExecutorRepository.class).getDefaultExtension();\n+\n+    protected URL url;\n+\n+    protected AtomicReference<AddrCache> cache = new AtomicReference<>();\n+\n+    private Semaphore loopPermit = new Semaphore(1);\n+    private Semaphore loopPermitNotify = new Semaphore(1);\n+\n+    private final ExecutorService LOOP_THREAD_POOL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90f2923d82438ac0be0336442ca03628e2054b56"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzIyNTc0OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMjo1Mjo1N1rOJZeM9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMjo1Mjo1N1rOJZeM9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY4OTAxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Semaphore loopPermit = new Semaphore(1);\n          \n          \n            \n                private final Semaphore loopPermit = new Semaphore(1);", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630689012", "createdAt": "2021-05-12T02:52:57Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "diffHunk": "@@ -45,11 +69,27 @@\n     // instance will never delete or recreate.\n     private List<Router> builtinRouters = Collections.emptyList();\n \n+    private List<StateRouter> builtinStateRouters = Collections.emptyList();\n+    private List<StateRouter> stateRouters = Collections.emptyList();\n+    private final ExecutorRepository executorRepository = ExtensionLoader.getExtensionLoader(ExecutorRepository.class).getDefaultExtension();\n+\n+    protected URL url;\n+\n+    protected AtomicReference<AddrCache> cache = new AtomicReference<>();\n+\n+    private Semaphore loopPermit = new Semaphore(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90f2923d82438ac0be0336442ca03628e2054b56"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzIyNjk4OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMjo1MzozMVrOJZeNog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMjo1MzozMVrOJZeNog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY4OTE4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Semaphore loopPermitNotify = new Semaphore(1);\n          \n          \n            \n                private final Semaphore loopPermitNotify = new Semaphore(1);", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630689186", "createdAt": "2021-05-12T02:53:31Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "diffHunk": "@@ -45,11 +69,27 @@\n     // instance will never delete or recreate.\n     private List<Router> builtinRouters = Collections.emptyList();\n \n+    private List<StateRouter> builtinStateRouters = Collections.emptyList();\n+    private List<StateRouter> stateRouters = Collections.emptyList();\n+    private final ExecutorRepository executorRepository = ExtensionLoader.getExtensionLoader(ExecutorRepository.class).getDefaultExtension();\n+\n+    protected URL url;\n+\n+    protected AtomicReference<AddrCache> cache = new AtomicReference<>();\n+\n+    private Semaphore loopPermit = new Semaphore(1);\n+    private Semaphore loopPermitNotify = new Semaphore(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90f2923d82438ac0be0336442ca03628e2054b56"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzIzMDY2OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMjo1NToxMlrOJZePmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMjo1NToxMlrOJZePmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY4OTY4OA==", "bodyText": "unused method", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630689688", "createdAt": "2021-05-12T02:55:12Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "diffHunk": "@@ -70,6 +121,15 @@ public void initWithRouters(List<Router> builtinRouters) {\n         this.sort();\n     }\n \n+    public void initWithStateRouters(List<StateRouter> builtinRouters) {\n+        this.builtinStateRouters = builtinRouters;\n+        this.stateRouters = new ArrayList<>(builtinRouters);\n+    }\n+\n+    private void sortStateRouters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90f2923d82438ac0be0336442ca03628e2054b56"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzIzMTE1OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMjo1NTozMlrOJZeP4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMjo1NTozMlrOJZeP4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY4OTc2Mg==", "bodyText": "unused method", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630689762", "createdAt": "2021-05-12T02:55:32Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "diffHunk": "@@ -86,6 +146,13 @@ public void addRouters(List<Router> routers) {\n         this.routers = newRouters;\n     }\n \n+    public void addStateRouters(List<StateRouter> stateRouters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90f2923d82438ac0be0336442ca03628e2054b56"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzIzODg3OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMjo1OTowOVrOJZeUJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMjo1OTowOVrOJZeUJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5MDg1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    while (iter.hasNext()) {\n          \n          \n            \n                    for(Invoker<T> invoker: finalBitListInvokers)", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630690854", "createdAt": "2021-05-12T02:59:09Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "diffHunk": "@@ -95,13 +157,35 @@ private void sort() {\n     }\n \n     /**\n-     *\n      * @param url\n      * @param invocation\n      * @return\n      */\n     public List<Invoker<T>> route(URL url, Invocation invocation) {\n-        List<Invoker<T>> finalInvokers = invokers;\n+\n+        AddrCache cache = this.cache.get();\n+        if (cache == null) {\n+            throw new RpcException(RpcException.ROUTER_CACHE_NOT_BUILD, \"Failed to invoke the method \"\n+                + invocation.getMethodName() + \" in the service \" + url.getServiceInterface()\n+                + \". address cache not build \"\n+                + \" on the consumer \" + NetUtils.getLocalHost()\n+                + \" using the dubbo version \" + Version.getVersion()\n+                + \".\");\n+        }\n+        BitList<Invoker<T>> finalBitListInvokers = new BitList<Invoker<T>>(invokers, false);\n+        for (StateRouter stateRouter : stateRouters) {\n+            if (stateRouter.isEnable()) {\n+                finalBitListInvokers = stateRouter.route(finalBitListInvokers,\n+                    cache.getCache().get(stateRouter.getName()), url, invocation);\n+            }\n+        }\n+\n+        List<Invoker<T>> finalInvokers = new ArrayList<>(finalBitListInvokers.size());\n+        Iterator<Invoker<T>> iter = finalBitListInvokers.iterator();\n+        while (iter.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzIzOTM2OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMjo1OTozMVrOJZeUhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMjo1OTozMVrOJZeUhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5MDk0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<Invoker<T>> copyInvokers = new ArrayList<Invoker<T>>(this.invokers);\n          \n          \n            \n                    List<Invoker<T>> copyInvokers = new ArrayList<>(this.invokers);", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630690948", "createdAt": "2021-05-12T02:59:31Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "diffHunk": "@@ -114,7 +198,87 @@ private void sort() {\n      */\n     public void setInvokers(List<Invoker<T>> invokers) {\n         this.invokers = (invokers == null ? Collections.emptyList() : invokers);\n+        stateRouters.forEach(router -> router.notify(this.invokers));\n         routers.forEach(router -> router.notify(this.invokers));\n+        loop(true);\n+    }\n+\n+    private void buildCache(boolean notify) {\n+        if (invokers == null || invokers.size() <= 0) {\n+            return;\n+        }\n+        AddrCache origin = cache.get();\n+        List<Invoker<T>> copyInvokers = new ArrayList<Invoker<T>>(this.invokers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI0NDgwOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzowMjoxNlrOJZeXuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzowMjoxNlrOJZeXuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5MTc2OQ==", "bodyText": "unused var", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630691769", "createdAt": "2021-05-12T03:02:16Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "diffHunk": "@@ -114,7 +198,87 @@ private void sort() {\n      */\n     public void setInvokers(List<Invoker<T>> invokers) {\n         this.invokers = (invokers == null ? Collections.emptyList() : invokers);\n+        stateRouters.forEach(router -> router.notify(this.invokers));\n         routers.forEach(router -> router.notify(this.invokers));\n+        loop(true);\n+    }\n+\n+    private void buildCache(boolean notify) {\n+        if (invokers == null || invokers.size() <= 0) {\n+            return;\n+        }\n+        AddrCache origin = cache.get();\n+        List<Invoker<T>> copyInvokers = new ArrayList<Invoker<T>>(this.invokers);\n+        CountDownLatch cdl = new CountDownLatch(stateRouters.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI0Njk0OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzowMzoxM1rOJZeY3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzowMzoxM1rOJZeY3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5MjA2Mg==", "bodyText": "remove this var", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630692062", "createdAt": "2021-05-12T03:03:13Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "diffHunk": "@@ -114,7 +198,87 @@ private void sort() {\n      */\n     public void setInvokers(List<Invoker<T>> invokers) {\n         this.invokers = (invokers == null ? Collections.emptyList() : invokers);\n+        stateRouters.forEach(router -> router.notify(this.invokers));\n         routers.forEach(router -> router.notify(this.invokers));\n+        loop(true);\n+    }\n+\n+    private void buildCache(boolean notify) {\n+        if (invokers == null || invokers.size() <= 0) {\n+            return;\n+        }\n+        AddrCache origin = cache.get();\n+        List<Invoker<T>> copyInvokers = new ArrayList<Invoker<T>>(this.invokers);\n+        CountDownLatch cdl = new CountDownLatch(stateRouters.size());\n+        AddrCache newCache = new AddrCache();\n+        newCache.setInvokers((List)invokers);\n+        final AtomicBoolean poolSuccess = new AtomicBoolean(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI1MTY1OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzowNTozMlrOJZebbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzowNTozMlrOJZebbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5MjcxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        RouterCache routerCache;\n          \n          \n            \n                      \n          \n          \n            \n                        try{\n          \n          \n            \n                          for(;;)\n          \n          \n            \n                          this.cache.set()\n          \n          \n            \n                          }catch{\n          \n          \n            \n                          }", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630692718", "createdAt": "2021-05-12T03:05:32Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "diffHunk": "@@ -114,7 +198,87 @@ private void sort() {\n      */\n     public void setInvokers(List<Invoker<T>> invokers) {\n         this.invokers = (invokers == null ? Collections.emptyList() : invokers);\n+        stateRouters.forEach(router -> router.notify(this.invokers));\n         routers.forEach(router -> router.notify(this.invokers));\n+        loop(true);\n+    }\n+\n+    private void buildCache(boolean notify) {\n+        if (invokers == null || invokers.size() <= 0) {\n+            return;\n+        }\n+        AddrCache origin = cache.get();\n+        List<Invoker<T>> copyInvokers = new ArrayList<Invoker<T>>(this.invokers);\n+        CountDownLatch cdl = new CountDownLatch(stateRouters.size());\n+        AddrCache newCache = new AddrCache();\n+        newCache.setInvokers((List)invokers);\n+        final AtomicBoolean poolSuccess = new AtomicBoolean(true);\n+        for (StateRouter stateRouter : stateRouters) {\n+            RouterCache routerCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI1MjI4OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzowNTo1MlrOJZeb1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzowNTo1MlrOJZeb1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5MjgyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    RouterCache routerCache = null;\n          \n          \n            \n                    RouterCache routerCache ;", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630692823", "createdAt": "2021-05-12T03:05:52Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "diffHunk": "@@ -114,7 +198,87 @@ private void sort() {\n      */\n     public void setInvokers(List<Invoker<T>> invokers) {\n         this.invokers = (invokers == null ? Collections.emptyList() : invokers);\n+        stateRouters.forEach(router -> router.notify(this.invokers));\n         routers.forEach(router -> router.notify(this.invokers));\n+        loop(true);\n+    }\n+\n+    private void buildCache(boolean notify) {\n+        if (invokers == null || invokers.size() <= 0) {\n+            return;\n+        }\n+        AddrCache origin = cache.get();\n+        List<Invoker<T>> copyInvokers = new ArrayList<Invoker<T>>(this.invokers);\n+        CountDownLatch cdl = new CountDownLatch(stateRouters.size());\n+        AddrCache newCache = new AddrCache();\n+        newCache.setInvokers((List)invokers);\n+        final AtomicBoolean poolSuccess = new AtomicBoolean(true);\n+        for (StateRouter stateRouter : stateRouters) {\n+            RouterCache routerCache;\n+            try {\n+                routerCache = poolRouter(stateRouter, origin, copyInvokers, notify);\n+                //file cache\n+                newCache.getCache().put(stateRouter.getName(), routerCache);\n+            } catch (Throwable t) {\n+                poolSuccess.set(false);\n+                logger.error(\"Failed to pool router: \" + stateRouter.getUrl() + \", cause: \" + t.getMessage(), t);\n+            } finally {\n+                cdl.countDown();\n+            }\n+        }\n+\n+        if (poolSuccess.get()) {\n+            this.cache.set(newCache);\n+        }\n+    }\n+\n+    private RouterCache poolRouter(StateRouter router, AddrCache orign, List<Invoker<T>> invokers, boolean notify) {\n+        String routerName = router.getName();\n+        RouterCache routerCache = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI1MzE4OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzowNjoyOFrOJZecXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzowNjoyOFrOJZecXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5Mjk1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (cache == null || cache.getCache() == null || cache.getInvokers() == null || cache.getCache().get(routerName)\n          \n          \n            \n                          return cache == null || cache.getCache() == null || cache.getInvokers() == null || \n          \n          \n            \n                            cache.getCache().get(routerName) == null;", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630692958", "createdAt": "2021-05-12T03:06:28Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java", "diffHunk": "@@ -114,7 +198,87 @@ private void sort() {\n      */\n     public void setInvokers(List<Invoker<T>> invokers) {\n         this.invokers = (invokers == null ? Collections.emptyList() : invokers);\n+        stateRouters.forEach(router -> router.notify(this.invokers));\n         routers.forEach(router -> router.notify(this.invokers));\n+        loop(true);\n+    }\n+\n+    private void buildCache(boolean notify) {\n+        if (invokers == null || invokers.size() <= 0) {\n+            return;\n+        }\n+        AddrCache origin = cache.get();\n+        List<Invoker<T>> copyInvokers = new ArrayList<Invoker<T>>(this.invokers);\n+        CountDownLatch cdl = new CountDownLatch(stateRouters.size());\n+        AddrCache newCache = new AddrCache();\n+        newCache.setInvokers((List)invokers);\n+        final AtomicBoolean poolSuccess = new AtomicBoolean(true);\n+        for (StateRouter stateRouter : stateRouters) {\n+            RouterCache routerCache;\n+            try {\n+                routerCache = poolRouter(stateRouter, origin, copyInvokers, notify);\n+                //file cache\n+                newCache.getCache().put(stateRouter.getName(), routerCache);\n+            } catch (Throwable t) {\n+                poolSuccess.set(false);\n+                logger.error(\"Failed to pool router: \" + stateRouter.getUrl() + \", cause: \" + t.getMessage(), t);\n+            } finally {\n+                cdl.countDown();\n+            }\n+        }\n+\n+        if (poolSuccess.get()) {\n+            this.cache.set(newCache);\n+        }\n+    }\n+\n+    private RouterCache poolRouter(StateRouter router, AddrCache orign, List<Invoker<T>> invokers, boolean notify) {\n+        String routerName = router.getName();\n+        RouterCache routerCache = null;\n+        if (isCacheMiss(orign, routerName) || router.shouldRePool() || notify) {\n+            return router.pool(invokers);\n+        } else {\n+            routerCache = orign.getCache().get(routerName);\n+        }\n+        if (routerCache == null) {\n+            return new RouterCache();\n+        }\n+        return routerCache;\n+    }\n+\n+    private boolean isCacheMiss(AddrCache cache, String routerName) {\n+        if (cache == null || cache.getCache() == null || cache.getInvokers() == null || cache.getCache().get(routerName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI1NzY0OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/StateRouter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzowODozNFrOJZee5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzowODozNFrOJZee5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5MzYwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public interface StateRouter extends Comparable<StateRouter> {\n          \n          \n            \n            public interface StateRouter<T> extends Comparable<StateRouter<T>>", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630693605", "createdAt": "2021-05-12T03:08:34Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/StateRouter.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.dubbo.rpc.cluster.router.state;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.apache.dubbo.common.URL;\r\n+import org.apache.dubbo.rpc.Invocation;\r\n+import org.apache.dubbo.rpc.Invoker;\r\n+import org.apache.dubbo.rpc.RpcException;\r\n+import org.apache.dubbo.rpc.cluster.Directory;\r\n+\r\n+/**\r\n+ * Router. (SPI, Prototype, ThreadSafe)\r\n+ * <p>\r\n+ * <a href=\"http://en.wikipedia.org/wiki/Routing\">Routing</a>\r\n+ *\r\n+ * @see org.apache.dubbo.rpc.cluster.Cluster#join(Directory)\r\n+ * @see Directory#list(Invocation)\r\n+ */\r\n+public interface StateRouter extends Comparable<StateRouter> {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI1ODExOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/StateRouter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzowODo0OFrOJZefKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzowODo0OFrOJZefKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5MzY3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <T> BitList<Invoker<T>> route(BitList<Invoker<T>> invokers, RouterCache cache, URL url, Invocation invocation)\n          \n          \n            \n            BitList<Invoker<T>> route(BitList<Invoker<T>> invokers, RouterCache cache, URL url, Invocation invocation)", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630693675", "createdAt": "2021-05-12T03:08:48Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/StateRouter.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.dubbo.rpc.cluster.router.state;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.apache.dubbo.common.URL;\r\n+import org.apache.dubbo.rpc.Invocation;\r\n+import org.apache.dubbo.rpc.Invoker;\r\n+import org.apache.dubbo.rpc.RpcException;\r\n+import org.apache.dubbo.rpc.cluster.Directory;\r\n+\r\n+/**\r\n+ * Router. (SPI, Prototype, ThreadSafe)\r\n+ * <p>\r\n+ * <a href=\"http://en.wikipedia.org/wiki/Routing\">Routing</a>\r\n+ *\r\n+ * @see org.apache.dubbo.rpc.cluster.Cluster#join(Directory)\r\n+ * @see Directory#list(Invocation)\r\n+ */\r\n+public interface StateRouter extends Comparable<StateRouter> {\r\n+\r\n+    int DEFAULT_PRIORITY = Integer.MAX_VALUE;\r\n+\r\n+    /**\r\n+     * Get the router url.\r\n+     *\r\n+     * @return url\r\n+     */\r\n+    URL getUrl();\r\n+\r\n+    /**\r\n+     * Filter invokers with current routing rule and only return the invokers that comply with the rule.\r\n+     *\r\n+     * @param invokers   invoker list\r\n+     * @param url        refer url\r\n+     * @param invocation invocation\r\n+     * @return routed invokers\r\n+     * @throws RpcException\r\n+     */\r\n+    <T> BitList<Invoker<T>> route(BitList<Invoker<T>> invokers, RouterCache cache, URL url, Invocation invocation)\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI2MDA4OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/StateRouter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzowOTozMlrOJZegNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzowOTozMlrOJZegNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5Mzk0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <T> RouterCache pool(List<Invoker<T>> invokers);\n          \n          \n            \n                 RouterCache pool(List<Invoker<T>> invokers);", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630693941", "createdAt": "2021-05-12T03:09:32Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/StateRouter.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.dubbo.rpc.cluster.router.state;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.apache.dubbo.common.URL;\r\n+import org.apache.dubbo.rpc.Invocation;\r\n+import org.apache.dubbo.rpc.Invoker;\r\n+import org.apache.dubbo.rpc.RpcException;\r\n+import org.apache.dubbo.rpc.cluster.Directory;\r\n+\r\n+/**\r\n+ * Router. (SPI, Prototype, ThreadSafe)\r\n+ * <p>\r\n+ * <a href=\"http://en.wikipedia.org/wiki/Routing\">Routing</a>\r\n+ *\r\n+ * @see org.apache.dubbo.rpc.cluster.Cluster#join(Directory)\r\n+ * @see Directory#list(Invocation)\r\n+ */\r\n+public interface StateRouter extends Comparable<StateRouter> {\r\n+\r\n+    int DEFAULT_PRIORITY = Integer.MAX_VALUE;\r\n+\r\n+    /**\r\n+     * Get the router url.\r\n+     *\r\n+     * @return url\r\n+     */\r\n+    URL getUrl();\r\n+\r\n+    /**\r\n+     * Filter invokers with current routing rule and only return the invokers that comply with the rule.\r\n+     *\r\n+     * @param invokers   invoker list\r\n+     * @param url        refer url\r\n+     * @param invocation invocation\r\n+     * @return routed invokers\r\n+     * @throws RpcException\r\n+     */\r\n+    <T> BitList<Invoker<T>> route(BitList<Invoker<T>> invokers, RouterCache cache, URL url, Invocation invocation)\r\n+        throws\r\n+        RpcException;\r\n+\r\n+    default <T> void notify(List<Invoker<T>> invokers) {\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * To decide whether this router need to execute every time an RPC comes or should only execute when addresses or\r\n+     * rule change.\r\n+     *\r\n+     * @return true if the router need to execute every time.\r\n+     */\r\n+    boolean isRuntime();\r\n+\r\n+    boolean isEnable();\r\n+\r\n+    boolean isForce();\r\n+\r\n+    int getPriority();\r\n+\r\n+    @Override\r\n+    default int compareTo(StateRouter o) {\r\n+        if (o == null) {\r\n+            throw new IllegalArgumentException();\r\n+        }\r\n+        return Integer.compare(this.getPriority(), o.getPriority());\r\n+    }\r\n+\r\n+    String getName();\r\n+\r\n+    boolean shouldRePool();\r\n+\r\n+    <T> RouterCache pool(List<Invoker<T>> invokers);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI2MTQzOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/StateRouterFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoxMDoyMVrOJZehAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoxMDoyMVrOJZehAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5NDE0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                StateRouter getRouter(URL url, RouterChain chain);\n          \n          \n            \n                   <T> StateRouter<T> getRouter(URL url, RouterChain<T> chain);", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630694146", "createdAt": "2021-05-12T03:10:21Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/StateRouterFactory.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster.router.state;\n+\n+import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.common.extension.Adaptive;\n+import org.apache.dubbo.common.extension.SPI;\n+import org.apache.dubbo.rpc.cluster.RouterChain;\n+\n+@SPI\n+public interface StateRouterFactory {\n+    /**\n+     * Create router.\n+     * Since 2.7.0, most of the time, we will not use @Adaptive feature, so it's kept only for compatibility.\n+     *\n+     * @param url url\n+     * @return router instance\n+     */\n+    @Adaptive(\"protocol\")\n+    StateRouter getRouter(URL url, RouterChain chain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI2NDI1OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/RouterCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoxMTo0MlrOJZeiiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoxMTo0MlrOJZeiiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5NDUzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class RouterCache {\n          \n          \n            \n            RouterCache<T>", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630694539", "createdAt": "2021-05-12T03:11:42Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/RouterCache.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster.router.state;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.dubbo.rpc.Invoker;\n+\n+public class RouterCache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI2NzYxOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/RouterCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoxMzoxOVrOJZekWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoxMzoxOVrOJZekWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5NTAwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setAddrPool(\n          \n          \n            \n                   public void setAddrPool(ConcurrentHashMap<String, BitList<Invoker<T>>> addrPool) {", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630695003", "createdAt": "2021-05-12T03:13:19Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/RouterCache.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster.router.state;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.dubbo.rpc.Invoker;\n+\n+public class RouterCache {\n+    protected ConcurrentHashMap<String, BitList<Invoker>> addrPool = new ConcurrentHashMap<>();\n+    protected Object addrMetadata;\n+\n+    public ConcurrentHashMap<String, BitList<Invoker>> getAddrPool() {\n+        return addrPool;\n+    }\n+\n+    public void setAddrPool(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI3MDY4OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/RouterCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoxNDo0N1rOJZel9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoxNTowNlrOJZemSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5NTQxMw==", "bodyText": "Use a constant empty map instead of creating a new one", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630695413", "createdAt": "2021-05-12T03:14:47Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/RouterCache.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster.router.state;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.dubbo.rpc.Invoker;\n+\n+public class RouterCache {\n+    protected ConcurrentHashMap<String, BitList<Invoker>> addrPool = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5NTQ5Ng==", "bodyText": "ConcurrentHashMap -> ConcurrentMap", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630695496", "createdAt": "2021-05-12T03:15:06Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/RouterCache.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster.router.state;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.dubbo.rpc.Invoker;\n+\n+public class RouterCache {\n+    protected ConcurrentHashMap<String, BitList<Invoker>> addrPool = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5NTQxMw=="}, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI3MjQ3OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagDynamicStateRouter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoxNTo0N1rOJZenBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoxNTo0N1rOJZenBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5NTY4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    routerCache.setAddrPool((ConcurrentHashMap)addrPool);\n          \n          \n            \n                    routerCache.setAddrPool(addrPool);", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630695685", "createdAt": "2021-05-12T03:15:47Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagDynamicStateRouter.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster.router.tag;\n+\n+import java.net.UnknownHostException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.common.config.configcenter.ConfigChangeType;\n+import org.apache.dubbo.common.config.configcenter.ConfigChangedEvent;\n+import org.apache.dubbo.common.config.configcenter.ConfigurationListener;\n+import org.apache.dubbo.common.config.configcenter.DynamicConfiguration;\n+import org.apache.dubbo.common.constants.CommonConstants;\n+import org.apache.dubbo.common.logger.Logger;\n+import org.apache.dubbo.common.logger.LoggerFactory;\n+import org.apache.dubbo.common.utils.CollectionUtils;\n+import org.apache.dubbo.common.utils.NetUtils;\n+import org.apache.dubbo.common.utils.StringUtils;\n+import org.apache.dubbo.rpc.Invocation;\n+import org.apache.dubbo.rpc.Invoker;\n+import org.apache.dubbo.rpc.RpcException;\n+import org.apache.dubbo.rpc.cluster.RouterChain;\n+import org.apache.dubbo.rpc.cluster.router.state.AbstractStateRouter;\n+import org.apache.dubbo.rpc.cluster.router.state.BitList;\n+import org.apache.dubbo.rpc.cluster.router.state.RouterCache;\n+import org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule;\n+import org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser;\n+\n+import static org.apache.dubbo.common.constants.CommonConstants.ANYHOST_VALUE;\n+import static org.apache.dubbo.common.constants.CommonConstants.TAG_KEY;\n+import static org.apache.dubbo.rpc.Constants.FORCE_USE_TAG;\n+\n+/**\n+ * TagRouter, \"application.tag-router\"\n+ */\n+public class TagDynamicStateRouter extends AbstractStateRouter implements ConfigurationListener {\n+    public static final String NAME = \"TAG_ROUTER\";\n+    private static final int TAG_ROUTER_DEFAULT_PRIORITY = 100;\n+    private static final Logger logger = LoggerFactory.getLogger(TagDynamicStateRouter.class);\n+    private static final String RULE_SUFFIX = \".tag-router\";\n+    private static final String NO_TAG = \"noTag\";\n+\n+    private TagRouterRule tagRouterRule;\n+    private String application;\n+\n+    public TagDynamicStateRouter(URL url, RouterChain chain) {\n+        super(url, chain);\n+        this.priority = TAG_ROUTER_DEFAULT_PRIORITY;\n+    }\n+\n+    @Override\n+    public synchronized void process(ConfigChangedEvent event) {\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"Notification of tag rule, change type is: \" + event.getChangeType() + \", raw rule is:\\n \" +\n+                event.getContent());\n+        }\n+\n+        try {\n+            if (event.getChangeType().equals(ConfigChangeType.DELETED)) {\n+                this.tagRouterRule = null;\n+            } else {\n+                this.tagRouterRule = TagRuleParser.parse(event.getContent());\n+            }\n+        } catch (Exception e) {\n+            logger.error(\"Failed to parse the raw tag router rule and it will not take effect, please check if the \" +\n+                \"rule matches with the template, the raw rule is:\\n \", e);\n+        }\n+    }\n+\n+    @Override\n+    public URL getUrl() {\n+        return url;\n+    }\n+\n+    @Override\n+    public <T> BitList<Invoker<T>> route(BitList<Invoker<T>> invokers, RouterCache cache, URL url,\n+        Invocation invocation) throws RpcException {\n+\n+\n+        final TagRouterRule tagRouterRuleCopy = (TagRouterRule)cache.getAddrMetadata();\n+\n+        String tag = StringUtils.isEmpty(invocation.getAttachment(TAG_KEY)) ? url.getParameter(TAG_KEY) :\n+            invocation.getAttachment(TAG_KEY);\n+\n+        ConcurrentHashMap<String, BitList<Invoker>> addrPool = cache.getAddrPool();\n+\n+        if (StringUtils.isEmpty(tag)) {\n+            return invokers.intersect((BitList)addrPool.get(NO_TAG), invokers.getUnmodifiableList());\n+        } else {\n+            BitList<Invoker> result = addrPool.get(tag);\n+\n+            if (CollectionUtils.isNotEmpty(result) || (tagRouterRuleCopy != null && tagRouterRuleCopy.isForce())\n+                || isForceUseTag(invocation)) {\n+                return invokers.intersect((BitList)result, invokers.getUnmodifiableList());\n+            } else {\n+                invocation.setAttachment(TAG_KEY, NO_TAG);\n+                return invokers;\n+            }\n+        }\n+    }\n+\n+    private boolean isForceUseTag(Invocation invocation) {\n+        return Boolean.valueOf(invocation.getAttachment(FORCE_USE_TAG, url.getParameter(FORCE_USE_TAG, \"false\")));\n+    }\n+\n+    @Override\n+    public boolean isRuntime() {\n+        return tagRouterRule != null && tagRouterRule.isRuntime();\n+    }\n+\n+    @Override\n+    public boolean isEnable() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isForce() {\n+        return tagRouterRule != null && tagRouterRule.isForce();\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"TagDynamic\";\n+    }\n+\n+    @Override\n+    public boolean shouldRePool() {\n+        return false;\n+    }\n+\n+    @Override\n+    public <T> RouterCache pool(List<Invoker<T>> invokers) {\n+\n+        RouterCache routerCache = new RouterCache();\n+        ConcurrentHashMap<String, BitList<Invoker<T>>> addrPool = new ConcurrentHashMap<>();\n+\n+        final TagRouterRule tagRouterRuleCopy = tagRouterRule;\n+\n+\n+        if (tagRouterRuleCopy == null || !tagRouterRuleCopy.isValid() || !tagRouterRuleCopy.isEnabled()) {\n+            return routerCache;\n+        }\n+\n+        List<String> tagNames = tagRouterRuleCopy.getTagNames();\n+        Map<String, List<String>> tagnameToAddresses = tagRouterRuleCopy.getTagnameToAddresses();\n+\n+        for (String tag : tagNames) {\n+            List<String> addresses = tagnameToAddresses.get(tag);\n+            BitList<Invoker<T>> list = new BitList<>(invokers, true);\n+\n+            if (CollectionUtils.isEmpty(addresses)) {\n+                list.addAll(invokers);\n+            } else {\n+                for (int index = 0; index < invokers.size(); index++) {\n+                    Invoker<T> invoker = invokers.get(index);\n+                    if (addressMatches(invoker.getUrl(), addresses)) {\n+                        list.addIndex(index);\n+                    }\n+                }\n+            }\n+\n+            addrPool.put(tag, list);\n+        }\n+\n+        List<String> addresses = tagRouterRuleCopy.getAddresses();\n+        BitList<Invoker<T>> noTagList = new BitList<>(invokers, true);\n+\n+        for (int index = 0; index < invokers.size(); index++) {\n+            Invoker<T> invoker = invokers.get(index);\n+            if (addressNotMatches(invoker.getUrl(), addresses)) {\n+                noTagList.addIndex(index);\n+            }\n+        }\n+        addrPool.put(NO_TAG, noTagList);\n+        routerCache.setAddrPool((ConcurrentHashMap)addrPool);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI3NTQzOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagStaticStateRouter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoxNzowNFrOJZeolA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoxNzowNFrOJZeolA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5NjA4NA==", "bodyText": "unused field", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630696084", "createdAt": "2021-05-12T03:17:04Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagStaticStateRouter.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster.router.tag;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.common.logger.Logger;\n+import org.apache.dubbo.common.logger.LoggerFactory;\n+import org.apache.dubbo.common.utils.CollectionUtils;\n+import org.apache.dubbo.common.utils.StringUtils;\n+import org.apache.dubbo.rpc.Invocation;\n+import org.apache.dubbo.rpc.Invoker;\n+import org.apache.dubbo.rpc.RpcException;\n+import org.apache.dubbo.rpc.cluster.RouterChain;\n+import org.apache.dubbo.rpc.cluster.router.state.AbstractStateRouter;\n+import org.apache.dubbo.rpc.cluster.router.state.BitList;\n+import org.apache.dubbo.rpc.cluster.router.state.RouterCache;\n+import org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule;\n+import static org.apache.dubbo.common.constants.CommonConstants.TAG_KEY;\n+\n+/**\n+ * TagRouter, \"application.tag-router\"\n+ */\n+public class TagStaticStateRouter extends AbstractStateRouter {\n+    public static final String NAME = \"TAG_ROUTER\";\n+    private static final int TAG_ROUTER_DEFAULT_PRIORITY = 100;\n+    private static final Logger logger = LoggerFactory.getLogger(TagStaticStateRouter.class);\n+    private static final String RULE_SUFFIX = \".tag-router\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI3NTUzOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagStaticStateRouter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoxNzowOVrOJZeooA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoxNzowOVrOJZeooA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5NjA5Ng==", "bodyText": "unused field", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630696096", "createdAt": "2021-05-12T03:17:09Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagStaticStateRouter.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster.router.tag;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.common.logger.Logger;\n+import org.apache.dubbo.common.logger.LoggerFactory;\n+import org.apache.dubbo.common.utils.CollectionUtils;\n+import org.apache.dubbo.common.utils.StringUtils;\n+import org.apache.dubbo.rpc.Invocation;\n+import org.apache.dubbo.rpc.Invoker;\n+import org.apache.dubbo.rpc.RpcException;\n+import org.apache.dubbo.rpc.cluster.RouterChain;\n+import org.apache.dubbo.rpc.cluster.router.state.AbstractStateRouter;\n+import org.apache.dubbo.rpc.cluster.router.state.BitList;\n+import org.apache.dubbo.rpc.cluster.router.state.RouterCache;\n+import org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule;\n+import static org.apache.dubbo.common.constants.CommonConstants.TAG_KEY;\n+\n+/**\n+ * TagRouter, \"application.tag-router\"\n+ */\n+public class TagStaticStateRouter extends AbstractStateRouter {\n+    public static final String NAME = \"TAG_ROUTER\";\n+    private static final int TAG_ROUTER_DEFAULT_PRIORITY = 100;\n+    private static final Logger logger = LoggerFactory.getLogger(TagStaticStateRouter.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI3NTkyOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagStaticStateRouter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoxNzoyN1rOJZeo4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoxNzoyN1rOJZeo4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5NjE2MA==", "bodyText": "Fix what?", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630696160", "createdAt": "2021-05-12T03:17:27Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagStaticStateRouter.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster.router.tag;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.common.logger.Logger;\n+import org.apache.dubbo.common.logger.LoggerFactory;\n+import org.apache.dubbo.common.utils.CollectionUtils;\n+import org.apache.dubbo.common.utils.StringUtils;\n+import org.apache.dubbo.rpc.Invocation;\n+import org.apache.dubbo.rpc.Invoker;\n+import org.apache.dubbo.rpc.RpcException;\n+import org.apache.dubbo.rpc.cluster.RouterChain;\n+import org.apache.dubbo.rpc.cluster.router.state.AbstractStateRouter;\n+import org.apache.dubbo.rpc.cluster.router.state.BitList;\n+import org.apache.dubbo.rpc.cluster.router.state.RouterCache;\n+import org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule;\n+import static org.apache.dubbo.common.constants.CommonConstants.TAG_KEY;\n+\n+/**\n+ * TagRouter, \"application.tag-router\"\n+ */\n+public class TagStaticStateRouter extends AbstractStateRouter {\n+    public static final String NAME = \"TAG_ROUTER\";\n+    private static final int TAG_ROUTER_DEFAULT_PRIORITY = 100;\n+    private static final Logger logger = LoggerFactory.getLogger(TagStaticStateRouter.class);\n+    private static final String RULE_SUFFIX = \".tag-router\";\n+    private static final String NO_TAG = \"noTag\";\n+\n+    private TagRouterRule tagRouterRule;\n+\n+    public TagStaticStateRouter(URL url, RouterChain chain) {\n+        super(url, chain);\n+        this.priority = TAG_ROUTER_DEFAULT_PRIORITY;\n+    }\n+\n+    @Override\n+    public URL getUrl() {\n+        return url;\n+    }\n+\n+    @Override\n+    public <T> BitList<Invoker<T>> route(BitList<Invoker<T>> invokers, RouterCache routerCache, URL url, Invocation invocation)\n+        throws RpcException {\n+\n+        String tag = StringUtils.isEmpty(invocation.getAttachment(TAG_KEY)) ? url.getParameter(TAG_KEY) :\n+            invocation.getAttachment(TAG_KEY);\n+        if (StringUtils.isEmpty(tag)) {\n+            tag = NO_TAG;\n+        }\n+\n+        ConcurrentHashMap<String, BitList<Invoker>> pool = routerCache.getAddrPool();\n+        BitList res = pool.get(tag);\n+        if (res == null) {\n+            return invokers;\n+        }\n+        return invokers.intersect((BitList)res, invokers.getUnmodifiableList());\n+    }\n+\n+    @Override\n+    protected List<String> getTags(URL url, Invocation invocation) {\n+        List<String> tags = new ArrayList<>();\n+        String tag = StringUtils.isEmpty(invocation.getAttachment(TAG_KEY)) ? url.getParameter(TAG_KEY) :\n+            invocation.getAttachment(TAG_KEY);\n+        if (StringUtils.isEmpty(tag)) {\n+            tag = NO_TAG;\n+        }\n+        tags.add(tag);\n+        return tags;\n+    }\n+\n+    @Override\n+    public boolean isRuntime() {\n+        return tagRouterRule != null && tagRouterRule.isRuntime();\n+    }\n+\n+    @Override\n+    public boolean isEnable() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isForce() {\n+        // FIXME", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI3NjU0OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagStaticStateRouter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoxNzo0M1rOJZepQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoxNzo0M1rOJZepQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5NjI1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    routerCache.setAddrPool((ConcurrentHashMap)addrPool);\n          \n          \n            \n                    routerCache.setAddrPool(addrPool);", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630696258", "createdAt": "2021-05-12T03:17:43Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagStaticStateRouter.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster.router.tag;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.common.logger.Logger;\n+import org.apache.dubbo.common.logger.LoggerFactory;\n+import org.apache.dubbo.common.utils.CollectionUtils;\n+import org.apache.dubbo.common.utils.StringUtils;\n+import org.apache.dubbo.rpc.Invocation;\n+import org.apache.dubbo.rpc.Invoker;\n+import org.apache.dubbo.rpc.RpcException;\n+import org.apache.dubbo.rpc.cluster.RouterChain;\n+import org.apache.dubbo.rpc.cluster.router.state.AbstractStateRouter;\n+import org.apache.dubbo.rpc.cluster.router.state.BitList;\n+import org.apache.dubbo.rpc.cluster.router.state.RouterCache;\n+import org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule;\n+import static org.apache.dubbo.common.constants.CommonConstants.TAG_KEY;\n+\n+/**\n+ * TagRouter, \"application.tag-router\"\n+ */\n+public class TagStaticStateRouter extends AbstractStateRouter {\n+    public static final String NAME = \"TAG_ROUTER\";\n+    private static final int TAG_ROUTER_DEFAULT_PRIORITY = 100;\n+    private static final Logger logger = LoggerFactory.getLogger(TagStaticStateRouter.class);\n+    private static final String RULE_SUFFIX = \".tag-router\";\n+    private static final String NO_TAG = \"noTag\";\n+\n+    private TagRouterRule tagRouterRule;\n+\n+    public TagStaticStateRouter(URL url, RouterChain chain) {\n+        super(url, chain);\n+        this.priority = TAG_ROUTER_DEFAULT_PRIORITY;\n+    }\n+\n+    @Override\n+    public URL getUrl() {\n+        return url;\n+    }\n+\n+    @Override\n+    public <T> BitList<Invoker<T>> route(BitList<Invoker<T>> invokers, RouterCache routerCache, URL url, Invocation invocation)\n+        throws RpcException {\n+\n+        String tag = StringUtils.isEmpty(invocation.getAttachment(TAG_KEY)) ? url.getParameter(TAG_KEY) :\n+            invocation.getAttachment(TAG_KEY);\n+        if (StringUtils.isEmpty(tag)) {\n+            tag = NO_TAG;\n+        }\n+\n+        ConcurrentHashMap<String, BitList<Invoker>> pool = routerCache.getAddrPool();\n+        BitList res = pool.get(tag);\n+        if (res == null) {\n+            return invokers;\n+        }\n+        return invokers.intersect((BitList)res, invokers.getUnmodifiableList());\n+    }\n+\n+    @Override\n+    protected List<String> getTags(URL url, Invocation invocation) {\n+        List<String> tags = new ArrayList<>();\n+        String tag = StringUtils.isEmpty(invocation.getAttachment(TAG_KEY)) ? url.getParameter(TAG_KEY) :\n+            invocation.getAttachment(TAG_KEY);\n+        if (StringUtils.isEmpty(tag)) {\n+            tag = NO_TAG;\n+        }\n+        tags.add(tag);\n+        return tags;\n+    }\n+\n+    @Override\n+    public boolean isRuntime() {\n+        return tagRouterRule != null && tagRouterRule.isRuntime();\n+    }\n+\n+    @Override\n+    public boolean isEnable() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isForce() {\n+        // FIXME\n+        return false;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"TagStatic\";\n+    }\n+\n+    @Override\n+    public boolean shouldRePool() {\n+        return false;\n+    }\n+\n+    @Override\n+    public <T> RouterCache pool(List<Invoker<T>> invokers) {\n+\n+        RouterCache routerCache = new RouterCache();\n+        ConcurrentHashMap<String, BitList<Invoker<T>>> addrPool = new ConcurrentHashMap<>();\n+\n+        for (int index = 0; index < invokers.size(); index++) {\n+            Invoker<T> invoker = invokers.get(index);\n+            String tag = invoker.getUrl().getParameter(TAG_KEY);\n+            if (StringUtils.isEmpty(tag)) {\n+                BitList<Invoker<T>> noTagList = addrPool.putIfAbsent(NO_TAG, new BitList<>(invokers, true));\n+                if (noTagList == null) {\n+                    noTagList = addrPool.get(NO_TAG);\n+                }\n+                noTagList.addIndex(index);\n+            } else {\n+                BitList<Invoker<T>> list = addrPool.putIfAbsent(tag, new BitList<>(invokers, true));\n+                if (list == null) {\n+                    list = addrPool.get(tag);\n+                }\n+                list.addIndex(index);\n+            }\n+        }\n+\n+        routerCache.setAddrPool((ConcurrentHashMap)addrPool);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI4MTE5OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/AddrCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoyMDozMlrOJZesBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoyMDozMlrOJZesBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5Njk2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class AddrCache {\n          \n          \n            \n            public class AddrCache<T> {", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630696964", "createdAt": "2021-05-12T03:20:32Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/AddrCache.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster.router.state;\n+\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.dubbo.rpc.Invoker;\n+\n+public class AddrCache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI4MTYyOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/AddrCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoyMDo0OVrOJZesQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoyMDo0OVrOJZesQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5NzAyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected List<Invoker> invokers;\n          \n          \n            \n                   protected List<Invoker<T>> invokers;", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630697026", "createdAt": "2021-05-12T03:20:49Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/AddrCache.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster.router.state;\n+\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.dubbo.rpc.Invoker;\n+\n+public class AddrCache {\n+    protected List<Invoker> invokers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI4MjU2OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/AddrCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoyMTowOVrOJZesuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoyMTowOVrOJZesuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5NzE0NA==", "bodyText": "Use constant empty map", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630697144", "createdAt": "2021-05-12T03:21:09Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/AddrCache.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster.router.state;\n+\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.dubbo.rpc.Invoker;\n+\n+public class AddrCache {\n+    protected List<Invoker> invokers;\n+    protected ConcurrentHashMap<String, RouterCache> cache = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI4MzIzOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/AddrCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoyMToyOFrOJZetFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoyMToyOFrOJZetFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5NzIzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setCache(\n          \n          \n            \n                   public void setCache(ConcurrentHashMap<String, RouterCache> cache) {", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630697237", "createdAt": "2021-05-12T03:21:28Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/AddrCache.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster.router.state;\n+\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.dubbo.rpc.Invoker;\n+\n+public class AddrCache {\n+    protected List<Invoker> invokers;\n+    protected ConcurrentHashMap<String, RouterCache> cache = new ConcurrentHashMap<>();\n+\n+    public List<Invoker> getInvokers() {\n+        return invokers;\n+    }\n+\n+    public void setInvokers(List<Invoker> invokers) {\n+        this.invokers = invokers;\n+    }\n+\n+    public ConcurrentHashMap<String, RouterCache> getCache() {\n+        return cache;\n+    }\n+\n+    public void setCache(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI4NTU0OnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/AbstractStateRouter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoyMjozMlrOJZeuYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoyMjozMlrOJZeuYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5NzU2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return invokers == null || invokers.size() <= 0;\n          \n          \n            \n                    return invokers == null || invokers.isEmpty();", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630697569", "createdAt": "2021-05-12T03:22:32Z", "author": {"login": "guohao"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/state/AbstractStateRouter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster.router.state;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.common.extension.ExtensionLoader;\n+import org.apache.dubbo.rpc.Invocation;\n+import org.apache.dubbo.rpc.Invoker;\n+import org.apache.dubbo.rpc.RpcException;\n+import org.apache.dubbo.rpc.cluster.RouterChain;\n+import org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository;\n+\n+public abstract class AbstractStateRouter implements StateRouter {\n+    final protected RouterChain chain;\n+    protected int priority = DEFAULT_PRIORITY;\n+    protected boolean force = false;\n+    protected URL url;\n+    protected List<Invoker> invokers;\n+    protected AtomicReference<AddrCache> cache;\n+    protected GovernanceRuleRepository ruleRepository;\n+\n+    public AbstractStateRouter(URL url, RouterChain chain) {\n+        this.ruleRepository = ExtensionLoader.getExtensionLoader(GovernanceRuleRepository.class).getDefaultExtension();\n+        this.chain = chain;\n+        this.url = url;\n+    }\n+\n+    @Override\n+    public <T> void notify(List<Invoker<T>> invokers) {\n+        this.invokers = (List)invokers;\n+    }\n+\n+    @Override\n+    public URL getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(URL url) {\n+        this.url = url;\n+    }\n+\n+    @Override\n+    public boolean isRuntime() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isForce() {\n+        return force;\n+    }\n+\n+    public void setForce(boolean force) {\n+        this.force = force;\n+    }\n+\n+    @Override\n+    public int getPriority() {\n+        return priority;\n+    }\n+\n+    public void setPriority(int priority) {\n+        this.priority = priority;\n+    }\n+\n+    @Override\n+    public <T> BitList<Invoker<T>> route(BitList<Invoker<T>> invokers, RouterCache cache, URL url,\n+        Invocation invocation) throws RpcException {\n+\n+        List<String> tags = getTags(url, invocation);\n+\n+        if (tags == null) {\n+            return invokers;\n+        }\n+        for (String tag : tags) {\n+            BitList tagInvokers = cache.getAddrPool().get(tag);\n+            if (tagMatchFail(tagInvokers)) {\n+                continue;\n+            }\n+            return tagInvokers.intersect(invokers, invokers.getUnmodifiableList());\n+        }\n+\n+        return invokers;\n+    }\n+\n+    protected List<String> getTags(URL url, Invocation invocation) {\n+        return new ArrayList<String>();\n+    }\n+\n+    public <T> Boolean tagMatchFail(BitList<Invoker<T>> invokers) {\n+        return invokers == null || invokers.size() <= 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk5NzI4OTE4OnYy", "diffSide": "RIGHT", "path": "dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/manager/DefaultExecutorRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoyNDozNVrOJZewjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMlQwMzoyNDozNVrOJZewjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY5ODEyNA==", "bodyText": "unused", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r630698124", "createdAt": "2021-05-12T03:24:35Z", "author": {"login": "guohao"}, "path": "dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/manager/DefaultExecutorRepository.java", "diffHunk": "@@ -16,20 +16,24 @@\n  */\n package org.apache.dubbo.common.threadpool.manager;\n \n-import org.apache.dubbo.common.URL;\n-import org.apache.dubbo.common.extension.ExtensionLoader;\n-import org.apache.dubbo.common.logger.Logger;\n-import org.apache.dubbo.common.logger.LoggerFactory;\n-import org.apache.dubbo.common.threadpool.ThreadPool;\n-import org.apache.dubbo.common.utils.NamedThreadFactory;\n-\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6239270334178742fe512cb4738d6b1b3e27fc7"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwOTg5MTUwOnYy", "diffSide": "RIGHT", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagStaticStateRouterFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xNFQxNjoyNToxNlrOJbVuAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xNFQxNjoyNToxNlrOJbVuAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjY0NzE3MA==", "bodyText": "the NAME should be tag-static", "url": "https://github.com/apache/dubbo/pull/6844#discussion_r632647170", "createdAt": "2021-05-14T16:25:16Z", "author": {"login": "AlbumenJ"}, "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagStaticStateRouterFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster.router.tag;\n+\n+import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.common.extension.Activate;\n+import org.apache.dubbo.rpc.cluster.RouterChain;\n+import org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory;\n+import org.apache.dubbo.rpc.cluster.router.state.StateRouter;\n+\n+/**\n+ * Tag router factory\n+ */\n+@Activate(order = 100)\n+public class TagStaticStateRouterFactory extends CacheableStateRouterFactory {\n+\n+    public static final String NAME = \"tag-dynamic\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e4e0983d241aeec277f2ec4f29e404a501205d"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2038, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}