{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NTEyMzI5", "number": 5852, "title": "Encrypt passwords/secrets for prelease & production", "bodyText": "Encrypt passwords using ansible vault\nDrop from configuration.yml, bcrypted_salt, not used and will not be needed.\nAdd utility script 'create_secret' to make it a bit easier to create secrets\nSet password for the 'postgres' db user\n\n \nFunctional Changes\n\n[] New map or map update\n[] New Feature\n[] Feature update or enhancement\n[] Feature Removal\n[] Code Cleanup or refactor\n[] Configuration Change\n[] Problem fix:  \n[] Other:   \nTesting\n\n[x] Manual testing done\nFWIW ran ansible deployment against a local vagrant\n\n\n\n\nAdditional Review Notes\nThe changed passwords are likely to bork prerelease. I'm planning to create a new server to replace prerelease where we'll deploy from fresh. At that same time we can make any last 2.0 migration file changes.", "createdAt": "2020-01-19T09:03:11Z", "url": "https://github.com/triplea-game/triplea/pull/5852", "merged": true, "mergeCommit": {"oid": "309506d00e69ad7173975d884a6708fd5bafd8fa"}, "closed": true, "closedAt": "2020-01-25T03:06:18Z", "author": {"login": "DanVanAtta"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb70Hm3AH2gAyMzY0NTEyMzI5Ojc3NGYxZmE0Zjg5ZDA2N2EyYWNiZjc0YmMzYjk0NGMyMjA4ZGM3MDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7_kGvgFqTM0NTAzMDQ5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "774f1fa4f89d067a2acbf74bc3b944c2208dc703", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/774f1fa4f89d067a2acbf74bc3b944c2208dc703", "committedDate": "2020-01-19T08:59:50Z", "message": "Encrypt passwords/secrets for prelease & production\n\n- Encrypt passwords using ansible vault\n- Drop from configuration.yml, bcrypted_salt, not used and will not be needed.\n- Add utility script 'create_secret' to make it a bit easier to create secrets\n- Set password for the 'postgres' db user"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da782713ca5072c1739c421531588c9ab6a6bf17", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/da782713ca5072c1739c421531588c9ab6a6bf17", "committedDate": "2020-01-19T09:47:39Z", "message": "Shorten & clarify README documentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0OTkwMDIw", "url": "https://github.com/triplea-game/triplea/pull/5852#pullrequestreview-344990020", "createdAt": "2020-01-19T09:49:40Z", "commit": {"oid": "da782713ca5072c1739c421531588c9ab6a6bf17"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwOTo0OTo0MFrOFfODOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwOTo0OTo0MlrOFfODXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDM3Ng==", "bodyText": "Unordered list style", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280376", "createdAt": "2020-01-19T09:49:40Z", "author": {"login": "codeclimate"}, "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da782713ca5072c1739c421531588c9ab6a6bf17"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDM4MA==", "bodyText": "Unordered list style", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280380", "createdAt": "2020-01-19T09:49:40Z", "author": {"login": "codeclimate"}, "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where \n+variables are defined.\n+\n+### Role Defaults\n+\n+These variables will be in 'roles/[role_name]/defaults/main.yml'.\n+Roles should define a default value for all variables used exclusively\n+by that role.\n+\n+### Group vars (all.yml - shared variables)\n+\n+'groups_vars/all.yml' is a file that applies to all host groups.\n+Variables that are shared between multiple roles are defined here.\n+\n+### Group vars (environment/hostgroup specific)\n+\n+For variables that are both shared and environment specific, we will\n+define them in a group_vars file. For example: \"database_password\"\n+may be defined in \"groups_vars/production.yml\" to have one value\n+on production, and also defined in \"group_vars/vagrant.yml\" to \n+have another value when deploying to a local vagrant server.\n+\n+The inventory files should all have the same structure and\n+define hostgroups that line up with the \"group_var\" file names.\n+\n+\n+### Notes on variables\n+- do not use `vars` folder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da782713ca5072c1739c421531588c9ab6a6bf17"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDM4Mw==", "bodyText": "Unordered list style", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280383", "createdAt": "2020-01-19T09:49:40Z", "author": {"login": "codeclimate"}, "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where \n+variables are defined.\n+\n+### Role Defaults\n+\n+These variables will be in 'roles/[role_name]/defaults/main.yml'.\n+Roles should define a default value for all variables used exclusively\n+by that role.\n+\n+### Group vars (all.yml - shared variables)\n+\n+'groups_vars/all.yml' is a file that applies to all host groups.\n+Variables that are shared between multiple roles are defined here.\n+\n+### Group vars (environment/hostgroup specific)\n+\n+For variables that are both shared and environment specific, we will\n+define them in a group_vars file. For example: \"database_password\"\n+may be defined in \"groups_vars/production.yml\" to have one value\n+on production, and also defined in \"group_vars/vagrant.yml\" to \n+have another value when deploying to a local vagrant server.\n+\n+The inventory files should all have the same structure and\n+define hostgroups that line up with the \"group_var\" file names.\n+\n+\n+### Notes on variables\n+- do not use `vars` folder\n+- variable names should be lower_snake_case", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da782713ca5072c1739c421531588c9ab6a6bf17"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDM4Ng==", "bodyText": "Unordered list style", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280386", "createdAt": "2020-01-19T09:49:41Z", "author": {"login": "codeclimate"}, "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where \n+variables are defined.\n+\n+### Role Defaults\n+\n+These variables will be in 'roles/[role_name]/defaults/main.yml'.\n+Roles should define a default value for all variables used exclusively\n+by that role.\n+\n+### Group vars (all.yml - shared variables)\n+\n+'groups_vars/all.yml' is a file that applies to all host groups.\n+Variables that are shared between multiple roles are defined here.\n+\n+### Group vars (environment/hostgroup specific)\n+\n+For variables that are both shared and environment specific, we will\n+define them in a group_vars file. For example: \"database_password\"\n+may be defined in \"groups_vars/production.yml\" to have one value\n+on production, and also defined in \"group_vars/vagrant.yml\" to \n+have another value when deploying to a local vagrant server.\n+\n+The inventory files should all have the same structure and\n+define hostgroups that line up with the \"group_var\" file names.\n+\n+\n+### Notes on variables\n+- do not use `vars` folder\n+- variable names should be lower_snake_case\n+- do not use 'dashes' in variable names. Dashes are used to denote default values. A", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da782713ca5072c1739c421531588c9ab6a6bf17"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDM4OQ==", "bodyText": "Unordered list style", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280389", "createdAt": "2020-01-19T09:49:41Z", "author": {"login": "codeclimate"}, "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where \n+variables are defined.\n+\n+### Role Defaults\n+\n+These variables will be in 'roles/[role_name]/defaults/main.yml'.\n+Roles should define a default value for all variables used exclusively\n+by that role.\n+\n+### Group vars (all.yml - shared variables)\n+\n+'groups_vars/all.yml' is a file that applies to all host groups.\n+Variables that are shared between multiple roles are defined here.\n+\n+### Group vars (environment/hostgroup specific)\n+\n+For variables that are both shared and environment specific, we will\n+define them in a group_vars file. For example: \"database_password\"\n+may be defined in \"groups_vars/production.yml\" to have one value\n+on production, and also defined in \"group_vars/vagrant.yml\" to \n+have another value when deploying to a local vagrant server.\n+\n+The inventory files should all have the same structure and\n+define hostgroups that line up with the \"group_var\" file names.\n+\n+\n+### Notes on variables\n+- do not use `vars` folder\n+- variable names should be lower_snake_case\n+- do not use 'dashes' in variable names. Dashes are used to denote default values. A\n+  variable named \"my-value\" will likely result in a \"variable 'my' not found\"\n+- favor placing variables in defaults unless they are shared or vary by environment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da782713ca5072c1739c421531588c9ab6a6bf17"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDM5MQ==", "bodyText": "Trailing spaces", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280391", "createdAt": "2020-01-19T09:49:41Z", "author": {"login": "codeclimate"}, "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da782713ca5072c1739c421531588c9ab6a6bf17"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDM5Mw==", "bodyText": "Trailing spaces", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280393", "createdAt": "2020-01-19T09:49:41Z", "author": {"login": "codeclimate"}, "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da782713ca5072c1739c421531588c9ab6a6bf17"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDM5Nw==", "bodyText": "Trailing spaces", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280397", "createdAt": "2020-01-19T09:49:41Z", "author": {"login": "codeclimate"}, "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da782713ca5072c1739c421531588c9ab6a6bf17"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDM5OQ==", "bodyText": "Trailing spaces", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280399", "createdAt": "2020-01-19T09:49:41Z", "author": {"login": "codeclimate"}, "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where \n+variables are defined.\n+\n+### Role Defaults\n+\n+These variables will be in 'roles/[role_name]/defaults/main.yml'.\n+Roles should define a default value for all variables used exclusively\n+by that role.\n+\n+### Group vars (all.yml - shared variables)\n+\n+'groups_vars/all.yml' is a file that applies to all host groups.\n+Variables that are shared between multiple roles are defined here.\n+\n+### Group vars (environment/hostgroup specific)\n+\n+For variables that are both shared and environment specific, we will\n+define them in a group_vars file. For example: \"database_password\"\n+may be defined in \"groups_vars/production.yml\" to have one value\n+on production, and also defined in \"group_vars/vagrant.yml\" to ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da782713ca5072c1739c421531588c9ab6a6bf17"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDQwMg==", "bodyText": "Line length", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280402", "createdAt": "2020-01-19T09:49:41Z", "author": {"login": "codeclimate"}, "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where \n+variables are defined.\n+\n+### Role Defaults\n+\n+These variables will be in 'roles/[role_name]/defaults/main.yml'.\n+Roles should define a default value for all variables used exclusively\n+by that role.\n+\n+### Group vars (all.yml - shared variables)\n+\n+'groups_vars/all.yml' is a file that applies to all host groups.\n+Variables that are shared between multiple roles are defined here.\n+\n+### Group vars (environment/hostgroup specific)\n+\n+For variables that are both shared and environment specific, we will\n+define them in a group_vars file. For example: \"database_password\"\n+may be defined in \"groups_vars/production.yml\" to have one value\n+on production, and also defined in \"group_vars/vagrant.yml\" to \n+have another value when deploying to a local vagrant server.\n+\n+The inventory files should all have the same structure and\n+define hostgroups that line up with the \"group_var\" file names.\n+\n+\n+### Notes on variables\n+- do not use `vars` folder\n+- variable names should be lower_snake_case\n+- do not use 'dashes' in variable names. Dashes are used to denote default values. A", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da782713ca5072c1739c421531588c9ab6a6bf17"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDQwNQ==", "bodyText": "Headers should be surrounded by blank lines", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280405", "createdAt": "2020-01-19T09:49:41Z", "author": {"login": "codeclimate"}, "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where \n+variables are defined.\n+\n+### Role Defaults\n+\n+These variables will be in 'roles/[role_name]/defaults/main.yml'.\n+Roles should define a default value for all variables used exclusively\n+by that role.\n+\n+### Group vars (all.yml - shared variables)\n+\n+'groups_vars/all.yml' is a file that applies to all host groups.\n+Variables that are shared between multiple roles are defined here.\n+\n+### Group vars (environment/hostgroup specific)\n+\n+For variables that are both shared and environment specific, we will\n+define them in a group_vars file. For example: \"database_password\"\n+may be defined in \"groups_vars/production.yml\" to have one value\n+on production, and also defined in \"group_vars/vagrant.yml\" to \n+have another value when deploying to a local vagrant server.\n+\n+The inventory files should all have the same structure and\n+define hostgroups that line up with the \"group_var\" file names.\n+\n+\n+### Notes on variables", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da782713ca5072c1739c421531588c9ab6a6bf17"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDQwNg==", "bodyText": "Lists should be surrounded by blank lines", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280406", "createdAt": "2020-01-19T09:49:42Z", "author": {"login": "codeclimate"}, "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da782713ca5072c1739c421531588c9ab6a6bf17"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDQwOQ==", "bodyText": "Lists should be surrounded by blank lines", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280409", "createdAt": "2020-01-19T09:49:42Z", "author": {"login": "codeclimate"}, "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da782713ca5072c1739c421531588c9ab6a6bf17"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDQxMA==", "bodyText": "Lists should be surrounded by blank lines", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280410", "createdAt": "2020-01-19T09:49:42Z", "author": {"login": "codeclimate"}, "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called \n+'production' and we we can then define a 'group_vars/production.yml' file that \n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+\n+## Variables\n+\n+- Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where \n+variables are defined.\n+\n+### Role Defaults\n+\n+These variables will be in 'roles/[role_name]/defaults/main.yml'.\n+Roles should define a default value for all variables used exclusively\n+by that role.\n+\n+### Group vars (all.yml - shared variables)\n+\n+'groups_vars/all.yml' is a file that applies to all host groups.\n+Variables that are shared between multiple roles are defined here.\n+\n+### Group vars (environment/hostgroup specific)\n+\n+For variables that are both shared and environment specific, we will\n+define them in a group_vars file. For example: \"database_password\"\n+may be defined in \"groups_vars/production.yml\" to have one value\n+on production, and also defined in \"group_vars/vagrant.yml\" to \n+have another value when deploying to a local vagrant server.\n+\n+The inventory files should all have the same structure and\n+define hostgroups that line up with the \"group_var\" file names.\n+\n+\n+### Notes on variables\n+- do not use `vars` folder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da782713ca5072c1739c421531588c9ab6a6bf17"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDQxMw==", "bodyText": "Bare URL used", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280413", "createdAt": "2020-01-19T09:49:42Z", "author": {"login": "codeclimate"}, "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,57 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da782713ca5072c1739c421531588c9ab6a6bf17"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "762fdaa519ef96db0d09a8e1c9f8eff1e2390cc9", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/762fdaa519ef96db0d09a8e1c9f8eff1e2390cc9", "committedDate": "2020-01-19T09:53:22Z", "message": "Improve README style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0OTkwNDU0", "url": "https://github.com/triplea-game/triplea/pull/5852#pullrequestreview-344990454", "createdAt": "2020-01-19T09:56:53Z", "commit": {"oid": "762fdaa519ef96db0d09a8e1c9f8eff1e2390cc9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwOTo1Njo1M1rOFfOFdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwOTo1Njo1M1rOFfOFdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MDk1MA==", "bodyText": "Lists should be surrounded by blank lines", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368280950", "createdAt": "2020-01-19T09:56:53Z", "author": {"login": "codeclimate"}, "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,56 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called\n+'production' and we we can then define a 'group_vars/production.yml' file that\n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+## Variables\n+\n+* Ansible allows variables to be defined in many places with differing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "762fdaa519ef96db0d09a8e1c9f8eff1e2390cc9"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0OTkyNTk0", "url": "https://github.com/triplea-game/triplea/pull/5852#pullrequestreview-344992594", "createdAt": "2020-01-19T10:35:42Z", "commit": {"oid": "762fdaa519ef96db0d09a8e1c9f8eff1e2390cc9"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMDozNTo0MlrOFfOPVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMDo0NDo0NlrOFfORmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MzQ3Nw==", "bodyText": "Test?", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368283477", "createdAt": "2020-01-19T10:35:42Z", "author": {"login": "RoiEXLab"}, "path": "infrastructure/ansible/roles/http_server/defaults/main.yml", "diffHunk": "@@ -14,7 +14,6 @@ http_server_db_port: \"5432\"\n \n http_server_db_name: \"{{ lobby_db_name }}\"\n http_server_db_user: \"{{ lobby_db_user }}\"\n-http_server_db_password: \"{{ lobby_db_password }}\"\n \n-## TODO: encrypt all of the below variables\n-http_server_bcrypt_salt: $2a$10$IhIXWg4HkQRWrZqjj9kV0u\n+create_issues_github_api_token: test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "762fdaa519ef96db0d09a8e1c9f8eff1e2390cc9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4Mzk1Mw==", "bodyText": "Hmm, not sure if I like the pattern of relying on some specific files to exist.\nIn my opinion we should be able to pass a filename and/or fall back to a default value.", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368283953", "createdAt": "2020-01-19T10:42:38Z", "author": {"login": "RoiEXLab"}, "path": "infrastructure/create_secret", "diffHunk": "@@ -0,0 +1,42 @@\n+#!/bin/bash\n+\n+\n+function usage() {\n+  echo \"Usage: ./$0 [variable-name]\"\n+  echo \"  eg: ./$0 lobby_db_password\"\n+  echo \"\"\n+  echo \"This script will encode a secret value that can be embedded in ansible\"\n+  echo \"and decrypted when ansible runs given the vault password\"\n+  echo \"\"\n+  echo \"This script expects the secret value to be encrypted to be written\" \n+  echo \"to a file called 'secret'\"\n+  echo \"This script expects a second file to contain the ansible vault password\"\n+  echo \"named 'vault_password'\"\n+  exit 1\n+}\n+\n+variable_name=$1\n+\n+set -eu\n+\n+if [ ! -f \"secret\" ]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "762fdaa519ef96db0d09a8e1c9f8eff1e2390cc9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NDA1OQ==", "bodyText": "Maybe a stupid question, but what exactly is the vars folder, and why shouldn't it be used?", "url": "https://github.com/triplea-game/triplea/pull/5852#discussion_r368284059", "createdAt": "2020-01-19T10:44:46Z", "author": {"login": "RoiEXLab"}, "path": "infrastructure/README.md", "diffHunk": "@@ -1,26 +1,56 @@\n # Ansible Overview\n \n Deployment is done with [ansible](https://www.ansible.com/)\n-In short, ansible will run commands to assert state on a target machine.\n-Asserting state means, for example, that a certain system user should exist,\n-if not, ansible will create it. In this ansible is idempotent by design.\n-\n-Ansible is driven by the concept of a playbook. It ties an inventory\n-file, which contains a set of hosts defined by groups, to 'roles'. Roles\n-can be thought of as an applications. The roles are defined by the\n-folders in the 'roles' folder. Ansible roles have a standard file format\n-where variables are defined. In this project the two files of most\n-note are \"defaults/main.yml\", which defines all variables to be used\n-in a role, and \"tasks/main.yml\" which defines a series of tasks to execute.\n-\n-It's also notewory that 'group_vars' can be used to define environment\n-specific variables. Ansible has a precedence ordering for variables,\n-'group_vars' have high precedence, they override most other values,\n-'defaults' have lowest.\n-So you may see for example a default variable that is defined like \n-`bot_lobby_uri: \"{{ lobby_uri }}\"`\n-That essentially means there is no default value for the variable\n-and we expect the variable to be defined in group_vars.\n+\n+* Deployments are idempotent: https://shadow-soft.com/ansible-idempotency-configuration-drift/\n+\n+* Ansible consists of three main components:\n+  * roles: think of these as applications\n+  * inventory files: lists servers or hosts by group\n+  * playbooks: binds host groups to roles\n+\n+* Per environment configuration is done through hostgroups, defined in inventory\n+files. For example the production inventory file will have a hostgroup called\n+'production' and we we can then define a 'group_vars/production.yml' file that\n+has variable values that only apply to the 'production' hosts. These variable\n+values will 'override' any variable values defined in 'defaults'.\n+\n+## Variables\n+\n+* Ansible allows variables to be defined in many places with differing\n+levels of precendence. For simplicity,  in this project we constrain where\n+variables are defined.\n+\n+### Role Defaults\n+\n+These variables will be in 'roles/[role_name]/defaults/main.yml'.\n+Roles should define a default value for all variables used exclusively\n+by that role.\n+\n+### Group vars (all.yml - shared variables)\n+\n+'groups_vars/all.yml' is a file that applies to all host groups.\n+Variables that are shared between multiple roles are defined here.\n+\n+### Group vars (environment/hostgroup specific)\n+\n+For variables that are both shared and environment specific, we will\n+define them in a group_vars file. For example: \"database_password\"\n+may be defined in \"groups_vars/production.yml\" to have one value\n+on production, and also defined in \"group_vars/vagrant.yml\" to\n+have another value when deploying to a local vagrant server.\n+\n+The inventory files should all have the same structure and\n+define hostgroups that line up with the \"group_var\" file names.\n+\n+\n+### Notes on variables\n+\n+* do not use `vars` folder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "762fdaa519ef96db0d09a8e1c9f8eff1e2390cc9"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MDMwNDkx", "url": "https://github.com/triplea-game/triplea/pull/5852#pullrequestreview-345030491", "createdAt": "2020-01-19T22:19:55Z", "commit": {"oid": "762fdaa519ef96db0d09a8e1c9f8eff1e2390cc9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3756, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}