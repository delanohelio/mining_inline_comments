{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMjAyMDcz", "number": 6385, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo0ODowOFrOD5XdpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjowMTo0OFrOD5XvUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDc5ODQ1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/image/UnitImageFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo0ODowOFrOGQluew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzozNzo0M1rOGQ0X2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0ODUwNw==", "bodyText": "Can scaleFactor made final now?", "url": "https://github.com/triplea-game/triplea/pull/6385#discussion_r420048507", "createdAt": "2020-05-05T11:48:08Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/image/UnitImageFactory.java", "diffHunk": "@@ -55,30 +55,22 @@\n   private ResourceLoader resourceLoader;\n   private MapData mapData;\n \n-  public void setResourceLoader(\n-      final ResourceLoader loader,\n-      final double scaleFactor,\n-      final int initialUnitWidth,\n-      final int initialUnitHeight,\n-      final int initialUnitCounterOffsetWidth,\n-      final int initialUnitCounterOffsetHeight,\n-      final MapData mapData) {\n-    unitIconWidth = initialUnitWidth;\n-    unitIconHeight = initialUnitHeight;\n-    unitCounterOffsetWidth = initialUnitCounterOffsetWidth;\n-    unitCounterOffsetHeight = initialUnitCounterOffsetHeight;\n-    this.scaleFactor = scaleFactor;\n-    resourceLoader = loader;\n+  public UnitImageFactory(\n+      final ResourceLoader resourceLoader, final double unitScale, final MapData mapData) {\n+    unitIconWidth = mapData.getDefaultUnitWidth();\n+    unitIconHeight = mapData.getDefaultUnitHeight();\n+    unitCounterOffsetWidth = mapData.getDefaultUnitCounterOffsetWidth();\n+    unitCounterOffsetHeight = mapData.getDefaultUnitCounterOffsetHeight();\n+    this.scaleFactor = unitScale;\n+    this.resourceLoader = resourceLoader;\n     this.mapData = mapData;\n-    clearImageCache();\n   }\n \n   /** Set the unitScaling factor. */\n-  public void setScaleFactor(final double scaleFactor) {\n-    if (this.scaleFactor != scaleFactor) {\n-      this.scaleFactor = scaleFactor;\n-      clearImageCache();\n-    }\n+  public UnitImageFactory withScaleFactor(final double scaleFactor) {\n+    return this.scaleFactor == scaleFactor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da21d60eceea0029563baad07adeca6cd5880e1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4ODQ3Mw==", "bodyText": "Turns out yes, but we need to remove the excess constructors first. Also of interest, the class was using static state and re-setting it in constructor, that state can be made local and final as well once the constructors were removed.\ne6b2685", "url": "https://github.com/triplea-game/triplea/pull/6385#discussion_r420288473", "createdAt": "2020-05-05T17:37:43Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/image/UnitImageFactory.java", "diffHunk": "@@ -55,30 +55,22 @@\n   private ResourceLoader resourceLoader;\n   private MapData mapData;\n \n-  public void setResourceLoader(\n-      final ResourceLoader loader,\n-      final double scaleFactor,\n-      final int initialUnitWidth,\n-      final int initialUnitHeight,\n-      final int initialUnitCounterOffsetWidth,\n-      final int initialUnitCounterOffsetHeight,\n-      final MapData mapData) {\n-    unitIconWidth = initialUnitWidth;\n-    unitIconHeight = initialUnitHeight;\n-    unitCounterOffsetWidth = initialUnitCounterOffsetWidth;\n-    unitCounterOffsetHeight = initialUnitCounterOffsetHeight;\n-    this.scaleFactor = scaleFactor;\n-    resourceLoader = loader;\n+  public UnitImageFactory(\n+      final ResourceLoader resourceLoader, final double unitScale, final MapData mapData) {\n+    unitIconWidth = mapData.getDefaultUnitWidth();\n+    unitIconHeight = mapData.getDefaultUnitHeight();\n+    unitCounterOffsetWidth = mapData.getDefaultUnitCounterOffsetWidth();\n+    unitCounterOffsetHeight = mapData.getDefaultUnitCounterOffsetHeight();\n+    this.scaleFactor = unitScale;\n+    this.resourceLoader = resourceLoader;\n     this.mapData = mapData;\n-    clearImageCache();\n   }\n \n   /** Set the unitScaling factor. */\n-  public void setScaleFactor(final double scaleFactor) {\n-    if (this.scaleFactor != scaleFactor) {\n-      this.scaleFactor = scaleFactor;\n-      clearImageCache();\n-    }\n+  public UnitImageFactory withScaleFactor(final double scaleFactor) {\n+    return this.scaleFactor == scaleFactor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0ODUwNw=="}, "originalCommit": {"oid": "5da21d60eceea0029563baad07adeca6cd5880e1"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDg0MzcxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/image/UnitImageFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjowMTo0OFrOGQmKBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzo1MDoxOFrOGQ02Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1NTU1OA==", "bodyText": "Actually I'd go for Optional.ofNullable(images.computeIfAbsent(fullName, k -> {/* The lambda below*/})).\nHowever this change would no longer attempt to recompute an image if getTransformedImage(baseName, player, type) returned an empty optional, so maybe we need something like this instead:\nOptional.ofNullable(images.compute(fullName, (key, image) -> Optional.ofNullable(image).or(\n/* lambda below*/\n).orElse(null)));", "url": "https://github.com/triplea-game/triplea/pull/6385#discussion_r420055558", "createdAt": "2020-05-05T12:01:48Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/image/UnitImageFactory.java", "diffHunk": "@@ -120,26 +106,29 @@ public Image getImage(final UnitCategory unit) {\n       final UnitType type, final GamePlayer player, final boolean damaged, final boolean disabled) {\n     final String baseName = getBaseImageName(type, player, damaged, disabled);\n     final String fullName = baseName + player.getName();\n-    if (images.containsKey(fullName)) {\n-      return Optional.of(images.get(fullName));\n-    }\n-    final Optional<Image> image = getTransformedImage(baseName, player, type);\n-    if (image.isEmpty()) {\n-      return Optional.empty();\n-    }\n-    final Image baseImage = image.get();\n \n-    // We want to scale units according to the given scale factor.\n-    // We use smooth scaling since the images are cached to allow to take our time in doing the\n-    // scaling.\n-    // Image observer is null, since the image should have been guaranteed to be loaded.\n-    final int width = (int) (baseImage.getWidth(null) * scaleFactor);\n-    final int height = (int) (baseImage.getHeight(null) * scaleFactor);\n-    final Image scaledImage = baseImage.getScaledInstance(width, height, Image.SCALE_SMOOTH);\n-    // Ensure the scaling is completed.\n-    Util.ensureImageLoaded(scaledImage);\n-    images.put(fullName, scaledImage);\n-    return Optional.of(scaledImage);\n+    return Optional.ofNullable(images.get(fullName))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da21d60eceea0029563baad07adeca6cd5880e1"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI5NDcxMA==", "bodyText": "Extracting the computation function to another method helps (arguably the thing to do to avoid too much inline code), and computeIfAbsent does avoid the optional or.\nUpdated: 1fdf91d", "url": "https://github.com/triplea-game/triplea/pull/6385#discussion_r420294710", "createdAt": "2020-05-05T17:47:58Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/image/UnitImageFactory.java", "diffHunk": "@@ -120,26 +106,29 @@ public Image getImage(final UnitCategory unit) {\n       final UnitType type, final GamePlayer player, final boolean damaged, final boolean disabled) {\n     final String baseName = getBaseImageName(type, player, damaged, disabled);\n     final String fullName = baseName + player.getName();\n-    if (images.containsKey(fullName)) {\n-      return Optional.of(images.get(fullName));\n-    }\n-    final Optional<Image> image = getTransformedImage(baseName, player, type);\n-    if (image.isEmpty()) {\n-      return Optional.empty();\n-    }\n-    final Image baseImage = image.get();\n \n-    // We want to scale units according to the given scale factor.\n-    // We use smooth scaling since the images are cached to allow to take our time in doing the\n-    // scaling.\n-    // Image observer is null, since the image should have been guaranteed to be loaded.\n-    final int width = (int) (baseImage.getWidth(null) * scaleFactor);\n-    final int height = (int) (baseImage.getHeight(null) * scaleFactor);\n-    final Image scaledImage = baseImage.getScaledInstance(width, height, Image.SCALE_SMOOTH);\n-    // Ensure the scaling is completed.\n-    Util.ensureImageLoaded(scaledImage);\n-    images.put(fullName, scaledImage);\n-    return Optional.of(scaledImage);\n+    return Optional.ofNullable(images.get(fullName))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1NTU1OA=="}, "originalCommit": {"oid": "5da21d60eceea0029563baad07adeca6cd5880e1"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI5NjIwMw==", "bodyText": "Interestingly landed quickly into concurrent modification errors, reverted the update: cc3e024", "url": "https://github.com/triplea-game/triplea/pull/6385#discussion_r420296203", "createdAt": "2020-05-05T17:50:18Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/image/UnitImageFactory.java", "diffHunk": "@@ -120,26 +106,29 @@ public Image getImage(final UnitCategory unit) {\n       final UnitType type, final GamePlayer player, final boolean damaged, final boolean disabled) {\n     final String baseName = getBaseImageName(type, player, damaged, disabled);\n     final String fullName = baseName + player.getName();\n-    if (images.containsKey(fullName)) {\n-      return Optional.of(images.get(fullName));\n-    }\n-    final Optional<Image> image = getTransformedImage(baseName, player, type);\n-    if (image.isEmpty()) {\n-      return Optional.empty();\n-    }\n-    final Image baseImage = image.get();\n \n-    // We want to scale units according to the given scale factor.\n-    // We use smooth scaling since the images are cached to allow to take our time in doing the\n-    // scaling.\n-    // Image observer is null, since the image should have been guaranteed to be loaded.\n-    final int width = (int) (baseImage.getWidth(null) * scaleFactor);\n-    final int height = (int) (baseImage.getHeight(null) * scaleFactor);\n-    final Image scaledImage = baseImage.getScaledInstance(width, height, Image.SCALE_SMOOTH);\n-    // Ensure the scaling is completed.\n-    Util.ensureImageLoaded(scaledImage);\n-    images.put(fullName, scaledImage);\n-    return Optional.of(scaledImage);\n+    return Optional.ofNullable(images.get(fullName))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1NTU1OA=="}, "originalCommit": {"oid": "5da21d60eceea0029563baad07adeca6cd5880e1"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2336, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}