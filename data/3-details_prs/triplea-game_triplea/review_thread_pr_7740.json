{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNTA4Nzc1", "number": 7740, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNDozMTozNFrOEmXX4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMjo1OTozMFrOEnSfdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjY0MjkwOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/odds/calculator/BattleCalculator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNDozMTozNFrOHWV-hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMjo1NzowOVrOHXzQkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5MDc5MA==", "bodyText": "I have this code duplicated several times.  If you have any suggestions on how to shrink it, I'd love to know.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493190790", "createdAt": "2020-09-23T04:31:34Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/odds/calculator/BattleCalculator.java", "diffHunk": "@@ -103,11 +103,25 @@ public AggregateResults calculate(\n         final MustFightBattle battle =\n             new MustFightBattle(location2, attacker2, gameData, battleTracker);\n         battle.setHeadless(true);\n+        if (amphibious) {\n+          attackingUnits.forEach(\n+              unit -> {\n+                unit.getProperty(Unit.UNLOADED_AMPHIBIOUS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6929f876be901378eac37f44994a0c6e13b031bf"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4MTUyNw==", "bodyText": "I suspect attackingUnits would need to become a datatype. In this case you could put this logic behind a method. I don't think I'd advise to do that just yet, the amount of data copying could actually become significant. BattleCalculator is regrettably a giant mess AND performance sensitive, a horrible combination and place to be..", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r494681527", "createdAt": "2020-09-25T00:28:47Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/odds/calculator/BattleCalculator.java", "diffHunk": "@@ -103,11 +103,25 @@ public AggregateResults calculate(\n         final MustFightBattle battle =\n             new MustFightBattle(location2, attacker2, gameData, battleTracker);\n         battle.setHeadless(true);\n+        if (amphibious) {\n+          attackingUnits.forEach(\n+              unit -> {\n+                unit.getProperty(Unit.UNLOADED_AMPHIBIOUS)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5MDc5MA=="}, "originalCommit": {"oid": "6929f876be901378eac37f44994a0c6e13b031bf"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDcxOTEyMQ==", "bodyText": "Another thought, the API of the 'setProperty' is wonky with the exception type. If there were type safe overloads of the method without a throws, then the repetition would not be much of a problem at all.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r494719121", "createdAt": "2020-09-25T02:57:09Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/odds/calculator/BattleCalculator.java", "diffHunk": "@@ -103,11 +103,25 @@ public AggregateResults calculate(\n         final MustFightBattle battle =\n             new MustFightBattle(location2, attacker2, gameData, battleTracker);\n         battle.setHeadless(true);\n+        if (amphibious) {\n+          attackingUnits.forEach(\n+              unit -> {\n+                unit.getProperty(Unit.UNLOADED_AMPHIBIOUS)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5MDc5MA=="}, "originalCommit": {"oid": "6929f876be901378eac37f44994a0c6e13b031bf"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjY4ODI0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/display/IDisplay.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNDo1ODowM1rOHWWYeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo1MzoyMlrOHWykSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5NzQzNA==", "bodyText": "Are game clients getting all of the battle parameters from their local state? Is it this method that feeds the parameters to the remote clients?\nLooking at this param list, it looks like this is what is used for calculating supports. The supports are used when calculating order of loss.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493197434", "createdAt": "2020-09-23T04:58:03Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/display/IDisplay.java", "diffHunk": "@@ -54,6 +55,8 @@ void reportMessageToPlayers(\n    * @param attacker - PlayerId of attacker\n    * @param defender - PlayerId of defender\n    */\n+  @RemoveOnNextMajorRelease(\n+      \"Remove isAmphibious, amphibiousLandAttackers, dependentUnits, and battleTitle\")\n   @RemoteActionCode(12)\n   void showBattle(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6929f876be901378eac37f44994a0c6e13b031bf"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1OTIxMA==", "bodyText": "This is only for showing the battle display.  It actually makes a copy of all of these parameters (see BattlePanel#showBatle).\nIt looks like the actual battle takes place on the client that is attacking.  The other clients have the battle display and this is initially populated with the data from the attacking client and then updated through calls from the attacking client.\nThis method looks like it could use the BattleState instead of the individual items.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493659210", "createdAt": "2020-09-23T14:53:22Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/engine/display/IDisplay.java", "diffHunk": "@@ -54,6 +55,8 @@ void reportMessageToPlayers(\n    * @param attacker - PlayerId of attacker\n    * @param defender - PlayerId of defender\n    */\n+  @RemoveOnNextMajorRelease(\n+      \"Remove isAmphibious, amphibiousLandAttackers, dependentUnits, and battleTitle\")\n   @RemoteActionCode(12)\n   void showBattle(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5NzQzNA=="}, "originalCommit": {"oid": "6929f876be901378eac37f44994a0c6e13b031bf"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjY5NjUxOnYy", "diffSide": "LEFT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/DiceRoll.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNTowMjo0MVrOHWWdSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMToxNzoyOFrOHXBUHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5ODY2Ng==", "bodyText": "Have you tested if marines are being given an amphib assault bonus on standard land battles? I'd double check that looking at this update. Have you run across where 'getWasAmphibious' is set to true (could you point me there)?", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493198666", "createdAt": "2020-09-23T05:02:41Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/DiceRoll.java", "diffHunk": "@@ -803,7 +797,7 @@ public static DiceRoll rollNDice(\n                 UnitSupportAttachment::getStrength);\n       } else {\n         strength = ua.getAttack(unit.getOwner());\n-        if (ua.getIsMarine() != 0 && isAmphibiousBattle && amphibiousLandAttackers.contains(unit)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6929f876be901378eac37f44994a0c6e13b031bf"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzMzgwMA==", "bodyText": "getWasAmphibious is only set in TransportTracker#unloadTransportChange and that is when a transport is unloaded.  I just ran a game where I did an amphibious assault and then in the next turn used the same units to attack a standard land battle.  wasAmphibious was true for the first battle but false for the second battle.  I've also tested battles that don't have any amphibious assault and wasAmphibious is false there as well.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493633800", "createdAt": "2020-09-23T14:21:57Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/DiceRoll.java", "diffHunk": "@@ -803,7 +797,7 @@ public static DiceRoll rollNDice(\n                 UnitSupportAttachment::getStrength);\n       } else {\n         strength = ua.getAttack(unit.getOwner());\n-        if (ua.getIsMarine() != 0 && isAmphibiousBattle && amphibiousLandAttackers.contains(unit)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5ODY2Ng=="}, "originalCommit": {"oid": "6929f876be901378eac37f44994a0c6e13b031bf"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MjE1Mg==", "bodyText": "Interesting, that implies/confirms at one point a new way to track amphibious units was simply built without regard to the existing mechanism. This is then a very good example of SRP / DRY being violated.\nIt might be worthwhile to walk through this code execution in a debugger to make sure it all looks good at that level. It sounds like the test cases you've ran through have been pretty comprehensive.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493762152", "createdAt": "2020-09-23T17:22:15Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/DiceRoll.java", "diffHunk": "@@ -803,7 +797,7 @@ public static DiceRoll rollNDice(\n                 UnitSupportAttachment::getStrength);\n       } else {\n         strength = ua.getAttack(unit.getOwner());\n-        if (ua.getIsMarine() != 0 && isAmphibiousBattle && amphibiousLandAttackers.contains(unit)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5ODY2Ng=="}, "originalCommit": {"oid": "6929f876be901378eac37f44994a0c6e13b031bf"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg5ODM1NQ==", "bodyText": "Yeah, I went through it with a debugger to make sure the value was what I expected.  If you have two units attacking and one was amphibious but the other goes by land, only the amphibious unit has wasAmphibious.\nLooking at the history, it appears that amphibiousLandAttackers was first created to track if a battle was amphibious.  Then, when marine bonuses were added, the wasAmphibious was added but it was used oddly (it kind of determined if a battle was amphibious but wasn't used to check if the unit should get a marine bonus).  Then that code had concurrent issues because it talked to the battle tracker.  It was finally removed and replaced by plumbing amphibiousLandAttackers through.\nI think this new way (using wasAmphibious) should work correctly and it should be simpler.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493898355", "createdAt": "2020-09-23T21:12:24Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/DiceRoll.java", "diffHunk": "@@ -803,7 +797,7 @@ public static DiceRoll rollNDice(\n                 UnitSupportAttachment::getStrength);\n       } else {\n         strength = ua.getAttack(unit.getOwner());\n-        if (ua.getIsMarine() != 0 && isAmphibiousBattle && amphibiousLandAttackers.contains(unit)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5ODY2Ng=="}, "originalCommit": {"oid": "6929f876be901378eac37f44994a0c6e13b031bf"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwMDgzMQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493900831", "createdAt": "2020-09-23T21:17:28Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/DiceRoll.java", "diffHunk": "@@ -803,7 +797,7 @@ public static DiceRoll rollNDice(\n                 UnitSupportAttachment::getStrength);\n       } else {\n         strength = ua.getAttack(unit.getOwner());\n-        if (ua.getIsMarine() != 0 && isAmphibiousBattle && amphibiousLandAttackers.contains(unit)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5ODY2Ng=="}, "originalCommit": {"oid": "6929f876be901378eac37f44994a0c6e13b031bf"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjY5ODcxOnYy", "diffSide": "LEFT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/AbstractBattle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNTowNDowMVrOHWWeog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDoyMjozMFrOHWxCxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5OTAxMA==", "bodyText": "This is a suspect I believe for save game compatibility issues. Have you double checked that this field is not serialized?", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493199010", "createdAt": "2020-09-23T05:04:01Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/AbstractBattle.java", "diffHunk": "@@ -57,7 +57,6 @@\n \n   List<Unit> attackingUnits = new ArrayList<>();\n   List<Unit> defendingUnits = new ArrayList<>();\n-  List<Unit> amphibiousLandAttackers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6929f876be901378eac37f44994a0c6e13b031bf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzNDI0Ng==", "bodyText": "Oddly enough, it didn't prevent loading an old save game.  But I'm adding them back in.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493634246", "createdAt": "2020-09-23T14:22:30Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/AbstractBattle.java", "diffHunk": "@@ -57,7 +57,6 @@\n \n   List<Unit> attackingUnits = new ArrayList<>();\n   List<Unit> defendingUnits = new ArrayList<>();\n-  List<Unit> amphibiousLandAttackers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5OTAxMA=="}, "originalCommit": {"oid": "6929f876be901378eac37f44994a0c6e13b031bf"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjY5OTc4OnYy", "diffSide": "LEFT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/AirBattle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNTowNDozNFrOHWWfNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDoyMzozMVrOHWxF2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5OTE1Nw==", "bodyText": "Does the list need to be modifiable? If not, List.of() is the conventional preference for empty lists.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493199157", "createdAt": "2020-09-23T05:04:34Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/AirBattle.java", "diffHunk": "@@ -705,7 +705,6 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n                       defendingUnits,\n                       attackingUnits,\n                       false,\n-                      new ArrayList<>(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6929f876be901378eac37f44994a0c6e13b031bf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzNTAzNA==", "bodyText": "This list was removed.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493635034", "createdAt": "2020-09-23T14:23:31Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/AirBattle.java", "diffHunk": "@@ -705,7 +705,6 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n                       defendingUnits,\n                       attackingUnits,\n                       false,\n-                      new ArrayList<>(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5OTE1Nw=="}, "originalCommit": {"oid": "6929f876be901378eac37f44994a0c6e13b031bf"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjcwMTYyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNTowNToyNVrOHWWgMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoyMToyNVrOHXEU-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5OTQxMA==", "bodyText": "WDYT of using an enum here to represent the different battle states? It would be purely for a more descriptive API", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493199410", "createdAt": "2020-09-23T05:05:25Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -145,14 +145,13 @@ public void setUnits(\n       final Collection<Unit> defending,\n       final Collection<Unit> attacking,\n       final Collection<Unit> bombarding,\n-      final Collection<Unit> amphibious,\n+      final boolean amphibious,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6929f876be901378eac37f44994a0c6e13b031bf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzNzM0MQ==", "bodyText": "Such as BattleType?  You recently modified it for the different air battles.  Maybe add AMPHIBIOUS there as well?", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493637341", "createdAt": "2020-09-23T14:26:19Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -145,14 +145,13 @@ public void setUnits(\n       final Collection<Unit> defending,\n       final Collection<Unit> attacking,\n       final Collection<Unit> bombarding,\n-      final Collection<Unit> amphibious,\n+      final boolean amphibious,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5OTQxMA=="}, "originalCommit": {"oid": "6929f876be901378eac37f44994a0c6e13b031bf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1OTI5Ng==", "bodyText": "That is not a bad idea. I think there are two options:\n\na new enum with AMPHIBIOUS and NON_AMPHIBIOUS\nadd an entry for battle type\n\nThere are pros & cons to either approach.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493759296", "createdAt": "2020-09-23T17:17:34Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -145,14 +145,13 @@ public void setUnits(\n       final Collection<Unit> defending,\n       final Collection<Unit> attacking,\n       final Collection<Unit> bombarding,\n-      final Collection<Unit> amphibious,\n+      final boolean amphibious,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5OTQxMA=="}, "originalCommit": {"oid": "6929f876be901378eac37f44994a0c6e13b031bf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1MDIwMw==", "bodyText": "I looked into what the amphibious was used for and after tracking down its usage, I don't think it is actually needed.  I think that 'amphibious' can be determined by looping through the units and seeing if one of them has a wasAmphibious.\nI wasn't completely certain because of a few uses of AbstractBattle#isAmphibious but I felt that the use here could be removed.  So, I didn't do any enum.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493950203", "createdAt": "2020-09-23T23:21:25Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -145,14 +145,13 @@ public void setUnits(\n       final Collection<Unit> defending,\n       final Collection<Unit> attacking,\n       final Collection<Unit> bombarding,\n-      final Collection<Unit> amphibious,\n+      final boolean amphibious,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5OTQxMA=="}, "originalCommit": {"oid": "6929f876be901378eac37f44994a0c6e13b031bf"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTM4MzA4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoyMzo1N1rOHXEX1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoxNToxNFrOHXFaRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1MDkzNA==", "bodyText": "I can't figure out why these sorts (sortPreBattle and sortAmphib) happen here.  I tested battles with them removed and things seemed to work the same.  I think that these methods probably existed before the more complex casualty sorter was built and no one got around to removing them.  I worried about removing them as part of this PR but I think they can be removed.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493950934", "createdAt": "2020-09-23T23:23:57Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -718,17 +709,13 @@ public void fight(final IDelegateBridge bridge) {\n         dependentUnits,\n         attacker,\n         defender,\n-        isAmphibious(),\n+        false,\n         getBattleType(),\n-        amphibiousLandAttackers);\n+        List.of());\n     display.listBattleSteps(battleId, stepStrings);\n     if (!headless) {\n       // take the casualties with least movement first\n-      if (isAmphibious()) {\n-        CasualtySortingUtil.sortAmphib(attackingUnits, amphibiousLandAttackers);\n-      } else {\n-        CasualtySortingUtil.sortPreBattle(attackingUnits);\n-      }\n+      CasualtySortingUtil.sortPreBattle(attackingUnits);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a694383eb8354a4f03a96fb11f016bed20ac02ac"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2Nzk0Mw==", "bodyText": "The casualty sorter I believe assumes units are provided in an already sorted ordering.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493967943", "createdAt": "2020-09-24T00:15:14Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -718,17 +709,13 @@ public void fight(final IDelegateBridge bridge) {\n         dependentUnits,\n         attacker,\n         defender,\n-        isAmphibious(),\n+        false,\n         getBattleType(),\n-        amphibiousLandAttackers);\n+        List.of());\n     display.listBattleSteps(battleId, stepStrings);\n     if (!headless) {\n       // take the casualties with least movement first\n-      if (isAmphibious()) {\n-        CasualtySortingUtil.sortAmphib(attackingUnits, amphibiousLandAttackers);\n-      } else {\n-        CasualtySortingUtil.sortPreBattle(attackingUnits);\n-      }\n+      CasualtySortingUtil.sortPreBattle(attackingUnits);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1MDkzNA=="}, "originalCommit": {"oid": "a694383eb8354a4f03a96fb11f016bed20ac02ac"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTM4OTY0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/casualty/CasualtySelector.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoyNjo1MVrOHXEbiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMjo1NTozN1rOHXzOtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1MTg4MQ==", "bodyText": "I first looked at not checking for amphibious here and instead doing the getWasAmphibious check inside of the sorter.  But the sorter only looks at one unit of each type so if a battle had an amphibious marine and a non-amphibious marine, the results could be different depending on which unit was seen first.\nI think the sorter needs to be looked at because, right now, if you have a partial amphibious attack (some marines are amphibious and others aren't), it sorts them as if all of the marines are amphibious.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493951881", "createdAt": "2020-09-23T23:26:51Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/casualty/CasualtySelector.java", "diffHunk": "@@ -308,11 +298,9 @@ private static void killAmphibiousFirst(final List<Unit> killed, final Collectio\n                 .combatModifiers(\n                     CombatModifiers.builder()\n                         .territoryEffects(territoryEffects)\n-                        .amphibious(amphibious)\n+                        .amphibious(targetsToPickFrom.stream().anyMatch(Unit::getWasAmphibious))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a694383eb8354a4f03a96fb11f016bed20ac02ac"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4MTIwNA==", "bodyText": "That would lead to an over-evaluation of those units powers, likely an outright defect.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r494681204", "createdAt": "2020-09-25T00:27:25Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/casualty/CasualtySelector.java", "diffHunk": "@@ -308,11 +298,9 @@ private static void killAmphibiousFirst(final List<Unit> killed, final Collectio\n                 .combatModifiers(\n                     CombatModifiers.builder()\n                         .territoryEffects(territoryEffects)\n-                        .amphibious(amphibious)\n+                        .amphibious(targetsToPickFrom.stream().anyMatch(Unit::getWasAmphibious))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1MTg4MQ=="}, "originalCommit": {"oid": "a694383eb8354a4f03a96fb11f016bed20ac02ac"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4OTczOQ==", "bodyText": "Do you want me to try to fix this as part of this PR?  It isn't a new issue so this change isn't making it any worse.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r494689739", "createdAt": "2020-09-25T01:00:01Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/casualty/CasualtySelector.java", "diffHunk": "@@ -308,11 +298,9 @@ private static void killAmphibiousFirst(final List<Unit> killed, final Collectio\n                 .combatModifiers(\n                     CombatModifiers.builder()\n                         .territoryEffects(territoryEffects)\n-                        .amphibious(amphibious)\n+                        .amphibious(targetsToPickFrom.stream().anyMatch(Unit::getWasAmphibious))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1MTg4MQ=="}, "originalCommit": {"oid": "a694383eb8354a4f03a96fb11f016bed20ac02ac"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDcxODY0NA==", "bodyText": "new PR, bug fixes are best done as focused PRs. Ideally a test created to demonstrate the problem and then fix is relatively surgical.\nOne should also consider the blast radius of a roll-back. If something is wrong and there is a rollback, it's a shame to have other helpful changes also be rolled bakc.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r494718644", "createdAt": "2020-09-25T02:55:37Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/casualty/CasualtySelector.java", "diffHunk": "@@ -308,11 +298,9 @@ private static void killAmphibiousFirst(final List<Unit> killed, final Collectio\n                 .combatModifiers(\n                     CombatModifiers.builder()\n                         .territoryEffects(territoryEffects)\n-                        .amphibious(amphibious)\n+                        .amphibious(targetsToPickFrom.stream().anyMatch(Unit::getWasAmphibious))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1MTg4MQ=="}, "originalCommit": {"oid": "a694383eb8354a4f03a96fb11f016bed20ac02ac"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTM5MjgxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/casualty/CasualtySortingUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoyODoyNlrOHXEdXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoyODoyNlrOHXEdXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1MjM0OQ==", "bodyText": "Before I changed this class, I wrote some unit tests to make sure I understood the logic.  And I got unexpected results.  So, I \"fixed\" the class to match the tests.  Take a look at the tests to see if maybe I have an incorrect assumption on how this is supposed to sort units.\nAlso, as I mentioned earlier, I'm not sure this sort code is even needed.", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r493952349", "createdAt": "2020-09-23T23:28:26Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/casualty/CasualtySortingUtil.java", "diffHunk": "@@ -10,46 +10,24 @@\n \n @UtilityClass\n public class CasualtySortingUtil {\n-  /**\n-   * In an amphibious assault, sort on who is unloading from transports first as this will allow the\n-   * marines with higher scores to get killed last.\n-   */\n-  public static void sortAmphib(final List<Unit> units, final List<Unit> amphibiousLandAttackers) {\n-    final Comparator<Unit> decreasingMovement =\n-        UnitComparator.getLowestToHighestMovementComparator();\n+  /** In an amphibious assault, sort marines with higher scores last */\n+  public static void sortPreBattle(final List<Unit> units) {\n     units.sort(\n         Comparator.comparing(Unit::getType, Comparator.comparing(UnitType::getName))\n-            .thenComparing(\n-                (u1, u2) -> {\n-                  final UnitAttachment ua = UnitAttachment.get(u1.getType());\n-                  final UnitAttachment ua2 = UnitAttachment.get(u2.getType());\n-                  if (ua.getIsMarine() != 0 && ua2.getIsMarine() != 0) {\n-                    return compareAccordingToAmphibious(u1, u2, amphibiousLandAttackers);\n-                  }\n-                  return 0;\n-                })\n-            .thenComparing(decreasingMovement));\n+            .thenComparing(compareMarines())\n+            .thenComparing(UnitComparator.getLowestToHighestMovementComparator()));\n   }\n \n-  private static int compareAccordingToAmphibious(\n-      final Unit u1, final Unit u2, final List<Unit> amphibiousLandAttackers) {\n-    if (amphibiousLandAttackers.contains(u1) && !amphibiousLandAttackers.contains(u2)) {\n-      return -1;\n-    } else if (amphibiousLandAttackers.contains(u2) && !amphibiousLandAttackers.contains(u1)) {\n-      return 1;\n-    }\n-    final int m1 = UnitAttachment.get(u1.getType()).getIsMarine();\n-    final int m2 = UnitAttachment.get(u2.getType()).getIsMarine();\n-    return m2 - m1;\n-  }\n+  public static Comparator<Unit> compareMarines() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a694383eb8354a4f03a96fb11f016bed20ac02ac"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjMyNjkxOnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/casualty/CasualtySortingUtilTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMjo1ODoxOFrOHXzRiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMjo1ODoxOFrOHXzRiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDcxOTM3MQ==", "bodyText": "nit, have you considered using the collection matcher? IE: IsCollectionContaining", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r494719371", "createdAt": "2020-09-25T02:58:18Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/casualty/CasualtySortingUtilTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package games.strategy.triplea.delegate.battle.casualty;\n+\n+import static games.strategy.triplea.Constants.UNIT_ATTACHMENT_NAME;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class CasualtySortingUtilTest {\n+\n+  @Mock GameData gameData;\n+  @Mock GamePlayer player;\n+\n+  @Test\n+  void sortByUnitTypeName() {\n+    final UnitType unitType1 = mock(UnitType.class);\n+    when(unitType1.getName()).thenReturn(\"B\");\n+    final Unit unitB = new Unit(unitType1, player, gameData);\n+\n+    final UnitType unitType2 = mock(UnitType.class);\n+    when(unitType2.getName()).thenReturn(\"A\");\n+    final Unit unitA = new Unit(unitType2, player, gameData);\n+\n+    final List<Unit> units = Arrays.asList(unitB, unitA);\n+\n+    CasualtySortingUtil.sortPreBattle(units);\n+\n+    assertThat(units, is(List.of(unitA, unitB)));\n+  }\n+\n+  @Test\n+  void sortByMovement() {\n+    final UnitType unitType1 = mock(UnitType.class);\n+    when(unitType1.getName()).thenReturn(\"A\");\n+    final UnitAttachment unitAttachment1 = mock(UnitAttachment.class);\n+    when(unitType1.getAttachment(UNIT_ATTACHMENT_NAME)).thenReturn(unitAttachment1);\n+    when(unitAttachment1.getMovement(player)).thenReturn(2);\n+    final Unit unitWith2Movement = new Unit(unitType1, player, gameData);\n+\n+    final UnitType unitType2 = mock(UnitType.class);\n+    when(unitType2.getName()).thenReturn(\"A\");\n+    final UnitAttachment unitAttachment2 = mock(UnitAttachment.class);\n+    when(unitAttachment2.getMovement(player)).thenReturn(1);\n+    when(unitType2.getAttachment(UNIT_ATTACHMENT_NAME)).thenReturn(unitAttachment2);\n+    final Unit unitWith1Movement = new Unit(unitType2, player, gameData);\n+\n+    final List<Unit> units = Arrays.asList(unitWith2Movement, unitWith1Movement);\n+\n+    CasualtySortingUtil.sortPreBattle(units);\n+\n+    assertThat(units, is(List.of(unitWith1Movement, unitWith2Movement)));\n+  }\n+\n+  @Test\n+  void sortByMarine() {\n+    final UnitType unitType1 = mock(UnitType.class);\n+    when(unitType1.getName()).thenReturn(\"A\");\n+    final UnitAttachment unitAttachment1 = mock(UnitAttachment.class);\n+    when(unitType1.getAttachment(UNIT_ATTACHMENT_NAME)).thenReturn(unitAttachment1);\n+    lenient().when(unitAttachment1.getMovement(player)).thenReturn(1);\n+    when(unitAttachment1.getIsMarine()).thenReturn(0);\n+    final Unit unitWithNoMarine = spy(new Unit(unitType1, player, gameData));\n+    lenient().when(unitWithNoMarine.getWasAmphibious()).thenReturn(true);\n+\n+    final UnitType unitType2 = mock(UnitType.class);\n+    when(unitType2.getName()).thenReturn(\"A\");\n+    final UnitAttachment unitAttachment2 = mock(UnitAttachment.class);\n+    lenient().when(unitAttachment2.getMovement(player)).thenReturn(1);\n+    when(unitAttachment2.getIsMarine()).thenReturn(1);\n+    when(unitType2.getAttachment(UNIT_ATTACHMENT_NAME)).thenReturn(unitAttachment2);\n+    final Unit unitWith1Marine = spy(new Unit(unitType2, player, gameData));\n+    when(unitWith1Marine.getWasAmphibious()).thenReturn(true);\n+\n+    final UnitType unitType3 = mock(UnitType.class);\n+    when(unitType3.getName()).thenReturn(\"A\");\n+    final UnitAttachment unitAttachment3 = mock(UnitAttachment.class);\n+    lenient().when(unitAttachment3.getMovement(player)).thenReturn(1);\n+    when(unitAttachment3.getIsMarine()).thenReturn(2);\n+    when(unitType3.getAttachment(UNIT_ATTACHMENT_NAME)).thenReturn(unitAttachment3);\n+    final Unit unitWith2Marine = spy(new Unit(unitType3, player, gameData));\n+    when(unitWith2Marine.getWasAmphibious()).thenReturn(true);\n+\n+    final List<Unit> units = Arrays.asList(unitWith2Marine, unitWith1Marine, unitWithNoMarine);\n+\n+    CasualtySortingUtil.sortPreBattle(units);\n+\n+    assertThat(units, is(List.of(unitWithNoMarine, unitWith1Marine, unitWith2Marine)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d77e2b92ac0fcf4885773be5850d9bb6fab72a"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjMyODg3OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/casualty/CasualtySortingUtilTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMjo1OTozMFrOHXzSsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMjo1OTozMFrOHXzSsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDcxOTY2NA==", "bodyText": "nit, a message on the assertion is desirably for most assertions to explain why we expect an exact condition to be true. Spelling out why we expect a test to be correct is important for maintenance", "url": "https://github.com/triplea-game/triplea/pull/7740#discussion_r494719664", "createdAt": "2020-09-25T02:59:30Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/casualty/CasualtySortingUtilTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package games.strategy.triplea.delegate.battle.casualty;\n+\n+import static games.strategy.triplea.Constants.UNIT_ATTACHMENT_NAME;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class CasualtySortingUtilTest {\n+\n+  @Mock GameData gameData;\n+  @Mock GamePlayer player;\n+\n+  @Test\n+  void sortByUnitTypeName() {\n+    final UnitType unitType1 = mock(UnitType.class);\n+    when(unitType1.getName()).thenReturn(\"B\");\n+    final Unit unitB = new Unit(unitType1, player, gameData);\n+\n+    final UnitType unitType2 = mock(UnitType.class);\n+    when(unitType2.getName()).thenReturn(\"A\");\n+    final Unit unitA = new Unit(unitType2, player, gameData);\n+\n+    final List<Unit> units = Arrays.asList(unitB, unitA);\n+\n+    CasualtySortingUtil.sortPreBattle(units);\n+\n+    assertThat(units, is(List.of(unitA, unitB)));\n+  }\n+\n+  @Test\n+  void sortByMovement() {\n+    final UnitType unitType1 = mock(UnitType.class);\n+    when(unitType1.getName()).thenReturn(\"A\");\n+    final UnitAttachment unitAttachment1 = mock(UnitAttachment.class);\n+    when(unitType1.getAttachment(UNIT_ATTACHMENT_NAME)).thenReturn(unitAttachment1);\n+    when(unitAttachment1.getMovement(player)).thenReturn(2);\n+    final Unit unitWith2Movement = new Unit(unitType1, player, gameData);\n+\n+    final UnitType unitType2 = mock(UnitType.class);\n+    when(unitType2.getName()).thenReturn(\"A\");\n+    final UnitAttachment unitAttachment2 = mock(UnitAttachment.class);\n+    when(unitAttachment2.getMovement(player)).thenReturn(1);\n+    when(unitType2.getAttachment(UNIT_ATTACHMENT_NAME)).thenReturn(unitAttachment2);\n+    final Unit unitWith1Movement = new Unit(unitType2, player, gameData);\n+\n+    final List<Unit> units = Arrays.asList(unitWith2Movement, unitWith1Movement);\n+\n+    CasualtySortingUtil.sortPreBattle(units);\n+\n+    assertThat(units, is(List.of(unitWith1Movement, unitWith2Movement)));\n+  }\n+\n+  @Test\n+  void sortByMarine() {\n+    final UnitType unitType1 = mock(UnitType.class);\n+    when(unitType1.getName()).thenReturn(\"A\");\n+    final UnitAttachment unitAttachment1 = mock(UnitAttachment.class);\n+    when(unitType1.getAttachment(UNIT_ATTACHMENT_NAME)).thenReturn(unitAttachment1);\n+    lenient().when(unitAttachment1.getMovement(player)).thenReturn(1);\n+    when(unitAttachment1.getIsMarine()).thenReturn(0);\n+    final Unit unitWithNoMarine = spy(new Unit(unitType1, player, gameData));\n+    lenient().when(unitWithNoMarine.getWasAmphibious()).thenReturn(true);\n+\n+    final UnitType unitType2 = mock(UnitType.class);\n+    when(unitType2.getName()).thenReturn(\"A\");\n+    final UnitAttachment unitAttachment2 = mock(UnitAttachment.class);\n+    lenient().when(unitAttachment2.getMovement(player)).thenReturn(1);\n+    when(unitAttachment2.getIsMarine()).thenReturn(1);\n+    when(unitType2.getAttachment(UNIT_ATTACHMENT_NAME)).thenReturn(unitAttachment2);\n+    final Unit unitWith1Marine = spy(new Unit(unitType2, player, gameData));\n+    when(unitWith1Marine.getWasAmphibious()).thenReturn(true);\n+\n+    final UnitType unitType3 = mock(UnitType.class);\n+    when(unitType3.getName()).thenReturn(\"A\");\n+    final UnitAttachment unitAttachment3 = mock(UnitAttachment.class);\n+    lenient().when(unitAttachment3.getMovement(player)).thenReturn(1);\n+    when(unitAttachment3.getIsMarine()).thenReturn(2);\n+    when(unitType3.getAttachment(UNIT_ATTACHMENT_NAME)).thenReturn(unitAttachment3);\n+    final Unit unitWith2Marine = spy(new Unit(unitType3, player, gameData));\n+    when(unitWith2Marine.getWasAmphibious()).thenReturn(true);\n+\n+    final List<Unit> units = Arrays.asList(unitWith2Marine, unitWith1Marine, unitWithNoMarine);\n+\n+    CasualtySortingUtil.sortPreBattle(units);\n+\n+    assertThat(units, is(List.of(unitWithNoMarine, unitWith1Marine, unitWith2Marine)));\n+  }\n+\n+  @Test\n+  void sortByMarineWithNonAmphibiousMarine() {\n+    final UnitType unitType1 = mock(UnitType.class);\n+    when(unitType1.getName()).thenReturn(\"A\");\n+    final UnitAttachment unitAttachment1 = mock(UnitAttachment.class);\n+    when(unitType1.getAttachment(UNIT_ATTACHMENT_NAME)).thenReturn(unitAttachment1);\n+    lenient().when(unitAttachment1.getMovement(player)).thenReturn(1);\n+    when(unitAttachment1.getIsMarine()).thenReturn(0);\n+    final Unit unitWithNoMarine = spy(new Unit(unitType1, player, gameData));\n+    when(unitWithNoMarine.getWasAmphibious()).thenReturn(true);\n+\n+    final UnitType unitType2 = mock(UnitType.class);\n+    when(unitType2.getName()).thenReturn(\"A\");\n+    final UnitAttachment unitAttachment2 = mock(UnitAttachment.class);\n+    lenient().when(unitAttachment2.getMovement(player)).thenReturn(1);\n+    when(unitAttachment2.getIsMarine()).thenReturn(1);\n+    when(unitType2.getAttachment(UNIT_ATTACHMENT_NAME)).thenReturn(unitAttachment2);\n+    final Unit unitWith1Marine = spy(new Unit(unitType2, player, gameData));\n+    when(unitWith1Marine.getWasAmphibious()).thenReturn(true);\n+\n+    final UnitType unitType3 = mock(UnitType.class);\n+    when(unitType3.getName()).thenReturn(\"A\");\n+    final UnitAttachment unitAttachment3 = mock(UnitAttachment.class);\n+    lenient().when(unitAttachment3.getMovement(player)).thenReturn(1);\n+    when(unitAttachment3.getIsMarine()).thenReturn(2);\n+    when(unitType3.getAttachment(UNIT_ATTACHMENT_NAME)).thenReturn(unitAttachment3);\n+    final Unit unitWith2Marine = spy(new Unit(unitType3, player, gameData));\n+    when(unitWith2Marine.getWasAmphibious()).thenReturn(true);\n+\n+    final UnitType unitType4 = mock(UnitType.class);\n+    when(unitType4.getName()).thenReturn(\"A\");\n+    final UnitAttachment unitAttachment4 = mock(UnitAttachment.class);\n+    // add a little more movement than unitWithNoMarine so it sorts stably.\n+    lenient().when(unitAttachment4.getMovement(player)).thenReturn(2);\n+    lenient().when(unitAttachment4.getIsMarine()).thenReturn(1);\n+    lenient().when(unitType4.getAttachment(UNIT_ATTACHMENT_NAME)).thenReturn(unitAttachment4);\n+    final Unit unitWith3MarineButNotAmphibious = spy(new Unit(unitType4, player, gameData));\n+    when(unitWith3MarineButNotAmphibious.getWasAmphibious()).thenReturn(false);\n+\n+    final List<Unit> units =\n+        Arrays.asList(\n+            unitWith2Marine, unitWith1Marine, unitWithNoMarine, unitWith3MarineButNotAmphibious);\n+\n+    CasualtySortingUtil.sortPreBattle(units);\n+\n+    assertThat(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d77e2b92ac0fcf4885773be5850d9bb6fab72a"}, "originalPosition": 150}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2858, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}