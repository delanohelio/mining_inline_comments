{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMjkwOTQ1", "number": 5912, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowMlrODd8fkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxNToxMDozNlrODeORZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI2NDE2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowMlrOFm1eiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowMlrOFm1eiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2NjM3Ng==", "bodyText": "Identical blocks of code found in 4 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376266376", "createdAt": "2020-02-07T08:29:02Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -39,7 +52,13 @@ public DiceServerEditor(final Runnable readyCallback) {\n     final int labelSpace = 2;\n     int row = 0;\n     diceRollersByDisplayName.keySet().forEach(servers::addItem);\n-    add(\n+\n+    final JPanel diceRollerOptions = new JPanel();\n+    diceRollerOptions.setLayout(new GridBagLayout());\n+    diceRollerOptions.setBorder(new TitledBorder(\"Dice Server Options\"));\n+    add(diceRollerOptions);\n+\n+    diceRollerOptions.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67a7d4bbbe76cd2c83477a743ceca341d746e57"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI2NDE5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowMlrOFm1eiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowMlrOFm1eiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2NjM3OQ==", "bodyText": "Identical blocks of code found in 4 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376266379", "createdAt": "2020-02-07T08:29:02Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -68,7 +87,7 @@ public DiceServerEditor(final Runnable readyCallback) {\n             0,\n             0));\n     row++;\n-    add(\n+    diceRollerOptions.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67a7d4bbbe76cd2c83477a743ceca341d746e57"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI2NDIwOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowMlrOFm1ejA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowMlrOFm1ejA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2NjM4MA==", "bodyText": "Identical blocks of code found in 4 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376266380", "createdAt": "2020-02-07T08:29:02Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -97,7 +116,7 @@ public DiceServerEditor(final Runnable readyCallback) {\n             0,\n             0));\n     row++;\n-    add(\n+    diceRollerOptions.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67a7d4bbbe76cd2c83477a743ceca341d746e57"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI2NDIxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowM1rOFm1ejQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowM1rOFm1ejQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2NjM4MQ==", "bodyText": "Identical blocks of code found in 4 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376266381", "createdAt": "2020-02-07T08:29:03Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -127,7 +146,7 @@ public DiceServerEditor(final Runnable readyCallback) {\n             0));\n     row++;\n     final JLabel gameIdLabel = new JLabel(\"Game Name:\");\n-    add(\n+    diceRollerOptions.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67a7d4bbbe76cd2c83477a743ceca341d746e57"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI2NDIyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowM1rOFm1ejg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowM1rOFm1ejg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2NjM4Mg==", "bodyText": "Identical blocks of code found in 4 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376266382", "createdAt": "2020-02-07T08:29:03Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -53,7 +72,7 @@ public DiceServerEditor(final Runnable readyCallback) {\n             new Insets(0, 0, bottomSpace, labelSpace),\n             0,\n             0));\n-    add(\n+    diceRollerOptions.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67a7d4bbbe76cd2c83477a743ceca341d746e57"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI2NDIzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowM1rOFm1ejw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowM1rOFm1ejw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2NjM4Mw==", "bodyText": "Identical blocks of code found in 4 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376266383", "createdAt": "2020-02-07T08:29:03Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -141,7 +160,7 @@ public DiceServerEditor(final Runnable readyCallback) {\n             new Insets(0, 0, bottomSpace, labelSpace),\n             0,\n             0));\n-    add(\n+    diceRollerOptions.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67a7d4bbbe76cd2c83477a743ceca341d746e57"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI2NDI1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowM1rOFm1ekQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowM1rOFm1ekQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2NjM4NQ==", "bodyText": "Identical blocks of code found in 4 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376266385", "createdAt": "2020-02-07T08:29:03Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -111,7 +130,7 @@ public DiceServerEditor(final Runnable readyCallback) {\n             new Insets(0, 0, bottomSpace, labelSpace),\n             0,\n             0));\n-    add(\n+    diceRollerOptions.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67a7d4bbbe76cd2c83477a743ceca341d746e57"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI2NDI2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowM1rOFm1ekw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowM1rOFm1ekw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2NjM4Nw==", "bodyText": "Identical blocks of code found in 4 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376266387", "createdAt": "2020-02-07T08:29:03Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -82,7 +101,7 @@ public DiceServerEditor(final Runnable readyCallback) {\n             new Insets(0, 0, bottomSpace, labelSpace),\n             0,\n             0));\n-    add(\n+    diceRollerOptions.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67a7d4bbbe76cd2c83477a743ceca341d746e57"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI2NDI4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowM1rOFm1elQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowM1rOFm1elQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2NjM4OQ==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376266389", "createdAt": "2020-02-07T08:29:03Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -156,7 +175,22 @@ public DiceServerEditor(final Runnable readyCallback) {\n             0,\n             0));\n     row++;\n-    add(\n+    diceRollerOptions.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67a7d4bbbe76cd2c83477a743ceca341d746e57"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI2NDMwOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowNFrOFm1emA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoyOTowNFrOFm1emA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2NjM5Mg==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376266392", "createdAt": "2020-02-07T08:29:04Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -156,7 +175,22 @@ public DiceServerEditor(final Runnable readyCallback) {\n             0,\n             0));\n     row++;\n-    add(\n+    diceRollerOptions.add(\n+        registerButton,\n+        new GridBagConstraints(\n+            1,\n+            row,\n+            1,\n+            1,\n+            0,\n+            0,\n+            GridBagConstraints.WEST,\n+            GridBagConstraints.NONE,\n+            new Insets(0, 0, bottomSpace, 0),\n+            0,\n+            0));\n+\n+    diceRollerOptions.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67a7d4bbbe76cd2c83477a743ceca341d746e57"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDAyODAwOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODoyMTozOVrOFnPuSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODoyMTozOVrOFnPuSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NjM5NA==", "bodyText": "Method diceRollerOverrideSelection has 69 lines of code (exceeds 25 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376696394", "createdAt": "2020-02-08T08:21:39Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "diffHunk": "@@ -507,6 +508,91 @@ public void reset() {\n     };\n   }\n \n+  static SelectionComponent<JComponent> diceRollerOverrideSelection() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60450875ec8c2f6316551bda30ca41a35bf55604"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDAyODAxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODoyMTo0MFrOFnPuSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODoyMTo0MFrOFnPuSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NjM5NQ==", "bodyText": "Identical blocks of code found in 3 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376696395", "createdAt": "2020-02-08T08:21:40Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -97,8 +145,9 @@ public DiceServerEditor(final Runnable readyCallback) {\n             0,\n             0));\n     row++;\n-    add(\n-        ccLabel,\n+    final JLabel gameIdLabel = new JLabel(\"Game Name:\");\n+    diceRollerOptions.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60450875ec8c2f6316551bda30ca41a35bf55604"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDAyODAzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODoyMTo0MFrOFnPuTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODoyMTo0MFrOFnPuTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NjM5Nw==", "bodyText": "Identical blocks of code found in 3 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376696397", "createdAt": "2020-02-08T08:21:40Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -1,46 +1,94 @@\n package games.strategy.engine.framework.startup.ui.editors;\n \n-import com.google.common.collect.ImmutableMap;\n import games.strategy.engine.data.properties.GameProperties;\n import games.strategy.engine.random.IRemoteDiceServer;\n import games.strategy.engine.random.PbemDiceRoller;\n import games.strategy.engine.random.PropertiesDiceRoller;\n+import games.strategy.triplea.UrlConstants;\n+import games.strategy.triplea.settings.ClientSetting;\n import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n import java.awt.Insets;\n-import java.util.function.Function;\n+import java.net.URI;\n import javax.swing.JButton;\n-import javax.swing.JComboBox;\n import javax.swing.JLabel;\n+import javax.swing.JPanel;\n import javax.swing.JTextField;\n+import javax.swing.border.TitledBorder;\n+import org.triplea.awt.OpenFileUtility;\n import org.triplea.domain.data.PlayerEmailValidation;\n import org.triplea.swing.DocumentListenerBuilder;\n+import org.triplea.swing.JButtonBuilder;\n \n /** A class to configure a Dice Server for the game. */\n public class DiceServerEditor extends EditorPanel {\n-  private static final long serialVersionUID = -451810815037661114L;\n-  private static final ImmutableMap<String, PropertiesDiceRoller> diceRollersByDisplayName =\n-      PropertiesDiceRoller.loadFromFile().stream()\n-          .collect(\n-              ImmutableMap.toImmutableMap(IRemoteDiceServer::getDisplayName, Function.identity()));\n+  public static URI PRODUCTION_URI = URI.create(\"https://dice.marti.triplea-game.org\");\n+  public static URI PRE_RELEASE_URI = URI.create(\"https://prerelease.dice.marti.triplea-game.org\");\n \n+  private static final long serialVersionUID = -451810815037661114L;\n+  private final JButton registerButton =\n+      new JButtonBuilder(\"Register\")\n+          .actionListener(() -> OpenFileUtility.openUrl(UrlConstants.MARTI_REGISTRATION))\n+          .toolTip(\n+              \"<html>Opens email registration page to register with MARTI dice-roller.<br>\"\n+                  + \"Needs to be done once before MARTI dice server can be used.</html>\")\n+          .build();\n   private final JButton testDiceButton = new JButton(\"Test Server\");\n   private final JTextField toAddress = new JTextField();\n   private final JTextField ccAddress = new JTextField();\n   private final JTextField gameId = new JTextField();\n-  private final JLabel serverLabel = new JLabel(\"Servers:\");\n   private final JLabel toLabel = new JLabel(\"To:\");\n   private final JLabel ccLabel = new JLabel(\"Cc:\");\n-  private final JComboBox<String> servers = new JComboBox<>();\n   private final Runnable readyCallback;\n \n   public DiceServerEditor(final Runnable readyCallback) {\n     this.readyCallback = readyCallback;\n     final int bottomSpace = 1;\n     final int labelSpace = 2;\n+\n+    final JPanel diceRollerOptions = new JPanel();\n+    diceRollerOptions.setLayout(new GridBagLayout());\n+    diceRollerOptions.setBorder(new TitledBorder(\"Dice Server Options\"));\n+    add(diceRollerOptions);\n+\n     int row = 0;\n-    diceRollersByDisplayName.keySet().forEach(servers::addItem);\n-    add(\n-        serverLabel,\n+    // Show the dice server URI only if it is set to a non-default value.\n+    if (!ClientSetting.diceRollerUri\n+        .getValueOrThrow()\n+        .equals(ClientSetting.diceRollerUri.getDefaultValue().orElseThrow())) {\n+      diceRollerOptions.add(\n+          new JLabel(\"Dice Server\"),\n+          new GridBagConstraints(\n+              0,\n+              row,\n+              1,\n+              1,\n+              0,\n+              0,\n+              GridBagConstraints.WEST,\n+              GridBagConstraints.NONE,\n+              new Insets(0, 0, bottomSpace, labelSpace),\n+              0,\n+              0));\n+      diceRollerOptions.add(\n+          new JLabel(ClientSetting.diceRollerUri.getValueOrThrow().toString()),\n+          new GridBagConstraints(\n+              1,\n+              row,\n+              2,\n+              1,\n+              1.0,\n+              0,\n+              GridBagConstraints.EAST,\n+              GridBagConstraints.HORIZONTAL,\n+              new Insets(0, 0, bottomSpace, 0),\n+              0,\n+              0));\n+      row++;\n+    }\n+\n+    diceRollerOptions.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60450875ec8c2f6316551bda30ca41a35bf55604"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDAyODA0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODoyMTo0MFrOFnPuTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODoyMTo0MFrOFnPuTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NjM5OA==", "bodyText": "Identical blocks of code found in 3 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376696398", "createdAt": "2020-02-08T08:21:40Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -68,8 +116,8 @@ public DiceServerEditor(final Runnable readyCallback) {\n             0,\n             0));\n     row++;\n-    add(\n-        toLabel,\n+    diceRollerOptions.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60450875ec8c2f6316551bda30ca41a35bf55604"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDAyODA1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODoyMTo0MFrOFnPuTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODoyMTo0MFrOFnPuTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NjM5OQ==", "bodyText": "Method diceRollerOverrideSelection has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376696399", "createdAt": "2020-02-08T08:21:40Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "diffHunk": "@@ -507,6 +508,91 @@ public void reset() {\n     };\n   }\n \n+  static SelectionComponent<JComponent> diceRollerOverrideSelection() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60450875ec8c2f6316551bda30ca41a35bf55604"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDAyODA2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODoyMTo0MFrOFnPuUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODoyMTo0MFrOFnPuUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NjQwMA==", "bodyText": "Identical blocks of code found in 3 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376696400", "createdAt": "2020-02-08T08:21:40Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -53,8 +101,8 @@ public DiceServerEditor(final Runnable readyCallback) {\n             new Insets(0, 0, bottomSpace, labelSpace),\n             0,\n             0));\n-    add(\n-        servers,\n+    diceRollerOptions.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60450875ec8c2f6316551bda30ca41a35bf55604"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDAyODA3OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODoyMTo0MVrOFnPuUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODoyMTo0MVrOFnPuUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NjQwMQ==", "bodyText": "Identical blocks of code found in 3 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376696401", "createdAt": "2020-02-08T08:21:41Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -82,8 +130,8 @@ public DiceServerEditor(final Runnable readyCallback) {\n             new Insets(0, 0, bottomSpace, labelSpace),\n             0,\n             0));\n-    add(\n-        toAddress,\n+    diceRollerOptions.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60450875ec8c2f6316551bda30ca41a35bf55604"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDAyODA4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODoyMTo0MVrOFnPuUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODoyMTo0MVrOFnPuUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NjQwMg==", "bodyText": "Identical blocks of code found in 3 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376696402", "createdAt": "2020-02-08T08:21:41Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -111,8 +160,8 @@ public DiceServerEditor(final Runnable readyCallback) {\n             new Insets(0, 0, bottomSpace, labelSpace),\n             0,\n             0));\n-    add(\n-        ccAddress,\n+    diceRollerOptions.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60450875ec8c2f6316551bda30ca41a35bf55604"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDAzMTQyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODozMTozNVrOFnPv3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODozMTozNVrOFnPv3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5Njc5Ng==", "bodyText": "Method diceRollerOverrideSelection has 73 lines of code (exceeds 25 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376696796", "createdAt": "2020-02-08T08:31:35Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "diffHunk": "@@ -507,6 +508,95 @@ public void reset() {\n     };\n   }\n \n+  static SelectionComponent<JComponent> diceRollerOverrideSelection() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5debf54718db6ac03c800f26db45f663717f60c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDAzMTQzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODozMTozNVrOFnPv3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODozMTozNVrOFnPv3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5Njc5Nw==", "bodyText": "Method diceRollerOverrideSelection has a Cognitive Complexity of 12 (exceeds 5 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376696797", "createdAt": "2020-02-08T08:31:35Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/settings/SelectionComponentFactory.java", "diffHunk": "@@ -507,6 +508,95 @@ public void reset() {\n     };\n   }\n \n+  static SelectionComponent<JComponent> diceRollerOverrideSelection() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5debf54718db6ac03c800f26db45f663717f60c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDE1NjQ2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxNDoxOToxOFrOFnQtWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwMjoxNzoyMVrOFnS7gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMjUzNw==", "bodyText": "Don't we usually store these in URL constants?", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376712537", "createdAt": "2020-02-08T14:19:18Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -1,46 +1,95 @@\n package games.strategy.engine.framework.startup.ui.editors;\n \n-import com.google.common.collect.ImmutableMap;\n import games.strategy.engine.data.properties.GameProperties;\n import games.strategy.engine.random.IRemoteDiceServer;\n import games.strategy.engine.random.PbemDiceRoller;\n import games.strategy.engine.random.PropertiesDiceRoller;\n+import games.strategy.triplea.UrlConstants;\n+import games.strategy.triplea.settings.ClientSetting;\n import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n import java.awt.Insets;\n-import java.util.function.Function;\n+import java.net.URI;\n import javax.swing.JButton;\n-import javax.swing.JComboBox;\n import javax.swing.JLabel;\n+import javax.swing.JPanel;\n import javax.swing.JTextField;\n+import javax.swing.border.TitledBorder;\n+import org.triplea.awt.OpenFileUtility;\n import org.triplea.domain.data.PlayerEmailValidation;\n import org.triplea.swing.DocumentListenerBuilder;\n+import org.triplea.swing.JButtonBuilder;\n \n /** A class to configure a Dice Server for the game. */\n public class DiceServerEditor extends EditorPanel {\n-  private static final long serialVersionUID = -451810815037661114L;\n-  private static final ImmutableMap<String, PropertiesDiceRoller> diceRollersByDisplayName =\n-      PropertiesDiceRoller.loadFromFile().stream()\n-          .collect(\n-              ImmutableMap.toImmutableMap(IRemoteDiceServer::getDisplayName, Function.identity()));\n+  public static final URI PRODUCTION_URI = URI.create(\"https://dice.marti.triplea-game.org\");\n+  public static final URI PRE_RELEASE_URI =\n+      URI.create(\"https://prerelease.dice.marti.triplea-game.org\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d744e9ab968103070290993283fe9d8e2969aa62"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0ODkzMQ==", "bodyText": "Links that go to webpages, yes. This URI is more akin to say the lobby that we keep in a live-file. The UI class is not the best home for it, but it's at least somewhat localized to its usage. If we were to put these links in the URI constants, we may see problems unless the links were guarantee'd to give us 200's. Ultimately the URL constants is largely more for webpage links as opposed to service URLs.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376748931", "createdAt": "2020-02-09T02:17:21Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -1,46 +1,95 @@\n package games.strategy.engine.framework.startup.ui.editors;\n \n-import com.google.common.collect.ImmutableMap;\n import games.strategy.engine.data.properties.GameProperties;\n import games.strategy.engine.random.IRemoteDiceServer;\n import games.strategy.engine.random.PbemDiceRoller;\n import games.strategy.engine.random.PropertiesDiceRoller;\n+import games.strategy.triplea.UrlConstants;\n+import games.strategy.triplea.settings.ClientSetting;\n import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n import java.awt.Insets;\n-import java.util.function.Function;\n+import java.net.URI;\n import javax.swing.JButton;\n-import javax.swing.JComboBox;\n import javax.swing.JLabel;\n+import javax.swing.JPanel;\n import javax.swing.JTextField;\n+import javax.swing.border.TitledBorder;\n+import org.triplea.awt.OpenFileUtility;\n import org.triplea.domain.data.PlayerEmailValidation;\n import org.triplea.swing.DocumentListenerBuilder;\n+import org.triplea.swing.JButtonBuilder;\n \n /** A class to configure a Dice Server for the game. */\n public class DiceServerEditor extends EditorPanel {\n-  private static final long serialVersionUID = -451810815037661114L;\n-  private static final ImmutableMap<String, PropertiesDiceRoller> diceRollersByDisplayName =\n-      PropertiesDiceRoller.loadFromFile().stream()\n-          .collect(\n-              ImmutableMap.toImmutableMap(IRemoteDiceServer::getDisplayName, Function.identity()));\n+  public static final URI PRODUCTION_URI = URI.create(\"https://dice.marti.triplea-game.org\");\n+  public static final URI PRE_RELEASE_URI =\n+      URI.create(\"https://prerelease.dice.marti.triplea-game.org\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMjUzNw=="}, "originalCommit": {"oid": "d744e9ab968103070290993283fe9d8e2969aa62"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDE1ODYyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxNDoyMzo0NFrOFnQuWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwMjoxODo1MVrOFnS70Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMjc5NA==", "bodyText": "I wonder why you're not using the constraint builder here?", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376712794", "createdAt": "2020-02-08T14:23:44Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -1,46 +1,95 @@\n package games.strategy.engine.framework.startup.ui.editors;\n \n-import com.google.common.collect.ImmutableMap;\n import games.strategy.engine.data.properties.GameProperties;\n import games.strategy.engine.random.IRemoteDiceServer;\n import games.strategy.engine.random.PbemDiceRoller;\n import games.strategy.engine.random.PropertiesDiceRoller;\n+import games.strategy.triplea.UrlConstants;\n+import games.strategy.triplea.settings.ClientSetting;\n import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n import java.awt.Insets;\n-import java.util.function.Function;\n+import java.net.URI;\n import javax.swing.JButton;\n-import javax.swing.JComboBox;\n import javax.swing.JLabel;\n+import javax.swing.JPanel;\n import javax.swing.JTextField;\n+import javax.swing.border.TitledBorder;\n+import org.triplea.awt.OpenFileUtility;\n import org.triplea.domain.data.PlayerEmailValidation;\n import org.triplea.swing.DocumentListenerBuilder;\n+import org.triplea.swing.JButtonBuilder;\n \n /** A class to configure a Dice Server for the game. */\n public class DiceServerEditor extends EditorPanel {\n-  private static final long serialVersionUID = -451810815037661114L;\n-  private static final ImmutableMap<String, PropertiesDiceRoller> diceRollersByDisplayName =\n-      PropertiesDiceRoller.loadFromFile().stream()\n-          .collect(\n-              ImmutableMap.toImmutableMap(IRemoteDiceServer::getDisplayName, Function.identity()));\n+  public static final URI PRODUCTION_URI = URI.create(\"https://dice.marti.triplea-game.org\");\n+  public static final URI PRE_RELEASE_URI =\n+      URI.create(\"https://prerelease.dice.marti.triplea-game.org\");\n \n+  private static final long serialVersionUID = -451810815037661114L;\n+  private final JButton registerButton =\n+      new JButtonBuilder(\"Register\")\n+          .actionListener(() -> OpenFileUtility.openUrl(UrlConstants.MARTI_REGISTRATION))\n+          .toolTip(\n+              \"<html>Opens email registration page to register with MARTI dice-roller.<br>\"\n+                  + \"Needs to be done once before MARTI dice server can be used.</html>\")\n+          .build();\n   private final JButton testDiceButton = new JButton(\"Test Server\");\n   private final JTextField toAddress = new JTextField();\n   private final JTextField ccAddress = new JTextField();\n   private final JTextField gameId = new JTextField();\n-  private final JLabel serverLabel = new JLabel(\"Servers:\");\n   private final JLabel toLabel = new JLabel(\"To:\");\n   private final JLabel ccLabel = new JLabel(\"Cc:\");\n-  private final JComboBox<String> servers = new JComboBox<>();\n   private final Runnable readyCallback;\n \n   public DiceServerEditor(final Runnable readyCallback) {\n     this.readyCallback = readyCallback;\n     final int bottomSpace = 1;\n     final int labelSpace = 2;\n+\n+    final JPanel diceRollerOptions = new JPanel();\n+    diceRollerOptions.setLayout(new GridBagLayout());\n+    diceRollerOptions.setBorder(new TitledBorder(\"Dice Server Options\"));\n+    add(diceRollerOptions);\n+\n     int row = 0;\n-    diceRollersByDisplayName.keySet().forEach(servers::addItem);\n-    add(\n-        serverLabel,\n+    // Show the dice server URI only if it is set to a non-default value.\n+    if (!ClientSetting.diceRollerUri\n+        .getValueOrThrow()\n+        .equals(ClientSetting.diceRollerUri.getDefaultValue().orElseThrow())) {\n+      diceRollerOptions.add(\n+          new JLabel(\"Dice Server\"),\n+          new GridBagConstraints(\n+              0,\n+              row,\n+              1,\n+              1,\n+              0,\n+              0,\n+              GridBagConstraints.WEST,\n+              GridBagConstraints.NONE,\n+              new Insets(0, 0, bottomSpace, labelSpace),\n+              0,\n+              0));\n+      diceRollerOptions.add(\n+          new JLabel(ClientSetting.diceRollerUri.getValueOrThrow().toString()),\n+          new GridBagConstraints(\n+              1,\n+              row,\n+              2,\n+              1,\n+              1.0,\n+              0,\n+              GridBagConstraints.EAST,\n+              GridBagConstraints.HORIZONTAL,\n+              new Insets(0, 0, bottomSpace, 0),\n+              0,\n+              0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d744e9ab968103070290993283fe9d8e2969aa62"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0OTAwOQ==", "bodyText": "Trying to keep the scope of updates tighter and consistent. IE: the commit list is relatively strategic, not wanting to mix in generalized cleanup/refactor here.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376749009", "createdAt": "2020-02-09T02:18:51Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -1,46 +1,95 @@\n package games.strategy.engine.framework.startup.ui.editors;\n \n-import com.google.common.collect.ImmutableMap;\n import games.strategy.engine.data.properties.GameProperties;\n import games.strategy.engine.random.IRemoteDiceServer;\n import games.strategy.engine.random.PbemDiceRoller;\n import games.strategy.engine.random.PropertiesDiceRoller;\n+import games.strategy.triplea.UrlConstants;\n+import games.strategy.triplea.settings.ClientSetting;\n import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n import java.awt.Insets;\n-import java.util.function.Function;\n+import java.net.URI;\n import javax.swing.JButton;\n-import javax.swing.JComboBox;\n import javax.swing.JLabel;\n+import javax.swing.JPanel;\n import javax.swing.JTextField;\n+import javax.swing.border.TitledBorder;\n+import org.triplea.awt.OpenFileUtility;\n import org.triplea.domain.data.PlayerEmailValidation;\n import org.triplea.swing.DocumentListenerBuilder;\n+import org.triplea.swing.JButtonBuilder;\n \n /** A class to configure a Dice Server for the game. */\n public class DiceServerEditor extends EditorPanel {\n-  private static final long serialVersionUID = -451810815037661114L;\n-  private static final ImmutableMap<String, PropertiesDiceRoller> diceRollersByDisplayName =\n-      PropertiesDiceRoller.loadFromFile().stream()\n-          .collect(\n-              ImmutableMap.toImmutableMap(IRemoteDiceServer::getDisplayName, Function.identity()));\n+  public static final URI PRODUCTION_URI = URI.create(\"https://dice.marti.triplea-game.org\");\n+  public static final URI PRE_RELEASE_URI =\n+      URI.create(\"https://prerelease.dice.marti.triplea-game.org\");\n \n+  private static final long serialVersionUID = -451810815037661114L;\n+  private final JButton registerButton =\n+      new JButtonBuilder(\"Register\")\n+          .actionListener(() -> OpenFileUtility.openUrl(UrlConstants.MARTI_REGISTRATION))\n+          .toolTip(\n+              \"<html>Opens email registration page to register with MARTI dice-roller.<br>\"\n+                  + \"Needs to be done once before MARTI dice server can be used.</html>\")\n+          .build();\n   private final JButton testDiceButton = new JButton(\"Test Server\");\n   private final JTextField toAddress = new JTextField();\n   private final JTextField ccAddress = new JTextField();\n   private final JTextField gameId = new JTextField();\n-  private final JLabel serverLabel = new JLabel(\"Servers:\");\n   private final JLabel toLabel = new JLabel(\"To:\");\n   private final JLabel ccLabel = new JLabel(\"Cc:\");\n-  private final JComboBox<String> servers = new JComboBox<>();\n   private final Runnable readyCallback;\n \n   public DiceServerEditor(final Runnable readyCallback) {\n     this.readyCallback = readyCallback;\n     final int bottomSpace = 1;\n     final int labelSpace = 2;\n+\n+    final JPanel diceRollerOptions = new JPanel();\n+    diceRollerOptions.setLayout(new GridBagLayout());\n+    diceRollerOptions.setBorder(new TitledBorder(\"Dice Server Options\"));\n+    add(diceRollerOptions);\n+\n     int row = 0;\n-    diceRollersByDisplayName.keySet().forEach(servers::addItem);\n-    add(\n-        serverLabel,\n+    // Show the dice server URI only if it is set to a non-default value.\n+    if (!ClientSetting.diceRollerUri\n+        .getValueOrThrow()\n+        .equals(ClientSetting.diceRollerUri.getDefaultValue().orElseThrow())) {\n+      diceRollerOptions.add(\n+          new JLabel(\"Dice Server\"),\n+          new GridBagConstraints(\n+              0,\n+              row,\n+              1,\n+              1,\n+              0,\n+              0,\n+              GridBagConstraints.WEST,\n+              GridBagConstraints.NONE,\n+              new Insets(0, 0, bottomSpace, labelSpace),\n+              0,\n+              0));\n+      diceRollerOptions.add(\n+          new JLabel(ClientSetting.diceRollerUri.getValueOrThrow().toString()),\n+          new GridBagConstraints(\n+              1,\n+              row,\n+              2,\n+              1,\n+              1.0,\n+              0,\n+              GridBagConstraints.EAST,\n+              GridBagConstraints.HORIZONTAL,\n+              new Insets(0, 0, bottomSpace, 0),\n+              0,\n+              0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMjc5NA=="}, "originalCommit": {"oid": "d744e9ab968103070290993283fe9d8e2969aa62"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDE2MDYxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxNDoyODowN1rOFnQvTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwMzozMDo0NVrOFnTGcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMzAzNg==", "bodyText": "Correct me if I'm wrong, but this basically makes the dice server choice independent from the game and makes it a user preference rather than an agreement between 2 players playing PbF/PbEM, right?", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376713036", "createdAt": "2020-02-08T14:28:07Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -188,39 +222,41 @@ private void checkFieldsAndNotify() {\n   }\n \n   public boolean areFieldsValid() {\n-    final String toAddressText = toAddress.getText();\n     final boolean toValid =\n         setLabelValid(\n-            !toAddressText.isEmpty() && PlayerEmailValidation.isValid(toAddressText), toLabel);\n+            !toAddress.getText().isEmpty() && PlayerEmailValidation.isValid(toAddress.getText()),\n+            toLabel);\n     final boolean ccValid =\n-        setLabelValid(PlayerEmailValidation.isValid(ccAddress.getText()), ccLabel);\n-    final boolean serverValid = validateComboBox(servers, serverLabel);\n-    final boolean allValid = serverValid && toValid && ccValid;\n+        setLabelValid(\n+            !ccAddress.getText().isEmpty() && PlayerEmailValidation.isValid(ccAddress.getText()),\n+            ccLabel);\n+    final boolean allValid = toValid && ccValid;\n     testDiceButton.setEnabled(allValid);\n+    testDiceButton.setToolTipText(\n+        allValid\n+            ? \"Send a verified dice roll test email\"\n+            : \"First enter a valid 'to' and 'cc' email address\");\n     return allValid;\n   }\n \n   public void applyToGameProperties(final GameProperties properties) {\n-    properties.set(IRemoteDiceServer.NAME, servers.getSelectedItem());\n     properties.set(IRemoteDiceServer.GAME_NAME, gameId.getText());\n     properties.set(IRemoteDiceServer.EMAIL_1, toAddress.getText());\n     properties.set(IRemoteDiceServer.EMAIL_2, ccAddress.getText());\n   }\n \n   public void populateFromGameProperties(final GameProperties properties) {\n-    servers.setSelectedItem(properties.get(IRemoteDiceServer.NAME));\n     gameId.setText(properties.get(IRemoteDiceServer.GAME_NAME, \"\"));\n     toAddress.setText(properties.get(IRemoteDiceServer.EMAIL_1, \"\"));\n     ccAddress.setText(properties.get(IRemoteDiceServer.EMAIL_2, \"\"));\n   }\n \n   public IRemoteDiceServer newDiceServer() {\n-    final String selectedName = (String) servers.getSelectedItem();\n-    assert selectedName != null;\n-    final PropertiesDiceRoller roller = diceRollersByDisplayName.get(selectedName);\n-    roller.setGameId(gameId.getText());\n-    roller.setToAddress(toAddress.getText());\n-    roller.setCcAddress(ccAddress.getText());\n-    return roller;\n+    return PropertiesDiceRoller.builder()\n+        .diceRollerUri(ClientSetting.diceRollerUri.getValueOrThrow())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d744e9ab968103070290993283fe9d8e2969aa62"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0OTI5Ng==", "bodyText": "Well, the preference choice is largely for auto-completion when loading a save. A person could change their properties file to use a different dice roller, they could launch a game, change the server, roll dice, and then change the server back before sending and emailing the game.\n#thinkingOutLoud\nUltimately we would want to consider some sort of HMAC'ing scheme to really verify dice rolling integrity. IE: dice roller uses a private key to concat to a seqeunce of dice rolls and produces an HMAC from this. We could then verify that given an HMAC and a sequence that a specific roller did roll those results. We'd need to augment the dice roll data though to also include a dice roll id, in which case we'd have a data set like:\n<100, 1>\n<101, 3>\n<102, 5>\n<103, 2>\n<104, 6>\n\nWe'd then sequence it, like: 10011013102510321046, append the private salt value, and then HMAC it.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376749296", "createdAt": "2020-02-09T02:26:02Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -188,39 +222,41 @@ private void checkFieldsAndNotify() {\n   }\n \n   public boolean areFieldsValid() {\n-    final String toAddressText = toAddress.getText();\n     final boolean toValid =\n         setLabelValid(\n-            !toAddressText.isEmpty() && PlayerEmailValidation.isValid(toAddressText), toLabel);\n+            !toAddress.getText().isEmpty() && PlayerEmailValidation.isValid(toAddress.getText()),\n+            toLabel);\n     final boolean ccValid =\n-        setLabelValid(PlayerEmailValidation.isValid(ccAddress.getText()), ccLabel);\n-    final boolean serverValid = validateComboBox(servers, serverLabel);\n-    final boolean allValid = serverValid && toValid && ccValid;\n+        setLabelValid(\n+            !ccAddress.getText().isEmpty() && PlayerEmailValidation.isValid(ccAddress.getText()),\n+            ccLabel);\n+    final boolean allValid = toValid && ccValid;\n     testDiceButton.setEnabled(allValid);\n+    testDiceButton.setToolTipText(\n+        allValid\n+            ? \"Send a verified dice roll test email\"\n+            : \"First enter a valid 'to' and 'cc' email address\");\n     return allValid;\n   }\n \n   public void applyToGameProperties(final GameProperties properties) {\n-    properties.set(IRemoteDiceServer.NAME, servers.getSelectedItem());\n     properties.set(IRemoteDiceServer.GAME_NAME, gameId.getText());\n     properties.set(IRemoteDiceServer.EMAIL_1, toAddress.getText());\n     properties.set(IRemoteDiceServer.EMAIL_2, ccAddress.getText());\n   }\n \n   public void populateFromGameProperties(final GameProperties properties) {\n-    servers.setSelectedItem(properties.get(IRemoteDiceServer.NAME));\n     gameId.setText(properties.get(IRemoteDiceServer.GAME_NAME, \"\"));\n     toAddress.setText(properties.get(IRemoteDiceServer.EMAIL_1, \"\"));\n     ccAddress.setText(properties.get(IRemoteDiceServer.EMAIL_2, \"\"));\n   }\n \n   public IRemoteDiceServer newDiceServer() {\n-    final String selectedName = (String) servers.getSelectedItem();\n-    assert selectedName != null;\n-    final PropertiesDiceRoller roller = diceRollersByDisplayName.get(selectedName);\n-    roller.setGameId(gameId.getText());\n-    roller.setToAddress(toAddress.getText());\n-    roller.setCcAddress(ccAddress.getText());\n-    return roller;\n+    return PropertiesDiceRoller.builder()\n+        .diceRollerUri(ClientSetting.diceRollerUri.getValueOrThrow())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMzAzNg=="}, "originalCommit": {"oid": "d744e9ab968103070290993283fe9d8e2969aa62"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1MTczMQ==", "bodyText": "I have thought about this for a long time in the past and all of my approaches had one of 2 issues:\n\nIf a battle turns out to be a bad decision, a user can just reload the savegame and try again until the same battle is won. Without any public notification of rolls (which is currently done via emails) there's no way to prevent re-loading.\nWe could of course make battles deterministic by using a pseudo-random algorithm and just use a server signed random value to initialize it. This way every roll could be verified. But the determinism can be abused as well by just not fighting the battles you're guaranteed to lose.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376751731", "createdAt": "2020-02-09T03:30:45Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/editors/DiceServerEditor.java", "diffHunk": "@@ -188,39 +222,41 @@ private void checkFieldsAndNotify() {\n   }\n \n   public boolean areFieldsValid() {\n-    final String toAddressText = toAddress.getText();\n     final boolean toValid =\n         setLabelValid(\n-            !toAddressText.isEmpty() && PlayerEmailValidation.isValid(toAddressText), toLabel);\n+            !toAddress.getText().isEmpty() && PlayerEmailValidation.isValid(toAddress.getText()),\n+            toLabel);\n     final boolean ccValid =\n-        setLabelValid(PlayerEmailValidation.isValid(ccAddress.getText()), ccLabel);\n-    final boolean serverValid = validateComboBox(servers, serverLabel);\n-    final boolean allValid = serverValid && toValid && ccValid;\n+        setLabelValid(\n+            !ccAddress.getText().isEmpty() && PlayerEmailValidation.isValid(ccAddress.getText()),\n+            ccLabel);\n+    final boolean allValid = toValid && ccValid;\n     testDiceButton.setEnabled(allValid);\n+    testDiceButton.setToolTipText(\n+        allValid\n+            ? \"Send a verified dice roll test email\"\n+            : \"First enter a valid 'to' and 'cc' email address\");\n     return allValid;\n   }\n \n   public void applyToGameProperties(final GameProperties properties) {\n-    properties.set(IRemoteDiceServer.NAME, servers.getSelectedItem());\n     properties.set(IRemoteDiceServer.GAME_NAME, gameId.getText());\n     properties.set(IRemoteDiceServer.EMAIL_1, toAddress.getText());\n     properties.set(IRemoteDiceServer.EMAIL_2, ccAddress.getText());\n   }\n \n   public void populateFromGameProperties(final GameProperties properties) {\n-    servers.setSelectedItem(properties.get(IRemoteDiceServer.NAME));\n     gameId.setText(properties.get(IRemoteDiceServer.GAME_NAME, \"\"));\n     toAddress.setText(properties.get(IRemoteDiceServer.EMAIL_1, \"\"));\n     ccAddress.setText(properties.get(IRemoteDiceServer.EMAIL_2, \"\"));\n   }\n \n   public IRemoteDiceServer newDiceServer() {\n-    final String selectedName = (String) servers.getSelectedItem();\n-    assert selectedName != null;\n-    final PropertiesDiceRoller roller = diceRollersByDisplayName.get(selectedName);\n-    roller.setGameId(gameId.getText());\n-    roller.setToAddress(toAddress.getText());\n-    roller.setCcAddress(ccAddress.getText());\n-    return roller;\n+    return PropertiesDiceRoller.builder()\n+        .diceRollerUri(ClientSetting.diceRollerUri.getValueOrThrow())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMzAzNg=="}, "originalCommit": {"oid": "d744e9ab968103070290993283fe9d8e2969aa62"}, "originalPosition": 265}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDE2MjAwOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/random/PropertiesDiceRoller.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxNDozMToxM1rOFnQwAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwMjozNDowN1rOFnS-KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMzIxOA==", "bodyText": "The class name is now no longer accurate, with this update it becomes a MartiDiceRoller instead", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376713218", "createdAt": "2020-02-08T14:31:13Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/random/PropertiesDiceRoller.java", "diffHunk": "@@ -39,57 +33,31 @@\n import org.apache.http.message.BasicNameValuePair;\n import org.apache.http.protocol.HttpContext;\n import org.apache.http.util.EntityUtils;\n-import org.triplea.io.FileUtils;\n \n /** A pbem dice roller that reads its configuration from a properties file. */\n @Log\n+@Builder\n public final class PropertiesDiceRoller implements IRemoteDiceServer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d744e9ab968103070290993283fe9d8e2969aa62"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0OTM2NA==", "bodyText": "That's a good rename. I'd suggest that the properties were pretty tightly coupled with martidiceroller to begin with. Even though the details were extracted to a properties file, they were still coupled to marti.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376749364", "createdAt": "2020-02-09T02:27:47Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/random/PropertiesDiceRoller.java", "diffHunk": "@@ -39,57 +33,31 @@\n import org.apache.http.message.BasicNameValuePair;\n import org.apache.http.protocol.HttpContext;\n import org.apache.http.util.EntityUtils;\n-import org.triplea.io.FileUtils;\n \n /** A pbem dice roller that reads its configuration from a properties file. */\n @Log\n+@Builder\n public final class PropertiesDiceRoller implements IRemoteDiceServer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMzIxOA=="}, "originalCommit": {"oid": "d744e9ab968103070290993283fe9d8e2969aa62"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0OTU0OQ==", "bodyText": "I kinda feel like the dice roller client class here should be suffixed client. Not sure if that is really an improvement as IRemoteDiceServer is also a bit misleading too considering this class is not a server but an interface to a server.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376749549", "createdAt": "2020-02-09T02:32:49Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/random/PropertiesDiceRoller.java", "diffHunk": "@@ -39,57 +33,31 @@\n import org.apache.http.message.BasicNameValuePair;\n import org.apache.http.protocol.HttpContext;\n import org.apache.http.util.EntityUtils;\n-import org.triplea.io.FileUtils;\n \n /** A pbem dice roller that reads its configuration from a properties file. */\n @Log\n+@Builder\n public final class PropertiesDiceRoller implements IRemoteDiceServer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMzIxOA=="}, "originalCommit": {"oid": "d744e9ab968103070290993283fe9d8e2969aa62"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0OTYwOQ==", "bodyText": "Renamed: 1343a87", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376749609", "createdAt": "2020-02-09T02:34:07Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/random/PropertiesDiceRoller.java", "diffHunk": "@@ -39,57 +33,31 @@\n import org.apache.http.message.BasicNameValuePair;\n import org.apache.http.protocol.HttpContext;\n import org.apache.http.util.EntityUtils;\n-import org.triplea.io.FileUtils;\n \n /** A pbem dice roller that reads its configuration from a properties file. */\n @Log\n+@Builder\n public final class PropertiesDiceRoller implements IRemoteDiceServer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMzIxOA=="}, "originalCommit": {"oid": "d744e9ab968103070290993283fe9d8e2969aa62"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDE2MzAxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/random/PropertiesDiceRoller.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxNDozNDowOFrOFnQwlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwMjozMDowMlrOFnS9gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMzM2NQ==", "bodyText": "I know this is just copied over, but InvocationTargetException is really not appropriate here, but probably caught somewhere up in the stack", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376713365", "createdAt": "2020-02-08T14:34:08Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/random/PropertiesDiceRoller.java", "diffHunk": "@@ -128,32 +93,21 @@ public String postRequest(\n   @Override\n   public int[] getDice(final String string, final int count)\n       throws IOException, InvocationTargetException {\n-    final String errorStartString = props.getProperty(\"error.start\");\n-    final String errorEndString = props.getProperty(\"error.end\");\n-    // if the error strings are defined\n-    if (errorStartString != null\n-        && errorStartString.length() > 0\n-        && errorEndString != null\n-        && errorEndString.length() > 0) {\n-      final int startIndex = string.indexOf(errorStartString);\n-      if (startIndex >= 0) {\n-        final int endIndex =\n-            string.indexOf(errorEndString, (startIndex + errorStartString.length()));\n-        if (endIndex > 0) {\n-          final String error = string.substring(startIndex + errorStartString.length(), endIndex);\n-          throw new InvocationTargetException(null, error);\n-        }\n+    final String errorStartString = \"fatal error:\";\n+    final String errorEndString = \"!\";\n+    final int errorStringStartIndex = string.indexOf(errorStartString);\n+    if (errorStringStartIndex >= 0) {\n+      final int endIndex =\n+          string.indexOf(errorEndString, (errorStringStartIndex + errorStartString.length()));\n+      if (endIndex > 0) {\n+        final String error =\n+            string.substring(errorStringStartIndex + errorStartString.length(), endIndex);\n+        throw new InvocationTargetException(null, error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d744e9ab968103070290993283fe9d8e2969aa62"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNDk1Mw==", "bodyText": "Just a silly thought:\nWe could turn this into a regex and shorten this code to:\nPattern pattern = Pattern.compile(\"fatal error:(.*)!\");\nMatcher matcher = pattern.matcher(string);\nif (matcher.find()) {\n  throw new InvocationTargetException(null, matcher.group(1));\n}", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376714953", "createdAt": "2020-02-08T15:05:51Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/random/PropertiesDiceRoller.java", "diffHunk": "@@ -128,32 +93,21 @@ public String postRequest(\n   @Override\n   public int[] getDice(final String string, final int count)\n       throws IOException, InvocationTargetException {\n-    final String errorStartString = props.getProperty(\"error.start\");\n-    final String errorEndString = props.getProperty(\"error.end\");\n-    // if the error strings are defined\n-    if (errorStartString != null\n-        && errorStartString.length() > 0\n-        && errorEndString != null\n-        && errorEndString.length() > 0) {\n-      final int startIndex = string.indexOf(errorStartString);\n-      if (startIndex >= 0) {\n-        final int endIndex =\n-            string.indexOf(errorEndString, (startIndex + errorStartString.length()));\n-        if (endIndex > 0) {\n-          final String error = string.substring(startIndex + errorStartString.length(), endIndex);\n-          throw new InvocationTargetException(null, error);\n-        }\n+    final String errorStartString = \"fatal error:\";\n+    final String errorEndString = \"!\";\n+    final int errorStringStartIndex = string.indexOf(errorStartString);\n+    if (errorStringStartIndex >= 0) {\n+      final int endIndex =\n+          string.indexOf(errorEndString, (errorStringStartIndex + errorStartString.length()));\n+      if (endIndex > 0) {\n+        final String error =\n+            string.substring(errorStringStartIndex + errorStartString.length(), endIndex);\n+        throw new InvocationTargetException(null, error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMzM2NQ=="}, "originalCommit": {"oid": "d744e9ab968103070290993283fe9d8e2969aa62"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0OTQ0MA==", "bodyText": "I think the InvocationTargetException might be for the benefit of remote method invocation. Though, that's getting pretty silly if a client communicates to server for the server to communicate with MARTI to do dice rolls.\nGiven I'm not set up to test this (would be a great place to have some test infrastructure, unit + iontegrated),  it's risky to update this and drags the scope of change out to be much larger and unrelated to dropping the dice server selection from the dice editor screen.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376749440", "createdAt": "2020-02-09T02:30:02Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/random/PropertiesDiceRoller.java", "diffHunk": "@@ -128,32 +93,21 @@ public String postRequest(\n   @Override\n   public int[] getDice(final String string, final int count)\n       throws IOException, InvocationTargetException {\n-    final String errorStartString = props.getProperty(\"error.start\");\n-    final String errorEndString = props.getProperty(\"error.end\");\n-    // if the error strings are defined\n-    if (errorStartString != null\n-        && errorStartString.length() > 0\n-        && errorEndString != null\n-        && errorEndString.length() > 0) {\n-      final int startIndex = string.indexOf(errorStartString);\n-      if (startIndex >= 0) {\n-        final int endIndex =\n-            string.indexOf(errorEndString, (startIndex + errorStartString.length()));\n-        if (endIndex > 0) {\n-          final String error = string.substring(startIndex + errorStartString.length(), endIndex);\n-          throw new InvocationTargetException(null, error);\n-        }\n+    final String errorStartString = \"fatal error:\";\n+    final String errorEndString = \"!\";\n+    final int errorStringStartIndex = string.indexOf(errorStartString);\n+    if (errorStringStartIndex >= 0) {\n+      final int endIndex =\n+          string.indexOf(errorEndString, (errorStringStartIndex + errorStartString.length()));\n+      if (endIndex > 0) {\n+        final String error =\n+            string.substring(errorStringStartIndex + errorStartString.length(), endIndex);\n+        throw new InvocationTargetException(null, error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMzM2NQ=="}, "originalCommit": {"oid": "d744e9ab968103070290993283fe9d8e2969aa62"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDE3NzAxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/random/PropertiesDiceRoller.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxNToxMDozNlrOFnQ3vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwMjozMDo1N1rOFnS9sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNTE5OA==", "bodyText": "Same here with the preprocessing step:\nPattern pattern = Pattern.compile(\"your dice are:(.*)<p>\");\n// Side Note: When using Pattern.compile(\"your dice are:(\\s*\\d+\\s*(?:,\\s*\\d+\\s*)*)<p>\")\n// you could probably avoid having the try-catch block below\nMatcher matcher = pattern.matcher(string);\nif (!matcher.find()) {\n  throw new IOException(\"String doesn't contain dice information\");\n}\n\n// Existing code...\n// replace string.substring(startIndex, endIndex) with matcher.group(1) below", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376715198", "createdAt": "2020-02-08T15:10:36Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/random/PropertiesDiceRoller.java", "diffHunk": "@@ -128,32 +93,21 @@ public String postRequest(\n   @Override\n   public int[] getDice(final String string, final int count)\n       throws IOException, InvocationTargetException {\n-    final String errorStartString = props.getProperty(\"error.start\");\n-    final String errorEndString = props.getProperty(\"error.end\");\n-    // if the error strings are defined\n-    if (errorStartString != null\n-        && errorStartString.length() > 0\n-        && errorEndString != null\n-        && errorEndString.length() > 0) {\n-      final int startIndex = string.indexOf(errorStartString);\n-      if (startIndex >= 0) {\n-        final int endIndex =\n-            string.indexOf(errorEndString, (startIndex + errorStartString.length()));\n-        if (endIndex > 0) {\n-          final String error = string.substring(startIndex + errorStartString.length(), endIndex);\n-          throw new InvocationTargetException(null, error);\n-        }\n+    final String errorStartString = \"fatal error:\";\n+    final String errorEndString = \"!\";\n+    final int errorStringStartIndex = string.indexOf(errorStartString);\n+    if (errorStringStartIndex >= 0) {\n+      final int endIndex =\n+          string.indexOf(errorEndString, (errorStringStartIndex + errorStartString.length()));\n+      if (endIndex > 0) {\n+        final String error =\n+            string.substring(errorStringStartIndex + errorStartString.length(), endIndex);\n+        throw new InvocationTargetException(null, error);\n       }\n     }\n-    final String rollStartString;\n-    final String rollEndString;\n-    if (count == 1) {\n-      rollStartString = props.getProperty(\"roll.single.start\");\n-      rollEndString = props.getProperty(\"roll.single.end\");\n-    } else {\n-      rollStartString = props.getProperty(\"roll.multiple.start\");\n-      rollEndString = props.getProperty(\"roll.multiple.end\");\n-    }\n+\n+    final String rollStartString = \"your dice are:\";\n+    final String rollEndString = \"<p>\";\n     int startIndex = string.indexOf(rollStartString);\n     if (startIndex == -1) {\n       throw new IOException(\"Could not find start index, text returned is:\" + string);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d744e9ab968103070290993283fe9d8e2969aa62"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0OTQ4OQ==", "bodyText": "Agree, looks right, though same response that unless/until we are also willing to test this, it's a risky change to make.\nStepping back, the content is being served as HTML from MARTI, we will be moving to a JSON. It may be more worthwhile to replace rather than improve this code with a JSON API.", "url": "https://github.com/triplea-game/triplea/pull/5912#discussion_r376749489", "createdAt": "2020-02-09T02:30:57Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/random/PropertiesDiceRoller.java", "diffHunk": "@@ -128,32 +93,21 @@ public String postRequest(\n   @Override\n   public int[] getDice(final String string, final int count)\n       throws IOException, InvocationTargetException {\n-    final String errorStartString = props.getProperty(\"error.start\");\n-    final String errorEndString = props.getProperty(\"error.end\");\n-    // if the error strings are defined\n-    if (errorStartString != null\n-        && errorStartString.length() > 0\n-        && errorEndString != null\n-        && errorEndString.length() > 0) {\n-      final int startIndex = string.indexOf(errorStartString);\n-      if (startIndex >= 0) {\n-        final int endIndex =\n-            string.indexOf(errorEndString, (startIndex + errorStartString.length()));\n-        if (endIndex > 0) {\n-          final String error = string.substring(startIndex + errorStartString.length(), endIndex);\n-          throw new InvocationTargetException(null, error);\n-        }\n+    final String errorStartString = \"fatal error:\";\n+    final String errorEndString = \"!\";\n+    final int errorStringStartIndex = string.indexOf(errorStartString);\n+    if (errorStringStartIndex >= 0) {\n+      final int endIndex =\n+          string.indexOf(errorEndString, (errorStringStartIndex + errorStartString.length()));\n+      if (endIndex > 0) {\n+        final String error =\n+            string.substring(errorStringStartIndex + errorStartString.length(), endIndex);\n+        throw new InvocationTargetException(null, error);\n       }\n     }\n-    final String rollStartString;\n-    final String rollEndString;\n-    if (count == 1) {\n-      rollStartString = props.getProperty(\"roll.single.start\");\n-      rollEndString = props.getProperty(\"roll.single.end\");\n-    } else {\n-      rollStartString = props.getProperty(\"roll.multiple.start\");\n-      rollEndString = props.getProperty(\"roll.multiple.end\");\n-    }\n+\n+    final String rollStartString = \"your dice are:\";\n+    final String rollEndString = \"<p>\";\n     int startIndex = string.indexOf(rollStartString);\n     if (startIndex == -1) {\n       throw new IOException(\"Could not find start index, text returned is:\" + string);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNTE5OA=="}, "originalCommit": {"oid": "d744e9ab968103070290993283fe9d8e2969aa62"}, "originalPosition": 177}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2455, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}