{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MTM4NjIw", "number": 6466, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjowODo1OFrOD76-_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzozNjowMFrOD9Cpog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTU4OTc1OnYy", "diffSide": "RIGHT", "path": "java-extras/src/main/java/org/triplea/java/DateTimeUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjowODo1OFrOGUirlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjowODo1OFrOGUirlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE5MjkxNg==", "bodyText": "Method utcInstantOf has 5 arguments (exceeds 4 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424192916", "createdAt": "2020-05-13T06:08:58Z", "author": {"login": "codeclimate"}, "path": "java-extras/src/main/java/org/triplea/java/DateTimeUtil.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.triplea.java;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.FormatStyle;\n+import java.util.Locale;\n+import java.util.Locale.Category;\n+import lombok.experimental.UtilityClass;\n+\n+/** Provides methods for getting time and date instances. */\n+@UtilityClass\n+public final class DateTimeUtil {\n+  @VisibleForTesting static ZoneId defaultZoneId = ZoneId.systemDefault();\n+  @VisibleForTesting static Clock clock = Clock.system(defaultZoneId);\n+  @VisibleForTesting static Locale defaultLocale = Locale.getDefault(Category.FORMAT);\n+\n+  /**\n+   * Returns a String representing the current {@link LocalDateTime}. Based on where you live this\n+   * might be either for example 13:45 or 1:45pm.\n+   *\n+   * @return The formatted String\n+   */\n+  public static String getLocalizedTime() {\n+    return new DateTimeFormatterBuilder()\n+        .appendLocalized(null, FormatStyle.MEDIUM)\n+        .toFormatter(defaultLocale)\n+        .format(LocalDateTime.ofInstant(clock.instant(), defaultZoneId));\n+  }\n+\n+  /** Returns an {@code Instant} in UTC with a specified year, month, day, hour and minute. */\n+  public static Instant utcInstantOf(\n+      final int year, final int month, final int day, final int hour, final int minute) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTAzMjY3OnYy", "diffSide": "RIGHT", "path": "java-extras/src/test/java/org/triplea/java/DateTimeFormatterUtilTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTo1MzozMFrOGVE3LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMToxMzo1N1rOGVIxBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1Mjk0MQ==", "bodyText": "Looks like this test is failing on travis.\nIt seems to be a typo, but I could imagine it's a locale issue. Looking at the code those tests may fail when executed in a different part of the world, where the default date format looks different (or simply is in a different language).", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424752941", "createdAt": "2020-05-13T21:53:30Z", "author": {"login": "RoiEXLab"}, "path": "java-extras/src/test/java/org/triplea/java/DateTimeFormatterUtilTest.java", "diffHunk": "@@ -35,4 +38,12 @@ void verifyFormattingNoTimeZone() {\n             DEC_FIRST_EPOCH_MILLIS, FormatOption.WITHOUT_TIMEZONE);\n     assertThat(result, is(\"2000-12-1 15:59\"));\n   }\n+\n+  @Test\n+  void toDateString() {\n+    assertThat(\n+        DateTimeFormatterUtil.toDateString(\n+            LocalDateTime.ofInstant(JAN_FIRST_INSTANT, ZoneOffset.UTC)),\n+        is(\"Wed. Jan. 01 14:30:00 UTC 2020\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgxMzQwMQ==", "bodyText": "Ah, this is a bug of me moving this test from DateTimeUtil to this class. The DateTimeUtil has a capability to inject locale, that was done in the other test but not in this one.", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424813401", "createdAt": "2020-05-14T01:00:30Z", "author": {"login": "DanVanAtta"}, "path": "java-extras/src/test/java/org/triplea/java/DateTimeFormatterUtilTest.java", "diffHunk": "@@ -35,4 +38,12 @@ void verifyFormattingNoTimeZone() {\n             DEC_FIRST_EPOCH_MILLIS, FormatOption.WITHOUT_TIMEZONE);\n     assertThat(result, is(\"2000-12-1 15:59\"));\n   }\n+\n+  @Test\n+  void toDateString() {\n+    assertThat(\n+        DateTimeFormatterUtil.toDateString(\n+            LocalDateTime.ofInstant(JAN_FIRST_INSTANT, ZoneOffset.UTC)),\n+        is(\"Wed. Jan. 01 14:30:00 UTC 2020\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1Mjk0MQ=="}, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgxNjkwMg==", "bodyText": "Turns out, we need to set the locale explicitly with the formatter for it to be used.\n0694e3c", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424816902", "createdAt": "2020-05-14T01:13:57Z", "author": {"login": "DanVanAtta"}, "path": "java-extras/src/test/java/org/triplea/java/DateTimeFormatterUtilTest.java", "diffHunk": "@@ -35,4 +38,12 @@ void verifyFormattingNoTimeZone() {\n             DEC_FIRST_EPOCH_MILLIS, FormatOption.WITHOUT_TIMEZONE);\n     assertThat(result, is(\"2000-12-1 15:59\"));\n   }\n+\n+  @Test\n+  void toDateString() {\n+    assertThat(\n+        DateTimeFormatterUtil.toDateString(\n+            LocalDateTime.ofInstant(JAN_FIRST_INSTANT, ZoneOffset.UTC)),\n+        is(\"Wed. Jan. 01 14:30:00 UTC 2020\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1Mjk0MQ=="}, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTAzOTIyOnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTo1NjowMFrOGVE7Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMDo1Mzo0NVrOGVIclw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1Mzk4Mg==", "bodyText": "Judging by the other map in this class:\nShouldn't we use a Thread-Safe implementation here?", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424753982", "createdAt": "2020-05-13T21:56:00Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "diffHunk": "@@ -24,6 +32,8 @@\n   @Getter(value = AccessLevel.PACKAGE, onMethod_ = @VisibleForTesting)\n   private final Map<String, ChatterSession> participants = new ConcurrentHashMap<>();\n \n+  private final Map<InetAddress, Instant> playerMutes = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgxMTY3MQ==", "bodyText": "I'm not sure it really helps, could be potentially cargo-culting to make it concurrent without a need.\nIn essence, the concurrency problem is not important enough to properly solve. For example, let's say we get a concurrent chat and mute at the same time. The ordering of which one will land first can be left non-deterministic.  In theory we'd have to create a lock whenever a request enters to mute and block any chat messages until that lock is clear. Simply ensuring concurrent access to the map therefore is just not enough to get proper ordering, and even then if you take an even larger perspective then network latency comes into play. On another perspective, if multiple moderators mute at the same time, one will overwrite each other, that overwrite will be non-deterministic whether we use a concurrent map or not.", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424811671", "createdAt": "2020-05-14T00:53:45Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "diffHunk": "@@ -24,6 +32,8 @@\n   @Getter(value = AccessLevel.PACKAGE, onMethod_ = @VisibleForTesting)\n   private final Map<String, ChatterSession> participants = new ConcurrentHashMap<>();\n \n+  private final Map<InetAddress, Instant> playerMutes = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1Mzk4Mg=="}, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTA1ODg0OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjowMzoxOVrOGVFHZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzozODowOVrOGWWbMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1NzA5NA==", "bodyText": "This sounds like a good candidate for Map#computeIfPresent:\nreturn Optional.ofNullable(playerMutes.computeIfPresent(inetAddress, (key, muteInstant) -> {\n  if (muteInstant.isAfter(clock.instant())) {\n    return muteInstant;\n  }\n  return null;\n}));\nNote that I haven't actually tested this code, but it should have the exact same behaviour if the javadocs are accurate", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424757094", "createdAt": "2020-05-13T22:03:19Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "diffHunk": "@@ -97,4 +107,73 @@ public boolean disconnectPlayerSessions(final UserName userName, final String di\n         });\n     return !sessions.isEmpty();\n   }\n+\n+  /**\n+   * Checks if a given chatter is muted, if so returns the {@code Instant} when the mute expires\n+   * otherwise returns an empty optional\n+   */\n+  public Optional<Instant> getPlayerMuteExpiration(final InetAddress inetAddress) {\n+    return getPlayerMuteExpiration(inetAddress, Clock.systemUTC());\n+  }\n+\n+  @VisibleForTesting\n+  Optional<Instant> getPlayerMuteExpiration(final InetAddress inetAddress, final Clock clock) {\n+    return Optional.ofNullable(playerMutes.get(inetAddress))\n+        .map(\n+            muteInstant -> {\n+              if (muteInstant.isAfter(clock.instant())) {\n+                return muteInstant;\n+              } else {\n+                playerMutes.remove(inetAddress);\n+                return null;\n+              }\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgxMTg3Mg==", "bodyText": "Does that remove expired mutes? The final return null seems like we might be setting a null value, it would be better though to remove the entire entry.", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424811872", "createdAt": "2020-05-14T00:54:38Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "diffHunk": "@@ -97,4 +107,73 @@ public boolean disconnectPlayerSessions(final UserName userName, final String di\n         });\n     return !sessions.isEmpty();\n   }\n+\n+  /**\n+   * Checks if a given chatter is muted, if so returns the {@code Instant} when the mute expires\n+   * otherwise returns an empty optional\n+   */\n+  public Optional<Instant> getPlayerMuteExpiration(final InetAddress inetAddress) {\n+    return getPlayerMuteExpiration(inetAddress, Clock.systemUTC());\n+  }\n+\n+  @VisibleForTesting\n+  Optional<Instant> getPlayerMuteExpiration(final InetAddress inetAddress, final Clock clock) {\n+    return Optional.ofNullable(playerMutes.get(inetAddress))\n+        .map(\n+            muteInstant -> {\n+              if (muteInstant.isAfter(clock.instant())) {\n+                return muteInstant;\n+              } else {\n+                playerMutes.remove(inetAddress);\n+                return null;\n+              }\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1NzA5NA=="}, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkzMjcwNw==", "bodyText": "According to the Javadoc I linked it does.", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424932707", "createdAt": "2020-05-14T07:42:42Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "diffHunk": "@@ -97,4 +107,73 @@ public boolean disconnectPlayerSessions(final UserName userName, final String di\n         });\n     return !sessions.isEmpty();\n   }\n+\n+  /**\n+   * Checks if a given chatter is muted, if so returns the {@code Instant} when the mute expires\n+   * otherwise returns an empty optional\n+   */\n+  public Optional<Instant> getPlayerMuteExpiration(final InetAddress inetAddress) {\n+    return getPlayerMuteExpiration(inetAddress, Clock.systemUTC());\n+  }\n+\n+  @VisibleForTesting\n+  Optional<Instant> getPlayerMuteExpiration(final InetAddress inetAddress, final Clock clock) {\n+    return Optional.ofNullable(playerMutes.get(inetAddress))\n+        .map(\n+            muteInstant -> {\n+              if (muteInstant.isAfter(clock.instant())) {\n+                return muteInstant;\n+              } else {\n+                playerMutes.remove(inetAddress);\n+                return null;\n+              }\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1NzA5NA=="}, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUzMzU5OQ==", "bodyText": "Cool, I did not know that. We can also use a ternary here as well to simplify further.\nUpdated: 53b4f70", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r425533599", "createdAt": "2020-05-15T02:36:30Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "diffHunk": "@@ -97,4 +107,73 @@ public boolean disconnectPlayerSessions(final UserName userName, final String di\n         });\n     return !sessions.isEmpty();\n   }\n+\n+  /**\n+   * Checks if a given chatter is muted, if so returns the {@code Instant} when the mute expires\n+   * otherwise returns an empty optional\n+   */\n+  public Optional<Instant> getPlayerMuteExpiration(final InetAddress inetAddress) {\n+    return getPlayerMuteExpiration(inetAddress, Clock.systemUTC());\n+  }\n+\n+  @VisibleForTesting\n+  Optional<Instant> getPlayerMuteExpiration(final InetAddress inetAddress, final Clock clock) {\n+    return Optional.ofNullable(playerMutes.get(inetAddress))\n+        .map(\n+            muteInstant -> {\n+              if (muteInstant.isAfter(clock.instant())) {\n+                return muteInstant;\n+              } else {\n+                playerMutes.remove(inetAddress);\n+                return null;\n+              }\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1NzA5NA=="}, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4OTI2NQ==", "bodyText": "I didn't know that until yesterday either, but I finally found a use-case for this method ^^", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r426089265", "createdAt": "2020-05-15T23:38:09Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/main/java/org/triplea/modules/chat/Chatters.java", "diffHunk": "@@ -97,4 +107,73 @@ public boolean disconnectPlayerSessions(final UserName userName, final String di\n         });\n     return !sessions.isEmpty();\n   }\n+\n+  /**\n+   * Checks if a given chatter is muted, if so returns the {@code Instant} when the mute expires\n+   * otherwise returns an empty optional\n+   */\n+  public Optional<Instant> getPlayerMuteExpiration(final InetAddress inetAddress) {\n+    return getPlayerMuteExpiration(inetAddress, Clock.systemUTC());\n+  }\n+\n+  @VisibleForTesting\n+  Optional<Instant> getPlayerMuteExpiration(final InetAddress inetAddress, final Clock clock) {\n+    return Optional.ofNullable(playerMutes.get(inetAddress))\n+        .map(\n+            muteInstant -> {\n+              if (muteInstant.isAfter(clock.instant())) {\n+                return muteInstant;\n+              } else {\n+                playerMutes.remove(inetAddress);\n+                return null;\n+              }\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1NzA5NA=="}, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTA3MzI1OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/chat/event/processing/PlayerIsMutedMessage.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjowODo1M1rOGVFQhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMTo0MDozN1rOGVJLeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1OTQyOQ==", "bodyText": "Thoughts on using a simple static method instead of a lambda edxpression?", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424759429", "createdAt": "2020-05-13T22:08:53Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/main/java/org/triplea/modules/chat/event/processing/PlayerIsMutedMessage.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.triplea.modules.chat.event.processing;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.BiFunction;\n+import lombok.experimental.UtilityClass;\n+\n+@UtilityClass\n+class PlayerIsMutedMessage {\n+\n+  @VisibleForTesting\n+  static final BiFunction<Clock, Instant, String> muteDurationRemainingToString =\n+      (clock, muteExpiry) -> {\n+        final long minutes = Duration.between(clock.instant(), muteExpiry).toMinutes();\n+        return minutes > 0\n+            ? minutes + \" minutes\"\n+            : Duration.between(clock.instant(), muteExpiry).toSeconds() + \" seconds\";\n+      };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgxMjE5NA==", "bodyText": "I think this was done to be able to override and mock the function, looks like that relic. I'll look into the test cases, this probably can be a 'simple' method. On the other hand, static @VisibleForTesting methods are a code smell, likely better to make this be injected behavior.", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424812194", "createdAt": "2020-05-14T00:55:49Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/main/java/org/triplea/modules/chat/event/processing/PlayerIsMutedMessage.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.triplea.modules.chat.event.processing;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.BiFunction;\n+import lombok.experimental.UtilityClass;\n+\n+@UtilityClass\n+class PlayerIsMutedMessage {\n+\n+  @VisibleForTesting\n+  static final BiFunction<Clock, Instant, String> muteDurationRemainingToString =\n+      (clock, muteExpiry) -> {\n+        final long minutes = Duration.between(clock.instant(), muteExpiry).toMinutes();\n+        return minutes > 0\n+            ? minutes + \" minutes\"\n+            : Duration.between(clock.instant(), muteExpiry).toSeconds() + \" seconds\";\n+      };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1OTQyOQ=="}, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgyMzY3NA==", "bodyText": "Improved this a bit by making the bi-function to be a static inner class: b8ef3f6", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424823674", "createdAt": "2020-05-14T01:40:37Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/main/java/org/triplea/modules/chat/event/processing/PlayerIsMutedMessage.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.triplea.modules.chat.event.processing;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.BiFunction;\n+import lombok.experimental.UtilityClass;\n+\n+@UtilityClass\n+class PlayerIsMutedMessage {\n+\n+  @VisibleForTesting\n+  static final BiFunction<Clock, Instant, String> muteDurationRemainingToString =\n+      (clock, muteExpiry) -> {\n+        final long minutes = Duration.between(clock.instant(), muteExpiry).toMinutes();\n+        return minutes > 0\n+            ? minutes + \" minutes\"\n+            : Duration.between(clock.instant(), muteExpiry).toSeconds() + \" seconds\";\n+      };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1OTQyOQ=="}, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTA3NzUxOnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/web/socket/InetExtractor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoxMDozMlrOGVFTMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMDo1Nzo0MFrOGVIgXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MDExMg==", "bodyText": "I don't think it's a good thing to get different values from test cases that we make special cases for in non-test code.", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424760112", "createdAt": "2020-05-13T22:10:32Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/main/java/org/triplea/web/socket/InetExtractor.java", "diffHunk": "@@ -15,11 +15,16 @@\n \n   @SuppressWarnings(\"UnstableApiUsage\")\n   public static InetAddress extract(final Map<String, Object> userSession) {\n-    // expected format '/127.0.0.1:42840'\n-    final String ipString = String.valueOf(userSession.get(IP_ADDRESS_KEY)).substring(1);\n+    // expected format '/127.0.0.1:42840' or (for test-cases) '127.0.0.1'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgxMjYzNw==", "bodyText": "Generally agree. I'm on the fence as it's a huge PITA for test code to inject values in the right format and creates a lot of coupling to a specific format. Probably better to create a test utility method for less coupling; So for sure this is hack, but the cost of the hack vs ROI of better test utility method is not clear.", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424812637", "createdAt": "2020-05-14T00:57:40Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/main/java/org/triplea/web/socket/InetExtractor.java", "diffHunk": "@@ -15,11 +15,16 @@\n \n   @SuppressWarnings(\"UnstableApiUsage\")\n   public static InetAddress extract(final Map<String, Object> userSession) {\n-    // expected format '/127.0.0.1:42840'\n-    final String ipString = String.valueOf(userSession.get(IP_ADDRESS_KEY)).substring(1);\n+    // expected format '/127.0.0.1:42840' or (for test-cases) '127.0.0.1'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MDExMg=="}, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTA4NzkyOnYy", "diffSide": "RIGHT", "path": "http-server/src/test/java/org/triplea/modules/chat/event/processing/PlayerIsMutedMessageTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoxNTowMFrOGVFZ5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzo0MzowN1rOGVP2eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MTgyOA==", "bodyText": "If for some reason this test will take longer than a minute to execute we might run into a failure \ud83d\ude1b", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424761828", "createdAt": "2020-05-13T22:15:00Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/test/java/org/triplea/modules/chat/event/processing/PlayerIsMutedMessageTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.triplea.modules.chat.event.processing;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.triplea.java.DateTimeUtil.utcInstantOf;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n+import java.time.temporal.ChronoUnit;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PlayerIsMutedMessageTest {\n+  private static final Instant CURRENT_TIME = utcInstantOf(2020, 11, 1, 2, 20);\n+\n+  @Test\n+  @DisplayName(\"Verify an example mute message calculation with 10 minutes remaining\")\n+  void verifyTimeDurationComputation() {\n+    final Instant banExpiry = CURRENT_TIME.plus(10, ChronoUnit.MINUTES);\n+\n+    final String result =\n+        PlayerIsMutedMessage.muteDurationRemainingToString.apply(\n+            Clock.fixed(CURRENT_TIME, ZoneOffset.UTC), banExpiry);\n+\n+    assertThat(result, is(\"10 minutes\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgxMjkxMA==", "bodyText": "Note the presence of the fixed clocks: Clock.fixed(CURRENT_TIME, ZoneOffset.UTC); that should keep this fully deterministic.", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424812910", "createdAt": "2020-05-14T00:58:38Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/test/java/org/triplea/modules/chat/event/processing/PlayerIsMutedMessageTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.triplea.modules.chat.event.processing;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.triplea.java.DateTimeUtil.utcInstantOf;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n+import java.time.temporal.ChronoUnit;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PlayerIsMutedMessageTest {\n+  private static final Instant CURRENT_TIME = utcInstantOf(2020, 11, 1, 2, 20);\n+\n+  @Test\n+  @DisplayName(\"Verify an example mute message calculation with 10 minutes remaining\")\n+  void verifyTimeDurationComputation() {\n+    final Instant banExpiry = CURRENT_TIME.plus(10, ChronoUnit.MINUTES);\n+\n+    final String result =\n+        PlayerIsMutedMessage.muteDurationRemainingToString.apply(\n+            Clock.fixed(CURRENT_TIME, ZoneOffset.UTC), banExpiry);\n+\n+    assertThat(result, is(\"10 minutes\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MTgyOA=="}, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkzMjk4Ng==", "bodyText": "Ah, missed that detail", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424932986", "createdAt": "2020-05-14T07:43:07Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/test/java/org/triplea/modules/chat/event/processing/PlayerIsMutedMessageTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.triplea.modules.chat.event.processing;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.triplea.java.DateTimeUtil.utcInstantOf;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n+import java.time.temporal.ChronoUnit;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PlayerIsMutedMessageTest {\n+  private static final Instant CURRENT_TIME = utcInstantOf(2020, 11, 1, 2, 20);\n+\n+  @Test\n+  @DisplayName(\"Verify an example mute message calculation with 10 minutes remaining\")\n+  void verifyTimeDurationComputation() {\n+    final Instant banExpiry = CURRENT_TIME.plus(10, ChronoUnit.MINUTES);\n+\n+    final String result =\n+        PlayerIsMutedMessage.muteDurationRemainingToString.apply(\n+            Clock.fixed(CURRENT_TIME, ZoneOffset.UTC), banExpiry);\n+\n+    assertThat(result, is(\"10 minutes\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MTgyOA=="}, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTA5MDgzOnYy", "diffSide": "RIGHT", "path": "http-server/src/test/java/org/triplea/modules/chat/event/processing/PlayerIsMutedMessageTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoxNjowNlrOGVFbkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMDo1OToxNFrOGVIiDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MjI1OA==", "bodyText": "1 second is a tight time window.\nLet's hope we never run into any issues with that. \ud83d\ude4f", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424762258", "createdAt": "2020-05-13T22:16:06Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/test/java/org/triplea/modules/chat/event/processing/PlayerIsMutedMessageTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.triplea.modules.chat.event.processing;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.triplea.java.DateTimeUtil.utcInstantOf;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n+import java.time.temporal.ChronoUnit;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PlayerIsMutedMessageTest {\n+  private static final Instant CURRENT_TIME = utcInstantOf(2020, 11, 1, 2, 20);\n+\n+  @Test\n+  @DisplayName(\"Verify an example mute message calculation with 10 minutes remaining\")\n+  void verifyTimeDurationComputation() {\n+    final Instant banExpiry = CURRENT_TIME.plus(10, ChronoUnit.MINUTES);\n+\n+    final String result =\n+        PlayerIsMutedMessage.muteDurationRemainingToString.apply(\n+            Clock.fixed(CURRENT_TIME, ZoneOffset.UTC), banExpiry);\n+\n+    assertThat(result, is(\"10 minutes\"));\n+  }\n+\n+  @Test\n+  @DisplayName(\"Verify an example mute message calculation with seconds remaining\")\n+  void verifyTimeDurationComputationWithSecondsRemaining() {\n+    final Instant banExpiry = CURRENT_TIME.plus(20, ChronoUnit.SECONDS);\n+\n+    final String result =\n+        PlayerIsMutedMessage.muteDurationRemainingToString.apply(\n+            Clock.fixed(CURRENT_TIME, ZoneOffset.UTC), banExpiry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgxMzA3MA==", "bodyText": "Ditto on fixed clocks, the chrono never changes.", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424813070", "createdAt": "2020-05-14T00:59:14Z", "author": {"login": "DanVanAtta"}, "path": "http-server/src/test/java/org/triplea/modules/chat/event/processing/PlayerIsMutedMessageTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.triplea.modules.chat.event.processing;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.triplea.java.DateTimeUtil.utcInstantOf;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n+import java.time.temporal.ChronoUnit;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PlayerIsMutedMessageTest {\n+  private static final Instant CURRENT_TIME = utcInstantOf(2020, 11, 1, 2, 20);\n+\n+  @Test\n+  @DisplayName(\"Verify an example mute message calculation with 10 minutes remaining\")\n+  void verifyTimeDurationComputation() {\n+    final Instant banExpiry = CURRENT_TIME.plus(10, ChronoUnit.MINUTES);\n+\n+    final String result =\n+        PlayerIsMutedMessage.muteDurationRemainingToString.apply(\n+            Clock.fixed(CURRENT_TIME, ZoneOffset.UTC), banExpiry);\n+\n+    assertThat(result, is(\"10 minutes\"));\n+  }\n+\n+  @Test\n+  @DisplayName(\"Verify an example mute message calculation with seconds remaining\")\n+  void verifyTimeDurationComputationWithSecondsRemaining() {\n+    final Instant banExpiry = CURRENT_TIME.plus(20, ChronoUnit.SECONDS);\n+\n+    final String result =\n+        PlayerIsMutedMessage.muteDurationRemainingToString.apply(\n+            Clock.fixed(CURRENT_TIME, ZoneOffset.UTC), banExpiry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MjI1OA=="}, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTA5Mzg1OnYy", "diffSide": "LEFT", "path": "java-extras/src/main/java/org/triplea/java/TimeManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoxNzoyM1rOGVFdbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoxNzoyM1rOGVFdbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MjczNQ==", "bodyText": "Thanks for merging the classes \ud83d\udc4d", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r424762735", "createdAt": "2020-05-13T22:17:23Z", "author": {"login": "RoiEXLab"}, "path": "java-extras/src/main/java/org/triplea/java/TimeManager.java", "diffHunk": "@@ -1,38 +0,0 @@\n-package org.triplea.java;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54ba778754dc1dba196a2953e66e247bb76982f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzMzMTU0OnYy", "diffSide": "RIGHT", "path": "http-server/src/main/java/org/triplea/modules/chat/event/processing/PlayerIsMutedMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzozNjowMFrOGWWZfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzozNjowMFrOGWWZfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4ODgyOA==", "bodyText": "side-note: We could store the result of Duration.between(clock.instant(), muteExpiry) in a variable instead of potentially calculating it twice, but just a minor detail", "url": "https://github.com/triplea-game/triplea/pull/6466#discussion_r426088828", "createdAt": "2020-05-15T23:36:00Z", "author": {"login": "RoiEXLab"}, "path": "http-server/src/main/java/org/triplea/modules/chat/event/processing/PlayerIsMutedMessage.java", "diffHunk": "@@ -4,23 +4,34 @@\n import java.time.Clock;\n import java.time.Duration;\n import java.time.Instant;\n-import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import lombok.Builder;\n import lombok.experimental.UtilityClass;\n \n @UtilityClass\n class PlayerIsMutedMessage {\n+  private static Function<Instant, String> muteDurationFormatter =\n+      MuteDurationRemainingCalculator.builder().build();\n \n+  String build(final Instant muteExpiry) {\n+    return \"You have been muted, expiring in: \" + muteDurationFormatter.apply(muteExpiry);\n+  }\n+\n+  /**\n+   * Calculates a string of how many minutes are remaining in a mute until expired, or if less than\n+   * a minute then how many seconds are left.\n+   */\n   @VisibleForTesting\n-  static final BiFunction<Clock, Instant, String> muteDurationRemainingToString =\n-      (clock, muteExpiry) -> {\n-        final long minutes = Duration.between(clock.instant(), muteExpiry).toMinutes();\n-        return minutes > 0\n-            ? minutes + \" minutes\"\n-            : Duration.between(clock.instant(), muteExpiry).toSeconds() + \" seconds\";\n-      };\n+  @Builder\n+  static class MuteDurationRemainingCalculator implements Function<Instant, String> {\n+    @Builder.Default private Clock clock = Clock.systemUTC();\n \n-  String build(final Instant muteExpiry) {\n-    return \"You have been muted, expiring in: \"\n-        + muteDurationRemainingToString.apply(Clock.systemUTC(), muteExpiry);\n+    @Override\n+    public String apply(final Instant muteExpiry) {\n+      final long minutes = Duration.between(clock.instant(), muteExpiry).toMinutes();\n+      return minutes > 0\n+          ? minutes + \" minutes\"\n+          : Duration.between(clock.instant(), muteExpiry).toSeconds() + \" seconds\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4140e9ea1b7b967236ef55fddfe5d18842dfe5a4"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2193, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}