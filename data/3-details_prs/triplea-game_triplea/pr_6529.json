{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyOTc4ODg0", "number": 6529, "title": "Improve some battle history logging code.", "bodyText": "Improve some battle history logging code.\nRemoves code duplication and unnecessary complexity and moves unrelated logic (marking attacking transports, to a different function).\nAlso removes an unnecessary list copy in Route.\nFunctional Changes\n\n[] New map or map update\n[] New Feature\n[] Feature update or enhancement\n[] Feature Removal\n[X] Code Cleanup or refactor\n[] Configuration Change\n[] Problem fix:  \n[] Other:   \nTesting\n\nLooked at history after attacking. Tried with two defending countries.", "createdAt": "2020-05-26T04:25:51Z", "url": "https://github.com/triplea-game/triplea/pull/6529", "merged": true, "mergeCommit": {"oid": "321b579556b78f0b2b77de4e11aa4dac9540a7de"}, "closed": true, "closedAt": "2020-05-29T03:29:53Z", "author": {"login": "asvitkine"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABck859ZAH2gAyNDIyOTc4ODg0OmRmNWI5NjJiMjM2Y2E3YmQ4OGEyMzk2ZDY4YmU5OGJlNWI5ZDc3YTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcl56eEAFqTQyMDYyOTE5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "df5b962b236ca7bd88a2396d68be98be5b9d77a7", "author": {"user": {"login": "asvitkine", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/df5b962b236ca7bd88a2396d68be98be5b9d77a7", "committedDate": "2020-05-26T04:24:58Z", "message": "Improve some battle history logging code."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3OTYyMjUy", "url": "https://github.com/triplea-game/triplea/pull/6529#pullrequestreview-417962252", "createdAt": "2020-05-26T04:27:22Z", "commit": {"oid": "df5b962b236ca7bd88a2396d68be98be5b9d77a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDoyNzoyM1rOGaOOjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDoyNzoyM1rOGaOOjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0OTI2MQ==", "bodyText": "Method addPlayerCombatHistoryText has a Cognitive Complexity of 11 (exceeds 7 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6529#discussion_r430149261", "createdAt": "2020-05-26T04:27:23Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -668,92 +669,71 @@ private void removeAirNoLongerInTerritory() {\n     attackingUnits.removeAll(CollectionUtils.getMatches(attackingUnits, airNotInTerritory));\n   }\n \n-  private void writeUnitsToHistory(final IDelegateBridge bridge) {\n+  private void markAttackingTransports(final IDelegateBridge bridge) {\n     if (headless) {\n       return;\n     }\n-    final Set<GamePlayer> playerSet = battleSite.getUnitCollection().getPlayersWithUnits();\n-    // find all attacking players (unsorted)\n-    final Collection<GamePlayer> attackers = new ArrayList<>();\n-    for (final GamePlayer current : playerSet) {\n-      if (gameData.getRelationshipTracker().isAllied(attacker, current)\n-          || current.equals(attacker)) {\n-        attackers.add(current);\n-      }\n-    }\n-    final StringBuilder transcriptText = new StringBuilder();\n-    // find all attacking units (unsorted)\n-    final Collection<Unit> allAttackingUnits = new ArrayList<>();\n-    for (final Iterator<GamePlayer> attackersIter = attackers.iterator();\n-        attackersIter.hasNext(); ) {\n-      final GamePlayer current = attackersIter.next();\n-      final String delim;\n-      if (attackersIter.hasNext()) {\n-        delim = \"; \";\n-      } else {\n-        delim = \"\";\n-      }\n-      final Collection<Unit> attackingUnits =\n-          CollectionUtils.getMatches(this.attackingUnits, Matches.unitIsOwnedBy(current));\n-      final String verb = current.equals(attacker) ? \"attack\" : \"loiter and taunt\";\n-      transcriptText\n-          .append(current.getName())\n-          .append(\" \")\n-          .append(verb)\n-          .append(\n-              attackingUnits.isEmpty()\n-                  ? \"\"\n-                  : \" with \" + MyFormatter.unitsToTextNoOwner(attackingUnits))\n-          .append(delim);\n-      allAttackingUnits.addAll(attackingUnits);\n-      // If any attacking transports are in the battle, set their status to later restrict\n-      // load/unload\n-      if (current.equals(attacker)) {\n-        final CompositeChange change = new CompositeChange();\n-        final Collection<Unit> transports =\n-            CollectionUtils.getMatches(attackingUnits, Matches.unitCanTransport());\n-        for (final Unit unit : transports) {\n-          change.add(ChangeFactory.unitPropertyChange(unit, true, Unit.WAS_IN_COMBAT));\n-        }\n-        bridge.addChange(change);\n+    // If any attacking transports are in the battle, set their status to later restrict\n+    // load/unload\n+    final Collection<Unit> transports =\n+        CollectionUtils.getMatches(\n+            attackingUnits, Matches.unitCanTransport().and(Matches.unitIsOwnedBy(attacker)));\n+    if (!transports.isEmpty()) {\n+      final CompositeChange change = new CompositeChange();\n+      for (final Unit unit : transports) {\n+        change.add(ChangeFactory.unitPropertyChange(unit, true, Unit.WAS_IN_COMBAT));\n       }\n+      bridge.addChange(change);\n     }\n-    // write attacking units to history\n-    if (!attackingUnits.isEmpty()) {\n-      bridge.getHistoryWriter().addChildToEvent(transcriptText.toString(), allAttackingUnits);\n+  }\n+\n+  private void writeUnitsToHistory(final IDelegateBridge bridge) {\n+    if (headless) {\n+      return;\n     }\n-    // find all defending players (unsorted)\n-    final Collection<GamePlayer> defenders = new ArrayList<>();\n-    for (final GamePlayer current : playerSet) {\n-      if (gameData.getRelationshipTracker().isAllied(defender, current)\n-          || current.equals(defender)) {\n-        defenders.add(current);\n+    final Set<GamePlayer> playersWithUnits = battleSite.getUnitCollection().getPlayersWithUnits();\n+\n+    final Collection<GamePlayer> attackers = findAllies(playersWithUnits, attacker);\n+    addPlayerCombatHistoryText(attackers, attackingUnits, true, bridge.getHistoryWriter());\n+    final Collection<GamePlayer> defenders = findAllies(playersWithUnits, defender);\n+    addPlayerCombatHistoryText(defenders, defendingUnits, false, bridge.getHistoryWriter());\n+  }\n+\n+  private static Collection<GamePlayer> findAllies(\n+      final Collection<GamePlayer> candidatePlayers, final GamePlayer player) {\n+    final var relationshipTracker = player.getData().getRelationshipTracker();\n+    final Collection<GamePlayer> allies = new ArrayList<>();\n+    for (final GamePlayer current : candidatePlayers) {\n+      if (current.equals(player) || relationshipTracker.isAllied(player, current)) {\n+        allies.add(current);\n       }\n     }\n-    final StringBuilder transcriptBuilder = new StringBuilder();\n-    // find all defending units (unsorted)\n-    final Collection<Unit> allDefendingUnits = new ArrayList<>();\n-    for (final Iterator<GamePlayer> defendersIter = defenders.iterator();\n-        defendersIter.hasNext(); ) {\n-      final GamePlayer current = defendersIter.next();\n-      final String delim;\n-      if (defendersIter.hasNext()) {\n-        delim = \"; \";\n-      } else {\n-        delim = \"\";\n+    return allies;\n+  }\n+\n+  private void addPlayerCombatHistoryText(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df5b962b236ca7bd88a2396d68be98be5b9d77a7"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNjI3Nzkx", "url": "https://github.com/triplea-game/triplea/pull/6529#pullrequestreview-420627791", "createdAt": "2020-05-29T03:23:03Z", "commit": {"oid": "df5b962b236ca7bd88a2396d68be98be5b9d77a7"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMzoyMzowM1rOGcNi0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMzoyMzo1N1rOGcNjgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIzNTIxNg==", "bodyText": "FWIW, this block could be re-written as follows:\nreturn candidatePlayers.stream()\n    .filter(current -> current.equals(player) || relationshipTracker.isAllied(player, current)\n    .collect(Collectors.toList());\n\nI somewhat feel like relationship tracker probably should own this logic though. EG:\nrelationshipTracker.getAllies(player, candidatePlayers);", "url": "https://github.com/triplea-game/triplea/pull/6529#discussion_r432235216", "createdAt": "2020-05-29T03:23:03Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -668,92 +669,71 @@ private void removeAirNoLongerInTerritory() {\n     attackingUnits.removeAll(CollectionUtils.getMatches(attackingUnits, airNotInTerritory));\n   }\n \n-  private void writeUnitsToHistory(final IDelegateBridge bridge) {\n+  private void markAttackingTransports(final IDelegateBridge bridge) {\n     if (headless) {\n       return;\n     }\n-    final Set<GamePlayer> playerSet = battleSite.getUnitCollection().getPlayersWithUnits();\n-    // find all attacking players (unsorted)\n-    final Collection<GamePlayer> attackers = new ArrayList<>();\n-    for (final GamePlayer current : playerSet) {\n-      if (gameData.getRelationshipTracker().isAllied(attacker, current)\n-          || current.equals(attacker)) {\n-        attackers.add(current);\n-      }\n-    }\n-    final StringBuilder transcriptText = new StringBuilder();\n-    // find all attacking units (unsorted)\n-    final Collection<Unit> allAttackingUnits = new ArrayList<>();\n-    for (final Iterator<GamePlayer> attackersIter = attackers.iterator();\n-        attackersIter.hasNext(); ) {\n-      final GamePlayer current = attackersIter.next();\n-      final String delim;\n-      if (attackersIter.hasNext()) {\n-        delim = \"; \";\n-      } else {\n-        delim = \"\";\n-      }\n-      final Collection<Unit> attackingUnits =\n-          CollectionUtils.getMatches(this.attackingUnits, Matches.unitIsOwnedBy(current));\n-      final String verb = current.equals(attacker) ? \"attack\" : \"loiter and taunt\";\n-      transcriptText\n-          .append(current.getName())\n-          .append(\" \")\n-          .append(verb)\n-          .append(\n-              attackingUnits.isEmpty()\n-                  ? \"\"\n-                  : \" with \" + MyFormatter.unitsToTextNoOwner(attackingUnits))\n-          .append(delim);\n-      allAttackingUnits.addAll(attackingUnits);\n-      // If any attacking transports are in the battle, set their status to later restrict\n-      // load/unload\n-      if (current.equals(attacker)) {\n-        final CompositeChange change = new CompositeChange();\n-        final Collection<Unit> transports =\n-            CollectionUtils.getMatches(attackingUnits, Matches.unitCanTransport());\n-        for (final Unit unit : transports) {\n-          change.add(ChangeFactory.unitPropertyChange(unit, true, Unit.WAS_IN_COMBAT));\n-        }\n-        bridge.addChange(change);\n+    // If any attacking transports are in the battle, set their status to later restrict\n+    // load/unload\n+    final Collection<Unit> transports =\n+        CollectionUtils.getMatches(\n+            attackingUnits, Matches.unitCanTransport().and(Matches.unitIsOwnedBy(attacker)));\n+    if (!transports.isEmpty()) {\n+      final CompositeChange change = new CompositeChange();\n+      for (final Unit unit : transports) {\n+        change.add(ChangeFactory.unitPropertyChange(unit, true, Unit.WAS_IN_COMBAT));\n       }\n+      bridge.addChange(change);\n     }\n-    // write attacking units to history\n-    if (!attackingUnits.isEmpty()) {\n-      bridge.getHistoryWriter().addChildToEvent(transcriptText.toString(), allAttackingUnits);\n+  }\n+\n+  private void writeUnitsToHistory(final IDelegateBridge bridge) {\n+    if (headless) {\n+      return;\n     }\n-    // find all defending players (unsorted)\n-    final Collection<GamePlayer> defenders = new ArrayList<>();\n-    for (final GamePlayer current : playerSet) {\n-      if (gameData.getRelationshipTracker().isAllied(defender, current)\n-          || current.equals(defender)) {\n-        defenders.add(current);\n+    final Set<GamePlayer> playersWithUnits = battleSite.getUnitCollection().getPlayersWithUnits();\n+\n+    final Collection<GamePlayer> attackers = findAllies(playersWithUnits, attacker);\n+    addPlayerCombatHistoryText(attackers, attackingUnits, true, bridge.getHistoryWriter());\n+    final Collection<GamePlayer> defenders = findAllies(playersWithUnits, defender);\n+    addPlayerCombatHistoryText(defenders, defendingUnits, false, bridge.getHistoryWriter());\n+  }\n+\n+  private static Collection<GamePlayer> findAllies(\n+      final Collection<GamePlayer> candidatePlayers, final GamePlayer player) {\n+    final var relationshipTracker = player.getData().getRelationshipTracker();\n+    final Collection<GamePlayer> allies = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df5b962b236ca7bd88a2396d68be98be5b9d77a7"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIzNTM5Mg==", "bodyText": "There's certainly more places where we can simplify or 'fix' responsibilities and change logic ownership, but I recognize we are mostly moving code here.", "url": "https://github.com/triplea-game/triplea/pull/6529#discussion_r432235392", "createdAt": "2020-05-29T03:23:57Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -668,92 +669,71 @@ private void removeAirNoLongerInTerritory() {\n     attackingUnits.removeAll(CollectionUtils.getMatches(attackingUnits, airNotInTerritory));\n   }\n \n-  private void writeUnitsToHistory(final IDelegateBridge bridge) {\n+  private void markAttackingTransports(final IDelegateBridge bridge) {\n     if (headless) {\n       return;\n     }\n-    final Set<GamePlayer> playerSet = battleSite.getUnitCollection().getPlayersWithUnits();\n-    // find all attacking players (unsorted)\n-    final Collection<GamePlayer> attackers = new ArrayList<>();\n-    for (final GamePlayer current : playerSet) {\n-      if (gameData.getRelationshipTracker().isAllied(attacker, current)\n-          || current.equals(attacker)) {\n-        attackers.add(current);\n-      }\n-    }\n-    final StringBuilder transcriptText = new StringBuilder();\n-    // find all attacking units (unsorted)\n-    final Collection<Unit> allAttackingUnits = new ArrayList<>();\n-    for (final Iterator<GamePlayer> attackersIter = attackers.iterator();\n-        attackersIter.hasNext(); ) {\n-      final GamePlayer current = attackersIter.next();\n-      final String delim;\n-      if (attackersIter.hasNext()) {\n-        delim = \"; \";\n-      } else {\n-        delim = \"\";\n-      }\n-      final Collection<Unit> attackingUnits =\n-          CollectionUtils.getMatches(this.attackingUnits, Matches.unitIsOwnedBy(current));\n-      final String verb = current.equals(attacker) ? \"attack\" : \"loiter and taunt\";\n-      transcriptText\n-          .append(current.getName())\n-          .append(\" \")\n-          .append(verb)\n-          .append(\n-              attackingUnits.isEmpty()\n-                  ? \"\"\n-                  : \" with \" + MyFormatter.unitsToTextNoOwner(attackingUnits))\n-          .append(delim);\n-      allAttackingUnits.addAll(attackingUnits);\n-      // If any attacking transports are in the battle, set their status to later restrict\n-      // load/unload\n-      if (current.equals(attacker)) {\n-        final CompositeChange change = new CompositeChange();\n-        final Collection<Unit> transports =\n-            CollectionUtils.getMatches(attackingUnits, Matches.unitCanTransport());\n-        for (final Unit unit : transports) {\n-          change.add(ChangeFactory.unitPropertyChange(unit, true, Unit.WAS_IN_COMBAT));\n-        }\n-        bridge.addChange(change);\n+    // If any attacking transports are in the battle, set their status to later restrict\n+    // load/unload\n+    final Collection<Unit> transports =\n+        CollectionUtils.getMatches(\n+            attackingUnits, Matches.unitCanTransport().and(Matches.unitIsOwnedBy(attacker)));\n+    if (!transports.isEmpty()) {\n+      final CompositeChange change = new CompositeChange();\n+      for (final Unit unit : transports) {\n+        change.add(ChangeFactory.unitPropertyChange(unit, true, Unit.WAS_IN_COMBAT));\n       }\n+      bridge.addChange(change);\n     }\n-    // write attacking units to history\n-    if (!attackingUnits.isEmpty()) {\n-      bridge.getHistoryWriter().addChildToEvent(transcriptText.toString(), allAttackingUnits);\n+  }\n+\n+  private void writeUnitsToHistory(final IDelegateBridge bridge) {\n+    if (headless) {\n+      return;\n     }\n-    // find all defending players (unsorted)\n-    final Collection<GamePlayer> defenders = new ArrayList<>();\n-    for (final GamePlayer current : playerSet) {\n-      if (gameData.getRelationshipTracker().isAllied(defender, current)\n-          || current.equals(defender)) {\n-        defenders.add(current);\n+    final Set<GamePlayer> playersWithUnits = battleSite.getUnitCollection().getPlayersWithUnits();\n+\n+    final Collection<GamePlayer> attackers = findAllies(playersWithUnits, attacker);\n+    addPlayerCombatHistoryText(attackers, attackingUnits, true, bridge.getHistoryWriter());\n+    final Collection<GamePlayer> defenders = findAllies(playersWithUnits, defender);\n+    addPlayerCombatHistoryText(defenders, defendingUnits, false, bridge.getHistoryWriter());\n+  }\n+\n+  private static Collection<GamePlayer> findAllies(\n+      final Collection<GamePlayer> candidatePlayers, final GamePlayer player) {\n+    final var relationshipTracker = player.getData().getRelationshipTracker();\n+    final Collection<GamePlayer> allies = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIzNTIxNg=="}, "originalCommit": {"oid": "df5b962b236ca7bd88a2396d68be98be5b9d77a7"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNjI5MTky", "url": "https://github.com/triplea-game/triplea/pull/6529#pullrequestreview-420629192", "createdAt": "2020-05-29T03:28:31Z", "commit": {"oid": "df5b962b236ca7bd88a2396d68be98be5b9d77a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMzoyODozMVrOGcNnTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMzoyODozMVrOGcNnTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIzNjM2Ng==", "bodyText": "This could potentially be slightly simpler written as:\n    if (!headless) {\n      markAttackingTransports(bridge);\n      writeUnitsToHistory(bridge);\n    }\n\nEssentially we're bringing the no-op method check to the point of the caller instead of in the method. This way if you are looking at the higher level flow, you can more easily follow the branching logic. As-is, with a series of void methods, to some extent they almost may as well be inlined with demarcating comments, a reader has to jump through each one to understand what is happening. Hence, bringing the logic flow out of the lower level methods allows a reader to see the code flow at a higher level without jumping to each method.", "url": "https://github.com/triplea-game/triplea/pull/6529#discussion_r432236366", "createdAt": "2020-05-29T03:28:31Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -601,6 +601,7 @@ public void fight(final IDelegateBridge bridge) {\n     }\n     bridge.getHistoryWriter().startEvent(\"Battle in \" + battleSite, battleSite);\n     removeAirNoLongerInTerritory();\n+    markAttackingTransports(bridge);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df5b962b236ca7bd88a2396d68be98be5b9d77a7"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3458, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}