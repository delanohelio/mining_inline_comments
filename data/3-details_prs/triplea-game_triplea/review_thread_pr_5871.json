{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NDY2OTgy", "number": 5871, "reviewThreads": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzowMTo0N1rODaPqgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzo1NDozMlrODd5-Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODQ2MjEwOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/AirBattle.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzowMTo0N1rOFhFwrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzowMTo0N1rOFhFwrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0MTcxMQ==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r370241711", "createdAt": "2020-01-23T17:01:47Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/AirBattle.java", "diffHunk": "@@ -198,20 +198,20 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n               defendingWaitingToDie.clear();\n               // kill any suicide attackers (veqryn)\n               final Predicate<Unit> attackerSuicide =\n-                  PredicateBuilder.of(Matches.unitIsSuicide())\n+                  PredicateBuilder.of(Matches.unitIsSuicideOnAttack())\n                       .andIf(isBombingRun, Matches.unitIsNotStrategicBomber())\n                       .build();\n               if (attackingUnits.stream().anyMatch(attackerSuicide)) {\n                 final List<Unit> suicideUnits =\n-                    CollectionUtils.getMatches(attackingUnits, Matches.unitIsSuicide());\n+                    CollectionUtils.getMatches(attackingUnits, Matches.unitIsSuicideOnAttack());\n                 attackingUnits.removeAll(suicideUnits);\n                 remove(suicideUnits, bridge, battleSite);\n                 tuvLostAttacker = TuvUtils.getTuv(suicideUnits, attacker, attackerCosts, gameData);\n                 attackerLostTuv += tuvLostAttacker;\n               }\n-              if (defendingUnits.stream().anyMatch(Matches.unitIsSuicide())) {\n+              if (defendingUnits.stream().anyMatch(Matches.unitIsSuicideOnDefense())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "035a2e77e1973b33253b3b5ac9e7c4007dce9259"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODQ2MjExOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzowMTo0N1rOFhFwsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNjo1ODo1MVrOFkcsUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0MTcxMg==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r370241712", "createdAt": "2020-01-23T17:01:47Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1380,17 +1379,18 @@ private void fireNavalBombardment(final IDelegateBridge bridge) {\n   }\n \n   private void fireSuicideUnitsAttack() {\n+    // TODO: Remove isSuicideOnAttack check and update to use canNotTarget/canNotBeTargetedBy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "035a2e77e1973b33253b3b5ac9e7c4007dce9259"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MTY3Nw==", "bodyText": "Kinda agree with the TODO climate warning unless we have a reference to who or what owns this task.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r370451677", "createdAt": "2020-01-24T02:32:51Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1380,17 +1379,18 @@ private void fireNavalBombardment(final IDelegateBridge bridge) {\n   }\n \n   private void fireSuicideUnitsAttack() {\n+    // TODO: Remove isSuicideOnAttack check and update to use canNotTarget/canNotBeTargetedBy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0MTcxMg=="}, "originalCommit": {"oid": "035a2e77e1973b33253b3b5ac9e7c4007dce9259"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MzUzOQ==", "bodyText": "Why is this TODO not being done now?", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373743539", "createdAt": "2020-02-01T00:56:41Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1380,17 +1379,18 @@ private void fireNavalBombardment(final IDelegateBridge bridge) {\n   }\n \n   private void fireSuicideUnitsAttack() {\n+    // TODO: Remove isSuicideOnAttack check and update to use canNotTarget/canNotBeTargetedBy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0MTcxMg=="}, "originalCommit": {"oid": "035a2e77e1973b33253b3b5ac9e7c4007dce9259"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1OTU2Mw==", "bodyText": "This was a temporary TODO that has already been removed...", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373759563", "createdAt": "2020-02-01T05:29:39Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1380,17 +1379,18 @@ private void fireNavalBombardment(final IDelegateBridge bridge) {\n   }\n \n   private void fireSuicideUnitsAttack() {\n+    // TODO: Remove isSuicideOnAttack check and update to use canNotTarget/canNotBeTargetedBy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0MTcxMg=="}, "originalCommit": {"oid": "035a2e77e1973b33253b3b5ac9e7c4007dce9259"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2MzE1Mg==", "bodyText": "Cool, thanks for taking care of, did not properly notice the 'outdated' tag.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373763152", "createdAt": "2020-02-01T06:58:51Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1380,17 +1379,18 @@ private void fireNavalBombardment(final IDelegateBridge bridge) {\n   }\n \n   private void fireSuicideUnitsAttack() {\n+    // TODO: Remove isSuicideOnAttack check and update to use canNotTarget/canNotBeTargetedBy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0MTcxMg=="}, "originalCommit": {"oid": "035a2e77e1973b33253b3b5ac9e7c4007dce9259"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODQ2MjE0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzowMTo0N1rOFhFwtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzowMTo0N1rOFhFwtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0MTcxNw==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r370241717", "createdAt": "2020-01-23T17:01:47Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1419,20 +1419,18 @@ private void fireSuicideUnitsAttack() {\n   }\n \n   private void fireSuicideUnitsDefend() {\n-    if (isDefendingSuicideAndMunitionUnitsDoNotFire()) {\n-      return;\n-    }\n+    // TODO: Remove isSuicideOnDefense check and update to use canNotTarget/canNotBeTargetedBy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "035a2e77e1973b33253b3b5ac9e7c4007dce9259"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTc4MjkxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMjoyNDoyNVrOFhSfGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjozODowN1rOFjgq2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDIwMg==", "bodyText": "Why is this the condition for suicide on defense?\n!Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r370450202", "createdAt": "2020-01-24T02:24:25Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2NTg3Mw==", "bodyText": "Because this is a hack property that was added to make it so all suicide units in a map wouldn't suicide on defense. This is essentially deprecated now and just used for backwards compatibility.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372765873", "createdAt": "2020-01-30T05:32:31Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDIwMg=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3NzE3Nw==", "bodyText": "Would you mind adding a comment to the code to clarify point? I'm pretty sure others would have the same question casually reading this and they would not have the benefit of this PR review conversation for reference.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372777177", "createdAt": "2020-01-30T06:27:02Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDIwMg=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3OTczOA==", "bodyText": "Added. Also marked these as deprecated.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372779738", "createdAt": "2020-01-30T06:38:07Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDIwMg=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTc4MzgzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMjoyNToxOFrOFhSfoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjoyNjowN1rOFjgf4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDMzNg==", "bodyText": "Should first strike truly be a side effect of is suicide? Does this limit our options in case we want a unit that is just 'isSuicide'? Say someone has a non-attacking unit, or an attacking unit that is suicide, but not first strike, how could that be handled?", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r370450336", "createdAt": "2020-01-24T02:25:18Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2NTY3Mw==", "bodyText": "In theory no but this is for backwards compatibility because that is how suicide units work currently. Moving forward maps shouldn't use isSuicide and set either or both of the 2 new options.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372765673", "createdAt": "2020-01-30T05:31:25Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDMzNg=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3NjkyOA==", "bodyText": "I think this is where map versions would be incredibly useful. We could decouple this based on specified map version.\nHave you considered making isSuicde have attribute values? eg: 'suicideOn=attack', 'suicideOn=all'", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372776928", "createdAt": "2020-01-30T06:26:07Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDMzNg=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTc4NDc2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMjoyNjowM1rOFhSgMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNjo0OTo0M1rOFkeS5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDQ4MA==", "bodyText": "Should the 's' convention be carried forward? Would it be more clear if the parameter were simply spelled out?", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r370450480", "createdAt": "2020-01-24T02:26:03Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);\n+  }\n+\n+  private void setIsSuicideOnAttack(final String s) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2NTQ1OQ==", "bodyText": "I'd rather keep consistency for now. Easier to just update them all at once. Though honestly most of these are so simple that the parameter name isn't a huge deal.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372765459", "createdAt": "2020-01-30T05:30:18Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);\n+  }\n+\n+  private void setIsSuicideOnAttack(final String s) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDQ4MA=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3NjM0Ng==", "bodyText": "I'm not entirely sure it's consistent, I think there is argument for it being copy/pasta. Otherwise, we're left with just a single letter variable name representing the type, 'String'. Or does the 's' represent 'suicide', or 'isSuicide'? Having to decode what a variable single character represents is a small burden, but a burden nonetheless, that makes it harder to grok/read code.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372776346", "createdAt": "2020-01-30T06:23:21Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);\n+  }\n+\n+  private void setIsSuicideOnAttack(final String s) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDQ4MA=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc4MDA1OQ==", "bodyText": "\"Easier to just update them all at once.\"\n\nI have trouble agreeing as there are many more instances 'to fix' now. It's not clear they would all get the same fix.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372780059", "createdAt": "2020-01-30T06:39:35Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);\n+  }\n+\n+  private void setIsSuicideOnAttack(final String s) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDQ4MA=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc4MDY3Mw==", "bodyText": "Actually, backing up a bit, the private setter is really odd. Perhaps would it be easier if we just inlined this? Then when invoked via method reference, it would imply that we have more going on then a simple setter. Someone reading the code would be no worse off seeing any of the inconsistent cases, either they'd see the simple setter inline, or they would see a method reference that is either more complex or is a simple setter (which we could later come back to clean up).", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372780673", "createdAt": "2020-01-30T06:42:07Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);\n+  }\n+\n+  private void setIsSuicideOnAttack(final String s) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDQ4MA=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc4MjI5Mg==", "bodyText": "I believe the double setters (1 string, 1 actual type) has to do with the XML parsing for attachments. The attachment classes in general are very rough and primarily there for to hold the values from the map XML parsing.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372782292", "createdAt": "2020-01-30T06:48:49Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);\n+  }\n+\n+  private void setIsSuicideOnAttack(final String s) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDQ4MA=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MTMwMg==", "bodyText": "I believe the double setters (1 string, 1 actual type) has to do with the XML parsing for attachments. The attachment classes in general are very rough and primarily there for to hold the values from the map XML parsing.\n\nI believe I understood that; My point is the indirection here does not seem useful, inlining these methods would reduce the indirection.\nRe: variable name, most of the examples have been touched/added here and the new setter methods could have different variable names altogether. I don't really trust that we ever will come back and fix them.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373741302", "createdAt": "2020-02-01T00:39:08Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);\n+  }\n+\n+  private void setIsSuicideOnAttack(final String s) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDQ4MA=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1OTk1MQ==", "bodyText": "I think you're missing the big picture here. This entire class and really all the attachment classes follow this pattern of methods. Now whether that is an ideal pattern or not we can discuss but that is really a much larger issue than this PR and I would prefer to have a separate issue for it.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373759951", "createdAt": "2020-02-01T05:38:30Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);\n+  }\n+\n+  private void setIsSuicideOnAttack(final String s) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDQ4MA=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2MzQwOQ==", "bodyText": "I don't think I am necessarily:\n\nAt 4300+ lines, this class is a monster. At such scale, it's arguable there are any patterns, it's a task just to grok it to see if anything is consistent or what it even contains.\n\nThis is a counter-example to the 'pattern':\n        .put(\n            \"transportCost\",\n            MutableProperty.ofMapper(\n                DefaultAttachment::getInt,\n                this::setTransportCost,\n                this::getTransportCost,\n                () -> -1))\n\nTo help avoid unnecessary indirection I'm suggesting to follow the example of the counter-example and inline the setter/getters if they are simple.\nSecond, the class violates our preferred method ordering with arbitrarily located getter/setters that ought to be below where they are used.\nThird, if not explicitly listed, we have a preference to spell out variables and not use single letter variables. I'm not positive if the 's' makes sense or is the right prefix, and seeing s && ... is not as easy to understand as it could be.\nI can understand pushback on the first and second points, though I don't think either of us should make that the hill we choose to die on, the third point seems far less reasonable to ignore as it's more about the care of this update as it is adding new code that should really not be adding at least that element of technical debt.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373763409", "createdAt": "2020-02-01T07:06:04Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);\n+  }\n+\n+  private void setIsSuicideOnAttack(final String s) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDQ4MA=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc4OTQxNQ==", "bodyText": "I'd actually argue the larger the class the more consistency matters as its harder to understand if you see something being done multiple different ways.\nThat being said, I misunderstood what you were suggesting about in lining. I'm open to using one of the helper mappers to reduce which setter/getter/reseter are needed. Updated this.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373789415", "createdAt": "2020-02-01T16:49:43Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);\n+  }\n+\n+  private void setIsSuicideOnAttack(final String s) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDQ4MA=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTc4Njk2OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/Matches.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMjoyNzo1NFrOFhShdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNToyOTozMVrOFjfylw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDgwNg==", "bodyText": "Side-note, do you recall the rationale to not attach this method as a property of Unit? I suspect it would be pretty clearly better encapsulation.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r370450806", "createdAt": "2020-01-24T02:27:54Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/Matches.java", "diffHunk": "@@ -493,8 +493,12 @@ private Matches() {}\n             && !unitCanBeCapturedOnEnteringToInThisTerritory(player, terr, data).test(unit);\n   }\n \n-  public static Predicate<Unit> unitIsSuicide() {\n-    return unit -> UnitAttachment.get(unit.getType()).getIsSuicide();\n+  public static Predicate<Unit> unitIsSuicideOnAttack() {\n+    return unit -> UnitAttachment.get(unit.getType()).getIsSuicideOnAttack();\n+  }\n+\n+  public static Predicate<Unit> unitIsSuicideOnDefense() {\n+    return unit -> UnitAttachment.get(unit.getType()).getIsSuicideOnDefense();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2NTMzNQ==", "bodyText": "All the unit properties are part of UnitAttachment. This is really just the overall structure of the XML and code base.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372765335", "createdAt": "2020-01-30T05:29:31Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/Matches.java", "diffHunk": "@@ -493,8 +493,12 @@ private Matches() {}\n             && !unitCanBeCapturedOnEnteringToInThisTerritory(player, terr, data).test(unit);\n   }\n \n-  public static Predicate<Unit> unitIsSuicide() {\n-    return unit -> UnitAttachment.get(unit.getType()).getIsSuicide();\n+  public static Predicate<Unit> unitIsSuicideOnAttack() {\n+    return unit -> UnitAttachment.get(unit.getType()).getIsSuicideOnAttack();\n+  }\n+\n+  public static Predicate<Unit> unitIsSuicideOnDefense() {\n+    return unit -> UnitAttachment.get(unit.getType()).getIsSuicideOnDefense();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MDgwNg=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTc5MTM3OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMjozMTozOFrOFhSj9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjozMDoxMlrOFjgjmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MTQ0Nw==", "bodyText": "Would it maybe be more clear and direct to have a 'isSucicideOnAttack' property? It seems to get at that property, one has to be pretty clever to set a combination of values.\nI wonder as well if simply adding those two properties would make it easier for this update to be backward compatible. I'm very concerned that the property is not directly from the XML but is instead derived, it seems like it is quite complex compared to other properties that are usually 1:1.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r370451447", "createdAt": "2020-01-24T02:31:38Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ2NjYyMQ==", "bodyText": "Second, if 'isFirstStrike' is set, would this conflict and/or introduce a race condition for which property is actually set?\nEG: isSuicide = true & isFirstStrike = false (or vice versa)\nIf this also gets reset, will that turn off firstStrike for units that have it? Are we guaranteed to have it be turned back on?\nI'm feeling pretty convinced this property should be more independent of others, and allow 'isSuicide' to be more legacy and/or operate mostly as it used to.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r370466621", "createdAt": "2020-01-24T04:06:59Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MTQ0Nw=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2NTE0Ng==", "bodyText": "Not really following you here. So essentially what this does is add 2 new unit options isSuicideOnAttack and isSuicideOnDefense as often you don't want units to suicide in both cases (think I don't want missiles to suicide on defense, etc). This then deprecates isSuicide which for backwards compatibility now just sets these new properties. Eventually after this release and if all maps using isSuicide are updated then we could remove it all together.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372765146", "createdAt": "2020-01-30T05:28:20Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MTQ0Nw=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3Nzg4MA==", "bodyText": "Essentially I was suggesting to leave the 'isSuicide' property unchanged and instead just add the new properties. It's more clear to me now that you're removing the now old 'isSuicide' property.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372777880", "createdAt": "2020-01-30T06:30:12Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1752,19 +1753,45 @@ private void resetCanDieFromReachingMaxDamage() {\n   }\n \n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n   private void setIsSuicide(final Boolean s) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MTQ0Nw=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTc5MzQ1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMjozMzoyMFrOFhSlIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNzowODoxMFrOFkctlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MTc0Nw==", "bodyText": "Should canReturnFire be a method of Properties? Would that be more direct and re-usable? Any concern that we might duplicate or confuse this check somewhere else?", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r370451747", "createdAt": "2020-01-24T02:33:20Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1404,35 +1404,33 @@ private void fireSuicideUnitsAttack() {\n     if (suicideAttackers.isEmpty() || attackedDefenders.isEmpty()) {\n       return;\n     }\n-    final boolean canReturnFire = (!isSuicideAndMunitionCasualtiesRestricted());\n-    final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>();\n-    allEnemyUnitsAliveOrWaitingToDie.addAll(defendingUnits);\n+    final boolean canReturnFire = (!Properties.getSuicideAndMunitionCasualtiesRestricted(gameData));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MzcxMw==", "bodyText": "Having a method Properties.canReturnFire(gameData) seems like it would much simpler to understand here and would be much better encapsulation. Currently MustFightBattle is bloated and knows about far too much, it should not necessarily be in change of interpretting game rules like this.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373743713", "createdAt": "2020-02-01T00:58:02Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1404,35 +1404,33 @@ private void fireSuicideUnitsAttack() {\n     if (suicideAttackers.isEmpty() || attackedDefenders.isEmpty()) {\n       return;\n     }\n-    final boolean canReturnFire = (!isSuicideAndMunitionCasualtiesRestricted());\n-    final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>();\n-    allEnemyUnitsAliveOrWaitingToDie.addAll(defendingUnits);\n+    final boolean canReturnFire = (!Properties.getSuicideAndMunitionCasualtiesRestricted(gameData));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MTc0Nw=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0Mzg0NQ==", "bodyText": "Noticing now as well we have the logic repeated: https://github.com/triplea-game/triplea/pull/5871/files/7e244f4d9c1c60f021bacdaf21c2606c914d4dbd#diff-009c223dfe7c716d07dc90f27899c933R1446, seems like an actual DRY violation where the idea of 'canReturnFire' is computed in multiple places, moving this logic would help with that problem.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373743845", "createdAt": "2020-02-01T00:59:09Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1404,35 +1404,33 @@ private void fireSuicideUnitsAttack() {\n     if (suicideAttackers.isEmpty() || attackedDefenders.isEmpty()) {\n       return;\n     }\n-    final boolean canReturnFire = (!isSuicideAndMunitionCasualtiesRestricted());\n-    final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>();\n-    allEnemyUnitsAliveOrWaitingToDie.addAll(defendingUnits);\n+    final boolean canReturnFire = (!Properties.getSuicideAndMunitionCasualtiesRestricted(gameData));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MTc0Nw=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2MDA5NQ==", "bodyText": "Uh, I think this was all removed. Are you looking at the latest diff and commits?", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373760095", "createdAt": "2020-02-01T05:41:50Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1404,35 +1404,33 @@ private void fireSuicideUnitsAttack() {\n     if (suicideAttackers.isEmpty() || attackedDefenders.isEmpty()) {\n       return;\n     }\n-    final boolean canReturnFire = (!isSuicideAndMunitionCasualtiesRestricted());\n-    final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>();\n-    allEnemyUnitsAliveOrWaitingToDie.addAll(defendingUnits);\n+    final boolean canReturnFire = (!Properties.getSuicideAndMunitionCasualtiesRestricted(gameData));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MTc0Nw=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2MzQ3Nw==", "bodyText": "Not sure, seems to indicate I need to start over on the entire review  \ud83d\ude1e", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373763477", "createdAt": "2020-02-01T07:08:10Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1404,35 +1404,33 @@ private void fireSuicideUnitsAttack() {\n     if (suicideAttackers.isEmpty() || attackedDefenders.isEmpty()) {\n       return;\n     }\n-    final boolean canReturnFire = (!isSuicideAndMunitionCasualtiesRestricted());\n-    final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>();\n-    allEnemyUnitsAliveOrWaitingToDie.addAll(defendingUnits);\n+    final boolean canReturnFire = (!Properties.getSuicideAndMunitionCasualtiesRestricted(gameData));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MTc0Nw=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTc5NTU5OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/DiceRollTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMjozNToxOVrOFhSmYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNjoyNjo1NVrOFkCYZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MjA2NA==", "bodyText": "Would a method overload be cleaner to avoid passing null parameter when the last parameter is unused?", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r370452064", "createdAt": "2020-01-24T02:35:19Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/DiceRollTest.java", "diffHunk": "@@ -63,19 +63,23 @@ void testSimple() {\n         .thenAnswer(withValues(1)); // infantry attack does not hit at 1 (0 based)\n     // infantry defends\n     final DiceRoll roll =\n-        DiceRoll.rollDice(infantry, true, russians, bridge, battle, \"\", territoryEffects, null);\n+        DiceRoll.rollDice(\n+            infantry, true, russians, bridge, battle, \"\", territoryEffects, null, infantry);\n     assertThat(roll.getHits(), is(1));\n     // infantry\n     final DiceRoll roll2 =\n-        DiceRoll.rollDice(infantry, true, russians, bridge, battle, \"\", territoryEffects, null);\n+        DiceRoll.rollDice(\n+            infantry, true, russians, bridge, battle, \"\", territoryEffects, null, infantry);\n     assertThat(roll2.getHits(), is(0));\n     // infantry attacks\n     final DiceRoll roll3 =\n-        DiceRoll.rollDice(infantry, false, russians, bridge, battle, \"\", territoryEffects, null);\n+        DiceRoll.rollDice(\n+            infantry, false, russians, bridge, battle, \"\", territoryEffects, null, infantry);\n     assertThat(roll3.getHits(), is(1));\n     // infantry attack\n     final DiceRoll roll4 =\n-        DiceRoll.rollDice(infantry, false, russians, bridge, battle, \"\", territoryEffects, null);\n+        DiceRoll.rollDice(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2NDU2NQ==", "bodyText": "Possibly. I may add some overloads to this but wanted to ensure I updated all the necessary places that needed updated first and not miss any.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372764565", "createdAt": "2020-01-30T05:25:04Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/DiceRollTest.java", "diffHunk": "@@ -63,19 +63,23 @@ void testSimple() {\n         .thenAnswer(withValues(1)); // infantry attack does not hit at 1 (0 based)\n     // infantry defends\n     final DiceRoll roll =\n-        DiceRoll.rollDice(infantry, true, russians, bridge, battle, \"\", territoryEffects, null);\n+        DiceRoll.rollDice(\n+            infantry, true, russians, bridge, battle, \"\", territoryEffects, null, infantry);\n     assertThat(roll.getHits(), is(1));\n     // infantry\n     final DiceRoll roll2 =\n-        DiceRoll.rollDice(infantry, true, russians, bridge, battle, \"\", territoryEffects, null);\n+        DiceRoll.rollDice(\n+            infantry, true, russians, bridge, battle, \"\", territoryEffects, null, infantry);\n     assertThat(roll2.getHits(), is(0));\n     // infantry attacks\n     final DiceRoll roll3 =\n-        DiceRoll.rollDice(infantry, false, russians, bridge, battle, \"\", territoryEffects, null);\n+        DiceRoll.rollDice(\n+            infantry, false, russians, bridge, battle, \"\", territoryEffects, null, infantry);\n     assertThat(roll3.getHits(), is(1));\n     // infantry attack\n     final DiceRoll roll4 =\n-        DiceRoll.rollDice(infantry, false, russians, bridge, battle, \"\", territoryEffects, null);\n+        DiceRoll.rollDice(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MjA2NA=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMzMjA2OA==", "bodyText": "Updated.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373332068", "createdAt": "2020-01-31T06:26:55Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/DiceRollTest.java", "diffHunk": "@@ -63,19 +63,23 @@ void testSimple() {\n         .thenAnswer(withValues(1)); // infantry attack does not hit at 1 (0 based)\n     // infantry defends\n     final DiceRoll roll =\n-        DiceRoll.rollDice(infantry, true, russians, bridge, battle, \"\", territoryEffects, null);\n+        DiceRoll.rollDice(\n+            infantry, true, russians, bridge, battle, \"\", territoryEffects, null, infantry);\n     assertThat(roll.getHits(), is(1));\n     // infantry\n     final DiceRoll roll2 =\n-        DiceRoll.rollDice(infantry, true, russians, bridge, battle, \"\", territoryEffects, null);\n+        DiceRoll.rollDice(\n+            infantry, true, russians, bridge, battle, \"\", territoryEffects, null, infantry);\n     assertThat(roll2.getHits(), is(0));\n     // infantry attacks\n     final DiceRoll roll3 =\n-        DiceRoll.rollDice(infantry, false, russians, bridge, battle, \"\", territoryEffects, null);\n+        DiceRoll.rollDice(\n+            infantry, false, russians, bridge, battle, \"\", territoryEffects, null, infantry);\n     assertThat(roll3.getHits(), is(1));\n     // infantry attack\n     final DiceRoll roll4 =\n-        DiceRoll.rollDice(infantry, false, russians, bridge, battle, \"\", territoryEffects, null);\n+        DiceRoll.rollDice(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1MjA2NA=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDAyNTc0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo0MDozNVrOFiyCXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo0MDozNVrOFiyCXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNTcxMQ==", "bodyText": "Method firstStrikeFire has 7 arguments (exceeds 4 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372015711", "createdAt": "2020-01-28T19:40:35Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1949,59 +1912,63 @@ private void submergeSubsVsOnlyAir(final IDelegateBridge bridge) {\n     }\n   }\n \n-  private void defendSubs(final ReturnFire returnFire) {\n-    if (attackingUnits.isEmpty()) {\n-      return;\n-    }\n-    Collection<Unit> firing = new ArrayList<>(defendingUnits);\n-    firing.addAll(defendingWaitingToDie);\n-    firing = CollectionUtils.getMatches(firing, Matches.unitIsFirstStrike());\n-    if (firing.isEmpty()) {\n-      return;\n-    }\n-    final Collection<Unit> attacked =\n-        CollectionUtils.getMatches(attackingUnits, Matches.unitIsNotAir());\n-    if (attacked.isEmpty()) {\n-      return;\n-    }\n-    final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>(attackingUnits);\n-    allEnemyUnitsAliveOrWaitingToDie.addAll(attackingWaitingToDie);\n-    fire(\n-        attacker.getName() + SELECT_SUB_CASUALTIES,\n-        firing,\n-        attacked,\n-        allEnemyUnitsAliveOrWaitingToDie,\n-        true,\n+  private void firstStrikeDefendersFire(final ReturnFire returnFire) {\n+    firstStrikeFire(\n         returnFire,\n-        \"Subs defend, \");\n+        attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES,\n+        \"First strike units defend, \",\n+        defendingUnits,\n+        defendingWaitingToDie,\n+        attackingUnits,\n+        attackingWaitingToDie);\n   }\n \n-  private void attackSubs(final ReturnFire returnFire) {\n-    final Collection<Unit> firing =\n-        CollectionUtils.getMatches(attackingUnits, Matches.unitIsFirstStrike());\n-    if (firing.isEmpty()) {\n-      return;\n-    }\n-    final Collection<Unit> attacked =\n-        CollectionUtils.getMatches(defendingUnits, Matches.unitIsNotAir());\n-    // if there are destroyers in the attacked units, we can return fire.\n-    final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>(defendingUnits);\n-    allEnemyUnitsAliveOrWaitingToDie.addAll(defendingWaitingToDie);\n+  private void firstStrikeAttackersFire(final ReturnFire returnFire) {\n+    firstStrikeFire(\n+        returnFire,\n+        defender.getName() + SELECT_FIRST_STRIKE_CASUALTIES,\n+        \"First strike units attack, \",\n+        attackingUnits,\n+        attackingWaitingToDie,\n+        defendingUnits,\n+        defendingWaitingToDie);\n+  }\n+\n+  private void firstStrikeFire(\n+      final ReturnFire returnFire,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f92925f5fb2af58d9f48ccb516e409c83fb1fc"}, "originalPosition": 448}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDAyNTc1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo0MDozNVrOFiyCYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo0MDozNVrOFiyCYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNTcxMw==", "bodyText": "Method standardFire has 7 arguments (exceeds 4 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372015713", "createdAt": "2020-01-28T19:40:35Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -2014,102 +1981,98 @@ private void attackAirOnNonSubs() {\n           CollectionUtils.getMatches(defendingUnits, Matches.unitCanNotBeTargetedByAll().negate());\n       final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>(defendingUnits);\n       allEnemyUnitsAliveOrWaitingToDie.addAll(defendingWaitingToDie);\n+      final List<Unit> allFriendlyUnitsAliveOrWaitingToDie = new ArrayList<>(attackingUnits);\n+      allFriendlyUnitsAliveOrWaitingToDie.addAll(attackingWaitingToDie);\n       fire(\n           defender.getName() + SELECT_CASUALTIES,\n           units,\n           enemyUnitsNotSubs,\n           allEnemyUnitsAliveOrWaitingToDie,\n+          allFriendlyUnitsAliveOrWaitingToDie,\n           false,\n           ReturnFire.ALL,\n           \"Attacker's aircraft fire,\");\n     }\n   }\n \n-  /**\n-   * If there are no attacking DDs, but defending SUBs, remove attacking AIR as they've already\n-   * fired, otherwise fire all attackers.\n-   */\n-  private void attackNonSubs() {\n-    if (defendingUnits.isEmpty()) {\n-      return;\n-    }\n-    Collection<Unit> units =\n-        CollectionUtils.getMatches(attackingUnits, Matches.unitIsFirstStrike().negate());\n-    units.addAll(\n-        CollectionUtils.getMatches(attackingWaitingToDie, Matches.unitIsFirstStrike().negate()));\n-    // See if allied air can participate in combat\n-    if (!isAlliedAirIndependent()) {\n-      units = CollectionUtils.getMatches(units, Matches.unitIsOwnedBy(attacker));\n-    }\n-    // if restricted, remove aircraft from attackers\n-    if (!canAirAttackSubs(defendingUnits, units)) {\n-      units.removeAll(CollectionUtils.getMatches(units, Matches.unitIsAir()));\n-    }\n-    if (units.isEmpty()) {\n-      return;\n-    }\n-    final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>(defendingUnits);\n-    allEnemyUnitsAliveOrWaitingToDie.addAll(defendingWaitingToDie);\n-    fire(\n-        defender.getName() + SELECT_CASUALTIES,\n-        units,\n-        defendingUnits,\n-        allEnemyUnitsAliveOrWaitingToDie,\n-        false,\n-        ReturnFire.ALL,\n-        \"Attackers fire,\");\n-  }\n-\n   private void defendAirOnNonSubs() {\n-    if (attackingUnits.isEmpty()) {\n-      return;\n-    }\n     Collection<Unit> units = new ArrayList<>(defendingUnits);\n     units.addAll(defendingWaitingToDie);\n     if (!canAirAttackSubs(attackingUnits, units)) {\n       units = CollectionUtils.getMatches(units, Matches.unitIsAir());\n       final Collection<Unit> enemyUnitsNotSubs =\n           CollectionUtils.getMatches(attackingUnits, Matches.unitCanNotBeTargetedByAll().negate());\n-      if (enemyUnitsNotSubs.isEmpty()) {\n-        return;\n-      }\n       final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>(attackingUnits);\n       allEnemyUnitsAliveOrWaitingToDie.addAll(attackingWaitingToDie);\n+      final List<Unit> allFriendlyUnitsAliveOrWaitingToDie = new ArrayList<>(defendingUnits);\n+      allFriendlyUnitsAliveOrWaitingToDie.addAll(defendingWaitingToDie);\n       fire(\n           attacker.getName() + SELECT_CASUALTIES,\n           units,\n           enemyUnitsNotSubs,\n           allEnemyUnitsAliveOrWaitingToDie,\n+          allFriendlyUnitsAliveOrWaitingToDie,\n           true,\n           ReturnFire.ALL,\n           \"Defender's aircraft fire,\");\n     }\n   }\n \n-  private void defendNonSubs() {\n-    if (attackingUnits.isEmpty()) {\n-      return;\n+  private void standardAttackersFire() {\n+    standardFire(\n+        defender.getName() + SELECT_CASUALTIES,\n+        \"Attackers fire, \",\n+        false,\n+        attackingUnits,\n+        attackingWaitingToDie,\n+        defendingUnits,\n+        defendingWaitingToDie);\n+  }\n+\n+  private void standardDefendersFire() {\n+    standardFire(\n+        attacker.getName() + SELECT_CASUALTIES,\n+        \"Defenders fire, \",\n+        true,\n+        defendingUnits,\n+        defendingWaitingToDie,\n+        attackingUnits,\n+        attackingWaitingToDie);\n+  }\n+\n+  private void standardFire(\n+      final String stepName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f92925f5fb2af58d9f48ccb516e409c83fb1fc"}, "originalPosition": 600}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDAxMTgzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTozNzowNlrOFjYXiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTozNzowNlrOFjYXiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0MzcyMQ==", "bodyText": "Method fireAirOnNonSubs has 7 arguments (exceeds 4 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372643721", "createdAt": "2020-01-29T21:37:06Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1949,167 +1913,174 @@ private void submergeSubsVsOnlyAir(final IDelegateBridge bridge) {\n     }\n   }\n \n-  private void defendSubs(final ReturnFire returnFire) {\n-    if (attackingUnits.isEmpty()) {\n-      return;\n-    }\n-    Collection<Unit> firing = new ArrayList<>(defendingUnits);\n-    firing.addAll(defendingWaitingToDie);\n-    firing = CollectionUtils.getMatches(firing, Matches.unitIsFirstStrike());\n-    if (firing.isEmpty()) {\n-      return;\n-    }\n-    final Collection<Unit> attacked =\n-        CollectionUtils.getMatches(attackingUnits, Matches.unitIsNotAir());\n-    if (attacked.isEmpty()) {\n-      return;\n-    }\n-    final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>(attackingUnits);\n-    allEnemyUnitsAliveOrWaitingToDie.addAll(attackingWaitingToDie);\n-    fire(\n-        attacker.getName() + SELECT_SUB_CASUALTIES,\n-        firing,\n-        attacked,\n-        allEnemyUnitsAliveOrWaitingToDie,\n-        true,\n+  private void firstStrikeDefendersFire(final ReturnFire returnFire) {\n+    firstStrikeFire(\n         returnFire,\n-        \"Subs defend, \");\n+        attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES,\n+        \"First strike units defend, \",\n+        defendingUnits,\n+        defendingWaitingToDie,\n+        attackingUnits,\n+        attackingWaitingToDie);\n   }\n \n-  private void attackSubs(final ReturnFire returnFire) {\n-    final Collection<Unit> firing =\n-        CollectionUtils.getMatches(attackingUnits, Matches.unitIsFirstStrike());\n-    if (firing.isEmpty()) {\n-      return;\n-    }\n-    final Collection<Unit> attacked =\n-        CollectionUtils.getMatches(defendingUnits, Matches.unitIsNotAir());\n-    // if there are destroyers in the attacked units, we can return fire.\n-    final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>(defendingUnits);\n-    allEnemyUnitsAliveOrWaitingToDie.addAll(defendingWaitingToDie);\n+  private void firstStrikeAttackersFire(final ReturnFire returnFire) {\n+    firstStrikeFire(\n+        returnFire,\n+        defender.getName() + SELECT_FIRST_STRIKE_CASUALTIES,\n+        \"First strike units attack, \",\n+        attackingUnits,\n+        attackingWaitingToDie,\n+        defendingUnits,\n+        defendingWaitingToDie);\n+  }\n+\n+  private void firstStrikeFire(\n+      final ReturnFire returnFire,\n+      final String stepName,\n+      final String message,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> firingUnitsWaitingToDie,\n+      final Collection<Unit> enemyUnits,\n+      final Collection<Unit> enemyUnitsWaitingToDie) {\n+\n+    Collection<Unit> firing = new ArrayList<>(firingUnits);\n+    firing.addAll(firingUnitsWaitingToDie);\n+    firing = CollectionUtils.getMatches(firing, Matches.unitIsFirstStrike());\n+    final Set<UnitType> canNotTarget =\n+        firing.stream()\n+            .map(unit -> UnitAttachment.get(unit.getType()).getCanNotTarget())\n+            .flatMap(unitTypes -> unitTypes.stream())\n+            .collect(Collectors.toSet());\n+    final Collection<Unit> attackableUnits =\n+        CollectionUtils.getMatches(enemyUnits, Matches.unitIsOfTypes(canNotTarget).negate());\n+    final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>(enemyUnits);\n+    allEnemyUnitsAliveOrWaitingToDie.addAll(enemyUnitsWaitingToDie);\n+    final List<Unit> allFriendlyUnitsAliveOrWaitingToDie = new ArrayList<>(firingUnits);\n+    allFriendlyUnitsAliveOrWaitingToDie.addAll(firingUnitsWaitingToDie);\n     fire(\n-        defender.getName() + SELECT_SUB_CASUALTIES,\n+        stepName,\n         firing,\n-        attacked,\n+        attackableUnits,\n         allEnemyUnitsAliveOrWaitingToDie,\n+        allFriendlyUnitsAliveOrWaitingToDie,\n         false,\n         returnFire,\n-        \"Subs fire,\");\n+        message);\n   }\n \n-  /** If there are no attacking DDs but defending SUBs, fire AIR at non-SUB forces ONLY. */\n   private void attackAirOnNonSubs() {\n-    if (defendingUnits.isEmpty()) {\n-      return;\n-    }\n-    Collection<Unit> units = new ArrayList<>(attackingUnits);\n-    units.addAll(attackingWaitingToDie);\n+    fireAirOnNonSubs(\n+        defender.getName() + SELECT_CASUALTIES,\n+        \"Attacker's aircraft fire,\",\n+        false,\n+        attackingUnits,\n+        attackingWaitingToDie,\n+        defendingUnits,\n+        defendingWaitingToDie);\n+  }\n+\n+  private void defendAirOnNonSubs() {\n+    fireAirOnNonSubs(\n+        attacker.getName() + SELECT_CASUALTIES,\n+        \"Defender's aircraft fire,\",\n+        true,\n+        defendingUnits,\n+        defendingWaitingToDie,\n+        attackingUnits,\n+        attackingWaitingToDie);\n+  }\n+\n+  private void fireAirOnNonSubs(\n+      final String stepName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d2e060eb55787acc011ea8323359023b9eb495"}, "originalPosition": 532}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDM2OTMxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMDoxMToyN1rOFjbzTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQyMDoxNTowMVrOFke73w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5OTk4MQ==", "bodyText": "Method newTargetGroups has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372699981", "createdAt": "2020-01-30T00:11:27Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+@Setter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {\n+    return player.getName() + \" fire, \";\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so most restrictive appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8d1c2d0370a3ace2cfa208888a790b043cfe96b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0Mjk0Mw==", "bodyText": "A test of this method would help review and add confidence this is completely working as expected. Such a test would give design feedback as well and potentially help drive further break down in responsibility to make it easier to test and understand.\nFor example, extracting 'findTargets' to its own module would be a first simplification that would help decompose the problem, ie: a targetFinder that is perhaps injected into this class.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373742943", "createdAt": "2020-02-01T00:51:46Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+@Setter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {\n+    return player.getName() + \" fire, \";\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so most restrictive appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5OTk4MQ=="}, "originalCommit": {"oid": "e8d1c2d0370a3ace2cfa208888a790b043cfe96b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5MzgzMg==", "bodyText": "Refactored this a bit to break it up and rename some variables. I would eventually like to add unit tests to this since it is a pretty isolated functionality that should be easy to test. Not sure I'll have the time to do that in the next few days though so might be a better follow up.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373793832", "createdAt": "2020-02-01T18:15:01Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+@Setter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {\n+    return player.getName() + \" fire, \";\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so most restrictive appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5OTk4MQ=="}, "originalCommit": {"oid": "e8d1c2d0370a3ace2cfa208888a790b043cfe96b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5OTkwMw==", "bodyText": "Added unit tests.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373799903", "createdAt": "2020-02-01T20:15:01Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+@Setter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {\n+    return player.getName() + \" fire, \";\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so most restrictive appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5OTk4MQ=="}, "originalCommit": {"oid": "e8d1c2d0370a3ace2cfa208888a790b043cfe96b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDM2OTMzOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMDoxMToyN1rOFjbzTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMDoxMToyN1rOFjbzTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5OTk4Mw==", "bodyText": "Method findTargets has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372699983", "createdAt": "2020-01-30T00:11:27Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+@Setter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {\n+    return player.getName() + \" fire, \";\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so most restrictive appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {\n+\n+    final Set<UnitType> unitTypes =\n+        units.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final Set<UnitType> enemyUnitTypes =\n+        enemyUnits.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final List<TargetGroup> firingGroups = new ArrayList<TargetGroup>();\n+    for (final UnitType unitType : unitTypes) {\n+      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n+      boolean isAdded = false;\n+      for (final TargetGroup firingGroup : firingGroups) {\n+        if (firingGroup.getTargetUnitTypes().equals(targets)) {\n+          firingGroup.getFiringUnitTypes().add(unitType);\n+          isAdded = true;\n+          break;\n+        }\n+      }\n+      if (!isAdded) {\n+        firingGroups.add(new TargetGroup(unitType, targets));\n+      }\n+    }\n+    return sortFiringGroups(firingGroups);\n+  }\n+\n+  private static Set<UnitType> findTargets(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8d1c2d0370a3ace2cfa208888a790b043cfe96b"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDM4MzczOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMDoxOTowOFrOFjb75g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMDoxOTowOFrOFjb75g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcwMjE4Mg==", "bodyText": "Method firstStrikeFire has 8 arguments (exceeds 4 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372702182", "createdAt": "2020-01-30T00:19:08Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1949,169 +1893,115 @@ private void submergeSubsVsOnlyAir(final IDelegateBridge bridge) {\n     }\n   }\n \n-  private void defendSubs(final ReturnFire returnFire) {\n-    if (attackingUnits.isEmpty()) {\n-      return;\n-    }\n-    Collection<Unit> firing = new ArrayList<>(defendingUnits);\n-    firing.addAll(defendingWaitingToDie);\n-    firing = CollectionUtils.getMatches(firing, Matches.unitIsFirstStrike());\n-    if (firing.isEmpty()) {\n-      return;\n-    }\n-    final Collection<Unit> attacked =\n-        CollectionUtils.getMatches(attackingUnits, Matches.unitIsNotAir());\n-    if (attacked.isEmpty()) {\n-      return;\n-    }\n-    final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>(attackingUnits);\n-    allEnemyUnitsAliveOrWaitingToDie.addAll(attackingWaitingToDie);\n-    fire(\n-        attacker.getName() + SELECT_SUB_CASUALTIES,\n-        firing,\n-        attacked,\n-        allEnemyUnitsAliveOrWaitingToDie,\n-        true,\n+  private void firstStrikeDefendersFire(final ReturnFire returnFire) {\n+    firstStrikeFire(\n         returnFire,\n-        \"Subs defend, \");\n+        attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES,\n+        true,\n+        defender,\n+        defendingUnits,\n+        defendingWaitingToDie,\n+        attackingUnits,\n+        attackingWaitingToDie);\n   }\n \n-  private void attackSubs(final ReturnFire returnFire) {\n-    final Collection<Unit> firing =\n-        CollectionUtils.getMatches(attackingUnits, Matches.unitIsFirstStrike());\n-    if (firing.isEmpty()) {\n-      return;\n-    }\n-    final Collection<Unit> attacked =\n-        CollectionUtils.getMatches(defendingUnits, Matches.unitIsNotAir());\n-    // if there are destroyers in the attacked units, we can return fire.\n-    final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>(defendingUnits);\n-    allEnemyUnitsAliveOrWaitingToDie.addAll(defendingWaitingToDie);\n-    fire(\n-        defender.getName() + SELECT_SUB_CASUALTIES,\n-        firing,\n-        attacked,\n-        allEnemyUnitsAliveOrWaitingToDie,\n-        false,\n+  private void firstStrikeAttackersFire(final ReturnFire returnFire) {\n+    firstStrikeFire(\n         returnFire,\n-        \"Subs fire,\");\n+        defender.getName() + SELECT_FIRST_STRIKE_CASUALTIES,\n+        false,\n+        attacker,\n+        attackingUnits,\n+        attackingWaitingToDie,\n+        defendingUnits,\n+        defendingWaitingToDie);\n   }\n \n-  /** If there are no attacking DDs but defending SUBs, fire AIR at non-SUB forces ONLY. */\n-  private void attackAirOnNonSubs() {\n-    if (defendingUnits.isEmpty()) {\n-      return;\n-    }\n-    Collection<Unit> units = new ArrayList<>(attackingUnits);\n-    units.addAll(attackingWaitingToDie);\n-    // See if allied air can participate in combat\n-    if (!isAlliedAirIndependent()) {\n-      units = CollectionUtils.getMatches(units, Matches.unitIsOwnedBy(attacker));\n-    }\n-    if (!canAirAttackSubs(defendingUnits, units)) {\n-      units = CollectionUtils.getMatches(units, Matches.unitIsAir());\n-      final Collection<Unit> enemyUnitsNotSubs =\n-          CollectionUtils.getMatches(defendingUnits, Matches.unitCanNotBeTargetedByAll().negate());\n-      final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>(defendingUnits);\n-      allEnemyUnitsAliveOrWaitingToDie.addAll(defendingWaitingToDie);\n+  private void firstStrikeFire(\n+      final ReturnFire returnFire,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b79b9a94f95c88b799b75fedb085227983e4e152"}, "originalPosition": 518}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDU1ODQ1OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMjoxMjoyNVrOFjdlfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMjoxMjoyNVrOFjdlfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcyOTIxNQ==", "bodyText": "Method findTargetGroupsAndFire has 9 arguments (exceeds 4 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372729215", "createdAt": "2020-01-30T02:12:25Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1949,167 +1893,91 @@ private void submergeSubsVsOnlyAir(final IDelegateBridge bridge) {\n     }\n   }\n \n-  private void defendSubs(final ReturnFire returnFire) {\n-    if (attackingUnits.isEmpty()) {\n-      return;\n-    }\n-    Collection<Unit> firing = new ArrayList<>(defendingUnits);\n-    firing.addAll(defendingWaitingToDie);\n-    firing = CollectionUtils.getMatches(firing, Matches.unitIsFirstStrike());\n-    if (firing.isEmpty()) {\n-      return;\n-    }\n-    final Collection<Unit> attacked =\n-        CollectionUtils.getMatches(attackingUnits, Matches.unitIsNotAir());\n-    if (attacked.isEmpty()) {\n-      return;\n-    }\n-    final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>(attackingUnits);\n-    allEnemyUnitsAliveOrWaitingToDie.addAll(attackingWaitingToDie);\n-    fire(\n-        attacker.getName() + SELECT_SUB_CASUALTIES,\n-        firing,\n-        attacked,\n-        allEnemyUnitsAliveOrWaitingToDie,\n-        true,\n+  private void firstStrikeDefendersFire(final ReturnFire returnFire) {\n+    findTargetGroupsAndFire(\n         returnFire,\n-        \"Subs defend, \");\n+        attacker.getName() + SELECT_FIRST_STRIKE_CASUALTIES,\n+        true,\n+        defender,\n+        Matches.unitIsFirstStrike(),\n+        defendingUnits,\n+        defendingWaitingToDie,\n+        attackingUnits,\n+        attackingWaitingToDie);\n   }\n \n-  private void attackSubs(final ReturnFire returnFire) {\n-    final Collection<Unit> firing =\n-        CollectionUtils.getMatches(attackingUnits, Matches.unitIsFirstStrike());\n-    if (firing.isEmpty()) {\n-      return;\n-    }\n-    final Collection<Unit> attacked =\n-        CollectionUtils.getMatches(defendingUnits, Matches.unitIsNotAir());\n-    // if there are destroyers in the attacked units, we can return fire.\n-    final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>(defendingUnits);\n-    allEnemyUnitsAliveOrWaitingToDie.addAll(defendingWaitingToDie);\n-    fire(\n-        defender.getName() + SELECT_SUB_CASUALTIES,\n-        firing,\n-        attacked,\n-        allEnemyUnitsAliveOrWaitingToDie,\n-        false,\n+  private void firstStrikeAttackersFire(final ReturnFire returnFire) {\n+    findTargetGroupsAndFire(\n         returnFire,\n-        \"Subs fire,\");\n-  }\n-\n-  /** If there are no attacking DDs but defending SUBs, fire AIR at non-SUB forces ONLY. */\n-  private void attackAirOnNonSubs() {\n-    if (defendingUnits.isEmpty()) {\n-      return;\n-    }\n-    Collection<Unit> units = new ArrayList<>(attackingUnits);\n-    units.addAll(attackingWaitingToDie);\n-    // See if allied air can participate in combat\n-    if (!isAlliedAirIndependent()) {\n-      units = CollectionUtils.getMatches(units, Matches.unitIsOwnedBy(attacker));\n-    }\n-    if (!canAirAttackSubs(defendingUnits, units)) {\n-      units = CollectionUtils.getMatches(units, Matches.unitIsAir());\n-      final Collection<Unit> enemyUnitsNotSubs =\n-          CollectionUtils.getMatches(defendingUnits, Matches.unitCanNotBeTargetedByAll().negate());\n-      final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>(defendingUnits);\n-      allEnemyUnitsAliveOrWaitingToDie.addAll(defendingWaitingToDie);\n-      fire(\n-          defender.getName() + SELECT_CASUALTIES,\n-          units,\n-          enemyUnitsNotSubs,\n-          allEnemyUnitsAliveOrWaitingToDie,\n-          false,\n-          ReturnFire.ALL,\n-          \"Attacker's aircraft fire,\");\n-    }\n+        defender.getName() + SELECT_FIRST_STRIKE_CASUALTIES,\n+        false,\n+        attacker,\n+        Matches.unitIsFirstStrike(),\n+        attackingUnits,\n+        attackingWaitingToDie,\n+        defendingUnits,\n+        defendingWaitingToDie);\n   }\n \n-  /**\n-   * If there are no attacking DDs, but defending SUBs, remove attacking AIR as they've already\n-   * fired, otherwise fire all attackers.\n-   */\n-  private void attackNonSubs() {\n-    if (defendingUnits.isEmpty()) {\n-      return;\n-    }\n-    Collection<Unit> units =\n-        CollectionUtils.getMatches(attackingUnits, Matches.unitIsFirstStrike().negate());\n-    units.addAll(\n-        CollectionUtils.getMatches(attackingWaitingToDie, Matches.unitIsFirstStrike().negate()));\n-    // See if allied air can participate in combat\n-    if (!isAlliedAirIndependent()) {\n-      units = CollectionUtils.getMatches(units, Matches.unitIsOwnedBy(attacker));\n-    }\n-    // if restricted, remove aircraft from attackers\n-    if (!canAirAttackSubs(defendingUnits, units)) {\n-      units.removeAll(CollectionUtils.getMatches(units, Matches.unitIsAir()));\n-    }\n-    if (units.isEmpty()) {\n-      return;\n-    }\n-    final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>(defendingUnits);\n-    allEnemyUnitsAliveOrWaitingToDie.addAll(defendingWaitingToDie);\n-    fire(\n+  private void standardAttackersFire() {\n+    findTargetGroupsAndFire(\n+        ReturnFire.ALL,\n         defender.getName() + SELECT_CASUALTIES,\n-        units,\n-        defendingUnits,\n-        allEnemyUnitsAliveOrWaitingToDie,\n         false,\n+        attacker,\n+        Matches.unitIsFirstStrike().negate(),\n+        attackingUnits,\n+        attackingWaitingToDie,\n+        defendingUnits,\n+        defendingWaitingToDie);\n+  }\n+\n+  private void standardDefendersFire() {\n+    findTargetGroupsAndFire(\n         ReturnFire.ALL,\n-        \"Attackers fire,\");\n+        attacker.getName() + SELECT_CASUALTIES,\n+        true,\n+        defender,\n+        Matches.unitIsFirstStrike().negate(),\n+        defendingUnits,\n+        defendingWaitingToDie,\n+        attackingUnits,\n+        attackingWaitingToDie);\n   }\n \n-  private void defendAirOnNonSubs() {\n-    if (attackingUnits.isEmpty()) {\n-      return;\n-    }\n-    Collection<Unit> units = new ArrayList<>(defendingUnits);\n-    units.addAll(defendingWaitingToDie);\n-    if (!canAirAttackSubs(attackingUnits, units)) {\n-      units = CollectionUtils.getMatches(units, Matches.unitIsAir());\n-      final Collection<Unit> enemyUnitsNotSubs =\n-          CollectionUtils.getMatches(attackingUnits, Matches.unitCanNotBeTargetedByAll().negate());\n-      if (enemyUnitsNotSubs.isEmpty()) {\n-        return;\n-      }\n-      final List<Unit> allEnemyUnitsAliveOrWaitingToDie = new ArrayList<>(attackingUnits);\n-      allEnemyUnitsAliveOrWaitingToDie.addAll(attackingWaitingToDie);\n+  private void findTargetGroupsAndFire(\n+      final ReturnFire returnFire,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948bbce0dc7233ca147927e39b0072699ba7fac8"}, "originalPosition": 602}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDg4MjAyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjozNDo1OVrOFjgn_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNjowMToyMVrOFkci_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3OTAwNQ==", "bodyText": "nit, not sure a casual reader will understand the comment to 'support isSuicide \"shortcut\"', they may wonder how it is a shortcut, and what 'isSuicide' is necessarily even referring to.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372779005", "createdAt": "2020-01-30T06:34:59Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -689,10 +690,18 @@ private void setCanNotTarget(final Set<UnitType> value) {\n \n   public Set<UnitType> getCanNotTarget() {\n     if (canNotTarget == null) {\n-      canNotTarget =\n-          new HashSet<>(\n-              CollectionUtils.getMatches(\n-                  getData().getUnitTypeList().getAllUnitTypes(), Matches.unitTypeIsAir()));\n+      if (isSuicideOnAttack && isFirstStrike) { // Support isSuicide shortcut", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ee6bc5eb27f7a2185ff13329d4df99f4059be5d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc4MjU2Nw==", "bodyText": "Ok. Do you have an alternative suggestion?", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372782567", "createdAt": "2020-01-30T06:49:52Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -689,10 +690,18 @@ private void setCanNotTarget(final Set<UnitType> value) {\n \n   public Set<UnitType> getCanNotTarget() {\n     if (canNotTarget == null) {\n-      canNotTarget =\n-          new HashSet<>(\n-              CollectionUtils.getMatches(\n-                  getData().getUnitTypeList().getAllUnitTypes(), Matches.unitTypeIsAir()));\n+      if (isSuicideOnAttack && isFirstStrike) { // Support isSuicide shortcut", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3OTAwNQ=="}, "originalCommit": {"oid": "0ee6bc5eb27f7a2185ff13329d4df99f4059be5d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MDc2Mg==", "bodyText": "Some options:\n\nremove the comment\nexpound on the comment and provide links/references for context\nbake the 'isSuicide' into matches.\nMake 'CanTarget' a property of \"UnitType\", add explanations there\n\nThe last is probably my preferred approach followed by adding a specific matcher. I like the last approach as it has the best encapsulation and is the most easily tested (this section of code would be great to have tests for, it would make review easier and would lend more confidence this is working as intended).\nIs there a legit timeline of when we can retrofit all maps to not have 'isSuicide'? IMHO the bulk map update experiences we have had caused far more pain than they are worth, and we do not even have ownership of all maps, and there was a lot of pain there. Removing map features I don't think is feasible and is part of why I think it's important we add versioning to map syntax/formats. Regardless of your viewpoint there, having a 'Matches.isSuicide' is independent of it is an actual unit property and the matches is, like here, a composite property.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373740762", "createdAt": "2020-02-01T00:35:01Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -689,10 +690,18 @@ private void setCanNotTarget(final Set<UnitType> value) {\n \n   public Set<UnitType> getCanNotTarget() {\n     if (canNotTarget == null) {\n-      canNotTarget =\n-          new HashSet<>(\n-              CollectionUtils.getMatches(\n-                  getData().getUnitTypeList().getAllUnitTypes(), Matches.unitTypeIsAir()));\n+      if (isSuicideOnAttack && isFirstStrike) { // Support isSuicide shortcut", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3OTAwNQ=="}, "originalCommit": {"oid": "0ee6bc5eb27f7a2185ff13329d4df99f4059be5d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2MDQ4Ng==", "bodyText": "So the issue with that direction is that we really want to isolate and reduce where isSuicide is used as otherwise its confusing as whether the property is still being used throughout the delegates (which it isn't as its now just setting other properties). If I saw a matches isSuicide then I'm going to think its reading that property unless I go and specifically read that method. The idea here is to keep all the isSuicide functionality in the unit attachment so that it isn't leaked to the other classes.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373760486", "createdAt": "2020-02-01T05:53:11Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -689,10 +690,18 @@ private void setCanNotTarget(final Set<UnitType> value) {\n \n   public Set<UnitType> getCanNotTarget() {\n     if (canNotTarget == null) {\n-      canNotTarget =\n-          new HashSet<>(\n-              CollectionUtils.getMatches(\n-                  getData().getUnitTypeList().getAllUnitTypes(), Matches.unitTypeIsAir()));\n+      if (isSuicideOnAttack && isFirstStrike) { // Support isSuicide shortcut", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3OTAwNQ=="}, "originalCommit": {"oid": "0ee6bc5eb27f7a2185ff13329d4df99f4059be5d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2MDc2Ng==", "bodyText": "Updated to remove comment.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373760766", "createdAt": "2020-02-01T06:01:21Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -689,10 +690,18 @@ private void setCanNotTarget(final Set<UnitType> value) {\n \n   public Set<UnitType> getCanNotTarget() {\n     if (canNotTarget == null) {\n-      canNotTarget =\n-          new HashSet<>(\n-              CollectionUtils.getMatches(\n-                  getData().getUnitTypeList().getAllUnitTypes(), Matches.unitTypeIsAir()));\n+      if (isSuicideOnAttack && isFirstStrike) { // Support isSuicide shortcut", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3OTAwNQ=="}, "originalCommit": {"oid": "0ee6bc5eb27f7a2185ff13329d4df99f4059be5d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDg4NTc5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjozNzoyN1rOFjgqQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNjowMTowN1rOFkci9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3OTU4Ng==", "bodyText": "nit, it's just the matches type that varies depending on the if condition, seems though the if/else could be simplified.\nBeyond the code low-level cleanup, why is the 'isSub' and 'isSuicide' properties opposites of one another? IE: why is if 'isSuicide' is false, then 'isSub' is true?", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372779586", "createdAt": "2020-01-30T06:37:27Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -689,10 +690,18 @@ private void setCanNotTarget(final Set<UnitType> value) {\n \n   public Set<UnitType> getCanNotTarget() {\n     if (canNotTarget == null) {\n-      canNotTarget =\n-          new HashSet<>(\n-              CollectionUtils.getMatches(\n-                  getData().getUnitTypeList().getAllUnitTypes(), Matches.unitTypeIsAir()));\n+      if (isSuicideOnAttack && isFirstStrike) { // Support isSuicide shortcut\n+        canNotTarget =\n+            new HashSet<>(\n+                CollectionUtils.getMatches(\n+                    getData().getUnitTypeList().getAllUnitTypes(),\n+                    Matches.unitTypeIsSuicideOnAttack().or(Matches.unitTypeIsSuicideOnDefense())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ee6bc5eb27f7a2185ff13329d4df99f4059be5d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc4MzQwOA==", "bodyText": "Possibly though I was concerned with it being harder to read if too much of it was inlined.\nThey aren't true opposites but because this is for supporting the deprecated properties, current maps never have isSub and isSuicide on the same unit as they didn't work together and isSuicide would override isSub as it would fire before.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r372783408", "createdAt": "2020-01-30T06:53:30Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -689,10 +690,18 @@ private void setCanNotTarget(final Set<UnitType> value) {\n \n   public Set<UnitType> getCanNotTarget() {\n     if (canNotTarget == null) {\n-      canNotTarget =\n-          new HashSet<>(\n-              CollectionUtils.getMatches(\n-                  getData().getUnitTypeList().getAllUnitTypes(), Matches.unitTypeIsAir()));\n+      if (isSuicideOnAttack && isFirstStrike) { // Support isSuicide shortcut\n+        canNotTarget =\n+            new HashSet<>(\n+                CollectionUtils.getMatches(\n+                    getData().getUnitTypeList().getAllUnitTypes(),\n+                    Matches.unitTypeIsSuicideOnAttack().or(Matches.unitTypeIsSuicideOnDefense())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3OTU4Ng=="}, "originalCommit": {"oid": "0ee6bc5eb27f7a2185ff13329d4df99f4059be5d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MDE5NQ==", "bodyText": "I don't think that would qualify as too much inlining, it helps a lot as it makes clear what is different between the two cases. You can assign to an intermediary variable if the inline syntax feels awkward.\n\nThey aren't true opposites...\n\nPoint taken, a casual reader would be very confused why we can assume with one condition being false that we fall into this other (seemingly very unrelated) case.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373740195", "createdAt": "2020-02-01T00:30:48Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -689,10 +690,18 @@ private void setCanNotTarget(final Set<UnitType> value) {\n \n   public Set<UnitType> getCanNotTarget() {\n     if (canNotTarget == null) {\n-      canNotTarget =\n-          new HashSet<>(\n-              CollectionUtils.getMatches(\n-                  getData().getUnitTypeList().getAllUnitTypes(), Matches.unitTypeIsAir()));\n+      if (isSuicideOnAttack && isFirstStrike) { // Support isSuicide shortcut\n+        canNotTarget =\n+            new HashSet<>(\n+                CollectionUtils.getMatches(\n+                    getData().getUnitTypeList().getAllUnitTypes(),\n+                    Matches.unitTypeIsSuicideOnAttack().or(Matches.unitTypeIsSuicideOnDefense())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3OTU4Ng=="}, "originalCommit": {"oid": "0ee6bc5eb27f7a2185ff13329d4df99f4059be5d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2MDc1OA==", "bodyText": "Updated.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373760758", "createdAt": "2020-02-01T06:01:07Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -689,10 +690,18 @@ private void setCanNotTarget(final Set<UnitType> value) {\n \n   public Set<UnitType> getCanNotTarget() {\n     if (canNotTarget == null) {\n-      canNotTarget =\n-          new HashSet<>(\n-              CollectionUtils.getMatches(\n-                  getData().getUnitTypeList().getAllUnitTypes(), Matches.unitTypeIsAir()));\n+      if (isSuicideOnAttack && isFirstStrike) { // Support isSuicide shortcut\n+        canNotTarget =\n+            new HashSet<>(\n+                CollectionUtils.getMatches(\n+                    getData().getUnitTypeList().getAllUnitTypes(),\n+                    Matches.unitTypeIsSuicideOnAttack().or(Matches.unitTypeIsSuicideOnDefense())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3OTU4Ng=="}, "originalCommit": {"oid": "0ee6bc5eb27f7a2185ff13329d4df99f4059be5d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDk3OTMwOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDo0NDozNFrOFkbZzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNjowMzo0MFrOFkcjdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MjAzMA==", "bodyText": "It does not look like this setter is used. Can it be removed? Is this class actually immutable? If not, it looks like it would not take too much to make it so, is that feasible? Is there a reason for mutability?", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373742030", "createdAt": "2020-02-01T00:44:34Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+@Setter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618906a97c18387623f1050f6c7d7cccaf0409a2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2MDg4NA==", "bodyText": "Ah yes. Good catch. Originally I was using the setters but had reworked to avoid that.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373760884", "createdAt": "2020-02-01T06:03:40Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+@Setter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MjAzMA=="}, "originalCommit": {"oid": "618906a97c18387623f1050f6c7d7cccaf0409a2"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDk4MjgxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDo0ODoyN1rOFkbbyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQyMTowNzo0MFrOFkfF2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MjUzOA==", "bodyText": "It looks like the getter here is used only internally. Unless I missed a usage, do you have any thoughts on removing the getter or restricting the visibility of the get method?\nLooking at the class, and the class properties, it raises a code smell if we return the internal data, it makes it seem as if the class were incompletely providing operations on the data members. IE: if this class provides operations on two internal sets, then what's the point to return the internal data unless this class is incomplete in doing so.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373742538", "createdAt": "2020-02-01T00:48:27Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618906a97c18387623f1050f6c7d7cccaf0409a2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2MDkyNg==", "bodyText": "The getters are used in MustFightBattle to pull the information out.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373760926", "createdAt": "2020-02-01T06:04:50Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MjUzOA=="}, "originalCommit": {"oid": "618906a97c18387623f1050f6c7d7cccaf0409a2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2Mzc3OQ==", "bodyText": "I see that getFiringUnits and getTargetUnits are used in MustFightBattle, though the only usages of the generated getters are in TargetGroup. Can you point me to where they are in MustFightBattle, am I looking at the wrong diff or something?", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373763779", "createdAt": "2020-02-01T07:16:10Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MjUzOA=="}, "originalCommit": {"oid": "618906a97c18387623f1050f6c7d7cccaf0409a2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5MTYyOA==", "bodyText": "Ah I see. Yeah, I reduced the visibility of the getters.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373791628", "createdAt": "2020-02-01T17:31:38Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MjUzOA=="}, "originalCommit": {"oid": "618906a97c18387623f1050f6c7d7cccaf0409a2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgwMjQ1Ng==", "bodyText": "Personally I would skip the generated getters altogether for more directness. It also makes it clear at the call site what we are doing and a reader would not have to verify where the getter is and if it could be overloaded.\nGood enough though marking the getter private to reduce its scope. \ud83d\udc4d", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373802456", "createdAt": "2020-02-01T21:07:40Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MjUzOA=="}, "originalCommit": {"oid": "618906a97c18387623f1050f6c7d7cccaf0409a2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDk4MzY3OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDo0OToyMFrOFkbcQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNjowNTozOVrOFkcjuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MjY1OA==", "bodyText": "It looks like this is always a singleton set, do I see that correctly? Why store this as a set if it always has size == 1?", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373742658", "createdAt": "2020-02-01T00:49:20Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+@Setter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618906a97c18387623f1050f6c7d7cccaf0409a2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2MDk1Mw==", "bodyText": "Nope. This holds all the unit types that have the same list of targets. They are added 1 by 1 as targets are checked.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373760953", "createdAt": "2020-02-01T06:05:39Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+@Setter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MjY1OA=="}, "originalCommit": {"oid": "618906a97c18387623f1050f6c7d7cccaf0409a2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDk4NDUxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDo1MDo0MlrOFkbc2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNzozMzo1M1rOFkecBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MjgwOQ==", "bodyText": "Nit, this method can be marked as static. It also seems to not really belong to this class as well (knowing it's static helps highlight that). Any thoughts to simply inline this to its single usage and avoid the indirection?", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373742809", "createdAt": "2020-02-01T00:50:42Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+@Setter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618906a97c18387623f1050f6c7d7cccaf0409a2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2MTAyNA==", "bodyText": "This is a bit of a forward looking method as the message ideally would be more detailed to include which unit types are firing or being targeted which that information lives in this class. For now it just says which player but you can imagine if you have different groups of targets so multiple TargetGroups that having more info on which of the units are firing or being targeted would be helpful.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373761024", "createdAt": "2020-02-01T06:07:09Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+@Setter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MjgwOQ=="}, "originalCommit": {"oid": "618906a97c18387623f1050f6c7d7cccaf0409a2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2MzY2OA==", "bodyText": "A TODO tagged with the forum discussion would have been ideal to have communicated that. Do you have an expectation when that would land (near-future, far-future?)", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373763668", "createdAt": "2020-02-01T07:13:03Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+@Setter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MjgwOQ=="}, "originalCommit": {"oid": "618906a97c18387623f1050f6c7d7cccaf0409a2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5MTc0OQ==", "bodyText": "Pushed it in line out of this class for now.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373791749", "createdAt": "2020-02-01T17:33:53Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+@Setter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MjgwOQ=="}, "originalCommit": {"oid": "618906a97c18387623f1050f6c7d7cccaf0409a2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDk4NjU1OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/DiceRollTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDo1MzoyMVrOFkbd_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDo1MzoyMVrOFkbd_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MzEwMg==", "bodyText": "\ud83d\udc4d   Good to see unused/placeholder args falling away.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373743102", "createdAt": "2020-02-01T00:53:21Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/DiceRollTest.java", "diffHunk": "@@ -63,19 +63,19 @@ void testSimple() {\n         .thenAnswer(withValues(1)); // infantry attack does not hit at 1 (0 based)\n     // infantry defends\n     final DiceRoll roll =\n-        DiceRoll.rollDice(infantry, true, russians, bridge, battle, \"\", territoryEffects, null);\n+        DiceRoll.rollDice(infantry, true, russians, bridge, battle, territoryEffects);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618906a97c18387623f1050f6c7d7cccaf0409a2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDk4NzU1OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/WW2V3Year41Test.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDo1NDozMlrOFkbekg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDo1NDozMlrOFkbekg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MzI1MA==", "bodyText": "\ud83d\udc4d   I like quite a bit we are making the ordering more generic and list 'first strike units' rather than assuming any/all first strike units are subs.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373743250", "createdAt": "2020-02-01T00:54:32Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/WW2V3Year41Test.java", "diffHunk": "@@ -1143,12 +1129,12 @@ void testAttackDestroyerAndSubsAgainstSubAndDestroyer() {\n     final List<String> steps = battle.determineStepStrings(true);\n     assertEquals(\n         List.of(\n-                attacker + SUBS_FIRE,\n-                defender + SELECT_SUB_CASUALTIES,\n+                attacker + FIRST_STRIKE_UNITS_FIRE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618906a97c18387623f1050f6c7d7cccaf0409a2"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDk5MzIxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMTowMTowMlrOFkbh3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNjowODoxNFrOFkckKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0NDA5Mw==", "bodyText": "This deadUnit notification only appears in one branch of the unmodified code, for a case of isDefendingSuicideAndMunitionUnitsDoNotFire, why should this be shown now for all cases? Is this a no-op perhaps, is there something subtle that is not obvious?", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373744093", "createdAt": "2020-02-01T01:01:02Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1805,25 +1805,16 @@ private void defenderRetreatSubs(final IDelegateBridge bridge) {\n    * Check for suicide units and kill them immediately (they get to shoot back, which is the point).\n    */\n   private void checkSuicideUnits(final IDelegateBridge bridge) {\n-    if (isDefendingSuicideAndMunitionUnitsDoNotFire()) {\n-      final List<Unit> deadUnits =\n-          CollectionUtils.getMatches(attackingUnits, Matches.unitIsSuicide());\n-      bridge\n-          .getDisplayChannelBroadcaster()\n-          .deadUnitNotification(battleId, attacker, deadUnits, dependentUnits);\n-      remove(deadUnits, bridge, battleSite, false);\n-    } else {\n-      final List<Unit> deadUnits = new ArrayList<>();\n-      deadUnits.addAll(CollectionUtils.getMatches(defendingUnits, Matches.unitIsSuicide()));\n-      deadUnits.addAll(CollectionUtils.getMatches(attackingUnits, Matches.unitIsSuicide()));\n-      bridge\n-          .getDisplayChannelBroadcaster()\n-          .deadUnitNotification(battleId, attacker, deadUnits, dependentUnits);\n-      bridge\n-          .getDisplayChannelBroadcaster()\n-          .deadUnitNotification(battleId, defender, deadUnits, dependentUnits);\n-      remove(deadUnits, bridge, battleSite, null);\n-    }\n+    final List<Unit> deadUnits = new ArrayList<>();\n+    deadUnits.addAll(CollectionUtils.getMatches(attackingUnits, Matches.unitIsSuicideOnAttack()));\n+    deadUnits.addAll(CollectionUtils.getMatches(defendingUnits, Matches.unitIsSuicideOnDefense()));\n+    bridge", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2MTA2Nw==", "bodyText": "I think you are looking at outdated code here.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373761067", "createdAt": "2020-02-01T06:08:14Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1805,25 +1805,16 @@ private void defenderRetreatSubs(final IDelegateBridge bridge) {\n    * Check for suicide units and kill them immediately (they get to shoot back, which is the point).\n    */\n   private void checkSuicideUnits(final IDelegateBridge bridge) {\n-    if (isDefendingSuicideAndMunitionUnitsDoNotFire()) {\n-      final List<Unit> deadUnits =\n-          CollectionUtils.getMatches(attackingUnits, Matches.unitIsSuicide());\n-      bridge\n-          .getDisplayChannelBroadcaster()\n-          .deadUnitNotification(battleId, attacker, deadUnits, dependentUnits);\n-      remove(deadUnits, bridge, battleSite, false);\n-    } else {\n-      final List<Unit> deadUnits = new ArrayList<>();\n-      deadUnits.addAll(CollectionUtils.getMatches(defendingUnits, Matches.unitIsSuicide()));\n-      deadUnits.addAll(CollectionUtils.getMatches(attackingUnits, Matches.unitIsSuicide()));\n-      bridge\n-          .getDisplayChannelBroadcaster()\n-          .deadUnitNotification(battleId, attacker, deadUnits, dependentUnits);\n-      bridge\n-          .getDisplayChannelBroadcaster()\n-          .deadUnitNotification(battleId, defender, deadUnits, dependentUnits);\n-      remove(deadUnits, bridge, battleSite, null);\n-    }\n+    final List<Unit> deadUnits = new ArrayList<>();\n+    deadUnits.addAll(CollectionUtils.getMatches(attackingUnits, Matches.unitIsSuicideOnAttack()));\n+    deadUnits.addAll(CollectionUtils.getMatches(defendingUnits, Matches.unitIsSuicideOnDefense()));\n+    bridge", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0NDA5Mw=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDk5Njc1OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/PacificTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMTowNToxMlrOFkbj1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNjowODozMFrOFkckOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0NDU5OQ==", "bodyText": "It's striking we have the same parameter passed in twice to a method. IMHO it is a pretty significant API code smell. Perhaps an extract parameter object refactor would fix that?\nIMO the existing API already has significant technical debt, I don't think that is fair reason to add more potential debt for someone else to attempt to fix. It's also very notable that a number of other parameters are already useless, seems like this API is already stretched.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373744599", "createdAt": "2020-02-01T01:05:12Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/PacificTest.java", "diffHunk": "@@ -108,20 +108,44 @@ void testNonJapanAttack() {\n     // Defending US infantry\n     DiceRoll roll =\n         DiceRoll.rollDice(\n-            infantryUs, true, americans, bridge, mock(IBattle.class), \"\", territoryEffects, null);\n+            infantryUs,\n+            true,\n+            americans,\n+            bridge,\n+            mock(IBattle.class),\n+            \"\",\n+            territoryEffects,\n+            null,\n+            infantryUs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2MTA4Mg==", "bodyText": "I think you are looking at outdated code here as well.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373761082", "createdAt": "2020-02-01T06:08:30Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/PacificTest.java", "diffHunk": "@@ -108,20 +108,44 @@ void testNonJapanAttack() {\n     // Defending US infantry\n     DiceRoll roll =\n         DiceRoll.rollDice(\n-            infantryUs, true, americans, bridge, mock(IBattle.class), \"\", territoryEffects, null);\n+            infantryUs,\n+            true,\n+            americans,\n+            bridge,\n+            mock(IBattle.class),\n+            \"\",\n+            territoryEffects,\n+            null,\n+            infantryUs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0NDU5OQ=="}, "originalCommit": {"oid": "7e244f4d9c1c60f021bacdaf21c2606c914d4dbd"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTEzOTUxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNzoyMDowN1rOFkcvKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNzozNDo1MFrOFkecJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2Mzg4MA==", "bodyText": "Could you clarify or define 'restrictive' in this context? It's not clear to me from this context what that would exactly mean.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373763880", "createdAt": "2020-02-01T07:20:07Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {\n+    return player.getName() + \" fire, \";\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so most restrictive appear first.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2bf05f3dee478ba4c4a2cb6c375d384ccafae74"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5MTc4MA==", "bodyText": "Updated.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373791780", "createdAt": "2020-02-01T17:34:50Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {\n+    return player.getName() + \" fire, \";\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so most restrictive appear first.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2Mzg4MA=="}, "originalCommit": {"oid": "a2bf05f3dee478ba4c4a2cb6c375d384ccafae74"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTE0MDE4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNzoyMjoxNlrOFkcveA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwMDozMjo0MVrOFkflQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2Mzk2MA==", "bodyText": "Have you considered re-writing this with a stream+map+collect to remove the intermediary variables and the 'added' local tracking variable? Any thoughts to adding an explanatory comment to help indicate what operation we are doing here?", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373763960", "createdAt": "2020-02-01T07:22:16Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {\n+    return player.getName() + \" fire, \";\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so most restrictive appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {\n+\n+    final Set<UnitType> unitTypes =\n+        units.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final Set<UnitType> enemyUnitTypes =\n+        enemyUnits.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final List<TargetGroup> firingGroups = new ArrayList<TargetGroup>();\n+    for (final UnitType unitType : unitTypes) {\n+      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n+      boolean isAdded = false;\n+      for (final TargetGroup firingGroup : firingGroups) {\n+        if (firingGroup.getTargetUnitTypes().equals(targets)) {\n+          firingGroup.getFiringUnitTypes().add(unitType);\n+          isAdded = true;\n+          break;\n+        }\n+      }\n+      if (!isAdded) {\n+        firingGroups.add(new TargetGroup(unitType, targets));\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2bf05f3dee478ba4c4a2cb6c375d384ccafae74"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5MTg5NA==", "bodyText": "Open to it. If you want to suggest how you'd do it with streams then I'm glad to take a look. I didn't see an easy way to do it that was easy to understand.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373791894", "createdAt": "2020-02-01T17:37:18Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {\n+    return player.getName() + \" fire, \";\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so most restrictive appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {\n+\n+    final Set<UnitType> unitTypes =\n+        units.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final Set<UnitType> enemyUnitTypes =\n+        enemyUnits.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final List<TargetGroup> firingGroups = new ArrayList<TargetGroup>();\n+    for (final UnitType unitType : unitTypes) {\n+      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n+      boolean isAdded = false;\n+      for (final TargetGroup firingGroup : firingGroups) {\n+        if (firingGroup.getTargetUnitTypes().equals(targets)) {\n+          firingGroup.getFiringUnitTypes().add(unitType);\n+          isAdded = true;\n+          break;\n+        }\n+      }\n+      if (!isAdded) {\n+        firingGroups.add(new TargetGroup(unitType, targets));\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2Mzk2MA=="}, "originalCommit": {"oid": "a2bf05f3dee478ba4c4a2cb6c375d384ccafae74"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgwMjM0Nw==", "bodyText": "This should be equivalent:\n  private static void addToTargetGroups(\n      final UnitType unitType, final Set<UnitType> targets, final List<TargetGroup> targetGroups) {\n    targetGroups.stream()\n        .filter(targetGroup -> targetGroup.getTargetUnitTypes().equals(targets))\n        .findAny()\n        .ifPresentOrElse(\n            targetGroup -> targetGroup.getFiringUnitTypes().add(unitType),\n            () -> targetGroups.add(new TargetGroup(unitType, targets)));\n  }", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373802347", "createdAt": "2020-02-01T21:05:45Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {\n+    return player.getName() + \" fire, \";\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so most restrictive appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {\n+\n+    final Set<UnitType> unitTypes =\n+        units.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final Set<UnitType> enemyUnitTypes =\n+        enemyUnits.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final List<TargetGroup> firingGroups = new ArrayList<TargetGroup>();\n+    for (final UnitType unitType : unitTypes) {\n+      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n+      boolean isAdded = false;\n+      for (final TargetGroup firingGroup : firingGroups) {\n+        if (firingGroup.getTargetUnitTypes().equals(targets)) {\n+          firingGroup.getFiringUnitTypes().add(unitType);\n+          isAdded = true;\n+          break;\n+        }\n+      }\n+      if (!isAdded) {\n+        firingGroups.add(new TargetGroup(unitType, targets));\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2Mzk2MA=="}, "originalCommit": {"oid": "a2bf05f3dee478ba4c4a2cb6c375d384ccafae74"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgwMjQ5OQ==", "bodyText": "Actually.. maybe not, taking another look..", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373802499", "createdAt": "2020-02-01T21:08:44Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {\n+    return player.getName() + \" fire, \";\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so most restrictive appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {\n+\n+    final Set<UnitType> unitTypes =\n+        units.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final Set<UnitType> enemyUnitTypes =\n+        enemyUnits.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final List<TargetGroup> firingGroups = new ArrayList<TargetGroup>();\n+    for (final UnitType unitType : unitTypes) {\n+      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n+      boolean isAdded = false;\n+      for (final TargetGroup firingGroup : firingGroups) {\n+        if (firingGroup.getTargetUnitTypes().equals(targets)) {\n+          firingGroup.getFiringUnitTypes().add(unitType);\n+          isAdded = true;\n+          break;\n+        }\n+      }\n+      if (!isAdded) {\n+        firingGroups.add(new TargetGroup(unitType, targets));\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2Mzk2MA=="}, "originalCommit": {"oid": "a2bf05f3dee478ba4c4a2cb6c375d384ccafae74"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgwMjUxNg==", "bodyText": "Okay, didn't take long, yeah, I think the above should be equivalent.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373802516", "createdAt": "2020-02-01T21:09:22Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {\n+    return player.getName() + \" fire, \";\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so most restrictive appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {\n+\n+    final Set<UnitType> unitTypes =\n+        units.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final Set<UnitType> enemyUnitTypes =\n+        enemyUnits.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final List<TargetGroup> firingGroups = new ArrayList<TargetGroup>();\n+    for (final UnitType unitType : unitTypes) {\n+      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n+      boolean isAdded = false;\n+      for (final TargetGroup firingGroup : firingGroups) {\n+        if (firingGroup.getTargetUnitTypes().equals(targets)) {\n+          firingGroup.getFiringUnitTypes().add(unitType);\n+          isAdded = true;\n+          break;\n+        }\n+      }\n+      if (!isAdded) {\n+        firingGroups.add(new TargetGroup(unitType, targets));\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2Mzk2MA=="}, "originalCommit": {"oid": "a2bf05f3dee478ba4c4a2cb6c375d384ccafae74"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMDQ5OQ==", "bodyText": "Yep that works. Updated.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373810499", "createdAt": "2020-02-02T00:32:41Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {\n+    return player.getName() + \" fire, \";\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so most restrictive appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {\n+\n+    final Set<UnitType> unitTypes =\n+        units.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final Set<UnitType> enemyUnitTypes =\n+        enemyUnits.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final List<TargetGroup> firingGroups = new ArrayList<TargetGroup>();\n+    for (final UnitType unitType : unitTypes) {\n+      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n+      boolean isAdded = false;\n+      for (final TargetGroup firingGroup : firingGroups) {\n+        if (firingGroup.getTargetUnitTypes().equals(targets)) {\n+          firingGroup.getFiringUnitTypes().add(unitType);\n+          isAdded = true;\n+          break;\n+        }\n+      }\n+      if (!isAdded) {\n+        firingGroups.add(new TargetGroup(unitType, targets));\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2Mzk2MA=="}, "originalCommit": {"oid": "a2bf05f3dee478ba4c4a2cb6c375d384ccafae74"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTE0MDkxOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNzoyNDowNFrOFkcvzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNzozOTowNlrOFkedAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2NDA0NA==", "bodyText": "nit, noneMatch should be able to replace the !...anyMatch() and help avoid the negation", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373764044", "createdAt": "2020-02-01T07:24:04Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {\n+    return player.getName() + \" fire, \";\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so most restrictive appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {\n+\n+    final Set<UnitType> unitTypes =\n+        units.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final Set<UnitType> enemyUnitTypes =\n+        enemyUnits.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final List<TargetGroup> firingGroups = new ArrayList<TargetGroup>();\n+    for (final UnitType unitType : unitTypes) {\n+      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n+      boolean isAdded = false;\n+      for (final TargetGroup firingGroup : firingGroups) {\n+        if (firingGroup.getTargetUnitTypes().equals(targets)) {\n+          firingGroup.getFiringUnitTypes().add(unitType);\n+          isAdded = true;\n+          break;\n+        }\n+      }\n+      if (!isAdded) {\n+        firingGroups.add(new TargetGroup(unitType, targets));\n+      }\n+    }\n+    return sortFiringGroups(firingGroups);\n+  }\n+\n+  private static Set<UnitType> findTargets(\n+      final UnitType unitType, final Set<UnitType> unitTypes, final Set<UnitType> enemyUnitTypes) {\n+    final Set<UnitType> targets = new HashSet<>(enemyUnitTypes);\n+    targets.removeAll(UnitAttachment.get(unitType).getCanNotTarget());\n+    if (!unitTypes.stream().anyMatch(Matches.unitTypeIsDestroyer())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2bf05f3dee478ba4c4a2cb6c375d384ccafae74"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5MjAwMg==", "bodyText": "Good catch. Updated.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373792002", "createdAt": "2020-02-01T17:39:06Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  public String getMessage(final GamePlayer player) {\n+    return player.getName() + \" fire, \";\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so most restrictive appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {\n+\n+    final Set<UnitType> unitTypes =\n+        units.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final Set<UnitType> enemyUnitTypes =\n+        enemyUnits.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final List<TargetGroup> firingGroups = new ArrayList<TargetGroup>();\n+    for (final UnitType unitType : unitTypes) {\n+      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n+      boolean isAdded = false;\n+      for (final TargetGroup firingGroup : firingGroups) {\n+        if (firingGroup.getTargetUnitTypes().equals(targets)) {\n+          firingGroup.getFiringUnitTypes().add(unitType);\n+          isAdded = true;\n+          break;\n+        }\n+      }\n+      if (!isAdded) {\n+        firingGroups.add(new TargetGroup(unitType, targets));\n+      }\n+    }\n+    return sortFiringGroups(firingGroups);\n+  }\n+\n+  private static Set<UnitType> findTargets(\n+      final UnitType unitType, final Set<UnitType> unitTypes, final Set<UnitType> enemyUnitTypes) {\n+    final Set<UnitType> targets = new HashSet<>(enemyUnitTypes);\n+    targets.removeAll(UnitAttachment.get(unitType).getCanNotTarget());\n+    if (!unitTypes.stream().anyMatch(Matches.unitTypeIsDestroyer())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2NDA0NA=="}, "originalCommit": {"oid": "a2bf05f3dee478ba4c4a2cb6c375d384ccafae74"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTE3MDk4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwOTowMzoxOFrOFkc_Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwMDo0MDoyMVrOFkfmdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2Nzk1OQ==", "bodyText": "The set to null might be potentially dangerous / NPE if setCanNotTarget is invoked after setIsSuicide, noting on line 683:\n  private void setCanNotTarget(final String value) throws GameParseException {\n    final String[] s = splitOnColon(value);\n    for (final String u : s) {\n      final UnitType ut = getData().getUnitTypeList().getUnitType(u);\n      if (ut == null) {\n        throw new GameParseException(\"canNotTarget: no such unit type: \" + u + thisErrorMsg());\n      }\n683:      canNotTarget.add(ut);\n    }\n  }\n\nWould that be a potential problem?", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373767959", "createdAt": "2020-02-01T09:03:18Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1751,20 +1756,54 @@ private void resetCanDieFromReachingMaxDamage() {\n     canDieFromReachingMaxDamage = false;\n   }\n \n+  @Deprecated\n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n+  @Deprecated\n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    // Global property controlled whether isSuicide units would suicide on defense\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);\n+    if (s) {\n+      canNotTarget = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2bf05f3dee478ba4c4a2cb6c375d384ccafae74"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2ODAxMg==", "bodyText": "Second, the set to null seems to rely that any access to canNotTarget will go through a get method which has the side effect of also setting canNotTarget if null. Could this be fixed and/or be made more explicit by doing an assignment here of that value? (this seems kinda hacky, but it perhaps it makes things explicit at least):\nif(s) {\n  canNotTarget = getCanNotTarget();\n}", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373768012", "createdAt": "2020-02-01T09:05:03Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1751,20 +1756,54 @@ private void resetCanDieFromReachingMaxDamage() {\n     canDieFromReachingMaxDamage = false;\n   }\n \n+  @Deprecated\n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n+  @Deprecated\n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    // Global property controlled whether isSuicide units would suicide on defense\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);\n+    if (s) {\n+      canNotTarget = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2Nzk1OQ=="}, "originalCommit": {"oid": "a2bf05f3dee478ba4c4a2cb6c375d384ccafae74"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5MjUxMA==", "bodyText": "setCanNotTarget and setIsSuicide should never be used in the same map and definitely not on the same unit. setIsSuicide is just for existing map compatibility.\nThat's correct. The reason for this is you can't set the canNotTarget until all the XML unit attachments are parsed (as you need to read some of the unit properties) so has to happen essentially after all unit parsing is done. This was the easiest way I could think to do it and the only way to access it is through the getter (null is essentially being used as a place holder to flag that canNotTarget needs to still be calculated). This is a bit hacky but without adding some sort of placeholder state or extra parsing steps, I couldn't think of a better way to do it.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373792510", "createdAt": "2020-02-01T17:49:30Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1751,20 +1756,54 @@ private void resetCanDieFromReachingMaxDamage() {\n     canDieFromReachingMaxDamage = false;\n   }\n \n+  @Deprecated\n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n+  @Deprecated\n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    // Global property controlled whether isSuicide units would suicide on defense\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);\n+    if (s) {\n+      canNotTarget = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2Nzk1OQ=="}, "originalCommit": {"oid": "a2bf05f3dee478ba4c4a2cb6c375d384ccafae74"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgwMTgxNw==", "bodyText": "I understand that setCanNotTarget and setIsSuicide are now being considered incompatible settings. Will the failure mode when that is done be a NPE? I suspect eventually, on some map, we'll see the two settings be combined and the NPE would be an unhelpful error message.\nIf we could get it so that the system fails with an exact error message (EG: unsupported option combination) and tells the user what/where, that would be quite valuable and we would handling this situation well enough.\nCould we possibly achieve that by adding a null-guard in the 'setCanNotTarget' method and then adding a post-processing check if the two settings have been used together? Second question, do we really need to set canNotTarget to null? If we can avoid the null, then it may simplify the need for null-checks and perhaps we could have the two options exist with each other, but perhaps the behavior would be non-deterministic.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373801817", "createdAt": "2020-02-01T20:54:34Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1751,20 +1756,54 @@ private void resetCanDieFromReachingMaxDamage() {\n     canDieFromReachingMaxDamage = false;\n   }\n \n+  @Deprecated\n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n+  @Deprecated\n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    // Global property controlled whether isSuicide units would suicide on defense\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);\n+    if (s) {\n+      canNotTarget = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2Nzk1OQ=="}, "originalCommit": {"oid": "a2bf05f3dee478ba4c4a2cb6c375d384ccafae74"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgwMjI5OQ==", "bodyText": "Yeah, you'll get a NPE pointing to that method which will make it pretty obvious what the issue is. I don't expect it to ever happen and it would only be a map maker which would see it and probably just post on the forum. We can add checks to try to check for the null and return a better message just wondering if we are over engineering something that I don't think will ever happen.\nYou could avoid setting the null by setting some other say boolean field that then is checked instead of checking for the null in the getter though you are then adding additional temporary fields into a class that already has a lot of members variables. Not sure if that is really better or worse but was the other option I considered.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373802299", "createdAt": "2020-02-01T21:04:33Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1751,20 +1756,54 @@ private void resetCanDieFromReachingMaxDamage() {\n     canDieFromReachingMaxDamage = false;\n   }\n \n+  @Deprecated\n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n+  @Deprecated\n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    // Global property controlled whether isSuicide units would suicide on defense\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);\n+    if (s) {\n+      canNotTarget = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2Nzk1OQ=="}, "originalCommit": {"oid": "a2bf05f3dee478ba4c4a2cb6c375d384ccafae74"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgwMzMxMQ==", "bodyText": "It's always surprising the data combinations/states that eventually wind up happening. Realistically we could maybe see it if a map were being retrofitted, or an existing map copied and then updated to be something else and the map maker missed an occurrence of the extra option.\nHere's perhaps an idea:\n\ncheck for a null value of canNotTarget in the setter, rather than NPE, throw an illegal state at the beginning of the setter. That would provide a way to give a direct message to indicate that an incompatible setting option was used.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373803311", "createdAt": "2020-02-01T21:27:20Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1751,20 +1756,54 @@ private void resetCanDieFromReachingMaxDamage() {\n     canDieFromReachingMaxDamage = false;\n   }\n \n+  @Deprecated\n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n+  @Deprecated\n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    // Global property controlled whether isSuicide units would suicide on defense\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);\n+    if (s) {\n+      canNotTarget = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2Nzk1OQ=="}, "originalCommit": {"oid": "a2bf05f3dee478ba4c4a2cb6c375d384ccafae74"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMDgwNw==", "bodyText": "Added null check and custom exception message.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373810807", "createdAt": "2020-02-02T00:40:21Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -1751,20 +1756,54 @@ private void resetCanDieFromReachingMaxDamage() {\n     canDieFromReachingMaxDamage = false;\n   }\n \n+  @Deprecated\n   private void setIsSuicide(final String s) {\n-    isSuicide = getBool(s);\n+    setIsSuicide(getBool(s));\n   }\n \n+  @Deprecated\n   private void setIsSuicide(final Boolean s) {\n-    isSuicide = s;\n+    setIsSuicideOnAttack(s);\n+    // Global property controlled whether isSuicide units would suicide on defense\n+    setIsSuicideOnDefense(s && !Properties.getDefendingSuicideAndMunitionUnitsDoNotFire(getData()));\n+    setIsFirstStrike(s);\n+    if (s) {\n+      canNotTarget = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2Nzk1OQ=="}, "originalCommit": {"oid": "a2bf05f3dee478ba4c4a2cb6c375d384ccafae74"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjEwMjg1OnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/TargetGroupTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMDo1MzoxMVrOFkkebw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMjo1MDoyMlrOFlGqMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5MDY3MQ==", "bodyText": "nit: https://github.com/triplea-game/triplea/wiki/Java-Test-Code-Conventions#favor-hamcrest-assertthat-for-new-tests--5526\nassertEquals(0, results.size()) -> assertThat(results, is(emptyCollection())", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373890671", "createdAt": "2020-02-03T00:53:11Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/TargetGroupTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.AbstractDelegateTestCase;\n+import games.strategy.triplea.delegate.GameDataTestUtil;\n+import games.strategy.triplea.xml.TestMapGameData;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+\n+class TargetGroupTest extends AbstractDelegateTestCase {\n+\n+  final GameData twwGameData = TestMapGameData.TWW.getGameData();\n+\n+  @Test\n+  void testNewTargetGroupsWithEmptyUnitsAndEnemyUnits() {\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(List.of(), List.of());\n+    assertEquals(0, result.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1MDczOQ==", "bodyText": "Done.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r374450739", "createdAt": "2020-02-04T02:50:22Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/TargetGroupTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.AbstractDelegateTestCase;\n+import games.strategy.triplea.delegate.GameDataTestUtil;\n+import games.strategy.triplea.xml.TestMapGameData;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+\n+class TargetGroupTest extends AbstractDelegateTestCase {\n+\n+  final GameData twwGameData = TestMapGameData.TWW.getGameData();\n+\n+  @Test\n+  void testNewTargetGroupsWithEmptyUnitsAndEnemyUnits() {\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(List.of(), List.of());\n+    assertEquals(0, result.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5MDY3MQ=="}, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjEwNDMwOnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/TargetGroupTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMDo1NjoxMlrOFkkfSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzoyNzo0NlrOFlKOrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5MDg4OQ==", "bodyText": "https://github.com/triplea-game/triplea/wiki/Java-Test-Code-Conventions#favor-adding-displayname-to-each-test-case-5525\nIt's not 100% clear why the result should be empty. A @DisplayName would help this potentially.\nIt looks like the empty result is because the first List.of() parameter is empty. A comment in the assertThat method can also be used to help clarify why we expect the test to be true. (a convention for this is nearly finalized: #5527)\nSide-note, it's a very important aspect of test maintainability that it's obvious why they should pass. The combination of @DisplayName and assertion comments is intended to make it obvious on each test case.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373890889", "createdAt": "2020-02-03T00:56:12Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/TargetGroupTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.AbstractDelegateTestCase;\n+import games.strategy.triplea.delegate.GameDataTestUtil;\n+import games.strategy.triplea.xml.TestMapGameData;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+\n+class TargetGroupTest extends AbstractDelegateTestCase {\n+\n+  final GameData twwGameData = TestMapGameData.TWW.getGameData();\n+\n+  @Test\n+  void testNewTargetGroupsWithEmptyUnitsAndEnemyUnits() {\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(List.of(), List.of());\n+    assertEquals(0, result.size());\n+  }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1MDcwNw==", "bodyText": "Done.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r374450707", "createdAt": "2020-02-04T02:50:16Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/TargetGroupTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.AbstractDelegateTestCase;\n+import games.strategy.triplea.delegate.GameDataTestUtil;\n+import games.strategy.triplea.xml.TestMapGameData;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+\n+class TargetGroupTest extends AbstractDelegateTestCase {\n+\n+  final GameData twwGameData = TestMapGameData.TWW.getGameData();\n+\n+  @Test\n+  void testNewTargetGroupsWithEmptyUnitsAndEnemyUnits() {\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(List.of(), List.of());\n+    assertEquals(0, result.size());\n+  }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5MDg4OQ=="}, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwOTIyOA==", "bodyText": "Cool, thanks, this comment:\n   \"Verify 2 target groups if sub and fighters attack sub and fighters as subs can only \"\n          + \"target subs\")\n\n\nwas actually really key to understanding the rest of them, IMHO it helped quite a bit.  \ud83d\udc4d", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r374509228", "createdAt": "2020-02-04T07:27:46Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/TargetGroupTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.AbstractDelegateTestCase;\n+import games.strategy.triplea.delegate.GameDataTestUtil;\n+import games.strategy.triplea.xml.TestMapGameData;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+\n+class TargetGroupTest extends AbstractDelegateTestCase {\n+\n+  final GameData twwGameData = TestMapGameData.TWW.getGameData();\n+\n+  @Test\n+  void testNewTargetGroupsWithEmptyUnitsAndEnemyUnits() {\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(List.of(), List.of());\n+    assertEquals(0, result.size());\n+  }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5MDg4OQ=="}, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjEwNDgxOnYy", "diffSide": "RIGHT", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/TargetGroupTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMDo1NzoxN1rOFkkfoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMjo1MDoxMFrOFlGqBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5MDk3Nw==", "bodyText": "nit: assertEquals(1, results.size()) -> assertThat(result, hasSize(1))", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373890977", "createdAt": "2020-02-03T00:57:17Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/TargetGroupTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.AbstractDelegateTestCase;\n+import games.strategy.triplea.delegate.GameDataTestUtil;\n+import games.strategy.triplea.xml.TestMapGameData;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+\n+class TargetGroupTest extends AbstractDelegateTestCase {\n+\n+  final GameData twwGameData = TestMapGameData.TWW.getGameData();\n+\n+  @Test\n+  void testNewTargetGroupsWithEmptyUnitsAndEnemyUnits() {\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(List.of(), List.of());\n+    assertEquals(0, result.size());\n+  }\n+\n+  @Test\n+  void testNewTargetGroupsWithEmptyUnits() {\n+    final GamePlayer germany = GameDataTestUtil.germany(twwGameData);\n+    final List<Unit> enemyUnits = GameDataTestUtil.germanInfantry(twwGameData).create(1, germany);\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(List.of(), enemyUnits);\n+    assertEquals(0, result.size());\n+  }\n+\n+  @Test\n+  void testNewTargetGroupsWithEmptyEnemyUnits() {\n+    final GamePlayer germany = GameDataTestUtil.germany(twwGameData);\n+    final List<Unit> units = GameDataTestUtil.germanInfantry(twwGameData).create(1, germany);\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(units, List.of());\n+    assertEquals(0, result.size());\n+  }\n+\n+  @Test\n+  void testNewTargetGroupsForOneUnitAndOneEnemyUnit() {\n+    final GamePlayer germany = GameDataTestUtil.germany(twwGameData);\n+    final List<Unit> units = GameDataTestUtil.germanInfantry(twwGameData).create(1, germany);\n+    final GamePlayer britain = GameDataTestUtil.britain(twwGameData);\n+    final List<Unit> enemyUnits = GameDataTestUtil.britishInfantry(twwGameData).create(1, britain);\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(units, enemyUnits);\n+    assertEquals(1, result.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5MTEzNA==", "bodyText": "As noted once, but ditto and for the rest of the tests, an assertion comment and/or displayname to explicitly state why we expect the various assertion conditions to be true would go a long way to making it trivial to understand these tests - in that case if any should break it would be much easier to fix them and skips the preliminary step of investigating why the test was correct to begin with.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373891134", "createdAt": "2020-02-03T00:59:09Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/TargetGroupTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.AbstractDelegateTestCase;\n+import games.strategy.triplea.delegate.GameDataTestUtil;\n+import games.strategy.triplea.xml.TestMapGameData;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+\n+class TargetGroupTest extends AbstractDelegateTestCase {\n+\n+  final GameData twwGameData = TestMapGameData.TWW.getGameData();\n+\n+  @Test\n+  void testNewTargetGroupsWithEmptyUnitsAndEnemyUnits() {\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(List.of(), List.of());\n+    assertEquals(0, result.size());\n+  }\n+\n+  @Test\n+  void testNewTargetGroupsWithEmptyUnits() {\n+    final GamePlayer germany = GameDataTestUtil.germany(twwGameData);\n+    final List<Unit> enemyUnits = GameDataTestUtil.germanInfantry(twwGameData).create(1, germany);\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(List.of(), enemyUnits);\n+    assertEquals(0, result.size());\n+  }\n+\n+  @Test\n+  void testNewTargetGroupsWithEmptyEnemyUnits() {\n+    final GamePlayer germany = GameDataTestUtil.germany(twwGameData);\n+    final List<Unit> units = GameDataTestUtil.germanInfantry(twwGameData).create(1, germany);\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(units, List.of());\n+    assertEquals(0, result.size());\n+  }\n+\n+  @Test\n+  void testNewTargetGroupsForOneUnitAndOneEnemyUnit() {\n+    final GamePlayer germany = GameDataTestUtil.germany(twwGameData);\n+    final List<Unit> units = GameDataTestUtil.germanInfantry(twwGameData).create(1, germany);\n+    final GamePlayer britain = GameDataTestUtil.britain(twwGameData);\n+    final List<Unit> enemyUnits = GameDataTestUtil.britishInfantry(twwGameData).create(1, britain);\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(units, enemyUnits);\n+    assertEquals(1, result.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5MDk3Nw=="}, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5MzMxMA==", "bodyText": "FWIW, if it makes the static imports any easier, I keep a file around with the imports below, then use clean-up imports to remove any that I do not use when done writing a test:\nimport static org.hamcrest.collection.IsCollectionWithSize.hasSize;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\nimport static com.github.npathai.hamcrestopt.OptionalMatchers.isEmpty;\nimport static com.github.npathai.hamcrestopt.OptionalMatchers.isPresent;\nimport static com.github.npathai.hamcrestopt.OptionalMatchers.isPresentAndIs;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.not;\nimport static org.hamcrest.Matchers.nullValue;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373893310", "createdAt": "2020-02-03T01:19:11Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/TargetGroupTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.AbstractDelegateTestCase;\n+import games.strategy.triplea.delegate.GameDataTestUtil;\n+import games.strategy.triplea.xml.TestMapGameData;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+\n+class TargetGroupTest extends AbstractDelegateTestCase {\n+\n+  final GameData twwGameData = TestMapGameData.TWW.getGameData();\n+\n+  @Test\n+  void testNewTargetGroupsWithEmptyUnitsAndEnemyUnits() {\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(List.of(), List.of());\n+    assertEquals(0, result.size());\n+  }\n+\n+  @Test\n+  void testNewTargetGroupsWithEmptyUnits() {\n+    final GamePlayer germany = GameDataTestUtil.germany(twwGameData);\n+    final List<Unit> enemyUnits = GameDataTestUtil.germanInfantry(twwGameData).create(1, germany);\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(List.of(), enemyUnits);\n+    assertEquals(0, result.size());\n+  }\n+\n+  @Test\n+  void testNewTargetGroupsWithEmptyEnemyUnits() {\n+    final GamePlayer germany = GameDataTestUtil.germany(twwGameData);\n+    final List<Unit> units = GameDataTestUtil.germanInfantry(twwGameData).create(1, germany);\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(units, List.of());\n+    assertEquals(0, result.size());\n+  }\n+\n+  @Test\n+  void testNewTargetGroupsForOneUnitAndOneEnemyUnit() {\n+    final GamePlayer germany = GameDataTestUtil.germany(twwGameData);\n+    final List<Unit> units = GameDataTestUtil.germanInfantry(twwGameData).create(1, germany);\n+    final GamePlayer britain = GameDataTestUtil.britain(twwGameData);\n+    final List<Unit> enemyUnits = GameDataTestUtil.britishInfantry(twwGameData).create(1, britain);\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(units, enemyUnits);\n+    assertEquals(1, result.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5MDk3Nw=="}, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1MDY5Mw==", "bodyText": "Done.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r374450693", "createdAt": "2020-02-04T02:50:10Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/TargetGroupTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.AbstractDelegateTestCase;\n+import games.strategy.triplea.delegate.GameDataTestUtil;\n+import games.strategy.triplea.xml.TestMapGameData;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+\n+class TargetGroupTest extends AbstractDelegateTestCase {\n+\n+  final GameData twwGameData = TestMapGameData.TWW.getGameData();\n+\n+  @Test\n+  void testNewTargetGroupsWithEmptyUnitsAndEnemyUnits() {\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(List.of(), List.of());\n+    assertEquals(0, result.size());\n+  }\n+\n+  @Test\n+  void testNewTargetGroupsWithEmptyUnits() {\n+    final GamePlayer germany = GameDataTestUtil.germany(twwGameData);\n+    final List<Unit> enemyUnits = GameDataTestUtil.germanInfantry(twwGameData).create(1, germany);\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(List.of(), enemyUnits);\n+    assertEquals(0, result.size());\n+  }\n+\n+  @Test\n+  void testNewTargetGroupsWithEmptyEnemyUnits() {\n+    final GamePlayer germany = GameDataTestUtil.germany(twwGameData);\n+    final List<Unit> units = GameDataTestUtil.germanInfantry(twwGameData).create(1, germany);\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(units, List.of());\n+    assertEquals(0, result.size());\n+  }\n+\n+  @Test\n+  void testNewTargetGroupsForOneUnitAndOneEnemyUnit() {\n+    final GamePlayer germany = GameDataTestUtil.germany(twwGameData);\n+    final List<Unit> units = GameDataTestUtil.germanInfantry(twwGameData).create(1, germany);\n+    final GamePlayer britain = GameDataTestUtil.britain(twwGameData);\n+    final List<Unit> enemyUnits = GameDataTestUtil.britishInfantry(twwGameData).create(1, britain);\n+    final List<TargetGroup> result = TargetGroup.newTargetGroups(units, enemyUnits);\n+    assertEquals(1, result.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5MDk3Nw=="}, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjI3Mjk3OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNDoxNDo1NFrOFkmB5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzo1MTo1NVrOFmxpVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxNjEzNA==", "bodyText": "This looks strange, could you check this @ron-murhammer ? It looks like targetGroups is always empty.  Was the iteration supposed to be on targets?", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373916134", "createdAt": "2020-02-03T04:14:54Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter(AccessLevel.PRIVATE)\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so those with the least number of targets\n+   * appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {\n+\n+    final Set<UnitType> unitTypes =\n+        units.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final Set<UnitType> enemyUnitTypes =\n+        enemyUnits.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final List<TargetGroup> targetGroups = new ArrayList<TargetGroup>();\n+    for (final UnitType unitType : unitTypes) {\n+      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n+      addToTargetGroups(unitType, targets, targetGroups);\n+    }\n+    return sortTargetGroups(targetGroups);\n+  }\n+\n+  private static Set<UnitType> findTargets(\n+      final UnitType unitType, final Set<UnitType> unitTypes, final Set<UnitType> enemyUnitTypes) {\n+    final Set<UnitType> targets = new HashSet<>(enemyUnitTypes);\n+    targets.removeAll(UnitAttachment.get(unitType).getCanNotTarget());\n+    return unitTypes.stream().anyMatch(Matches.unitTypeIsDestroyer())\n+        ? targets\n+        : targets.stream()\n+            .filter(\n+                target -> !UnitAttachment.get(target).getCanNotBeTargetedBy().contains(unitType))\n+            .collect(Collectors.toSet());\n+  }\n+\n+  private static void addToTargetGroups(\n+      final UnitType unitType, final Set<UnitType> targets, final List<TargetGroup> targetGroups) {\n+    if (targets.isEmpty()) {\n+      return;\n+    }\n+    targetGroups.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0NTA0NA==", "bodyText": "Its correct. It will be empty on the first call to this method but then future calls will be looking at existing TargetGroup in the list to see whether to add to that group or add a new TargetGroup.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r374445044", "createdAt": "2020-02-04T02:24:47Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter(AccessLevel.PRIVATE)\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so those with the least number of targets\n+   * appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {\n+\n+    final Set<UnitType> unitTypes =\n+        units.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final Set<UnitType> enemyUnitTypes =\n+        enemyUnits.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final List<TargetGroup> targetGroups = new ArrayList<TargetGroup>();\n+    for (final UnitType unitType : unitTypes) {\n+      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n+      addToTargetGroups(unitType, targets, targetGroups);\n+    }\n+    return sortTargetGroups(targetGroups);\n+  }\n+\n+  private static Set<UnitType> findTargets(\n+      final UnitType unitType, final Set<UnitType> unitTypes, final Set<UnitType> enemyUnitTypes) {\n+    final Set<UnitType> targets = new HashSet<>(enemyUnitTypes);\n+    targets.removeAll(UnitAttachment.get(unitType).getCanNotTarget());\n+    return unitTypes.stream().anyMatch(Matches.unitTypeIsDestroyer())\n+        ? targets\n+        : targets.stream()\n+            .filter(\n+                target -> !UnitAttachment.get(target).getCanNotBeTargetedBy().contains(unitType))\n+            .collect(Collectors.toSet());\n+  }\n+\n+  private static void addToTargetGroups(\n+      final UnitType unitType, final Set<UnitType> targets, final List<TargetGroup> targetGroups) {\n+    if (targets.isEmpty()) {\n+      return;\n+    }\n+    targetGroups.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxNjEzNA=="}, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwMjk3MQ==", "bodyText": "Ah, I see it now. It's a bit counter-intuitive for a loop or a stream to have an effect when the iterated item is empty.\nIt could be worthwhile IMO then, for explicitness/clarity, to special case this situation. IE:\nif(targetGroups.isEmpty()) {\n  targetGroiups.add(new TargetGroup(unitType, targets);\n  return;\n}\n\n\nThough, I think it's now more clear to me how we could avoid the mutable 'in/out' parameter, IMHO it would be even better if we returned a value (and also the name of this method becomes a bit easier to refine), eg:\n\n private static Optional<TargetGroup>  findTargetInTargetGroups( final UnitType unitType, final Set<UnitType> targets, final List<TargetGroup> targetGroups) {\n     return targetGroups.stream()\n              .filter(targetGroup -> targetGroup.getTargetUnitTypes().equals(targets))\n              .findAny()\n}\n\nThen the for loop where this is used becomes a bit more clear and the overall control-flow IMO I think is more evident:\n    for (final UnitType unitType : unitTypes) {\n      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n     targetGroups.add(\n           findTargetInTargetGroups(unitType, targets, targetGroups).orElseGet(() -> new TargetGroup(unitType, targets)));\n    }\n\nWDYT?", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r374502971", "createdAt": "2020-02-04T07:05:23Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter(AccessLevel.PRIVATE)\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so those with the least number of targets\n+   * appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {\n+\n+    final Set<UnitType> unitTypes =\n+        units.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final Set<UnitType> enemyUnitTypes =\n+        enemyUnits.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final List<TargetGroup> targetGroups = new ArrayList<TargetGroup>();\n+    for (final UnitType unitType : unitTypes) {\n+      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n+      addToTargetGroups(unitType, targets, targetGroups);\n+    }\n+    return sortTargetGroups(targetGroups);\n+  }\n+\n+  private static Set<UnitType> findTargets(\n+      final UnitType unitType, final Set<UnitType> unitTypes, final Set<UnitType> enemyUnitTypes) {\n+    final Set<UnitType> targets = new HashSet<>(enemyUnitTypes);\n+    targets.removeAll(UnitAttachment.get(unitType).getCanNotTarget());\n+    return unitTypes.stream().anyMatch(Matches.unitTypeIsDestroyer())\n+        ? targets\n+        : targets.stream()\n+            .filter(\n+                target -> !UnitAttachment.get(target).getCanNotBeTargetedBy().contains(unitType))\n+            .collect(Collectors.toSet());\n+  }\n+\n+  private static void addToTargetGroups(\n+      final UnitType unitType, final Set<UnitType> targets, final List<TargetGroup> targetGroups) {\n+    if (targets.isEmpty()) {\n+      return;\n+    }\n+    targetGroups.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxNjEzNA=="}, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0MTk3NA==", "bodyText": "I'm fairly certain that isn't equivalent as it would add the same TargetGroup to the list multiple times. Now you could probably change to an ordered set instead of a list and I think that would then work.\nSo I generally agree with trying to avoid mutable parameters but this alternative seems harder to understand as you really shouldn't be adding to targetGroups if you find identical targets and instead add to an existing TargetGroup.\nSo probably if you want mutable parameters then you could do something like:\nOptional<TargetGroup> targetGroup = findTargetInTargetGroups(unitType, targets, targetGroups);\nif (targetGroup.isPresent()) {\n// add unit type to existing target group\n} else {\n// create and add new target group to list\n}\n\nThoughts? I'm fairly neutral on that vs the existing method as it avoids the mutable parameter but ends up being a lot more verbose.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r375641974", "createdAt": "2020-02-06T05:05:11Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter(AccessLevel.PRIVATE)\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so those with the least number of targets\n+   * appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {\n+\n+    final Set<UnitType> unitTypes =\n+        units.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final Set<UnitType> enemyUnitTypes =\n+        enemyUnits.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final List<TargetGroup> targetGroups = new ArrayList<TargetGroup>();\n+    for (final UnitType unitType : unitTypes) {\n+      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n+      addToTargetGroups(unitType, targets, targetGroups);\n+    }\n+    return sortTargetGroups(targetGroups);\n+  }\n+\n+  private static Set<UnitType> findTargets(\n+      final UnitType unitType, final Set<UnitType> unitTypes, final Set<UnitType> enemyUnitTypes) {\n+    final Set<UnitType> targets = new HashSet<>(enemyUnitTypes);\n+    targets.removeAll(UnitAttachment.get(unitType).getCanNotTarget());\n+    return unitTypes.stream().anyMatch(Matches.unitTypeIsDestroyer())\n+        ? targets\n+        : targets.stream()\n+            .filter(\n+                target -> !UnitAttachment.get(target).getCanNotBeTargetedBy().contains(unitType))\n+            .collect(Collectors.toSet());\n+  }\n+\n+  private static void addToTargetGroups(\n+      final UnitType unitType, final Set<UnitType> targets, final List<TargetGroup> targetGroups) {\n+    if (targets.isEmpty()) {\n+      return;\n+    }\n+    targetGroups.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxNjEzNA=="}, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4NDAyOA==", "bodyText": "Perhaps being more verbose is okay. I do think we need a change here as this was not easy to grok. Let me please clarify what I think are the problems so that we can be on the same page:\n\n\n(biggest): The pattern of streaming on an empty list to then append to that list is a bit novel and surprising. I had to double check that it even worked. This perhaps could be solved by special casing the empty list scenario and appending, otherwise do the find.\n\n\nThe break up of:\n\n\nfor loop\n   do something\n   do more stuff\ndone\n\nIs not necessarily helpful. The 'do more stuff' piece does not take all of the logic or even a complete step out of the for loop. To understand the for loop, you really have to jump down two methods to see what side-effects occur. Having the 'do more stuff' function be functional could fix this as you would have different levels of abstraction, rather than part of the for loop simply moved elsewhere (indirection as opposed to abstraction). This could also be solved by simply inlining, but I think we want an abstraction, ie: a method call to calculate a result that is then used in the for loop.\n\nThe mutable in parameter, this I think is probably more a symptom of the second problem.\n\nWith that stated, I think we'll at least be on the same page. Also for consideration, I've been wondering if we want a multimap instead of a list. The multimap would take care for us of the adding a new element if none is there, otherwise we append to an existing list. That perhaps could simplify/remove some of the helper methods.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r376184028", "createdAt": "2020-02-07T02:16:56Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter(AccessLevel.PRIVATE)\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so those with the least number of targets\n+   * appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {\n+\n+    final Set<UnitType> unitTypes =\n+        units.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final Set<UnitType> enemyUnitTypes =\n+        enemyUnits.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final List<TargetGroup> targetGroups = new ArrayList<TargetGroup>();\n+    for (final UnitType unitType : unitTypes) {\n+      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n+      addToTargetGroups(unitType, targets, targetGroups);\n+    }\n+    return sortTargetGroups(targetGroups);\n+  }\n+\n+  private static Set<UnitType> findTargets(\n+      final UnitType unitType, final Set<UnitType> unitTypes, final Set<UnitType> enemyUnitTypes) {\n+    final Set<UnitType> targets = new HashSet<>(enemyUnitTypes);\n+    targets.removeAll(UnitAttachment.get(unitType).getCanNotTarget());\n+    return unitTypes.stream().anyMatch(Matches.unitTypeIsDestroyer())\n+        ? targets\n+        : targets.stream()\n+            .filter(\n+                target -> !UnitAttachment.get(target).getCanNotBeTargetedBy().contains(unitType))\n+            .collect(Collectors.toSet());\n+  }\n+\n+  private static void addToTargetGroups(\n+      final UnitType unitType, final Set<UnitType> targets, final List<TargetGroup> targetGroups) {\n+    if (targets.isEmpty()) {\n+      return;\n+    }\n+    targetGroups.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxNjEzNA=="}, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NjA3Ng==", "bodyText": "Updated. Not sure where else to take it. I think we generally agree on the drawbacks but they aren't necessarily easy to solve without adding in other drawbacks as the logic here is fairly complex (we aren't just making a CRUD app). We are also getting to the point of essentially debating the design of a few methods which while important, we've already taken a few passes on and this PR is pretty large and been open for a while. I think at some point we have to push forward and consider follow on PRs if there are some ideas on how to further improve it.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r376196076", "createdAt": "2020-02-07T03:13:53Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter(AccessLevel.PRIVATE)\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so those with the least number of targets\n+   * appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {\n+\n+    final Set<UnitType> unitTypes =\n+        units.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final Set<UnitType> enemyUnitTypes =\n+        enemyUnits.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final List<TargetGroup> targetGroups = new ArrayList<TargetGroup>();\n+    for (final UnitType unitType : unitTypes) {\n+      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n+      addToTargetGroups(unitType, targets, targetGroups);\n+    }\n+    return sortTargetGroups(targetGroups);\n+  }\n+\n+  private static Set<UnitType> findTargets(\n+      final UnitType unitType, final Set<UnitType> unitTypes, final Set<UnitType> enemyUnitTypes) {\n+    final Set<UnitType> targets = new HashSet<>(enemyUnitTypes);\n+    targets.removeAll(UnitAttachment.get(unitType).getCanNotTarget());\n+    return unitTypes.stream().anyMatch(Matches.unitTypeIsDestroyer())\n+        ? targets\n+        : targets.stream()\n+            .filter(\n+                target -> !UnitAttachment.get(target).getCanNotBeTargetedBy().contains(unitType))\n+            .collect(Collectors.toSet());\n+  }\n+\n+  private static void addToTargetGroups(\n+      final UnitType unitType, final Set<UnitType> targets, final List<TargetGroup> targetGroups) {\n+    if (targets.isEmpty()) {\n+      return;\n+    }\n+    targetGroups.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxNjEzNA=="}, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwMzYwNw==", "bodyText": "Generally agree, some quick comments:\n\ntactical design should be reasonable and not add debt unless there is a really strong trade-off to be made. Quick follow-ups for cleanup are not really a good thing.\nlarge PRs will tend to be open for a long time as they cannot be reviewed quickly. The size of a PR will also lead to more areas of feedback and it's less efficient to come back and re-review. Consider it to another extent, if someone wanted to game the review system, then to get less review, just open larger PRs. I think the rule of thumb is about 30 minutes per 200 lines of code (https://smartbear.com/learn/code-review/best-practices-for-peer-code-review/). Hence, at 600 lines, you're requiring a dedicated 90 minutes. Given our time limitations, that means at least multiple days for a first pass only.\n\nI think perhaps the better way to go would be more iterations, smaller changes, and decoupling updates. If for example the TargetGroup were all on its own, it probably could have been more efficiently reviewed and would not have blocked anything else. It is water under the bridge at this point though, and I also appreciate how much effort it takes to break up larger changes as I certainly have, multiple times, spent literally days breaking up 600-1000 lines PRs", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r376203607", "createdAt": "2020-02-07T03:51:55Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter(AccessLevel.PRIVATE)\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so those with the least number of targets\n+   * appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {\n+\n+    final Set<UnitType> unitTypes =\n+        units.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final Set<UnitType> enemyUnitTypes =\n+        enemyUnits.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final List<TargetGroup> targetGroups = new ArrayList<TargetGroup>();\n+    for (final UnitType unitType : unitTypes) {\n+      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n+      addToTargetGroups(unitType, targets, targetGroups);\n+    }\n+    return sortTargetGroups(targetGroups);\n+  }\n+\n+  private static Set<UnitType> findTargets(\n+      final UnitType unitType, final Set<UnitType> unitTypes, final Set<UnitType> enemyUnitTypes) {\n+    final Set<UnitType> targets = new HashSet<>(enemyUnitTypes);\n+    targets.removeAll(UnitAttachment.get(unitType).getCanNotTarget());\n+    return unitTypes.stream().anyMatch(Matches.unitTypeIsDestroyer())\n+        ? targets\n+        : targets.stream()\n+            .filter(\n+                target -> !UnitAttachment.get(target).getCanNotBeTargetedBy().contains(unitType))\n+            .collect(Collectors.toSet());\n+  }\n+\n+  private static void addToTargetGroups(\n+      final UnitType unitType, final Set<UnitType> targets, final List<TargetGroup> targetGroups) {\n+    if (targets.isEmpty()) {\n+      return;\n+    }\n+    targetGroups.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxNjEzNA=="}, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjI3NTM0OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNDoxNzoxOFrOFkmDOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMjoyMjozM1rOFlGSBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxNjQ3NQ==", "bodyText": "nit, addToTargetGroups could be a bit more descriptive. Notably, I'm curious/not sure what exactly we are adding to target groups. I'm not honestly 100% sure how to describe what we're adding to target groups here, sorry to not have good suggestions for you on-hand.\nSecond, bit of a side note, if you're able to see a way, would be nice as well to be able to return a result rather than modifying the input param targetGroups.  In which case up on line 55 we could have something like:\ntargetGroups.addEligibleTargets(unitType, targets);", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373916475", "createdAt": "2020-02-03T04:17:18Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter(AccessLevel.PRIVATE)\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so those with the least number of targets\n+   * appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {\n+\n+    final Set<UnitType> unitTypes =\n+        units.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final Set<UnitType> enemyUnitTypes =\n+        enemyUnits.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final List<TargetGroup> targetGroups = new ArrayList<TargetGroup>();\n+    for (final UnitType unitType : unitTypes) {\n+      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n+      addToTargetGroups(unitType, targets, targetGroups);\n+    }\n+    return sortTargetGroups(targetGroups);\n+  }\n+\n+  private static Set<UnitType> findTargets(\n+      final UnitType unitType, final Set<UnitType> unitTypes, final Set<UnitType> enemyUnitTypes) {\n+    final Set<UnitType> targets = new HashSet<>(enemyUnitTypes);\n+    targets.removeAll(UnitAttachment.get(unitType).getCanNotTarget());\n+    return unitTypes.stream().anyMatch(Matches.unitTypeIsDestroyer())\n+        ? targets\n+        : targets.stream()\n+            .filter(\n+                target -> !UnitAttachment.get(target).getCanNotBeTargetedBy().contains(unitType))\n+            .collect(Collectors.toSet());\n+  }\n+\n+  private static void addToTargetGroups(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0NDU0OA==", "bodyText": "I can't think of any better name. Essentially its adding the unit type and targets to either an exist target group or adding a new target group.\nA method call like that wouldn't be possible unless you made TargetGroups a separate class instead of a list.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r374444548", "createdAt": "2020-02-04T02:22:33Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter(AccessLevel.PRIVATE)\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so those with the least number of targets\n+   * appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {\n+\n+    final Set<UnitType> unitTypes =\n+        units.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final Set<UnitType> enemyUnitTypes =\n+        enemyUnits.stream().map(unit -> unit.getType()).collect(Collectors.toSet());\n+    final List<TargetGroup> targetGroups = new ArrayList<TargetGroup>();\n+    for (final UnitType unitType : unitTypes) {\n+      final Set<UnitType> targets = findTargets(unitType, unitTypes, enemyUnitTypes);\n+      addToTargetGroups(unitType, targets, targetGroups);\n+    }\n+    return sortTargetGroups(targetGroups);\n+  }\n+\n+  private static Set<UnitType> findTargets(\n+      final UnitType unitType, final Set<UnitType> unitTypes, final Set<UnitType> enemyUnitTypes) {\n+    final Set<UnitType> targets = new HashSet<>(enemyUnitTypes);\n+    targets.removeAll(UnitAttachment.get(unitType).getCanNotTarget());\n+    return unitTypes.stream().anyMatch(Matches.unitTypeIsDestroyer())\n+        ? targets\n+        : targets.stream()\n+            .filter(\n+                target -> !UnitAttachment.get(target).getCanNotBeTargetedBy().contains(unitType))\n+            .collect(Collectors.toSet());\n+  }\n+\n+  private static void addToTargetGroups(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxNjQ3NQ=="}, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjI5NTY5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNDozNjo1MFrOFkmO-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzowNjozOFrOFlJ3lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxOTQ4MQ==", "bodyText": "I see AI is tearing through this method quite frequently while simulating battles. Would it make sense to early return an empty list here if either of the input parameters are empty? I'm wondering if that might help performance a bit, particularly if unit stacks get to be very large, and secondly it might help a code maintainer grok this method to quickly know this method is effectively a no-op if either parameter is empty.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r373919481", "createdAt": "2020-02-03T04:36:50Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter(AccessLevel.PRIVATE)\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so those with the least number of targets\n+   * appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0Mzg3Mw==", "bodyText": "Uh we could though I don't expect it to have much performance impact (probably <1%). If you did some tests and saw differently then I'd definitely look to add that in.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r374443873", "createdAt": "2020-02-04T02:19:30Z", "author": {"login": "ron-murhammer"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter(AccessLevel.PRIVATE)\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so those with the least number of targets\n+   * appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxOTQ4MQ=="}, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwMzMxOA==", "bodyText": "Yeah, I don't think there would be a huge performance win, maybe if the stack sizes were very large. It's more an early termination to make it easier for a reader to see when the method is a no-op, similar to the if-guard you have in another method (line 74)\n    if (targets.isEmpty()) {\n      return;\n    }", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r374503318", "createdAt": "2020-02-04T07:06:38Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter(AccessLevel.PRIVATE)\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so those with the least number of targets\n+   * appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(\n+      final Collection<Unit> units, final Collection<Unit> enemyUnits) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxOTQ4MQ=="}, "originalCommit": {"oid": "4720f7a8962bbcc430de07a7e10161e755ed6008"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjc5NDU4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzoxMToxN1rOFmxJlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzoxMToxN1rOFmxJlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NTQ3Ng==", "bodyText": "Method newTargetGroups has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r376195476", "createdAt": "2020-02-07T03:11:17Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter(AccessLevel.PRIVATE)\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so those with the least number of targets\n+   * appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bda17c03b303952f37419a1df26de5d4670514a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjgyMDE5OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzoyOTozMFrOFmxYpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzoyOTozMFrOFmxYpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTMzMw==", "bodyText": "Method newTargetGroups has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r376199333", "createdAt": "2020-02-07T03:29:30Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter(AccessLevel.PRIVATE)\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so those with the least number of targets\n+   * appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e34ed1cf5c838b7cf400c587d79a899915d7ada3"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjg1MTIyOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzo1NDozMlrOFmxrCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzo1NDozMlrOFmxrCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwNDA0MQ==", "bodyText": "Method newTargetGroups has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/5871#discussion_r376204041", "createdAt": "2020-02-07T03:54:32Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/TargetGroup.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package games.strategy.triplea.delegate.battle;\n+\n+import com.google.common.collect.Sets;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/** Group of firing units and their targets. */\n+@Getter(AccessLevel.PRIVATE)\n+public class TargetGroup {\n+\n+  private final Set<UnitType> firingUnitTypes;\n+  private final Set<UnitType> targetUnitTypes;\n+\n+  public TargetGroup(final UnitType firingUnitType, final Set<UnitType> targetUnitTypes) {\n+    firingUnitTypes = Sets.newHashSet(firingUnitType);\n+    this.targetUnitTypes = targetUnitTypes;\n+  }\n+\n+  public Collection<Unit> getFiringUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(firingUnitTypes));\n+  }\n+\n+  public Collection<Unit> getTargetUnits(final Collection<Unit> units) {\n+    return CollectionUtils.getMatches(units, Matches.unitIsOfTypes(targetUnitTypes));\n+  }\n+\n+  /**\n+   * Find all target groupings for firing units and enemy units based on canNotTarget and\n+   * canNotBeTargetedBy attributes. Also takes into account if any destroyers are present which\n+   * cancel canNotBeTargetedBy. Sort all the target groups so those with the least number of targets\n+   * appear first.\n+   */\n+  public static List<TargetGroup> newTargetGroups(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c38ef18f8e4d4a1f3822bd157e94d88595fb08d"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2575, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}