{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMTUwMjQz", "number": 8472, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMTozNTozMFrOFHowWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMTo0NTowMFrOFHo1Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTUyMDkwOnYy", "diffSide": "RIGHT", "path": "ai/src/main/java/org/triplea/ai/doesnothing/DoesNothingAi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMTozNTozMFrOIJJ1nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMTozNTozMFrOIJJ1nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ2OTI3OQ==", "bodyText": "nit, does nothing is two words, canonical convention for the project is to word-split packages with periods.\nIE: org.triplea.ai.does.nothing\nI do like on the other hand that 'doesnothing' represents a singular entity, I think it's then a toss up. In case of a toss-up, the existing word-splitting practice I think wins the day.", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546469279", "createdAt": "2020-12-21T01:35:30Z", "author": {"login": "DanVanAtta"}, "path": "ai/src/main/java/org/triplea/ai/doesnothing/DoesNothingAi.java", "diffHunk": "@@ -1,4 +1,4 @@\n-package games.strategy.triplea.ai.weak;\n+package org.triplea.ai.doesnothing;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTUyODcyOnYy", "diffSide": "RIGHT", "path": "ai/src/main/java/org/triplea/ai/doesnothing/DoesNothingAi.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMTo0MTozM1rOIJJ53g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzowMToyNFrOIJK4SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDM2Ng==", "bodyText": "In AbstractAi, isn't the player type always (and will always be):   private final PlayerTypes.AiType playerType;\nIn that case, is there a way we can avoid passing the playerType parameter if it will always have the same value?\nSimilarly, we should consider the 'name' value as well. I think the AI implementation ought to own the name and know what it's label would be. In this case it does not make sense to have a name parameter passed to it either. I suspect it'll take some work to remove the former parameter given how the game is setup, would you agree that is the right direction in general or is there a major obstacle or reason why the AI instance should have parameters?", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546470366", "createdAt": "2020-12-21T01:41:33Z", "author": {"login": "DanVanAtta"}, "path": "ai/src/main/java/org/triplea/ai/doesnothing/DoesNothingAi.java", "diffHunk": "@@ -18,15 +19,10 @@\n  * An AI implementation that takes no action except to purchase and place units according to very\n  * simple rules.\n  */\n-public class DoesNothingAi extends AbstractBuiltInAi {\n+public class DoesNothingAi extends AbstractAi {\n \n-  public DoesNothingAi(final String name) {\n-    super(name);\n-  }\n-\n-  @Override\n-  public PlayerTypes.Type getPlayerType() {\n-    return PlayerTypes.DOES_NOTHING_AI;\n+  public DoesNothingAi(final String name, final PlayerTypes.AiType playerType) {\n+    super(name, playerType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MzIyOQ==", "bodyText": "playerType is a newly constructed object that is generated in HeadedGameRunner#gatherPlayerTypes.  So each AI class will have its own PlayerTypes.AiType instance.  It isn't a hardcoded value.\nname and label are two different things.  name is something like \"Germany\", \"United States\", \"Italy\", etc.  label is \"Hard (AI)\", \"Fast (AI)\", \"Does Nothing (AI)\".  The AbstractAi stores the name and the PlayerTypes.Type (and its child PlayerTypes.AiType) stores the label.  When you are selecting the users, the drop down is built from the PlayerTypes.Type list.  Once the game starts, the PlayerTypes.Type is used to create the actual player object (see newPlayerWithName).\nSo, these parameters (name and playerType) are required for the AbstractAi.", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546473229", "createdAt": "2020-12-21T01:56:47Z", "author": {"login": "trevan"}, "path": "ai/src/main/java/org/triplea/ai/doesnothing/DoesNothingAi.java", "diffHunk": "@@ -18,15 +19,10 @@\n  * An AI implementation that takes no action except to purchase and place units according to very\n  * simple rules.\n  */\n-public class DoesNothingAi extends AbstractBuiltInAi {\n+public class DoesNothingAi extends AbstractAi {\n \n-  public DoesNothingAi(final String name) {\n-    super(name);\n-  }\n-\n-  @Override\n-  public PlayerTypes.Type getPlayerType() {\n-    return PlayerTypes.DOES_NOTHING_AI;\n+  public DoesNothingAi(final String name, final PlayerTypes.AiType playerType) {\n+    super(name, playerType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDM2Ng=="}, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3NTkzMg==", "bodyText": "Ah, in this case name is ambigious. The label is 'node name' and name is 'player name'. The latter is poor naming as it is historically called that simply because the single player game was created first, so a each faction or country was named a 'player' (which ceases to make sense once you are in a multiplayer where a 'player' is a person and their name is their call-handle).\nRegardless, 'name' should probably be clarified to be either playerName or factionName.", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546475932", "createdAt": "2020-12-21T02:11:22Z", "author": {"login": "DanVanAtta"}, "path": "ai/src/main/java/org/triplea/ai/doesnothing/DoesNothingAi.java", "diffHunk": "@@ -18,15 +19,10 @@\n  * An AI implementation that takes no action except to purchase and place units according to very\n  * simple rules.\n  */\n-public class DoesNothingAi extends AbstractBuiltInAi {\n+public class DoesNothingAi extends AbstractAi {\n \n-  public DoesNothingAi(final String name) {\n-    super(name);\n-  }\n-\n-  @Override\n-  public PlayerTypes.Type getPlayerType() {\n-    return PlayerTypes.DOES_NOTHING_AI;\n+  public DoesNothingAi(final String name, final PlayerTypes.AiType playerType) {\n+    super(name, playerType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDM2Ng=="}, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3NjU4NQ==", "bodyText": "As a newcomer, neither of those are any more clarifying than name :)  So what do you want it renamed to?", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546476585", "createdAt": "2020-12-21T02:14:58Z", "author": {"login": "trevan"}, "path": "ai/src/main/java/org/triplea/ai/doesnothing/DoesNothingAi.java", "diffHunk": "@@ -18,15 +19,10 @@\n  * An AI implementation that takes no action except to purchase and place units according to very\n  * simple rules.\n  */\n-public class DoesNothingAi extends AbstractBuiltInAi {\n+public class DoesNothingAi extends AbstractAi {\n \n-  public DoesNothingAi(final String name) {\n-    super(name);\n-  }\n-\n-  @Override\n-  public PlayerTypes.Type getPlayerType() {\n-    return PlayerTypes.DOES_NOTHING_AI;\n+  public DoesNothingAi(final String name, final PlayerTypes.AiType playerType) {\n+    super(name, playerType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDM2Ng=="}, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NjM0NQ==", "bodyText": "playerName would work. I hate that refers to the faction (aka country), but it is what it is..", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546486345", "createdAt": "2020-12-21T03:01:24Z", "author": {"login": "DanVanAtta"}, "path": "ai/src/main/java/org/triplea/ai/doesnothing/DoesNothingAi.java", "diffHunk": "@@ -18,15 +19,10 @@\n  * An AI implementation that takes no action except to purchase and place units according to very\n  * simple rules.\n  */\n-public class DoesNothingAi extends AbstractBuiltInAi {\n+public class DoesNothingAi extends AbstractAi {\n \n-  public DoesNothingAi(final String name) {\n-    super(name);\n-  }\n-\n-  @Override\n-  public PlayerTypes.Type getPlayerType() {\n-    return PlayerTypes.DOES_NOTHING_AI;\n+  public DoesNothingAi(final String name, final PlayerTypes.AiType playerType) {\n+    super(name, playerType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDM2Ng=="}, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTUzMDU3OnYy", "diffSide": "RIGHT", "path": "ai/src/main/resources/META-INF/services/games.strategy.triplea.ai.AiProvider", "isResolved": false, "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMTo0MzowNFrOIJJ64Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTozMTo1NlrOIJmiZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDYyNQ==", "bodyText": "I missed this from the other PR, what is the purpose of this file?", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546470625", "createdAt": "2020-12-21T01:43:04Z", "author": {"login": "DanVanAtta"}, "path": "ai/src/main/resources/META-INF/services/games.strategy.triplea.ai.AiProvider", "diffHunk": "@@ -1 +1,2 @@\n+org.triplea.ai.doesnothing.DoesNothingAiProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MTYyNQ==", "bodyText": "Used by the Java Service Provider to find these classes.", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546471625", "createdAt": "2020-12-21T01:48:17Z", "author": {"login": "trevan"}, "path": "ai/src/main/resources/META-INF/services/games.strategy.triplea.ai.AiProvider", "diffHunk": "@@ -1 +1,2 @@\n+org.triplea.ai.doesnothing.DoesNothingAiProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDYyNQ=="}, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MzM3MA==", "bodyText": "Oi, I would really like to get rid of that. The usage of the service provider to find the main classes I think has been really difficult to understand. It makes the new process instantiation seem to be complete magic. Is there a way we can avoid this? It would be really great to have AIs be a matter of adding classes then adding a line to injections.", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546473370", "createdAt": "2020-12-21T01:57:27Z", "author": {"login": "DanVanAtta"}, "path": "ai/src/main/resources/META-INF/services/games.strategy.triplea.ai.AiProvider", "diffHunk": "@@ -1 +1,2 @@\n+org.triplea.ai.doesnothing.DoesNothingAiProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDYyNQ=="}, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3NDA3NA==", "bodyText": "I'd rather keep the service provider.  Because it allows adding AI users without bundling them with the full game.  So people could make their own AI and distribute them outside of triplea.  You just have to put the jar in the class path and it is loaded up.  It also means that game-headed doesn't really need to depend on ai.  It only depends on it now because I was having difficulties getting it built and packaged without making it a dependency of game-headed.", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546474074", "createdAt": "2020-12-21T02:01:23Z", "author": {"login": "trevan"}, "path": "ai/src/main/resources/META-INF/services/games.strategy.triplea.ai.AiProvider", "diffHunk": "@@ -1 +1,2 @@\n+org.triplea.ai.doesnothing.DoesNothingAiProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDYyNQ=="}, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3NTQ2OA==", "bodyText": "So people could make their own AI and distribute them outside of triplea.\n\nWhat's the use of that exactly? You'd still need to have TripleA specific tie-ins, why not just compile them into TripleA? I think this is encouraging a distributed AI system, this is the first new AI we are considering in years. I don't think there will be more than 1 or 2 new AIs total in the next half decade.\ngame-headed will likely continue to depend on the 'ai' package so it can gather the list of supported AIs. I think making it plug-and-play is overkill. Eventually I'd like to see the entirety of the UI outside of game-core and in game-headed, in which case grabbing the list of supported AIs makes more sense there. game-core is in some sense a temporary sub-project, all of the code inside of it is intended to go to another sub-project one day.\nCould you walk me through how this is used today to discover AIs?", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546475468", "createdAt": "2020-12-21T02:08:46Z", "author": {"login": "DanVanAtta"}, "path": "ai/src/main/resources/META-INF/services/games.strategy.triplea.ai.AiProvider", "diffHunk": "@@ -1 +1,2 @@\n+org.triplea.ai.doesnothing.DoesNothingAiProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDYyNQ=="}, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3NzQ1Mg==", "bodyText": "Could you walk me through how this is used today to discover AIs?\n\nWith the Service Provider?  In HeadedGameRunner#gatherPlayerTypes, it asks the Service Provider to load all providers of type AiProvider (https://github.com/triplea-game/triplea/blob/master/game-headed/src/main/java/org/triplea/game/client/HeadedGameRunner.java#L111).  The Service Provider will look through all jars and check for a file META-INF/services/games.strategy.triplea.ai.AiProvider .  If it finds that file, it will then load the classes that are listed in that file.", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546477452", "createdAt": "2020-12-21T02:19:17Z", "author": {"login": "trevan"}, "path": "ai/src/main/resources/META-INF/services/games.strategy.triplea.ai.AiProvider", "diffHunk": "@@ -1 +1,2 @@\n+org.triplea.ai.doesnothing.DoesNothingAiProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDYyNQ=="}, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NjYzMA==", "bodyText": "Thanks. Would you mind if we keep it dumb and simple for now and just list the AIs? That is very akin to DI as done in spring or guice, it's explicit, compile timem safe, and easy to understand. I really think using a service framework falls under the YAGNI category, we can change this later back to the service provider way if we find there is a need for it.", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546486630", "createdAt": "2020-12-21T03:03:06Z", "author": {"login": "DanVanAtta"}, "path": "ai/src/main/resources/META-INF/services/games.strategy.triplea.ai.AiProvider", "diffHunk": "@@ -1 +1,2 @@\n+org.triplea.ai.doesnothing.DoesNothingAiProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDYyNQ=="}, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5MTc3OQ==", "bodyText": "I've hardcoded the AIs in HeadedGameRunner now.  But I left the Service Provider code so that an AI can still be loaded.  I think it will make it easier for people to experiment with different AIs.", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546491779", "createdAt": "2020-12-21T03:28:52Z", "author": {"login": "trevan"}, "path": "ai/src/main/resources/META-INF/services/games.strategy.triplea.ai.AiProvider", "diffHunk": "@@ -1 +1,2 @@\n+org.triplea.ai.doesnothing.DoesNothingAiProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDYyNQ=="}, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5NjgyMg==", "bodyText": "Thank you.\nWe can take some time to consider it , I'm not demanding we remove the rest now. My only remaining concern beyond unused code being judiciously removed, is that we could be setting a pattern I would not really want repeated. Someone could look at the service code example and extend it to AI behaviors, map parsers, rule engines, dice rollers, etc.. All in all, I'd rather those contributions and items be added to the main code base for everyone to share. We also avoid other problems like it being unused and instances where it is over-engineered and never used.\nThough, with that said, the remaining service code IMO is dead code.\n\nWho specifically do you think it would help? Could they possibly participate in this conversation and their 2 cents?\nHow are we going to be sure we don't break any drop-in modules?\nIf someone can build an AI, why not just modify TripleA itself?", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546496822", "createdAt": "2020-12-21T03:55:31Z", "author": {"login": "DanVanAtta"}, "path": "ai/src/main/resources/META-INF/services/games.strategy.triplea.ai.AiProvider", "diffHunk": "@@ -1 +1,2 @@\n+org.triplea.ai.doesnothing.DoesNothingAiProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDYyNQ=="}, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwNDA2Mw==", "bodyText": "* Who specifically do you think it would help? Could they possibly participate in this conversation and their 2 cents?\n\n\nIt would help me.  Instead of needing to push code to triplea to get people to be able to test the ai, I could publish the jar separately and then they can test it.  It's release cycle can then be independent of triplea.\n\nHow are we going to be sure we don't break any drop-in modules?\nThe releases of AI will have to be tied to specific versions of triplea.  But that really isn't all that different from saved game compatibility or mod compatibility with other games.\nIf someone can build an AI, why not just modify TripleA itself?\nLots of reasons.  Some I can think of: different release cycles, different build requirements, different languages, etc.  Opening up AI development outside of TripleA code base allows more people who are just interested in AI to be involved.  It also allows them to release what they've done without needing to \"pollute\" the main triplea engine.  Take for example my AI engine.  It is quite likely that it will not work.  Being able to build it, share it, discover its uselessness all without modifying the triplea code is a good thing, in my mind.", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546504063", "createdAt": "2020-12-21T04:33:07Z", "author": {"login": "trevan"}, "path": "ai/src/main/resources/META-INF/services/games.strategy.triplea.ai.AiProvider", "diffHunk": "@@ -1 +1,2 @@\n+org.triplea.ai.doesnothing.DoesNothingAiProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDYyNQ=="}, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwOTYyMg==", "bodyText": "My first thought is that it is admitting defeat for the current PR process. I'd rather us improve the PR process and/or address any process concerns that slow you down. That makes overall development faster in the long term.  My second thought is it's not out of the question to do post-merge reviews.\nThe TripleA pre-release cycle is very fast, many times a day. I wonder if this really is not fast enough and if it truly is going to be easier to publish your own Jar. Perhaps any tester you could get them set up on a branch with gradle and they can then pull in changes quite readily. There are options worth exploring I think. Bottom line, I'd certainly rather us improve efficiency to meet needs and solve the problem that way rather than code around what is otherwise a human problem.", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546509622", "createdAt": "2020-12-21T04:59:45Z", "author": {"login": "DanVanAtta"}, "path": "ai/src/main/resources/META-INF/services/games.strategy.triplea.ai.AiProvider", "diffHunk": "@@ -1 +1,2 @@\n+org.triplea.ai.doesnothing.DoesNothingAiProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDYyNQ=="}, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUxMTE4Ng==", "bodyText": "I don't see it as admitting defeat.  If I wanted to create a chess engine, I could build one and have it immediately work with most of the chess UIs out there because there is a standard ai engine interface (https://en.wikipedia.org/wiki/Universal_Chess_Interface).  I don't have to submit it to the chess ui, I don't have even have to share it with anyone.\nThis is the same thing.  Instead of seeing it as a defeat, see it as allowing people to develop AI engines in their own ways.  The game maps are in their own separate repo.  This allows map designers to create maps at a separate pace than the engine.  And that is a good thing.  So is allowing AI developers to create AI at a separate pace than the engine.", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546511186", "createdAt": "2020-12-21T05:07:36Z", "author": {"login": "trevan"}, "path": "ai/src/main/resources/META-INF/services/games.strategy.triplea.ai.AiProvider", "diffHunk": "@@ -1 +1,2 @@\n+org.triplea.ai.doesnothing.DoesNothingAiProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDYyNQ=="}, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyODAyMA==", "bodyText": "Maps living in their own repository has created a contract that we must continue to support them and we in essence cannot change any map property that is every introduced. We must always be able to parse every version of XML that has ever existed.\nSimilarly, if AI can be developed outside of the main engine, it creates a rigid and potentially fragile contract where we can make changes and unknowingly break code. This locks us in, for better or potentially worse to an existing API.\nThere is another difference between map development and universal chess interface, the latter is intended to be distributed and is to a wide audience. AI development is for an audience of well, one.\nQuestion 1) Let me ask you this, would all of the release problems go away if you had write @trevan and could merge flow-field AI changes immediately after posting a PR?  Would you still want to distribute your own jar file?\nQuestion 2) If wanting to distribute your own Jar -  are we going to run into problems supporting users in test? Can we partition any bug reports?\nQuestion 3) If the development is done as a big bang, and then is merged in, how is anyone else to know how the code is organized and designed? How are we going to be able to support that code 3 or 5 years down the road? One aspect of PR is there is knowledge sharing for the reviewers and creates a paper trail of changes. The project does not get that if the final merge is mostly a big bang.\nQuestion 4) Will we be creating integration problems for ourselves when months down the road you have around somewhere in the ballpark of 10k to 20k  lines of code ready to submit? How can we reasonably review any of that? (4*)\nQuestion 5) How will you get coding ideas/considerations and new perspectives without doing any kind of review? The code I submit has and does benefit from reviews, from pointing out design flaws, oddities, and or outright bugs - you'll be missing that if we do only a big bang review.\n# (4*)  Pro AI is 17k lines (blank lines and comments included)\n~/work/triplea/game-core/src/main/java/games/strategy/triplea/ai$ find pro/ -name \"*.java\" | xargs wc -l | grep \"total\"\n 17307 total", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546528020", "createdAt": "2020-12-21T06:18:25Z", "author": {"login": "DanVanAtta"}, "path": "ai/src/main/resources/META-INF/services/games.strategy.triplea.ai.AiProvider", "diffHunk": "@@ -1 +1,2 @@\n+org.triplea.ai.doesnothing.DoesNothingAiProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDYyNQ=="}, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyOTk0NQ==", "bodyText": "I am pushing back on this, only because I think this is a major design decision. TripleA is not universal chess, we must keep context in mind. The code is already designed with a pretty clean interface for building new AIs.\nWhat if others take advantage of the jar separation and also build their own AIs? And then they submit those AIs to the code base and we get a repeat of the XML editor merge (which was 8k lines of code that were in horrible need of fixing and contained lots of bugs). Meanwhile we have to maintain the XML editor and it has dependencies to the core game engine that prevents other fixes from coming into place because we have to fix the XML editor first.\nSo the concern is not only about what you would write @trevan , but if we open it up like this, we have to consider others who would use it with all sorts of different development abilities.  At some point, some AIs, if not many (but I don't think there will be many more than one), would want to be integrated back into the engine. I DO NOT want for there to be a special clique of people that share amongst only themselves a great AI that only they can play because it is not part of the engine. This raise the question that if not for you, but for any other AI, how do ensure that we can get those AIs merged back into the engine and be of reasonable quality and not a major source of maintenance and bugs?", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546529945", "createdAt": "2020-12-21T06:25:51Z", "author": {"login": "DanVanAtta"}, "path": "ai/src/main/resources/META-INF/services/games.strategy.triplea.ai.AiProvider", "diffHunk": "@@ -1 +1,2 @@\n+org.triplea.ai.doesnothing.DoesNothingAiProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDYyNQ=="}, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkzOTQ5NQ==", "bodyText": "Maps living in their own repository has created a contract that we must continue to support them and we in essence cannot change any map property that is every introduced. We must always be able to parse every version of XML that has ever existed.\nSimilarly, if AI can be developed outside of the main engine, it creates a rigid and potentially fragile contract where we can make changes and unknowingly break code. This locks us in, for better or potentially worse to an existing API.\n\nTriplea is locked in only as much as saved compatibility is locked in.  If triplea needs to make breaking changes, then it makes the breaking changes.\n\nThere is another difference between map development and universal chess interface, the latter is intended to be distributed and is to a wide audience. AI development is for an audience of well, one.\n\nThis statement doesn't make sense to me.  You first talk about map development and then talk about AI development.  \"map development\" is intended for distribution and wide audience.  That's why people make maps.  Triplea AI development would be done for the same reasons that chess AI development is done.  It would also use the triplea interface just like universal chess interface is used.\n\nQuestion 1) Let me ask you this, would all of the release problems go away if you had write @trevan and could merge flow-field AI changes immediately after posting a PR? Would you still want to distribute your own jar file?\n\nI would still want to distribute a jar.  Forcing play testers to run this in preview builds of triplea limits the amount of testers.\n\nQuestion 2) If wanting to distribute your own Jar - are we going to run into problems supporting users in test? Can we partition any bug reports?\n\nI haven't looked at the bug reporting framework so I don't know.\n\nQuestion 3) If the development is done as a big bang, and then is merged in, how is anyone else to know how the code is organized and designed? How are we going to be able to support that code 3 or 5 years down the road? One aspect of PR is there is knowledge sharing for the reviewers and creates a paper trail of changes. The project does not get that if the final merge is mostly a big bang.\n\nYou can require the merge to be done over multiple PRs.  It doesn't have to be a big bang.\n\nQuestion 4) Will we be creating integration problems for ourselves when months down the road you have around somewhere in the ballpark of 10k to 20k lines of code ready to submit? How can we reasonably review any of that? (4*)\n\nThe PR can be broken up.\n\nQuestion 5) How will you get coding ideas/considerations and new perspectives without doing any kind of review? The code I submit has and does benefit from reviews, from pointing out design flaws, oddities, and or outright bugs - you'll be missing that if we do only a big bang review.\n\nThe PR can be broken up\n\nI DO NOT want for there to be a special clique of people that share amongst only themselves a great AI that only they can play because it is not part of the engine. This raise the question that if not for you, but for any other AI, how do ensure that we can get those AIs merged back into the engine and be of reasonable quality and not a major source of maintenance and bugs\n\nWhy not treat AIs like maps? You can download maps through the game UI and those maps are not part of the main repo.  At some point, triplea could have an AI chooser where there a different AIs that are available to be found.", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546939495", "createdAt": "2020-12-21T21:31:56Z", "author": {"login": "trevan"}, "path": "ai/src/main/resources/META-INF/services/games.strategy.triplea.ai.AiProvider", "diffHunk": "@@ -1 +1,2 @@\n+org.triplea.ai.doesnothing.DoesNothingAiProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDYyNQ=="}, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTUzMzExOnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/PlayerTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMTo0NTowMFrOIJJ8Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMTo0NTowMFrOIJJ8Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3MDk5MQ==", "bodyText": "This is now just a label for the DNAI? What do you think of adding a LABEL suffix to help clarify that?", "url": "https://github.com/triplea-game/triplea/pull/8472#discussion_r546470991", "createdAt": "2020-12-21T01:45:00Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/PlayerTypes.java", "diffHunk": "@@ -18,6 +17,8 @@\n @Value\n public class PlayerTypes {\n \n+  public static final String DOES_NOTHING_PLAYER = \"Does Nothing (AI)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c1d346001feb2af7b1638b856e5533c54a26eb"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2672, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}