{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMzYxMTYx", "number": 7593, "title": "Update: Improve error messaging for invalid values in NumberProperty.java", "bodyText": "Testing\n\nScreens Shots\n\nAdditional Notes to Reviewer\n\nRelease Note", "createdAt": "2020-09-10T04:29:17Z", "url": "https://github.com/triplea-game/triplea/pull/7593", "merged": true, "mergeCommit": {"oid": "7a267691e2d22bfece7a228aa5fb9f2b571d80e9"}, "closed": true, "closedAt": "2020-09-11T02:32:26Z", "author": {"login": "DanVanAtta"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHZFX2AH2gAyNDgzMzYxMTYxOmQyZmJmMzhlOTI3YTIyY2M4ZDE5ODdjMWUxNWM0NTRkMjM5ODE4MjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdIMGxMgFqTQ4NzIzODE5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d2fbf38e927a22cc8d1987c1e15c454d23981821", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/d2fbf38e927a22cc8d1987c1e15c454d23981821", "committedDate": "2020-09-10T04:28:12Z", "message": "Update: Improve error messaging for invalid values in NumberProperty.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e41f6288307c3acfe3a009ad945a76636d88a328", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/e41f6288307c3acfe3a009ad945a76636d88a328", "committedDate": "2020-09-10T05:37:06Z", "message": "Update NumberProperty test, do not check exception message and combine similar tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ecc06b86c40ad7cd8c398934009e93ff04e4d3f", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/0ecc06b86c40ad7cd8c398934009e93ff04e4d3f", "committedDate": "2020-09-10T05:30:54Z", "message": "Update test, do not check exception message and combine similar tests\n\nChecking exception messages leads to coupled and brittle tests.\nIt is better to instead check that the message contains expected\npieces of data but not the full and exact test (otherwise any\nchange, improvement or otherwise causes a false-positive test failure\nthat is a source of additional maintenance). In this case\nthere is not a lot of value to having the assertions for the\nexact exception message and so it is removed."}, "afterCommit": {"oid": "e41f6288307c3acfe3a009ad945a76636d88a328", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/e41f6288307c3acfe3a009ad945a76636d88a328", "committedDate": "2020-09-10T05:37:06Z", "message": "Update NumberProperty test, do not check exception message and combine similar tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MjM4MTky", "url": "https://github.com/triplea-game/triplea/pull/7593#pullrequestreview-487238192", "createdAt": "2020-09-12T15:54:53Z", "commit": {"oid": "e41f6288307c3acfe3a009ad945a76636d88a328"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNTo1NDo1M1rOHQ16mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNTo1NDo1M1rOHQ16mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMjYxNw==", "bodyText": "Parameterized Tests in JUnit 5 are really great", "url": "https://github.com/triplea-game/triplea/pull/7593#discussion_r487422617", "createdAt": "2020-09-12T15:54:53Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/test/java/games/strategy/engine/data/properties/NumberPropertyTest.java", "diffHunk": "@@ -1,46 +1,30 @@\n package games.strategy.engine.data.properties;\n \n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n-import org.junit.jupiter.api.Nested;\n-import org.junit.jupiter.api.Test;\n+import java.util.List;\n+import org.junit.jupiter.api.function.Executable;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n final class NumberPropertyTest {\n-  @Nested\n-  final class ConstructorTest {\n-    private static final String NAME = \"name\";\n-    private static final String DESCRIPTION = \"description\";\n-    private static final int MAX_VALUE = 100;\n-    private static final int MIN_VALUE = 0;\n-    private static final int DEFAULT_VALUE = 42;\n+  private static final String NAME = \"name\";\n+  private static final String DESCRIPTION = \"description\";\n+  private static final int MAX_VALUE = 100;\n+  private static final int MIN_VALUE = 0;\n+  private static final int DEFAULT_VALUE = 42;\n \n-    @Test\n-    void shouldThrowExceptionWhenMaxValueLessThanMinValue() {\n-      final Exception e =\n-          assertThrows(\n-              IllegalArgumentException.class,\n-              () -> new NumberProperty(NAME, DESCRIPTION, MIN_VALUE - 1, MIN_VALUE, DEFAULT_VALUE));\n-      assertThat(e.getMessage(), is(\"Max must be greater than min\"));\n-    }\n-\n-    @Test\n-    void shouldThrowExceptionWhenDefaultValueGreaterThanMaxValue() {\n-      final Exception e =\n-          assertThrows(\n-              IllegalArgumentException.class,\n-              () -> new NumberProperty(NAME, DESCRIPTION, MAX_VALUE, MIN_VALUE, MAX_VALUE + 1));\n-      assertThat(e.getMessage(), is(\"Default value out of range\"));\n-    }\n+  @ParameterizedTest\n+  @MethodSource\n+  void shouldThrow(final Executable numberPropertySupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e41f6288307c3acfe3a009ad945a76636d88a328"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3998, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}