{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyOTEyMzQx", "number": 7761, "title": "Add SLF4J logger", "bodyText": "Adds logback dependency to all projects, which by default brings in SLF4J\n\n\nAdd logback.xml config to headed game runner to register a custom adapter\nto be used for sending error reports. A SLF4J adapter is equivalent\nto a java.util.logger Handler\n\n\nUpdate ErrorFormatter to accept a generic \"LoggerRecord\" interface,\nthis is used to send error report uploads. We also add an adapter\nclass to convert either java.util.logging or logback records\nto a LoggerRecord.\n\n\nUpdate error report uploads to no longer have method name, it is not\navailable from logback logs.\n\n\nNotes:\n\nuncaught exceptions are still handled by java.util\njava.util logging and SLF4J logging live side-by-side well, just should\nnot be mixed within the same class\n\n\nTesting\nManually tested the various permutations of uncaught exception and logging messages with info, warning, error for both java.util and slf4j logging.\n\nScreens Shots\n\nAdditional Notes to Reviewer\n\nRelease Note", "createdAt": "2020-09-25T08:15:26Z", "url": "https://github.com/triplea-game/triplea/pull/7761", "merged": true, "mergeCommit": {"oid": "ad2a488821ba3f25c1870dfccdcf5bae2b97f642"}, "closed": true, "closedAt": "2020-09-26T04:52:41Z", "author": {"login": "DanVanAtta"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMS1NOABqjM4MDY5ODc1MzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMiPKyAH2gAyNDkyOTEyMzQxOjhlN2RmNjgyM2I1MTBmY2UyNmU3OGZjYzhhODlkMzk0ZTdiYjViZDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "180d4f1eefb7aa2fcd9a3ea4fc0276bccd654022", "author": {"user": {"login": "tripleabuilderbot", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/180d4f1eefb7aa2fcd9a3ea4fc0276bccd654022", "committedDate": "2020-09-25T08:10:11Z", "message": "Auto-Formatting"}, "afterCommit": {"oid": "0318c6d2a3f1f39d924cb13b8ff63c04b69e28f4", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/0318c6d2a3f1f39d924cb13b8ff63c04b69e28f4", "committedDate": "2020-09-25T10:00:35Z", "message": "Add SLF4J logger\n\n1) Adds logback dependency to all projects, which by default brings in SLF4J\n\n2) Add logback.xml config to headed game runner to register a custom adapter\n   to be used for sending error reports. A SLF4J adapter is equivalent\n   to a java.util.logger Handler\n\n3) Update ErrorFormatter to accept a generic \"LoggerRecord\" interface,\n   this is used to send error report uploads. We also add an adapter\n   class to convert either java.util.logging or logback records\n   to a LoggerRecord.\n\n4) Update error report uploads to no longer have method name, it is not\n   available from logback logs.\n\nNotes:\n- uncaught exceptions are still handled by java.util\n- java.util logging and SLF4J logging live side-by-side well, just should\n  not be mixed within the same class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1e468d744418957e720fb89135e019cff4b4513", "author": {"user": {"login": "tripleabuilderbot", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/a1e468d744418957e720fb89135e019cff4b4513", "committedDate": "2020-09-25T10:02:44Z", "message": "Auto-Formatting"}, "afterCommit": {"oid": "899484878941cda79e63076e418671a4892fca74", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/899484878941cda79e63076e418671a4892fca74", "committedDate": "2020-09-26T03:29:13Z", "message": "Add SLF4J logger\n\n1) Adds logback dependency to all projects, which by default brings in SLF4J\n\n2) Add logback.xml config to headed game runner to register a custom adapter\n   to be used for sending error reports. A SLF4J adapter is equivalent\n   to a java.util.logger Handler\n\n3) Update ErrorFormatter to accept a generic \"LoggerRecord\" interface,\n   this is used to send error report uploads. We also add an adapter\n   class to convert either java.util.logging or logback records\n   to a LoggerRecord.\n\n4) Update error report uploads to no longer have method name, it is not\n   available from logback logs.\n\nNotes:\n- uncaught exceptions are still handled by java.util\n- java.util logging and SLF4J logging live side-by-side well, just should\n  not be mixed within the same class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2OTM2ODQw", "url": "https://github.com/triplea-game/triplea/pull/7761#pullrequestreview-496936840", "createdAt": "2020-09-26T03:42:42Z", "commit": {"oid": "fb1f03faa69ef44503aacc500c08681c4fcabf08"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMzo0Mjo0MlrOHYdakw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMzo0Mjo0MlrOHYdakw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQwOTgxMQ==", "bodyText": "Avoid too many return statements within this method.", "url": "https://github.com/triplea-game/triplea/pull/7761#discussion_r495409811", "createdAt": "2020-09-26T03:42:42Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/org/triplea/debug/ErrorMessageFormatter.java", "diffHunk": "@@ -30,132 +22,51 @@ public String apply(final LogRecord logRecord) {\n   }\n \n   /**\n-   * Five ways we will hit our logging handler.:<br>\n-   * (1) uncaught exception with no message {@code throw new NullPointerException() =>\n-   * LogRecord.getMessage() == null && LogRecord.getThrown().getMessage() == null } Return: *\n-   * {exception simple name} <br>\n-   * (2) uncaught exception with a message {@code throw new NullPointerException(\"message\") => //\n-   * log record message will be populated with the exception message\n-   * LogRecord.getMessage().equals(LogRecord.getThrown().getMessage())} } <br>\n-   * Return: * {exception simple name} - {exception message} <br>\n-   * (3) logging an error message {@code log.severe(\"message\") => LogRecord.getMessage() != null &&\n-   * LogRecord.getThrown() == null } <br>\n-   * Return: * {log message} <br>\n-   * (4) logging an error message with exception that has no message {@code log.log(Level.SEVERE,\n-   * \"message\", new NullPointerException()) => LogRecord.getMessage() != null &&\n-   * LogRecord.getThrown().getMessage() == null } Return: * * {log message} * * * * {exception\n-   * simple name} <br>\n-   * (5) logging an error message with exception that has a message {@code log.log(Level.SEVERE,\n-   * \"log-message\", new NullPointerException(\"exception message\")) => LogRecord.getMessage() != null\n-   * && LogRecord.getThrown() != null &&\n-   * !LogRecord.getMessage().equals(LogRecord.getThrown().getMessage()) } <br>\n-   * Return: * {log message} * * {exception simple name} - {exception message}\n-   */\n-  private static String format(final LogRecord logRecord) {\n-    if (logRecord.getThrown() == null) {\n-      return logMessageOnly(logRecord);\n-    }\n-\n-    if (logRecord.getMessage() != null\n-        && logRecord.getThrown() != null\n-        && logRecord.getThrown().getMessage() != null\n-        && !logRecord.getMessage().equals(logRecord.getThrown().getMessage())) {\n-      return logMessageAndExceptionMessage(logRecord);\n-    }\n-\n-    if (logRecord.getMessage() != null\n-        && logRecord.getThrown() != null\n-        && logRecord.getThrown().getMessage() == null) {\n-      return logMessageAndExceptionWithoutMessage(logRecord);\n-    }\n-\n-    if (logRecord.getMessage() == null\n-        && logRecord.getThrown() != null\n-        && logRecord.getThrown().getMessage() == null) {\n-      return exceptionOnlyWithOutMessage(logRecord);\n-    }\n-\n-    if (logRecord.getMessage() != null\n-        && logRecord.getThrown() != null\n-        && logRecord.getThrown().getMessage() != null\n-        && logRecord.getMessage().equals(logRecord.getThrown().getMessage())) {\n-      return exceptionOnlyWithMessage(logRecord);\n-    }\n-\n-    throw new IllegalStateException(\n-        \"Unhandled: \" + logRecord.getMessage() + \", exception: \" + logRecord.getThrown());\n-  }\n-\n-  /*\n-   * <pre>\n-   * Error: {log message}\n-   * </pre>\n-   */\n-  private static String logMessageOnly(final LogRecord logRecord) {\n-    checkArgument(logRecord.getMessage() != null);\n-    checkArgument(logRecord.getThrown() == null);\n-\n-    return logRecord.getMessage();\n-  }\n-\n-  /*\n-   * <pre>\n-   * Error: {exception simple name} - {exception message}\n-   * </pre>\n-   */\n-  private static String exceptionOnlyWithMessage(final LogRecord logRecord) {\n-    checkArgument(logRecord.getThrown().getMessage() != null);\n-    checkArgument(logRecord.getMessage() != null);\n-    checkArgument(logRecord.getThrown().getMessage().equals(logRecord.getMessage()));\n-    return simpleName(logRecord) + \" - \" + logRecord.getThrown().getMessage();\n-  }\n-\n-  private static String simpleName(final LogRecord logRecord) {\n-    return logRecord.getThrown().getClass().getSimpleName();\n-  }\n-\n-  /*\n-   * <pre>\n-   * Error: {exception simple name}\n-   * </pre>\n-   */\n-  private static String exceptionOnlyWithOutMessage(final LogRecord logRecord) {\n-    checkArgument(logRecord.getThrown().getMessage() == null);\n-    checkArgument(logRecord.getMessage() == null);\n-\n-    return simpleName(logRecord);\n-  }\n-\n-  /*\n-   * <pre>\n-   * Error: {log message}\n+   * Five ways we will hit our logging handler:\n    *\n-   * Details: {exception simple name} - {exception message}\n-   * </pre>\n-   */\n-  private static String logMessageAndExceptionMessage(final LogRecord logRecord) {\n-    checkArgument(logRecord.getThrown().getMessage() != null);\n-    checkArgument(logRecord.getMessage() != null);\n-    checkArgument(!logRecord.getThrown().getMessage().equals(logRecord.getMessage()));\n-\n-    return logRecord.getMessage()\n-        + BREAK\n-        + simpleName(logRecord)\n-        + \": \"\n-        + logRecord.getThrown().getMessage();\n-  }\n-\n-  /*\n    * <pre>\n-   * Error: {log message}\n-   *\n-   * Details: {exception simple name}\n+   * (1) uncaught exception with no message, eg: {@code throw new NullPointerException()}\n+   * (2) uncaught exception with a message, eg:  {@code throw new NullPointerException(\"message\")}\n+   * (3) logging an error message, eg: {@code log.severe(\"message\")}\n+   * (4) logging an error message with exception that has no message, eg:\n+   * {@code log.log(Level.SEVERE, \"message\", new NullPointerException())}\n+   * (5) logging an error message with exception that has a message, eg:\n+   * {@code log.log(Level.SEVERE, \"log-message\", new NullPointerException(\"exception message\"))}\n    * </pre>\n    */\n-  private static String logMessageAndExceptionWithoutMessage(final LogRecord logRecord) {\n-    checkArgument(logRecord.getThrown().getMessage() == null);\n-    checkArgument(logRecord.getMessage() != null);\n-\n-    return logRecord.getMessage() + BREAK + simpleName(logRecord);\n+  private static String format(final LoggerRecord logRecord) {\n+    if (logRecord.getLogMessage() == null) {\n+      final LoggerRecord.ExceptionDetails exceptionDetails =\n+          logRecord.getExceptions().size() > 1\n+              ? logRecord.getExceptions().get(1)\n+              : logRecord.getExceptions().get(0);\n+\n+      if (exceptionDetails.getExceptionMessage() != null) {\n+        return exceptionDetails.getExceptionClassName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb1f03faa69ef44503aacc500c08681c4fcabf08"}, "originalPosition": 178}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "981647974c7a7a420a27e0ff700907dabe38792b", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/981647974c7a7a420a27e0ff700907dabe38792b", "committedDate": "2020-09-26T03:55:38Z", "message": "Add SLF4J logger\n\n1) Adds logback dependency to all projects, which by default brings in SLF4J\n\n2) Add logback.xml config to headed game runner to register a custom adapter\n   to be used for sending error reports. A SLF4J adapter is equivalent\n   to a java.util.logger Handler\n\n3) Update ErrorFormatter to accept a generic \"LoggerRecord\" interface,\n   this is used to send error report uploads. We also add an adapter\n   class to convert either java.util.logging or logback records\n   to a LoggerRecord.\n\n4) Update error report uploads to no longer have method name, it is not\n   available from logback logs.\n\nNotes:\n- uncaught exceptions are still handled by java.util\n- java.util logging and SLF4J logging live side-by-side well, just should\n  not be mixed within the same class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb1f03faa69ef44503aacc500c08681c4fcabf08", "author": {"user": {"login": "tripleabuilderbot", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/fb1f03faa69ef44503aacc500c08681c4fcabf08", "committedDate": "2020-09-26T03:31:23Z", "message": "Auto-Formatting"}, "afterCommit": {"oid": "981647974c7a7a420a27e0ff700907dabe38792b", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/981647974c7a7a420a27e0ff700907dabe38792b", "committedDate": "2020-09-26T03:55:38Z", "message": "Add SLF4J logger\n\n1) Adds logback dependency to all projects, which by default brings in SLF4J\n\n2) Add logback.xml config to headed game runner to register a custom adapter\n   to be used for sending error reports. A SLF4J adapter is equivalent\n   to a java.util.logger Handler\n\n3) Update ErrorFormatter to accept a generic \"LoggerRecord\" interface,\n   this is used to send error report uploads. We also add an adapter\n   class to convert either java.util.logging or logback records\n   to a LoggerRecord.\n\n4) Update error report uploads to no longer have method name, it is not\n   available from logback logs.\n\nNotes:\n- uncaught exceptions are still handled by java.util\n- java.util logging and SLF4J logging live side-by-side well, just should\n  not be mixed within the same class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e7df6823b510fce26e78fcc8a89d394e7bb5bd3", "author": {"user": {"login": "tripleabuilderbot", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/8e7df6823b510fce26e78fcc8a89d394e7bb5bd3", "committedDate": "2020-09-26T03:57:40Z", "message": "Auto-Formatting"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3946, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}