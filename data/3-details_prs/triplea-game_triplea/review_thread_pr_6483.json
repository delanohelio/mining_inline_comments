{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MDM4OTI1", "number": 6483, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMDoyMTo1M1rOD9J6kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMDoyOTozMFrOD9J8cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDUyMTc3OnYy", "diffSide": "RIGHT", "path": "java-extras/src/main/java/org/triplea/io/FileUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMDoyMTo1M1rOGWf2XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMDoyNDoxOVrOGWf3LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0MzY3Ng==", "bodyText": "Thought: I we would use java.nio.file.Path instead of java.io.File we could easily use Path#of for convinience instead of coding this logic ourselves.", "url": "https://github.com/triplea-game/triplea/pull/6483#discussion_r426243676", "createdAt": "2020-05-17T10:21:53Z", "author": {"login": "RoiEXLab"}, "path": "java-extras/src/main/java/org/triplea/io/FileUtils.java", "diffHunk": "@@ -3,13 +3,26 @@\n import static com.google.common.base.Preconditions.checkNotNull;\n \n import java.io.File;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n import java.util.Optional;\n+import lombok.experimental.UtilityClass;\n \n /** A collection of useful methods related to files. */\n+@UtilityClass\n public final class FileUtils {\n-  private FileUtils() {}\n+\n+  /**\n+   * Creates a new file with a parent folder and any number of child folders. This is a convenience\n+   * method to concatenate the path together with an OS specific file separator.\n+   */\n+  public static File newFile(final String parentDir, final String... childDirs) {\n+    final List<String> dirs = new ArrayList<>();\n+    dirs.add(parentDir);\n+    dirs.addAll(List.of(childDirs));\n+    return new File(String.join(File.separator, dirs));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12b665c42253bf9f0bee92bd9a6cd95989c84970"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0Mzg4NQ==", "bodyText": "That being said, you could simplify this code to\nreturn Path.of(parentDir, chilDirs).toFile();", "url": "https://github.com/triplea-game/triplea/pull/6483#discussion_r426243885", "createdAt": "2020-05-17T10:24:19Z", "author": {"login": "RoiEXLab"}, "path": "java-extras/src/main/java/org/triplea/io/FileUtils.java", "diffHunk": "@@ -3,13 +3,26 @@\n import static com.google.common.base.Preconditions.checkNotNull;\n \n import java.io.File;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n import java.util.Optional;\n+import lombok.experimental.UtilityClass;\n \n /** A collection of useful methods related to files. */\n+@UtilityClass\n public final class FileUtils {\n-  private FileUtils() {}\n+\n+  /**\n+   * Creates a new file with a parent folder and any number of child folders. This is a convenience\n+   * method to concatenate the path together with an OS specific file separator.\n+   */\n+  public static File newFile(final String parentDir, final String... childDirs) {\n+    final List<String> dirs = new ArrayList<>();\n+    dirs.add(parentDir);\n+    dirs.addAll(List.of(childDirs));\n+    return new File(String.join(File.separator, dirs));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0MzY3Ng=="}, "originalCommit": {"oid": "12b665c42253bf9f0bee92bd9a6cd95989c84970"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDUyNjU4OnYy", "diffSide": "RIGHT", "path": "game-core/src/main/java/games/strategy/triplea/ResourceLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMDoyOTozMFrOGWf4-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMDoyOTozMFrOGWf4-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NDM0Ng==", "bodyText": "A question of taste, but if you want a more functional approach here, you could do\nStream.of(\n  getMapDirectoryCandidates(mapName, ClientFileSystemHelper.getUserMapsFolder()),\n  getMapZipFileCandidates(mapName, ClientFileSystemHelper.getUserMapsFolder())\n).flatMap(Collection::stream)\n.collect(Collectors.toList());\nor\nStream.concat(\n  getMapDirectoryCandidates(mapName, ClientFileSystemHelper.getUserMapsFolder()).stream(),\n  getMapZipFileCandidates(mapName, ClientFileSystemHelper.getUserMapsFolder()).stream()\n).collect(Collectors.toList());", "url": "https://github.com/triplea-game/triplea/pull/6483#discussion_r426244346", "createdAt": "2020-05-17T10:29:30Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/triplea/ResourceLoader.java", "diffHunk": "@@ -210,8 +209,9 @@ static String normalizeMapName(final String zipName) {\n \n   private static List<File> getCandidatePaths(final String mapName) {\n     final List<File> candidates = new ArrayList<>();\n-    candidates.addAll(getMapDirectoryCandidates(mapName));\n-    candidates.addAll(getMapZipFileCandidates(mapName));\n+    candidates.addAll(\n+        getMapDirectoryCandidates(mapName, ClientFileSystemHelper.getUserMapsFolder()));\n+    candidates.addAll(getMapZipFileCandidates(mapName, ClientFileSystemHelper.getUserMapsFolder()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12b665c42253bf9f0bee92bd9a6cd95989c84970"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2199, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}