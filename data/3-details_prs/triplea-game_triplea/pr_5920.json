{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyODMyOTM0", "number": 5920, "title": "Simplify token parsing", "bodyText": "Follow-up to #5912\nFunctional Changes\n\n[] New map or map update\n[] New Feature\n[] Feature update or enhancement\n[] Feature Removal\n[x] Code Cleanup or refactor\n[] Configuration Change\n[] Problem fix:  \n[] Other:   \nTesting\n\n[] Manual testing done", "createdAt": "2020-02-09T14:13:17Z", "url": "https://github.com/triplea-game/triplea/pull/5920", "merged": true, "mergeCommit": {"oid": "bacd47732fa90dc74ad196dc02c2d9e268be0e6e"}, "closed": true, "closedAt": "2020-02-22T05:46:31Z", "author": {"login": "RoiEXLab"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEpl9egFqTM1OTM2MjczNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGttezAFqTM2MzAxMTkwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzYyNzM1", "url": "https://github.com/triplea-game/triplea/pull/5920#pullrequestreview-359362735", "createdAt": "2020-02-15T19:41:58Z", "commit": {"oid": "0f5284cf242257eb2d3a585fbdd398eadbd5d389"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxOTo0MTo1OFrOFqQT5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxOTo0NzowOFrOFqQVDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MTc1MQ==", "bodyText": "Any objection to adding a comment to explain this regex a bit and give an example of what it matches?\nCan we simplify the regex, does it have to be this long or maybe strict? It is a bit scary looking and seems to be more specified than what we had. I'm not sure if we need it to be extremely \"strict\".", "url": "https://github.com/triplea-game/triplea/pull/5920#discussion_r379851751", "createdAt": "2020-02-15T19:41:58Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/random/MartiDiceRoller.java", "diffHunk": "@@ -35,12 +35,15 @@\n import org.apache.http.util.EntityUtils;\n \n /** A pbem dice roller that reads its configuration from a properties file. */\n-@Log\n @Builder\n public final class MartiDiceRoller implements IRemoteDiceServer {\n   private static final int MESSAGE_MAX_LENGTH = 200;\n   private static final String DICE_ROLLER_PATH = \"/MARTI.php\";\n \n+  private final Pattern errorPattern = Pattern.compile(\"fatal error:(.*)!\");\n+  private final Pattern dicePattern =\n+      Pattern.compile(\"your dice are:\\\\s*((?:\\\\d(?:,\\\\d+)*)?)\\\\s*<p>\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5284cf242257eb2d3a585fbdd398eadbd5d389"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MTg2NQ==", "bodyText": "nit, missing either display name and/or assertion comment to explain why we expect this test to pass. I'd lean to an assertion comment personally to spell it out a bit.", "url": "https://github.com/triplea-game/triplea/pull/5920#discussion_r379851865", "createdAt": "2020-02-15T19:43:44Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/engine/random/MartiDiceRollerTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package games.strategy.engine.random;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.hamcrest.collection.IsArray.array;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import org.junit.jupiter.api.Test;\n+\n+public class MartiDiceRollerTest {\n+  private static final String successMessage =\n+      \"<!DOCTYPE html>\\n\"\n+          + \"<html>\\n\"\n+          + \"\\t<head>\\n\"\n+          + \"\\t\\t<title>M.A.R.T.I. Server -- \\\"more accurate rolls than irony\\\"</title>\\n\"\n+          + \"\\t</head>\\n\"\n+          + \"\\t<body>\\n\"\n+          + \"\\t\\t<p>Dice results were sent via email.</p>\"\n+          + \"<br><a href='https://dice.marti.triplea-game.org/MARTI_verify.php?iv=oTVwKksuDf4f0LW4j\"\n+          + \"6U6yAklQWsxpdac%2FmX1NMP7uXY%3D&enc=vhDa64l%2FORX6X8di6LVdl5JQGC81uQyKE4Jt0gHoVsOV5Uxz\"\n+          + \"msbVReOsBQonZmQi7JZAwGhL4HoFXzkJMjilNX1gRMs5%2FhXyjyoUryYGPzgOWIVG7IxkuOMRiot7kPqJQwNc\"\n+          + \"f08ev8TNj9WxZTSWPNy2j1Y17piXRn%2FffXIGPDDcrmw2rSeB3lCq6ZjlKSmMCIqEXk%2FSsJjQO7jKq7CkWT\"\n+          + \"ZPY2QxTfFuOmFEj1Ji7pp1GVuVcc5g90q5'>Click here to verify the roll.</a>\"\n+          + \"<br>your dice are: 2,5,1<p><p>\\t</body>\\n\"\n+          + \"</html>\";\n+\n+  private static final String failureMessage =\n+      \"<!DOCTYPE html>\\n\"\n+          + \"<html>\\n\"\n+          + \"\\t<head>\\n\"\n+          + \"\\t\\t<title>M.A.R.T.I. Server -- \\\"more accurate rolls than irony\\\"</title>\\n\"\n+          + \"\\t</head>\\n\"\n+          + \"\\t<body>\\n\"\n+          + \"\\t\\tfatal error: Emails [user@mail.invalid] are not registered.\"\n+          + \" Please register them at https://dice.marti.triplea-game.org/register.php .!\\n\"\n+          + \"\\n\";\n+\n+  private final MartiDiceRoller martiDiceRoller =\n+      MartiDiceRoller.builder()\n+          .diceRollerUri(URI.create(\"http://uri.invalid\"))\n+          .ccAddress(\"\")\n+          .toAddress(\"\")\n+          .gameId(\"\")\n+          .build();\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  void successfulMessageExtraction() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5284cf242257eb2d3a585fbdd398eadbd5d389"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MTk5Mg==", "bodyText": "nit, potentially over-specified test-case here. It's often not best to look for exact exception messages, instead if we check that key information is in the exception message than we get more flexibility. For example, we may want to change the message to be `Email 'user@mail.invalid' is not registered', which would fail this test. If we check instead that the marti URL and email address are present, then we are pretty sure the message is sufficient.\nSecond, the marti URL being hardcode is potentially something that is likely to change at some point, is there a constant somewhere that represents the same?", "url": "https://github.com/triplea-game/triplea/pull/5920#discussion_r379851992", "createdAt": "2020-02-15T19:46:03Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/engine/random/MartiDiceRollerTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package games.strategy.engine.random;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.hamcrest.collection.IsArray.array;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import org.junit.jupiter.api.Test;\n+\n+public class MartiDiceRollerTest {\n+  private static final String successMessage =\n+      \"<!DOCTYPE html>\\n\"\n+          + \"<html>\\n\"\n+          + \"\\t<head>\\n\"\n+          + \"\\t\\t<title>M.A.R.T.I. Server -- \\\"more accurate rolls than irony\\\"</title>\\n\"\n+          + \"\\t</head>\\n\"\n+          + \"\\t<body>\\n\"\n+          + \"\\t\\t<p>Dice results were sent via email.</p>\"\n+          + \"<br><a href='https://dice.marti.triplea-game.org/MARTI_verify.php?iv=oTVwKksuDf4f0LW4j\"\n+          + \"6U6yAklQWsxpdac%2FmX1NMP7uXY%3D&enc=vhDa64l%2FORX6X8di6LVdl5JQGC81uQyKE4Jt0gHoVsOV5Uxz\"\n+          + \"msbVReOsBQonZmQi7JZAwGhL4HoFXzkJMjilNX1gRMs5%2FhXyjyoUryYGPzgOWIVG7IxkuOMRiot7kPqJQwNc\"\n+          + \"f08ev8TNj9WxZTSWPNy2j1Y17piXRn%2FffXIGPDDcrmw2rSeB3lCq6ZjlKSmMCIqEXk%2FSsJjQO7jKq7CkWT\"\n+          + \"ZPY2QxTfFuOmFEj1Ji7pp1GVuVcc5g90q5'>Click here to verify the roll.</a>\"\n+          + \"<br>your dice are: 2,5,1<p><p>\\t</body>\\n\"\n+          + \"</html>\";\n+\n+  private static final String failureMessage =\n+      \"<!DOCTYPE html>\\n\"\n+          + \"<html>\\n\"\n+          + \"\\t<head>\\n\"\n+          + \"\\t\\t<title>M.A.R.T.I. Server -- \\\"more accurate rolls than irony\\\"</title>\\n\"\n+          + \"\\t</head>\\n\"\n+          + \"\\t<body>\\n\"\n+          + \"\\t\\tfatal error: Emails [user@mail.invalid] are not registered.\"\n+          + \" Please register them at https://dice.marti.triplea-game.org/register.php .!\\n\"\n+          + \"\\n\";\n+\n+  private final MartiDiceRoller martiDiceRoller =\n+      MartiDiceRoller.builder()\n+          .diceRollerUri(URI.create(\"http://uri.invalid\"))\n+          .ccAddress(\"\")\n+          .toAddress(\"\")\n+          .gameId(\"\")\n+          .build();\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  void successfulMessageExtraction() throws Exception {\n+    final Integer[] dice =\n+        Arrays.stream(martiDiceRoller.getDice(successMessage, 0)).boxed().toArray(Integer[]::new);\n+\n+    assertThat(dice, is(array(equalTo(1), equalTo(4), equalTo(0))));\n+  }\n+\n+  @Test\n+  void unsuccessfulMessageExtraction() {\n+    final Exception exception =\n+        assertThrows(\n+            InvocationTargetException.class, () -> martiDiceRoller.getDice(failureMessage, 0));\n+    assertThat(\n+        exception.getMessage(),\n+        is(\n+            \" Emails [user@mail.invalid] are not registered.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5284cf242257eb2d3a585fbdd398eadbd5d389"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MjA0Ng==", "bodyText": "Why is this assertion useful? Is it needed for correctness that the exception thrown have no cause?\nSide-note, it's really questionable already we are using exception for control-flow handling. The exception being thrown makes it hard to tell if we are seeing a case where the dice-roller is down, no network, or the totally expected case where a user is not yet registered.", "url": "https://github.com/triplea-game/triplea/pull/5920#discussion_r379852046", "createdAt": "2020-02-15T19:47:08Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/engine/random/MartiDiceRollerTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package games.strategy.engine.random;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.hamcrest.collection.IsArray.array;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import org.junit.jupiter.api.Test;\n+\n+public class MartiDiceRollerTest {\n+  private static final String successMessage =\n+      \"<!DOCTYPE html>\\n\"\n+          + \"<html>\\n\"\n+          + \"\\t<head>\\n\"\n+          + \"\\t\\t<title>M.A.R.T.I. Server -- \\\"more accurate rolls than irony\\\"</title>\\n\"\n+          + \"\\t</head>\\n\"\n+          + \"\\t<body>\\n\"\n+          + \"\\t\\t<p>Dice results were sent via email.</p>\"\n+          + \"<br><a href='https://dice.marti.triplea-game.org/MARTI_verify.php?iv=oTVwKksuDf4f0LW4j\"\n+          + \"6U6yAklQWsxpdac%2FmX1NMP7uXY%3D&enc=vhDa64l%2FORX6X8di6LVdl5JQGC81uQyKE4Jt0gHoVsOV5Uxz\"\n+          + \"msbVReOsBQonZmQi7JZAwGhL4HoFXzkJMjilNX1gRMs5%2FhXyjyoUryYGPzgOWIVG7IxkuOMRiot7kPqJQwNc\"\n+          + \"f08ev8TNj9WxZTSWPNy2j1Y17piXRn%2FffXIGPDDcrmw2rSeB3lCq6ZjlKSmMCIqEXk%2FSsJjQO7jKq7CkWT\"\n+          + \"ZPY2QxTfFuOmFEj1Ji7pp1GVuVcc5g90q5'>Click here to verify the roll.</a>\"\n+          + \"<br>your dice are: 2,5,1<p><p>\\t</body>\\n\"\n+          + \"</html>\";\n+\n+  private static final String failureMessage =\n+      \"<!DOCTYPE html>\\n\"\n+          + \"<html>\\n\"\n+          + \"\\t<head>\\n\"\n+          + \"\\t\\t<title>M.A.R.T.I. Server -- \\\"more accurate rolls than irony\\\"</title>\\n\"\n+          + \"\\t</head>\\n\"\n+          + \"\\t<body>\\n\"\n+          + \"\\t\\tfatal error: Emails [user@mail.invalid] are not registered.\"\n+          + \" Please register them at https://dice.marti.triplea-game.org/register.php .!\\n\"\n+          + \"\\n\";\n+\n+  private final MartiDiceRoller martiDiceRoller =\n+      MartiDiceRoller.builder()\n+          .diceRollerUri(URI.create(\"http://uri.invalid\"))\n+          .ccAddress(\"\")\n+          .toAddress(\"\")\n+          .gameId(\"\")\n+          .build();\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  void successfulMessageExtraction() throws Exception {\n+    final Integer[] dice =\n+        Arrays.stream(martiDiceRoller.getDice(successMessage, 0)).boxed().toArray(Integer[]::new);\n+\n+    assertThat(dice, is(array(equalTo(1), equalTo(4), equalTo(0))));\n+  }\n+\n+  @Test\n+  void unsuccessfulMessageExtraction() {\n+    final Exception exception =\n+        assertThrows(\n+            InvocationTargetException.class, () -> martiDiceRoller.getDice(failureMessage, 0));\n+    assertThat(\n+        exception.getMessage(),\n+        is(\n+            \" Emails [user@mail.invalid] are not registered.\"\n+                + \" Please register them at https://dice.marti.triplea-game.org/register.php .\"));\n+    assertThat(exception.getCause(), is(nullValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5284cf242257eb2d3a585fbdd398eadbd5d389"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75af4fb908717202aee9bc451c88cf1884b88c35", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/75af4fb908717202aee9bc451c88cf1884b88c35", "committedDate": "2020-02-20T15:38:07Z", "message": "Add characterisation tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5eb281c4eac57149f0529a0c909e74d25e8842de", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/5eb281c4eac57149f0529a0c909e74d25e8842de", "committedDate": "2020-02-20T15:38:07Z", "message": "Use regex instead of custom substring logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbc571c42c8c4c862ac64050a3de377f0b878dca", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/bbc571c42c8c4c862ac64050a3de377f0b878dca", "committedDate": "2020-02-20T15:38:07Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e2350a2931c7f1a7f5be959bdfcd68bbfe9f6f3", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/7e2350a2931c7f1a7f5be959bdfcd68bbfe9f6f3", "committedDate": "2020-02-20T15:38:07Z", "message": "Add comment explaining RegEx"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5be20202db5c81b421d23fee9c5240f503705175", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/5be20202db5c81b421d23fee9c5240f503705175", "committedDate": "2020-02-20T15:38:07Z", "message": "Simplify Test Strings & Rename Test Methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1ee406d4c51feb36653cb31f7b46dacac68bba3", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/c1ee406d4c51feb36653cb31f7b46dacac68bba3", "committedDate": "2020-02-20T15:38:07Z", "message": "Redo Exception flow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f688322a5ca3173adc2616456a8ff220214e30a", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/0f688322a5ca3173adc2616456a8ff220214e30a", "committedDate": "2020-02-20T15:37:50Z", "message": "Redo Exception flow"}, "afterCommit": {"oid": "c1ee406d4c51feb36653cb31f7b46dacac68bba3", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/c1ee406d4c51feb36653cb31f7b46dacac68bba3", "committedDate": "2020-02-20T15:38:07Z", "message": "Redo Exception flow"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8df5c772addee7a6490a7bcc2b8196dda7cc9043", "author": {"user": {"login": "RoiEXLab", "name": "RoiEX"}}, "url": "https://github.com/triplea-game/triplea/commit/8df5c772addee7a6490a7bcc2b8196dda7cc9043", "committedDate": "2020-02-20T16:04:30Z", "message": "Add precondition"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDExOTAw", "url": "https://github.com/triplea-game/triplea/pull/5920#pullrequestreview-363011900", "createdAt": "2020-02-22T05:45:01Z", "commit": {"oid": "c1ee406d4c51feb36653cb31f7b46dacac68bba3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNTo0NTowMlrOFtJr0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNTo0NTowMlrOFtJr0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4ODkxMg==", "bodyText": "Nit, we should keep in mind the audience of exception messages. Things like \"String\" is geared towards a developer, would not otherwise make sense to an end user. They want to know what happened and what they should do about it if anything.\nWith that said, this exception type and message are fine for now. We may though want to consider creating some infrastructure that would suffix an error message with something like \"This is an unexpected error and indicates a bug. Please report this to TripleA development\"", "url": "https://github.com/triplea-game/triplea/pull/5920#discussion_r382888912", "createdAt": "2020-02-22T05:45:02Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/engine/random/MartiDiceRoller.java", "diffHunk": "@@ -96,16 +95,15 @@ public String postRequest(\n   }\n \n   @Override\n-  public int[] getDice(final String string, final int count)\n-      throws IOException, InvocationTargetException {\n+  public int[] getDice(final String string, final int count) throws DiceServerException {\n     final Matcher errorMatcher = errorPattern.matcher(string);\n     if (errorMatcher.find()) {\n-      throw new InvocationTargetException(null, errorMatcher.group(1));\n+      throw new DiceServerException(errorMatcher.group(1));\n     }\n \n     final Matcher diceMatcher = dicePattern.matcher(string);\n     if (!diceMatcher.find()) {\n-      throw new IOException(\"String '\" + string + \"' has an invalid format.\");\n+      throw new IllegalStateException(\"String '\" + string + \"' has an invalid format.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ee406d4c51feb36653cb31f7b46dacac68bba3"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3678, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}