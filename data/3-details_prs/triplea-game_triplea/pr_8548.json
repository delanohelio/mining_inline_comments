{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2Njk4Mzcw", "number": 8548, "title": "Add initial work for creating diffusion maps and lanchester calculator", "bodyText": "Here's my initial work on the ai.  It basically just creates a few of the diffusion maps, implements the lanchester calculator, and hooks up debug so that I can see it in action.  The ai doesn't actually do anything yet.\nI'm submitting this so that the hooks into the debug system and the basic setup can be reviewed.\nTesting\n\nI've started a game with the ai to make sure the debug menus work and that things are being built correctly.\nScreens Shots\n\nAdditional Notes to Reviewer\n\nRelease Note", "createdAt": "2020-12-30T02:12:42Z", "url": "https://github.com/triplea-game/triplea/pull/8548", "merged": true, "mergeCommit": {"oid": "13929523da2445fb2c364a566f4a0b26c6c47722"}, "closed": true, "closedAt": "2021-01-03T19:51:18Z", "author": {"login": "trevan"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdrFqQ2AH2gAyNTQ2Njk4MzcwOmJjMDFmNTIyZDkyM2EzZmQ4NDZmZTMxODBhNTdmNzM1MDY2MDNiZjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdsaCZPgH2gAyNTQ2Njk4MzcwOjlhZTBmNzE2NzMxN2YxY2I2YmZjYzFkODU0N2EyYTlhNzQ4NjgzNmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bc01f522d923a3fd846fe3180a57f73506603bf8", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/bc01f522d923a3fd846fe3180a57f73506603bf8", "committedDate": "2020-12-30T02:11:40Z", "message": "Add initial work for creating diffusion maps and lanchester calculator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NzU5NTUy", "url": "https://github.com/triplea-game/triplea/pull/8548#pullrequestreview-559759552", "createdAt": "2020-12-30T02:13:25Z", "commit": {"oid": "bc01f522d923a3fd846fe3180a57f73506603bf8"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjoxMzoyNVrOIMb_eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjoyNDo1MlrOIMcFxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMjQ0MA==", "bodyText": "Without this line, the ai tests don't work.  It needs the compiled test files from the game-core.", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r549912440", "createdAt": "2020-12-30T02:13:25Z", "author": {"login": "trevan"}, "path": "ai/build.gradle", "diffHunk": "@@ -3,4 +3,7 @@ description = 'TripleA ai implementations'\n dependencies {\n     implementation project(\":game-core\")\n     implementation project(\":java-extras\")\n+    implementation project(\":swing-lib\")\n+    testImplementation project(\":test-common\")\n+    testCompile project(':game-core').sourceSets.test.output", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc01f522d923a3fd846fe3180a57f73506603bf8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMjU1Nw==", "bodyText": "This code of adding the two diffusions is not the final thing.  It is there just to make sure things are building and showing up.", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r549912557", "createdAt": "2020-12-30T02:14:14Z", "author": {"login": "trevan"}, "path": "ai/src/main/java/org/triplea/ai/flowfield/FlowFieldAi.java", "diffHunk": "@@ -3,41 +3,174 @@\n import games.strategy.engine.data.GameData;\n import games.strategy.engine.data.GamePlayer;\n import games.strategy.engine.data.GameState;\n+import games.strategy.engine.data.Resource;\n import games.strategy.engine.framework.startup.ui.PlayerTypes;\n+import games.strategy.engine.player.IPlayerBridge;\n+import games.strategy.triplea.Constants;\n import games.strategy.triplea.ai.AbstractAi;\n import games.strategy.triplea.delegate.remote.IAbstractPlaceDelegate;\n import games.strategy.triplea.delegate.remote.IMoveDelegate;\n import games.strategy.triplea.delegate.remote.IPurchaseDelegate;\n import games.strategy.triplea.delegate.remote.ITechDelegate;\n+import games.strategy.triplea.ui.TripleAFrame;\n+import games.strategy.triplea.ui.menubar.DebugMenu;\n+import java.awt.event.ActionEvent;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.swing.AbstractAction;\n+import javax.swing.ButtonGroup;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n+import javax.swing.JRadioButtonMenuItem;\n+import lombok.Getter;\n+import org.triplea.ai.flowfield.map.DiffusionMap;\n+import org.triplea.ai.flowfield.map.DiffusionType;\n+import org.triplea.ai.flowfield.map.TerritoryDebugUiAction;\n+import org.triplea.ai.flowfield.map.offense.EnemyCapitals;\n+import org.triplea.ai.flowfield.map.offense.ResourceToGet;\n+import org.triplea.ai.flowfield.odds.LanchesterDebugUiAction;\n+import org.triplea.swing.SwingAction;\n \n public class FlowFieldAi extends AbstractAi {\n+\n+  @Getter private final Map<String, DiffusionMap> diffusions = new HashMap<>();\n+  private int round = -1;\n+\n   public FlowFieldAi(final String name, final PlayerTypes.AiType playerType) {\n     super(name, playerType);\n   }\n \n+  @Override\n+  public void initialize(final IPlayerBridge playerBridge, final GamePlayer gamePlayer) {\n+    super.initialize(playerBridge, gamePlayer);\n+    DebugMenu.registerMenuCallback(getName(), this::addDebugMenuItems);\n+\n+    final DiffusionType enemyCapitals =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc01f522d923a3fd846fe3180a57f73506603bf8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMjY1NQ==", "bodyText": "This is where diffusion maps will be calculated as well as the rest of the turn calculations.  The @Override methods from the ai player will just utilize the data that is generated in this method (and its helpers).", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r549912655", "createdAt": "2020-12-30T02:15:07Z", "author": {"login": "trevan"}, "path": "ai/src/main/java/org/triplea/ai/flowfield/FlowFieldAi.java", "diffHunk": "@@ -3,41 +3,174 @@\n import games.strategy.engine.data.GameData;\n import games.strategy.engine.data.GamePlayer;\n import games.strategy.engine.data.GameState;\n+import games.strategy.engine.data.Resource;\n import games.strategy.engine.framework.startup.ui.PlayerTypes;\n+import games.strategy.engine.player.IPlayerBridge;\n+import games.strategy.triplea.Constants;\n import games.strategy.triplea.ai.AbstractAi;\n import games.strategy.triplea.delegate.remote.IAbstractPlaceDelegate;\n import games.strategy.triplea.delegate.remote.IMoveDelegate;\n import games.strategy.triplea.delegate.remote.IPurchaseDelegate;\n import games.strategy.triplea.delegate.remote.ITechDelegate;\n+import games.strategy.triplea.ui.TripleAFrame;\n+import games.strategy.triplea.ui.menubar.DebugMenu;\n+import java.awt.event.ActionEvent;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.swing.AbstractAction;\n+import javax.swing.ButtonGroup;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n+import javax.swing.JRadioButtonMenuItem;\n+import lombok.Getter;\n+import org.triplea.ai.flowfield.map.DiffusionMap;\n+import org.triplea.ai.flowfield.map.DiffusionType;\n+import org.triplea.ai.flowfield.map.TerritoryDebugUiAction;\n+import org.triplea.ai.flowfield.map.offense.EnemyCapitals;\n+import org.triplea.ai.flowfield.map.offense.ResourceToGet;\n+import org.triplea.ai.flowfield.odds.LanchesterDebugUiAction;\n+import org.triplea.swing.SwingAction;\n \n public class FlowFieldAi extends AbstractAi {\n+\n+  @Getter private final Map<String, DiffusionMap> diffusions = new HashMap<>();\n+  private int round = -1;\n+\n   public FlowFieldAi(final String name, final PlayerTypes.AiType playerType) {\n     super(name, playerType);\n   }\n \n+  @Override\n+  public void initialize(final IPlayerBridge playerBridge, final GamePlayer gamePlayer) {\n+    super.initialize(playerBridge, gamePlayer);\n+    DebugMenu.registerMenuCallback(getName(), this::addDebugMenuItems);\n+\n+    final DiffusionType enemyCapitals =\n+        EnemyCapitals.build(getGamePlayer(), getGameData().getPlayerList(), getGameData().getMap());\n+    diffusions.put(\n+        enemyCapitals.getName(),\n+        new DiffusionMap(\n+            enemyCapitals, territory -> getGameData().getMap().getNeighbors(territory)));\n+    final Resource pus = getGameData().getResourceList().getResource(Constants.PUS);\n+    final DiffusionType resourcesToGet =\n+        ResourceToGet.build(\n+            getGamePlayer(), getGameData().getRelationshipTracker(), getGameData().getMap(), pus);\n+    diffusions.put(\n+        resourcesToGet.getName(),\n+        new DiffusionMap(\n+            resourcesToGet, territory -> getGameData().getMap().getNeighbors(territory)));\n+  }\n+\n+  private Collection<JMenuItem> addDebugMenuItems(final TripleAFrame frame) {\n+    final Map<JRadioButtonMenuItem, TerritoryDebugUiAction> actions = new HashMap<>();\n+    final JMenu heatmapMenu = new JMenu(\"HeatMap\");\n+    final ButtonGroup heatmapGroup = new ButtonGroup();\n+\n+    // add an entry that will clear the heatmaps and other listeners\n+    final JRadioButtonMenuItem clearHeatmap =\n+        new JRadioButtonMenuItem(\n+            SwingAction.of(\n+                \"None\",\n+                new AbstractAction() {\n+                  @Override\n+                  public void actionPerformed(final ActionEvent e) {\n+                    getGameData()\n+                        .getMap()\n+                        .getTerritories()\n+                        .forEach(\n+                            territory -> {\n+                              frame.getMapPanel().clearTerritoryOverlay(territory);\n+                            });\n+                    frame.getMapPanel().repaint();\n+                  }\n+                }));\n+    clearHeatmap.setSelected(true);\n+    clearHeatmap.addItemListener(\n+        e ->\n+            actions.entrySet().stream()\n+                .filter(entry -> entry.getKey() != e.getSource())\n+                .forEach(entry -> entry.getValue().unselect()));\n+    heatmapGroup.add(clearHeatmap);\n+    heatmapMenu.add(clearHeatmap);\n+\n+    // add a button for each of the maps\n+    diffusions.forEach(\n+        (name, diffusion) -> {\n+          final TerritoryDebugUiAction action =\n+              new TerritoryDebugUiAction(frame, diffusion, getGameData().getMap());\n+          final JRadioButtonMenuItem menuItem =\n+              new JRadioButtonMenuItem(SwingAction.of(name, action));\n+          actions.put(menuItem, action);\n+          menuItem.addItemListener(\n+              e ->\n+                  actions.entrySet().stream()\n+                      .filter(entry -> entry.getKey() != e.getSource())\n+                      .forEach(entry -> entry.getValue().unselect()));\n+          heatmapGroup.add(menuItem);\n+          heatmapMenu.add(menuItem);\n+        });\n+\n+    return List.of(\n+        heatmapMenu,\n+        new JMenuItem(SwingAction.of(\"Lanchester\", new LanchesterDebugUiAction(frame, this))));\n+  }\n+\n+  @Override\n+  public void stopGame() {\n+    super.stopGame();\n+  }\n+\n   @Override\n   protected void purchase(\n       final boolean purchaseForBid,\n       final int pusToSpend,\n       final IPurchaseDelegate purchaseDelegate,\n       final GameData data,\n-      final GamePlayer player) {}\n+      final GamePlayer player) {\n+    if (isNewRound(getGameData().getCurrentRound())) {\n+      calculateTurn();\n+    }\n+  }\n+\n+  private boolean isNewRound(final int round) {\n+    if (round != this.round) {\n+      this.round = round;\n+      return true;\n+    }\n+    return false;\n+  }\n \n   @Override\n   protected void tech(\n-      final ITechDelegate techDelegate, final GameData data, final GamePlayer player) {}\n+      final ITechDelegate techDelegate, final GameData data, final GamePlayer player) {\n+    if (isNewRound(getGameData().getCurrentRound())) {\n+      calculateTurn();\n+    }\n+  }\n \n   @Override\n   protected void move(\n       final boolean nonCombat,\n       final IMoveDelegate moveDel,\n       final GameData data,\n-      final GamePlayer player) {}\n+      final GamePlayer player) {\n+    if (isNewRound(getGameData().getCurrentRound())) {\n+      calculateTurn();\n+    }\n+  }\n \n   @Override\n   protected void place(\n       final boolean placeForBid,\n       final IAbstractPlaceDelegate placeDelegate,\n       final GameState data,\n-      final GamePlayer player) {}\n+      final GamePlayer player) {\n+    if (isNewRound(getGameData().getCurrentRound())) {\n+      calculateTurn();\n+    }\n+  }\n+\n+  private void calculateTurn() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc01f522d923a3fd846fe3180a57f73506603bf8"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMjgyNQ==", "bodyText": "neighbors needs to be excluded because otherwise lombok will create an equals and hashcode that recurses n itself.", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r549912825", "createdAt": "2020-12-30T02:16:08Z", "author": {"login": "trevan"}, "path": "ai/src/main/java/org/triplea/ai/flowfield/map/FieldTerritory.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.triplea.ai.flowfield.map;\n+\n+import games.strategy.engine.data.Territory;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+@Data\n+@EqualsAndHashCode(exclude = \"neighbors\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc01f522d923a3fd846fe3180a57f73506603bf8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMzA0Nw==", "bodyText": "I'd rather this just be a Set since FieldTerritory has a reference to its Territory.  But when I did that, for some reason, I'd get duplicate neighbors in the set.", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r549913047", "createdAt": "2020-12-30T02:17:31Z", "author": {"login": "trevan"}, "path": "ai/src/main/java/org/triplea/ai/flowfield/map/FieldTerritory.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.triplea.ai.flowfield.map;\n+\n+import games.strategy.engine.data.Territory;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+@Data\n+@EqualsAndHashCode(exclude = \"neighbors\")\n+public class FieldTerritory {\n+  private Territory territory;\n+  private long value;\n+  @ToString.Exclude private final Map<Territory, FieldTerritory> neighbors = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc01f522d923a3fd846fe3180a57f73506603bf8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMzQ5OA==", "bodyText": "This debug item only works in Global40.  My hopes are to make this be able to calculate what the lanchenster attrition order is so that map makers could then add that to a file in their map.  It currently just runs a battle simulation and a lanchester calculation and displays the two results.", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r549913498", "createdAt": "2020-12-30T02:21:05Z", "author": {"login": "trevan"}, "path": "ai/src/main/java/org/triplea/ai/flowfield/odds/LanchesterDebugUiAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.triplea.ai.flowfield.odds;\n+\n+import static games.strategy.triplea.Constants.PLAYER_NAME_GERMANS;\n+import static games.strategy.triplea.Constants.UNIT_ATTACHMENT_NAME;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.power.calculator.CombatValueBuilder;\n+import games.strategy.triplea.delegate.power.calculator.PowerStrengthAndRolls;\n+import games.strategy.triplea.formatter.MyFormatter;\n+import games.strategy.triplea.odds.calculator.AggregateResults;\n+import games.strategy.triplea.odds.calculator.ConcurrentBattleCalculator;\n+import games.strategy.triplea.ui.TripleAFrame;\n+import java.awt.event.ActionEvent;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import javax.swing.AbstractAction;\n+import lombok.RequiredArgsConstructor;\n+import org.triplea.ai.flowfield.FlowFieldAi;\n+\n+@RequiredArgsConstructor\n+public class LanchesterDebugUiAction extends AbstractAction {\n+  private static final long serialVersionUID = -919496373521710039L;\n+\n+  private final TripleAFrame frame;\n+  private final FlowFieldAi ai;\n+\n+  @Override\n+  public void actionPerformed(final ActionEvent e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc01f522d923a3fd846fe3180a57f73506603bf8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMzgyMQ==", "bodyText": "I thought setTerritoryOverlay would be what I wanted but it only colors the border of the territory.  And that isn't very visible.  So, this new method uses the FILL operation so that the entire territory is colored.", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r549913821", "createdAt": "2020-12-30T02:23:28Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/screen/TileManager.java", "diffHunk": "@@ -567,6 +567,20 @@ public void setTerritoryOverlay(\n     updateTerritory(territory, data, mapData);\n   }\n \n+  public void setTerritoryOverlayForTile(\n+      final Territory territory,\n+      final Color color,\n+      final int alpha,\n+      final GameData data,\n+      final MapData mapData) {\n+    synchronized (mutex) {\n+      final IDrawable drawable =\n+          new TerritoryOverLayDrawable(color, territory.getName(), alpha, Operation.FILL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc01f522d923a3fd846fe3180a57f73506603bf8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxNDA1NA==", "bodyText": "These two methods (addAdditionalTerritoryDetailsFunction and removeAdditionalTerritoryDetailsFunction) allow the ai to add text to the territory details panel.  This, with the heat map overlay, makes it really easy to see what the territory valuations are.", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r549914054", "createdAt": "2020-12-30T02:24:52Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/ui/TerritoryDetailPanel.java", "diffHunk": "@@ -108,6 +112,14 @@ public void setGameData(final GameData data) {\n     territoryChanged(null);\n   }\n \n+  public void addAdditionalTerritoryDetailsFunction(final Function<Territory, String> method) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc01f522d923a3fd846fe3180a57f73506603bf8"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bae241374686f535f517a599f4f3ed6d700b232", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/7bae241374686f535f517a599f4f3ed6d700b232", "committedDate": "2020-12-30T15:47:18Z", "message": "Separate territory neighbor calculator from the diffusion maps\n\nBuild diffusion maps for all unit types. Start work on creating unique\nterritory neighbors per unit type."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMjIxNzc5", "url": "https://github.com/triplea-game/triplea/pull/8548#pullrequestreview-560221779", "createdAt": "2020-12-30T22:44:06Z", "commit": {"oid": "bc01f522d923a3fd846fe3180a57f73506603bf8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQyMjo0NDowNlrOIM2j8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQyMjo0NDowNlrOIM2j8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM0Nzc2MQ==", "bodyText": "The swing dependencies in AI would be great to break. It would very much allow for an easier path to JavaFX and perhaps be better general decoupling of AI with UI.\nCan we convert the dependencies to be data dependencies instead of actual UI components? What kinds of things do we need UI components for in this AI?", "url": "https://github.com/triplea-game/triplea/pull/8548#discussion_r550347761", "createdAt": "2020-12-30T22:44:06Z", "author": {"login": "DanVanAtta"}, "path": "ai/build.gradle", "diffHunk": "@@ -3,4 +3,7 @@ description = 'TripleA ai implementations'\n dependencies {\n     implementation project(\":game-core\")\n     implementation project(\":java-extras\")\n+    implementation project(\":swing-lib\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc01f522d923a3fd846fe3180a57f73506603bf8"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1743366cc9c622419524b6181e880a9af30a5a22", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/1743366cc9c622419524b6181e880a9af30a5a22", "committedDate": "2021-01-02T02:29:18Z", "message": "Rename from diffusion to influence. Diffuse unit information from targets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af22281644bb5f9c9d0a2ebaf5b33cf3cab1315a", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/af22281644bb5f9c9d0a2ebaf5b33cf3cab1315a", "committedDate": "2021-01-02T02:58:14Z", "message": "Merge remote-tracking branch 'upstream/master' into flow-field-ai-initial-work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eadf2190b900adac8f0b58314d82c62f2cfdc2d8", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/eadf2190b900adac8f0b58314d82c62f2cfdc2d8", "committedDate": "2021-01-02T06:52:39Z", "message": "Build debug menu w/  AiPlayerDebugAction/AiPlayerDebugOption instead of JMenuItems\n\nWhen an ai player registers a debug menu, it no longer needs access to\nJMenuItems or other swing related code. It uses AiPlayerDebugActions and\nAiPlayerDebugOptions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c37c6f91885b674ba23fd40dc1853056d068607", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/1c37c6f91885b674ba23fd40dc1853056d068607", "committedDate": "2021-01-02T18:09:11Z", "message": "Use the test resources in game-core instead of copying to ai"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ae0f7167317f1cb6bfcc1d8547a2a9a7486836f", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/9ae0f7167317f1cb6bfcc1d8547a2a9a7486836f", "committedDate": "2021-01-03T04:30:03Z", "message": "Improve debug menu options"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4010, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}