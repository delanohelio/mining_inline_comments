{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MTQ3ODA5", "number": 7334, "title": "Unit test for games/strategy/triplea/TripleA.java", "bodyText": "Unit test for games/strategy/triplea/TripleaA.java", "createdAt": "2020-08-06T16:56:11Z", "url": "https://github.com/triplea-game/triplea/pull/7334", "merged": true, "mergeCommit": {"oid": "0bcc95c82e1cdef0d34c736278f45c15110fa606"}, "closed": true, "closedAt": "2020-08-14T04:09:25Z", "author": {"login": "tjrbrom"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8Sy8AAH2gAyNDY0MTQ3ODA5OjlmNzMyZGI4NTExZmJhNzY3YWZiY2JhM2RjODEzZTNjYzhjMzM1MGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9xmxzAH2gAyNDY0MTQ3ODA5OmQ0MTY5YjQwODk1MDQ1NzBmYzhlMzcwZmNlNTQyYjkyM2M1MWI1NDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9f732db8511fba767afbcba3dc813e3cc8c3350a", "author": {"user": {"login": "tjrbrom", "name": "Nikolaos Themelis"}}, "url": "https://github.com/triplea-game/triplea/commit/9f732db8511fba767afbcba3dc813e3cc8c3350a", "committedDate": "2020-08-06T16:55:28Z", "message": "Unit test for games/strategy/triplea/TripleaA.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzOTc0NzI4", "url": "https://github.com/triplea-game/triplea/pull/7334#pullrequestreview-463974728", "createdAt": "2020-08-10T06:10:54Z", "commit": {"oid": "9f732db8511fba767afbcba3dc813e3cc8c3350a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoxMDo1NFrOG-CVag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoxNDozMlrOG-CY5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMzE0Ng==", "bodyText": "It looks like TripleA has a factory method here. Do we expect side effects from newPlayers call? Are we simply checking that we can create 3 Player instances?\nIt kinda seems like this is a test/check in of itself. What do you think to move this assertion and setup to its own test method?", "url": "https://github.com/triplea-game/triplea/pull/7334#discussion_r467703146", "createdAt": "2020-08-10T06:10:54Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/TripleATest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package games.strategy.triplea;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.chat.Chat;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.ServerGame;\n+import games.strategy.engine.framework.startup.launcher.LaunchAction;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.engine.player.Player;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class TripleATest {\n+\n+  private static final String DELEGATE_NAME_EDIT = \"edit\";\n+\n+  @Mock private LaunchAction launchAction;\n+  @Mock private Chat chat;\n+  @Mock private ServerGame serverGame;\n+  @Mock private GameData gameData;\n+\n+  @Test\n+  void testStartGameWhenServerGameStartedWithNewPlayersWithoutEditDelegate() {\n+\n+    final TripleA tripleA = new TripleA();\n+    final Map<String, PlayerType> playerNames = new HashMap<>();\n+    playerNames.put(\"first\", PlayerType.HUMAN_PLAYER);\n+    playerNames.put(\"second\", PlayerType.WEAK_AI);\n+    playerNames.put(\"third\", PlayerType.PRO_AI);\n+\n+    when(serverGame.getData()).thenReturn(gameData);\n+    when(gameData.getDelegate(DELEGATE_NAME_EDIT)).thenReturn(null);\n+\n+    final Set<Player> players = tripleA.newPlayers(playerNames);\n+    assertThat(players, hasSize(3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f732db8511fba767afbcba3dc813e3cc8c3350a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwNDAzOQ==", "bodyText": "The second time, we call setDisplay, we expect null to be passed, right?\nGenerally asserting any() in mockito is a test smell indicating a weak test. WDYT to either eliminate this verification or to verify we get an expected null value the second time?\nDid you find that the setDisplay to null was strictly necessary/important, or could we remove it sometime soon? There are a number of examples of unnecessary setting to null, essentially manual GC when we can let the Java GC just do its thing for us. It's hard to say for sure though as the state is finicky...", "url": "https://github.com/triplea-game/triplea/pull/7334#discussion_r467704039", "createdAt": "2020-08-10T06:14:32Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/TripleATest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package games.strategy.triplea;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.chat.Chat;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.ServerGame;\n+import games.strategy.engine.framework.startup.launcher.LaunchAction;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.engine.player.Player;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class TripleATest {\n+\n+  private static final String DELEGATE_NAME_EDIT = \"edit\";\n+\n+  @Mock private LaunchAction launchAction;\n+  @Mock private Chat chat;\n+  @Mock private ServerGame serverGame;\n+  @Mock private GameData gameData;\n+\n+  @Test\n+  void testStartGameWhenServerGameStartedWithNewPlayersWithoutEditDelegate() {\n+\n+    final TripleA tripleA = new TripleA();\n+    final Map<String, PlayerType> playerNames = new HashMap<>();\n+    playerNames.put(\"first\", PlayerType.HUMAN_PLAYER);\n+    playerNames.put(\"second\", PlayerType.WEAK_AI);\n+    playerNames.put(\"third\", PlayerType.PRO_AI);\n+\n+    when(serverGame.getData()).thenReturn(gameData);\n+    when(gameData.getDelegate(DELEGATE_NAME_EDIT)).thenReturn(null);\n+\n+    final Set<Player> players = tripleA.newPlayers(playerNames);\n+    assertThat(players, hasSize(3));\n+\n+    tripleA.startGame(serverGame, players, launchAction, chat);\n+    verify(gameData).addDelegate(any());\n+    verify(serverGame).addDelegateMessenger(any());\n+    verify(serverGame).setDisplay(any());\n+    verify(serverGame).setSoundChannel(any());\n+\n+    tripleA.shutDown();\n+    verify(serverGame, times(2)).setDisplay(any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f732db8511fba767afbcba3dc813e3cc8c3350a"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzOTc2MzEy", "url": "https://github.com/triplea-game/triplea/pull/7334#pullrequestreview-463976312", "createdAt": "2020-08-10T06:15:51Z", "commit": {"oid": "9f732db8511fba767afbcba3dc813e3cc8c3350a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoxNTo1MVrOG-CaoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoxNTo1MVrOG-CaoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwNDQ4MA==", "bodyText": "Is this a constant in the production code? WDYT to use a constant that lives in prod code such that we do not couple the test?", "url": "https://github.com/triplea-game/triplea/pull/7334#discussion_r467704480", "createdAt": "2020-08-10T06:15:51Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/TripleATest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package games.strategy.triplea;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.chat.Chat;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.ServerGame;\n+import games.strategy.engine.framework.startup.launcher.LaunchAction;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.engine.player.Player;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class TripleATest {\n+\n+  private static final String DELEGATE_NAME_EDIT = \"edit\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f732db8511fba767afbcba3dc813e3cc8c3350a"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e026d34cf9d66de1a07c77bfd2c9b5f37eba37c1", "author": {"user": {"login": "tjrbrom", "name": "Nikolaos Themelis"}}, "url": "https://github.com/triplea-game/triplea/commit/e026d34cf9d66de1a07c77bfd2c9b5f37eba37c1", "committedDate": "2020-08-11T06:57:22Z", "message": "#7334 Break test cases, replaced any()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4169b4089504570fc8e370fce542b923c51b549", "author": {"user": {"login": "tjrbrom", "name": "Nikolaos Themelis"}}, "url": "https://github.com/triplea-game/triplea/commit/d4169b4089504570fc8e370fce542b923c51b549", "committedDate": "2020-08-11T07:23:10Z", "message": "#7334 checkstyle"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4005, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}