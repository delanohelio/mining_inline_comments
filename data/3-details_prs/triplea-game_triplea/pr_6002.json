{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNDEwODkx", "number": 6002, "title": "Incompatible or \"File Not Found\" Save Game Error Messaging Improvements", "bodyText": "Overview\nImproves error messaging when loading incompatible save games. Notably will give a specific error message when loading a 1.9 save game, addresses: #5957\nThe error handling was pretty involved and a bit confused. First step was to make it so that all error messages for bad version did not come up as a 'save game not found error', so first that was fixed. Following that, the old Version.java was restored so we could deserialize it and give a good error message that we are incompatible with 1.9 game saves. Of note, a 'TaskRunner' API was created to help the error handling and improves on the API provided by 'BackgroundTaskRunner'.\nCommits\ncommit 2bea667\nHandle save-game file not found case\n\ncommit 1af53b5\nShow an error message when failing to load a save game\n\ncommit 40af548\nResurrect Version.java from latest release (1.9.0.0.13066)\n\ncommit 4746b30\nUpdate old Version.java, deprecate it, suppress checkstyles, apply formatting\n\ncommit 4d124c2\nGive specific error message and download link for incompatible 1.9 save games\n\ncommit e429725\nImprove javadoc on new utility class: TaskRunner\n\ncommit 5488392\nRemove unused \"@Log\"\n\ncommit a2e0d21\nAllow unmatched-tests custom check to be suppressed for specific class files via \"SuppressWarnings\" annotation\n\ncommit 3db8960\nRefactor TaskRunner, shorten \"run\" method\n\nFunctional Changes\n\n[] New map or map update\n[] New Feature\n[x] Feature update or enhancement\n[] Feature Removal\n[] Code Cleanup or refactor\n[] Configuration Change\n[x] Problem fix:  #5957 \n[] Other:   \nTesting\n\n[x] Manual testing done\n\n\nLoaded various saves games:\n\nan incompatible save game\na save game from an old version\na save game from a new version,\na compatiible save game (happy case)\n\n\n\nVerified error message links were clickable\n\n\nI added an infinite loop to 'TaskRunner' and verified that the wait dialog can be closed.\n\n\nTested file not found case:\n\nopened headed game, opened save game dialog, selected a file and then changed the file name to load to something that does not exist\nstarted a local lobby with bot, joined the bot and selected a save game to load and mangled the file name to something that does not exist. I verified that latest master is a no-op under this condition.\n\n\n\n\n\nScreens Shots\n(Note, seemingly on latest master @ 289b561, all save game load errors come back as a \"save game file not found\" and the RC exception is logged in the background. I think this could potentially be an error dialog race condition where it depends on which logger statement triggers the error message dialog, or perhaps something more fundamental has changed since #5957 was reported. Regardless, this update improves the error handling to give a specific error message and the RC exception is printed in the error dialog).\nLoading An Old Save Game\nBefore\n\n\nAfter\n\nLoading a New Save Game\nBefore\n\n\nAfter\n\nLoading a Save Game that fails to deserialize\nBefore\n\n\nAfter", "createdAt": "2020-03-04T08:39:25Z", "url": "https://github.com/triplea-game/triplea/pull/6002", "merged": true, "mergeCommit": {"oid": "9a1b0bf72e54f066a708806a1b6827222748d5c6"}, "closed": true, "closedAt": "2020-03-07T02:18:54Z", "author": {"login": "DanVanAtta"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKRTcegH2gAyMzgzNDEwODkxOjJiZWE2NjcwNTNlOWQ0ZTc5NDBhYTQ5NDY2OGEyM2JmYTU0MTE1MmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcLKzf6gH2gAyMzgzNDEwODkxOjA4NTc1MzMzOTAzMWYzM2U4OGMyNzRjZDgwOTc3ZjhkMDg3NDE2NmU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2bea667053e9d4e7940aa494668a23bfa541152c", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/2bea667053e9d4e7940aa494668a23bfa541152c", "committedDate": "2020-03-04T06:54:57Z", "message": "Handle save-game file not found case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1af53b5d235b926a715281fc1eb070bab2859dca", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/1af53b5d235b926a715281fc1eb070bab2859dca", "committedDate": "2020-03-04T06:54:57Z", "message": "Show an error message when failing to load a save game"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40af5489657b7f85878b836e199894f32f7bf55b", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/40af5489657b7f85878b836e199894f32f7bf55b", "committedDate": "2020-03-04T06:54:57Z", "message": "Resurrect Version.java from latest release (1.9.0.0.13066)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4746b3017f4b95a902c13836bb8e2ce7bd7716d1", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/4746b3017f4b95a902c13836bb8e2ce7bd7716d1", "committedDate": "2020-03-04T08:18:02Z", "message": "Update old Version.java, deprecate it, suppress checkstyles, apply formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d124c258b6abf5dd26aafa0deb0892fe9bab281", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/4d124c258b6abf5dd26aafa0deb0892fe9bab281", "committedDate": "2020-03-04T08:18:04Z", "message": "Give specific error message and download link for incompatible 1.9 save games"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e42972525dda2fa0571ee9a32799adf913ab91f4", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/e42972525dda2fa0571ee9a32799adf913ab91f4", "committedDate": "2020-03-04T08:18:04Z", "message": "Improve javadoc on new utility class: TaskRunner"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTg4MTU0", "url": "https://github.com/triplea-game/triplea/pull/6002#pullrequestreview-368588154", "createdAt": "2020-03-04T08:40:43Z", "commit": {"oid": "e42972525dda2fa0571ee9a32799adf913ab91f4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODo0MDo0NFrOFxkMPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODo0MDo0NFrOFxkMQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxNzUwMw==", "bodyText": "Method run has 33 lines of code (exceeds 25 allowed). Consider refactoring.", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387517503", "createdAt": "2020-03-04T08:40:44Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/ui/background/TaskRunner.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package games.strategy.engine.framework.ui.background;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import javax.swing.SwingWorker;\n+import javax.swing.WindowConstants;\n+import lombok.Builder;\n+import org.triplea.java.function.ThrowingRunnable;\n+import org.triplea.swing.SwingComponents;\n+\n+/**\n+ * Runs a background task with a wait dialog in the foreground. Similar to {@see\n+ * BackgroundTaskRunner} except:\n+ *\n+ * <ul>\n+ *   <li>Wait dialog can be closed.\n+ *   <li>Does not throw exceptions, instead invokes an exception handler\n+ * </ul>\n+ *\n+ * @param <E> Exception type that can be thrown by the background task.\n+ */\n+@Builder\n+public class TaskRunner<E extends Exception> {\n+  /**\n+   * Error callback handler. The background task encounters an exception, the background task is\n+   * cancelled and this is invoked with the exception that occurred.\n+   */\n+  @Nonnull private final Consumer<E> exceptionHandler;\n+  /**\n+   * Title of the wait spinner window that is displayed to user while a background action is being\n+   * executed.\n+   */\n+  @Nonnull private final String waitDialogTitle;\n+\n+  /**\n+   * Runs a task with a closeable wait spinner dialog in the foreground. THe wait spinner closes\n+   * when the task completes. If the spinner dialog is closed, then the background task is\n+   * cancelled. If there are any exceptions encountered, the spinner dialog is closed and the {@see\n+   * exceptionHandler} {@code Consumer} property is called.\n+   *\n+   * @param backgroundAction The action to be executed.\n+   */\n+  public void run(final ThrowingRunnable<E> backgroundAction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e42972525dda2fa0571ee9a32799adf913ab91f4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxNzUwNQ==", "bodyText": "TODO found", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387517505", "createdAt": "2020-03-04T08:40:44Z", "author": {"login": "codeclimate"}, "path": "game-core/src/main/java/games/strategy/engine/framework/ui/background/TaskRunner.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package games.strategy.engine.framework.ui.background;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import javax.swing.SwingWorker;\n+import javax.swing.WindowConstants;\n+import lombok.Builder;\n+import org.triplea.java.function.ThrowingRunnable;\n+import org.triplea.swing.SwingComponents;\n+\n+/**\n+ * Runs a background task with a wait dialog in the foreground. Similar to {@see\n+ * BackgroundTaskRunner} except:\n+ *\n+ * <ul>\n+ *   <li>Wait dialog can be closed.\n+ *   <li>Does not throw exceptions, instead invokes an exception handler\n+ * </ul>\n+ *\n+ * @param <E> Exception type that can be thrown by the background task.\n+ */\n+@Builder\n+public class TaskRunner<E extends Exception> {\n+  /**\n+   * Error callback handler. The background task encounters an exception, the background task is\n+   * cancelled and this is invoked with the exception that occurred.\n+   */\n+  @Nonnull private final Consumer<E> exceptionHandler;\n+  /**\n+   * Title of the wait spinner window that is displayed to user while a background action is being\n+   * executed.\n+   */\n+  @Nonnull private final String waitDialogTitle;\n+\n+  /**\n+   * Runs a task with a closeable wait spinner dialog in the foreground. THe wait spinner closes\n+   * when the task completes. If the spinner dialog is closed, then the background task is\n+   * cancelled. If there are any exceptions encountered, the spinner dialog is closed and the {@see\n+   * exceptionHandler} {@code Consumer} property is called.\n+   *\n+   * @param backgroundAction The action to be executed.\n+   */\n+  public void run(final ThrowingRunnable<E> backgroundAction) {\n+    Preconditions.checkNotNull(backgroundAction);\n+    final AtomicReference<Throwable> exceptionRef = new AtomicReference<>();\n+\n+    // TODO: after https://github.com/triplea-game/triplea/pull/6001 is merged", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e42972525dda2fa0571ee9a32799adf913ab91f4"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54883927248e671fcbdb217e3f286c3eba8ee429", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/54883927248e671fcbdb217e3f286c3eba8ee429", "committedDate": "2020-03-04T08:46:33Z", "message": "Remove unused \"@Log\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2e0d215132ab9c7d8db41ff087fe0972b0f490c", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/a2e0d215132ab9c7d8db41ff087fe0972b0f490c", "committedDate": "2020-03-04T08:52:39Z", "message": "Allow unmatched-tests custom check to be suppressed for specific class files via \"SuppressWarnings\" annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3db89602f9e9922924fa5c6010027ecc8445f812", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/3db89602f9e9922924fa5c6010027ecc8445f812", "committedDate": "2020-03-04T09:01:22Z", "message": "Refactor TaskRunner, shorten \"run\" method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4OTI1NzM0", "url": "https://github.com/triplea-game/triplea/pull/6002#pullrequestreview-368925734", "createdAt": "2020-03-04T16:24:02Z", "commit": {"oid": "3db89602f9e9922924fa5c6010027ecc8445f812"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoyNDowMlrOFx0Obg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzoxMDo0OVrOFx2Btw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4MDIwNg==", "bodyText": "Do we really need more than this level of detail?\nI'd really like to avoid keeping a legacy variant of the version class just for comparison.\nIf you ask me we should really serialize String rather than Version because that should be a more robust approach.\nIf the object isn't a string we can safely assume that it's incompatible and in case it is a string we could throw some super fancy analysis algorithm on it if we ever try to change the version format again in the future", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387780206", "createdAt": "2020-03-04T16:24:02Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/GameDataManager.java", "diffHunk": "@@ -59,16 +61,35 @@ public static GameData loadGame(final InputStream is) throws IOException {\n \n     final ObjectInputStream input = new ObjectInputStream(new GZIPInputStream(is));\n     try {\n-      final Version readVersion = (Version) input.readObject();\n-      if (!ClientContext.engineVersion().isCompatibleWithEngineVersion(readVersion)) {\n-        final String error =\n-            \"Incompatible engine versions. We are: \"\n-                + ClientContext.engineVersion()\n-                + \" . Trying to load game created with: \"\n-                + readVersion\n-                + \"\\nTo download the latest version of TripleA, Please visit \"\n-                + UrlConstants.DOWNLOAD_WEBSITE;\n-        throw new IOException(error);\n+      final Object version = input.readObject();\n+\n+      if (version instanceof games.strategy.util.Version) {\n+        throw new IOException(\n+            String.format(\n+                \"Incompatible engine versions. We are: %s<br/>\"\n+                    + \"Trying to load incompatible save game version: %s<br/>\"\n+                    + \"To download an older version of TripleA,<br/>\"\n+                    + \"please visit: <a href=%s>%s</a>\",\n+                ClientContext.engineVersion(),\n+                ((games.strategy.util.Version) version).getExactVersion(),\n+                UrlConstants.OLD_DOWNLOADS_WEBSITE,\n+                UrlConstants.OLD_DOWNLOADS_WEBSITE));\n+\n+      } else if (!(version instanceof Version)) {\n+        throw new IOException(\n+            \"Incompatible engine version with save game, \"\n+                + \"unable to determine version of the save game\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db89602f9e9922924fa5c6010027ecc8445f812"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4NjMyMw==", "bodyText": "A couple of things regarding the HTML here:\n\nPer HTML5 specification the <br> tag doesn't need to be closed, the <br /> is xhtml notation AFAIK.\nEven though per spec quotes after attributes like href=\"http://some/link\" are optional it's a good practice to always use them in case the link ever contains some sort of space or something", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387786323", "createdAt": "2020-03-04T16:32:50Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/GameDataManager.java", "diffHunk": "@@ -59,16 +61,35 @@ public static GameData loadGame(final InputStream is) throws IOException {\n \n     final ObjectInputStream input = new ObjectInputStream(new GZIPInputStream(is));\n     try {\n-      final Version readVersion = (Version) input.readObject();\n-      if (!ClientContext.engineVersion().isCompatibleWithEngineVersion(readVersion)) {\n-        final String error =\n-            \"Incompatible engine versions. We are: \"\n-                + ClientContext.engineVersion()\n-                + \" . Trying to load game created with: \"\n-                + readVersion\n-                + \"\\nTo download the latest version of TripleA, Please visit \"\n-                + UrlConstants.DOWNLOAD_WEBSITE;\n-        throw new IOException(error);\n+      final Object version = input.readObject();\n+\n+      if (version instanceof games.strategy.util.Version) {\n+        throw new IOException(\n+            String.format(\n+                \"Incompatible engine versions. We are: %s<br/>\"\n+                    + \"Trying to load incompatible save game version: %s<br/>\"\n+                    + \"To download an older version of TripleA,<br/>\"\n+                    + \"please visit: <a href=%s>%s</a>\",\n+                ClientContext.engineVersion(),\n+                ((games.strategy.util.Version) version).getExactVersion(),\n+                UrlConstants.OLD_DOWNLOADS_WEBSITE,\n+                UrlConstants.OLD_DOWNLOADS_WEBSITE));\n+\n+      } else if (!(version instanceof Version)) {\n+        throw new IOException(\n+            \"Incompatible engine version with save game, \"\n+                + \"unable to determine version of the save game\");\n+      } else if (!ClientContext.engineVersion().isCompatibleWithEngineVersion((Version) version)) {\n+        throw new IOException(\n+            String.format(\n+                \"Incompatible engine versions. We are: %s<br/>\"\n+                    + \"Trying to load game created with: %s<br/>\"\n+                    + \"To download the latest version of TripleA,<br/>\"\n+                    + \"please visit: <a href=%s>%s</a>\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db89602f9e9922924fa5c6010027ecc8445f812"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4OTAxNA==", "bodyText": "Why make the exception type so broad?\nAs far as I can see the only checked exception here is IOException", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387789014", "createdAt": "2020-03-04T16:36:55Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/mc/GameSelectorModel.java", "diffHunk": "@@ -66,31 +67,25 @@ public void load(final GameChooserEntry entry) {\n   /**\n    * Loads game data by parsing a given file.\n    *\n-   * @return True if file parsing was successful and an internal {@code GameData} was set. Otherwise\n-   *     returns false and internal {@code GameData} is null.\n+   * @throws Exception If file parsing is successful and an internal {@code GameData} was set.\n    */\n-  public boolean load(final File file) {\n-    if (!file.isFile()) {\n-      return false;\n-    }\n+  public void load(final File file) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db89602f9e9922924fa5c6010027ecc8445f812"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NDc2OA==", "bodyText": "I thought this kind of handling was odd so aI had a look at the documentation:\nTurns out it's way nicer to use FileDialog#getFiles() which returns an array with the selected files (with a single element because multipleMode is false by default, or empty if the operation was canceled)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final String fileName = fileDialog.getFile();\n          \n          \n            \n                  final String dirName = fileDialog.getDirectory();\n          \n          \n            \n                  return Optional.ofNullable(fileName).map(name -> new File(dirName, fileName));\n          \n          \n            \n                  return Optional.ofNullable(fileName)\n          \n          \n            \n                      .map(name -> new File(dirName, fileName))\n          \n          \n            \n                      .map(this::mapFileResult);\n          \n          \n            \n            return Arrays.stream(fileDialog.getFiles())\n          \n          \n            \n                .findAny()\n          \n          \n            \n                .map(this::mapFileResult);", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387794768", "createdAt": "2020-03-04T16:46:02Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/panels/main/game/selector/GameFileSelector.java", "diffHunk": "@@ -32,15 +36,26 @@ private GameFileSelector() {}\n       fileDialog.setVisible(true);\n       final String fileName = fileDialog.getFile();\n       final String dirName = fileDialog.getDirectory();\n-      return Optional.ofNullable(fileName).map(name -> new File(dirName, fileName));\n+      return Optional.ofNullable(fileName)\n+          .map(name -> new File(dirName, fileName))\n+          .map(this::mapFileResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db89602f9e9922924fa5c6010027ecc8445f812"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NzY5MA==", "bodyText": "Good thing HTML parsers aren't really known for their strictness \ud83d\ude05\n(I mean we could turn this into valid HTMl by adding a body tag, closing the whole thing and everything but as long as it is displayed correctly, I honestly don't even care at this point, this is not even a browser after all ^^ )", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387797690", "createdAt": "2020-03-04T16:50:44Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/panels/main/game/selector/GameSelectorPanel.java", "diffHunk": "@@ -312,30 +318,41 @@ public void update(final Observable o, final Object arg) {\n   }\n \n   private void selectSavedGameFile() {\n-    GameFileSelector.selectGameFile(JOptionPane.getFrameForComponent(this))\n+    GameFileSelector.builder()\n+        .fileDoesNotExistAction(\n+            file ->\n+                DialogBuilder.builder()\n+                    .parent(this)\n+                    .title(\"Save Game File Not Found\")\n+                    .errorMessage(\"File does not exist: \" + file.getAbsolutePath())\n+                    .showDialog())\n+        .build()\n+        .selectGameFile(JOptionPane.getFrameForComponent(this))\n         .ifPresent(\n-            file -> {\n-              try {\n-                if (!GameRunner.newBackgroundTaskRunner()\n-                    .runInBackgroundAndReturn(\n-                        \"Loading savegame...\",\n+            file ->\n+                TaskRunner.builder()\n+                    .waitDialogTitle(\"Loading Save Game\")\n+                    .exceptionHandler(\n+                        e ->\n+                            SwingComponents.showDialogWithLinks(\n+                                DialogWithLinksParams.builder()\n+                                    .title(\"Failed To Load Save Game\")\n+                                    .dialogType(DialogWithLinksTypes.ERROR)\n+                                    .dialogText(\n+                                        String.format(\n+                                            \"<html>Error: %s<br/><br/>\"\n+                                                + \"If this is not expected, please \"\n+                                                + \"file a <a href=%s>bug report</a><br/>\"\n+                                                + \"and attach the error message above and the \"\n+                                                + \"save game you are trying to load.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db89602f9e9922924fa5c6010027ecc8445f812"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwNTAyMg==", "bodyText": "It's a shame generic exceptions can't be caught here.\nHowever I wouldn't catch throwable here, just the regular Exception, it can't even be specified as generic type anyways", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387805022", "createdAt": "2020-03-04T17:02:32Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/ui/background/TaskRunner.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package games.strategy.engine.framework.ui.background;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import javax.swing.SwingWorker;\n+import javax.swing.WindowConstants;\n+import lombok.Builder;\n+import org.triplea.java.function.ThrowingRunnable;\n+import org.triplea.swing.SwingComponents;\n+\n+/**\n+ * Runs a background task with a wait dialog in the foreground. Similar to {@see\n+ * BackgroundTaskRunner} except:\n+ *\n+ * <ul>\n+ *   <li>Wait dialog can be closed.\n+ *   <li>Does not throw exceptions, instead invokes an exception handler\n+ * </ul>\n+ *\n+ * @param <E> Exception type that can be thrown by the background task.\n+ */\n+@Builder\n+public class TaskRunner<E extends Exception> {\n+  /**\n+   * Error callback handler. The background task encounters an exception, the background task is\n+   * cancelled and this is invoked with the exception that occurred.\n+   */\n+  @Nonnull private final Consumer<E> exceptionHandler;\n+  /**\n+   * Title of the wait spinner window that is displayed to user while a background action is being\n+   * executed.\n+   */\n+  @Nonnull private final String waitDialogTitle;\n+\n+  /**\n+   * Runs a task with a closeable wait spinner dialog in the foreground. THe wait spinner closes\n+   * when the task completes. If the spinner dialog is closed, then the background task is\n+   * cancelled. If there are any exceptions encountered, the spinner dialog is closed and the {@see\n+   * exceptionHandler} {@code Consumer} property is called.\n+   *\n+   * @param backgroundAction The action to be executed.\n+   */\n+  public void run(final ThrowingRunnable<E> backgroundAction) {\n+    Preconditions.checkNotNull(backgroundAction);\n+    final AtomicReference<Throwable> exceptionRef = new AtomicReference<>();\n+\n+    // TODO: after https://github.com/triplea-game/triplea/pull/6001 is merged\n+    //   change the 'null' parent window reference to main frame.\n+    final WaitDialog waitDialog = new WaitDialog(null, waitDialogTitle);\n+    waitDialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\n+    final SwingWorker<Void, Void> worker =\n+        buildBackgroundJobRunnerWithWaitDialog(backgroundAction, exceptionRef, waitDialog);\n+    // If wait dialog is closed, then cancel the worker background job.\n+    SwingComponents.addWindowClosedListener(waitDialog, () -> worker.cancel(true));\n+\n+    worker.execute();\n+    waitDialog.setVisible(true);\n+\n+    try {\n+      @SuppressWarnings(\"unchecked\")\n+      final @Nullable E exception = (E) exceptionRef.get();\n+      if (exception != null) {\n+        exceptionHandler.accept(exception);\n+      }\n+    } catch (final ClassCastException e) {\n+      throw new AssertionError(\"Unexpected exception thrown\", e);\n+    }\n+  }\n+\n+  private SwingWorker<Void, Void> buildBackgroundJobRunnerWithWaitDialog(\n+      final ThrowingRunnable<E> backgroundAction,\n+      final AtomicReference<Throwable> exceptionRef,\n+      final WaitDialog waitDialog) {\n+    return new SwingWorker<>() {\n+      @Override\n+      protected Void doInBackground() {\n+        try {\n+          backgroundAction.run();\n+        } catch (final Throwable e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db89602f9e9922924fa5c6010027ecc8445f812"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwNzg2MA==", "bodyText": "I believe a small bug sneaked in here:\nLoad should only get invoked when the file does actually exist, not the other way round.\nPreviously in the if statement this was the case because the second or case was only ever executed if !f1.exists() was false i.e. f1.exists() was true.", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387807860", "createdAt": "2020-03-04T17:07:26Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/org/triplea/game/server/HeadlessLaunchAction.java", "diffHunk": "@@ -31,8 +31,8 @@ public void handleGameInterruption(\n       // then crashing out, then launching, etc.\n       serverModel.setAllPlayersToNullNodes();\n       final File f1 = getAutoSaveFileUtils().getHeadlessAutoSaveFile();\n-      if (!f1.exists() || !gameSelectorModel.load(f1)) {\n-        gameSelectorModel.resetGameDataToNull();\n+      if (!f1.exists()) {\n+        gameSelectorModel.load(f1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db89602f9e9922924fa5c6010027ecc8445f812"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwOTcxOQ==", "bodyText": "new File(fileName) is called three times here, I'd appreciate if it was put into a single variable and used 3 times, even if that adds another if block", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387809719", "createdAt": "2020-03-04T17:10:49Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/GameRunner.java", "diffHunk": "@@ -153,7 +156,12 @@ private static void loadGame() {\n     gameSelectorModel.loadDefaultGameSameThread();\n     final String fileName = System.getProperty(TRIPLEA_GAME, \"\");\n     if (!fileName.isEmpty() && new File(fileName).exists()) {\n-      gameSelectorModel.load(new File(fileName));\n+      try {\n+        gameSelectorModel.load(new File(fileName));\n+      } catch (final Exception e) {\n+        log.log(\n+            Level.SEVERE, \"Error loading game file: \" + new File(fileName).getAbsolutePath(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db89602f9e9922924fa5c6010027ecc8445f812"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7846a1bfa8cd1e8e6ae84fda94cd254a4dee416b", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/7846a1bfa8cd1e8e6ae84fda94cd254a4dee416b", "committedDate": "2020-03-04T20:54:54Z", "message": "Fix headless launch file exists boolean check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9b6893fd2030ea644e518d47a36a615e007516a", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/d9b6893fd2030ea644e518d47a36a615e007516a", "committedDate": "2020-03-04T21:02:03Z", "message": "Replace \"<br/>\" with \"<br>\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af46b9f159eb96a6e77fedf198ecaa89790afcf3", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/af46b9f159eb96a6e77fedf198ecaa89790afcf3", "committedDate": "2020-03-04T21:05:05Z", "message": "Use quotes in links"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef1ecb99449a01aa9c61cf4bcde495fc5697d20c", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/ef1ecb99449a01aa9c61cf4bcde495fc5697d20c", "committedDate": "2020-03-04T21:18:42Z", "message": "Catch Exception instead of Throwable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f2f2593cff481c3287cad726dda316396db8356", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/1f2f2593cff481c3287cad726dda316396db8356", "committedDate": "2020-03-04T21:29:12Z", "message": "Merge remote-tracking branch 'origin/master' into incompatible-older-version-message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b986558d428cb8b387baf829478e6e21bb658f1", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/2b986558d428cb8b387baf829478e6e21bb658f1", "committedDate": "2020-03-04T21:30:49Z", "message": "Fix merge conflict resolutions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMzIxMjYw", "url": "https://github.com/triplea-game/triplea/pull/6002#pullrequestreview-370321260", "createdAt": "2020-03-06T13:30:46Z", "commit": {"oid": "2b986558d428cb8b387baf829478e6e21bb658f1"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzozMDo0NlrOFy4vRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzo0NzoxMVrOFy5OfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwMjcyNg==", "bodyText": "This one", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r388902726", "createdAt": "2020-03-06T13:30:46Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/GameRunner.java", "diffHunk": "@@ -153,7 +156,12 @@ private static void loadGame() {\n     gameSelectorModel.loadDefaultGameSameThread();\n     final String fileName = System.getProperty(TRIPLEA_GAME, \"\");\n     if (!fileName.isEmpty() && new File(fileName).exists()) {\n-      gameSelectorModel.load(new File(fileName));\n+      try {\n+        gameSelectorModel.load(new File(fileName));\n+      } catch (final Exception e) {\n+        log.log(\n+            Level.SEVERE, \"Error loading game file: \" + new File(fileName).getAbsolutePath(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwOTcxOQ=="}, "originalCommit": {"oid": "3db89602f9e9922924fa5c6010027ecc8445f812"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwMzA0Nw==", "bodyText": "This one in a future PR", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r388903047", "createdAt": "2020-03-06T13:31:25Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/panels/main/game/selector/GameFileSelector.java", "diffHunk": "@@ -32,15 +36,26 @@ private GameFileSelector() {}\n       fileDialog.setVisible(true);\n       final String fileName = fileDialog.getFile();\n       final String dirName = fileDialog.getDirectory();\n-      return Optional.ofNullable(fileName).map(name -> new File(dirName, fileName));\n+      return Optional.ofNullable(fileName)\n+          .map(name -> new File(dirName, fileName))\n+          .map(this::mapFileResult);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NDc2OA=="}, "originalCommit": {"oid": "3db89602f9e9922924fa5c6010027ecc8445f812"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwNDM0OA==", "bodyText": "It's a bit hard to wrap my head around this, this is a super weird side-effect, but ok.\nPerhaps worth annotating this method with @Nullable", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r388904348", "createdAt": "2020-03-06T13:34:06Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/panels/main/game/selector/GameFileSelector.java", "diffHunk": "@@ -32,15 +36,26 @@ private GameFileSelector() {}\n       fileDialog.setVisible(true);\n       final String fileName = fileDialog.getFile();\n       final String dirName = fileDialog.getDirectory();\n-      return Optional.ofNullable(fileName).map(name -> new File(dirName, fileName));\n+      return Optional.ofNullable(fileName)\n+          .map(name -> new File(dirName, fileName))\n+          .map(this::mapFileResult);\n     }\n \n     // Non-Mac platforms should use the normal Swing JFileChooser\n     final JFileChooser fileChooser = SaveGameFileChooser.getInstance();\n     final int selectedOption = fileChooser.showOpenDialog(owner);\n     if (selectedOption == JFileChooser.APPROVE_OPTION) {\n-      return Optional.of(fileChooser.getSelectedFile());\n+      return Optional.of(fileChooser.getSelectedFile()).map(this::mapFileResult);\n     }\n     return Optional.empty();\n   }\n+\n+  private File mapFileResult(final File file) {\n+    if (file.exists()) {\n+      return file;\n+    } else {\n+      fileDoesNotExistAction.accept(file);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b986558d428cb8b387baf829478e6e21bb658f1"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwNTIxOA==", "bodyText": "The AtomicReference is still Throwable instead of just exception", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r388905218", "createdAt": "2020-03-06T13:35:54Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/ui/background/TaskRunner.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package games.strategy.engine.framework.ui.background;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import javax.swing.SwingWorker;\n+import javax.swing.WindowConstants;\n+import lombok.Builder;\n+import org.triplea.java.function.ThrowingRunnable;\n+import org.triplea.swing.SwingComponents;\n+\n+/**\n+ * Runs a background task with a wait dialog in the foreground. Similar to {@see\n+ * BackgroundTaskRunner} except:\n+ *\n+ * <ul>\n+ *   <li>Wait dialog can be closed.\n+ *   <li>Does not throw exceptions, instead invokes an exception handler\n+ * </ul>\n+ *\n+ * @param <E> Exception type that can be thrown by the background task.\n+ */\n+@Builder\n+public class TaskRunner<E extends Exception> {\n+  /**\n+   * Error callback handler. The background task encounters an exception, the background task is\n+   * cancelled and this is invoked with the exception that occurred.\n+   */\n+  @Nonnull private final Consumer<E> exceptionHandler;\n+  /**\n+   * Title of the wait spinner window that is displayed to user while a background action is being\n+   * executed.\n+   */\n+  @Nonnull private final String waitDialogTitle;\n+\n+  /**\n+   * Runs a task with a closeable wait spinner dialog in the foreground. THe wait spinner closes\n+   * when the task completes. If the spinner dialog is closed, then the background task is\n+   * cancelled. If there are any exceptions encountered, the spinner dialog is closed and the {@see\n+   * exceptionHandler} {@code Consumer} property is called.\n+   *\n+   * @param backgroundAction The action to be executed.\n+   */\n+  public void run(final ThrowingRunnable<E> backgroundAction) {\n+    Preconditions.checkNotNull(backgroundAction);\n+    final AtomicReference<Throwable> exceptionRef = new AtomicReference<>();\n+\n+    // TODO: after https://github.com/triplea-game/triplea/pull/6001 is merged\n+    //   change the 'null' parent window reference to main frame.\n+    final WaitDialog waitDialog = new WaitDialog(null, waitDialogTitle);\n+    waitDialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\n+    final SwingWorker<Void, Void> worker =\n+        buildBackgroundJobRunnerWithWaitDialog(backgroundAction, exceptionRef, waitDialog);\n+    // If wait dialog is closed, then cancel the worker background job.\n+    SwingComponents.addWindowClosedListener(waitDialog, () -> worker.cancel(true));\n+\n+    worker.execute();\n+    waitDialog.setVisible(true);\n+\n+    try {\n+      @SuppressWarnings(\"unchecked\")\n+      final @Nullable E exception = (E) exceptionRef.get();\n+      if (exception != null) {\n+        exceptionHandler.accept(exception);\n+      }\n+    } catch (final ClassCastException e) {\n+      throw new AssertionError(\"Unexpected exception thrown\", e);\n+    }\n+  }\n+\n+  private SwingWorker<Void, Void> buildBackgroundJobRunnerWithWaitDialog(\n+      final ThrowingRunnable<E> backgroundAction,\n+      final AtomicReference<Throwable> exceptionRef,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b986558d428cb8b387baf829478e6e21bb658f1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwODA1Nw==", "bodyText": "I'm 99% sure a ClassCastException can only ever be thrown inside the exception handler here, so in case we catch an unchecked Exception by accident causing the exceptionHandler to trip up, this exception isn't as impossible as it seems.\nThinking about it we might want to consider explicitly passing a class object here to correctly filter out the \"unwanted\" exception types \ud83e\udd14", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r388908057", "createdAt": "2020-03-06T13:41:40Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/ui/background/TaskRunner.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package games.strategy.engine.framework.ui.background;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import javax.swing.SwingWorker;\n+import javax.swing.WindowConstants;\n+import lombok.Builder;\n+import org.triplea.java.function.ThrowingRunnable;\n+import org.triplea.swing.SwingComponents;\n+\n+/**\n+ * Runs a background task with a wait dialog in the foreground. Similar to {@see\n+ * BackgroundTaskRunner} except:\n+ *\n+ * <ul>\n+ *   <li>Wait dialog can be closed.\n+ *   <li>Does not throw exceptions, instead invokes an exception handler\n+ * </ul>\n+ *\n+ * @param <E> Exception type that can be thrown by the background task.\n+ */\n+@Builder\n+public class TaskRunner<E extends Exception> {\n+  /**\n+   * Error callback handler. The background task encounters an exception, the background task is\n+   * cancelled and this is invoked with the exception that occurred.\n+   */\n+  @Nonnull private final Consumer<E> exceptionHandler;\n+  /**\n+   * Title of the wait spinner window that is displayed to user while a background action is being\n+   * executed.\n+   */\n+  @Nonnull private final String waitDialogTitle;\n+\n+  /**\n+   * Runs a task with a closeable wait spinner dialog in the foreground. THe wait spinner closes\n+   * when the task completes. If the spinner dialog is closed, then the background task is\n+   * cancelled. If there are any exceptions encountered, the spinner dialog is closed and the {@see\n+   * exceptionHandler} {@code Consumer} property is called.\n+   *\n+   * @param backgroundAction The action to be executed.\n+   */\n+  public void run(final ThrowingRunnable<E> backgroundAction) {\n+    Preconditions.checkNotNull(backgroundAction);\n+    final AtomicReference<Throwable> exceptionRef = new AtomicReference<>();\n+\n+    // TODO: after https://github.com/triplea-game/triplea/pull/6001 is merged\n+    //   change the 'null' parent window reference to main frame.\n+    final WaitDialog waitDialog = new WaitDialog(null, waitDialogTitle);\n+    waitDialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\n+    final SwingWorker<Void, Void> worker =\n+        buildBackgroundJobRunnerWithWaitDialog(backgroundAction, exceptionRef, waitDialog);\n+    // If wait dialog is closed, then cancel the worker background job.\n+    SwingComponents.addWindowClosedListener(waitDialog, () -> worker.cancel(true));\n+\n+    worker.execute();\n+    waitDialog.setVisible(true);\n+\n+    try {\n+      @SuppressWarnings(\"unchecked\")\n+      final @Nullable E exception = (E) exceptionRef.get();\n+      if (exception != null) {\n+        exceptionHandler.accept(exception);\n+      }\n+    } catch (final ClassCastException e) {\n+      throw new AssertionError(\"Unexpected exception thrown\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b986558d428cb8b387baf829478e6e21bb658f1"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMDcxNg==", "bodyText": "This whole part as well as the constructors can be removed IMO, just to be sure no one actually tries to do something about this. \ud83e\udd37\u200d\u2642\nJust because it's deprecated doesn't mean people won't actually try to use it", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r388910716", "createdAt": "2020-03-06T13:47:11Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/util/Version.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package games.strategy.util;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Comparator;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Represents a version string. versions are of the form major.minor.point.micro\n+ *\n+ * @deprecated Do not use this class, this is here purely to allow serialization from older save\n+ *     games.\n+ */\n+@SuppressWarnings({\"MemberName\", \"UnmatchedTest\"})\n+@Deprecated\n+public final class Version implements Serializable, Comparable<Version> {\n+  private static final long serialVersionUID = -4770210855326775333L;\n+\n+  private final int m_major;\n+  private final int m_minor;\n+  private final int m_point;\n+  private final int m_micro;\n+  private final String exactVersion;\n+\n+  /** Constructs a Version object without the point and micro version, defaults those to 0. */\n+  public Version(final int major, final int minor) {\n+    this(major, minor, 0);\n+  }\n+\n+  /** Constructs a Version object without the micro version, defaults to 0. */\n+  public Version(final int major, final int minor, final int point) {\n+    this(major, minor, point, 0);\n+  }\n+\n+  /** Constructs a Version object with all version values set. */\n+  public Version(final int major, final int minor, final int point, final int micro) {\n+    this.m_major = major;\n+    this.m_minor = minor;\n+    this.m_point = point;\n+    this.m_micro = micro;\n+    exactVersion = toString();\n+  }\n+\n+  /**\n+   * version must be of the from xx.xx.xx.xx or xx.xx.xx or xx.xx or xx where xx is a positive\n+   * integer\n+   */\n+  public Version(final String version) {\n+    exactVersion = version;\n+\n+    final Matcher matcher =\n+        Pattern.compile(\"^(\\\\d+)(?:\\\\.(\\\\d+)(?:\\\\.(\\\\d+)(?:\\\\.((?:\\\\d+|dev)[^.]*))?)?)?\")\n+            .matcher(version);\n+\n+    if (matcher.find()) {\n+      m_major = Integer.parseInt(matcher.group(1));\n+      m_minor = Optional.ofNullable(matcher.group(2)).map(Integer::valueOf).orElse(0);\n+      m_point = Optional.ofNullable(matcher.group(3)).map(Integer::valueOf).orElse(0);\n+      final String microString = matcher.group(4);\n+      m_micro =\n+          \"dev\".equals(microString)\n+              ? Integer.MAX_VALUE\n+              : Optional.ofNullable(microString).map(Integer::valueOf).orElse(0);\n+      return;\n+    }\n+    throw new IllegalArgumentException(\"Invalid version String: \" + version);\n+  }\n+\n+  /**\n+   * Returns the exact and full version number. For example, if we specify: <code>\n+   * new Version(1.2.3.4.5).getMicro == 4; // true\n+   * new Version(1.2.3.4.5).toString().equals(\"1.2.3.4\"); // true\n+   * new Version(1.2.3.4.5).getExactVersion.equals(\"1.2.3.4.5\"); // true\n+   * </code>\n+   */\n+  public String getExactVersion() {\n+    // in case of deserialization, exactVersion may be null, in which case toString() it.\n+    return exactVersion != null ? exactVersion : toString();\n+  }\n+\n+  /** Returns the major version number. */\n+  public int getMajor() {\n+    return m_major;\n+  }\n+\n+  /** Returns the minor version number. */\n+  public int getMinor() {\n+    return m_minor;\n+  }\n+\n+  /** Returns the point version number. */\n+  public int getPoint() {\n+    return m_point;\n+  }\n+\n+  /** Returns the micro version number. */\n+  public int getMicro() {\n+    return m_micro;\n+  }\n+\n+  @Override\n+  public boolean equals(final @Nullable Object o) {\n+    return o instanceof Version && compareTo((Version) o) == 0;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(m_major, m_minor, m_point, m_micro);\n+  }\n+\n+  @Override\n+  public int compareTo(final Version other) {\n+    checkNotNull(other);\n+\n+    return Comparator.comparingInt(Version::getMajor)\n+        .thenComparingInt(Version::getMinor)\n+        .thenComparingInt(Version::getPoint)\n+        .thenComparingInt(Version::getMicro)\n+        .compare(this, other);\n+  }\n+\n+  /**\n+   * Indicates this version is greater than the specified version.\n+   *\n+   * @param other The version to compare.\n+   * @return {@code true} if this version is greater than the specified version; otherwise {@code\n+   *     false}.\n+   */\n+  public boolean isGreaterThan(final Version other) {\n+    checkNotNull(other);\n+\n+    return compareTo(other) > 0;\n+  }\n+\n+  /**\n+   * Indicates this version is greater than or equal to the specified version.\n+   *\n+   * @param other The version to compare.\n+   * @return {@code true} if this version is greater than or equal to the specified version;\n+   *     otherwise {@code false}.\n+   */\n+  public boolean isGreaterThanOrEqualTo(final Version other) {\n+    checkNotNull(other);\n+\n+    return compareTo(other) >= 0;\n+  }\n+\n+  /**\n+   * Indicates this version is less than the specified version.\n+   *\n+   * @param other The version to compare.\n+   * @return {@code true} if this version is less than the specified version; otherwise {@code\n+   *     false}.\n+   */\n+  public boolean isLessThan(final Version other) {\n+    checkNotNull(other);\n+\n+    return compareTo(other) < 0;\n+  }\n+\n+  /**\n+   * Returns a new version with the major, minor, and point versions from this instance and the\n+   * specified micro version.\n+   */\n+  public Version withMicro(final int micro) {\n+    return new Version(m_major, m_minor, m_point, micro);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b986558d428cb8b387baf829478e6e21bb658f1"}, "originalPosition": 172}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fbfa9023595b227c04e213800a3734d4203399d", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/3fbfa9023595b227c04e213800a3734d4203399d", "committedDate": "2020-03-06T18:58:44Z", "message": "Mark method as returning nullable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e794f440956c72500484b404444571e8aa067db", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/8e794f440956c72500484b404444571e8aa067db", "committedDate": "2020-03-06T19:02:55Z", "message": "Narrow \"exceptionRef\" generic type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNjc3OTM4", "url": "https://github.com/triplea-game/triplea/pull/6002#pullrequestreview-370677938", "createdAt": "2020-03-06T23:02:59Z", "commit": {"oid": "8e794f440956c72500484b404444571e8aa067db"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzowMjo1OVrOFzJ_lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzowMjo1OVrOFzJ_lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4NTQyOQ==", "bodyText": "My only problem with this is that we only use AssertionError for impossible conditions (like when UTF-8 is hardcoded as charset, but an exception is thrown, or when we do a switch and we checked all possible cases so the default case can never get reached). But this particular condition is very possible in practice, so I'd prefer using IllegalStateException", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r389185429", "createdAt": "2020-03-06T23:02:59Z", "author": {"login": "RoiEXLab"}, "path": "game-core/src/main/java/games/strategy/engine/framework/ui/background/TaskRunner.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package games.strategy.engine.framework.ui.background;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import javax.swing.SwingWorker;\n+import javax.swing.WindowConstants;\n+import lombok.Builder;\n+import org.triplea.java.function.ThrowingRunnable;\n+import org.triplea.swing.SwingComponents;\n+\n+/**\n+ * Runs a background task with a wait dialog in the foreground. Similar to {@see\n+ * BackgroundTaskRunner} except:\n+ *\n+ * <ul>\n+ *   <li>Wait dialog can be closed.\n+ *   <li>Does not throw exceptions, instead invokes an exception handler\n+ * </ul>\n+ *\n+ * @param <E> Exception type that can be thrown by the background task.\n+ */\n+@Builder\n+public class TaskRunner<E extends Exception> {\n+  /**\n+   * Error callback handler. The background task encounters an exception, the background task is\n+   * cancelled and this is invoked with the exception that occurred.\n+   */\n+  @Nonnull private final Consumer<E> exceptionHandler;\n+  /**\n+   * Title of the wait spinner window that is displayed to user while a background action is being\n+   * executed.\n+   */\n+  @Nonnull private final String waitDialogTitle;\n+\n+  /**\n+   * Runs a task with a closeable wait spinner dialog in the foreground. THe wait spinner closes\n+   * when the task completes. If the spinner dialog is closed, then the background task is\n+   * cancelled. If there are any exceptions encountered, the spinner dialog is closed and the {@see\n+   * exceptionHandler} {@code Consumer} property is called.\n+   *\n+   * @param backgroundAction The action to be executed.\n+   */\n+  public void run(final ThrowingRunnable<E> backgroundAction) {\n+    Preconditions.checkNotNull(backgroundAction);\n+    final AtomicReference<Throwable> exceptionRef = new AtomicReference<>();\n+\n+    // TODO: after https://github.com/triplea-game/triplea/pull/6001 is merged\n+    //   change the 'null' parent window reference to main frame.\n+    final WaitDialog waitDialog = new WaitDialog(null, waitDialogTitle);\n+    waitDialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\n+    final SwingWorker<Void, Void> worker =\n+        buildBackgroundJobRunnerWithWaitDialog(backgroundAction, exceptionRef, waitDialog);\n+    // If wait dialog is closed, then cancel the worker background job.\n+    SwingComponents.addWindowClosedListener(waitDialog, () -> worker.cancel(true));\n+\n+    worker.execute();\n+    waitDialog.setVisible(true);\n+\n+    try {\n+      @SuppressWarnings(\"unchecked\")\n+      final @Nullable E exception = (E) exceptionRef.get();\n+      if (exception != null) {\n+        exceptionHandler.accept(exception);\n+      }\n+    } catch (final ClassCastException e) {\n+      throw new AssertionError(\"Unexpected exception thrown\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwODA1Nw=="}, "originalCommit": {"oid": "2b986558d428cb8b387baf829478e6e21bb658f1"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "085753339031f33e88c274cd80977f8d0874166e", "author": {"user": {"login": "DanVanAtta", "name": "Dan Van Atta"}}, "url": "https://github.com/triplea-game/triplea/commit/085753339031f33e88c274cd80977f8d0874166e", "committedDate": "2020-03-07T01:54:33Z", "message": "Change thrown exception type to \"IllegalStateException\""}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3715, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}