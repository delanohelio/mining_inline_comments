{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3Mjg5Mzgx", "number": 7829, "title": "Create FiringGroup classes to rework how battles determine firing and targeted units", "bodyText": "This is a piece of #7823.  Currently, the firing and targeting unit detection is done in several disjointed places: MustFightBattle#fireNavalBombardment, MustFightBattle#findTargetGroupsAndFire, and FireAa.\nThis extracts the logic into functional classes (FiringGroupFilter) that take a BattleState and turn the active/alive units into a list of FiringGroups.  The FiringGroup keeps track of which units are firing on their specific targets.\nThere is a FiringGroupFilter for bombardment, aa, and other units.  These functional classes contain the same logic you can find in MustFightBattle#fireNavalBombardment, MustFightBattle#findTargetGroupsAndFire, and FireAa.\n\nTesting\n\nScreens Shots\n\nAdditional Notes to Reviewer\n\nRelease Note", "createdAt": "2020-10-03T15:00:30Z", "url": "https://github.com/triplea-game/triplea/pull/7829", "merged": true, "mergeCommit": {"oid": "7ca72a99cb3088064325acdad2b8cd0522556c9d"}, "closed": true, "closedAt": "2020-10-11T18:40:53Z", "author": {"login": "trevan"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdO8IywgH2gAyNDk3Mjg5MzgxOjc2NWNhZGIxZjU2YmMzMTczNWRmZjEzYjkzMmFlYTk1NTQ3MGUzY2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdRj25LgFqTUwNjIwNTcwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/765cadb1f56bc31735dff13b932aea955470e3cb", "committedDate": "2020-10-03T15:16:05Z", "message": "Create FiringGroup classes to rework how battles determine firing and targeted units"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27068bcc36d92fe074496f5eadfeecd55e73dfe3", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/27068bcc36d92fe074496f5eadfeecd55e73dfe3", "committedDate": "2020-10-03T14:46:02Z", "message": "Create FiringGroup classes to rework how battles determine firing and targeted units"}, "afterCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/765cadb1f56bc31735dff13b932aea955470e3cb", "committedDate": "2020-10-03T15:16:05Z", "message": "Create FiringGroup classes to rework how battles determine firing and targeted units"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTY3OTk0", "url": "https://github.com/triplea-game/triplea/pull/7829#pullrequestreview-501567994", "createdAt": "2020-10-03T19:13:13Z", "commit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxOToxMzoxNFrOHcDLDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxOTozOToyOFrOHcDSkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDE1OA==", "bodyText": "This seems to imply a different object semantic, perhaps even a different object. WDYT of something like SuicideOnHitFiringGroup? Would it simplify the eventual usages?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499174158", "createdAt": "2020-10-03T19:13:14Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDI3Ng==", "bodyText": "Where is the prefix added? It's an interesting comment, though scanning down it's not immediately obvious where/what this is refererring to exactly.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499174276", "createdAt": "2020-10-03T19:14:50Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup\n+   */\n+  public static List<FiringGroup> groupBySuicideOnHit(\n+      final String name, final Collection<Unit> firingUnits, final Collection<Unit> targetUnits) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    final List<Collection<Unit>> separatedBySuicide = separateSuicideOnHit(firingUnits);\n+\n+    // ensure each firing group has a unique name by adding prefixes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDgyNg==", "bodyText": "WDYT of having a constructor do the work for the isSuidideOnHit check?\nIn such a case this method would be reduced to:\n    return separatedBySuicide.stream()\n        .map(newFiringUnits -> new FiringGroup(name, newFiringUnits, targetUnits))\n        .collect(Collectors.toList());\n\nThat makes it short enough it perhaps is worth inlining.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499174826", "createdAt": "2020-10-03T19:22:35Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup\n+   */\n+  public static List<FiringGroup> groupBySuicideOnHit(\n+      final String name, final Collection<Unit> firingUnits, final Collection<Unit> targetUnits) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    final List<Collection<Unit>> separatedBySuicide = separateSuicideOnHit(firingUnits);\n+\n+    // ensure each firing group has a unique name by adding prefixes\n+    // if the firing groups have different types of suicide units\n+    if (separatedBySuicide.size() == 1) {\n+      groups.add(\n+          new FiringGroup(\n+              name,\n+              name,\n+              separatedBySuicide.get(0),\n+              targetUnits,\n+              Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())));\n+\n+    } else if (separatedBySuicide.size() == 2\n+        && Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())\n+            != Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(1).iterator().next())) {\n+      groups.addAll(\n+          generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+              name, targetUnits, separatedBySuicide));\n+\n+    } else {\n+      groups.addAll(generateFiringGroups(name, targetUnits, separatedBySuicide));\n+    }\n+    return groups;\n+  }\n+\n+  /**\n+   * Separate the suicide on hit units from the others and group them by their type. The suicide on\n+   * hit units need to fire separately so that they can be removed if they hit.\n+   */\n+  private static List<Collection<Unit>> separateSuicideOnHit(final Collection<Unit> units) {\n+\n+    final Map<UnitType, Collection<Unit>> map = new HashMap<>();\n+    for (final Unit unit : CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit())) {\n+      final UnitType type = unit.getType();\n+      if (map.containsKey(type)) {\n+        map.get(type).add(unit);\n+      } else {\n+        final Collection<Unit> unitList = new ArrayList<>();\n+        unitList.add(unit);\n+        map.put(type, unitList);\n+      }\n+    }\n+\n+    final List<Collection<Unit>> result = new ArrayList<>(map.values());\n+    final Collection<Unit> remainingUnits =\n+        CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit().negate());\n+    if (!remainingUnits.isEmpty()) {\n+      result.add(remainingUnits);\n+    }\n+    return result;\n+  }\n+\n+  /** Handle the case where there are only two groups and one is suicide and the other is not */\n+  private static List<FiringGroup> generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+      final String name,\n+      final Collection<Unit> targetUnits,\n+      final List<Collection<Unit>> separatedBySuicide) {\n+    final List<FiringGroup> groups = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDk1Nw==", "bodyText": "This param is interesting List<Collection<Unit>>. I wonder a bit what the ordering of the list is. If not ordered, then should it be just a Collection? That makes me wonder further if this would be better as a Map<?, Collection<Unit>>\nFor map key, if an enum would perhaps do well, something like FiringGroupType { SUICIDE_ON_HIT, STANDARD }\nWDYT?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499174957", "createdAt": "2020-10-03T19:24:38Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup\n+   */\n+  public static List<FiringGroup> groupBySuicideOnHit(\n+      final String name, final Collection<Unit> firingUnits, final Collection<Unit> targetUnits) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    final List<Collection<Unit>> separatedBySuicide = separateSuicideOnHit(firingUnits);\n+\n+    // ensure each firing group has a unique name by adding prefixes\n+    // if the firing groups have different types of suicide units\n+    if (separatedBySuicide.size() == 1) {\n+      groups.add(\n+          new FiringGroup(\n+              name,\n+              name,\n+              separatedBySuicide.get(0),\n+              targetUnits,\n+              Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())));\n+\n+    } else if (separatedBySuicide.size() == 2\n+        && Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())\n+            != Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(1).iterator().next())) {\n+      groups.addAll(\n+          generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+              name, targetUnits, separatedBySuicide));\n+\n+    } else {\n+      groups.addAll(generateFiringGroups(name, targetUnits, separatedBySuicide));\n+    }\n+    return groups;\n+  }\n+\n+  /**\n+   * Separate the suicide on hit units from the others and group them by their type. The suicide on\n+   * hit units need to fire separately so that they can be removed if they hit.\n+   */\n+  private static List<Collection<Unit>> separateSuicideOnHit(final Collection<Unit> units) {\n+\n+    final Map<UnitType, Collection<Unit>> map = new HashMap<>();\n+    for (final Unit unit : CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit())) {\n+      final UnitType type = unit.getType();\n+      if (map.containsKey(type)) {\n+        map.get(type).add(unit);\n+      } else {\n+        final Collection<Unit> unitList = new ArrayList<>();\n+        unitList.add(unit);\n+        map.put(type, unitList);\n+      }\n+    }\n+\n+    final List<Collection<Unit>> result = new ArrayList<>(map.values());\n+    final Collection<Unit> remainingUnits =\n+        CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit().negate());\n+    if (!remainingUnits.isEmpty()) {\n+      result.add(remainingUnits);\n+    }\n+    return result;\n+  }\n+\n+  /** Handle the case where there are only two groups and one is suicide and the other is not */\n+  private static List<FiringGroup> generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+      final String name,\n+      final Collection<Unit> targetUnits,\n+      final List<Collection<Unit>> separatedBySuicide) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NTE2Mg==", "bodyText": "Will we always be guaranteed to have a first unit in: newFiringUnits.iterator().next()?\nI do not know, maybe there is some code earlier that guarantees this, however it seems like a pretty strong precondition that is not necessarily documented (hopefully enforced). If we convert the incoming list to a map, that would resolve this problem as you would not need to check any of the unit elements to determine if they are 'suicide on hit', you could retrieve them directly from the input map.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499175162", "createdAt": "2020-10-03T19:26:50Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup\n+   */\n+  public static List<FiringGroup> groupBySuicideOnHit(\n+      final String name, final Collection<Unit> firingUnits, final Collection<Unit> targetUnits) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    final List<Collection<Unit>> separatedBySuicide = separateSuicideOnHit(firingUnits);\n+\n+    // ensure each firing group has a unique name by adding prefixes\n+    // if the firing groups have different types of suicide units\n+    if (separatedBySuicide.size() == 1) {\n+      groups.add(\n+          new FiringGroup(\n+              name,\n+              name,\n+              separatedBySuicide.get(0),\n+              targetUnits,\n+              Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())));\n+\n+    } else if (separatedBySuicide.size() == 2\n+        && Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())\n+            != Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(1).iterator().next())) {\n+      groups.addAll(\n+          generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+              name, targetUnits, separatedBySuicide));\n+\n+    } else {\n+      groups.addAll(generateFiringGroups(name, targetUnits, separatedBySuicide));\n+    }\n+    return groups;\n+  }\n+\n+  /**\n+   * Separate the suicide on hit units from the others and group them by their type. The suicide on\n+   * hit units need to fire separately so that they can be removed if they hit.\n+   */\n+  private static List<Collection<Unit>> separateSuicideOnHit(final Collection<Unit> units) {\n+\n+    final Map<UnitType, Collection<Unit>> map = new HashMap<>();\n+    for (final Unit unit : CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit())) {\n+      final UnitType type = unit.getType();\n+      if (map.containsKey(type)) {\n+        map.get(type).add(unit);\n+      } else {\n+        final Collection<Unit> unitList = new ArrayList<>();\n+        unitList.add(unit);\n+        map.put(type, unitList);\n+      }\n+    }\n+\n+    final List<Collection<Unit>> result = new ArrayList<>(map.values());\n+    final Collection<Unit> remainingUnits =\n+        CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit().negate());\n+    if (!remainingUnits.isEmpty()) {\n+      result.add(remainingUnits);\n+    }\n+    return result;\n+  }\n+\n+  /** Handle the case where there are only two groups and one is suicide and the other is not */\n+  private static List<FiringGroup> generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+      final String name,\n+      final Collection<Unit> targetUnits,\n+      final List<Collection<Unit>> separatedBySuicide) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    for (final Collection<Unit> newFiringUnits : separatedBySuicide) {\n+      final boolean isSuicideOnHit =\n+          Matches.unitIsSuicideOnHit().test(newFiringUnits.iterator().next());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NTQ3Mw==", "bodyText": "Couple questions:\n\nCould you explain why an interface \"alias\" is helpful?\nIs the output list ordered?\n\nA filter will typically exclude or include items. My presumption is that this is more of a sieve, that we are not losing any elements but instead are grouping them. Is that correct? If so, perhaps this would be better named as a Splitter, or as a Sorter.  OTOH - If we do not need an interface alias, then the naming problem would drop away.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499175473", "createdAt": "2020-10-03T19:30:37Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroupFilter.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/** Converts the BattleState into a list of FiringGroups */\n+public interface FiringGroupFilter extends Function<BattleState, List<FiringGroup>> {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NTkwMw==", "bodyText": "For consideration, Effective Java 3, page 200:", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499175903", "createdAt": "2020-10-03T19:36:52Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroupFilter.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/** Converts the BattleState into a list of FiringGroups */\n+public interface FiringGroupFilter extends Function<BattleState, List<FiringGroup>> {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NTQ3Mw=="}, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NjA4MA==", "bodyText": "If there were a map of firing group by type, then FiringGroup would not need the suicideOnHit boolean.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499176080", "createdAt": "2020-10-03T19:39:28Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup\n+   */\n+  public static List<FiringGroup> groupBySuicideOnHit(\n+      final String name, final Collection<Unit> firingUnits, final Collection<Unit> targetUnits) {\n+    final List<FiringGroup> groups = new ArrayList<>();\n+    final List<Collection<Unit>> separatedBySuicide = separateSuicideOnHit(firingUnits);\n+\n+    // ensure each firing group has a unique name by adding prefixes\n+    // if the firing groups have different types of suicide units\n+    if (separatedBySuicide.size() == 1) {\n+      groups.add(\n+          new FiringGroup(\n+              name,\n+              name,\n+              separatedBySuicide.get(0),\n+              targetUnits,\n+              Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())));\n+\n+    } else if (separatedBySuicide.size() == 2\n+        && Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(0).iterator().next())\n+            != Matches.unitIsSuicideOnHit().test(separatedBySuicide.get(1).iterator().next())) {\n+      groups.addAll(\n+          generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+              name, targetUnits, separatedBySuicide));\n+\n+    } else {\n+      groups.addAll(generateFiringGroups(name, targetUnits, separatedBySuicide));\n+    }\n+    return groups;\n+  }\n+\n+  /**\n+   * Separate the suicide on hit units from the others and group them by their type. The suicide on\n+   * hit units need to fire separately so that they can be removed if they hit.\n+   */\n+  private static List<Collection<Unit>> separateSuicideOnHit(final Collection<Unit> units) {\n+\n+    final Map<UnitType, Collection<Unit>> map = new HashMap<>();\n+    for (final Unit unit : CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit())) {\n+      final UnitType type = unit.getType();\n+      if (map.containsKey(type)) {\n+        map.get(type).add(unit);\n+      } else {\n+        final Collection<Unit> unitList = new ArrayList<>();\n+        unitList.add(unit);\n+        map.put(type, unitList);\n+      }\n+    }\n+\n+    final List<Collection<Unit>> result = new ArrayList<>(map.values());\n+    final Collection<Unit> remainingUnits =\n+        CollectionUtils.getMatches(units, Matches.unitIsSuicideOnHit().negate());\n+    if (!remainingUnits.isEmpty()) {\n+      result.add(remainingUnits);\n+    }\n+    return result;\n+  }\n+\n+  /** Handle the case where there are only two groups and one is suicide and the other is not */\n+  private static List<FiringGroup> generateFiringGroupsWithOneSuicideAndOneNonSuicide(\n+      final String name,\n+      final Collection<Unit> targetUnits,\n+      final List<Collection<Unit>> separatedBySuicide) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NDk1Nw=="}, "originalCommit": {"oid": "765cadb1f56bc31735dff13b932aea955470e3cb"}, "originalPosition": 116}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49eed1269ca5993cb8ac2e343c5b4cf83db3b11d", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/49eed1269ca5993cb8ac2e343c5b4cf83db3b11d", "committedDate": "2020-10-03T23:01:49Z", "message": "Rework FiringGroup and rename Filter -> Splitter per review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/e160d341f6c60ecf5297aad9ab26ac5a524dc2dd", "committedDate": "2020-10-04T00:54:42Z", "message": "Reduce cognitive complexity in FiringGroup#generateName"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTgzMzI1", "url": "https://github.com/triplea-game/triplea/pull/7829#pullrequestreview-501583325", "createdAt": "2020-10-04T01:01:08Z", "commit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMTowMTowOFrOHcEb4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMTowOTowOVrOHcEdbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5NDg1MQ==", "bodyText": "The original logic that this is based off can be found at MustFightBattle#fireNavalBombardment (\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java\n    \n    \n         Line 1462\n      in\n      e160d34\n    \n    \n    \n    \n\n        \n          \n           public void fireNavalBombardment(final IDelegateBridge bridge) { \n        \n    \n  \n\n) and MustFightBattle#fire (\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java\n    \n    \n         Line 1497\n      in\n      e160d34\n    \n    \n    \n    \n\n        \n          \n           protected void fire( \n        \n    \n  \n\n).", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499194851", "createdAt": "2020-10-04T01:01:08Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroupSplitterBombard.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.NAVAL_BOMBARD;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Create naval bombardment firing groups\n+ *\n+ * <p>The firing groups are separated by isSuicideOnHit\n+ */\n+@Value(staticConstructor = \"of\")\n+public class FiringGroupSplitterBombard implements Function<BattleState, List<FiringGroup>> {\n+\n+  @Override\n+  public List<FiringGroup> apply(final BattleState battleState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5NDk2Mg==", "bodyText": "The original logic that this is based off of is in MustFightBattle#updateOffensiveAaUnits (\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java\n    \n    \n         Line 928\n      in\n      e160d34\n    \n    \n    \n    \n\n        \n          \n           private void updateOffensiveAaUnits() { \n        \n    \n  \n\n), MustFightBattle#updateDefensiveAaUnits (\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java\n    \n    \n         Line 949\n      in\n      e160d34\n    \n    \n    \n    \n\n        \n          \n           private void updateDefendingAaUnits() { \n        \n    \n  \n\n), FireAa#FireAa (\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/FireAa.java\n    \n    \n         Line 66\n      in\n      e160d34\n    \n    \n    \n    \n\n        \n          \n           FireAa( \n        \n    \n  \n\n), and FireAa#execute (\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/FireAa.java\n    \n    \n         Line 100\n      in\n      e160d34\n    \n    \n    \n    \n\n        \n          \n           public void execute(final ExecutionStack stack, final IDelegateBridge bridge) { \n        \n    \n  \n\n).", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499194962", "createdAt": "2020-10-04T01:03:17Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/aa/FiringGroupSplitterAa.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.aa;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.TechAbilityAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Creates AA and Targeted Hit firing groups\n+ *\n+ * <p>The firing groups are separated by typeAa and isSuicideOnHit\n+ */\n+@Value(staticConstructor = \"of\")\n+public class FiringGroupSplitterAa implements Function<BattleState, List<FiringGroup>> {\n+\n+  BattleState.Side side;\n+\n+  @Override\n+  public List<FiringGroup> apply(final BattleState battleState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5NTAxMQ==", "bodyText": "The original logic that this is based off of is in MustFightBattle#findTargetGroupsAndFire (\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java\n    \n    \n         Line 1638\n      in\n      e160d34\n    \n    \n    \n    \n\n        \n          \n           public void findTargetGroupsAndFire( \n        \n    \n  \n\n) and MustFightBattle#fire (\n  \n    \n      triplea/game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java\n    \n    \n         Line 1497\n      in\n      e160d34\n    \n    \n    \n    \n\n        \n          \n           protected void fire( \n        \n    \n  \n\n)", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499195011", "createdAt": "2020-10-04T01:04:38Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneral.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.general;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_FIRE_NON_SUBS;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.PredicateBuilder;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Create firing groups with units that match {@link #firingUnitPredicate}\n+ *\n+ * <p>The firing groups are separated by canNotTarget, canNotBeTargetedBy, and isSuicideOnHit\n+ */\n+@Value(staticConstructor = \"of\")\n+public class FiringGroupSplitterGeneral implements Function<BattleState, List<FiringGroup>> {\n+\n+  BattleState.Side side;\n+\n+  Predicate<Unit> firingUnitPredicate;\n+\n+  /** Name displayed in the Battle UI */\n+  String groupName;\n+\n+  @Override\n+  public List<FiringGroup> apply(final BattleState battleState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5NTI0NQ==", "bodyText": "This special named group will replace the \"Air defend non subs\" or \"Air attack non subs\" battle steps.  I mentioned this and posted images of what it will look like in the original PR #7823", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r499195245", "createdAt": "2020-10-04T01:09:09Z", "author": {"login": "trevan"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneral.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.general;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_FIRE_NON_SUBS;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.PredicateBuilder;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Create firing groups with units that match {@link #firingUnitPredicate}\n+ *\n+ * <p>The firing groups are separated by canNotTarget, canNotBeTargetedBy, and isSuicideOnHit\n+ */\n+@Value(staticConstructor = \"of\")\n+public class FiringGroupSplitterGeneral implements Function<BattleState, List<FiringGroup>> {\n+\n+  BattleState.Side side;\n+\n+  Predicate<Unit> firingUnitPredicate;\n+\n+  /** Name displayed in the Battle UI */\n+  String groupName;\n+\n+  @Override\n+  public List<FiringGroup> apply(final BattleState battleState) {\n+    final Collection<Unit> canFire =\n+        CollectionUtils.getMatches(\n+            battleState.filterUnits(ACTIVE, side),\n+            PredicateBuilder.of(firingUnitPredicate)\n+                // Remove offense allied units if allied air can not participate\n+                .andIf(\n+                    side == OFFENSE\n+                        && !Properties.getAlliedAirIndependent(battleState.getGameData()),\n+                    Matches.unitIsOwnedBy(battleState.getPlayer(side)))\n+                .build());\n+\n+    final Collection<Unit> enemyUnits =\n+        CollectionUtils.getMatches(\n+            battleState.filterUnits(ALIVE, side.getOpposite()),\n+            PredicateBuilder.of(Matches.unitIsNotInfrastructure())\n+                .andIf(side == DEFENSE, Matches.unitIsSuicideOnAttack().negate())\n+                .andIf(side == OFFENSE, Matches.unitIsSuicideOnDefense().negate())\n+                .build());\n+\n+    final List<FiringGroup> firingGroups = new ArrayList<>();\n+\n+    final List<TargetGroup> targetGroups = TargetGroup.newTargetGroups(canFire, enemyUnits);\n+\n+    if (targetGroups.size() == 1) {\n+      firingGroups.addAll(buildFiringGroups(groupName, canFire, enemyUnits, targetGroups.get(0)));\n+    } else {\n+      // General firing groups don't have individual names so find commonly used groups and\n+      // give them unique names\n+      final List<TargetGroup> airVsSubGroups =\n+          targetGroups.stream()\n+              .filter(this.filterAirVsSubTargetGroups(enemyUnits))\n+              .collect(Collectors.toList());\n+      generateNamedGroups(AIR_FIRE_NON_SUBS, firingGroups, airVsSubGroups, canFire, enemyUnits);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MzQ3NTIw", "url": "https://github.com/triplea-game/triplea/pull/7829#pullrequestreview-505347520", "createdAt": "2020-10-09T03:53:33Z", "commit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMzo1MzozM1rOHe6TOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDozMjo0OVrOHe63ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3NDUyMQ==", "bodyText": "This appears only used in test, can it be moved to a test utility or otherwise removed from the prod code?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502174521", "createdAt": "2020-10-09T03:53:33Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleStepStrings.java", "diffHunk": "@@ -9,11 +9,15 @@\n   String CASUALTIES_SUFFIX = \" casualties\";\n   String LAND_PARATROOPS = \"Land Paratroopers\";\n   String NAVAL_BOMBARDMENT = \"Naval bombardment\";\n+  String NAVAL_BOMBARD = \"naval bombardment\";\n   String SELECT_NAVAL_BOMBARDMENT_CASUALTIES = \"Select naval bombardment casualties\";\n   String REMOVE_UNESCORTED_TRANSPORTS = \"Remove unescorted transports\";\n   String SUBMERGE_SUBS_VS_AIR_ONLY = \"Submerge subs against only air units\";\n   String AIR_ATTACK_NON_SUBS = \"Air attack non subs\";\n   String AIR_DEFEND_NON_SUBS = \"Air defend non subs\";\n+  String AIR_FIRE_NON_SUBS = \"air vs non subs\";\n+  String UNITS = \"units\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3NTUzNw==", "bodyText": "Is the casing supposed to be inconsistent or just never displayed to users and so it does not matter? I notice that most of the step strings are capitalized.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502175537", "createdAt": "2020-10-09T03:55:15Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/BattleStepStrings.java", "diffHunk": "@@ -9,11 +9,15 @@\n   String CASUALTIES_SUFFIX = \" casualties\";\n   String LAND_PARATROOPS = \"Land Paratroopers\";\n   String NAVAL_BOMBARDMENT = \"Naval bombardment\";\n+  String NAVAL_BOMBARD = \"naval bombardment\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3NjQ0Mg==", "bodyText": "suicideOnHit appears to only used in test, is there a plan for it to be used in upcoming PRs?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502176442", "createdAt": "2020-10-09T03:58:25Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3Njg2NA==", "bodyText": "It's not obvious  offhand why every unit should be 'unitIsSuicideOnHit' for the whole group to be marked as such. I'm just wondering why it's not any unit, or why it's not tracked at a per-unit level even. Perhaps a comment on the variable could explain it's role in the class.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502176864", "createdAt": "2020-10-09T04:00:10Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  private FiringGroup(\n+      final String displayName,\n+      final String groupName,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> targetUnits) {\n+    this.displayName = displayName;\n+    this.groupName = groupName;\n+    this.firingUnits = firingUnits;\n+    this.targetUnits = targetUnits;\n+    this.suicideOnHit = this.firingUnits.stream().allMatch(Matches.unitIsSuicideOnHit());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3NzMzMg==", "bodyText": "I wonder if callers could just avoid mutating the return value and/or copy as needed. If we can skip the defensive copy, we can have a performance improvement and simpler code in this class as a simpler getter would do.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502177332", "createdAt": "2020-10-09T04:02:26Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  private FiringGroup(\n+      final String displayName,\n+      final String groupName,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> targetUnits) {\n+    this.displayName = displayName;\n+    this.groupName = groupName;\n+    this.firingUnits = firingUnits;\n+    this.targetUnits = targetUnits;\n+    this.suicideOnHit = this.firingUnits.stream().allMatch(Matches.unitIsSuicideOnHit());\n+  }\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3NzQ3Ng==", "bodyText": "The concept of being kept around is not very well defined. Would you mind making this comment more specific, more defined?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502177476", "createdAt": "2020-10-09T04:03:12Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  private FiringGroup(\n+      final String displayName,\n+      final String groupName,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> targetUnits) {\n+    this.displayName = displayName;\n+    this.groupName = groupName;\n+    this.firingUnits = firingUnits;\n+    this.targetUnits = targetUnits;\n+    this.suicideOnHit = this.firingUnits.stream().allMatch(Matches.unitIsSuicideOnHit());\n+  }\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3ODE4Mw==", "bodyText": "I think this comment is more of an implementation note. Ideally this class is designed so that it is generic and has a role, a function, and is not aware of limitations around it. IF this class is responsible for tracking units that are still alive, perhaps that can just be cleanly documented in the class javadoc? AS-is, it's a bit odd to see this note, I'm not sure if it really answers questions, seems like if you have context then it makes more sense but otherwise is a bit confusing.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502178183", "createdAt": "2020-10-09T04:06:28Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  private FiringGroup(\n+      final String displayName,\n+      final String groupName,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> targetUnits) {\n+    this.displayName = displayName;\n+    this.groupName = groupName;\n+    this.firingUnits = firingUnits;\n+    this.targetUnits = targetUnits;\n+    this.suicideOnHit = this.firingUnits.stream().allMatch(Matches.unitIsSuicideOnHit());\n+  }\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3OTIwMQ==", "bodyText": "nit, not sure this @return javadoc adds much, restates the code. We are not publishing library code, anyone reading the javadoc will likely be reading the javadoc in the class file at the same time. I think this @return can perhaps be removed or otherwise should describe any invariants that would be true of the return value. For example, it is a list, what is the ordering of the list? Are there constraints on the size of the list. Also, will the firigin group be a collection of the firing units, or the target units, or both?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502179201", "createdAt": "2020-10-09T04:10:58Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  private FiringGroup(\n+      final String displayName,\n+      final String groupName,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> targetUnits) {\n+    this.displayName = displayName;\n+    this.groupName = groupName;\n+    this.firingUnits = firingUnits;\n+    this.targetUnits = targetUnits;\n+    this.suicideOnHit = this.firingUnits.stream().allMatch(Matches.unitIsSuicideOnHit());\n+  }\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3OTM4Nw==", "bodyText": "I am a bit confused though, suicideOnHit already implies a specific unit type, right? If we are grouping by unit type, then don't we automatically also group by suicideOnHit too?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502179387", "createdAt": "2020-10-09T04:11:53Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);\n+\n+  String displayName;\n+  String groupName;\n+  Collection<Unit> firingUnits;\n+  Collection<Unit> targetUnits;\n+  boolean suicideOnHit;\n+\n+  private FiringGroup(\n+      final String displayName,\n+      final String groupName,\n+      final Collection<Unit> firingUnits,\n+      final Collection<Unit> targetUnits) {\n+    this.displayName = displayName;\n+    this.groupName = groupName;\n+    this.firingUnits = firingUnits;\n+    this.targetUnits = targetUnits;\n+    this.suicideOnHit = this.firingUnits.stream().allMatch(Matches.unitIsSuicideOnHit());\n+  }\n+\n+  public Collection<Unit> getTargetUnits() {\n+    return Collections.unmodifiableCollection(targetUnits);\n+  }\n+\n+  public Collection<Unit> getFiringUnits() {\n+    return Collections.unmodifiableCollection(firingUnits);\n+  }\n+\n+  /**\n+   * Keeps alive units around\n+   *\n+   * <p>Units unfortunately don't track their own status so the list of targets needs to be updated\n+   * as the battle progresses.\n+   *\n+   * @param aliveUnits Units that are still alive\n+   */\n+  public void retainAliveTargets(final Collection<Unit> aliveUnits) {\n+    targetUnits.retainAll(aliveUnits);\n+  }\n+\n+  /**\n+   * Splits up the firingUnits by suicideOnHit status and groups them by unit type\n+   *\n+   * @param name Name of the firing units\n+   * @param firingUnits Collection of units that are firing\n+   * @param targetUnits Collection of units that are being hit\n+   * @return List of FiringGroup", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE3OTIwMQ=="}, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MTExNA==", "bodyText": "Creating a fake unit type seems to contradict the unit type datatype (SRP violation). The method that uses this I think probably would do better to return a first class data structure, something like:\n\nclass SuicideOnHitSortedFiringGroups {\n     Map<UnitType, FiringGroup> suicideOnHitFiringGroups;\n     Collection<Unit> nonSuicideOnHitFiringGroups;;\n}\n\nWDYT?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502181114", "createdAt": "2020-10-09T04:19:59Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroup.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimap;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.delegate.Matches;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Group of units that are firing on targets\n+ *\n+ * <p>If the group is suicideOnHit, then all of the units should have the same unit type\n+ */\n+@Value\n+public class FiringGroup {\n+\n+  private static final UnitType NON_SUICIDE_MULTIMAP_KEY = new UnitType(\"nonsuicide\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MTYwMw==", "bodyText": "nit, would 'bombarindUnits' be a more descriptive name here? Perhaps even consider inlining it to avoid the intermediate variable?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502181603", "createdAt": "2020-10-09T04:22:04Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/FiringGroupSplitterBombard.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package games.strategy.triplea.delegate.battle.steps.fire;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.NAVAL_BOMBARD;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Create naval bombardment firing groups\n+ *\n+ * <p>The firing groups are separated by isSuicideOnHit\n+ */\n+@Value(staticConstructor = \"of\")\n+public class FiringGroupSplitterBombard implements Function<BattleState, List<FiringGroup>> {\n+\n+  @Override\n+  public List<FiringGroup> apply(final BattleState battleState) {\n+    final Collection<Unit> canFire = battleState.getBombardingUnits();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MTk2NQ==", "bodyText": "For the splitter class, it would be nice to see some more detail in the javadoc to explain what characteristics would be true of the output List<FiringGroup>. I'm not really sure what \"Targeted Hit firing groups\" are.\nPerhaps we can/should add 'targeted hit' to the glossary?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502181965", "createdAt": "2020-10-09T04:23:57Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/aa/FiringGroupSplitterAa.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.aa;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.TechAbilityAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Creates AA and Targeted Hit firing groups", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MjMwMQ==", "bodyText": "The logic in here is really heavy. Do you have enough context where you could readily add some comments to guide a reader in understanding what this code is doing?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502182301", "createdAt": "2020-10-09T04:25:27Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/aa/FiringGroupSplitterAa.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.aa;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.TechAbilityAttachment;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import lombok.Value;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Creates AA and Targeted Hit firing groups\n+ *\n+ * <p>The firing groups are separated by typeAa and isSuicideOnHit\n+ */\n+@Value(staticConstructor = \"of\")\n+public class FiringGroupSplitterAa implements Function<BattleState, List<FiringGroup>> {\n+\n+  BattleState.Side side;\n+\n+  @Override\n+  public List<FiringGroup> apply(final BattleState battleState) {\n+    final Map<String, Set<UnitType>> airborneTechTargetsAllowed =\n+        side == DEFENSE\n+            ? TechAbilityAttachment.getAirborneTargettedByAa(\n+                battleState.getPlayer(side.getOpposite()), battleState.getGameData())\n+            : Map.of();\n+\n+    final Collection<Unit> aaUnits =\n+        CollectionUtils.getMatches(\n+            battleState.filterUnits(ACTIVE, side),\n+            Matches.unitIsAaThatCanFire(\n+                battleState.filterUnits(ALIVE, side.getOpposite()),\n+                airborneTechTargetsAllowed,\n+                battleState.getPlayer(side.getOpposite()),\n+                Matches.unitIsAaForCombatOnly(),\n+                battleState.getStatus().getRound(),\n+                side == DEFENSE,\n+                battleState.getGameData()));\n+\n+    final List<String> aaTypes = UnitAttachment.getAllOfTypeAas(aaUnits);\n+\n+    final Collection<Unit> validTargetUnits =\n+        CollectionUtils.getMatches(\n+            battleState.filterUnits(ALIVE, side.getOpposite()),\n+            Matches.unitIsNotInfrastructure().and(Matches.unitIsBeingTransported().negate()));\n+\n+    final List<FiringGroup> firingGroups = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzE2Mw==", "bodyText": "It's a bit odd to have a generic predicate and for this class to know how the firing groups are going to be split.\nIs the predicate acting as a filter to remove units from the firing groups, or is the predicate more acting at the firing group level?\nThe firing predicate is a bit concerning as I wonder if we are too abstract here, too complex. Could the caller apply the predicate rather than passing it in? I'm wondering if a caller would have to know a great deal about this implementation to be able to reasonably pass a good predicate to this class.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502183163", "createdAt": "2020-10-09T04:29:40Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneral.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.general;\n+\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ACTIVE;\n+import static games.strategy.triplea.delegate.battle.BattleState.UnitBattleFilter.ALIVE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_FIRE_NON_SUBS;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.Properties;\n+import games.strategy.triplea.delegate.Matches;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import org.triplea.java.PredicateBuilder;\n+import org.triplea.java.collections.CollectionUtils;\n+\n+/**\n+ * Create firing groups with units that match {@link #firingUnitPredicate}\n+ *\n+ * <p>The firing groups are separated by canNotTarget, canNotBeTargetedBy, and isSuicideOnHit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzgzOA==", "bodyText": "It seems we are testing multiple behaviors at the same time here. Is the expected display name of units simply because that is the splitter parameter? Have you considered adding a set of tests to only test display name behavior?", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502183838", "createdAt": "2020-10-09T04:32:49Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneralTest.java", "diffHunk": "@@ -0,0 +1,357 @@\n+package games.strategy.triplea.delegate.battle.steps.fire.general;\n+\n+import static games.strategy.triplea.Constants.UNIT_ATTACHMENT_NAME;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.DEFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleState.Side.OFFENSE;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.AIR_FIRE_NON_SUBS;\n+import static games.strategy.triplea.delegate.battle.BattleStepStrings.UNITS;\n+import static games.strategy.triplea.delegate.battle.FakeBattleState.givenBattleStateBuilder;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenAnyUnit;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsAir;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitIsSea;\n+import static games.strategy.triplea.delegate.battle.steps.MockGameData.givenGameData;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.Unit;\n+import games.strategy.engine.data.UnitType;\n+import games.strategy.triplea.attachments.UnitAttachment;\n+import games.strategy.triplea.delegate.battle.steps.fire.FiringGroup;\n+import java.util.List;\n+import java.util.Set;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class FiringGroupSplitterGeneralTest {\n+\n+  @Mock GamePlayer attacker;\n+  @Mock GamePlayer defender;\n+\n+  @Test\n+  void oneFiringUnitVsOneTargetableUnitMakesOneFiringGroup() {\n+    final Unit targetUnit = givenAnyUnit();\n+    final Unit fireUnit = givenAnyUnit();\n+\n+    final List<FiringGroup> firingGroups =\n+        FiringGroupSplitterGeneral.of(OFFENSE, unit -> true, UNITS)\n+            .apply(\n+                givenBattleStateBuilder()\n+                    .gameData(givenGameData().withAlliedAirIndependent(true).build())\n+                    .attacker(attacker)\n+                    .defender(defender)\n+                    .attackingUnits(List.of(fireUnit))\n+                    .defendingUnits(List.of(targetUnit))\n+                    .build());\n+\n+    assertThat(firingGroups, hasSize(1));\n+    assertThat(firingGroups.get(0).getDisplayName(), is(UNITS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e160d341f6c60ecf5297aad9ab26ac5a524dc2dd"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de3b1c5093d490a789cb605b50483fc9de902e70", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/de3b1c5093d490a789cb605b50483fc9de902e70", "committedDate": "2020-10-09T05:47:52Z", "message": "Improve the documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edd6a33af445e7170cc01a37bf932249d5b040dc", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/edd6a33af445e7170cc01a37bf932249d5b040dc", "committedDate": "2020-10-09T05:49:50Z", "message": "Remove intermediate variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bfd533c16b0cdf6d917bf3d93a7d8d936609157", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/0bfd533c16b0cdf6d917bf3d93a7d8d936609157", "committedDate": "2020-10-10T18:33:25Z", "message": "Remove creating an unmodifiableCollection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "270442c7c9889c336f90c0bd7a1a209148555ec3", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/270442c7c9889c336f90c0bd7a1a209148555ec3", "committedDate": "2020-10-10T18:40:51Z", "message": "Move members to top of class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f388871ab07f443bb05168d8c4b9557c3b603f5", "author": {"user": {"login": "trevan", "name": null}}, "url": "https://github.com/triplea-game/triplea/commit/8f388871ab07f443bb05168d8c4b9557c3b603f5", "committedDate": "2020-10-10T22:37:02Z", "message": "Move the predicate into the SplitterGeneral based on a type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MjA1NjQy", "url": "https://github.com/triplea-game/triplea/pull/7829#pullrequestreview-506205642", "createdAt": "2020-10-11T18:39:50Z", "commit": {"oid": "8f388871ab07f443bb05168d8c4b9557c3b603f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxODozOTo1MVrOHfproQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxODozOTo1MVrOHfproQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk1MDgxNw==", "bodyText": "The empty string arg seems very similar to a 'null' arg or a boolean parameter. IN general those kinds of a args are not self-explanatory and make it difficult for someone to read and use an API. Notably, you can't just use the API, you have to look up which values are allowed to then realize empty string is the way to go. One would wonder, \"can I use null here\"? In any case, it makes you look up the implementation which is a heuristic for a difficult to use API. Similar for those reading, they'll be unsure why an empty string is needed.\nGenerally the fix is to have method overloads and have an API that omits the unnecessary parameter.", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502950817", "createdAt": "2020-10-11T18:39:51Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneralTest.java", "diffHunk": "@@ -86,13 +88,60 @@ void oneWaitingToDieFiringUnitVsOneTargetableUnitMakesOneFiringGroup() {\n   }\n \n   @Test\n-  void firingUnitsAreExcludedAccordingToThePredicate() {\n+  void offensiveNormalTypeExcludesFirstStrike() {\n     final Unit targetUnit = givenAnyUnit();\n     final Unit fireUnit = givenAnyUnit();\n+    final Unit fireUnit2 = givenUnitFirstStrike();\n+\n+    final List<FiringGroup> firingGroups =\n+        FiringGroupSplitterGeneral.of(OFFENSE, FiringGroupSplitterGeneral.Type.OFFENSIVE_NORMAL, \"\")\n+            .apply(\n+                givenBattleStateBuilder()\n+                    .gameData(givenGameData().withAlliedAirIndependent(true).build())\n+                    .attacker(attacker)\n+                    .defender(defender)\n+                    .attackingUnits(List.of(fireUnit, fireUnit2))\n+                    .defendingUnits(List.of(targetUnit))\n+                    .build());\n+\n+    assertThat(firingGroups, hasSize(1));\n+    assertThat(firingGroups.get(0).getFiringUnits(), contains(fireUnit));\n+  }\n+\n+  @Test\n+  void defensiveNormalTypeExcludesFirstStrike() {\n+    final Unit targetUnit = givenAnyUnit();\n+    final Unit fireUnit = givenAnyUnit();\n+    final Unit fireUnit2 = givenUnitFirstStrike();\n+\n+    final List<FiringGroup> firingGroups =\n+        FiringGroupSplitterGeneral.of(OFFENSE, FiringGroupSplitterGeneral.Type.DEFENSIVE_NORMAL, \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f388871ab07f443bb05168d8c4b9557c3b603f5"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MjA1Njk0", "url": "https://github.com/triplea-game/triplea/pull/7829#pullrequestreview-506205694", "createdAt": "2020-10-11T18:40:28Z", "commit": {"oid": "8f388871ab07f443bb05168d8c4b9557c3b603f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxODo0MDoyOVrOHfpr_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxODo0MDoyOVrOHfpr_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk1MDkwOA==", "bodyText": "Looking at these usage examples, and in the prod code, it looks like the update to a flag instead of passing a predicate was a strong update, it is a much nicer looking API now \ud83d\udc4d", "url": "https://github.com/triplea-game/triplea/pull/7829#discussion_r502950908", "createdAt": "2020-10-11T18:40:29Z", "author": {"login": "DanVanAtta"}, "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/fire/general/FiringGroupSplitterGeneralTest.java", "diffHunk": "@@ -210,7 +283,7 @@ void excludeSuicideOnAttackTargetsIfDefense() {\n     final Unit fireUnit = givenAnyUnit();\n \n     final List<FiringGroup> firingGroups =\n-        FiringGroupSplitterGeneral.of(DEFENSE, unit -> true, \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f388871ab07f443bb05168d8c4b9557c3b603f5"}, "originalPosition": 156}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MjA1NzA5", "url": "https://github.com/triplea-game/triplea/pull/7829#pullrequestreview-506205709", "createdAt": "2020-10-11T18:40:35Z", "commit": {"oid": "8f388871ab07f443bb05168d8c4b9557c3b603f5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3865, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}